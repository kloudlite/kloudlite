name: 'github release action'
description: 'sets up kloudlite build environment'

inputs:
  github_token:
    description: "Github Token"
    required: true

  release_tag:
    description: "Github Release Tag"
    required: true

  github_ref: 
    description: "Github Ref"
    required: true

  files:
    description: "filename patterns to upload to github release"
    required: false

runs:
  using: 'composite'
  steps:
    - name: Maintain github release
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

        FORCE_COLOR: 3
        RELEASE_TAG: ${{ inputs.release_tag }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_REF: "${{ inputs.github_ref }}"
        FILES: ${{ inputs.files }}
      shell: bash
      run: |+ #javascript
        npx zx .github/actions/github-release/script.mjs

    # - name: Checking whether github release exists
    #   shell: bash
    #   env:
    #     RELEASE_TAG: ${{ inputs.release_tag }}
    #     OVERRIDE_RELEASE_ASSETS: ${{ inputs.override_release_assets }}
    #     GITHUB_TOKEN: ${{ inputs.github_token }}
    #   run: |+
    #     # as github runs this script with `bash -e -o pipefail`, need to disable it, as i am manually handling it
    #     set +e
    #     set +o pipefail
    #
    #     debug() {
    #       echo "[# DEBUG] $@"
    #     }
    #
    #     if [ "${{ inputs.debug }}" = "true" ]; then
    #       set -x
    #     fi
    #     opts=("-R" "${{ github.repository }}")
    #
    #     release=$(gh release list ${opts[@]} | tail -n +1 | awk '{print $3}' | grep -iE "$RELEASE_TAG")
    #     exit_code=$?
    #
    #     set -e
    #     set -o pipefail
    #
    #     if [ $exit_code -eq 0 ]; then
    #       echo "ðŸš€ github release_tag (${RELEASE_TAG}) already exists"
    #       if [ "$OVERRIDE_RELEASE_ASSETS" = "true" ]; then
    #         echo "deleting old release ($RELEASE_TAG)"
    #         gh release delete ${RELEASE_TAG} -y --cleanup-tag
    #         echo "old release ($RELEASE_TAG) deleted"
    #       fi
    #     fi
    #
    #     echo "ðŸš€ creating github release_tag (${RELEASE_TAG})"
    #
    #     createOpts="${opts[@]}"
    #     if [ "$OVERRIDE_RELEASE_ASSETS" = "true" ]; then
    #       createOpts+=("--prerelease")
    #     fi
    #
    #     if ! [[ -z "${{ inputs.release_title }}" ]]; then
    #       createOpts+=("--title" "'$RELEASE_TAG'")
    #     fi
    #
    #     if ! [[ -z "${{ inputs.release_notes }}" ]]; then
    #       createOpts+=("--notes" "'$RELEASE_NOTES'")
    #     else
    #       createOpts+=("--notes", "kloudlite-release $RELEASE_TAG")
    #       createOpts+=("--generate-notes")
    #     fi
    #
    #     debug "creating github release with " gh release create "$RELEASE_TAG" ${createOpts[@]}
    #     gh release create "$RELEASE_TAG" ${createOpts[@]}
    #     echo "ðŸš€ github release_tag (${RELEASE_TAG}) CREATED"
    #
    #     uploadOpts="${opts[@]}"
    #     if [ "$OVERRIDE_RELEASE_ASSETS" = "true" ]; then
    #      uploadOpts+=("--clobber")
    #     fi
    #
    #     echo "${{ inputs.files }}" | while read line
    #     do
    #       echo "uploading files with pattern '$line'"
    #       [ -z "$line" ] && continue
    #       files=$(find ${{ inputs.working_dir }} -wholename "${{ inputs.working_dir }}/$line" -type f -print0 | xargs -0)
    #       echo "files: $files"
    #
    #       if [ -z "$files" ]; then
    #         continue
    #       fi
    #
    #       gh release upload "${RELEASE_TAG}" ${uploadOpts[@]} $files
    #     done

        # BUG, sometimes i am encountering release is marked as draft, and does not get published
        # editOpts="${opts[@]}"
        # if [ "$OVERRIDE_RELEASE_ASSETS" = "true" ]; then
        #   editOpts+=("--prerelease")
        # fi
        # gh release edit ${RELEASE_TAG} --draft=false ${editOpts[@]}
