name: 'build kloudlite api action'
description: 'builds kloudlite APIs'

inputs:
  github_token:
    description: 'GitHub Token'
    required: true

  cachix_enabled:
    description: "cachix enabled"
    default: "false"

  cachix_cache_name:
    description: "cachix cache name"
    default: "kloudlite"

  cachix_auth_token:
    description: "cachix auth token"

  docker_enabled:
    description: "dokcer enabled"
    default: "false"

  git_directory:
    description: 'git directory'
    default: "."

  cache_prefix:
    description: 'cache prefix'
    default: ""

  go_mod_download:
    description: 'go mod download'
    default: false

  # APIs
  accounts-api:
    description: 'build accounts api'
    default: false

  auth-api:
    description: 'build auth api'
    default: false

  comms-api:
    description: 'build comms api'
    default: false

  console-api:
    description: 'build console api'
    default: false

  container-registry-api:
    description: 'build container-registry api'
    default: false

  gateway-api:
    description: 'build gateway api'
    default: false

  iam-api:
    description: 'build iam api'
    default: false

  infra-api:
    description: 'build infra api'
    default: false

  iot-console-api:
    description: 'build iot-console api'
    default: false

  message-office-api:
    description: 'build message-office api'
    default: false

  observability-api:
    description: 'build observability api'
    default: false

  tenant-agent:
    description: 'build tenant-agent'
    default: false

  webhook-api:
    description: 'build webhook api'
    default: false

  websocket-server-api:
    description: 'build websocket-server api'
    default: false

runs:
  using: 'composite'
  steps:
    - name: setup ENV Variables
      shell: bash
      id: env-vars
      working-directory: ${{ inputs.git_directory }}
      run: |+
        GOMODCACHE=${{github.workspace}}/actions/go-mod-cache
        GOCACHE=${{github.workspace}}/actions/go-cache
        echo "GOMODCACHE=$GOMODCACHE" >> $GITHUB_OUTPUT
        echo "GOCACHE=$GOCACHE" >> $GITHUB_OUTPUT

        echo "GOMODCACHE=$GOMODCACHE" >> $GITHUB_ENV
        echo "GOCACHE=$GOCACHE" >> $GITHUB_ENV
        echo "GOPKG_HASH=${{ hashFiles(format('{0}/go.mod', inputs.git_directory), format('{0}/go.sum', inputs.git_directory)) }}" >> $GITHUB_OUTPUT

    - name: ensures path to setup action exists
      shell: bash
      run: |+
        mkdir -p $GOMODCACHE
        ln -sf ${{ inputs.git_directory }}/.github/actions ./github-actions

    # - name: Setup Caches
    #   uses: actions/cache@v4
    #   with:
    #     path: |+
    #       ${{ env.GOMODCACHE }}
    #       ${{ env.GOCACHE }}
    #     key: go-${{ runner.os }}-${{github.repository_id}}-${{ steps.env-vars.outputs.GOPKG_HASH }}-${{ inputs.cache_prefix }}
    #     save-always: true
    #     restore-keys: go-${{ runner.os }}-${{github.repository_id}}-${{ steps.env-vars.outputs.GOPKG_HASH }}-

    - name: setup nix cache
      if: ${{ inputs.cachix_enabled == 'true' }}
      uses: ./github-actions/setup-nix-cachix/
      with:
        flake_lock: ${{ inputs.git_directory }}/flake.lock
        nix_develop_arguments: "${{ inputs.git_directory }}#default"

        cachix_cache_name: ${{ inputs.cachix_cache_name }}
        cachix_auth_token: ${{ inputs.cachix_auth_token }}

    - name: setup nix cache
      if: ${{ inputs.cachix_enabled == 'false' }}
      uses: ./github-actions/setup-nix-github/
      with:
        flake_lock: ${{ inputs.git_directory }}/flake.lock
        nix_develop_arguments: "${{ inputs.git_directory }}#default"

    - name: setup docker
      if: ${{ inputs.docker_enabled == 'true' }}
      uses: ./github-actions/setup-docker
      with:
        docker_username: ${{ github.actor }}
        docker_password: ${{ inputs.github_token }}

    - name: Create Image Tag from branch name
      if: startsWith(github.ref, 'refs/heads/release')
      shell: bash
      run: |
        set +e
        IMAGE_TAG=$(echo ${GITHUB_REF#refs/heads/} | sed 's/release-//g')
        echo "$IMAGE_TAG" | grep -i '\-nightly$'
        if [ $? -ne 0 ]; then
          IMAGE_TAG="$IMAGE_TAG-nightly"
        fi
        set -e

        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "OVERRIDE_PUSHED_IMAGE=true" >> $GITHUB_ENV

    - name: Create Image Tag from tag
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: |
        IMAGE_TAG=$(echo ${GITHUB_REF#refs/tags/})

        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "OVERRIDE_PUSHED_IMAGE=false" >> $GITHUB_ENV

    - name: go mod download
      if: ${{ inputs.go_mod_download == 'true' }}
      working-directory: ${{ inputs.git_directory }}
      shell: bash
      run: |+
        echo "### STARTING go mod download ###"
        go mod download -x
        echo "### FINSIHED go mod download ###"

        ls -al ${{ env.GOMODCACHE }}

    - name: accounts api go build cache
      if: ${{ inputs.accounts-api == 'true' }}
      uses: actions/cache@v4
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: go-${{ runner.os }}-accounts-api-${{ steps.env-vars.outputs.GOPKG_HASH }}
        save-always: true
        restore-keys: go-${{ runner.os }}-accounts-api-

    - name: accounts api
      if: ${{ inputs.accounts-api == 'true' }}
      working-directory: ${{ inputs.git_directory }}/apps/accounts
      shell: bash
      run: |
        task container:build-and-push image=ghcr.io/${{ github.repository }}/accounts:${IMAGE_TAG:-latest} upx=true override=$OVERRIDE_PUSHED_IMAGE

    - name: auth api go build cache
      if: ${{ inputs.auth-api == 'true' }}
      uses: actions/cache@v4
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: go-${{ runner.os }}-auth-api-${{ steps.env-vars.outputs.GOPKG_HASH }}
        save-always: true
        restore-keys: go-${{ runner.os }}-auth-api-

    - name: auth api
      if: ${{ inputs.auth-api == 'true' }}
      working-directory: ${{ inputs.git_directory }}/apps/auth
      shell: bash
      run: |
        task container:build-and-push image=ghcr.io/${{ github.repository }}/auth:${IMAGE_TAG:-latest} upx=true override=$OVERRIDE_PUSHED_IMAGE

    - name: comms api go build cache
      if: ${{ inputs.comms-api == 'true' }}
      uses: actions/cache@v4
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: go-${{ runner.os }}-comms-api-${{ steps.env-vars.outputs.GOPKG_HASH }}
        save-always: true
        restore-keys: go-${{ runner.os }}-comms-api-

    - name: comms api
      if: ${{ inputs.comms-api == 'true' }}
      working-directory: ${{ inputs.git_directory }}/apps/comms
      shell: bash
      run: |
        task container:build-and-push image=ghcr.io/${{ github.repository }}/comms:${IMAGE_TAG:-latest} upx=true override=$OVERRIDE_PUSHED_IMAGE

    - name: console api go build cache
      if: ${{ inputs.console-api == 'true' }}
      uses: actions/cache@v4
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: go-${{ runner.os }}-console-api-${{ steps.env-vars.outputs.GOPKG_HASH }}
        save-always: true
        restore-keys: go-${{ runner.os }}-console-api-

    - name: console api
      if: ${{ inputs.console-api == 'true' }}
      working-directory: ${{ inputs.git_directory }}/apps/console
      shell: bash
      run: |
        task container:build-and-push image=ghcr.io/${{ github.repository }}/console:${IMAGE_TAG:-latest} upx=true override=$OVERRIDE_PUSHED_IMAGE

    - name: container-registry api go build cache
      if: ${{ inputs.container-registry-api == 'true' }}
      uses: actions/cache@v4
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: go-${{ runner.os }}-container-registry-api-${{ steps.env-vars.outputs.GOPKG_HASH }}
        save-always: true
        restore-keys: go-${{ runner.os }}-container-registry-api-

    - name: container-registry api
      if: ${{ inputs.container-registry-api == 'true' }}
      working-directory: ${{ inputs.git_directory }}/apps/container-registry
      shell: bash
      run: |
        task container:build-and-push image=ghcr.io/${{ github.repository }}/container-registry:${IMAGE_TAG:-latest} upx=true override=$OVERRIDE_PUSHED_IMAGE

    - name: gateway api go build cache
      if: ${{ inputs.gateway-api == 'true' }}
      uses: actions/cache@v4
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: go-${{ runner.os }}-gateway-api-${{ steps.env-vars.outputs.GOPKG_HASH }}
        save-always: true
        restore-keys: go-${{ runner.os }}-gateway-api-

    - name: gateway api
      if: ${{ inputs.gateway-api == 'true' }}
      working-directory: ${{ inputs.git_directory }}/apps/gateway
      shell: bash
      run: |
        task container:build-and-push image=ghcr.io/${{ github.repository }}/gateway:${IMAGE_TAG:-latest} upx=true override=$OVERRIDE_PUSHED_IMAGE

    - name: iam api go build cache
      if: ${{ inputs.iam-api == 'true' }}
      uses: actions/cache@v4
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: go-${{ runner.os }}-iam-api-${{ steps.env-vars.outputs.GOPKG_HASH }}
        save-always: true
        restore-keys: go-${{ runner.os }}-iam-api-

    - name: iam api
      if: ${{ inputs.iam-api == 'true' }}
      working-directory: ${{ inputs.git_directory }}/apps/iam
      shell: bash
      run: |
        task container:build-and-push image=ghcr.io/${{ github.repository }}/iam:${IMAGE_TAG:-latest} upx=true override=$OVERRIDE_PUSHED_IMAGE

    - name: infra api go build cache
      if: ${{ inputs.infra-api == 'true' }}
      uses: actions/cache@v4
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: go-${{ runner.os }}-infra-api-${{ steps.env-vars.outputs.GOPKG_HASH }}
        save-always: true
        restore-keys: go-${{ runner.os }}-infra-api-

    - name: infra api
      if: ${{ inputs.infra-api == 'true' }}
      working-directory: ${{ inputs.git_directory }}/apps/infra
      shell: bash
      run: |
        task container:build-and-push image=ghcr.io/${{ github.repository }}/infra:${IMAGE_TAG:-latest} upx=true override=$OVERRIDE_PUSHED_IMAGE

    - name: iot-console api go build cache
      if: ${{ inputs.iot-console-api == 'true' }}
      uses: actions/cache@v4
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: go-${{ runner.os }}-iot-console-api-${{ steps.env-vars.outputs.GOPKG_HASH }}
        save-always: true
        restore-keys: go-${{ runner.os }}-iot-console-api-

    - name: iot-console api
      if: ${{ inputs.iot-console-api == 'true' }}
      working-directory: ${{ inputs.git_directory }}/apps/iot-console
      shell: bash
      run: |
        task container:build-and-push image=ghcr.io/${{ github.repository }}/iot-console:${IMAGE_TAG:-latest} upx=true override=$OVERRIDE_PUSHED_IMAGE

    - name: message-office api go build cache
      if: ${{ inputs.message-office-api == 'true' }}
      uses: actions/cache@v4
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: go-${{ runner.os }}-message-office-api-${{ steps.env-vars.outputs.GOPKG_HASH }}
        save-always: true
        restore-keys: go-${{ runner.os }}-message-office-api-

    - name: message-office api
      if: ${{ inputs.message-office-api == 'true' }}
      working-directory: ${{ inputs.git_directory }}/apps/message-office
      shell: bash
      run: |
        task container:build-and-push image=ghcr.io/${{ github.repository }}/message-office:${IMAGE_TAG:-latest} upx=true override=$OVERRIDE_PUSHED_IMAGE

    - name: observability api go build cache
      if: ${{ inputs.observability-api == 'true' }}
      uses: actions/cache@v4
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: go-${{ runner.os }}-observability-api-${{ steps.env-vars.outputs.GOPKG_HASH }}
        save-always: true
        restore-keys: go-${{ runner.os }}-observability-api-

    - name: observability api
      if: ${{ inputs.observability-api == 'true' }}
      working-directory: ${{ inputs.git_directory }}/apps/observability
      shell: bash
      run: |
        task container:build-and-push image=ghcr.io/${{ github.repository }}/observability:${IMAGE_TAG:-latest} upx=true override=$OVERRIDE_PUSHED_IMAGE

    - name: tenant-agent go build cache
      if: ${{ inputs.tenant-agent == 'true' }}
      uses: actions/cache@v4
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: go-${{ runner.os }}-tenant-agent-${{ steps.env-vars.outputs.GOPKG_HASH }}
        save-always: true
        restore-keys: go-${{ runner.os }}-tenant-agent-

    - name: tenant-agent
      if: ${{ inputs.tenant-agent == 'true' }}
      working-directory: ${{ inputs.git_directory }}/apps/tenant-agent
      shell: bash
      run: |
        task container:build-and-push image=ghcr.io/${{ github.repository }}/tenant-agent:${IMAGE_TAG:-latest} upx=true override=$OVERRIDE_PUSHED_IMAGE

    - name: webhook api go build cache
      if: ${{ inputs.webhook-api == 'true' }}
      uses: actions/cache@v4
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: go-${{ runner.os }}-webhook-api-${{ steps.env-vars.outputs.GOPKG_HASH }}
        save-always: true
        restore-keys: go-${{ runner.os }}-webhook-api-

    - name: webhook api
      if: ${{ inputs.webhook-api == 'true' }}
      working-directory: ${{ inputs.git_directory }}/apps/webhook
      shell: bash
      run: |
        task container:build-and-push image=ghcr.io/${{ github.repository }}/webhook:${IMAGE_TAG:-latest} upx=true override=$OVERRIDE_PUSHED_IMAGE

    - name: websocket-server api go build cache
      if: ${{ inputs.websocket-server-api == 'true' }}
      uses: actions/cache@v4
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: go-${{ runner.os }}-websocket-server-api-${{ steps.env-vars.outputs.GOPKG_HASH }}
        save-always: true
        restore-keys: go-${{ runner.os }}-websocket-server-api-

    - name: websocket-server api
      if: ${{ inputs.websocket-server-api == 'true' }}
      working-directory: ${{ inputs.git_directory }}/apps/websocket-server
      shell: bash
      run: |
        task container:build-and-push image=ghcr.io/${{ github.repository }}/websocket-server:${IMAGE_TAG:-latest} upx=true override=$OVERRIDE_PUSHED_IMAGE

