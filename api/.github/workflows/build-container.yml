name: build-docker-images

on:
  workflow_dispatch:

  repository_dispatch:
    types:
      - webhook

  push:
    paths:
      - "apps/**/**"
      - "pkg/**"
      - "grpc-interfaces/**"
      - "common/**"
      - "go.*"
      - ".github/workflows/**"


permissions:
  contents: read
  packages: write

jobs:
  docker-builds:
    strategy:
      matrix:
        app:
          - accounts
          - auth
          - comms
          - console
          - container-registry
          - iam
          - infra
          - worker-audit-logging
          - webhook
          - websocket-server
          - message-office
          - tenant-agent
    runs-on: ubuntu-latest
    name: Deploy to Docker Image
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Golang caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-golang-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golang-

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21.5

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install UPX
        run: |
          curl -L0 https://github.com/upx/upx/releases/download/v4.2.1/upx-4.2.1-amd64_linux.tar.xz > upx.tar.xz
          tar -xf upx.tar.xz
          sudo mv upx-4.2.1-amd64_linux/upx /usr/local/bin

      - name: Build Binary
        run: |
          cd apps/${{matrix.app}}
          task build Out=$PWD/../../.github/workflows/container-build/app
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        # uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Image Tags
        run: |
          IMAGE_TAG=$(echo ${GITHUB_REF#refs/heads/} | sed 's/release-//g')

          OVERRIDE_PUSHED_IMAGE=false

          echo "$IMAGE_TAG" | grep -i '\-nightly$'
          if [ $? -eq 0 ]; then
            OVERRIDE_PUSHED_IMAGE=true
          fi

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "OVERRIDE_PUSHED_IMAGE=$OVERRIDE_PUSHED_IMAGE" >> $GITHUB_ENV

      - name: Build & Push Image
        if: startsWith(github.ref, 'refs/heads/release')
        run: |
          image_name="ghcr.io/kloudlite/api/${{matrix.app}}"

          docker manifest inspect $image_name:$IMAGE_TAG
          if [ $? -eq 0 ]; then
            echo "image already exists"
            [ "$OVERRIDE_PUSHED_IMAGE" = "false" ] && echo "image ($image_name:$IMAGE_TAG) already exists, and override image is disable, exiting" && exit 0
          fi

          cd .github/workflows/container-build
          task go-container-build Image="$image_name:$IMAGE_TAG"
          task go-container-build Image="$image_name:commit-${GITHUB_SHA}"
