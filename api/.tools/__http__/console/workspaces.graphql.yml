---
global:
  accountName: kloudlite-dev
  projectName: sample
  projectTargetNamespace: sample
  clusterName: sample
  namespace: sample
  envTargetNamespace: "sample-nxtcoder17"
---

label: List Workspaces
query: |+
  query Core_listWorkspaces($namespace: String!, $pq: PaginationQueryArgs) {
    core_listWorkspaces(namespace: $namespace, pq: $pq) {
      edges {
        cursor
        node {
          creationTime
          accountName
          apiVersion
          kind
          metadata {
            name
            namespace
          }
          spec { 
            targetNamespace
          }
        }
      }
      pageInfo {
        endCursor
        hasNextPage
        hasPreviousPage
        startCursor
      }
      totalCount
    }
  }
variables:
  namespace: "{{.namespace}}"

---

label: Get Environment
query: |+
  query Core_getEnvironment($namespace: String!, $name: String!) {
    core_getEnvironment(namespace: $namespace, name: $name) {
      metadata {
        namespace
        name
        labels
      }
      spec {
        projectName
        targetNamespace
      }
    }
  }
variables:
  name: "default"
  namespace: "{{.projectName}}"

---

label: Create Environment
query: |+
  mutation Core_createEnvironment($env: EnvironmentIn!) {
    core_createEnvironment(env: $env) {
      apiVersion
      kind
      spec {
        projectName
        targetNamespace
      }
      syncStatus {
        state
        lastSyncedAt
        generation
        action
        syncScheduledAt
      }
    }
  }
variables:
  env:
    metadata:
      name: sample
      namespace: "{{.projectTargetNamespace}}"
    spec:
      projectName: "{{.projectName}}"
      targetNamespace: "{{.envTargetNamespace}}"
---

label: Update Environment
query: |+
  mutation Core_updateEnvironment($env: EnvironmentIn!) {
    core_updateEnvironment(env: $env) {
      syncStatus {
        action
        generation
        lastSyncedAt
        state
        syncScheduledAt
      }
      status {
        isReady
        displayVars
        checks
      }
      kind
      apiVersion
      spec {
        projectName
      }
      metadata {
        name
        namespace
      }
    }
  }
variables:
  env:
    metadata:
      name: sample
      namespace: "{{.projectTargetNamespace}}"
    spec:
      projectName: "{{.projectName}}"
      targetNamespace: "{{.envTargetNamespace}}"
---

label: Delete Environment
query: |+
  mutation Core_deleteEnvironment($name: String!, $namespace: String!) {
    core_deleteEnvironment(name: $name, namespace: $namespace)
  }
variables:
  name: "sample"
  namespace: "{{.namespace}}"
---

label: Resync Environment
query: |+
  query Query($namespace: String!, $name: String!) {
    core_resyncEnvironment(namespace: $namespace, name: $name)
  }
variables:
  namespace: '{{.projectTargetNamespace}}'
  # name: "{{.name}}"
  name: "default"

---
