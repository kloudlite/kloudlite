---
global:
  accountName: kloudlite-dev
  clusterName: sample-cluster

  providerSecretName: "aws-creds"
  providerSecretNamespace: "kl-account-kloudlite-dev"

  awsAccountId: "855999427630"

---

label: Create Cluster
query: |+
  mutation Infra_createCluster($cluster: ClusterIn!) {
    infra_createCluster(cluster: $cluster) {
      metadata {
        name
      }
      spec {
        accountName
      }
    }
  }
variables:
  cluster:
    displayName: "Sample Cluster"
    metadata:
      name: "{{.clusterName}}"
    spec:
      cloudflareEnabled: true
      availabilityMode: dev
      credentialsRef:
        name: "{{.providerSecretName}}"
        namespace: "{{.providerSecretNamespace}}"
      cloudProvider: aws
      aws:
        awsAccountId: "{{.awsAccountId}}"
        region: ap-south-1
        k3sMasters:
          instanceType: c6a.large
          iamInstanceProfileRole: "EC2StorageAccess"

---

label: List Clusters
query: |+
  query Infra_listClusters($search: SearchCluster, $pagination: CursorPaginationIn) {
    infra_listClusters(search: $search, pagination: $pagination) {
      edges {
        cursor
        node {
          id
          kind
          metadata {
            name
            namespace
          }
          status {
            checks
          }
          # clusterToken
          markedForDeletion
          syncStatus {
            action
            error
            lastSyncedAt
            state
            syncScheduledAt
            recordVersion
          }
        }
      }
    }
  }
variables:
  search: 
    text:
      matchType: regex
      regex: "ple.*"
  pagination:
    first: 10

---

label: Get Cluster
query: |+
  query Query($name: String!) {
    infra_getCluster(name: $name) {
      kind
      metadata {
        name
      }
      recordVersion
      markedForDeletion
      spec {
        cloudProvider
        credentialsRef {
          name
          namespace
        }
      }
    }
  }
variables:
  name: "{{.clusterName}}"

---

label: Update Cluster
query: |+
  mutation Infra_updateCluster($cluster: ClusterIn!) {
    infra_updateCluster(cluster: $cluster) {
      metadata {
        name
      }
      spec {
        accountName
      }
    }
  }
variables:
  cluster:
    displayName: "Sample Cluster"
    metadata:
      name: "{{.clusterName}}"
    spec:
      accountName: "{{.accountName}}"
      accountId: "{{.accountId}}"
      credentialsRef:
        name: "{{.providerSecretName}}"
        namespace: "{{.providerSecretNamespace}}"
      availabilityMode: HA
      cloudProvider: aws
      aws:
        region: ap-south-1
        ami: ami-06d146e85d1709abb
        iamInstanceProfileRole: EC2StorageAccess
        ec2NodesConfig:
          master-1:
            instanceType: c6a.large
            availabilityZone: ap-south-1a
            rootVolumeSize: 20
            role: primary-master
          master-2:
            instanceType: c6a.large
            availabilityZone: ap-south-1b
            rootVolumeSize: 20
            role: secondary-master
          master-3:
            instanceType: c6a.large
            availabilityZone: ap-south-1c
            rootVolumeSize: 20
            role: secondary-master
          agent-1:
            instanceType: c6a.large
            availabilityZone: ap-south-1c
            rootVolumeSize: 20
            role: agent
        spotSettings:
          spotFleetTaggingRoleName: aws-ec2-spot-fleet-tagging-role
        spotNodesConfig:
          spot-1:
            vCpu:
              min: 1
              max: 2
            memPerVCpu:
              min: 2
              max: 4
            rootVolumeSize: 50
          spot-2:
            vCpu:
              min: 1
              max: 2
            memPerVCpu:
              min: 2
              max: 4
            rootVolumeSize: 50
      disableSSH: false

---

label: Delete Cluster
query: |+
  mutation Infra_deleteCluster($name: String!) {
    infra_deleteCluster(name: $name)
  }
variables:
  name: "{{.clusterName}}"

---


