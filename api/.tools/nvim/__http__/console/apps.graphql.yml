---
global:
  projectName: "sample"
  envName: "sample2"
  name: sample-app
---

label: List Apps
query: |+
  query Core_listApps($projectName: String!, $envName: String!) {
    core_listApps(projectName: $projectName, envName: $envName) {
      edges {
        node {
          id
          environmentName
          lastUpdatedBy {
            userEmail
            userId
            userName
          }
          projectName
          recordVersion
          kind
          displayName
          accountName
        }
      }
    }
  }
variables:
  projectName: "{{.projectName}}"
  envName: "{{.envName}}"
---

label: Get App
query: |+
  query Core_getApp($project: ProjectId!, $scope: WorkspaceOrEnvId!, $name: String!) {
    core_getApp(project: $project, scope: $scope, name: $name) {
      metadata {
        name
        deletionTimestamp
      }
      spec {
        containers{
          name
          image
        }
      }
    }
  }
variables:
  project:
    type: name
    value: sample
  scope:
    # type: workspaceName
    # value: sample
    type: workspaceTargetNamespace
    value: "{{.namespace}}"
  # namespace: "{{.namespace}}"
  name: "{{.name}}"
---

label: Create App
query: |+
  mutation Core_createApp($projectName: String!, $envName: String!, $app: AppIn!) {
    core_createApp(projectName: $projectName, envName: $envName, app: $app) {
      metadata {
        name
      }
      syncStatus {
        state
        recordVersion
        error
        action
        lastSyncedAt
      }
      createdBy{
        userId
        userName
        userEmail
      }
    }
  }
variables:
  projectName: "{{.projectName}}"
  envName: "{{.envName}}"
  app:
    displayName: "sample app"
    metadata:
      name: "{{.name}}"
      # namespace: "{{.namespace}}"
    spec:
      containers:
        - name: main
          # image: kong/httpbin
          image: nginx
---

label: Update App
query: |+
  mutation Core_updateApp($app: AppIn!) {
    core_updateApp(app: $app) {
      metadata {
        name
        generation
      }
      syncStatus {
        state
        recordVersion
      }
      recordVersion
    }
  }
variables:
  app:
    displayName: "sample app"
    metadata:
      name: '{{.name}}x'
      namespace: '{{.namespace}}'
    spec:
      services:
        - type: tcp
          port: 80
          targetPort: 80
      containers:
        - name: main
          # image: nginx
          image: kong/httpbin
          # envFrom:
          #   - type: config
          #     refName: s1

---

label: Delete App
query: |+
  mutation Core_deleteApp($namespace: String!, $name: String!) {
    core_deleteApp(namespace: $namespace, name: $name)
  }
variables:
  namespace: '{{.namespace}}'
  name: "{{.name}}x"
---
