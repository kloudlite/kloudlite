---
global:
  name: sample-app
---

label: List Apps
query: |+ #graphql
  query Core_listApps($envName: String!) {
    core_listApps(envName: $envName) {
      edges {
        node {
          id
          environmentName
          lastUpdatedBy {
            userEmail
            userId
            userName
          }
          metadata {
            name
            annotations
          }
          syncStatus {
            state
            action
            error
            syncScheduledAt
            recordVersion
          }
          recordVersion
          kind
          displayName
          accountName
          serviceHost
        }
      }
    }
  }
variables:
  envName: "{{.envName}}"
---

label: Get App
query: |+ #graphql
  query Core_getApp($scope: WorkspaceOrEnvId!, $name: String!) {
    core_getApp(scope: $scope, name: $name) {
      metadata {
        name
        deletionTimestamp
      }
      spec {
        containers{
          name
          image
        }
      }
    }
  }
variables:
  project:
    type: name
    value: sample
  scope:
    # type: workspaceName
    # value: sample
    type: workspaceTargetNamespace
    value: "{{.namespace}}"
  # namespace: "{{.namespace}}"
  name: "{{.name}}"
---

label: Create App
query: |+ #graphql
  mutation Core_createApp($envName: String!, $app: AppIn!) {
    core_createApp(envName: $envName, app: $app) {
      id
      metadata {
        name
      }
    }
  }
variables:
  envName: "{{.envName}}"
  app:
    displayName: "sample app"
    metadata:
      name: "{{.name}}"
    spec:
      services:
        - port: 80
      containers:
        - name: main
          # image: kong/httpbin
          image: nginx
---

label: Update App
query: |+ #graphql
  mutation Core_updateApp($envName: String!, $app: AppIn!) {
    core_updateApp(envName: $envName, app: $app) {
      metadata {
        name
        generation
      }
      syncStatus {
        state
        recordVersion
      }
      recordVersion
    }
  }
variables:
  envName: "{{.envName}}"
  app:
    displayName: "sample app"
    metadata:
      name: '{{.name}}'
    spec:
      services:
        - type: tcp
          port: 80
          targetPort: 80
      containers:
        - name: main
          image: kong/httpbin
          # image: nginx

---

label: Delete App
query: |+ #graphql
  mutation Core_deleteApp($envName: String!, $appName: String!) {
    core_deleteApp(envName: $envName, appName: $appName)
  }
variables:
  envName: "{{.envName}}"
  appName: "{{.name}}"

---
label: restart app
query: |+ #graphql
  query Query($envName: String!, $appName: String!) {
    core_restartApp(envName: $envName, appName: $appName)
  }
variables:
  envName: "{{.envName}}"
  appName: "{{.name}}"
---
