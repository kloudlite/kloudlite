---
global:
  name: s1
---

label: List Configs
query: |+
  query Core_listConfigs($projectName: String!, $envName: String!) {
    core_listConfigs(projectName: $projectName, envName: $envName) {
        edges {
          cursor
          node {
            creationTime
            accountName
            apiVersion
            kind
            metadata {
              name
              namespace
              generation
            }
            syncStatus {
              state
              error
              recordVersion
              action
            }
            recordVersion
          }
        }
        pageInfo {
          endCursor
          hasNextPage
          hasPreviousPage
          startCursor
        }
        totalCount
    }
  }
variables:
  projectName: "{{.projectName}}"
  envName: "{{.envName}}"
---

label: Create Config
query: |+
  mutation Core_createConfig($config: ConfigIn!) {
    core_createConfig(config: $config) {
      metadata {
        name
        namespace
      }
      status {
        checks
        lastReconcileTime
      }
      syncStatus {
        state
        action
        recordVersion
      }
      recordVersion
      data
    }
  }

variables:
  config:
    metadata:
      name: '{{.name}}'
      namespace: '{{.namespace}}'
    data:
      key1: value1
      key2: value2
---

label: Get Config
query: |+
  query Core_getConfig($namespace: String!, $name: String!) {
    core_getConfig(namespace: $namespace, name: $name) {
      metadata {
        name
        namespace
        generation
      }
      status {
        isReady
        checks
        lastReconcileTime
      }
      syncStatus {
        state
        action
        generation
      }
      data
    }
  }
variables:
  name: '{{.name}}'
  namespace: '{{.namespace}}'

---

label: Update Config
query: |+
  mutation Core_updateConfig($config: ConfigIn!) {
    core_updateConfig(config: $config) {
      metadata {
        name
        namespace
        generation
      }
      status {
        isReady
        checks
        lastReconcileTime
      }
      syncStatus{
        state
        action
        generation
      }
      data
    }
  }
variables:
  config:
    metadata:
      name: '{{.name}}'
      namespace: '{{.namespace}}'
    data:
      key1: valueX
      key2: value-for-key-2
      key3: |+
        this is the value for key-3
---

label: Delete Config
query: |+
  mutation Core_deleteConfig($namespace: String!, $name: String!) {
    core_deleteConfig(namespace: $namespace, name: $name)
  }
variables:
  namespace: '{{.namespace}}'
  name: "{{.name}}"
---

label: Resync Config
query: |+
  query Query($namespace: String!, $name: String!) {
    core_resyncConfig(namespace: $namespace, name: $name)
  }
variables:
  namespace: '{{.namespace}}'
  name: "{{.name}}"

---
