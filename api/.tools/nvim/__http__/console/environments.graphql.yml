---
global:
  envTargetNamespace: "nxtcoder17"
---

label: List Environments
query: |+ #graphql
  query Core_listEnvironments($projectName: String!) {
    core_listEnvironments(projectName: $projectName) {
      edges {
        cursor
        node {
          id
          creationTime
          accountName
          apiVersion 
          kind
          markedForDeletion
          metadata {
            name
            namespace
          }
          createdBy{
            userId
            userName
          }
          lastUpdatedBy{
            userName
          }
          spec { 
            targetNamespace
            routing {
              mode
            }
          }
          syncStatus {
            state
            error
            recordVersion
            action
          }
          recordVersion
        }
      }
      pageInfo {
        endCursor
        hasNextPage
        hasPreviousPage
        startCursor
      }
      totalCount
    }
  }
variables:
  projectName: "{{.projectName}}"

---

label: Create Environment
query: |+ #graphql
  mutation Core_createEnvironment($projectName: String!, $env: EnvironmentIn!) {
    core_createEnvironment(projectName: $projectName, env: $env) {
      apiVersion
      kind
      spec {
        projectName
        targetNamespace
      }
      syncStatus {
        state
        lastSyncedAt
        recordVersion
        action
        syncScheduledAt
      }
    }
  }
variables:
  projectName: "{{.projectName}}"
  env:
    displayName: Display Name of a sample environment
    metadata:
      name: "{{.envName}}"
    spec:
      projectName: "{{.projectName}}"
---

label: resync environment
query: |+
  query Query($projectName: String!, $name: String!) {
    core_resyncEnvironment(projectName: $projectName, name: $name)
  }
variables:
  projectName: "{{.projectName}}"
  name: "{{.envName}}"
---

label: "Update Environment"
query: |+ #graphql
  mutation Core_updateEnvironment($projectName: String!, $env: EnvironmentIn!) {
    core_updateEnvironment(projectName: $projectName, env: $env) {
      spec {
        projectName
        targetNamespace
        routing {
          mode
        }
      }
    }
  }
variables:
  projectName: "{{.projectName}}"
  env:
    displayName: Display Name of a sample environment
    metadata:
      name: "{{.envName}}"
    spec:
      projectName: "{{.projectName}}"
      routing:
        mode: public

---

label: "delete environment"
query: |+
  mutation Core_deleteEnvironment($projectName: String!, $envName: String!) {
    core_deleteEnvironment(projectName: $projectName, envName: $envName)
  }
variables:
  projectName: "{{.projectName}}"
  envName: "{{.envName2}}"
---
