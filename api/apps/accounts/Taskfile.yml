version: "3"

dotenv:
  - .secrets/env

vars:
  ImagePrefix: "ghcr.io/kloudlite/platform/apis"

tasks:
  gql:
    dir: ./internal/app
    cmds:
      - go run github.com/99designs/gqlgen generate
      - gofmt -w -d -r '"errors" -> "github.com/kloudlite/api/pkg/errors"' graph/*.resolvers.go

  build:
    env:
      CGO_ENABLED: 0
      GOOS: linux
      GOARCH: amd64
    vars:
      BuiltAt:
        sh: date | sed 's/\s/_/g'
    preconditions:
      - sh: '[ -n "{{.Out}}" ]'
        msg: var Out must have a value
    cmds:
      - go build -ldflags="-s -w -X github.com/kloudlite/api/common.BuiltAt=\"{{.BuiltAt}}\"" -o {{.Out}}
      - upx {{.Out}}

  run:
    dotenv:
      - .secrets/env
    cmds:
      - go run main.go --dev

  k8s-schema:
    cmds:
      - mkdir -p "./internal/app/_struct-to-graphql"
      - go run ../../cmd/struct-to-graphql
          --struct github.com/kloudlite/api/apps/accounts/internal/entities.Account
          --struct github.com/kloudlite/api/apps/accounts/internal/entities.Invitation
          --struct github.com/kloudlite/api/apps/accounts/internal/entities.AccountMembership
        > ./internal/app/_struct-to-graphql/main.go
      - |+
        pushd ./internal/app/_struct-to-graphql
        go run main.go --dev --out-dir ../graph/struct-to-graphql 
        popd
      - rm -rf ./internal/app/_struct-to-graphql

  docker-build:
    vars:
      APP: finance
      IMAGE: registry.kloudlite.io/kloudlite/{{.EnvName}}/{{.APP}}-api:{{.Tag}}
    preconditions:
      - sh: '[[ -n "{{.Tag}}" ]]'
        msg: 'var Tag must have a value'

      - sh: '[[ "{{.EnvName}}" == "development" ]] || [[ "{{.EnvName}}" == "staging" ]] ||  [[ "{{.EnvName}}" == "production" ]]'
        msg: 'var EnvName must have one of [development, staging, production] as its value'
    cmds:
      - docker buildx build -f ./Dockerfile -t {{.IMAGE}} . --build-arg APP={{.APP}} --platform linux/amd64  --build-context project-root=../..
      - docker push {{.IMAGE}}

  local-build:
    preconditions:
      - sh: '[ -n "{{.Tag}}" ]'
        msg: 'var Tag must have a value'
    vars:
      Dockerfile: "./Containerfile.local"
      APP: accounts
      Image: "{{.ImagePrefix}}/{{.APP}}:{{.Tag}}"
    cmds:
      - |+
        dir=$(mktemp -d)
        task build Out=$dir/{{.APP}}

        podman buildx build -t {{.Image}} -f {{.Dockerfile}} . --build-context builder=$dir --build-arg APP={{.APP}}
        podman push {{.Image}}
        rm -rf $dir

