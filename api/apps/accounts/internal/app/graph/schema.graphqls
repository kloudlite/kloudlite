directive @isLoggedInAndVerified on FIELD_DEFINITION
directive @hasAccount on FIELD_DEFINITION

type AccountsCheckNameAvailabilityOutput @shareable {
  result: Boolean!
  suggestedNames: [String!]
}

extend type AccountMembership {
	user: User!
}

type Query {
  accounts_listAccounts: [Account] @isLoggedInAndVerified
  accounts_getAccount(accountName: String!): Account @isLoggedInAndVerified
  accounts_resyncAccount(accountName: String!): Boolean! @isLoggedInAndVerified

  accounts_listInvitations(accountName: String!): [Invitation!] @isLoggedInAndVerified
  accounts_getInvitation(accountName: String!, invitationId: String!): Invitation @isLoggedInAndVerified
  accounts_listInvitationsForUser(onlyPending: Boolean!): [Invitation!] @isLoggedInAndVerified

  accounts_checkNameAvailability(name: String!): AccountsCheckNameAvailabilityOutput! @isLoggedInAndVerified

  accounts_listMembershipsForUser: [AccountMembership!] @isLoggedInAndVerified
  accounts_listMembershipsForAccount(accountName: String!, role: Github__com___kloudlite___api___apps___iam___types__Role): [AccountMembership!] @isLoggedInAndVerified
  accounts_getAccountMembership(accountName: String!): AccountMembership @isLoggedInAndVerified
}

type Mutation {
  accounts_createAccount(account: AccountIn!): Account! @isLoggedInAndVerified
  accounts_updateAccount(account: AccountIn!): Account! @isLoggedInAndVerified

  accounts_deactivateAccount(accountName: String!): Boolean! @isLoggedInAndVerified
  accounts_activateAccount(accountName: String!): Boolean! @isLoggedInAndVerified

  accounts_deleteAccount(accountName: String!): Boolean! @isLoggedInAndVerified
  # accounts_attachToCluster(accountId: ID!, clusterId: ID!): Boolean!

  # invitations
  accounts_inviteMembers(accountName: String!, invitations: [InvitationIn!]!): [Invitation!] @isLoggedInAndVerified
  accounts_resendInviteMail(accountName: String!, invitationId: String!): Boolean! @isLoggedInAndVerified
  accounts_deleteInvitation(accountName: String!, invitationId: String!): Boolean! @isLoggedInAndVerified

  accounts_acceptInvitation(accountName: String!, inviteToken: String!): Boolean! @isLoggedInAndVerified
  accounts_rejectInvitation(accountName: String!, inviteToken: String!): Boolean! @isLoggedInAndVerified

  accounts_removeAccountMembership(accountName: String!, memberId: ID!): Boolean! @isLoggedInAndVerified
  accounts_updateAccountMembership(accountName: String!, memberId: ID!, role: Github__com___kloudlite___api___apps___iam___types__Role!): Boolean! @isLoggedInAndVerified
}

extend type User @key(fields: "id") {
  id: ID! @external
  accounts: [AccountMembership!]
  accountInvitations(onlyPending: Boolean!): [Invitation!]
}
