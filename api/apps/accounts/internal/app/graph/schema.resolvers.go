package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"fmt"

	"kloudlite.io/apps/accounts/internal/app/graph/generated"
	"kloudlite.io/apps/accounts/internal/app/graph/model"
	"kloudlite.io/apps/accounts/internal/entities"
	"kloudlite.io/pkg/repos"
)

// User is the resolver for the user field.
func (r *accountMembershipResolver) User(ctx context.Context, obj *model.AccountMembership) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Account is the resolver for the account field.
func (r *accountMembershipResolver) Account(ctx context.Context, obj *model.AccountMembership) (*entities.Account, error) {
	panic(fmt.Errorf("not implemented: Account - account"))
}

// AccountsCreateAccount is the resolver for the accounts_createAccount field.
func (r *mutationResolver) AccountsCreateAccount(ctx context.Context, name string, displayName string) (*entities.Account, error) {
	panic(fmt.Errorf("not implemented: AccountsCreateAccount - accounts_createAccount"))
}

// AccountsUpdateAccount is the resolver for the accounts_updateAccount field.
func (r *mutationResolver) AccountsUpdateAccount(ctx context.Context, accountName string, name *string, contactEmail *string) (*entities.Account, error) {
	panic(fmt.Errorf("not implemented: AccountsUpdateAccount - accounts_updateAccount"))
}

// AccountsRemoveAccountMember is the resolver for the accounts_removeAccountMember field.
func (r *mutationResolver) AccountsRemoveAccountMember(ctx context.Context, accountName string, userID repos.ID) (bool, error) {
	panic(fmt.Errorf("not implemented: AccountsRemoveAccountMember - accounts_removeAccountMember"))
}

// AccountsUpdateAccountMember is the resolver for the accounts_updateAccountMember field.
func (r *mutationResolver) AccountsUpdateAccountMember(ctx context.Context, accountName string, userID repos.ID, role string) (bool, error) {
	panic(fmt.Errorf("not implemented: AccountsUpdateAccountMember - accounts_updateAccountMember"))
}

// AccountsDeactivateAccount is the resolver for the accounts_deactivateAccount field.
func (r *mutationResolver) AccountsDeactivateAccount(ctx context.Context, accountName string) (bool, error) {
	panic(fmt.Errorf("not implemented: AccountsDeactivateAccount - accounts_deactivateAccount"))
}

// AccountsActivateAccount is the resolver for the accounts_activateAccount field.
func (r *mutationResolver) AccountsActivateAccount(ctx context.Context, accountName string) (bool, error) {
	panic(fmt.Errorf("not implemented: AccountsActivateAccount - accounts_activateAccount"))
}

// AccountsDeleteAccount is the resolver for the accounts_deleteAccount field.
func (r *mutationResolver) AccountsDeleteAccount(ctx context.Context, accountName string) (bool, error) {
	panic(fmt.Errorf("not implemented: AccountsDeleteAccount - accounts_deleteAccount"))
}

// AccountsInviteUser is the resolver for the accounts_inviteUser field.
func (r *mutationResolver) AccountsInviteUser(ctx context.Context, accountName string, name *string, email string, role string) (bool, error) {
	panic(fmt.Errorf("not implemented: AccountsInviteUser - accounts_inviteUser"))
}

// AccountsDeleteInvitation is the resolver for the accounts_deleteInvitation field.
func (r *mutationResolver) AccountsDeleteInvitation(ctx context.Context, accountName string, email string) (bool, error) {
	panic(fmt.Errorf("not implemented: AccountsDeleteInvitation - accounts_deleteInvitation"))
}

// AccountsListAccounts is the resolver for the accounts_listAccounts field.
func (r *queryResolver) AccountsListAccounts(ctx context.Context) ([]*entities.Account, error) {
	panic(fmt.Errorf("not implemented: AccountsListAccounts - accounts_listAccounts"))
}

// AccountsAccount is the resolver for the accounts_account field.
func (r *queryResolver) AccountsAccount(ctx context.Context, accountName string) (*entities.Account, error) {
	panic(fmt.Errorf("not implemented: AccountsAccount - accounts_account"))
}

// AccountsListInvitations is the resolver for the accounts_listInvitations field.
func (r *queryResolver) AccountsListInvitations(ctx context.Context, accountName string) ([]*model.AccountMembership, error) {
	panic(fmt.Errorf("not implemented: AccountsListInvitations - accounts_listInvitations"))
}

// AccountsReSyncAccount is the resolver for the accounts_reSyncAccount field.
func (r *queryResolver) AccountsReSyncAccount(ctx context.Context, accountName string) (bool, error) {
	panic(fmt.Errorf("not implemented: AccountsReSyncAccount - accounts_reSyncAccount"))
}

// AccountMemberships is the resolver for the accountMemberships field.
func (r *userResolver) AccountMemberships(ctx context.Context, obj *model.User) ([]*model.AccountMembership, error) {
	panic(fmt.Errorf("not implemented: AccountMemberships - accountMemberships"))
}

// AccountMembership is the resolver for the accountMembership field.
func (r *userResolver) AccountMembership(ctx context.Context, obj *model.User, accountName string) (*model.AccountMembership, error) {
	panic(fmt.Errorf("not implemented: AccountMembership - accountMembership"))
}

// AccountMembership returns generated.AccountMembershipResolver implementation.
func (r *Resolver) AccountMembership() generated.AccountMembershipResolver {
	return &accountMembershipResolver{r}
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type accountMembershipResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
