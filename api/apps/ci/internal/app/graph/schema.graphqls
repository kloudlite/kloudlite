scalar Json
scalar Any

type Query {
  ci_githubInstallations(pagination: PaginationIn): Any!
  ci_githubInstallationToken(repoUrl: String, instId: Int): Any!
  ci_githubRepos(installationId: Int!, pagination: PaginationIn): Any!
  ci_githubRepoBranches(repoUrl: String!, pagination: PaginationIn): Any!
  ci_searchGithubRepos(search: String, org: String!, pagination: PaginationIn): Any!

  ci_gitlabGroups(query: String, pagination: PaginationIn): Any!
  ci_gitlabRepos(groupId: String!, search: String, pagination: PaginationIn): Any!
  ci_gitlabRepoBranches(repoId: String!, search: String, pagination: PaginationIn): Any!

  ci_getPipelines(projectId: ID!): [GitPipeline!]
  ci_getPipeline(pipelineId: ID!): GitPipeline
  ci_triggerPipeline(pipelineId: ID!): Boolean
}

input PipelineDataInput{
  name: String!
  imageName: String!
  repoName: String!
  gitProvider: String!
  gitRepoUrl: String!
  gitlabRepoId: Int!
  dockerFile: String!
  contextDir: String!
  githubInstallationId: Int
  buildArgs: Json
  branch: String!
  metadata: Json
}


input PaginationIn {
  page: Int!
  perPage: Int!
}

input GitPipelineIn {
  name: String!
  projectId: String!
  appId: String!

  gitProvider: String!
  gitRepoUrl: String!
  repoName: String!
  gitBranch: String!

  build: GitPipelineBuildIn
  run: GitPipelineRunIn

  artifactRef: GitPipelineArtifactIn
}

input GitPipelineBuildIn {
  baseImage: String!
  cmd: String!
}

type GitPipelineBuild {
  baseImage: String
  cmd: String!
}

input GitPipelineRunIn {
  baseImage: String
  cmd: String!
}

type GitPipelineRun {
  baseImage: String
  cmd: String!
}

input GitPipelineArtifactIn {
  dockerImageName: String
  dockerImageTag: String
}

type GitPipelineArtifact {
  dockerImageName: String
  dockerImageTag: String
}

type GitPipeline {
  id: ID!
  repoName: String!
  name: String!

  gitProvider: String!
  gitRepoUrl: String!
  gitBranch: String!

  build: GitPipelineBuild
  run: GitPipelineRun

  metadata: Json
}

input GitDockerPipelineIn {
  name: String!
  projectId: String!
  appId: String!

  gitProvider: String!
  gitRepoUrl: String!
  repoName: String!
  gitBranch: String!

  dockerFile: String!
  contextDir: String!
  buildArgs: String!

  artifactRef: GitPipelineArtifactIn
}

extend type App @key(fields: "id") {
  id: ID! @external
  pipelines: [GitPipeline!]!
  ci_createDockerPipeLine(containerName: String!, in: GitDockerPipelineIn!): Json!
  ci_createPipeLine(containerName: String!, in: GitPipelineIn!): Json!
}

type Mutation {
  ci_deletePipeline(pipelineId: ID!): Boolean!
  ci_createPipeline(in: GitPipelineIn!): Json!
}
