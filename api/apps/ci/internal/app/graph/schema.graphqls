scalar Json
scalar Any

type Query {

  ci_gitlabRepos(groupId: ID!, search: String, limit: Int, page: Int): [Json!]!
  ci_gitlabGroups(search: String, limit: Int, page: Int): [Json!]!
  ci_gitlabRepoBranches(repoUrl: String!, search: String): [Json!]!

  ci_githubInstallations: Any!
  ci_githubInstallationToken(repoUrl: String!): Any!
  ci_githubRepos(installationId: Int!, limit: Int, page: Int): Any!
  ci_githubRepoBranches(repoUrl: String!, limit: Int, page: Int): Any!
  ci_searchGithubRepos(search: String, org: String!, limit: Int, page: Int): Any!

  ci_getPipelines(projectId: ID!): [GitPipeline!]
  ci_getPipeline(pipelineId: ID!): GitPipeline

}

type KV {
  key: String!
  value: String!
}

input GitPipelineIn {
  name: String!
  imageName: String!
  gitProvider: String!
  gitRepoUrl: String!
  dockerFile: String
  contextDir: String
  githubInstallationId: Int
  buildArgs: Json
}



type GitPipeline {
  id: ID!
  name: String!
  imageName: String!
  gitProvider: String!
  gitRepoUrl: String!
  dockerFile: String
  contextDir: String
  githubInstallationId: Int
  buildArgs: Json
}

type Mutation {
  ci_deleteGitPipeline(pipelineId: ID!): Boolean!
  ci_createPipeline(in: GitPipelineIn!): Json!
}
