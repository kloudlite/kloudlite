scalar Json
scalar Any
scalar Date
scalar Time

type Query {
  ci_githubInstallations(pagination: PaginationIn): Any! # user-access
  ci_githubInstallationToken(repoUrl: String!): Any! # user-access
  ci_githubRepos(installationId: Int!, pagination: PaginationIn): Any! # user-access
  ci_githubRepoBranches(repoUrl: String!, pagination: PaginationIn): Any! # user-access
  ci_searchGithubRepos(search: String, org: String!, pagination: PaginationIn): Any! # user-access

  ci_gitlabGroups(query: String, pagination: PaginationIn): Any! # user-access
  ci_gitlabRepos(groupId: String!, search: String, pagination: PaginationIn): Any! # user-access
  ci_gitlabRepoBranches(repoId: String!, search: String, pagination: PaginationIn): Any! # user-access

  ci_getPipelines(projectId: ID!): [GitPipeline!] # user-access # deprecate
  ci_getPipeline(pipelineId: ID!): GitPipeline # user-access # deprecate
  ci_triggerPipeline(pipelineId: ID!): Boolean # user-access # deprecate

  ci_getPipelineRuns(pipelineId: ID!): [PipelineRun!]
  ci_getPipelineRun(pipelineRunId: ID!): PipelineRun

  ci_harborSearch(accountId: ID!, q: String!, pagination: PaginationIn): [HarborSearchResult!] # account-member-access
  ci_harborImageTags(imageName: String!, pagination: PaginationIn): [HarborImageTagsResult!]
}

type HarborSearchResult {
  imageName: String!
}

type PipelineRun {
  id: ID!
  pipelineId: ID!
  startTime: Time
  endTime: Time
  success: Boolean!
  message: String
  state: String
}

type HarborImageTagsResult {
  name: String!
  signed: Boolean!
  immutable: Boolean!
}

input PaginationIn {
  page: Int!
  perPage: Int!
}

input GitPipelineIn {
  name: String!

  accountId: String!
  projectId: String!
  appId: String!

  projectName: String!
  containerName: String!

  gitProvider: String!
  gitRepoUrl: String!
  repoName: String!
  gitBranch: String!

  build: GitPipelineBuildIn
  run: GitPipelineRunIn

  artifactRef: GitPipelineArtifactIn
  metadata: Json
}

input GitPipelineBuildIn {
  baseImage: String!
  cmd: String!
  outputDir: String
}

type GitPipelineBuild {
  baseImage: String
  cmd: String!
  outputDir: String
}

input GitPipelineRunIn {
  baseImage: String
  cmd: String!
}

type GitPipelineRun {
  baseImage: String
  cmd: String!
}

input GitPipelineArtifactIn {
  dockerImageName: String
  dockerImageTag: String
}

type GitPipelineArtifact {
  dockerImageName: String
  dockerImageTag: String
}

type GitPipeline {
  id: ID!
  name: String!

  status: String!
  pipelineRunMessage: String

  gitProvider: String!
  gitRepoUrl: String!
  gitBranch: String!

  build: GitPipelineBuild
  run: GitPipelineRun

  dockerBuild: DockerBuild

  metadata: Json
}

type DockerBuild {
  dockerFile: String!
  contextDir: String!
  buildArgs: String

}

input GitDockerPipelineIn {
  name: String!

  accountId: String!
  projectId: String!
  appId: String!

  projectName: String!
  containerName: String!

  gitProvider: String!
  gitRepoUrl: String!
  repoName: String!
  gitBranch: String!

  dockerFile: String!
  contextDir: String!
  buildArgs: String!

  artifactRef:GitPipelineArtifactIn
  metadata: Json
}

extend type App @key(fields: "id") {
  id: ID! @external
  pipelines: [GitPipeline!]! # project-developer-access project-admin-access
  ci_createDockerPipeLine(containerName: String!, in: GitDockerPipelineIn!): Json! # project-developer-access project-admin-access
  ci_createPipeLine(containerName: String!, in: GitPipelineIn!): Json! # project-developer-access project-admin-access
}

type Mutation {
  ci_deletePipeline(pipelineId: ID!): Boolean! # project-developer-access project-admin-access
  ci_createPipeline(in: GitPipelineIn!): Json! # project-developer-access project-admin-access
  ci_createDockerPipeline(in: GitDockerPipelineIn!): Json!
}
