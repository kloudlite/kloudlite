scalar Json
scalar Any

type Query {
  ci_githubInstallations(pagination: PaginationIn): Any!
  ci_githubInstallationToken(repoUrl: String, instId: Int): Any!
  ci_githubRepos(installationId: Int!, pagination: PaginationIn): Any!
  ci_githubRepoBranches(repoUrl: String!, pagination: PaginationIn): Any!
  ci_searchGithubRepos(search: String, org: String!, pagination: PaginationIn): Any!

  ci_gitlabGroups(query: String, pagination: PaginationIn): Any!
  ci_gitlabRepos(groupId: String!, search: String, pagination: PaginationIn): Any!
  ci_gitlabRepoBranches(repoId: String!, search: String, pagination: PaginationIn): Any!

  ci_getPipelines(projectId: ID!): [GitPipeline!]
  ci_getPipeline(pipelineId: ID!): GitPipeline
}

input PipelineDataInput{
  name: String!
  imageName: String!
  repoName: String!
  gitProvider: String!
  gitRepoUrl: String!
  gitlabRepoId: Int!
  dockerFile: String!
  contextDir: String!
  githubInstallationId: Int
  buildArgs: Json
  branch: String!
  metadata: Json
}


input PaginationIn {
  page: Int!
  perPage: Int!
}

type KV {
  key: String!
  value: String!
}

input GitPipelineIn {
  name: String!
  imageName: String!
  gitProvider: String!
  gitRepoUrl: String!
  repoName: String!
  gitBranch: String!
  dockerFile: String
  contextDir: String
  githubInstallationId: Int
  gitlabRepoId: Int
  buildArgs: Json
}

type GitPipeline {
  id: ID!
  repoName: String!
  name: String!
  imageName: String!
  gitProvider: String!
  gitRepoUrl: String!
  gitBranch: String!
  dockerFile: String
  contextDir: String
  githubInstallationId: Int
  gitlabRepoId: Int
  buildArgs: Json
  metadata: Json
}

type Mutation {
  ci_deleteGitPipeline(pipelineId: ID!): Boolean!
  ci_createPipeline(in: GitPipelineIn!): Json!
}
