package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"time"

	"github.com/kloudlite/api/apps/comms/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/comms/internal/app/graph/model"
	"github.com/kloudlite/api/apps/comms/types"
	"github.com/kloudlite/api/pkg/functions"
)

// Content is the resolver for the content field.
func (r *notificationResolver) Content(ctx context.Context, obj *types.Notification) (*model.GithubComKloudliteAPIAppsCommsTypesNotifyContent, error) {
	if obj == nil {
		return nil, fmt.Errorf("nil object")
	}

	return functions.JsonConvertP[model.GithubComKloudliteAPIAppsCommsTypesNotifyContent](obj.Content)
}

// CreationTime is the resolver for the creationTime field.
func (r *notificationResolver) CreationTime(ctx context.Context, obj *types.Notification) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("obj is nil")
	}

	return obj.CreationTime.Format(time.RFC3339), nil
}

// NotificationType is the resolver for the notificationType field.
func (r *notificationResolver) NotificationType(ctx context.Context, obj *types.Notification) (model.GithubComKloudliteAPIAppsCommsTypesNotificationType, error) {
	if obj == nil {
		return "", fmt.Errorf("nil object")
	}

	return functions.JsonConvert[model.GithubComKloudliteAPIAppsCommsTypesNotificationType](obj.Type)
}

// UpdateTime is the resolver for the updateTime field.
func (r *notificationResolver) UpdateTime(ctx context.Context, obj *types.Notification) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("obj is nil")
	}

	return obj.UpdateTime.Format(time.RFC3339), nil
}

// Notification returns generated.NotificationResolver implementation.
func (r *Resolver) Notification() generated.NotificationResolver { return &notificationResolver{r} }

type notificationResolver struct{ *Resolver }
