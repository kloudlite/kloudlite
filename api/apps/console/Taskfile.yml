version: "3"

dotenv:
  - .secrets/env

vars:
  ImagePrefix: "ghcr.io/kloudlite/platform/apis"

tasks:
  gql:
    dir: ./internal/app
    cmds:
      - go run  -tags dynamic github.com/99designs/gqlgen generate
      # - rm ./graph/scalars.resolvers.go

  build:
    env:
      CGO_ENABLED: 0
      GOOS: linux
      GOARCH: amd64
    preconditions:
      - sh: '[ -n "{{.Out}}" ]'
        msg: var Out must have a value
    cmds:
      - go build -ldflags="-s -w" -o {{.Out}}
      - upx {{.Out}}

  k8s-schema:
    cmds:
      - mkdir -p "./internal/app/_struct-to-graphql"
      - go run ../../cmd/struct-to-graphql
          --struct kloudlite.io/apps/console/internal/domain/entities.Project
          --struct kloudlite.io/apps/console/internal/domain/entities.Workspace
          --struct kloudlite.io/apps/console/internal/domain/entities.App
          --struct kloudlite.io/apps/console/internal/domain/entities.Secret
          --struct kloudlite.io/apps/console/internal/domain/entities.Config
          --struct kloudlite.io/apps/console/internal/domain/entities.Router
          --struct kloudlite.io/apps/console/internal/domain/entities.ManagedResource
          --struct kloudlite.io/apps/console/internal/domain/entities.ManagedService
          --struct kloudlite.io/apps/console/internal/domain/entities.MsvcTemplate
        > ./internal/app/_struct-to-graphql/main.go
      - |+
        pushd ./internal/app/_struct-to-graphql
        go run main.go --out-dir ../graph/struct-to-graphql --with-pagination
        popd
      - rm -rf ./internal/app/_struct-to-graphql

  docker-build:
    vars:
      APP: console
      IMAGE: "{{.ImagePrefix}}/{{.APP}}:{{.Tag}}"
    preconditions:
      - sh: '[[ -n "{{.Tag}}" ]]'
        msg: 'var Tag must have a value'

      - sh: '[[ "{{.EnvName}}" == "development" ]] || [[ "{{.EnvName}}" == "staging" ]] ||  [[ "{{.EnvName}}" == "production" ]]'
        msg: 'var EnvName must have one of [development, staging, production] as its value'
    cmds:
      - docker buildx build -f ./Dockerfile -t {{.IMAGE}} . --build-arg APP={{.APP}} --platform linux/amd64  --build-context project-root=../..
      - docker push {{.IMAGE}}


  local-build:
    preconditions:
      - sh: '[ -n "{{.Tag}}" ]'
        msg: 'var Tag must have a value'
    vars:
      APP: console
      IMAGE: "{{.ImagePrefix}}/{{.APP}}:{{.Tag}}"
    silent: true
    cmds:
      - |+
        lineNumbers=$(cat Dockerfile | grep -i '^FROM' -n | tail +2 | awk -F: '{print $1}')

        startLineNo=$(echo "$lineNumbers" | head -n+1)
        finalLineNo=$(echo "$lineNumbers" | tail -1)

        tDir=$(mktemp -d)

        nDockerfile=$(cat Dockerfile | tail --lines=+$startLineNo)
        echo "$nDockerfile" | sed "1 i # syntax=docker/dockerfile:1.4" > $tDir/Dockerfile.base

        builderLine=$(cat $tDir/Dockerfile.base | grep -i  -n 'from=base' | awk -F: '{print $1}')

        # cat $tDir/Dockerfile.base | sed "4 i COPY --from=local-builder ./{{.APP}} /{{.APP}}" > $tDir/Dockerfile
        cat $tDir/Dockerfile.base | sed "${builderLine}s|.*|COPY --from=local-builder ./{{.APP}} ./{{.APP}}|" > $tDir/Dockerfile
        cat $tDir/Dockerfile

        echo "building application ..."
        task build Out=$tDir/{{.APP}}

        docker buildx build -f $tDir/Dockerfile -t {{.IMAGE}} . --build-context local-builder=${tDir}
        docker push {{.IMAGE}}
        rm -rf $tDir

  run:
    vars:
      Name: console
    dotenv:
      - .secrets/env
    env:
      CGO_ENABLED: 0
    cmds:
      - go build -o /tmp/{{.Name}} ./main.go
      # - dlv exec -l 127.0.0.1:31117 --headless /tmp/console -- --dev
      - /tmp/{{.Name}} --dev
