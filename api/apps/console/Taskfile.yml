version: "3"

dotenv:
  - .secrets/env

vars:
  ImagePrefix: "ghcr.io/kloudlite/platform/apis"

tasks:
  gql:
    dir: ./internal/app
    cmds:
      - go run  -tags dynamic github.com/99designs/gqlgen generate
      # - rm ./graph/scalars.resolvers.go

  build:
    env:
      CGO_ENABLED: 0
      GOOS: linux
      GOARCH: amd64
    preconditions:
      - sh: '[ -n "{{.Out}}" ]'
        msg: var Out must have a value
    cmds:
      - go build -ldflags="-s -w" -o {{.Out}}
      - upx {{.Out}}

  k8s-schema:
    cmds:
      - mkdir -p "./internal/app/_struct-to-graphql"
      - go run ../../cmd/struct-to-graphql
          --struct kloudlite.io/apps/console/internal/entities.Project
          --struct kloudlite.io/apps/console/internal/entities.Workspace
          --struct kloudlite.io/apps/console/internal/entities.App
          --struct kloudlite.io/apps/console/internal/entities.Secret
          --struct kloudlite.io/apps/console/internal/entities.Config
          --struct kloudlite.io/apps/console/internal/entities.Router
          --struct kloudlite.io/apps/console/internal/entities.ManagedResource
          --struct kloudlite.io/apps/console/internal/entities.ManagedService
          --struct kloudlite.io/apps/console/internal/entities.MsvcTemplate
          --struct kloudlite.io/apps/console/internal/entities.VPNDevice
          --struct kloudlite.io/pkg/repos.MatchFilter
          --struct kloudlite.io/pkg/repos.CursorPagination
        > ./internal/app/_struct-to-graphql/main.go
      - |+
        pushd ./internal/app/_struct-to-graphql
        go run main.go --dev --out-dir ../graph/struct-to-graphql --with-pagination Project,Workspace,App,Secret,Config,Router,ManagedResource,ManagedService,VPNDevice
        popd
      - rm -rf ./internal/app/_struct-to-graphql

  docker-build:
    vars:
      APP: console
      IMAGE: "{{.ImagePrefix}}/{{.APP}}:{{.Tag}}"
    preconditions:
      - sh: '[[ -n "{{.Tag}}" ]]'
        msg: 'var Tag must have a value'

      - sh: '[[ "{{.EnvName}}" == "development" ]] || [[ "{{.EnvName}}" == "staging" ]] ||  [[ "{{.EnvName}}" == "production" ]]'
        msg: 'var EnvName must have one of [development, staging, production] as its value'
    cmds:
      - docker buildx build -f ./Dockerfile -t {{.IMAGE}} . --build-arg APP={{.APP}} --platform linux/amd64  --build-context project-root=../..
      - docker push {{.IMAGE}}

  local-build:
    vars:
      APP: console
      IMAGE: "{{.ImagePrefix}}/{{.APP}}:{{.Tag}}"
    preconditions:
      - sh: '[[ -n "{{.Tag}}" ]]'
        msg: 'var Tag must have a value'
    silent: true
    cmds:
      - |+
        tdir=$(mktemp -d)
        task build Out=$tdir/{{.APP}}

        docker buildx build -f ./Dockerfile.ci -t {{.IMAGE}} . --build-context builder=${tdir} --build-arg APP="{{.APP}}"
        docker push {{.IMAGE}}
        rm -rf $tdir

  run:
    vars:
      Name: console
    dotenv:
      - .secrets/env
    env:
      CGO_ENABLED: 0
    cmds:
      - go build -o /tmp/{{.Name}} ./main.go
      # - dlv exec -l 127.0.0.1:31117 --headless /tmp/console -- --dev
      - /tmp/{{.Name}} --dev
