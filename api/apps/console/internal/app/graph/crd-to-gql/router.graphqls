type RouterSpecBasicAuth {
	secretName: String
	username: String
	enabled: Boolean!
}

input RouterSpecBasicAuthIn {
	secretName: String
	username: String
	enabled: Boolean!
}

input RouterSpecRateLimitIn {
	rps: Int
	connections: Int
	enabled: Boolean
	rpm: Int
}

type RouterSpec {
	region: String
	routes: [RouterSpecRoutes]
	basicAuth: RouterSpecBasicAuth
	cors: RouterSpecCors
	domains: [String]!
	https: RouterSpecHttps
	maxBodySizeInMB: Int
	rateLimit: RouterSpecRateLimit
}

input RouterSpecIn {
	region: String
	routes: [RouterSpecRoutesIn]
	basicAuth: RouterSpecBasicAuthIn
	cors: RouterSpecCorsIn
	domains: [String]!
	https: RouterSpecHttpsIn
	maxBodySizeInMB: Int
	rateLimit: RouterSpecRateLimitIn
}

input RouterSpecCorsIn {
	enabled: Boolean
	origins: [String]
	allowCredentials: Boolean
}

input RouterSpecHttpsIn {
	enabled: Boolean!
	forceRedirect: Boolean
}

type RouterSpecRoutes {
	app: String
	lambda: String
	path: String!
	port: Int!
	rewrite: Boolean
}

input RouterSpecRoutesIn {
	app: String
	lambda: String
	path: String!
	port: Int!
	rewrite: Boolean
}

type RouterSpecRateLimit {
	rps: Int
	connections: Int
	enabled: Boolean
	rpm: Int
}

type RouterSpecCors {
	enabled: Boolean
	origins: [String]
	allowCredentials: Boolean
}

type RouterSpecHttps {
	enabled: Boolean!
	forceRedirect: Boolean
}

type Router {
	spec: RouterSpec
	status: Status
	apiVersion: String
	kind: String
	metadata: Metadata! @goField(name: "objectMeta")
	overrides: Overrides
}

input RouterIn {
	spec: RouterSpecIn
	apiVersion: String
	kind: String
	metadata: MetadataIn! @goField(name: "objectMeta")
	overrides: OverridesIn
}

