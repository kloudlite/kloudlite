input RouterSpecRateLimitIn {
	connections: Int
	enabled: Boolean
	rpm: Int
	rps: Int
}

type Router @shareable {
	apiVersion: String
	kind: String
	metadata: Metadata! @goField(name: "objectMeta")
	overrides: Overrides
	syncStatus: SyncStatus
	spec: RouterSpec
	status: Status
}

input RouterSpecBasicAuthIn {
	enabled: Boolean!
	secretName: String
	username: String
}

type RouterSpecHttps @shareable {
	clusterIssuer: String
	enabled: Boolean!
	forceRedirect: Boolean
}

input RouterSpecHttpsIn {
	clusterIssuer: String
	enabled: Boolean!
	forceRedirect: Boolean
}

type RouterSpecRateLimit @shareable {
	connections: Int
	enabled: Boolean
	rpm: Int
	rps: Int
}

type RouterSpec @shareable {
	cors: RouterSpecCors
	ingressClass: String
	maxBodySizeInMB: Int
	region: String
	routes: [RouterSpecRoutes]
	backendProtocol: String
	basicAuth: RouterSpecBasicAuth
	domains: [String]!
	https: RouterSpecHttps
	rateLimit: RouterSpecRateLimit
}

input RouterSpecIn {
	cors: RouterSpecCorsIn
	ingressClass: String
	maxBodySizeInMB: Int
	region: String
	routes: [RouterSpecRoutesIn]
	backendProtocol: String
	basicAuth: RouterSpecBasicAuthIn
	domains: [String]!
	https: RouterSpecHttpsIn
	rateLimit: RouterSpecRateLimitIn
}

input RouterIn {
	apiVersion: String
	kind: String
	metadata: MetadataIn! @goField(name: "objectMeta")
	overrides: OverridesIn
	spec: RouterSpecIn
}

input RouterSpecCorsIn {
	allowCredentials: Boolean
	enabled: Boolean
	origins: [String]
}

type RouterSpecRoutes @shareable {
	app: String
	lambda: String
	path: String!
	port: Int!
	rewrite: Boolean
}

input RouterSpecRoutesIn {
	app: String
	lambda: String
	path: String!
	port: Int!
	rewrite: Boolean
}

type RouterSpecCors @shareable {
	allowCredentials: Boolean
	enabled: Boolean
	origins: [String]
}

type RouterSpecBasicAuth @shareable {
	enabled: Boolean!
	secretName: String
	username: String
}

