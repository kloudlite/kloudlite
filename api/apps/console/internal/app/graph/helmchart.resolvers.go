package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"time"

	"github.com/kloudlite/api/apps/console/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/console/internal/app/graph/model"
	"github.com/kloudlite/api/apps/console/internal/entities"
	"github.com/kloudlite/api/pkg/functions"
	plugin "github.com/kloudlite/operator/toolkit/plugin"
	helmPlugin "github.com/kloudlite/plugin-helm-chart/api/v1"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CreationTime is the resolver for the creationTime field.
func (r *helmChartResolver) CreationTime(ctx context.Context, obj *entities.HelmChart) (string, error) {
	if obj == nil {
		return "", errNilApp
	}
	return obj.BaseEntity.CreationTime.Format(time.RFC3339), nil
}

// Export is the resolver for the export field.
func (r *helmChartResolver) Export(ctx context.Context, obj *entities.HelmChart) (*model.GithubComKloudliteOperatorToolkitPluginExport, error) {
	return &model.GithubComKloudliteOperatorToolkitPluginExport{
		ViaSecret: &obj.Export.ViaSecret,
		Template:  &obj.Export.Template,
	}, nil
}

// Spec is the resolver for the spec field.
func (r *helmChartResolver) Spec(ctx context.Context, obj *entities.HelmChart) (*model.GithubComKloudlitePluginHelmChartAPIV1HelmChartSpec, error) {
	if obj == nil {
		return nil, errNilHelmChart
	}

	return functions.JsonConvertP[model.GithubComKloudlitePluginHelmChartAPIV1HelmChartSpec](obj.Spec)
}

// Status is the resolver for the status field.
func (r *helmChartResolver) Status(ctx context.Context, obj *entities.HelmChart) (*model.GithubComKloudlitePluginHelmChartAPIV1HelmChartStatus, error) {
	if obj == nil {
		return nil, errNilHelmChart
	}

	return functions.JsonConvertP[model.GithubComKloudlitePluginHelmChartAPIV1HelmChartStatus](obj.Status)
}

// UpdateTime is the resolver for the updateTime field.
func (r *helmChartResolver) UpdateTime(ctx context.Context, obj *entities.HelmChart) (string, error) {
	if obj == nil {
		return "", errNilHelmChart
	}
	return obj.BaseEntity.UpdateTime.Format(time.RFC3339), nil
}

// Export is the resolver for the export field.
func (r *helmChartInResolver) Export(ctx context.Context, obj *entities.HelmChart, data *model.GithubComKloudliteOperatorToolkitPluginExportIn) error {
	if obj == nil {
		return errNilApp
	}
	if data != nil {
		exp, err := functions.JsonConvert[plugin.Export](data)
		if err != nil {
			return err
		}
		obj.Export = exp
	}
	return nil
}

// Metadata is the resolver for the metadata field.
func (r *helmChartInResolver) Metadata(ctx context.Context, obj *entities.HelmChart, data *v1.ObjectMeta) error {
	if obj == nil {
		return errNilApp
	}
	if data != nil {
		obj.ObjectMeta = *data
	}
	return nil
}

// Spec is the resolver for the spec field.
func (r *helmChartInResolver) Spec(ctx context.Context, obj *entities.HelmChart, data *model.GithubComKloudlitePluginHelmChartAPIV1HelmChartSpecIn) error {
	if obj == nil {
		return errNilApp
	}
	if data != nil {
		spec, err := functions.JsonConvert[helmPlugin.HelmChartSpec](data)
		if err != nil {
			return err
		}
		obj.Spec = spec
	}
	return nil
}

// Status is the resolver for the status field.
func (r *helmChartInResolver) Status(ctx context.Context, obj *entities.HelmChart, data *model.GithubComKloudlitePluginHelmChartAPIV1HelmChartStatusIn) error {
	if obj == nil {
		return errNilApp
	}
	if data != nil {
		status, err := functions.JsonConvert[helmPlugin.HelmChartStatus](data)
		if err != nil {
			return err
		}
		obj.Status = status
	}
	return nil
}

// HelmChart returns generated.HelmChartResolver implementation.
func (r *Resolver) HelmChart() generated.HelmChartResolver { return &helmChartResolver{r} }

// HelmChartIn returns generated.HelmChartInResolver implementation.
func (r *Resolver) HelmChartIn() generated.HelmChartInResolver { return &helmChartInResolver{r} }

type helmChartResolver struct{ *Resolver }
type helmChartInResolver struct{ *Resolver }
