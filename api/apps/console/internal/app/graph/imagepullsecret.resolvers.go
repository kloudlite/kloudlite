package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"fmt"
	"time"

	"kloudlite.io/apps/console/internal/app/graph/generated"
	"kloudlite.io/apps/console/internal/domain/entities"
)

// CreationTime is the resolver for the creationTime field.
func (r *imagePullSecretResolver) CreationTime(ctx context.Context, obj *entities.ImagePullSecret) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("obj is nil")
	}
	return obj.CreationTime.Format(time.RFC3339), nil
}

// DockerConfigJSON is the resolver for the dockerConfigJson field.
func (r *imagePullSecretResolver) DockerConfigJSON(ctx context.Context, obj *entities.ImagePullSecret) (*string, error) {
	panic(fmt.Errorf("not implemented: DockerConfigJSON - dockerConfigJson"))
}

// DockerPassword is the resolver for the dockerPassword field.
func (r *imagePullSecretResolver) DockerPassword(ctx context.Context, obj *entities.ImagePullSecret) (*string, error) {
	panic(fmt.Errorf("not implemented: DockerPassword - dockerPassword"))
}

// DockerRegistryEndpoint is the resolver for the dockerRegistryEndpoint field.
func (r *imagePullSecretResolver) DockerRegistryEndpoint(ctx context.Context, obj *entities.ImagePullSecret) (*string, error) {
	panic(fmt.Errorf("not implemented: DockerRegistryEndpoint - dockerRegistryEndpoint"))
}

// DockerUsername is the resolver for the dockerUsername field.
func (r *imagePullSecretResolver) DockerUsername(ctx context.Context, obj *entities.ImagePullSecret) (*string, error) {
	panic(fmt.Errorf("not implemented: DockerUsername - dockerUsername"))
}

// ID is the resolver for the id field.
func (r *imagePullSecretResolver) ID(ctx context.Context, obj *entities.ImagePullSecret) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("obj is nil")
	}
	return string(obj.Id), nil
}

// UpdateTime is the resolver for the updateTime field.
func (r *imagePullSecretResolver) UpdateTime(ctx context.Context, obj *entities.ImagePullSecret) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("obj is nil")
	}
	return obj.UpdateTime.Format(time.RFC3339), nil
}

// DockerConfigJSON is the resolver for the dockerConfigJson field.
func (r *imagePullSecretInResolver) DockerConfigJSON(ctx context.Context, obj *entities.ImagePullSecret, data *string) error {
	panic(fmt.Errorf("not implemented: DockerConfigJSON - dockerConfigJson"))
}

// DockerPassword is the resolver for the dockerPassword field.
func (r *imagePullSecretInResolver) DockerPassword(ctx context.Context, obj *entities.ImagePullSecret, data *string) error {
	panic(fmt.Errorf("not implemented: DockerPassword - dockerPassword"))
}

// DockerRegistryEndpoint is the resolver for the dockerRegistryEndpoint field.
func (r *imagePullSecretInResolver) DockerRegistryEndpoint(ctx context.Context, obj *entities.ImagePullSecret, data *string) error {
	panic(fmt.Errorf("not implemented: DockerRegistryEndpoint - dockerRegistryEndpoint"))
}

// DockerUsername is the resolver for the dockerUsername field.
func (r *imagePullSecretInResolver) DockerUsername(ctx context.Context, obj *entities.ImagePullSecret, data *string) error {
	panic(fmt.Errorf("not implemented: DockerUsername - dockerUsername"))
}

// ImagePullSecret returns generated.ImagePullSecretResolver implementation.
func (r *Resolver) ImagePullSecret() generated.ImagePullSecretResolver {
	return &imagePullSecretResolver{r}
}

// ImagePullSecretIn returns generated.ImagePullSecretInResolver implementation.
func (r *Resolver) ImagePullSecretIn() generated.ImagePullSecretInResolver {
	return &imagePullSecretInResolver{r}
}

type imagePullSecretResolver struct{ *Resolver }
type imagePullSecretInResolver struct{ *Resolver }
