// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"kloudlite.io/apps/console/internal/entities"
	"kloudlite.io/pkg/repos"
)

type AppEdge struct {
	Cursor string        `json:"cursor"`
	Node   *entities.App `json:"node"`
}

type AppPaginatedRecords struct {
	Edges      []*AppEdge `json:"edges"`
	PageInfo   *PageInfo  `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

type ConfigEdge struct {
	Cursor string           `json:"cursor"`
	Node   *entities.Config `json:"node"`
}

type ConfigPaginatedRecords struct {
	Edges      []*ConfigEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

type EnvOrWorkspaceOrProjectID struct {
	Type EnvOrWorkspaceOrProjectIDType `json:"type"`
	Name string                        `json:"name"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpec struct {
	Containers     []*GithubComKloudliteOperatorApisCrdsV1AppSpecContainers  `json:"containers"`
	DisplayName    *string                                                   `json:"displayName,omitempty"`
	Freeze         *bool                                                     `json:"freeze,omitempty"`
	Hpa            *GithubComKloudliteOperatorApisCrdsV1AppSpecHpa           `json:"hpa,omitempty"`
	Intercept      *GithubComKloudliteOperatorApisCrdsV1AppSpecIntercept     `json:"intercept,omitempty"`
	NodeSelector   map[string]interface{}                                    `json:"nodeSelector,omitempty"`
	Region         *string                                                   `json:"region,omitempty"`
	Replicas       *int                                                      `json:"replicas,omitempty"`
	ServiceAccount *string                                                   `json:"serviceAccount,omitempty"`
	Services       []*GithubComKloudliteOperatorApisCrdsV1AppSpecServices    `json:"services,omitempty"`
	Tolerations    []*GithubComKloudliteOperatorApisCrdsV1AppSpecTolerations `json:"tolerations,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainers struct {
	Args            []string                                                             `json:"args,omitempty"`
	Command         []string                                                             `json:"command,omitempty"`
	Env             []*GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnv          `json:"env,omitempty"`
	EnvFrom         []*GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFrom      `json:"envFrom,omitempty"`
	Image           string                                                               `json:"image"`
	ImagePullPolicy *string                                                              `json:"imagePullPolicy,omitempty"`
	LivenessProbe   *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbe  `json:"livenessProbe,omitempty"`
	Name            string                                                               `json:"name"`
	ReadinessProbe  *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbe `json:"readinessProbe,omitempty"`
	ResourceCPU     *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersResourceCPU    `json:"resourceCpu,omitempty"`
	ResourceMemory  *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersResourceMemory `json:"resourceMemory,omitempty"`
	Volumes         []*GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumes      `json:"volumes,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnv struct {
	Key      string                                                        `json:"key"`
	Optional *bool                                                         `json:"optional,omitempty"`
	RefKey   *string                                                       `json:"refKey,omitempty"`
	RefName  *string                                                       `json:"refName,omitempty"`
	Type     *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvType `json:"type,omitempty"`
	Value    *string                                                       `json:"value,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFrom struct {
	RefName string                                                           `json:"refName"`
	Type    GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromType `json:"type"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromIn struct {
	RefName string                                                           `json:"refName"`
	Type    GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromType `json:"type"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvIn struct {
	Key      string                                                        `json:"key"`
	Optional *bool                                                         `json:"optional,omitempty"`
	RefKey   *string                                                       `json:"refKey,omitempty"`
	RefName  *string                                                       `json:"refName,omitempty"`
	Type     *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvType `json:"type,omitempty"`
	Value    *string                                                       `json:"value,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersIn struct {
	Args            []string                                                               `json:"args,omitempty"`
	Command         []string                                                               `json:"command,omitempty"`
	Env             []*GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvIn          `json:"env,omitempty"`
	EnvFrom         []*GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromIn      `json:"envFrom,omitempty"`
	Image           string                                                                 `json:"image"`
	ImagePullPolicy *string                                                                `json:"imagePullPolicy,omitempty"`
	LivenessProbe   *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeIn  `json:"livenessProbe,omitempty"`
	Name            string                                                                 `json:"name"`
	ReadinessProbe  *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeIn `json:"readinessProbe,omitempty"`
	ResourceCPU     *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersResourceCPUIn    `json:"resourceCpu,omitempty"`
	ResourceMemory  *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersResourceMemoryIn `json:"resourceMemory,omitempty"`
	Volumes         []*GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesIn      `json:"volumes,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbe struct {
	FailureThreshold *int                                                                       `json:"failureThreshold,omitempty"`
	HTTPGet          *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeHTTPGet `json:"httpGet,omitempty"`
	InitialDelay     *int                                                                       `json:"initialDelay,omitempty"`
	Interval         *int                                                                       `json:"interval,omitempty"`
	Shell            *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeShell   `json:"shell,omitempty"`
	TCP              *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeTCP     `json:"tcp,omitempty"`
	Type             GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeType     `json:"type"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeHTTPGet struct {
	HTTPHeaders map[string]interface{} `json:"httpHeaders,omitempty"`
	Path        string                 `json:"path"`
	Port        int                    `json:"port"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeHTTPGetIn struct {
	HTTPHeaders map[string]interface{} `json:"httpHeaders,omitempty"`
	Path        string                 `json:"path"`
	Port        int                    `json:"port"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeIn struct {
	FailureThreshold *int                                                                         `json:"failureThreshold,omitempty"`
	HTTPGet          *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeHTTPGetIn `json:"httpGet,omitempty"`
	InitialDelay     *int                                                                         `json:"initialDelay,omitempty"`
	Interval         *int                                                                         `json:"interval,omitempty"`
	Shell            *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeShellIn   `json:"shell,omitempty"`
	TCP              *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeTCPIn     `json:"tcp,omitempty"`
	Type             GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeType       `json:"type"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeShell struct {
	Command []string `json:"command,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeShellIn struct {
	Command []string `json:"command,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeTCP struct {
	Port int `json:"port"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeTCPIn struct {
	Port int `json:"port"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbe struct {
	FailureThreshold *int                                                                        `json:"failureThreshold,omitempty"`
	HTTPGet          *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeHTTPGet `json:"httpGet,omitempty"`
	InitialDelay     *int                                                                        `json:"initialDelay,omitempty"`
	Interval         *int                                                                        `json:"interval,omitempty"`
	Shell            *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeShell   `json:"shell,omitempty"`
	TCP              *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeTCP     `json:"tcp,omitempty"`
	Type             GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeType     `json:"type"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeHTTPGet struct {
	HTTPHeaders map[string]interface{} `json:"httpHeaders,omitempty"`
	Path        string                 `json:"path"`
	Port        int                    `json:"port"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeHTTPGetIn struct {
	HTTPHeaders map[string]interface{} `json:"httpHeaders,omitempty"`
	Path        string                 `json:"path"`
	Port        int                    `json:"port"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeIn struct {
	FailureThreshold *int                                                                          `json:"failureThreshold,omitempty"`
	HTTPGet          *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeHTTPGetIn `json:"httpGet,omitempty"`
	InitialDelay     *int                                                                          `json:"initialDelay,omitempty"`
	Interval         *int                                                                          `json:"interval,omitempty"`
	Shell            *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeShellIn   `json:"shell,omitempty"`
	TCP              *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeTCPIn     `json:"tcp,omitempty"`
	Type             GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeType       `json:"type"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeShell struct {
	Command []string `json:"command,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeShellIn struct {
	Command []string `json:"command,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeTCP struct {
	Port int `json:"port"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeTCPIn struct {
	Port int `json:"port"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersResourceCPU struct {
	Max *string `json:"max,omitempty"`
	Min *string `json:"min,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersResourceCPUIn struct {
	Max *string `json:"max,omitempty"`
	Min *string `json:"min,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersResourceMemory struct {
	Max *string `json:"max,omitempty"`
	Min *string `json:"min,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersResourceMemoryIn struct {
	Max *string `json:"max,omitempty"`
	Min *string `json:"min,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumes struct {
	Items     []*GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesItems `json:"items,omitempty"`
	MountPath string                                                               `json:"mountPath"`
	RefName   string                                                               `json:"refName"`
	Type      GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesType     `json:"type"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesIn struct {
	Items     []*GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesItemsIn `json:"items,omitempty"`
	MountPath string                                                                 `json:"mountPath"`
	RefName   string                                                                 `json:"refName"`
	Type      GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesType       `json:"type"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesItems struct {
	FileName *string `json:"fileName,omitempty"`
	Key      string  `json:"key"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesItemsIn struct {
	FileName *string `json:"fileName,omitempty"`
	Key      string  `json:"key"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecHpa struct {
	Enabled         *bool `json:"enabled,omitempty"`
	MaxReplicas     *int  `json:"maxReplicas,omitempty"`
	MinReplicas     *int  `json:"minReplicas,omitempty"`
	ThresholdCPU    *int  `json:"thresholdCpu,omitempty"`
	ThresholdMemory *int  `json:"thresholdMemory,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecHpaIn struct {
	Enabled         *bool `json:"enabled,omitempty"`
	MaxReplicas     *int  `json:"maxReplicas,omitempty"`
	MinReplicas     *int  `json:"minReplicas,omitempty"`
	ThresholdCPU    *int  `json:"thresholdCpu,omitempty"`
	ThresholdMemory *int  `json:"thresholdMemory,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecIn struct {
	Containers     []*GithubComKloudliteOperatorApisCrdsV1AppSpecContainersIn  `json:"containers"`
	DisplayName    *string                                                     `json:"displayName,omitempty"`
	Freeze         *bool                                                       `json:"freeze,omitempty"`
	Hpa            *GithubComKloudliteOperatorApisCrdsV1AppSpecHpaIn           `json:"hpa,omitempty"`
	Intercept      *GithubComKloudliteOperatorApisCrdsV1AppSpecInterceptIn     `json:"intercept,omitempty"`
	NodeSelector   map[string]interface{}                                      `json:"nodeSelector,omitempty"`
	Region         *string                                                     `json:"region,omitempty"`
	Replicas       *int                                                        `json:"replicas,omitempty"`
	ServiceAccount *string                                                     `json:"serviceAccount,omitempty"`
	Services       []*GithubComKloudliteOperatorApisCrdsV1AppSpecServicesIn    `json:"services,omitempty"`
	Tolerations    []*GithubComKloudliteOperatorApisCrdsV1AppSpecTolerationsIn `json:"tolerations,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecIntercept struct {
	Enabled  bool   `json:"enabled"`
	ToDevice string `json:"toDevice"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecInterceptIn struct {
	Enabled  bool   `json:"enabled"`
	ToDevice string `json:"toDevice"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecServices struct {
	Name       *string `json:"name,omitempty"`
	Port       int     `json:"port"`
	TargetPort *int    `json:"targetPort,omitempty"`
	Type       *string `json:"type,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecServicesIn struct {
	Name       *string `json:"name,omitempty"`
	Port       int     `json:"port"`
	TargetPort *int    `json:"targetPort,omitempty"`
	Type       *string `json:"type,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecTolerations struct {
	Effect            *string `json:"effect,omitempty"`
	Key               *string `json:"key,omitempty"`
	Operator          *string `json:"operator,omitempty"`
	TolerationSeconds *int    `json:"tolerationSeconds,omitempty"`
	Value             *string `json:"value,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecTolerationsIn struct {
	Effect            *string `json:"effect,omitempty"`
	Key               *string `json:"key,omitempty"`
	Operator          *string `json:"operator,omitempty"`
	TolerationSeconds *int    `json:"tolerationSeconds,omitempty"`
	Value             *string `json:"value,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1ManagedResourceSpec struct {
	Inputs   map[string]interface{}                                           `json:"inputs,omitempty"`
	MresKind *GithubComKloudliteOperatorApisCrdsV1ManagedResourceSpecMresKind `json:"mresKind"`
	MsvcRef  *GithubComKloudliteOperatorApisCrdsV1ManagedResourceSpecMsvcRef  `json:"msvcRef"`
}

type GithubComKloudliteOperatorApisCrdsV1ManagedResourceSpecIn struct {
	Inputs   map[string]interface{}                                             `json:"inputs,omitempty"`
	MresKind *GithubComKloudliteOperatorApisCrdsV1ManagedResourceSpecMresKindIn `json:"mresKind"`
	MsvcRef  *GithubComKloudliteOperatorApisCrdsV1ManagedResourceSpecMsvcRefIn  `json:"msvcRef"`
}

type GithubComKloudliteOperatorApisCrdsV1ManagedResourceSpecMresKind struct {
	Kind string `json:"kind"`
}

type GithubComKloudliteOperatorApisCrdsV1ManagedResourceSpecMresKindIn struct {
	Kind string `json:"kind"`
}

type GithubComKloudliteOperatorApisCrdsV1ManagedResourceSpecMsvcRef struct {
	APIVersion string  `json:"apiVersion"`
	Kind       *string `json:"kind,omitempty"`
	Name       string  `json:"name"`
}

type GithubComKloudliteOperatorApisCrdsV1ManagedResourceSpecMsvcRefIn struct {
	APIVersion string  `json:"apiVersion"`
	Kind       *string `json:"kind,omitempty"`
	Name       string  `json:"name"`
}

type GithubComKloudliteOperatorApisCrdsV1ManagedServiceSpec struct {
	Inputs       map[string]interface{}                                               `json:"inputs,omitempty"`
	MsvcKind     *GithubComKloudliteOperatorApisCrdsV1ManagedServiceSpecMsvcKind      `json:"msvcKind"`
	NodeSelector map[string]interface{}                                               `json:"nodeSelector,omitempty"`
	Region       *string                                                              `json:"region,omitempty"`
	Tolerations  []*GithubComKloudliteOperatorApisCrdsV1ManagedServiceSpecTolerations `json:"tolerations,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1ManagedServiceSpecIn struct {
	Inputs       map[string]interface{}                                                 `json:"inputs,omitempty"`
	MsvcKind     *GithubComKloudliteOperatorApisCrdsV1ManagedServiceSpecMsvcKindIn      `json:"msvcKind"`
	NodeSelector map[string]interface{}                                                 `json:"nodeSelector,omitempty"`
	Region       *string                                                                `json:"region,omitempty"`
	Tolerations  []*GithubComKloudliteOperatorApisCrdsV1ManagedServiceSpecTolerationsIn `json:"tolerations,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1ManagedServiceSpecMsvcKind struct {
	APIVersion string  `json:"apiVersion"`
	Kind       *string `json:"kind,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1ManagedServiceSpecMsvcKindIn struct {
	APIVersion string  `json:"apiVersion"`
	Kind       *string `json:"kind,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1ManagedServiceSpecTolerations struct {
	Effect            *string `json:"effect,omitempty"`
	Key               *string `json:"key,omitempty"`
	Operator          *string `json:"operator,omitempty"`
	TolerationSeconds *int    `json:"tolerationSeconds,omitempty"`
	Value             *string `json:"value,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1ManagedServiceSpecTolerationsIn struct {
	Effect            *string `json:"effect,omitempty"`
	Key               *string `json:"key,omitempty"`
	Operator          *string `json:"operator,omitempty"`
	TolerationSeconds *int    `json:"tolerationSeconds,omitempty"`
	Value             *string `json:"value,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1ProjectSpec struct {
	AccountName     string  `json:"accountName"`
	ClusterName     string  `json:"clusterName"`
	DisplayName     *string `json:"displayName,omitempty"`
	Logo            *string `json:"logo,omitempty"`
	TargetNamespace string  `json:"targetNamespace"`
}

type GithubComKloudliteOperatorApisCrdsV1ProjectSpecIn struct {
	AccountName     string  `json:"accountName"`
	ClusterName     string  `json:"clusterName"`
	DisplayName     *string `json:"displayName,omitempty"`
	Logo            *string `json:"logo,omitempty"`
	TargetNamespace string  `json:"targetNamespace"`
}

type GithubComKloudliteOperatorApisCrdsV1RouterSpec struct {
	BackendProtocol *string                                                  `json:"backendProtocol,omitempty"`
	BasicAuth       *GithubComKloudliteOperatorApisCrdsV1RouterSpecBasicAuth `json:"basicAuth,omitempty"`
	Cors            *GithubComKloudliteOperatorApisCrdsV1RouterSpecCors      `json:"cors,omitempty"`
	Domains         []string                                                 `json:"domains"`
	HTTPS           *GithubComKloudliteOperatorApisCrdsV1RouterSpecHTTPS     `json:"https,omitempty"`
	IngressClass    *string                                                  `json:"ingressClass,omitempty"`
	MaxBodySizeInMb *int                                                     `json:"maxBodySizeInMB,omitempty"`
	RateLimit       *GithubComKloudliteOperatorApisCrdsV1RouterSpecRateLimit `json:"rateLimit,omitempty"`
	Region          *string                                                  `json:"region,omitempty"`
	Routes          []*GithubComKloudliteOperatorApisCrdsV1RouterSpecRoutes  `json:"routes,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1RouterSpecBasicAuth struct {
	Enabled    bool    `json:"enabled"`
	SecretName *string `json:"secretName,omitempty"`
	Username   *string `json:"username,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1RouterSpecBasicAuthIn struct {
	Enabled    bool    `json:"enabled"`
	SecretName *string `json:"secretName,omitempty"`
	Username   *string `json:"username,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1RouterSpecCors struct {
	AllowCredentials *bool    `json:"allowCredentials,omitempty"`
	Enabled          *bool    `json:"enabled,omitempty"`
	Origins          []string `json:"origins,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1RouterSpecCorsIn struct {
	AllowCredentials *bool    `json:"allowCredentials,omitempty"`
	Enabled          *bool    `json:"enabled,omitempty"`
	Origins          []string `json:"origins,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1RouterSpecHTTPS struct {
	ClusterIssuer *string `json:"clusterIssuer,omitempty"`
	Enabled       bool    `json:"enabled"`
	ForceRedirect *bool   `json:"forceRedirect,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1RouterSpecHTTPSIn struct {
	ClusterIssuer *string `json:"clusterIssuer,omitempty"`
	Enabled       bool    `json:"enabled"`
	ForceRedirect *bool   `json:"forceRedirect,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1RouterSpecIn struct {
	BackendProtocol *string                                                    `json:"backendProtocol,omitempty"`
	BasicAuth       *GithubComKloudliteOperatorApisCrdsV1RouterSpecBasicAuthIn `json:"basicAuth,omitempty"`
	Cors            *GithubComKloudliteOperatorApisCrdsV1RouterSpecCorsIn      `json:"cors,omitempty"`
	Domains         []string                                                   `json:"domains"`
	HTTPS           *GithubComKloudliteOperatorApisCrdsV1RouterSpecHTTPSIn     `json:"https,omitempty"`
	IngressClass    *string                                                    `json:"ingressClass,omitempty"`
	MaxBodySizeInMb *int                                                       `json:"maxBodySizeInMB,omitempty"`
	RateLimit       *GithubComKloudliteOperatorApisCrdsV1RouterSpecRateLimitIn `json:"rateLimit,omitempty"`
	Region          *string                                                    `json:"region,omitempty"`
	Routes          []*GithubComKloudliteOperatorApisCrdsV1RouterSpecRoutesIn  `json:"routes,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1RouterSpecRateLimit struct {
	Connections *int  `json:"connections,omitempty"`
	Enabled     *bool `json:"enabled,omitempty"`
	Rpm         *int  `json:"rpm,omitempty"`
	Rps         *int  `json:"rps,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1RouterSpecRateLimitIn struct {
	Connections *int  `json:"connections,omitempty"`
	Enabled     *bool `json:"enabled,omitempty"`
	Rpm         *int  `json:"rpm,omitempty"`
	Rps         *int  `json:"rps,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1RouterSpecRoutes struct {
	App     *string `json:"app,omitempty"`
	Lambda  *string `json:"lambda,omitempty"`
	Path    string  `json:"path"`
	Port    int     `json:"port"`
	Rewrite *bool   `json:"rewrite,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1RouterSpecRoutesIn struct {
	App     *string `json:"app,omitempty"`
	Lambda  *string `json:"lambda,omitempty"`
	Path    string  `json:"path"`
	Port    int     `json:"port"`
	Rewrite *bool   `json:"rewrite,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1WorkspaceSpec struct {
	IsEnvironment   *bool  `json:"isEnvironment,omitempty"`
	ProjectName     string `json:"projectName"`
	TargetNamespace string `json:"targetNamespace"`
}

type GithubComKloudliteOperatorApisCrdsV1WorkspaceSpecIn struct {
	IsEnvironment   *bool  `json:"isEnvironment,omitempty"`
	ProjectName     string `json:"projectName"`
	TargetNamespace string `json:"targetNamespace"`
}

type GithubComKloudliteOperatorApisWireguardV1DeviceSpec struct {
	Offset     int                                                         `json:"offset"`
	Ports      []*GithubComKloudliteOperatorApisWireguardV1DeviceSpecPorts `json:"ports,omitempty"`
	ServerName string                                                      `json:"serverName"`
}

type GithubComKloudliteOperatorApisWireguardV1DeviceSpecIn struct {
	Offset     int                                                           `json:"offset"`
	Ports      []*GithubComKloudliteOperatorApisWireguardV1DeviceSpecPortsIn `json:"ports,omitempty"`
	ServerName string                                                        `json:"serverName"`
}

type GithubComKloudliteOperatorApisWireguardV1DeviceSpecPorts struct {
	Port       *int `json:"port,omitempty"`
	TargetPort *int `json:"targetPort,omitempty"`
}

type GithubComKloudliteOperatorApisWireguardV1DeviceSpecPortsIn struct {
	Port       *int `json:"port,omitempty"`
	TargetPort *int `json:"targetPort,omitempty"`
}

type GithubComKloudliteOperatorPkgOperatorCheck struct {
	Generation *int    `json:"generation,omitempty"`
	Message    *string `json:"message,omitempty"`
	Status     bool    `json:"status"`
}

type GithubComKloudliteOperatorPkgOperatorResourceRef struct {
	APIVersion *string `json:"apiVersion,omitempty"`
	Kind       *string `json:"kind,omitempty"`
	Name       string  `json:"name"`
	Namespace  string  `json:"namespace"`
}

type GithubComKloudliteOperatorPkgRawJSONRawJSON struct {
	RawMessage interface{} `json:"RawMessage,omitempty"`
}

type ImagePullSecretEdge struct {
	Cursor string                    `json:"cursor"`
	Node   *entities.ImagePullSecret `json:"node"`
}

type ImagePullSecretPaginatedRecords struct {
	Edges      []*ImagePullSecretEdge `json:"edges"`
	PageInfo   *PageInfo              `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

type KloudliteIoAppsConsoleInternalEntitiesInputField struct {
	DefaultValue interface{} `json:"defaultValue,omitempty"`
	InputType    string      `json:"inputType"`
	Label        string      `json:"label"`
	Max          *float64    `json:"max,omitempty"`
	Min          *float64    `json:"min,omitempty"`
	Name         string      `json:"name"`
	Required     *bool       `json:"required,omitempty"`
	Unit         *string     `json:"unit,omitempty"`
}

type KloudliteIoAppsConsoleInternalEntitiesMresTemplate struct {
	APIVersion  *string                                              `json:"apiVersion,omitempty"`
	Description string                                               `json:"description"`
	DisplayName string                                               `json:"displayName"`
	Fields      []*KloudliteIoAppsConsoleInternalEntitiesInputField  `json:"fields"`
	Kind        *string                                              `json:"kind,omitempty"`
	Name        string                                               `json:"name"`
	Outputs     []*KloudliteIoAppsConsoleInternalEntitiesOutputField `json:"outputs"`
}

type KloudliteIoAppsConsoleInternalEntitiesOutputField struct {
	Description string `json:"description"`
	Label       string `json:"label"`
	Name        string `json:"name"`
}

type ManagedResourceEdge struct {
	Cursor string                    `json:"cursor"`
	Node   *entities.ManagedResource `json:"node"`
}

type ManagedResourcePaginatedRecords struct {
	Edges      []*ManagedResourceEdge `json:"edges"`
	PageInfo   *PageInfo              `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

type ManagedServiceEdge struct {
	Cursor string                   `json:"cursor"`
	Node   *entities.ManagedService `json:"node"`
}

type ManagedServicePaginatedRecords struct {
	Edges      []*ManagedServiceEdge `json:"edges"`
	PageInfo   *PageInfo             `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

type PageInfo struct {
	EndCursor       *string `json:"endCursor,omitempty"`
	HasNextPage     *bool   `json:"hasNextPage,omitempty"`
	HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
	StartCursor     *string `json:"startCursor,omitempty"`
}

type ProjectEdge struct {
	Cursor string            `json:"cursor"`
	Node   *entities.Project `json:"node"`
}

type ProjectID struct {
	Type  ProjectIDType `json:"type"`
	Value string        `json:"value"`
}

type ProjectPaginatedRecords struct {
	Edges      []*ProjectEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

type RouterEdge struct {
	Cursor string           `json:"cursor"`
	Node   *entities.Router `json:"node"`
}

type RouterPaginatedRecords struct {
	Edges      []*RouterEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

type SearchApps struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchConfigs struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchEnvironments struct {
	Text        *repos.MatchFilter `json:"text,omitempty"`
	ProjectName *repos.MatchFilter `json:"projectName,omitempty"`
}

type SearchImagePullSecrets struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchManagedResources struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchManagedServices struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchProjects struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchRouters struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchSecrets struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchVPNDevices struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchWorkspaces struct {
	Text        *repos.MatchFilter `json:"text,omitempty"`
	ProjectName *repos.MatchFilter `json:"projectName,omitempty"`
}

type SecretEdge struct {
	Cursor string           `json:"cursor"`
	Node   *entities.Secret `json:"node"`
}

type SecretPaginatedRecords struct {
	Edges      []*SecretEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

type VPNDeviceEdge struct {
	Cursor string              `json:"cursor"`
	Node   *entities.VPNDevice `json:"node"`
}

type VPNDevicePaginatedRecords struct {
	Edges      []*VPNDeviceEdge `json:"edges"`
	PageInfo   *PageInfo        `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

type WorkspaceEdge struct {
	Cursor string              `json:"cursor"`
	Node   *entities.Workspace `json:"node"`
}

type WorkspaceOrEnvID struct {
	Type  WorkspaceOrEnvIDType `json:"type"`
	Value string               `json:"value"`
}

type WorkspacePaginatedRecords struct {
	Edges      []*WorkspaceEdge `json:"edges"`
	PageInfo   *PageInfo        `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

type EnvOrWorkspaceOrProjectIDType string

const (
	EnvOrWorkspaceOrProjectIDTypeWorkspaceName              EnvOrWorkspaceOrProjectIDType = "workspaceName"
	EnvOrWorkspaceOrProjectIDTypeWorkspaceTargetNamespace   EnvOrWorkspaceOrProjectIDType = "workspaceTargetNamespace"
	EnvOrWorkspaceOrProjectIDTypeEnvironmentName            EnvOrWorkspaceOrProjectIDType = "environmentName"
	EnvOrWorkspaceOrProjectIDTypeEnvironmentTargetNamespace EnvOrWorkspaceOrProjectIDType = "environmentTargetNamespace"
	EnvOrWorkspaceOrProjectIDTypeProjectName                EnvOrWorkspaceOrProjectIDType = "projectName"
	EnvOrWorkspaceOrProjectIDTypeProjectTargetNamespace     EnvOrWorkspaceOrProjectIDType = "projectTargetNamespace"
)

var AllEnvOrWorkspaceOrProjectIDType = []EnvOrWorkspaceOrProjectIDType{
	EnvOrWorkspaceOrProjectIDTypeWorkspaceName,
	EnvOrWorkspaceOrProjectIDTypeWorkspaceTargetNamespace,
	EnvOrWorkspaceOrProjectIDTypeEnvironmentName,
	EnvOrWorkspaceOrProjectIDTypeEnvironmentTargetNamespace,
	EnvOrWorkspaceOrProjectIDTypeProjectName,
	EnvOrWorkspaceOrProjectIDTypeProjectTargetNamespace,
}

func (e EnvOrWorkspaceOrProjectIDType) IsValid() bool {
	switch e {
	case EnvOrWorkspaceOrProjectIDTypeWorkspaceName, EnvOrWorkspaceOrProjectIDTypeWorkspaceTargetNamespace, EnvOrWorkspaceOrProjectIDTypeEnvironmentName, EnvOrWorkspaceOrProjectIDTypeEnvironmentTargetNamespace, EnvOrWorkspaceOrProjectIDTypeProjectName, EnvOrWorkspaceOrProjectIDTypeProjectTargetNamespace:
		return true
	}
	return false
}

func (e EnvOrWorkspaceOrProjectIDType) String() string {
	return string(e)
}

func (e *EnvOrWorkspaceOrProjectIDType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnvOrWorkspaceOrProjectIDType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnvOrWorkspaceOrProjectIdType", str)
	}
	return nil
}

func (e EnvOrWorkspaceOrProjectIDType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromType string

const (
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromTypeConfig GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromType = "config"
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromTypeSecret GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromType = "secret"
)

var AllGithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromType = []GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromType{
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromTypeConfig,
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromTypeSecret,
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromType) IsValid() bool {
	switch e {
	case GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromTypeConfig, GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromTypeSecret:
		return true
	}
	return false
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromType) String() string {
	return string(e)
}

func (e *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github_com__kloudlite__operator__apis__crds__v1_AppSpecContainersEnvFromType", str)
	}
	return nil
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvFromType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvType string

const (
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvTypeConfig GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvType = "config"
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvTypeSecret GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvType = "secret"
)

var AllGithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvType = []GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvType{
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvTypeConfig,
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvTypeSecret,
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvType) IsValid() bool {
	switch e {
	case GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvTypeConfig, GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvTypeSecret:
		return true
	}
	return false
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvType) String() string {
	return string(e)
}

func (e *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github_com__kloudlite__operator__apis__crds__v1_AppSpecContainersEnvType", str)
	}
	return nil
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersEnvType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeType string

const (
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeTypeHTTPGet GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeType = "httpGet"
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeTypeShell   GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeType = "shell"
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeTypeTCP     GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeType = "tcp"
)

var AllGithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeType = []GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeType{
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeTypeHTTPGet,
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeTypeShell,
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeTypeTCP,
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeType) IsValid() bool {
	switch e {
	case GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeTypeHTTPGet, GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeTypeShell, GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeTypeTCP:
		return true
	}
	return false
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeType) String() string {
	return string(e)
}

func (e *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github_com__kloudlite__operator__apis__crds__v1_AppSpecContainersLivenessProbeType", str)
	}
	return nil
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersLivenessProbeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeType string

const (
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeTypeHTTPGet GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeType = "httpGet"
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeTypeShell   GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeType = "shell"
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeTypeTCP     GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeType = "tcp"
)

var AllGithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeType = []GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeType{
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeTypeHTTPGet,
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeTypeShell,
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeTypeTCP,
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeType) IsValid() bool {
	switch e {
	case GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeTypeHTTPGet, GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeTypeShell, GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeTypeTCP:
		return true
	}
	return false
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeType) String() string {
	return string(e)
}

func (e *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github_com__kloudlite__operator__apis__crds__v1_AppSpecContainersReadinessProbeType", str)
	}
	return nil
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersReadinessProbeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesType string

const (
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesTypeConfig GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesType = "config"
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesTypeSecret GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesType = "secret"
)

var AllGithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesType = []GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesType{
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesTypeConfig,
	GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesTypeSecret,
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesType) IsValid() bool {
	switch e {
	case GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesTypeConfig, GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesTypeSecret:
		return true
	}
	return false
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesType) String() string {
	return string(e)
}

func (e *GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github_com__kloudlite__operator__apis__crds__v1_AppSpecContainersVolumesType", str)
	}
	return nil
}

func (e GithubComKloudliteOperatorApisCrdsV1AppSpecContainersVolumesType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KloudliteIoPkgTypesSyncStatusAction string

const (
	KloudliteIoPkgTypesSyncStatusActionApply  KloudliteIoPkgTypesSyncStatusAction = "APPLY"
	KloudliteIoPkgTypesSyncStatusActionDelete KloudliteIoPkgTypesSyncStatusAction = "DELETE"
)

var AllKloudliteIoPkgTypesSyncStatusAction = []KloudliteIoPkgTypesSyncStatusAction{
	KloudliteIoPkgTypesSyncStatusActionApply,
	KloudliteIoPkgTypesSyncStatusActionDelete,
}

func (e KloudliteIoPkgTypesSyncStatusAction) IsValid() bool {
	switch e {
	case KloudliteIoPkgTypesSyncStatusActionApply, KloudliteIoPkgTypesSyncStatusActionDelete:
		return true
	}
	return false
}

func (e KloudliteIoPkgTypesSyncStatusAction) String() string {
	return string(e)
}

func (e *KloudliteIoPkgTypesSyncStatusAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KloudliteIoPkgTypesSyncStatusAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Kloudlite_io__pkg__types_SyncStatusAction", str)
	}
	return nil
}

func (e KloudliteIoPkgTypesSyncStatusAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KloudliteIoPkgTypesSyncStatusState string

const (
	KloudliteIoPkgTypesSyncStatusStateAppliedAtAgent          KloudliteIoPkgTypesSyncStatusState = "APPLIED_AT_AGENT"
	KloudliteIoPkgTypesSyncStatusStateErroredAtAgent          KloudliteIoPkgTypesSyncStatusState = "ERRORED_AT_AGENT"
	KloudliteIoPkgTypesSyncStatusStateIDLe                    KloudliteIoPkgTypesSyncStatusState = "IDLE"
	KloudliteIoPkgTypesSyncStatusStateInQueue                 KloudliteIoPkgTypesSyncStatusState = "IN_QUEUE"
	KloudliteIoPkgTypesSyncStatusStateReceivedUpdateFromAgent KloudliteIoPkgTypesSyncStatusState = "RECEIVED_UPDATE_FROM_AGENT"
)

var AllKloudliteIoPkgTypesSyncStatusState = []KloudliteIoPkgTypesSyncStatusState{
	KloudliteIoPkgTypesSyncStatusStateAppliedAtAgent,
	KloudliteIoPkgTypesSyncStatusStateErroredAtAgent,
	KloudliteIoPkgTypesSyncStatusStateIDLe,
	KloudliteIoPkgTypesSyncStatusStateInQueue,
	KloudliteIoPkgTypesSyncStatusStateReceivedUpdateFromAgent,
}

func (e KloudliteIoPkgTypesSyncStatusState) IsValid() bool {
	switch e {
	case KloudliteIoPkgTypesSyncStatusStateAppliedAtAgent, KloudliteIoPkgTypesSyncStatusStateErroredAtAgent, KloudliteIoPkgTypesSyncStatusStateIDLe, KloudliteIoPkgTypesSyncStatusStateInQueue, KloudliteIoPkgTypesSyncStatusStateReceivedUpdateFromAgent:
		return true
	}
	return false
}

func (e KloudliteIoPkgTypesSyncStatusState) String() string {
	return string(e)
}

func (e *KloudliteIoPkgTypesSyncStatusState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KloudliteIoPkgTypesSyncStatusState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Kloudlite_io__pkg__types_SyncStatusState", str)
	}
	return nil
}

func (e KloudliteIoPkgTypesSyncStatusState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProjectIDType string

const (
	ProjectIDTypeName            ProjectIDType = "name"
	ProjectIDTypeTargetNamespace ProjectIDType = "targetNamespace"
)

var AllProjectIDType = []ProjectIDType{
	ProjectIDTypeName,
	ProjectIDTypeTargetNamespace,
}

func (e ProjectIDType) IsValid() bool {
	switch e {
	case ProjectIDTypeName, ProjectIDTypeTargetNamespace:
		return true
	}
	return false
}

func (e ProjectIDType) String() string {
	return string(e)
}

func (e *ProjectIDType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectIDType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectIdType", str)
	}
	return nil
}

func (e ProjectIDType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WorkspaceOrEnvIDType string

const (
	WorkspaceOrEnvIDTypeWorkspaceName              WorkspaceOrEnvIDType = "workspaceName"
	WorkspaceOrEnvIDTypeWorkspaceTargetNamespace   WorkspaceOrEnvIDType = "workspaceTargetNamespace"
	WorkspaceOrEnvIDTypeEnvironmentName            WorkspaceOrEnvIDType = "environmentName"
	WorkspaceOrEnvIDTypeEnvironmentTargetNamespace WorkspaceOrEnvIDType = "environmentTargetNamespace"
)

var AllWorkspaceOrEnvIDType = []WorkspaceOrEnvIDType{
	WorkspaceOrEnvIDTypeWorkspaceName,
	WorkspaceOrEnvIDTypeWorkspaceTargetNamespace,
	WorkspaceOrEnvIDTypeEnvironmentName,
	WorkspaceOrEnvIDTypeEnvironmentTargetNamespace,
}

func (e WorkspaceOrEnvIDType) IsValid() bool {
	switch e {
	case WorkspaceOrEnvIDTypeWorkspaceName, WorkspaceOrEnvIDTypeWorkspaceTargetNamespace, WorkspaceOrEnvIDTypeEnvironmentName, WorkspaceOrEnvIDTypeEnvironmentTargetNamespace:
		return true
	}
	return false
}

func (e WorkspaceOrEnvIDType) String() string {
	return string(e)
}

func (e *WorkspaceOrEnvIDType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WorkspaceOrEnvIDType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WorkspaceOrEnvIdType", str)
	}
	return nil
}

func (e WorkspaceOrEnvIDType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
