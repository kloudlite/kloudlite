// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"kloudlite.io/pkg/repos"
)

type Account struct {
	ID       repos.ID   `json:"id"`
	Projects []*Project `json:"projects"`
}

func (Account) IsEntity() {}

type App struct {
	ID          repos.ID        `json:"id"`
	Name        string          `json:"name"`
	Namespace   string          `json:"namespace"`
	Description *string         `json:"description"`
	ReadableID  repos.ID        `json:"readableId"`
	Services    []*AppService   `json:"services"`
	Replicas    *int            `json:"replicas"`
	Containers  []*AppContainer `json:"containers"`
	Project     *Project        `json:"project"`
	Version     *int            `json:"version"`
}

type AppContainer struct {
	Name             string        `json:"name"`
	Image            string        `json:"image"`
	ImagePullPolicy  string        `json:"imagePullPolicy"`
	Env              []*AppEnv     `json:"env"`
	ResourceCPU      *ContainerRes `json:"resourceCpu"`
	ResourceMemory   *ContainerRes `json:"resourceMemory"`
	Volumes          []*AppVolume  `json:"volumes"`
	ManagedResources []*ManagedRes `json:"managedResources"`
}

type AppContainerIn struct {
	FromGit          *GitPipelineIn     `json:"fromGit"`
	Name             string             `json:"name"`
	Image            *string            `json:"image"`
	ImagePullPolicy  *string            `json:"imagePullPolicy"`
	Env              []*AppEnvInput     `json:"env"`
	ResourceCPU      *ContainerResInput `json:"resourceCpu"`
	ResourceMemory   *ContainerResInput `json:"resourceMemory"`
	Volumes          []*IAppVolume      `json:"volumes"`
	ManagedResources []string           `json:"managedResources"`
	PullSecret       *string            `json:"pullSecret"`
}

type AppContainerUpdateInput struct {
	Name             *string            `json:"name"`
	Image            *string            `json:"image"`
	ImagePullPolicy  *string            `json:"imagePullPolicy"`
	Env              []*AppEnvInput     `json:"env"`
	ResourceCPU      *ContainerResInput `json:"resourceCpu"`
	ResourceMemory   *ContainerResInput `json:"resourceMemory"`
	Volumes          []*IAppVolume      `json:"volumes"`
	ManagedResources []string           `json:"managedResources"`
}

type AppEnv struct {
	Key    string  `json:"key"`
	Type   string  `json:"type"`
	Value  *string `json:"value"`
	RefKey *string `json:"refKey"`
	RefID  *string `json:"refId"`
}

type AppEnvInput struct {
	Key    string  `json:"key"`
	Type   string  `json:"type"`
	Value  *string `json:"value"`
	RefKey *string `json:"refKey"`
	RefID  *string `json:"refId"`
}

type AppMemebership struct {
	App  *App   `json:"app"`
	Role string `json:"role"`
}

type AppService struct {
	Type       string `json:"type"`
	Port       int    `json:"port"`
	TargetPort *int   `json:"targetPort"`
}

type AppServiceInput struct {
	Type       string `json:"type"`
	Port       int    `json:"port"`
	TargetPort *int   `json:"targetPort"`
}

type AppVolume struct {
	Name      string           `json:"name"`
	MountPath string           `json:"mountPath"`
	Type      string           `json:"type"`
	RefID     repos.ID         `json:"refId"`
	Items     []*AppVolumeItem `json:"items"`
}

type AppVolumeItem struct {
	Key      string `json:"key"`
	FileName string `json:"fileName"`
}

type CCMData struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type CSEntry struct {
	Apps  []*App `json:"apps"`
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Cluster struct {
	ID         repos.ID  `json:"id"`
	Name       string    `json:"name"`
	Provider   string    `json:"provider"`
	Region     string    `json:"region"`
	IP         *string   `json:"ip"`
	Devices    []*Device `json:"devices"`
	NodesCount int       `json:"nodesCount"`
	Status     string    `json:"status"`
}

func (Cluster) IsEntity() {}

type Config struct {
	ID         repos.ID   `json:"id"`
	Name       string     `json:"name"`
	Project    *Project   `json:"project"`
	Entries    []*CSEntry `json:"entries"`
	ReadableID repos.ID   `json:"readableId"`
	Version    int        `json:"version"`
	Apps       []*App     `json:"apps"`
	JobID      *repos.ID  `json:"jobId"`
}

type ContainerRes struct {
	Min string `json:"min"`
	Max string `json:"max"`
}

type ContainerResInput struct {
	Min string `json:"min"`
	Max string `json:"max"`
}

type Device struct {
	ID            repos.ID `json:"id"`
	User          *User    `json:"user"`
	Name          string   `json:"name"`
	Cluster       *Cluster `json:"cluster"`
	Configuration string   `json:"configuration"`
}

func (Device) IsEntity() {}

type GitPipeline struct {
	ID          repos.ID `json:"id"`
	PipelineEnv string   `json:"pipelineEnv"`
	GitProvider *string  `json:"gitProvider"`
	GitRepoURL  *string  `json:"gitRepoUrl"`
	BuildArgs   []*Kv    `json:"buildArgs"`
	PullSecret  *string  `json:"pullSecret"`
	Name        string   `json:"name"`
	ImageName   string   `json:"imageName"`
	DockerFile  *string  `json:"dockerFile"`
	ContextDir  *string  `json:"contextDir"`
	Github      *string  `json:"github"`
	Gitlab      *string  `json:"gitlab"`
	Project     *Project `json:"project"`
}

type GitPipelineIn struct {
	ProjectID   repos.ID   `json:"projectId"`
	Name        string     `json:"name"`
	GitRepoURL  string     `json:"gitRepoUrl"`
	GitProvider string     `json:"gitProvider"`
	DockerFile  *string    `json:"dockerFile"`
	ContextDir  *string    `json:"contextDir"`
	BuildArgs   []*KVInput `json:"buildArgs"`
	PipelineEnv string     `json:"pipelineEnv"`
	PullSecret  *string    `json:"pullSecret"`
}

type IAppVolume struct {
	Name      string            `json:"name"`
	MountPath string            `json:"mountPath"`
	Type      string            `json:"type"`
	RefID     repos.ID          `json:"refId"`
	Items     []*IAppVolumeItem `json:"items"`
}

type IAppVolumeItem struct {
	Key      string `json:"key"`
	FileName string `json:"fileName"`
}

type IAppVolumeUpdate struct {
	MountPath *string           `json:"mountPath"`
	Type      *string           `json:"type"`
	RefID     *repos.ID         `json:"refId"`
	Items     []*IAppVolumeItem `json:"items"`
}

type IManagedResArtifact struct {
	Type    string `json:"type"`
	RefName string `json:"refName"`
	RefKey  string `json:"refKey"`
}

type JAction struct {
	ID           repos.ID `json:"id"`
	ResourceType string   `json:"resourceType"`
	ResourceID   string   `json:"resourceId"`
	Action       string   `json:"action"`
	Data         *string  `json:"data"`
	KubeData     *string  `json:"kubeData"`
}

type Job struct {
	ID        repos.ID   `json:"id"`
	Project   *Project   `json:"project"`
	Actions   []*JAction `json:"actions"`
	Flows     []repos.ID `json:"flows"`
	KlStatus  *KlStatus2 `json:"klStatus"`
	CreatedAt *string    `json:"createdAt"`
}

type JSONPatch struct {
	Op    string  `json:"op"`
	Path  string  `json:"path"`
	Value *string `json:"value"`
}

type JSONPatchInput struct {
	Op    string  `json:"op"`
	Path  string  `json:"path"`
	Value *string `json:"value"`
}

type Kv struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type KVInput struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type KlStatus struct {
	State string  `json:"state"`
	Msg   string  `json:"msg"`
	Error *string `json:"error"`
}

type KlStatus2 struct {
	State string          `json:"state"`
	Feed  []*KlStatusFeed `json:"feed"`
}

type KlStatusFeed struct {
	Timestamp string `json:"timestamp"`
	Type      string `json:"type"`
	Message   string `json:"message"`
}

type ManagedRes struct {
	ID           repos.ID              `json:"id"`
	Name         string                `json:"name"`
	ResourceName string                `json:"resourceName"`
	Version      int                   `json:"version"`
	Installation *ManagedSvc           `json:"installation"`
	Values       string                `json:"values"`
	Artifacts    []*ManagedResArtifact `json:"artifacts"`
	JobID        *repos.ID             `json:"jobId"`
}

type ManagedResArtifact struct {
	Type    string `json:"type"`
	RefName string `json:"refName"`
	RefKey  string `json:"refKey"`
}

type ManagedSvc struct {
	ID      repos.ID          `json:"id"`
	Name    string            `json:"name"`
	Version int               `json:"version"`
	Project *Project          `json:"project"`
	Source  *ManagedSvcSource `json:"source"`
	Values  string            `json:"values"`
	JobID   *repos.ID         `json:"jobId"`
}

type ManagedSvcResource struct {
	Name       string            `json:"name"`
	Fields     *string           `json:"fields"`
	Operations *MsvcSourceResOps `json:"operations"`
}

type ManagedSvcSource struct {
	ID          repos.ID              `json:"id"`
	Name        string                `json:"name"`
	DisplayName *string               `json:"displayName"`
	Operations  *MsvcSourceOps        `json:"operations"`
	Fields      *string               `json:"fields"`
	Resources   []*ManagedSvcResource `json:"resources"`
}

type MsvcSourceOps struct {
	Install   string  `json:"install"`
	Uninstall string  `json:"uninstall"`
	Update    *string `json:"update"`
}

type MsvcSourceResOps struct {
	Create string  `json:"create"`
	Update *string `json:"update"`
	Delete string  `json:"delete"`
}

type NewResourcesIn struct {
	Configs    []string `json:"configs"`
	Secrets    []string `json:"secrets"`
	MServices  []string `json:"mServices"`
	MResources []string `json:"mResources"`
}

type Patch struct {
	Status bool   `json:"status"`
	Errors string `json:"errors"`
}

type PatchApp struct {
	Status bool    `json:"status"`
	Errors *string `json:"errors"`
	App    *App    `json:"app"`
}

type Project struct {
	ID          repos.ID          `json:"id"`
	Name        string            `json:"name"`
	DisplayName string            `json:"displayName"`
	ReadableID  repos.ID          `json:"readableId"`
	Cluster     string            `json:"cluster"`
	Logo        *string           `json:"logo"`
	Description *string           `json:"description"`
	Account     *Account          `json:"account"`
	Memberships []*UserMembership `json:"memberships"`
}

type ProjectMembership struct {
	Project *Project `json:"project"`
	Role    *string  `json:"role"`
}

type QueryInput struct {
	Namespace *string   `json:"namespace"`
	AccountID *repos.ID `json:"accountId"`
	Cluster   *string   `json:"cluster"`
}

type Route struct {
	Path string `json:"path"`
	App  *App   `json:"app"`
	Port int    `json:"port"`
}

type RouteInput struct {
	Path  string `json:"path"`
	AppID string `json:"appId"`
	Port  int    `json:"port"`
}

type Router struct {
	ID      repos.ID `json:"id"`
	Name    string   `json:"name"`
	Project *Project `json:"project"`
	Domains []string `json:"domains"`
	Routes  []*Route `json:"routes"`
}

type Secret struct {
	ID         repos.ID   `json:"id"`
	Name       string     `json:"name"`
	Project    *Project   `json:"project"`
	Entries    []*CSEntry `json:"entries"`
	ReadableID repos.ID   `json:"readableId"`
	Version    int        `json:"version"`
	Apps       []*App     `json:"apps"`
	JobID      *repos.ID  `json:"jobId"`
}

type User struct {
	ID      repos.ID  `json:"id"`
	Devices []*Device `json:"devices"`
}

func (User) IsEntity() {}

type UserMembership struct {
	User *User  `json:"user"`
	Role string `json:"role"`
}
