scalar Json

type Query {
  core_projects(accountId: ID): [Project!]!
  core_project(accountId:ID, projectId: ID!): Project

  core_apps(projectId: ID!, search: String): [App!]!
  core_app(appId: ID!, version: String): App

  core_routers(projectId: ID!, search: String): [Router!]!
  core_router(routerId: ID, projectId: ID): Router

  core_configs(projectId: ID!, search: String): [Config!]!
  core_config(configId: ID, projectId: ID): Config!

  core_secrets(projectId: ID!, search: String): [Secret!]!
  core_secret(secretId: ID, projectId: ID, secretName: String): Secret!

  ci_gitPullRepoToken(imageId: ID!): String # TBD

  ci_gitlabRepos(groupId: ID!, search: String, limit: Int, page: Int): [Json!]!
  ci_gitlabGroups(search: String, limit: Int, page: Int): [Json!]!
  ci_gitlabRepoBranches(repoUrl: String!, search: String): [Json!]!

  ci_githubInstallations: [Json!]!
  ci_githubRepos(installationId: String!, limit: Int, page: Int): [Json!]!
  ci_githubRepoBranches(repoUrl: String!, limit: Int, page: Int): [Json!]!
  ci_searchGithubRepos(search: String, org: String!, limit: Int, page: Int): [Json!]!

  ci_gitPipelines(projectId: ID!, query: Json): [GitPipeline!]
  ci_gitPipeline(pipelineId: ID!): GitPipeline

  managedSvc_listAvailable: Json!
  managedSvc_getInstallation(installationId: ID!, nextVersion: Boolean): ManagedSvc
  managedSvc_listInstallations(projectId: ID!): [ManagedSvc!]

  managedRes_getResource(resId: ID!, nextVersion: Boolean): ManagedRes
  managedRes_listResources(installationId: ID!): [ManagedRes!]

  infra_getCluster(clusterId: ID!): Cluster
  infra_getDevices(deviceId: ID!): Device
}



type ManagedRes {
  id: ID!
  name: String!
  resourceName: String!
  version: Int!
  installation: ManagedSvc!
  values: Json!
}

type ManagedSvc {
  id: ID!
  name: String!
  version: Int!
  project: Project!
  source: ManagedSvcSource!
  values: Json!
  jobId: ID
}

type ManagedSvcSource {
  id: ID!
  name: String!
  displayName: String
  fields: Json
  resources: [ManagedResourceSource!]
}

type ManagedResourceSource {
  name: String!
  fields: Json
}

input GitPipelineInput{
  gitRepoUrl: String!
  gitProvider: String!
  dockerFile: String
  contextDir: String
  buildArgs: [KVInput]
  pipelineEnv: String!
  pullSecret: String
}

type Mutation {
  mangedSvc_install(projectId: ID!, templateId: ID!, name: String!, values: Json!): ManagedSvc
  mangedSvc_uninstall(installationId: ID!): Boolean!
  mangedSvc_update(installationId: ID!, values: Json!): Boolean!

  managedRes_create(installationId: ID!, name: String!, resourceName: String!, values: Json!): ManagedRes!
  managedRes_update(resId: ID!, values: Json): Boolean!
  managedRes_delete(resId: ID!): Boolean

  infra_createCluster(name: String!, provider: String!, region: String!, nodesCount: Int!): Cluster!
  infra_updateCluster(name: String, clusterId: ID!, nodesCount: Int): Cluster!
  infra_deleteCluster(clusterId: ID!): Boolean!
  infra_addDevice(clusterId: ID!, userId: ID!, name: String!): Device!
  infra_removeDevice(deviceId: ID!): Boolean!

  core_createProject(accountId: ID!, name: String!, displayName: String!, cluster: String!, logo: String, description: String): Project!
  core_updateProject(projectId: ID!, displayName: String, cluster: String, logo: String, description: String): Boolean!
  core_deleteProject(projectId: ID!): Boolean!

  iam_inviteProjectMember(projectId: ID!, email: String!, name: String!, role: String!): Boolean!
  iam_removeProjectMember(projectId: ID!, userId: ID!): Boolean!
  iam_updateProjectMember(projectId: ID!, userId: ID!, role: String!): Boolean!

  githubEvent(installationId: ID!, sourceRepo: String!): Boolean #TBD
  gitlabEvent(email: ID!, sourceRepo: String!): Boolean #TBD

  # App
  core_createAppFlow(
    projectId: ID!,
    app: Json!,
    pipelines: GitPipelineInput,
    configs: Json,
    secrets: Json,
    mServices: Json,
    mResources: Json
  ): Boolean
  core_updateApp(appId: ID!, name: String, description: String, service: AppServiceInput, replicas: Int, containers: AppContainerIN): App!
  core_deleteApp(appId: ID!): Boolean!
  core_rollbackApp(appId: ID!, version: Int!): App! #TBD

  # Secret n Config
  core_createSecret(projectId: ID!, name: String!, data: Json): Secret!
  core_updateSecret(projectId: ID!, name: String!, data: Json): Secret!
  core_deleteSecret(projectId: ID!, name: String!): Secret!

  core_createConfig(projectId: ID!, name: String!, data: Json): Config!
  core_updateConfig(projectId: ID!, name: String!, data: Json): Config!
  core_deleteConfig(configId: ID!): Config!

  ci_deleteGitPipeline(pipelineId: ID!): Boolean!


  core_createRouter(projectId: ID!, name: String!, domains: [String], routes: [RouteInput!]!): Router!
  core_updateRouter(routerId: ID!, name: String!, domains: [String], routes: [RouteInput!]!): Boolean
  core_deleteRouter(routerId: ID!): Boolean!

}

type Router {
  id: ID!
  name: String!
  project: Project!
  domains: [String!]
  routes: [Route!]
}

type Route {
  path: String!
  app: App!
  port: Int!
}

extend type Account @key(fields: "id") {
  id: ID! @external
  projects: [Project!]!
  clusters:[Cluster!]!
}


scalar Date

type KV {
  key: String!
  value: String!
}

input KVInput {
  key: String!
  value: String!
}

type Project {
  id: ID!
  name: String!
  displayName: String!
  readableId: ID!
  cluster: String!
  logo: String
  description: String
  account: Account!
  memberships: [UserMembership!]!
}

type AppMemebership {
  app: App!
  role: String!
}

type UserMembership {
  user: User!
  role: String!
}

type App {
  id: ID!
  name: String!
  namespace: String!
  description: String
  readableId: ID!
  services: [AppService]!
  replicas: Int
  containers: [AppContainer!]!
  project: Project!
  version: Int
}

type AppService {
  type: String!
  port: Int!
  targetPort: Int
}

input AppServiceInput {
  type: String!
  port: Int!
  targetPort: Int
}

type AppContainer {
  name: String!
  image: String!
  imagePullPolicy: String!
  env: [AppEnv!]!
  resourceCpu: ContainerRes
  resourceMemory: ContainerRes
  volumes: [AppVolume]
  managedResources: [ManagedRes]
}

input AppContainerIN {
  name: String!
  image: String
  imagePullPolicy: String
  env: [AppEnvInput]!
  resourceCpu: ContainerResInput
  resourceMemory: ContainerResInput
  volumes: [IAppVolume]
  managedResources: [String!]
  pullSecret: String
}

input AppContainerUpdateInput {
  name: String
  image: String
  imagePullPolicy: String
  env: [AppEnvInput]
  resourceCpu: ContainerResInput
  resourceMemory: ContainerResInput
  volumes: [IAppVolume]
  managedResources: [String!]
}

input ContainerResInput {
  min: String!
  max: String!
}

type ContainerRes {
  min: String!
  max: String!
}

type AppVolume {
  name: String!
  mountPath: String!
  type: String!
  refId: ID!
  items: [AppVolumeItem]
}

input IAppVolume {
  name: String!
  mountPath: String!
  type: String!
  refId: ID!
  items: [IAppVolumeItem]
}

input IAppVolumeUpdate {
  mountPath: String
  type: String
  refId: ID
  items: [IAppVolumeItem]
}

type AppVolumeItem {
  key: String!
  fileName: String!
}

input IAppVolumeItem {
  key: String!
  fileName: String!
}

type AppEnv {
  key: String!
  type: String!
  value: String
  refKey: String
  refId: String
}

input AppEnvInput {
  key: String!
  type: String!
  value: String
  refKey: String
  refId: String
}

type Secret {
  id: ID!
  name: String!
  project: Project!
  entries: [CSEntry]!
  readableId: ID!
  version: Int!
  apps(secretKey: String): [App!]
  jobId: ID
}

type Config {
  id: ID!
  name: String!
  project: Project!
  entries: [CSEntry]!
  readableId: ID!
  version: Int!
  apps(configKey: String): [App!]
  jobId: ID
}

type CSEntry {
  apps: [App!]
  key: String!
  value: String!
}

type CCMData {
  key: String!
  value: String!
}

input RouteInput {
  path: String!
  appId: String!
  port: Int!
}

input NewResourcesIN {
  configs: [Json!]
  secrets: [Json!]
  mServices: [Json!]
  mResources: [Json!]
}

type GitPipeline {
  id: ID!
  pipelineEnv: String!
  gitProvider: String
  gitRepoUrl: String
  buildArgs: [KV]
  pullSecret: String
  name: String!
  imageName: String!
  dockerFile: String
  contextDir: String
  github: Json
  gitlab: Json
  project: Project!
}


extend type User @key(fields: "id") {
  id: ID! @external
  devices: [Device]
}

type Cluster @key(fields: "id") {
  id: ID!
  name: String!
  provider: String!
  region: String!
  ip: String
  devices: [Device]
  nodesCount: Int!
  status: String!
  account: Account!
}

type Device @key(fields: "id") {
  id: ID!
  user: User!
  name: String!
  cluster: Cluster!
  configuration: String!
}
