scalar Json

type Query {
  core_projects(accountId: ID): [Project!]!
  core_project(projectId: ID!): Project

  core_apps(projectId: ID!, search: String): [App!]!
  core_app(appId: ID!): App

  core_routers(projectId: ID!, search: String): [Router!]!
  core_router(routerId: ID!): Router

  core_configs(projectId: ID!, search: String): [Config!]!
  core_config(configId: ID!): Config!

  core_secrets(projectId: ID!, search: String): [Secret!]!
  core_secret(secretId: ID!): Secret!

  managedSvc_marketList: Json!
  managedSvc_listAvailable: Json!
  managedSvc_getInstallation(installationId: ID!, nextVersion: Boolean): ManagedSvc
  managedSvc_listInstallations(projectId: ID!): [ManagedSvc!]

  managedRes_getResource(resId: ID!, nextVersion: Boolean): ManagedRes
  managedRes_listResources(installationId: ID!): [ManagedRes!]

  infra_getCluster(clusterId: ID!): Cluster
}

type ManagedRes {
  id: ID!
  name: String!
  resourceType: String!
  installation: ManagedSvc!
  values: Json!
  outputs: Json!
}

type ManagedSvc {
  id: ID!
  name: String!
  project: Project!
  source: String!
  values: Json!
  resources: [ManagedRes!]!
}




type Mutation {
  mangedSvc_install(projectId: ID!, serviceType: ID!, name: String!, values: Json!): ManagedSvc
  mangedSvc_uninstall(installationId: ID!): Boolean!
  mangedSvc_update(installationId: ID!, values: Json!): Boolean!

  managedRes_create(installationId: ID!, name: String!, resourceType: String!, values: Json!): ManagedRes!
  managedRes_update(resId: ID!, values: Json): Boolean!
  managedRes_delete(resId: ID!): Boolean

  infra_createCluster(name: String!, provider: String!, region: String!, nodesCount: Int!): Cluster!
  infra_updateCluster(name: String, clusterId: ID!, nodesCount: Int): Cluster!
  infra_deleteCluster(clusterId: ID!): Boolean!
  infra_addDevice(clusterId: ID!, name: String!): Device!
  infra_removeDevice(deviceId: ID!): Boolean!

  core_createProject(accountId: ID!, name: String!, displayName: String!, logo: String, description: String): Project!
  core_updateProject(projectId: ID!, displayName: String, cluster: String, logo: String, description: String): Boolean!
  core_deleteProject(projectId: ID!): Boolean!

  iam_inviteProjectMember(projectId: ID!, email: String!, name: String!, role: String!): Boolean!
  iam_removeProjectMember(projectId: ID!, userId: ID!): Boolean!
  iam_updateProjectMember(projectId: ID!, userId: ID!, role: String!): Boolean!


  # App
  core_createAppFlow(
    projectId: ID!,
    app: AppFlowInput!,
  ): Boolean!
  core_deleteApp(appId: ID!): Boolean!
  core_rollbackApp(appId: ID!, version: Int!): App! #TBD

  # Secret n Config
  core_createSecret(projectId: ID!, name: String!, description:String, data: [CSEntryIn!]): Secret!
  core_updateSecret(secretId: ID!, description:String, data: [CSEntryIn!]): Boolean!
  core_deleteSecret(secretId: ID!): Boolean!

  core_createConfig(projectId: ID!, name: String!, description:String, data: [CSEntryIn!]): Config!
  core_updateConfig(configId: ID!, description:String, data: [CSEntryIn!]): Boolean!
  core_deleteConfig(configId: ID!): Boolean!



  core_createRouter(projectId: ID!, name: String!, domains: [String!], routes: [RouteInput!]): Router!
  core_updateRouter(routerId: ID!, domains: [String!], routes: [RouteInput!]): Boolean!
  core_deleteRouter(routerId: ID!): Boolean!

}

input AppFlowInput{
  name: String!
  readable: String!
  description: String
  exposed_services: [ExposedServiceInput!]!
  containers:[AppContainerInput!]!
}

type App {
  id: ID!
  name: String!
  namespace: String!
  description: String
  readableId: ID!
  replicas: Int
  services: [ExposedService]!
  containers: [AppContainer!]!
  project: Project!
  version: Int
}


type EnvVal {
  type: String!
  value: String
  ref: String
  key: String
}

input EnvValInput {
  type: String!
  value: String
  ref: String
  key: String
}

type EnvVar {
  key: String!
  value: EnvVal!
}

input EnvVarInput {
  key: String!
  value: EnvValInput!
}

type AttachedRes{
  res_id: ID!
}

input AttachedResInput{
  res_id: ID!
}

type AppContainer{
  name: String!
  image: String!
  pull_secret: String
  env_vars:[EnvVar!]!
  cpu_min:String!
  cpu_max:String!
  mem_min:String!
  mem_max:String!
  attached_resources:[AttachedRes!]!
}


input AppContainerInput{
  name: String!
  image: String!
  pull_secret: String
  env_vars:[EnvVarInput!]!
  cpu_min:String!
  cpu_max:String!
  mem_min:String!
  mem_max:String!
  attached_resources:[AttachedResInput!]!
}

type ExposedService{
  type :String!
  target: Int!
  exposed: Int!
}

input ExposedServiceInput{
  type :String!
  target: Int!
  exposed: Int!
}

type Router {
  id: ID!
  name: String!
  project: Project!
  domains: [String!]
  routes: [Route!]
}

type Route {
  path: String!
  appName: String!
  port: Int!
}

extend type Account @key(fields: "id") {
  id: ID! @external
  projects: [Project!]!
  clusters:[Cluster!]!
}


scalar Date

type KV {
  key: String!
  value: String!
}

input KVInput {
  key: String!
  value: String!
}

type Project {
  id: ID!
  name: String!
  displayName: String!
  readableId: ID!
  logo: String
  description: String
  account: Account!
  memberships: [ProjectMembership!]!
}

type ProjectMembership {
  user: User!
  role: String!
  project: Project!
}

type AppService {
  type: String!
  port: Int!
  targetPort: Int
}

input AppServiceInput {
  type: String!
  port: Int!
  targetPort: Int
}








type Secret {
  id: ID!
  name: String!
  project: Project!
  description: String
  namespace: String!
  entries: [CSEntry]!
}

type Config {
  id: ID!
  name: String!
  project: Project!
  description: String
  namespace: String!
  entries: [CSEntry]!
}

type CSEntry {
  key: String!
  value: String!
}

input CSEntryIn {
  key: String!
  value: String!
}

type CCMData {
  key: String!
  value: String!
}

input RouteInput {
  path: String!
  appName: String!
  port: Int!
}

input NewResourcesIN {
  configs: [Json!]
  secrets: [Json!]
  mServices: [Json!]
  mResources: [Json!]
}



extend type User @key(fields: "id") {
  id: ID! @external
  devices: [Device]
}

type Cluster @key(fields: "id") {
  id: ID!
  name: String!
  provider: String!
  region: String!
  ip: String
  devices: [Device]
  userDevices: [Device]
  nodesCount: Int!
  status: String!
  account: Account!
}

type Device @key(fields: "id") {
  id: ID!
  user: User!
  name: String!
  cluster: Cluster!
  configuration: String!
  ip: String!
}
