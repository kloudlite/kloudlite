scalar Json
scalar Any

type LoadEnv {
  envVars: Json
  mountFiles: Json
}

type Query {
  core_checkDeviceExist(accountId: ID!, name: String!): Boolean! #account-member-access

  core_projects(accountId: ID): [Project!]! #account-admin-access #account-owner-access #account-member-access
  core_project(projectId: ID!): Project #project-admin-access #project-developer-access

  core_apps(projectId: ID!, search: String): [App!]! #project-admin-access #project-developer-access
  core_app(appId: ID!): App #project-admin-access #project-developer-access
  core_generateEnv(projectId: ID!, klConfig: Json): LoadEnv #project-admin-access #project-developer-access

  core_routers(projectId: ID!, search: String): [Router!]! #project-admin-access #project-developer-access
  core_router(routerId: ID!): Router #project-admin-access #project-developer-access

  core_configs(projectId: ID!, search: String): [Config!]! #project-admin-access #project-developer-access
  core_config(configId: ID!): Config! #project-admin-access #project-developer-access

  core_secrets(projectId: ID!, search: String): [Secret!]! #project-admin-access #project-developer-access
  core_secret(secretId: ID!): Secret! #project-admin-access #project-developer-access

  managedSvc_marketList: Json! #user-access
  managedSvc_listAvailable: Json! #project-admin-access #project-developer-access
  managedSvc_getInstallation(installationId: ID!, nextVersion: Boolean): ManagedSvc #project-admin-access #project-developer-access
  managedSvc_listInstallations(projectId: ID!): [ManagedSvc!] #project-admin-access #project-developer-access

  managedRes_getResource(resId: ID!, nextVersion: Boolean): ManagedRes #project-admin-access #project-developer-access
  managedRes_listResources(installationId: ID!): [ManagedRes!] #project-admin-access #project-developer-access

  core_getComputePlans: [ComputePlan!] #user-access
  core_getStoragePlans: [StoragePlan!] #user-access
  core_getLamdaPlan: LambdaPlan! #user-access

  core_getCloudProviders(accountId: ID!): [CloudProvider!] #user-access
  core_getDevice(deviceId: ID!): Device #user-access
  core_getEdgeNodes(edgeId: ID!): [EdgeNode!]!
  core_getResInstances(envId: ID!,resType:String!): [ResInstance!]
  core_getResInstance(envId: ID!,resId:String!): ResInstance
  core_getEnvironments(blueprintId: ID!): [Environment!]
}

type Environment{
  id: ID!
  name: String!
  blueprintId: ID
  readableId: String
  resInstances(resType:String!): [ResInstance!]
}

type ResInstance{
  id: ID!
  resourceId: ID!
  environmentId: ID!
  blueprintId: ID
  overrides: String
  app: App
  router: Router
  mResource: ManagedRes
  mService: ManagedSvc
  config: Config
  secret: Secret
  resourceType: String!
}


type EdgeNode {
  nodeIndex: Int!
  status: Json!
  name: String!
  config: String!
  creationTime: String!
}

type ManagedRes {
  id: ID!
  name: String!
  resourceType: String!
  installation: ManagedSvc!
  values: Json!
  outputs: Json!
  status: String!
  createdAt: String!
  updatedAt: String
}

type ManagedSvc {
  id: ID!
  name: String!
  project: Project!
  source: String!
  values: Json!
  resources: [ManagedRes!]!
  status: String!
  conditions: [MetaCondition!]!
  outputs: Json!
  createdAt: String!
  updatedAt: String
}

type CloudProvider {
  id: ID!
  name: String!
  provider: String!
  edges: [EdgeRegion!]!
  status: String!
  isShared: Boolean!
}

input CloudProviderIn {
  name: String!
  provider: String!
  credentials: Json!
}

input CloudProviderUpdateIn {
  name: String
  credentials: Json
}

type NodePool{
  name: String!
  config: String!
  min: Int!
  max: Int!
}

type EdgeRegion {
  id: ID!
  name: String!
  region : String!
  provider: CloudProvider
  createdAt: String!
  updatedAt: String
  pools: [NodePool!]!
  status: String!
}

input NodePoolIn{
    name: String!
    config: String!
    min: Int!
    max: Int!
}

input EdgeRegionIn {
  name: String!
  region : String!
  pools: [NodePoolIn]!
}

input EdgeRegionUpdateIn {
  name: String
  pools: [NodePoolIn]
}

type Mutation {
  mangedSvc_install(projectId: ID!, category: ID!, serviceType: ID!, name: String!, values: Json!): ManagedSvc #project-admin-access
  mangedSvc_uninstall(installationId: ID!): Boolean! #project-admin-access
  mangedSvc_update(installationId: ID!, values: Json!): Boolean! #project-admin-accessZ

  managedRes_create(installationId: ID!, name: String!, resourceType: String!, values: Json!): ManagedRes! #project-admin-access
  managedRes_update(resId: ID!, values: Json): Boolean! #project-admin-access
  managedRes_delete(resId: ID!): Boolean #project-admin-access

  core_addDevice(accountId: ID!, name: String!): Device! #account-member-access

  core_removeDevice(deviceId: ID!): Boolean! #device-owner-access #account-admin-access #account-owner-access
  core_updateDevice(deviceId: ID!,name:String, region: String, ports: [PortIn!]): Boolean! #device-owner-access

  core_createProject(
    accountId: ID!,
    name: String!,
    displayName: String!,
    logo: String,
    description: String,
    regionId: ID,
  ): Project! #account-owner-access account-admin-access
  core_updateProject(
    projectId: ID!,
    displayName: String,
    cluster: String,
    logo: String,
    description: String
  ): Boolean! #account-owner-access account-admin-access
  core_deleteProject(projectId: ID!): Boolean! #account-owner-access account-admin-access

  iam_inviteProjectMember(projectId: ID!, email: String!, role: String!): Boolean! #project-admin-access account-admin-access account-owner-access
  iam_removeProjectMember(projectId: ID!, userId: ID!): Boolean! #project-admin-access account-admin-access account-owner-access
  iam_updateProjectMember(projectId: ID!, userId: ID!, role: String!): Boolean! #project-admin-access account-admin-access account-owner-access


  # App
  core_createApp(
    projectId: ID!,
    app: AppInput!,
  ): App! #project-admin-access project-developer-access
  core_updateApp(
    projectId: ID!,
    appId: ID!,
    app: AppInput!,
  ): App! #project-admin-access project-developer-access
  core_deleteApp(appId: ID!): Boolean! #project-admin-access project-developer-access

  core_rollbackApp(appId: ID!, version: Int!): App! #TBD

  # Secret n Config
  core_createSecret(projectId: ID!, name: String!, description:String, data: [CSEntryIn!]): Secret! #project-admin-access project-developer-access
  core_updateSecret(secretId: ID!, description:String, data: [CSEntryIn!]): Boolean! #project-admin-access project-developer-access
  core_deleteSecret(secretId: ID!): Boolean! #project-admin-access project-developer-access

  core_createConfig(projectId: ID!, name: String!, description:String, data: [CSEntryIn!]): Config! #project-admin-access project-developer-access
  core_updateConfig(configId: ID!, description:String, data: [CSEntryIn!]): Boolean! #project-admin-access project-developer-access
  core_deleteConfig(configId: ID!): Boolean! #project-admin-access project-developer-access

  core_createRouter(projectId: ID!, name: String!, domains: [String!], routes: [RouteInput!]): Router! #project-admin-access project-developer-access
  core_updateRouter(routerId: ID!, domains: [String!], routes: [RouteInput!]): Boolean! #project-admin-access project-developer-access
  core_deleteRouter(routerId: ID!): Boolean! #project-admin-access project-developer-access

  core_createEdgeRegion(edgeRegion: EdgeRegionIn!, providerId: ID!): Boolean! #private-access
  core_updateEdgeRegion(edgeId: ID!, edgeRegion: EdgeRegionUpdateIn!): Boolean! #private-access
  core_deleteEdgeRegion(edgeId: ID!): Boolean! #private-access
  core_createCloudProvider(accountId: ID, cloudProvider: CloudProviderIn!): Boolean! #private-access
  core_updateCloudProvider(providerId: ID!, cloudProvider: CloudProviderUpdateIn!): Boolean! #private-access
  core_deleteCloudProvider(providerId: ID!): Boolean! #private-access

  core_addNewCluster(cluster: ClusterIn!): ClusterOut!

  core_createEnvironment(environment: EnvironmentIn): Environment!
  core_updateResInstance(resId: ID!,resType: String!,overrides: String!): Boolean!


}

input EnvironmentIn {
  blueprintId: ID
  name: String
  readableId: String
}

input ClusterIn {
  name: String!
  subDomain: String!
  kubeConfig: String!
}

type ClusterOut {
  id: ID!
  name: String!
  subDomain: String!
}

type StoragePlan @key(fields: "name"){
  name: String!
  description: String!
}

type ComputePlan @key(fields: "name"){
  name: String!
  desc: String!
  sharingEnabled: Boolean!
  dedicatedEnabled: Boolean!
  memoryPerVCPUCpu: Int!
  maxDedicatedCPUPerPod: Int!
  maxSharedCPUPerPod: Int!
}

type LambdaPlan @key(fields: "name"){
  name: String!
}

type MetaCondition {
  status: String!
  conditionType:String!
  lastTimeStamp:String!
  reason:String!
  message:String!
}

type App @key(fields: "id") {
  id: ID!
  isLambda: Boolean!
  name: String!
  namespace: String!
  createdAt: String!
  updatedAt: String
  description: String
  readableId: ID!
  replicas: Int
  services: [ExposedService]!
  containers: [AppContainer!]!
  project: Project!
  status: String!
  autoScale: AutoScale
  conditions: [MetaCondition!]!
  restart: Boolean!
  doFreeze: Boolean!
  doUnfreeze: Boolean!
  isFrozen: Boolean!
  currentIntercept: ID
  intercept(deviceId: ID!): Boolean!
  closeIntercept: Boolean!
}

input AutoScaleIn {
  minReplicas: Int!
  maxReplicas: Int!
  usage_percentage: Int!
}

input AppInput{
  name: String!
  isLambda: Boolean!
  projectId: String!
  description: String
  autoScale: AutoScaleIn
  readableId: ID!
  replicas: Int
  services: [ExposedServiceIn]!
  containers: [AppContainerIn!]!
  metadata: Json
}

type AutoScale {
  minReplicas: Int!
  maxReplicas: Int!
  usage_percentage: Int!
}

type EnvVal {
  type: String!
  value: String
  ref: String
  key: String
}

input EnvValInput {
  type: String!
  value: String
  ref: String
  key: String
}

type EnvVar {
  key: String!
  value: EnvVal!
}

input EnvVarInput {
  key: String!
  value: EnvValInput!
}

type AttachedRes{
  res_id: ID!
}

input AttachedResInput{
  res_id: ID!
}

type AppContainer {
  name: String!
  image: String
  pullSecret: String
  envVars:[EnvVar!]!
  attachedResources:[AttachedRes!]!
  computePlan: String!
  quantity: Float!
  isShared: Boolean
  mounts: [Mount!]
}


#extend type ComputeInventoryItem @key(fields: "name") {
#  name: String! @external
#  data: ComputeInventoryData!
#}

# type ComputeInventoryData {
#   memory: ComputeInventoryMetricSize!
#   cpu: ComputeInventoryMetricSize!
# }

# type ComputeInventoryMetricSize {
#   quantity: Float!
#   unit: String!
# }

input MountInput {
  type: String!
  ref: String!
  path: String!
}

input AppContainerIn{
  name: String!
  image: String
  pullSecret: String
  envVars:[EnvVarInput!]!
  mounts:[MountInput!]
  computePlan: String!
  quantity: Float!
  attachedResources:[AttachedResInput!]!
  isShared: Boolean
}

type Mount {
  type: String!
  ref: String!
  path: String!
}

type ExposedService{
  type :String!
  target: Int!
  exposed: Int!
}

input ExposedServiceIn{
  type :String!
  target: Int!
  exposed: Int!
}

type Router {
  id: ID!
  name: String!
  project: Project!
  domains: [String!]
  routes: [Route!]
  status: String!
}

type Route {
  path: String!
  appName: String!
  port: Int
}


extend type Account @key(fields: "id") {
  id: ID! @external
  projects: [Project!]!
  devices: [Device!]!
}


scalar Date

type KV {
  key: String!
  value: String!
}

input KVInput {
  key: String!
  value: String!
}

type DockerCredentials {
    username: String!
    password: String!
}

type Project {
  id: ID!
  name: String!
  displayName: String!
  readableId: ID!
  logo: String
  description: String
  account: Account!
  memberships: [ProjectMembership!]!
  status: String!
  cluster: String
  dockerCredentials: DockerCredentials
  regionId: ID!
  region: EdgeRegion!
}

type ProjectMembership {
  user: User!
  role: String!
  project: Project!
}

type AppService {
  type: String!
  port: Int!
  targetPort: Int
}

input AppServiceInput {
  type: String!
  port: Int!
  targetPort: Int
}

type Secret {
  id: ID!
  name: String!
  project: Project!
  description: String
  namespace: String!
  entries: [CSEntry]!
  status: String!
}

type Config {
  id: ID!
  name: String!
  project: Project!
  description: String
  namespace: String!
  entries: [CSEntry]!
  status: String!
}

type CSEntry {
  key: String!
  value: String!
}

input CSEntryIn {
  key: String!
  value: String!
}

type CCMData {
  key: String!
  value: String!
}

input RouteInput {
  path: String!
  appName: String!
  port: Int
}

input NewResourcesIN {
  configs: [Json!]
  secrets: [Json!]
  mServices: [Json!]
  mResources: [Json!]
}

extend type User @key(fields: "id") {
  id: ID! @external
  devices: [Device]
  projectMemberships:[ProjectMembership!]! # user-access
}

input PortIn{
  port: Int!
  targetPort: Int
}

input DeviceIn {
  id: ID!
  name: String!
  region: String!
  ports: [PortIn!]!
}

type Port{
  port: Int!
  targetPort: Int
}

type Device @key(fields: "id") {
  id: ID!
  user: User!
  name: String!
  configuration: Json!
  account: Account!
  ports: [Port!]!
  region: String
  interceptingServices: [App!]!
}
