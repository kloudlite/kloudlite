package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"fmt"

	"kloudlite.io/apps/console/internal/app/graph/generated"
	"kloudlite.io/apps/console/internal/app/graph/model"
	"kloudlite.io/apps/console/internal/domain"
	"kloudlite.io/apps/console/internal/domain/entities"
	fn "kloudlite.io/pkg/functions"
	"kloudlite.io/pkg/types"
)

// CoreCreateProject is the resolver for the core_createProject field.
func (r *mutationResolver) CoreCreateProject(ctx context.Context, project entities.Project) (*entities.Project, error) {
	return r.Domain.CreateProject(toConsoleContext(ctx), project)
}

// CoreUpdateProject is the resolver for the core_updateProject field.
func (r *mutationResolver) CoreUpdateProject(ctx context.Context, project entities.Project) (*entities.Project, error) {
	return r.Domain.UpdateProject(toConsoleContext(ctx), project)
}

// CoreDeleteProject is the resolver for the core_deleteProject field.
func (r *mutationResolver) CoreDeleteProject(ctx context.Context, name string) (bool, error) {
	if err := r.Domain.DeleteProject(toConsoleContext(ctx), name); err != nil {
		return false, nil
	}
	return true, nil
}

// CoreCreateWorkspace is the resolver for the core_createWorkspace field.
func (r *mutationResolver) CoreCreateWorkspace(ctx context.Context, env entities.Workspace) (*entities.Workspace, error) {
	return r.Domain.CreateWorkspace(toConsoleContext(ctx), env)
}

// CoreUpdateWorkspace is the resolver for the core_updateWorkspace field.
func (r *mutationResolver) CoreUpdateWorkspace(ctx context.Context, env entities.Workspace) (*entities.Workspace, error) {
	return r.Domain.UpdateWorkspace(toConsoleContext(ctx), env)
}

// CoreDeleteWorkspace is the resolver for the core_deleteWorkspace field.
func (r *mutationResolver) CoreDeleteWorkspace(ctx context.Context, namespace string, name string) (bool, error) {
	if err := r.Domain.DeleteWorkspace(toConsoleContext(ctx), namespace, name); err != nil {
		return false, err
	}
	return true, nil
}

// CoreCreateApp is the resolver for the core_createApp field.
func (r *mutationResolver) CoreCreateApp(ctx context.Context, app entities.App) (*entities.App, error) {
	return r.Domain.CreateApp(toConsoleContext(ctx), app)
}

// CoreUpdateApp is the resolver for the core_updateApp field.
func (r *mutationResolver) CoreUpdateApp(ctx context.Context, app entities.App) (*entities.App, error) {
	return r.Domain.UpdateApp(toConsoleContext(ctx), app)
}

// CoreDeleteApp is the resolver for the core_deleteApp field.
func (r *mutationResolver) CoreDeleteApp(ctx context.Context, namespace string, name string) (bool, error) {
	if err := r.Domain.DeleteApp(toConsoleContext(ctx), namespace, name); err != nil {
		return false, err
	}
	return true, nil
}

// CoreCreateConfig is the resolver for the core_createConfig field.
func (r *mutationResolver) CoreCreateConfig(ctx context.Context, config entities.Config) (*entities.Config, error) {
	return r.Domain.CreateConfig(toConsoleContext(ctx), config)
}

// CoreUpdateConfig is the resolver for the core_updateConfig field.
func (r *mutationResolver) CoreUpdateConfig(ctx context.Context, config entities.Config) (*entities.Config, error) {
	return r.Domain.UpdateConfig(toConsoleContext(ctx), config)
}

// CoreDeleteConfig is the resolver for the core_deleteConfig field.
func (r *mutationResolver) CoreDeleteConfig(ctx context.Context, namespace string, name string) (bool, error) {
	if err := r.Domain.DeleteConfig(toConsoleContext(ctx), namespace, name); err != nil {
		return false, err
	}
	return true, nil
}

// CoreCreateSecret is the resolver for the core_createSecret field.
func (r *mutationResolver) CoreCreateSecret(ctx context.Context, secret entities.Secret) (*entities.Secret, error) {
	return r.Domain.CreateSecret(toConsoleContext(ctx), secret)
}

// CoreUpdateSecret is the resolver for the core_updateSecret field.
func (r *mutationResolver) CoreUpdateSecret(ctx context.Context, secret entities.Secret) (*entities.Secret, error) {
	panic(fmt.Errorf("not implemented: CoreUpdateSecret - core_updateSecret"))
}

// CoreDeleteSecret is the resolver for the core_deleteSecret field.
func (r *mutationResolver) CoreDeleteSecret(ctx context.Context, namespace string, name string) (bool, error) {
	if err := r.Domain.DeleteSecret(toConsoleContext(ctx), namespace, name); err != nil {
		return false, err
	}
	return true, nil
}

// CoreCreateRouter is the resolver for the core_createRouter field.
func (r *mutationResolver) CoreCreateRouter(ctx context.Context, router entities.Router) (*entities.Router, error) {
	return r.Domain.CreateRouter(toConsoleContext(ctx), router)
}

// CoreUpdateRouter is the resolver for the core_updateRouter field.
func (r *mutationResolver) CoreUpdateRouter(ctx context.Context, router entities.Router) (*entities.Router, error) {
	return r.Domain.UpdateRouter(toConsoleContext(ctx), router)
}

// CoreDeleteRouter is the resolver for the core_deleteRouter field.
func (r *mutationResolver) CoreDeleteRouter(ctx context.Context, namespace string, name string) (bool, error) {
	if err := r.Domain.DeleteRouter(toConsoleContext(ctx), namespace, name); err != nil {
		return false, err
	}
	return true, nil
}

// CoreCreateManagedService is the resolver for the core_createManagedService field.
func (r *mutationResolver) CoreCreateManagedService(ctx context.Context, msvc entities.ManagedService) (*entities.ManagedService, error) {
	return r.Domain.CreateManagedService(toConsoleContext(ctx), msvc)
}

// CoreUpdateManagedService is the resolver for the core_updateManagedService field.
func (r *mutationResolver) CoreUpdateManagedService(ctx context.Context, msvc entities.ManagedService) (*entities.ManagedService, error) {
	return r.Domain.UpdateManagedService(toConsoleContext(ctx), msvc)
}

// CoreDeleteManagedService is the resolver for the core_deleteManagedService field.
func (r *mutationResolver) CoreDeleteManagedService(ctx context.Context, namespace string, name string) (bool, error) {
	if err := r.Domain.DeleteManagedService(toConsoleContext(ctx), namespace, name); err != nil {
		return false, err
	}
	return true, nil
}

// CoreCreateManagedResource is the resolver for the core_createManagedResource field.
func (r *mutationResolver) CoreCreateManagedResource(ctx context.Context, mres entities.ManagedResource) (*entities.ManagedResource, error) {
	return r.Domain.CreateManagedResource(toConsoleContext(ctx), mres)
}

// CoreUpdateManagedResource is the resolver for the core_updateManagedResource field.
func (r *mutationResolver) CoreUpdateManagedResource(ctx context.Context, mres entities.ManagedResource) (*entities.ManagedResource, error) {
	return r.Domain.UpdateManagedResource(toConsoleContext(ctx), mres)
}

// CoreDeleteManagedResource is the resolver for the core_deleteManagedResource field.
func (r *mutationResolver) CoreDeleteManagedResource(ctx context.Context, namespace string, name string) (bool, error) {
	if err := r.Domain.DeleteManagedResource(toConsoleContext(ctx), namespace, name); err != nil {
		return false, err
	}
	return true, nil
}

// CoreCheckNameAvailability is the resolver for the core_checkNameAvailability field.
func (r *queryResolver) CoreCheckNameAvailability(ctx context.Context, resType domain.ResType, name string) (*domain.CheckNameAvailabilityOutput, error) {
	return r.Domain.CheckNameAvailability(ctx, resType, toConsoleContext(ctx).GetAccountName(), name)
}

// CoreListProjects is the resolver for the core_listProjects field.
func (r *queryResolver) CoreListProjects(ctx context.Context, clusterName *string, pq *types.CursorPagination) (*model.ProjectPaginatedRecords, error) {
	cc := toConsoleContext(ctx)
	p, err := r.Domain.ListProjects(ctx, cc.UserId, cc.AccountName, clusterName, fn.DefaultIfNil(pq, types.DefaultCursorPagination))
	if err != nil {
		return nil, err
	}

	pe := make([]*model.ProjectEdge, len(p.Edges))
	for i := range p.Edges {
		pe[i] = &model.ProjectEdge{
			Node:   p.Edges[i].Node,
			Cursor: p.Edges[i].Cursor,
		}
	}

	m := model.ProjectPaginatedRecords{
		Edges: pe,
		PageInfo: &model.PageInfo{
			EndCursor:       &p.PageInfo.EndCursor,
			HasNextPage:     p.PageInfo.HasNextPage,
			HasPreviousPage: p.PageInfo.HasPrevPage,
			StartCursor:     &p.PageInfo.StartCursor,
		},
		TotalCount: int(p.TotalCount),
	}

	return &m, nil
}

// CoreGetProject is the resolver for the core_getProject field.
func (r *queryResolver) CoreGetProject(ctx context.Context, name string) (*entities.Project, error) {
	return r.Domain.GetProject(toConsoleContext(ctx), name)
}

// CoreResyncProject is the resolver for the core_resyncProject field.
func (r *queryResolver) CoreResyncProject(ctx context.Context, name string) (bool, error) {
	if err := r.Domain.ResyncProject(toConsoleContext(ctx), name); err != nil {
		return false, err
	}
	return true, nil
}

// CoreListWorkspaces is the resolver for the core_listWorkspaces field.
func (r *queryResolver) CoreListWorkspaces(ctx context.Context, namespace string, pq *types.CursorPagination) (*model.WorkspacePaginatedRecords, error) {
	pw, err := r.Domain.ListWorkspaces(toConsoleContext(ctx), namespace, fn.DefaultIfNil(pq, types.DefaultCursorPagination))
	if err != nil {
		return nil, err
	}

	we := make([]*model.WorkspaceEdge, len(pw.Edges))
	for i := range pw.Edges {
		we[i] = &model.WorkspaceEdge{
			Node:   pw.Edges[i].Node,
			Cursor: pw.Edges[i].Cursor,
		}
	}

	m := model.WorkspacePaginatedRecords{
		Edges: we,
		PageInfo: &model.PageInfo{
			EndCursor:       &pw.PageInfo.EndCursor,
			HasNextPage:     pw.PageInfo.HasNextPage,
			HasPreviousPage: pw.PageInfo.HasPrevPage,
			StartCursor:     &pw.PageInfo.StartCursor,
		},
		TotalCount: int(pw.TotalCount),
	}

	return &m, nil
}

// CoreGetWorkspace is the resolver for the core_getWorkspace field.
func (r *queryResolver) CoreGetWorkspace(ctx context.Context, namespace string, name string) (*entities.Workspace, error) {
	return r.Domain.GetWorkspace(toConsoleContext(ctx), namespace, name)
}

// CoreResyncWorkspace is the resolver for the core_resyncWorkspace field.
func (r *queryResolver) CoreResyncWorkspace(ctx context.Context, namespace string, name string) (bool, error) {
	if err := r.Domain.ResyncWorkspace(toConsoleContext(ctx), namespace, name); err != nil {
		return false, err
	}
	return true, nil
}

// CoreListApps is the resolver for the core_listApps field.
func (r *queryResolver) CoreListApps(ctx context.Context, namespace string, pq *types.CursorPagination) (*model.AppPaginatedRecords, error) {
	pApps, err := r.Domain.ListApps(toConsoleContext(ctx), namespace, fn.DefaultIfNil(pq, types.DefaultCursorPagination))
	if err != nil {
		return nil, err
	}

	ae := make([]*model.AppEdge, len(pApps.Edges))
	for i := range pApps.Edges {
		ae[i] = &model.AppEdge{
			Node:   pApps.Edges[i].Node,
			Cursor: pApps.Edges[i].Cursor,
		}
	}

	m := model.AppPaginatedRecords{
		Edges: ae,
		PageInfo: &model.PageInfo{
			EndCursor:       &pApps.PageInfo.EndCursor,
			HasNextPage:     pApps.PageInfo.HasNextPage,
			HasPreviousPage: pApps.PageInfo.HasPrevPage,
			StartCursor:     &pApps.PageInfo.StartCursor,
		},
		TotalCount: int(pApps.TotalCount),
	}

	return &m, nil
}

// CoreGetApp is the resolver for the core_getApp field.
func (r *queryResolver) CoreGetApp(ctx context.Context, namespace string, name string) (*entities.App, error) {
	return r.Domain.GetApp(toConsoleContext(ctx), namespace, name)
}

// CoreResyncApp is the resolver for the core_resyncApp field.
func (r *queryResolver) CoreResyncApp(ctx context.Context, namespace string, name string) (bool, error) {
	if err := r.Domain.ResyncApp(toConsoleContext(ctx), namespace, name); err != nil {
		return false, err
	}
	return true, nil
}

// CoreListConfigs is the resolver for the core_listConfigs field.
func (r *queryResolver) CoreListConfigs(ctx context.Context, namespace string, pq *types.CursorPagination) (*model.ConfigPaginatedRecords, error) {
	pConfigs, err := r.Domain.ListConfigs(toConsoleContext(ctx), namespace, fn.DefaultIfNil(pq, types.DefaultCursorPagination))
	if err != nil {
		return nil, err
	}

	ce := make([]*model.ConfigEdge, len(pConfigs.Edges))
	for i := range pConfigs.Edges {
		ce[i] = &model.ConfigEdge{
			Node:   pConfigs.Edges[i].Node,
			Cursor: pConfigs.Edges[i].Cursor,
		}
	}

	m := model.ConfigPaginatedRecords{
		Edges: ce,
		PageInfo: &model.PageInfo{
			EndCursor:       &pConfigs.PageInfo.EndCursor,
			HasNextPage:     pConfigs.PageInfo.HasNextPage,
			HasPreviousPage: pConfigs.PageInfo.HasPrevPage,
			StartCursor:     &pConfigs.PageInfo.StartCursor,
		},
		TotalCount: int(pConfigs.TotalCount),
	}

	return &m, nil
}

// CoreGetConfig is the resolver for the core_getConfig field.
func (r *queryResolver) CoreGetConfig(ctx context.Context, namespace string, name string) (*entities.Config, error) {
	return r.Domain.GetConfig(toConsoleContext(ctx), namespace, name)
}

// CoreResyncConfig is the resolver for the core_resyncConfig field.
func (r *queryResolver) CoreResyncConfig(ctx context.Context, namespace string, name string) (bool, error) {
	if err := r.Domain.ResyncConfig(toConsoleContext(ctx), namespace, name); err != nil {
		return false, err
	}
	return true, nil
}

// CoreListSecrets is the resolver for the core_listSecrets field.
func (r *queryResolver) CoreListSecrets(ctx context.Context, namespace string, pq *types.CursorPagination) (*model.SecretPaginatedRecords, error) {
	pSecrets, err := r.Domain.ListSecrets(toConsoleContext(ctx), namespace, fn.DefaultIfNil(pq, types.DefaultCursorPagination))
	if err != nil {
		return nil, err
	}

	ae := make([]*model.SecretEdge, len(pSecrets.Edges))
	for i := range pSecrets.Edges {
		ae[i] = &model.SecretEdge{
			Node:   pSecrets.Edges[i].Node,
			Cursor: pSecrets.Edges[i].Cursor,
		}
	}

	m := model.SecretPaginatedRecords{
		Edges: ae,
		PageInfo: &model.PageInfo{
			EndCursor:       &pSecrets.PageInfo.EndCursor,
			HasNextPage:     pSecrets.PageInfo.HasNextPage,
			HasPreviousPage: pSecrets.PageInfo.HasPrevPage,
			StartCursor:     &pSecrets.PageInfo.StartCursor,
		},
		TotalCount: int(pSecrets.TotalCount),
	}

	return &m, nil
}

// CoreGetSecret is the resolver for the core_getSecret field.
func (r *queryResolver) CoreGetSecret(ctx context.Context, namespace string, name string) (*entities.Secret, error) {
	return r.Domain.GetSecret(toConsoleContext(ctx), namespace, name)
}

// CoreResyncSecret is the resolver for the core_resyncSecret field.
func (r *queryResolver) CoreResyncSecret(ctx context.Context, namespace string, name string) (bool, error) {
	if err := r.Domain.ResyncSecret(toConsoleContext(ctx), namespace, name); err != nil {
		return false, err
	}
	return true, nil
}

// CoreListRouters is the resolver for the core_listRouters field.
func (r *queryResolver) CoreListRouters(ctx context.Context, namespace string, pq *types.CursorPagination) (*model.RouterPaginatedRecords, error) {
	pRouters, err := r.Domain.ListRouters(toConsoleContext(ctx), namespace, fn.DefaultIfNil(pq, types.DefaultCursorPagination))
	if err != nil {
		return nil, err
	}

	ae := make([]*model.RouterEdge, len(pRouters.Edges))
	for i := range pRouters.Edges {
		ae[i] = &model.RouterEdge{
			Node:   pRouters.Edges[i].Node,
			Cursor: pRouters.Edges[i].Cursor,
		}
	}

	m := model.RouterPaginatedRecords{
		Edges: ae,
		PageInfo: &model.PageInfo{
			EndCursor:       &pRouters.PageInfo.EndCursor,
			HasNextPage:     pRouters.PageInfo.HasNextPage,
			HasPreviousPage: pRouters.PageInfo.HasPrevPage,
			StartCursor:     &pRouters.PageInfo.StartCursor,
		},
		TotalCount: int(pRouters.TotalCount),
	}

	return &m, nil
}

// CoreGetRouter is the resolver for the core_getRouter field.
func (r *queryResolver) CoreGetRouter(ctx context.Context, namespace string, name string) (*entities.Router, error) {
	return r.Domain.GetRouter(toConsoleContext(ctx), namespace, name)
}

// CoreResyncRouter is the resolver for the core_resyncRouter field.
func (r *queryResolver) CoreResyncRouter(ctx context.Context, namespace string, name string) (bool, error) {
	if err := r.Domain.ResyncRouter(toConsoleContext(ctx), namespace, name); err != nil {
		return false, err
	}
	return true, nil
}

// CoreListManagedServiceTemplates is the resolver for the core_listManagedServiceTemplates field.
func (r *queryResolver) CoreListManagedServiceTemplates(ctx context.Context) ([]*entities.MsvcTemplate, error) {
	return r.Domain.ListManagedSvcTemplates()
}

// CoreGetManagedServiceTemplate is the resolver for the core_getManagedServiceTemplate field.
func (r *queryResolver) CoreGetManagedServiceTemplate(ctx context.Context, category string, name string) (*entities.MsvcTemplateEntry, error) {
	return r.Domain.GetManagedSvcTemplate(category, name)
}

// CoreListManagedServices is the resolver for the core_listManagedServices field.
func (r *queryResolver) CoreListManagedServices(ctx context.Context, namespace string, pq *types.CursorPagination) (*model.ManagedServicePaginatedRecords, error) {
	pMsvcs, err := r.Domain.ListManagedServices(toConsoleContext(ctx), namespace, fn.DefaultIfNil(pq, types.DefaultCursorPagination))
	if err != nil {
		return nil, err
	}

	msvcEdges := make([]*model.ManagedServiceEdge, len(pMsvcs.Edges))
	for i := range pMsvcs.Edges {
		msvcEdges[i] = &model.ManagedServiceEdge{
			Node:   pMsvcs.Edges[i].Node,
			Cursor: pMsvcs.Edges[i].Cursor,
		}
	}

	m := model.ManagedServicePaginatedRecords{
		Edges: msvcEdges,
		PageInfo: &model.PageInfo{
			EndCursor:       &pMsvcs.PageInfo.EndCursor,
			HasNextPage:     pMsvcs.PageInfo.HasNextPage,
			HasPreviousPage: pMsvcs.PageInfo.HasPrevPage,
			StartCursor:     &pMsvcs.PageInfo.StartCursor,
		},
		TotalCount: int(pMsvcs.TotalCount),
	}

	return &m, nil
}

// CoreGetManagedService is the resolver for the core_getManagedService field.
func (r *queryResolver) CoreGetManagedService(ctx context.Context, namespace string, name string) (*entities.ManagedService, error) {
	return r.Domain.GetManagedService(toConsoleContext(ctx), namespace, name)
}

// CoreResyncManagedService is the resolver for the core_resyncManagedService field.
func (r *queryResolver) CoreResyncManagedService(ctx context.Context, namespace string, name string) (bool, error) {
	if err := r.Domain.ResyncManagedService(toConsoleContext(ctx), namespace, name); err != nil {
		return false, err
	}
	return true, nil
}

// CoreListManagedResources is the resolver for the core_listManagedResources field.
func (r *queryResolver) CoreListManagedResources(ctx context.Context, namespace string, pq *types.CursorPagination) (*model.ManagedResourcePaginatedRecords, error) {
	pApps, err := r.Domain.ListManagedResources(toConsoleContext(ctx), namespace, fn.DefaultIfNil(pq, types.DefaultCursorPagination))
	if err != nil {
		return nil, err
	}

	ae := make([]*model.ManagedResourceEdge, len(pApps.Edges))
	for i := range pApps.Edges {
		ae[i] = &model.ManagedResourceEdge{
			Node:   pApps.Edges[i].Node,
			Cursor: pApps.Edges[i].Cursor,
		}
	}

	m := model.ManagedResourcePaginatedRecords{
		Edges: ae,
		PageInfo: &model.PageInfo{
			EndCursor:       &pApps.PageInfo.EndCursor,
			HasNextPage:     pApps.PageInfo.HasNextPage,
			HasPreviousPage: pApps.PageInfo.HasPrevPage,
			StartCursor:     &pApps.PageInfo.StartCursor,
		},
		TotalCount: int(pApps.TotalCount),
	}

	return &m, nil
}

// CoreGetManagedResource is the resolver for the core_getManagedResource field.
func (r *queryResolver) CoreGetManagedResource(ctx context.Context, namespace string, name string) (*entities.ManagedResource, error) {
	return r.Domain.GetManagedResource(toConsoleContext(ctx), namespace, name)
}

// CoreResyncManagedResource is the resolver for the core_resyncManagedResource field.
func (r *queryResolver) CoreResyncManagedResource(ctx context.Context, namespace string, name string) (bool, error) {
	if err := r.Domain.ResyncManagedResource(toConsoleContext(ctx), namespace, name); err != nil {
		return false, err
	}
	return true, nil
}

// SortBy is the resolver for the sortBy field.
func (r *paginationQueryArgsResolver) SortBy(ctx context.Context, obj *types.CursorPagination, data *model.PaginationSortOrder) error {
	if data == nil {
		return fmt.Errorf("pagination-sort-order is nil")
	}
	obj.SortDirection = types.SortDirection(data.String())
	return nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// PaginationQueryArgs returns generated.PaginationQueryArgsResolver implementation.
func (r *Resolver) PaginationQueryArgs() generated.PaginationQueryArgsResolver {
	return &paginationQueryArgsResolver{r}
}

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type paginationQueryArgsResolver struct{ *Resolver }
