package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"github.com/kloudlite/api/pkg/errors"
	"time"

	"github.com/kloudlite/api/apps/console/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/console/internal/entities"
	fn "github.com/kloudlite/api/pkg/functions"
)

// CreationTime is the resolver for the creationTime field.
func (r *secretVariableResolver) CreationTime(ctx context.Context, obj *entities.SecretVariable) (string, error) {
	if obj == nil {
		return "", errNilSecretVariable
	}
	return obj.BaseEntity.CreationTime.Format(time.RFC3339), nil
}

// StringData is the resolver for the stringData field.
func (r *secretVariableResolver) StringData(ctx context.Context, obj *entities.SecretVariable) (map[string]interface{}, error) {
	if obj == nil {
		return nil, errNilSecretVariable
	}
	m := map[string]interface{}{}
	if err := fn.JsonConversion(obj.StringData, &m); err != nil {
		return nil, errors.NewE(err)
	}
	return m, nil
}

// UpdateTime is the resolver for the updateTime field.
func (r *secretVariableResolver) UpdateTime(ctx context.Context, obj *entities.SecretVariable) (string, error) {
	if obj == nil {
		return "", errors.Newf("obj is nil")
	}

	return obj.BaseEntity.UpdateTime.Format(time.RFC3339), nil
}

// StringData is the resolver for the stringData field.
func (r *secretVariableInResolver) StringData(ctx context.Context, obj *entities.SecretVariable, data map[string]interface{}) error {
	if obj == nil {
		return errNilSecretVariable
	}
	if data != nil {
		converted := make(map[string]string)
		for k, v := range data {
			strVal, ok := v.(string)
			if !ok {
				return errors.Newf("value for key %q is not a string", k)
			}
			converted[k] = strVal
		}
		obj.StringData = converted
	}
	return nil
}

// SecretVariable returns generated.SecretVariableResolver implementation.
func (r *Resolver) SecretVariable() generated.SecretVariableResolver {
	return &secretVariableResolver{r}
}

// SecretVariableIn returns generated.SecretVariableInResolver implementation.
func (r *Resolver) SecretVariableIn() generated.SecretVariableInResolver {
	return &secretVariableInResolver{r}
}

type secretVariableResolver struct{ *Resolver }
type secretVariableInResolver struct{ *Resolver }
