version: "3"

dotenv:
  - .secrets/env

vars:
  ImagePrefix: "ghcr.io/kloudlite/platform/apis"

tasks:
  gql:
    dir: ./internal/app
    cmds:
      - go run  -tags dynamic github.com/99designs/gqlgen generate
      - rm "./graph/scalars.resolvers.go"

  build:
    env:
      CGO_ENABLED: 0
    preconditions:
      - sh: '[ -n "{{.Out}}" ]'
        msg: var Out must have a value
    cmds:
      - go build -ldflags="-s -w" -o {{.Out}}
      - upx {{.Out}}

  k8s-schema:
    cmds:
      - mkdir -p "./internal/app/graph/crd-to-gql"
      - go run ../../cmd/crd-to-gql --dev
          --output "./internal/app/graph/crd-to-gql"
          --crd HarborRobotUser=harboruseraccounts.artifacts.kloudlite.io
          # --crd Project=projects.crds.kloudlite.io
          # --crd App=apps.crds.kloudlite.io
          # --crd Secret=secrets.crds.kloudlite.io
          # --crd Config=configs.crds.kloudlite.io
          # --crd Secret=secrets.crds.kloudlite.io
          # --crd Router=routers.crds.kloudlite.io
          # --crd ManagedService=managedservices.crds.kloudlite.io
          # --crd ManagedResource=managedresources.crds.kloudlite.io

  docker-build:
    vars:
      APP: container-registry
      IMAGE: registry.kloudlite.io/kloudlite/{{.EnvName}}/{{.APP}}-api:{{.Tag}}
    preconditions:
      - sh: '[[ -n "{{.Tag}}" ]]'
        msg: 'var Tag must have a value'

      - sh: '[[ "{{.EnvName}}" == "development" ]] || [[ "{{.EnvName}}" == "staging" ]] ||  [[ "{{.EnvName}}" == "production" ]]'
        msg: 'var EnvName must have one of [development, staging, production] as its value'
    cmds:
      - docker buildx build -f ./Dockerfile -t {{.IMAGE}} . --build-arg APP={{.APP}} --platform linux/amd64  --build-context project-root=../..
      - docker push {{.IMAGE}}


  local-build:
    preconditions:
      - sh: '[ -n "{{.Tag}}" ]'
        msg: 'var Tag must have a value'
    vars:
      APP: container-registry
      IMAGE: "{{.ImagePrefix}}/{{.APP}}:{{.Tag}}"
    silent: true
    cmds:
      - |+
        lineNumbers=$(cat Dockerfile | grep -i '^FROM' -n | tail +2 | awk -F: '{print $1}')

        startLineNo=$(echo "$lineNumbers" | head -n+1)
        finalLineNo=$(echo "$lineNumbers" | tail -1)

        tDir=$(mktemp -d)

        nDockerfile=$(cat Dockerfile | tail --lines=+$startLineNo | grep -i --invert-match 'from=base')
        echo "$nDockerfile" | sed "1 i # syntax=docker/dockerfile:1.4" > $tDir/Dockerfile.base

        cat $tDir/Dockerfile.base | sed "4 i COPY --from=local-builder ./{{.APP}} /{{.APP}}" > $tDir/Dockerfile
        cat $tDir/Dockerfile
        echo "building application ..."

        task build Out=$tDir/{{.APP}}

        docker buildx build -f $tDir/Dockerfile -t {{.IMAGE}} . --build-context local-builder=${tDir}
        docker push {{.IMAGE}}
        rm -rf $tDir

  run:
    vars:
      Name: console
    dotenv:
      - .secrets/env
    env:
      CGO_ENABLED: 0
    cmds:
      - go build -o /tmp/{{.Name}} ./main.go
      # - dlv exec -l 127.0.0.1:31117 --headless /tmp/console -- --dev
      - /tmp/{{.Name}} --dev
