package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"fmt"
	"time"

	"github.com/kloudlite/api/apps/container-registry/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/container-registry/internal/app/graph/model"
	"github.com/kloudlite/api/apps/container-registry/internal/domain/entities"
	fn "github.com/kloudlite/api/pkg/functions"
	dbv1 "github.com/kloudlite/operator/apis/distribution/v1"
)

// CreatedBy is the resolver for the createdBy field.
func (r *buildResolver) CreatedBy(ctx context.Context, obj *entities.Build) (*model.KloudliteIoCommonCreatedOrUpdatedBy, error) {
	if obj == nil {
		return nil, fmt.Errorf("build is nil")
	}
	return &model.KloudliteIoCommonCreatedOrUpdatedBy{
		UserEmail: obj.CreatedBy.UserEmail,
		UserID:    string(obj.CreatedBy.UserId),
		UserName:  obj.CredUser.UserName,
	}, nil
}

// CreationTime is the resolver for the creationTime field.
func (r *buildResolver) CreationTime(ctx context.Context, obj *entities.Build) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("build is nil")
	}

	return obj.CreationTime.Format(time.RFC3339), nil
}

// CredUser is the resolver for the credUser field.
func (r *buildResolver) CredUser(ctx context.Context, obj *entities.Build) (*model.KloudliteIoCommonCreatedOrUpdatedBy, error) {
	if obj == nil {
		return nil, fmt.Errorf("build is nil")
	}

	return &model.KloudliteIoCommonCreatedOrUpdatedBy{
		UserEmail: obj.CredUser.UserEmail,
		UserID:    string(obj.CredUser.UserId),
		UserName:  obj.CredUser.UserName,
	}, nil
}

// ErrorMessages is the resolver for the errorMessages field.
func (r *buildResolver) ErrorMessages(ctx context.Context, obj *entities.Build) (map[string]interface{}, error) {
	if obj == nil {
		return nil, fmt.Errorf("build is nil")
	}

	m := make(map[string]any)
	if obj.ErrorMessages == nil {
		return m, nil
	}

	if err := fn.JsonConversion(obj.ErrorMessages, &m); err != nil {
		return nil, err
	}

	return m, nil
}

// ID is the resolver for the id field.
func (r *buildResolver) ID(ctx context.Context, obj *entities.Build) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("build is nil")
	}

	return string(obj.Id), nil
}

// LastUpdatedBy is the resolver for the lastUpdatedBy field.
func (r *buildResolver) LastUpdatedBy(ctx context.Context, obj *entities.Build) (*model.KloudliteIoCommonCreatedOrUpdatedBy, error) {
	if obj == nil {
		return nil, fmt.Errorf("build is nil")
	}

	return &model.KloudliteIoCommonCreatedOrUpdatedBy{
		UserEmail: obj.LastUpdatedBy.UserEmail,
		UserID:    string(obj.LastUpdatedBy.UserId),
		UserName:  obj.CredUser.UserName,
	}, nil
}

// Source is the resolver for the source field.
func (r *buildResolver) Source(ctx context.Context, obj *entities.Build) (*model.KloudliteIoAppsContainerRegistryInternalDomainEntitiesGitSource, error) {
	if obj == nil {
		return nil, fmt.Errorf("build is nil")
	}

	return &model.KloudliteIoAppsContainerRegistryInternalDomainEntitiesGitSource{
		Branch:     obj.Source.Branch,
		Provider:   model.KloudliteIoAppsContainerRegistryInternalDomainEntitiesGitProvider(obj.Source.Provider),
		Repository: obj.Source.Repository,
		WebhookID:  obj.Source.WebhookId,
	}, nil
}

// Spec is the resolver for the spec field.
func (r *buildResolver) Spec(ctx context.Context, obj *entities.Build) (*model.GithubComKloudliteOperatorApisDistributionV1BuildRunSpec, error) {
	if obj == nil {
		return nil, fmt.Errorf("build is nil")
	}

	getBuildOptions := func() (*model.GithubComKloudliteOperatorApisDistributionV1BuildOptions, error) {

		if obj.Spec.BuildOptions == nil {
			return nil, nil
		}

		bo := obj.Spec.BuildOptions

		buildArgs := make(map[string]any)
		if bo.BuildArgs != nil {
			if err := fn.JsonConversion(bo.BuildArgs, &buildArgs); err != nil {
				return nil, err
			}
		}

		buildCtxs := make(map[string]any)
		if bo.BuildArgs != nil {
			if err := fn.JsonConversion(bo.BuildContexts, &buildCtxs); err != nil {
				return nil, err
			}
		}

		return &model.GithubComKloudliteOperatorApisDistributionV1BuildOptions{
			BuildArgs:         buildArgs,
			BuildContexts:     buildCtxs,
			ContextDir:        bo.ContextDir,
			DockerfileContent: bo.DockerfileContent,
			DockerfilePath:    bo.DockerfilePath,
			TargetPlatforms:   bo.TargetPlatforms,
		}, nil
	}

	bo, err := getBuildOptions()
	if err != nil {
		return nil, err
	}

	spec := obj.Spec

	return &model.GithubComKloudliteOperatorApisDistributionV1BuildRunSpec{
		AccountName:  spec.AccountName,
		BuildOptions: bo,
		CacheKeyName: spec.CacheKeyName,
		Registry: &model.GithubComKloudliteOperatorApisDistributionV1Registry{
			Repo: &model.GithubComKloudliteOperatorApisDistributionV1Repo{
				Name: spec.Registry.Repo.Name,
				Tags: spec.Registry.Repo.Tags,
			},
		},
		Resource: &model.GithubComKloudliteOperatorApisDistributionV1Resource{
			CPU:        spec.Resource.Cpu,
			MemoryInMb: spec.Resource.MemoryInMb,
		},
	}, nil
}

// Status is the resolver for the status field.
func (r *buildResolver) Status(ctx context.Context, obj *entities.Build) (model.KloudliteIoAppsContainerRegistryInternalDomainEntitiesBuildStatus, error) {
	if obj == nil {
		return "", fmt.Errorf("build is nil")
	}

	return model.KloudliteIoAppsContainerRegistryInternalDomainEntitiesBuildStatus(obj.Status), nil
}

// UpdateTime is the resolver for the updateTime field.
func (r *buildResolver) UpdateTime(ctx context.Context, obj *entities.Build) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("build is nil")
	}

	return obj.UpdateTime.Format(time.RFC3339), nil
}

// Source is the resolver for the source field.
func (r *buildInResolver) Source(ctx context.Context, obj *entities.Build, data *model.KloudliteIoAppsContainerRegistryInternalDomainEntitiesGitSourceIn) error {
	if obj == nil {
		return fmt.Errorf("build is nil")
	}

	obj.Source = entities.GitSource{
		Repository: data.Repository,
		Branch:     data.Branch,
		Provider:   entities.GitProvider(data.Provider),
	}

	return nil
}

// Spec is the resolver for the spec field.
func (r *buildInResolver) Spec(ctx context.Context, obj *entities.Build, data *model.GithubComKloudliteOperatorApisDistributionV1BuildRunSpecIn) error {
	if obj == nil {
		return fmt.Errorf("build is nil")
	}

	getBuildOptions := func() (*dbv1.BuildOptions, error) {

		if data.BuildOptions == nil {
			return nil, nil
		}

		bo := data.BuildOptions

		buildArgs := make(map[string]string)
		if bo.BuildArgs != nil {
			if err := fn.JsonConversion(bo.BuildArgs, &buildArgs); err != nil {
				return nil, err
			}
		}

		buildCtxs := make(map[string]string)
		if bo.BuildArgs != nil {
			if err := fn.JsonConversion(bo.BuildContexts, &buildCtxs); err != nil {
				return nil, err
			}
		}

		return &dbv1.BuildOptions{
			BuildArgs:         buildArgs,
			BuildContexts:     buildCtxs,
			ContextDir:        bo.ContextDir,
			DockerfileContent: bo.DockerfileContent,
			DockerfilePath:    bo.DockerfilePath,
			TargetPlatforms:   bo.TargetPlatforms,
		}, nil
	}

	bo, err := getBuildOptions()
	if err != nil {
		return err
	}

	obj.Spec = dbv1.BuildRunSpec{
		CacheKeyName: data.CacheKeyName,
		Registry: dbv1.Registry{
			Repo: dbv1.Repo{Name: data.Registry.Repo.Name, Tags: data.Registry.Repo.Tags},
		},
		BuildOptions: bo,
		Resource: dbv1.Resource{
			Cpu:        data.Resource.CPU,
			MemoryInMb: data.Resource.MemoryInMb,
		},
	}
	return nil
}

// Build returns generated.BuildResolver implementation.
func (r *Resolver) Build() generated.BuildResolver { return &buildResolver{r} }

// BuildIn returns generated.BuildInResolver implementation.
func (r *Resolver) BuildIn() generated.BuildInResolver { return &buildInResolver{r} }

type buildResolver struct{ *Resolver }
type buildInResolver struct{ *Resolver }
