package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"github.com/kloudlite/api/pkg/errors"
	"time"

	"github.com/kloudlite/api/apps/container-registry/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/container-registry/internal/app/graph/model"
	"github.com/kloudlite/api/apps/container-registry/internal/domain/entities"
)

// CreatedBy is the resolver for the createdBy field.
func (r *buildCacheKeyResolver) CreatedBy(ctx context.Context, obj *entities.BuildCacheKey) (*model.KloudliteIoCommonCreatedOrUpdatedBy, error) {
	if obj == nil {
		return nil, errors.Newf("buildCacheKey is nil")
	}
	return &model.KloudliteIoCommonCreatedOrUpdatedBy{
		UserEmail: obj.CreatedBy.UserEmail,
		UserID:    string(obj.CreatedBy.UserId),
		UserName:  obj.CreatedBy.UserName,
	}, nil
}

// CreationTime is the resolver for the creationTime field.
func (r *buildCacheKeyResolver) CreationTime(ctx context.Context, obj *entities.BuildCacheKey) (string, error) {
	if obj == nil {
		return "", errors.Newf("buildCacheKey is nil")
	}

	return obj.CreationTime.Format(time.RFC3339), nil
}

// ID is the resolver for the id field.
func (r *buildCacheKeyResolver) ID(ctx context.Context, obj *entities.BuildCacheKey) (string, error) {
	if obj == nil {
		return "", errors.Newf("buildCacheKey is nil")
	}

	return string(obj.Id), nil
}

// LastUpdatedBy is the resolver for the lastUpdatedBy field.
func (r *buildCacheKeyResolver) LastUpdatedBy(ctx context.Context, obj *entities.BuildCacheKey) (*model.KloudliteIoCommonCreatedOrUpdatedBy, error) {
	if obj == nil {
		return nil, errors.Newf("buildCacheKey is nil")
	}

	return &model.KloudliteIoCommonCreatedOrUpdatedBy{
		UserEmail: obj.LastUpdatedBy.UserEmail,
		UserID:    string(obj.LastUpdatedBy.UserId),
		UserName:  obj.LastUpdatedBy.UserName,
	}, nil
}

// UpdateTime is the resolver for the updateTime field.
func (r *buildCacheKeyResolver) UpdateTime(ctx context.Context, obj *entities.BuildCacheKey) (string, error) {
	if obj == nil {
		return "", errors.Newf("buildCacheKey is nil")
	}

	return obj.UpdateTime.Format(time.RFC3339), nil
}

// VolumeSizeInGb is the resolver for the volumeSizeInGB field.
func (r *buildCacheKeyResolver) VolumeSizeInGb(ctx context.Context, obj *entities.BuildCacheKey) (float64, error) {
	if obj == nil {
		return 0, errors.Newf("buildCacheKey is nil")
	}

	return float64(obj.VolumeSize), nil
}

// VolumeSizeInGb is the resolver for the volumeSizeInGB field.
func (r *buildCacheKeyInResolver) VolumeSizeInGb(ctx context.Context, obj *entities.BuildCacheKey, data float64) error {
	if obj == nil {
		return errors.Newf("buildCacheKey is nil")
	}

	obj.VolumeSize = float32(data)
	return nil
}

// BuildCacheKey returns generated.BuildCacheKeyResolver implementation.
func (r *Resolver) BuildCacheKey() generated.BuildCacheKeyResolver { return &buildCacheKeyResolver{r} }

// BuildCacheKeyIn returns generated.BuildCacheKeyInResolver implementation.
func (r *Resolver) BuildCacheKeyIn() generated.BuildCacheKeyInResolver {
	return &buildCacheKeyInResolver{r}
}

type buildCacheKeyResolver struct{ *Resolver }
type buildCacheKeyInResolver struct{ *Resolver }
