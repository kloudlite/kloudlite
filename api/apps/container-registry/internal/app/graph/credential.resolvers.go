package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"fmt"
	"time"

	"kloudlite.io/apps/container-registry/internal/app/graph/generated"
	"kloudlite.io/apps/container-registry/internal/app/graph/model"
	"kloudlite.io/apps/container-registry/internal/domain/entities"
)

// Access is the resolver for the access field.
func (r *credentialResolver) Access(ctx context.Context, obj *entities.Credential) (model.KloudliteIoAppsContainerRegistryInternalDomainEntitiesRepoAccess, error) {
	return model.KloudliteIoAppsContainerRegistryInternalDomainEntitiesRepoAccess(obj.Access), nil
}

// CreationTime is the resolver for the creationTime field.
func (r *credentialResolver) CreationTime(ctx context.Context, obj *entities.Credential) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("resource is nil")
	}

	return obj.CreationTime.Format(time.RFC3339), nil
}

// Expiration is the resolver for the expiration field.
func (r *credentialResolver) Expiration(ctx context.Context, obj *entities.Credential) (*model.KloudliteIoAppsContainerRegistryInternalDomainEntitiesExpiration, error) {
	if obj == nil {
		return nil, fmt.Errorf("resource is nil")
	}

	return &model.KloudliteIoAppsContainerRegistryInternalDomainEntitiesExpiration{
		Value: obj.Expiration.Value,
		Unit:  model.KloudliteIoAppsContainerRegistryInternalDomainEntitiesExpirationUnit(obj.Expiration.Unit),
	}, nil
}

// ID is the resolver for the id field.
func (r *credentialResolver) ID(ctx context.Context, obj *entities.Credential) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("resource is nil")
	}

	return string(obj.Id), nil
}

// UpdateTime is the resolver for the updateTime field.
func (r *credentialResolver) UpdateTime(ctx context.Context, obj *entities.Credential) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("resource is nil")
	}

	return obj.UpdateTime.Format(time.RFC3339), nil
}

// Access is the resolver for the access field.
func (r *credentialInResolver) Access(ctx context.Context, obj *entities.Credential, data model.KloudliteIoAppsContainerRegistryInternalDomainEntitiesRepoAccess) error {
	if obj == nil {
		return fmt.Errorf("resource is nil")
	}

	obj.Access = entities.RepoAccess(data)
	return nil
}

// Expiration is the resolver for the expiration field.
func (r *credentialInResolver) Expiration(ctx context.Context, obj *entities.Credential, data *model.KloudliteIoAppsContainerRegistryInternalDomainEntitiesExpirationIn) error {
	if obj == nil {
		return fmt.Errorf("resource is nil")
	}

	obj.Expiration = entities.Expiration{
		Value: data.Value,
		Unit:  entities.ExpirationUnit(data.Unit),
	}
	return nil
}

// Credential returns generated.CredentialResolver implementation.
func (r *Resolver) Credential() generated.CredentialResolver { return &credentialResolver{r} }

// CredentialIn returns generated.CredentialInResolver implementation.
func (r *Resolver) CredentialIn() generated.CredentialInResolver { return &credentialInResolver{r} }

type credentialResolver struct{ *Resolver }
type credentialInResolver struct{ *Resolver }
