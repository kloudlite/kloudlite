// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/kloudlite/api/apps/container-registry/internal/domain/entities"
	"github.com/kloudlite/api/pkg/repos"
)

type BuildCacheKeyEdge struct {
	Cursor string                  `json:"cursor"`
	Node   *entities.BuildCacheKey `json:"node"`
}

type BuildCacheKeyPaginatedRecords struct {
	Edges      []*BuildCacheKeyEdge `json:"edges"`
	PageInfo   *PageInfo            `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

type BuildEdge struct {
	Cursor string          `json:"cursor"`
	Node   *entities.Build `json:"node"`
}

type BuildPaginatedRecords struct {
	Edges      []*BuildEdge `json:"edges"`
	PageInfo   *PageInfo    `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

type CredentialEdge struct {
	Cursor string               `json:"cursor"`
	Node   *entities.Credential `json:"node"`
}

type CredentialPaginatedRecords struct {
	Edges      []*CredentialEdge `json:"edges"`
	PageInfo   *PageInfo         `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

type DigestEdge struct {
	Cursor string           `json:"cursor"`
	Node   *entities.Digest `json:"node"`
}

type DigestPaginatedRecords struct {
	Edges      []*DigestEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

type GithubBranch struct {
	Name      *string `json:"name,omitempty"`
	Protected *bool   `json:"protected,omitempty"`
}

type GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpiration struct {
	Unit  GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit `json:"unit"`
	Value int                                                                            `json:"value"`
}

type GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationIn struct {
	Unit  GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit `json:"unit"`
	Value int                                                                            `json:"value"`
}

type GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitSource struct {
	Branch     string                                                                      `json:"branch"`
	Provider   GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProvider `json:"provider"`
	Repository string                                                                      `json:"repository"`
	WebhookID  *int                                                                        `json:"webhookId,omitempty"`
}

type GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitSourceIn struct {
	Branch     string                                                                      `json:"branch"`
	Provider   GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProvider `json:"provider"`
	Repository string                                                                      `json:"repository"`
}

type GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGithubRepository struct {
	Archived          *bool                  `json:"archived,omitempty"`
	CloneURL          *string                `json:"cloneUrl,omitempty"`
	CreatedAt         *string                `json:"createdAt,omitempty"`
	DefaultBranch     *string                `json:"defaultBranch,omitempty"`
	Description       *string                `json:"description,omitempty"`
	Disabled          *bool                  `json:"disabled,omitempty"`
	FullName          *string                `json:"fullName,omitempty"`
	GitignoreTemplate *string                `json:"gitignoreTemplate,omitempty"`
	GitURL            *string                `json:"gitUrl,omitempty"`
	HTMLURL           *string                `json:"htmlUrl,omitempty"`
	ID                *int                   `json:"id,omitempty"`
	Language          *string                `json:"language,omitempty"`
	MasterBranch      *string                `json:"masterBranch,omitempty"`
	MirrorURL         *string                `json:"mirrorUrl,omitempty"`
	Name              *string                `json:"name,omitempty"`
	NodeID            *string                `json:"node_id,omitempty"`
	Permissions       map[string]interface{} `json:"permissions,omitempty"`
	Private           *bool                  `json:"private,omitempty"`
	PushedAt          *string                `json:"pushedAt,omitempty"`
	Size              *int                   `json:"size,omitempty"`
	TeamID            *int                   `json:"team_id,omitempty"`
	UpdatedAt         *string                `json:"updatedAt,omitempty"`
	URL               *string                `json:"url,omitempty"`
	Visibility        *string                `json:"visibility,omitempty"`
}

type GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGithubUserAccount struct {
	AvatarURL *string `json:"avatarUrl,omitempty"`
	ID        *int    `json:"id,omitempty"`
	Login     *string `json:"login,omitempty"`
	NodeID    *string `json:"nodeId,omitempty"`
	Type      *string `json:"type,omitempty"`
}

type GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGithubUserAccountIn struct {
	AvatarURL *string `json:"avatarUrl,omitempty"`
	ID        *int    `json:"id,omitempty"`
	Login     *string `json:"login,omitempty"`
	NodeID    *string `json:"nodeId,omitempty"`
	Type      *string `json:"type,omitempty"`
}

type GithubComKloudliteAPICommonCreatedOrUpdatedBy struct {
	UserEmail string `json:"userEmail"`
	UserID    string `json:"userId"`
	UserName  string `json:"userName"`
}

type GithubComKloudliteOperatorApisDistributionV1BuildOptions struct {
	BuildArgs         map[string]interface{} `json:"buildArgs,omitempty"`
	BuildContexts     map[string]interface{} `json:"buildContexts,omitempty"`
	ContextDir        *string                `json:"contextDir,omitempty"`
	DockerfileContent *string                `json:"dockerfileContent,omitempty"`
	DockerfilePath    *string                `json:"dockerfilePath,omitempty"`
	TargetPlatforms   []string               `json:"targetPlatforms,omitempty"`
}

type GithubComKloudliteOperatorApisDistributionV1BuildOptionsIn struct {
	BuildArgs         map[string]interface{} `json:"buildArgs,omitempty"`
	BuildContexts     map[string]interface{} `json:"buildContexts,omitempty"`
	ContextDir        *string                `json:"contextDir,omitempty"`
	DockerfileContent *string                `json:"dockerfileContent,omitempty"`
	DockerfilePath    *string                `json:"dockerfilePath,omitempty"`
	TargetPlatforms   []string               `json:"targetPlatforms,omitempty"`
}

type GithubComKloudliteOperatorApisDistributionV1BuildRunSpec struct {
	AccountName  string                                                    `json:"accountName"`
	BuildOptions *GithubComKloudliteOperatorApisDistributionV1BuildOptions `json:"buildOptions,omitempty"`
	CacheKeyName *string                                                   `json:"cacheKeyName,omitempty"`
	Registry     *GithubComKloudliteOperatorApisDistributionV1Registry     `json:"registry"`
	Resource     *GithubComKloudliteOperatorApisDistributionV1Resource     `json:"resource"`
}

type GithubComKloudliteOperatorApisDistributionV1BuildRunSpecIn struct {
	BuildOptions *GithubComKloudliteOperatorApisDistributionV1BuildOptionsIn `json:"buildOptions,omitempty"`
	CacheKeyName *string                                                     `json:"cacheKeyName,omitempty"`
	Registry     *GithubComKloudliteOperatorApisDistributionV1RegistryIn     `json:"registry"`
	Resource     *GithubComKloudliteOperatorApisDistributionV1ResourceIn     `json:"resource"`
}

type GithubComKloudliteOperatorApisDistributionV1Registry struct {
	Repo *GithubComKloudliteOperatorApisDistributionV1Repo `json:"repo"`
}

type GithubComKloudliteOperatorApisDistributionV1RegistryIn struct {
	Repo *GithubComKloudliteOperatorApisDistributionV1RepoIn `json:"repo"`
}

type GithubComKloudliteOperatorApisDistributionV1Repo struct {
	Name string   `json:"name"`
	Tags []string `json:"tags"`
}

type GithubComKloudliteOperatorApisDistributionV1RepoIn struct {
	Name string   `json:"name"`
	Tags []string `json:"tags"`
}

type GithubComKloudliteOperatorApisDistributionV1Resource struct {
	CPU        int `json:"cpu"`
	MemoryInMb int `json:"memoryInMb"`
}

type GithubComKloudliteOperatorApisDistributionV1ResourceIn struct {
	CPU        int `json:"cpu"`
	MemoryInMb int `json:"memoryInMb"`
}

type GitlabBranch struct {
	CanPush            bool   `json:"canPush"`
	Default            bool   `json:"default"`
	DevelopersCanMerge bool   `json:"developersCanMerge"`
	DevelopersCanPush  bool   `json:"developersCanPush"`
	Merged             bool   `json:"merged"`
	Name               string `json:"name"`
	Protected          bool   `json:"protected"`
	WebURL             string `json:"webUrl"`
}

type PageInfo struct {
	EndCursor       *string `json:"endCursor,omitempty"`
	HasNextPage     *bool   `json:"hasNextPage,omitempty"`
	HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
	StartCursor     *string `json:"startCursor,omitempty"`
}

type RepositoryEdge struct {
	Cursor string               `json:"cursor"`
	Node   *entities.Repository `json:"node"`
}

type RepositoryPaginatedRecords struct {
	Edges      []*RepositoryEdge `json:"edges"`
	PageInfo   *PageInfo         `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

type SearchBuildCacheKeys struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchBuilds struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchCreds struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchRepos struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus string

const (
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusError   GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus = "error"
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusFailed  GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus = "failed"
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusIdle    GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus = "idle"
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusPending GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus = "pending"
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusQueued  GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus = "queued"
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusRunning GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus = "running"
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusSuccess GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus = "success"
)

var AllGithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus = []GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus{
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusError,
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusFailed,
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusIdle,
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusPending,
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusQueued,
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusRunning,
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusSuccess,
}

func (e GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus) IsValid() bool {
	switch e {
	case GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusError, GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusFailed, GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusIdle, GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusPending, GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusQueued, GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusRunning, GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatusSuccess:
		return true
	}
	return false
}

func (e GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus) String() string {
	return string(e)
}

func (e *GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__BuildStatus", str)
	}
	return nil
}

func (e GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesBuildStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit string

const (
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitD GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit = "d"
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitH GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit = "h"
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitM GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit = "m"
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitW GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit = "w"
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitY GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit = "y"
)

var AllGithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit = []GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit{
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitD,
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitH,
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitM,
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitW,
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitY,
}

func (e GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit) IsValid() bool {
	switch e {
	case GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitD, GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitH, GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitM, GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitW, GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnitY:
		return true
	}
	return false
}

func (e GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit) String() string {
	return string(e)
}

func (e *GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__ExpirationUnit", str)
	}
	return nil
}

func (e GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesExpirationUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProvider string

const (
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProviderGithub GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProvider = "github"
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProviderGitlab GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProvider = "gitlab"
)

var AllGithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProvider = []GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProvider{
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProviderGithub,
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProviderGitlab,
}

func (e GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProvider) IsValid() bool {
	switch e {
	case GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProviderGithub, GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProviderGitlab:
		return true
	}
	return false
}

func (e GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProvider) String() string {
	return string(e)
}

func (e *GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__GitProvider", str)
	}
	return nil
}

func (e GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesGitProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccess string

const (
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccessRead      GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccess = "read"
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccessReadWrite GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccess = "read_write"
)

var AllGithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccess = []GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccess{
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccessRead,
	GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccessReadWrite,
}

func (e GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccess) IsValid() bool {
	switch e {
	case GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccessRead, GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccessReadWrite:
		return true
	}
	return false
}

func (e GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccess) String() string {
	return string(e)
}

func (e *GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccess) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccess(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__RepoAccess", str)
	}
	return nil
}

func (e GithubComKloudliteAPIAppsContainerRegistryInternalDomainEntitiesRepoAccess) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
