// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Check struct {
	Status     *bool   `json:"status,omitempty"`
	Message    *string `json:"message,omitempty"`
	Generation *int    `json:"generation,omitempty"`
}

type Overrides struct {
	Applied *bool    `json:"applied,omitempty"`
	Patches []*Patch `json:"patches,omitempty"`
}

type OverridesIn struct {
	Patches []*PatchIn `json:"patches,omitempty"`
}

type Patch struct {
	Op    string      `json:"op"`
	Path  string      `json:"path"`
	Value interface{} `json:"value,omitempty"`
}

type PatchIn struct {
	Op    string      `json:"op"`
	Path  string      `json:"path"`
	Value interface{} `json:"value,omitempty"`
}

type HarborPermission string

const (
	HarborPermissionPush HarborPermission = "Push"
	HarborPermissionPull HarborPermission = "Pull"
)

var AllHarborPermission = []HarborPermission{
	HarborPermissionPush,
	HarborPermissionPull,
}

func (e HarborPermission) IsValid() bool {
	switch e {
	case HarborPermissionPush, HarborPermissionPull:
		return true
	}
	return false
}

func (e HarborPermission) String() string {
	return string(e)
}

func (e *HarborPermission) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HarborPermission(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HarborPermission", str)
	}
	return nil
}

func (e HarborPermission) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
