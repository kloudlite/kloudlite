package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"fmt"
	"time"

	"github.com/kloudlite/api/apps/container-registry/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/container-registry/internal/app/graph/model"
	"github.com/kloudlite/api/apps/container-registry/internal/domain/entities"
)

// CreatedBy is the resolver for the createdBy field.
func (r *repositoryResolver) CreatedBy(ctx context.Context, obj *entities.Repository) (*model.KloudliteIoCommonCreatedOrUpdatedBy, error) {
	if obj == nil {
		return nil, fmt.Errorf("resource is nil")
	}

	return &model.KloudliteIoCommonCreatedOrUpdatedBy{
		UserEmail: obj.CreatedBy.UserEmail,
		UserID:    string(obj.CreatedBy.UserId),
		UserName:  obj.CreatedBy.UserName,
	}, nil
}

// CreationTime is the resolver for the creationTime field.
func (r *repositoryResolver) CreationTime(ctx context.Context, obj *entities.Repository) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("resource is nil")
	}

	return obj.CreationTime.Format(time.RFC3339), nil
}

// ID is the resolver for the id field.
func (r *repositoryResolver) ID(ctx context.Context, obj *entities.Repository) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("resource is nil")
	}

	return string(obj.Id), nil
}

// LastUpdatedBy is the resolver for the lastUpdatedBy field.
func (r *repositoryResolver) LastUpdatedBy(ctx context.Context, obj *entities.Repository) (*model.KloudliteIoCommonCreatedOrUpdatedBy, error) {
	if obj == nil {
		return nil, fmt.Errorf("resource is nil")
	}

	return &model.KloudliteIoCommonCreatedOrUpdatedBy{
		UserEmail: obj.LastUpdatedBy.UserEmail,
		UserID:    string(obj.LastUpdatedBy.UserId),
		UserName:  obj.LastUpdatedBy.UserName,
	}, nil
}

// UpdateTime is the resolver for the updateTime field.
func (r *repositoryResolver) UpdateTime(ctx context.Context, obj *entities.Repository) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("resource is nil")
	}

	return obj.UpdateTime.Format(time.RFC3339), nil
}

// Repository returns generated.RepositoryResolver implementation.
func (r *Resolver) Repository() generated.RepositoryResolver { return &repositoryResolver{r} }

type repositoryResolver struct{ *Resolver }
