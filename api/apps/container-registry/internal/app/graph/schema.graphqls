directive @isLoggedIn on FIELD_DEFINITION
directive @hasAccount on FIELD_DEFINITION
directive @canActOnAccount(action: String) on FIELD_DEFINITION

# scalar Json
# scalar Any

type Repo {
  id: Int!
  name: String!
  artifactCount: Int!
  pullCount: Int!
}

enum HarborPermission {
  PushRepository
  PullRepository
}

type Artifact {
  size: Int!
  tags: [ImageTag!]!
}

type ImageTag {
  name: String!
  signed: Boolean!
  immutable: Boolean!
  pushedAt: String!
}

type Query {
  cr_listRepos :[Repo!]! @hasAccount @isLoggedIn @canActOnAccount(action: "read-container-registry")
  cr_listArtifacts(repoName:String!) :[Artifact!]! @hasAccount @isLoggedIn @canActOnAccount(action: "read-container-registry")
  cr_listRobots :[HarborRobotUser!]! @hasAccount @isLoggedIn @canActOnAccount(action: "read-container-registry")
}

type Mutation {
  # cr_createRobot(name: String!, description: String, readOnly: Boolean!) :Robot! @hasAccount @isLoggedIn @canActOnAccount(action: "write-container-registry")
  cr_createRobot(robotUser: HarborRobotUserIn!): HarborRobotUser @hasAccount @isLoggedIn @canActOnAccount(action: "write-container-registry")
  cr_updateRobot(name: String!, permissions: [HarborPermission!]): HarborRobotUser @hasAccount @isLoggedIn @canActOnAccount(action: "write-container-registry")
  cr_deleteRobot(robotId: Int!) :Boolean! @hasAccount @isLoggedIn @canActOnAccount(action: "write-container-registry")
  cr_resyncRobot(name: String!): Boolean! @hasAccount @isLoggedIn @canActOnAccount(action: "write-container-registry")

  cr_deleteRepo(repoId:Int!) :Boolean! @hasAccount @isLoggedIn @canActOnAccount(action: "write-container-registry")
}
