// DO NOT EDIT. generated by "github.com/kloudlite/api/cmd/struct-json-path"

package field_constants

// constant vars generated for struct AccessToken
const (
	AccessTokenId                = "_id"
	AccessTokenData              = "data"
	AccessTokenEmail             = "email"
	AccessTokenProvider          = "provider"
	AccessTokenToken             = "token"
	AccessTokenTokenAccessToken  = "token.access_token"
	AccessTokenTokenExpiry       = "token.expiry"
	AccessTokenTokenExpiryDelta  = "token.expiryDelta"
	AccessTokenTokenRaw          = "token.raw"
	AccessTokenTokenRefreshToken = "token.refresh_token"
	AccessTokenTokenTokenType    = "token.token_type"
	AccessTokenUserId            = "user_id"
)

// constant vars generated for struct Build
const (
	BuildBuildClusterName                  = "buildClusterName"
	BuildCredUser                          = "credUser"
	BuildCredUserUserEmail                 = "credUser.userEmail"
	BuildCredUserUserId                    = "credUser.userId"
	BuildCredUserUserName                  = "credUser.userName"
	BuildErrorMessages                     = "errorMessages"
	BuildName                              = "name"
	BuildSource                            = "source"
	BuildSourceBranch                      = "source.branch"
	BuildSourceProvider                    = "source.provider"
	BuildSourceRepository                  = "source.repository"
	BuildSourceWebhookId                   = "source.webhookId"
	BuildSpec                              = "spec"
	BuildSpecAccountName                   = "spec.accountName"
	BuildSpecBuildOptions                  = "spec.buildOptions"
	BuildSpecBuildOptionsBuildArgs         = "spec.buildOptions.buildArgs"
	BuildSpecBuildOptionsBuildContexts     = "spec.buildOptions.buildContexts"
	BuildSpecBuildOptionsContextDir        = "spec.buildOptions.contextDir"
	BuildSpecBuildOptionsDockerfileContent = "spec.buildOptions.dockerfileContent"
	BuildSpecBuildOptionsDockerfilePath    = "spec.buildOptions.dockerfilePath"
	BuildSpecBuildOptionsTargetPlatforms   = "spec.buildOptions.targetPlatforms"
	BuildSpecCacheKeyName                  = "spec.cacheKeyName"
	BuildSpecCredentialsRef                = "spec.credentialsRef"
	BuildSpecCredentialsRefName            = "spec.credentialsRef.name"
	BuildSpecCredentialsRefNamespace       = "spec.credentialsRef.namespace"
	BuildSpecGitRepo                       = "spec.gitRepo"
	BuildSpecGitRepoBranch                 = "spec.gitRepo.branch"
	BuildSpecGitRepoUrl                    = "spec.gitRepo.url"
	BuildSpecRegistry                      = "spec.registry"
	BuildSpecRegistryRepo                  = "spec.registry.repo"
	BuildSpecRegistryRepoName              = "spec.registry.repo.name"
	BuildSpecRegistryRepoTags              = "spec.registry.repo.tags"
	BuildSpecResource                      = "spec.resource"
	BuildSpecResourceCpu                   = "spec.resource.cpu"
	BuildSpecResourceMemoryInMb            = "spec.resource.memoryInMb"
)

// constant vars generated for struct BuildCacheKey
const (
	BuildCacheKeyName           = "name"
	BuildCacheKeyVolumeSizeInGB = "volumeSizeInGB"
)

// constant vars generated for struct BuildRun
const (
	BuildRunBuildId                           = "buildId"
	BuildRunSpec                              = "spec"
	BuildRunSpecAccountName                   = "spec.accountName"
	BuildRunSpecBuildOptions                  = "spec.buildOptions"
	BuildRunSpecBuildOptionsBuildArgs         = "spec.buildOptions.buildArgs"
	BuildRunSpecBuildOptionsBuildContexts     = "spec.buildOptions.buildContexts"
	BuildRunSpecBuildOptionsContextDir        = "spec.buildOptions.contextDir"
	BuildRunSpecBuildOptionsDockerfileContent = "spec.buildOptions.dockerfileContent"
	BuildRunSpecBuildOptionsDockerfilePath    = "spec.buildOptions.dockerfilePath"
	BuildRunSpecBuildOptionsTargetPlatforms   = "spec.buildOptions.targetPlatforms"
	BuildRunSpecCacheKeyName                  = "spec.cacheKeyName"
	BuildRunSpecCredentialsRef                = "spec.credentialsRef"
	BuildRunSpecCredentialsRefName            = "spec.credentialsRef.name"
	BuildRunSpecCredentialsRefNamespace       = "spec.credentialsRef.namespace"
	BuildRunSpecGitRepo                       = "spec.gitRepo"
	BuildRunSpecGitRepoBranch                 = "spec.gitRepo.branch"
	BuildRunSpecGitRepoUrl                    = "spec.gitRepo.url"
	BuildRunSpecRegistry                      = "spec.registry"
	BuildRunSpecRegistryRepo                  = "spec.registry.repo"
	BuildRunSpecRegistryRepoName              = "spec.registry.repo.name"
	BuildRunSpecRegistryRepoTags              = "spec.registry.repo.tags"
	BuildRunSpecResource                      = "spec.resource"
	BuildRunSpecResourceCpu                   = "spec.resource.cpu"
	BuildRunSpecResourceMemoryInMb            = "spec.resource.memoryInMb"
)

// constant vars generated for struct Credential
const (
	CredentialAccess          = "access"
	CredentialExpiration      = "expiration"
	CredentialExpirationUnit  = "expiration.unit"
	CredentialExpirationValue = "expiration.value"
	CredentialName            = "name"
	CredentialTokenKey        = "token_key"
	CredentialUsername        = "username"
)

// constant vars generated for struct Digest
const (
	DigestActor      = "actor"
	DigestDeleting   = "deleting"
	DigestDigest     = "digest"
	DigestLength     = "length"
	DigestMediaType  = "mediaType"
	DigestRepository = "repository"
	DigestSize       = "size"
	DigestTags       = "tags"
	DigestUrl        = "url"
)

// constant vars generated for struct Event
const (
	EventAction           = "action"
	EventActor            = "actor"
	EventActorName        = "actor.name"
	EventRequest          = "request"
	EventRequestAddr      = "request.addr"
	EventRequestHost      = "request.host"
	EventRequestId        = "request.id"
	EventRequestMethod    = "request.method"
	EventRequestUseragent = "request.useragent"
	EventSource           = "source"
	EventSourceAddr       = "source.addr"
	EventSourceInstanceID = "source.instanceID"
	EventTarget           = "target"
	EventTargetDigest     = "target.digest"
	EventTargetLength     = "target.length"
	EventTargetMediaType  = "target.mediaType"
	EventTargetReferences = "target.references"
	EventTargetRepository = "target.repository"
	EventTargetSize       = "target.size"
	EventTargetTag        = "target.tag"
	EventTargetUrl        = "target.url"
	EventTimestamp        = "timestamp"
)

// constant vars generated for struct EventMessage
const (
	EventMessageEvents = "Events"
)

// constant vars generated for struct Expiration
const (
	ExpirationUnit  = "unit"
	ExpirationValue = "value"
)

// constant vars generated for struct GInst
const (
	GInstAccount          = "account"
	GInstAccountAvatarUrl = "account.avatarUrl"
	GInstAccountId        = "account.id"
	GInstAccountLogin     = "account.login"
	GInstAccountNodeId    = "account.nodeId"
	GInstAccountType      = "account.type"
	GInstAppId            = "appId"
	GInstNodeId           = "nodeId"
	GInstRepositoriesUrl  = "repositoriesUrl"
	GInstTargetId         = "targetId"
	GInstTargetType       = "targetType"
)

// constant vars generated for struct GitBranch
const (
	GitBranchName      = "name"
	GitBranchProtected = "protected"
)

// constant vars generated for struct GitSource
const (
	GitSourceBranch     = "branch"
	GitSourceProvider   = "provider"
	GitSourceRepository = "repository"
	GitSourceWebhookId  = "webhookId"
)

// constant vars generated for struct GithubInstallation
const (
	GithubInstallationAccount          = "account"
	GithubInstallationAccountAvatarUrl = "account.avatarUrl"
	GithubInstallationAccountId        = "account.id"
	GithubInstallationAccountLogin     = "account.login"
	GithubInstallationAccountNodeId    = "account.nodeId"
	GithubInstallationAccountType      = "account.type"
	GithubInstallationAppId            = "appId"
	GithubInstallationNodeId           = "nodeId"
	GithubInstallationRepositoriesUrl  = "repositoriesUrl"
	GithubInstallationTargetId         = "targetId"
	GithubInstallationTargetType       = "targetType"
)

// constant vars generated for struct GithubListRepository
const (
	GithubListRepositoryRepositories = "repositories"
	GithubListRepositoryTotalCount   = "totalCount"
)

// constant vars generated for struct GithubRepository
const (
	GithubRepositoryArchived          = "archived"
	GithubRepositoryCloneUrl          = "cloneUrl"
	GithubRepositoryCreatedAt         = "createdAt"
	GithubRepositoryDefaultBranch     = "defaultBranch"
	GithubRepositoryDescription       = "description"
	GithubRepositoryDisabled          = "disabled"
	GithubRepositoryFullName          = "fullName"
	GithubRepositoryGitUrl            = "gitUrl"
	GithubRepositoryGitignoreTemplate = "gitignoreTemplate"
	GithubRepositoryHtmlUrl           = "htmlUrl"
	GithubRepositoryLanguage          = "language"
	GithubRepositoryMasterBranch      = "masterBranch"
	GithubRepositoryMirrorUrl         = "mirrorUrl"
	GithubRepositoryName              = "name"
	GithubRepositoryNodeId            = "node_id"
	GithubRepositoryPermissions       = "permissions"
	GithubRepositoryPrivate           = "private"
	GithubRepositoryPushedAt          = "pushedAt"
	GithubRepositorySize              = "size"
	GithubRepositoryTeamId            = "team_id"
	GithubRepositoryUpdatedAt         = "updatedAt"
	GithubRepositoryUrl               = "url"
	GithubRepositoryVisibility        = "visibility"
)

// constant vars generated for struct GithubSearchRepository
const (
	GithubSearchRepositoryIncompleteResults = "incompleteResults"
	GithubSearchRepositoryRepositories      = "repositories"
	GithubSearchRepositoryTotal             = "total"
)

// constant vars generated for struct GithubUserAccount
const (
	GithubUserAccountAvatarUrl = "avatarUrl"
	GithubUserAccountLogin     = "login"
	GithubUserAccountNodeId    = "nodeId"
	GithubUserAccountType      = "type"
)

// constant vars generated for struct GitlabGroup
const (
	GitlabGroupAvatarUrl = "avatarUrl"
	GitlabGroupFullName  = "fullName"
)

// constant vars generated for struct GitlabProject
const (
	GitlabProjectArchived          = "archived"
	GitlabProjectAvatarUrl         = "avatarUrl"
	GitlabProjectCreatedAt         = "createdAt"
	GitlabProjectCreatorId         = "creatorId"
	GitlabProjectDefaultBranch     = "defaultBranch"
	GitlabProjectDescription       = "description"
	GitlabProjectEmptyRepo         = "emptyRepo"
	GitlabProjectHttpUrlToRepo     = "httpUrlToRepo"
	GitlabProjectLastActivityAt    = "lastActivityAt"
	GitlabProjectName              = "name"
	GitlabProjectNameWithNamespace = "nameWithNamespace"
	GitlabProjectPath              = "path"
	GitlabProjectPathWithNamespace = "pathWithNamespace"
	GitlabProjectPublic            = "public"
	GitlabProjectSshUrlToRepo      = "sshUrlToRepo"
	GitlabProjectTagList           = "tagList"
	GitlabProjectTopics            = "topics"
	GitlabProjectWebUrl            = "webUrl"
)

// constant vars generated for struct RepoReference
const (
	RepoReferenceDigest    = "digest"
	RepoReferenceMediaType = "mediaType"
	RepoReferenceSize      = "size"
)

// constant vars generated for struct Repository
const (
	RepositoryName = "name"
)

// constant vars generated for struct
const (
	AccountName                        = "accountName"
	ApiVersion                         = "apiVersion"
	ClusterName                        = "clusterName"
	CreatedBy                          = "createdBy"
	CreatedByUserEmail                 = "createdBy.userEmail"
	CreatedByUserId                    = "createdBy.userId"
	CreatedByUserName                  = "createdBy.userName"
	CreationTime                       = "creationTime"
	DisplayName                        = "displayName"
	Id                                 = "id"
	Kind                               = "kind"
	LastUpdatedBy                      = "lastUpdatedBy"
	LastUpdatedByUserEmail             = "lastUpdatedBy.userEmail"
	LastUpdatedByUserId                = "lastUpdatedBy.userId"
	LastUpdatedByUserName              = "lastUpdatedBy.userName"
	MarkedForDeletion                  = "markedForDeletion"
	Metadata                           = "metadata"
	MetadataAnnotations                = "metadata.annotations"
	MetadataCreationTimestamp          = "metadata.creationTimestamp"
	MetadataDeletionGracePeriodSeconds = "metadata.deletionGracePeriodSeconds"
	MetadataDeletionTimestamp          = "metadata.deletionTimestamp"
	MetadataFinalizers                 = "metadata.finalizers"
	MetadataGenerateName               = "metadata.generateName"
	MetadataGeneration                 = "metadata.generation"
	MetadataLabels                     = "metadata.labels"
	MetadataManagedFields              = "metadata.managedFields"
	MetadataName                       = "metadata.name"
	MetadataNamespace                  = "metadata.namespace"
	MetadataOwnerReferences            = "metadata.ownerReferences"
	MetadataResourceVersion            = "metadata.resourceVersion"
	MetadataSelfLink                   = "metadata.selfLink"
	MetadataUid                        = "metadata.uid"
	RecordVersion                      = "recordVersion"
	Status                             = "status"
	StatusCheckList                    = "status.checkList"
	StatusChecks                       = "status.checks"
	StatusIsReady                      = "status.isReady"
	StatusLastReadyGeneration          = "status.lastReadyGeneration"
	StatusLastReconcileTime            = "status.lastReconcileTime"
	StatusMessage                      = "status.message"
	StatusMessageItems                 = "status.message.items"
	StatusResources                    = "status.resources"
	SyncStatus                         = "syncStatus"
	SyncStatusAction                   = "syncStatus.action"
	SyncStatusError                    = "syncStatus.error"
	SyncStatusLastSyncedAt             = "syncStatus.lastSyncedAt"
	SyncStatusRecordVersion            = "syncStatus.recordVersion"
	SyncStatusState                    = "syncStatus.state"
	SyncStatusSyncScheduledAt          = "syncStatus.syncScheduledAt"
	UpdateTime                         = "updateTime"
)
