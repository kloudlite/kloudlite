type Query {
    # accounts: [Account!]!
    account(accountId: ID!): Account

    # accountsMemberships: [AccountMembership!]!
    # accountMembership(accountId: ID!): AccountMembership!

    # stripeSetupIntent: String!
}

type Mutation {
    createAccount(
        name: String!
        billing: BillingInput
    ): Account!
    updateAccount(accountId: ID!, name: String, contactEmail: String): Account!
    updateAccountBilling(
        accountId: ID!
        billing: BillingInput!
    ): Account!
    addAccountMember(
        accountId: String!
        email: String!
        name: String!
        role: String!
    ): Boolean!
    removeAccountMember(accountId: ID!, userId: ID!): Boolean!
    updateAccountMember(accountId: ID!, userId: ID!, role: String!): Boolean!
    deactivateAccount(accountId: ID!): Boolean!
    activateAccount(accountId: ID!): Boolean!
    deleteAccount(accountId: ID!): Boolean!
}


scalar Json
scalar Date

type Account @key(fields: "id") {
    id: ID!
    name: String!
    billing: Billing!
    isActive: Boolean!
    contactEmail: String!
    readableId: ID!
    memberships: [AccountMembership!]!
    created: Date!
}

extend type User @key(fields: "id") {
    id: ID! @external
    accountMemberships:[AccountMembership!]!
}
type AccountMembership {
    user: User!
    role: String!
    account: Account!
}

type Billing {
    stripeCustomerId: String!
    cardholderName: String!
    address: Json!
}

input BillingInput {
    stripeSetupIntentId: String!
    stripePaymentMethod: String!
    cardholderName: String!
    address: Json!
}
