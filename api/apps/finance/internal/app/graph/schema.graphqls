type Query {
  finance_account(accountId: ID!): Account # account-admin-access, account-owner-access
  finance_stripeSetupIntent: String # user-access
  finance_testStripe(accountId: ID!): Boolean! #private
}

type Mutation {
    finance_createAccount(name: String!, billing: BillingInput!): Account! # user-access
    finance_updateAccount(accountId: ID!, name: String, contactEmail: String): Account! # account-admin-access, account-owner-access
    finance_updateAccountBilling(accountId: ID!, billing: BillingInput!): Account! # account-admin-access, account-owner-access
    finance_inviteAccountMember(accountId: String!, name: String,email: String!, role: String!): Boolean! # account-admin-access, account-owner-access
    finance_removeAccountMember(accountId: ID!, userId: ID!): Boolean! # account-admin-access, account-owner-access
    finance_updateAccountMember(accountId: ID!, userId: ID!, role: String!): Boolean! # account-admin-access, account-owner-access
    finance_deactivateAccount(accountId: ID!): Boolean! # account-owner-access
    finance_activateAccount(accountId: ID!): Boolean! # account-owner-access
    finance_deleteAccount(accountId: ID!): Boolean! # account-owner-access
}

scalar Json
scalar Date

type Account @key(fields: "id") {
  id: ID!
  name: String!
  billing: Billing!
  isActive: Boolean!
  contactEmail: String!
  readableId: ID!
  memberships: [AccountMembership!]! # account-admin-access, account-owner-access
  created: Date!
  outstandingAmount: Float!
}

extend type StoragePlan @key(fields: "name"){
    name: String! @external
    pricePerGB: Float!
}

extend type ComputePlan @key(fields: "name"){
    name: String! @external
    sharedPrice: Float!
    dedicatedPrice: Float!
}

extend type LambdaPlan @key(fields: "name"){
    name: String! @external
    freeTier: Int!
    pricePerGBHr: Float!
}


extend type User @key(fields: "id") {
  id: ID! @external
  accountMemberships:[AccountMembership!]! # user-access
  accountMembership(accountId: ID):AccountMembership! # user-access
}

type AccountMembership {
  user: User!
  role: String!
  account: Account!
  accepted: Boolean!
}

type Billing {
  cardholderName: String!
  address: Json!
}

input BillingInput {
  stripePaymentMethodId: String!
  cardholderName: String!
  address: Json!
}
