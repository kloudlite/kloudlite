directive @isLoggedIn on FIELD_DEFINITION

type Query {
  finance_listAccounts: [Account] @isLoggedIn
  finance_account(accountName: String!): Account @isLoggedIn
  finance_listInvitations(accountName: String!): [AccountMembership] @isLoggedIn
  # finance_stripeSetupIntent: String # user-access
  # finance_testStripe(accountId: ID!): Boolean! #private
}

type Mutation {
  finance_createAccount(name: String!, displayName: String!): Account! @isLoggedIn
  finance_updateAccount(accountName: String!, name: String, contactEmail: String): Account! @isLoggedIn
  # finance_updateAccountBilling(accountId: ID!, billing: BillingInput!): Account! # account-admin-access, account-owner-access
  finance_removeAccountMember(accountName: String!, userId: ID!): Boolean! @isLoggedIn
  finance_updateAccountMember(accountName: String!, userId: ID!, role: String!): Boolean! @isLoggedIn
  finance_deactivateAccount(accountName: String!): Boolean! @isLoggedIn
  finance_activateAccount(accountName: String!): Boolean! @isLoggedIn
  finance_deleteAccount(accountName: String!): Boolean! @isLoggedIn
  # finance_attachToCluster(accountId: ID!, clusterId: ID!): Boolean!

  finance_inviteUser(accountName: String!, name: String, email: String!, role: String!): Boolean! @isLoggedIn
  finance_deleteInvitation(accountName: String!, email: String!): Boolean! @isLoggedIn
}

scalar Json
scalar Date

type Account @key(fields: "name") {
  name: String!
  displayName: String!
  billing: Billing!
  isActive: Boolean!
  contactEmail: String!
  readableId: ID!
  memberships: [AccountMembership!]! # account-admin-access, account-owner-access
  created: Date!
  outstandingAmount: Float!
}

# extend type Account @key(fields: "name") {
#   name: String!
#   memberships: [AccountMembership!]! # account-admin-access, account-owner-access
# }

# extend type StoragePlan @key(fields: "name"){
#     name: String! @external
#     pricePerGB: Float!
# }
#
# extend type ComputePlan @key(fields: "name"){
#     name: String! @external
#     sharedPrice: Float!
#     dedicatedPrice: Float!
# }
#
# extend type LambdaPlan @key(fields: "name"){
#     name: String! @external
#     freeTier: Int!
#     pricePerGBHr: Float!
# }

extend type User @key(fields: "id") {
  id: ID! @external
  accountMemberships:[AccountMembership!]! @isLoggedIn # user-access 
  accountMembership(accountName: String!):AccountMembership! @isLoggedIn # user-access
}

type AccountMembership {
  user: User!
  role: String!
  account: Account!
  accepted: Boolean!
}

type Billing {
  cardholderName: String!
  address: Json!
}

input BillingInput {
  stripePaymentMethodId: String!
  cardholderName: String!
  address: Json!
}
