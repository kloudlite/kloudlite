package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"errors"
	"fmt"

	"kloudlite.io/apps/finance/internal/app/graph/generated"
	"kloudlite.io/apps/finance/internal/app/graph/model"
	"kloudlite.io/apps/finance/internal/domain"
	iamT "kloudlite.io/apps/iam/types"
	"kloudlite.io/pkg/repos"
)

// Memberships is the resolver for the memberships field.
func (r *accountResolver) Memberships(ctx context.Context, obj *model.Account) ([]*model.AccountMembership, error) {
	entities, err := r.domain.GetUserMemberships(toFinanceContext(ctx), iamT.NewResourceRef(obj.Name, iamT.ResourceAccount, obj.Name))
	accountMemberships := make([]*model.AccountMembership, len(entities))
	for i, entity := range entities {
		accountMemberships[i] = &model.AccountMembership{
			Account: &model.Account{
				Name: entity.AccountName,
			},
			User: &model.User{
				ID: entity.UserId,
			},
			Role:     string(entity.Role),
			Accepted: entity.Accepted,
		}
	}
	return accountMemberships, err
}

// User is the resolver for the user field.
func (r *accountMembershipResolver) User(ctx context.Context, obj *model.AccountMembership) (*model.User, error) {
	return &model.User{
		ID: obj.User.ID,
	}, nil
}

// Account is the resolver for the account field.
func (r *accountMembershipResolver) Account(ctx context.Context, obj *model.AccountMembership) (*model.Account, error) {
	acc, err := r.domain.GetAccount(toFinanceContext(ctx), obj.Account.Name)
	if err != nil {
		return nil, err
	}
	if acc == nil {
		return nil, errors.New("account not found")
	}
	return AccountModelFromEntity(acc), nil
}

// FinanceCreateAccount is the resolver for the finance_createAccount field.
func (r *mutationResolver) FinanceCreateAccount(ctx context.Context, name string, displayName string) (*model.Account, error) {
	account, err := r.domain.CreateAccount(toFinanceContext(ctx), name, displayName)
	if err != nil {
		return nil, err
	}
	return AccountModelFromEntity(account), nil
}

// FinanceUpdateAccount is the resolver for the finance_updateAccount field.
func (r *mutationResolver) FinanceUpdateAccount(ctx context.Context, accountName string, name *string, contactEmail *string) (*model.Account, error) {
	account, err := r.domain.UpdateAccount(toFinanceContext(ctx), accountName, contactEmail)
	if err != nil {
		return nil, err
	}
	return AccountModelFromEntity(account), nil
}

// FinanceRemoveAccountMember is the resolver for the finance_removeAccountMember field.
func (r *mutationResolver) FinanceRemoveAccountMember(ctx context.Context, accountName string, userID repos.ID) (bool, error) {
	return r.domain.RemoveAccountMember(toFinanceContext(ctx), accountName, userID)
}

// FinanceUpdateAccountMember is the resolver for the finance_updateAccountMember field.
func (r *mutationResolver) FinanceUpdateAccountMember(ctx context.Context, accountName string, userID repos.ID, role string) (bool, error) {
	return r.domain.UpdateAccountMember(toFinanceContext(ctx), accountName, userID, role)
}

// FinanceDeactivateAccount is the resolver for the finance_deactivateAccount field.
func (r *mutationResolver) FinanceDeactivateAccount(ctx context.Context, accountName string) (bool, error) {
	return r.domain.DeactivateAccount(toFinanceContext(ctx), accountName)
}

// FinanceActivateAccount is the resolver for the finance_activateAccount field.
func (r *mutationResolver) FinanceActivateAccount(ctx context.Context, accountName string) (bool, error) {
	return r.domain.ActivateAccount(toFinanceContext(ctx), accountName)
}

// FinanceDeleteAccount is the resolver for the finance_deleteAccount field.
func (r *mutationResolver) FinanceDeleteAccount(ctx context.Context, accountName string) (bool, error) {
	return r.domain.DeleteAccount(toFinanceContext(ctx), accountName)
}

// FinanceInviteUser is the resolver for the finance_inviteUser field.
func (r *mutationResolver) FinanceInviteUser(ctx context.Context, accountName string, name *string, email string, role string) (bool, error) {
	return r.domain.InviteUser(toFinanceContext(ctx), accountName, email, iamT.Role(role))
}

// FinanceDeleteInvitation is the resolver for the finance_deleteInvitation field.
func (r *mutationResolver) FinanceDeleteInvitation(ctx context.Context, accountName string, email string) (bool, error) {
	panic(fmt.Errorf("not implemented"))
}

// FinanceListAccounts is the resolver for the finance_listAccounts field.
func (r *queryResolver) FinanceListAccounts(ctx context.Context) ([]*model.Account, error) {
	acc, err := r.domain.ListAccounts(toFinanceContext(ctx))
	if err != nil || acc == nil {
		return make([]*model.Account, 0), err
	}

	m := make([]*model.Account, len(acc))
	for i := range acc {
		m[i] = &model.Account{
			Name: acc[i].Name,
			Billing: &model.Billing{
				CardholderName: acc[i].Billing.CardholderName,
				Address:        acc[i].Billing.Address,
			},
			// IsActive:     fn.DefaultIfNil(acc[i].IsActive, false),
			ContactEmail: acc[i].ContactEmail,
			ReadableID:   acc[i].ReadableId,
		}
	}

	return m, nil
}

// FinanceAccount is the resolver for the finance_account field.
func (r *queryResolver) FinanceAccount(ctx context.Context, accountName string) (*model.Account, error) {
	accountEntity, err := r.domain.GetAccount(toFinanceContext(ctx), accountName)
	return AccountModelFromEntity(accountEntity), err
}

// FinanceListInvitations is the resolver for the finance_listInvitations field.
func (r *queryResolver) FinanceListInvitations(ctx context.Context, accountName string) ([]*model.AccountMembership, error) {
	m, err := r.domain.ListInvitations(toFinanceContext(ctx), accountName)
	if err != nil {
		return nil, err
	}

	am := make([]*model.AccountMembership, len(m))
	for i := range m {
		am[i] = &model.AccountMembership{
			User: &model.User{
				ID: m[i].UserId,
			},
			Role: string(m[i].Role),
			Account: &model.Account{
				Name: m[i].AccountName,
			},
			Accepted: m[i].Accepted,
		}
	}
	return am, nil
}

// FinanceReSyncAccount is the resolver for the finance_reSyncAccount field.
func (r *queryResolver) FinanceReSyncAccount(ctx context.Context, accountName string) (bool, error) {
	if err := r.domain.ReSyncToK8s(toFinanceContext(ctx), accountName); err != nil {
		return false, err
	}
	return true, nil
}

// AccountMemberships is the resolver for the accountMemberships field.
func (r *userResolver) AccountMemberships(ctx context.Context, obj *model.User) ([]*model.AccountMembership, error) {
	// entities, err := r.domain.GetAccountMemberships(toFinanceContext(ctx), obj.ID)
	entities, err := r.domain.GetAccountMemberships(domain.FinanceContext{Context: ctx, UserId: obj.ID})
	accountMemberships := make([]*model.AccountMembership, len(entities))
	for i, entity := range entities {
		accountMemberships[i] = &model.AccountMembership{
			Account: &model.Account{
				Name: entity.AccountName,
			},
			User: &model.User{
				ID: entity.UserId,
			},
			Role: string(entity.Role),
		}
	}
	return accountMemberships, err
}

// AccountMembership is the resolver for the accountMembership field.
func (r *userResolver) AccountMembership(ctx context.Context, obj *model.User, accountName string) (*model.AccountMembership, error) {
	membership, err := r.domain.GetAccountMembership(domain.FinanceContext{UserId: obj.ID, Context: ctx}, accountName)
	if err != nil {
		return nil, err
	}
	return &model.AccountMembership{
		Account: &model.Account{
			Name: membership.AccountName,
		},
		User: &model.User{
			ID: membership.UserId,
		},
		Role: string(membership.Role),
	}, nil
}

// Account returns generated.AccountResolver implementation.
func (r *Resolver) Account() generated.AccountResolver { return &accountResolver{r} }

// AccountMembership returns generated.AccountMembershipResolver implementation.
func (r *Resolver) AccountMembership() generated.AccountMembershipResolver {
	return &accountMembershipResolver{r}
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type accountResolver struct{ *Resolver }
type accountMembershipResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
