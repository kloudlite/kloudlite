directive @isLoggedInAndVerified on FIELD_DEFINITION
directive @hasAccount on FIELD_DEFINITION

type AccountsCheckNameAvailabilityOutput @shareable {
  result: Boolean!
  suggestedNames: [String!]
}

extend type AccountMembership {
	user: User!
}

type Query {
  accounts_listAccounts: [Account] @isLoggedInAndVerified
  accounts_getAccount(accountName: String!): Account @isLoggedInAndVerified
  accounts_resyncAccount(accountName: String!): Boolean! @isLoggedInAndVerified

  accounts_listInvitations(accountName: String!): [Invitation!] @isLoggedInAndVerified
  accounts_getInvitation(accountName: String!, invitationId: String!): Invitation @isLoggedInAndVerified
  accounts_listInvitationsForUser(onlyPending: Boolean!): [Invitation!] @isLoggedInAndVerified

  accounts_checkNameAvailability(name: String!): AccountsCheckNameAvailabilityOutput! @isLoggedInAndVerified

  accounts_listMembershipsForUser: [AccountMembership!] @isLoggedInAndVerified
  accounts_listMembershipsForAccount(accountName: String!, role: Github__com___kloudlite___api___apps___iam___types__Role): [AccountMembership!] @isLoggedInAndVerified
  accounts_getAccountMembership(accountName: String!): AccountMembership @isLoggedInAndVerified

  accounts_ensureKloudliteRegistryPullSecrets(accountName: String!): Boolean! @isLoggedInAndVerified
}

type Mutation {
  accounts_createAccount(account: AccountIn!): Account! @isLoggedInAndVerified
  accounts_updateAccount(account: AccountIn!): Account! @isLoggedInAndVerified

  accounts_deactivateAccount(accountName: String!): Boolean! @isLoggedInAndVerified
  accounts_activateAccount(accountName: String!): Boolean! @isLoggedInAndVerified

  accounts_deleteAccount(accountName: String!): Boolean! @isLoggedInAndVerified
  # accounts_attachToCluster(accountId: ID!, clusterId: ID!): Boolean!

  # invitations
  accounts_inviteMembers(accountName: String!, invitations: [InvitationIn!]!): [Invitation!] @isLoggedInAndVerified
  accounts_resendInviteMail(accountName: String!, invitationId: String!): Boolean! @isLoggedInAndVerified
  accounts_deleteInvitation(accountName: String!, invitationId: String!): Boolean! @isLoggedInAndVerified

  accounts_acceptInvitation(accountName: String!, inviteToken: String!): Boolean! @isLoggedInAndVerified
  accounts_rejectInvitation(accountName: String!, inviteToken: String!): Boolean! @isLoggedInAndVerified

  accounts_removeAccountMembership(accountName: String!, memberId: ID!): Boolean! @isLoggedInAndVerified
  accounts_updateAccountMembership(accountName: String!, memberId: ID!, role: Github__com___kloudlite___api___apps___iam___types__Role!): Boolean! @isLoggedInAndVerified
}

extend type User @key(fields: "id") {
  id: ID! @external
  accounts: [AccountMembership!]
  accountInvitations(onlyPending: Boolean!): [Invitation!]
}
type Account @shareable {
  contactEmail: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: String!
  isActive: Boolean
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  logo: String
  markedForDeletion: Boolean
  metadata: Metadata @goField(name: "objectMeta")
  recordVersion: Int!
  targetNamespace: String
  updateTime: Date!
}

input AccountIn {
  contactEmail: String
  displayName: String!
  isActive: Boolean
  logo: String
  metadata: MetadataIn
}

type AccountMembership @shareable {
  accountName: String!
  role: Github__com___kloudlite___api___apps___iam___types__Role!
  userId: String!
}

input AccountMembershipIn {
  accountName: String!
  role: Github__com___kloudlite___api___apps___iam___types__Role!
  userId: String!
}

type Github__com___kloudlite___api___common__CreatedOrUpdatedBy @shareable {
  userEmail: String!
  userId: String!
  userName: String!
}

type Metadata @shareable {
  annotations: Map
  creationTimestamp: Date!
  deletionTimestamp: Date
  generation: Int!
  labels: Map
  name: String!
  namespace: String
}

type PageInfo @shareable {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

input MetadataIn {
  annotations: Map
  labels: Map
  name: String!
  namespace: String
}

enum Github__com___kloudlite___api___apps___iam___types__Role {
  account_admin
  account_member
  account_owner
  project_admin
  project_member
  resource_owner
}

extend schema @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key", "@shareable", "@external"])

directive @goField(
	forceResolver: Boolean
	name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
type Invitation @shareable {
  accepted: Boolean
  accountName: String!
  creationTime: Date!
  id: String!
  invitedBy: String!
  inviteToken: String!
  markedForDeletion: Boolean
  recordVersion: Int!
  rejected: Boolean
  updateTime: Date!
  userEmail: String
  userName: String
  userRole: Github__com___kloudlite___api___apps___iam___types__Role!
}

input InvitationIn {
  userEmail: String
  userName: String
  userRole: Github__com___kloudlite___api___apps___iam___types__Role!
}

scalar Any
scalar Json
scalar Map
scalar Date
