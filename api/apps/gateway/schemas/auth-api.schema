scalar Date
scalar Json
scalar ProviderDetail
scalar URL
scalar Any

type RemoteLogin {
    status: String!
    authHeader: String
}

type OAuthProviderStatus {
  provider: String!
  enabled: Boolean!
}

type Query {
  auth_me: User # public-access
  auth_findByEmail(email: String!): User # public-access # Deprecate
  oAuth_requestLogin(provider: String!, state: String): URL! # public-access
  auth_getRemoteLogin(loginId: String!, secret: String!): RemoteLogin # public-access
  auth_listOAuthProviders: [OAuthProviderStatus!]
}

type Mutation {
  auth_setRemoteAuthHeader(loginId: String!, authHeader:String):Boolean! # user-access
  auth_createRemoteLogin(secret: String):String! # public-access

  auth_login(email: String!, password: String!): Session # public-access
  auth_signup(name: String!, email: String!, password: String!): Session # public-access
  auth_logout: Boolean! # user-access
  auth_setMetadata(values: Json!): User! # user-access # Deprecate
  auth_clearMetadata: User! # user-access # Deprecate
  auth_verifyEmail(token: String!): Session! # public-access # TBD
  auth_resetPassword(token: String!, password: String!): Boolean! # user-access
  auth_requestResetPassword(email: String!): Boolean! # user-access
  auth_changeEmail(email: String!): Boolean! # user-access #Done
  auth_resendVerificationEmail: Boolean! # user-access #Done
  auth_changePassword(currentPassword: String!, newPassword: String!): Boolean! # user-access #Done
  oAuth_login(provider: String!, code: String!, state: String): Session! # public-access
  oAuth_addLogin(provider: String!, state: String!, code: String!): Boolean! # public-access
}

type Session {
  id: ID!
  userId: ID!
  userEmail: String!
  loginMethod: String!
  userVerified: Boolean!
}

type User @key(fields: "id") {
  id: ID!
  name: String!
  email: String!
  avatar: String
  invite: String!
  verified: Boolean!
  metadata: Json
  joined: Date!
  providerGitlab: ProviderDetail
  providerGithub: ProviderDetail
  providerGoogle: ProviderDetail
}
