directive @isLoggedIn on FIELD_DEFINITION
directive @isLoggedInAndVerified on FIELD_DEFINITION
directive @hasAccount on FIELD_DEFINITION

enum ConsoleResType {
    project
    app
    config
    secret
    router
    managed_service
    project_managed_service
    managed_resource
    environment
    vpn_device
}

type ConsoleCheckNameAvailabilityOutput @shareable {
    result: Boolean!
    suggestedNames: [String!]
}

input SearchProjects {
    text: MatchFilterIn
    isReady: MatchFilterIn
    markedForDeletion: MatchFilterIn
}

input SearchImagePullSecrets {
    text: MatchFilterIn
    isReady: MatchFilterIn
    markedForDeletion: MatchFilterIn
}

input SearchEnvironments {
    text: MatchFilterIn
    projectName: MatchFilterIn
    isReady: MatchFilterIn
    markedForDeletion: MatchFilterIn
}

input SearchApps {
    text: MatchFilterIn
    isReady: MatchFilterIn
    markedForDeletion: MatchFilterIn
}

input SearchConfigs {
    text: MatchFilterIn
    isReady: MatchFilterIn
    markedForDeletion: MatchFilterIn
}

input SearchSecrets {
    text: MatchFilterIn
    isReady: MatchFilterIn
    markedForDeletion: MatchFilterIn
}

input SearchRouters {
    text: MatchFilterIn
    isReady: MatchFilterIn
    markedForDeletion: MatchFilterIn
}

input SearchManagedResources {
    text: MatchFilterIn
    managedServiceName: MatchFilterIn
    isReady: MatchFilterIn
    markedForDeletion: MatchFilterIn
}

input SearchProjectManagedService {
    text: MatchFilterIn
    managedServiceName: MatchFilterIn
    isReady: MatchFilterIn
    markedForDeletion: MatchFilterIn
}

input CoreSearchVPNDevices {
    text: MatchFilterIn
    isReady: MatchFilterIn
    markedForDeletion: MatchFilterIn
}

type Query {
    core_checkNameAvailability(projectName: String, envName: String, resType: ConsoleResType!, name: String!): ConsoleCheckNameAvailabilityOutput! @isLoggedIn @hasAccount

    core_listProjects(search: SearchProjects, pq: CursorPaginationIn): ProjectPaginatedRecords @isLoggedInAndVerified @hasAccount
    core_getProject(name: String!): Project @isLoggedInAndVerified @hasAccount
    core_resyncProject(name: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_listEnvironments(projectName: String!, search: SearchEnvironments, pq: CursorPaginationIn): EnvironmentPaginatedRecords @isLoggedInAndVerified @hasAccount
    core_getEnvironment(projectName: String!, name: String!): Environment @isLoggedInAndVerified @hasAccount
    core_resyncEnvironment(projectName: String!, name: String!): Boolean! @isLoggedInAndVerified @hasAccount

    # get image pull secrets
    core_listImagePullSecrets(projectName: String!, envName: String!, search: SearchImagePullSecrets, pq: CursorPaginationIn): ImagePullSecretPaginatedRecords @isLoggedInAndVerified @hasAccount
    core_getImagePullSecret(projectName: String!, envName: String!, name: String!): ImagePullSecret @isLoggedInAndVerified @hasAccount
    core_resyncImagePullSecret(projectName: String!, envName: String!, name: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_listApps(projectName: String!, envName: String!, search: SearchApps, pq: CursorPaginationIn): AppPaginatedRecords @isLoggedInAndVerified @hasAccount
    core_getApp(projectName: String!, envName: String!, name: String!): App @isLoggedInAndVerified @hasAccount
    core_resyncApp(projectName: String!, envName: String!, name: String!): Boolean! @isLoggedInAndVerified @hasAccount
    core_restartApp(projectName: String!, envName: String!, appName: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_getConfigValues(projectName: String!, envName: String!, queries: [ConfigKeyRefIn]): [ConfigKeyValueRef!] @isLoggedInAndVerified @hasAccount
    core_listConfigs(projectName: String!, envName: String!, search: SearchConfigs, pq: CursorPaginationIn): ConfigPaginatedRecords @isLoggedInAndVerified @hasAccount
    core_getConfig(projectName: String!, envName: String!, name: String!): Config @isLoggedInAndVerified @hasAccount
    core_resyncConfig(projectName: String!, envName: String!, name: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_getSecretValues(projectName: String!, envName: String!, queries: [SecretKeyRefIn!]): [SecretKeyValueRef!] @isLoggedInAndVerified @hasAccount
    core_listSecrets(projectName: String!, envName: String!, search: SearchSecrets, pq: CursorPaginationIn): SecretPaginatedRecords @isLoggedInAndVerified @hasAccount
    core_getSecret(projectName: String!, envName: String!, name: String!): Secret @isLoggedInAndVerified @hasAccount
    core_resyncSecret(projectName: String!, envName: String!, name: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_listRouters(projectName: String!, envName: String!, search: SearchRouters, pq: CursorPaginationIn): RouterPaginatedRecords @isLoggedInAndVerified @hasAccount
    core_getRouter(projectName: String!, envName: String!, name: String!): Router @isLoggedInAndVerified @hasAccount
    core_resyncRouter(projectName: String!, envName: String!, name: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_getManagedResouceOutputKeys(projectName: String!, envName: String!, name: String!): [String!]! @isLoggedInAndVerified @hasAccount
    core_getManagedResouceOutputKeyValues(projectName: String!, envName: String!, keyrefs: [ManagedResourceKeyRefIn]): [ManagedResourceKeyValueRef!]! @isLoggedInAndVerified @hasAccount
    core_listManagedResources(projectName: String!, envName: String!, search: SearchManagedResources, pq: CursorPaginationIn): ManagedResourcePaginatedRecords @isLoggedInAndVerified @hasAccount
    core_getManagedResource(projectName: String!, envName: String!, name: String!): ManagedResource @isLoggedInAndVerified @hasAccount
    core_resyncManagedResource(projectName: String!, envName: String!, name: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_listProjectManagedServices(projectName: String!, search: SearchProjectManagedService, pq: CursorPaginationIn): ProjectManagedServicePaginatedRecords @isLoggedInAndVerified @hasAccount
    core_getProjectManagedService(projectName: String!,  name: String!): ProjectManagedService @isLoggedInAndVerified @hasAccount
    core_resyncProjectManagedService(projectName: String!, name: String!): Boolean! @isLoggedInAndVerified @hasAccount
    core_restartProjectManagedService(projectName: String!, name: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_listVPNDevices(search: CoreSearchVPNDevices, pq: CursorPaginationIn): ConsoleVPNDevicePaginatedRecords @isLoggedInAndVerified @hasAccount
    core_listVPNDevicesForUser: [ConsoleVPNDevice!] @isLoggedInAndVerified @hasAccount
    core_getVPNDevice(name: String!): ConsoleVPNDevice @isLoggedInAndVerified @hasAccount
}

type Mutation {
    core_createProject(project: ProjectIn!): Project @isLoggedInAndVerified @hasAccount
    core_updateProject(project: ProjectIn!): Project @isLoggedInAndVerified @hasAccount
    core_deleteProject(name: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_createEnvironment(projectName: String!, env: EnvironmentIn!): Environment @isLoggedInAndVerified @hasAccount
    core_updateEnvironment(projectName: String!, env: EnvironmentIn!): Environment @isLoggedInAndVerified @hasAccount
    core_deleteEnvironment(projectName: String!, envName: String!): Boolean! @isLoggedInAndVerified @hasAccount
    core_cloneEnvironment(projectName: String!, sourceEnvName: String!, destinationEnvName: String!, displayName: String!, environmentRoutingMode: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingMode!): Environment @isLoggedInAndVerified @hasAccount

    # image pull secrets
    core_createImagePullSecret(projectName: String!, envName: String!, imagePullSecretIn: ImagePullSecretIn!): ImagePullSecret @isLoggedInAndVerified @hasAccount
    core_deleteImagePullSecret(projectName: String!, envName: String!, secretName: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_createApp(projectName: String!, envName: String!, app: AppIn!): App @isLoggedInAndVerified @hasAccount
    core_updateApp(projectName: String!, envName: String!, app: AppIn!): App @isLoggedInAndVerified @hasAccount
    core_deleteApp(projectName: String!, envName: String!, appName: String!): Boolean! @isLoggedInAndVerified @hasAccount
    core_interceptApp(projectName: String!, envName: String!, appname: String!, deviceName: String!, intercept: Boolean!): Boolean! @isLoggedInAndVerified @hasAccount

    core_createConfig(projectName: String!, envName: String!, config: ConfigIn!): Config @isLoggedInAndVerified @hasAccount
    core_updateConfig(projectName: String!, envName: String!, config: ConfigIn!): Config @isLoggedInAndVerified @hasAccount
    core_deleteConfig(projectName: String!, envName: String!, configName: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_createSecret(projectName: String!, envName: String!, secret: SecretIn!): Secret @isLoggedInAndVerified @hasAccount
    core_updateSecret(projectName: String!, envName: String!, secret: SecretIn!): Secret @isLoggedInAndVerified @hasAccount
    core_deleteSecret(projectName: String!, envName: String!, secretName: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_createRouter(projectName: String!, envName: String!, router: RouterIn!): Router @isLoggedInAndVerified @hasAccount
    core_updateRouter(projectName: String!, envName: String!, router: RouterIn!): Router @isLoggedInAndVerified @hasAccount
    core_deleteRouter(projectName: String!, envName: String!, routerName: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_createManagedResource(projectName: String!, envName: String!, mres: ManagedResourceIn!): ManagedResource @isLoggedInAndVerified @hasAccount
    core_updateManagedResource(projectName: String!, envName: String!, mres: ManagedResourceIn!): ManagedResource @isLoggedInAndVerified @hasAccount
    core_deleteManagedResource(projectName: String!, envName: String!, mresName: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_createProjectManagedService(projectName: String!, pmsvc: ProjectManagedServiceIn!): ProjectManagedService @isLoggedInAndVerified @hasAccount
    core_updateProjectManagedService(projectName: String!, pmsvc: ProjectManagedServiceIn!): ProjectManagedService @isLoggedInAndVerified @hasAccount
    core_deleteProjectManagedService(projectName: String!, pmsvcName: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_createVPNDevice(vpnDevice: ConsoleVPNDeviceIn!): ConsoleVPNDevice @isLoggedInAndVerified @hasAccount
    core_updateVPNDevice(vpnDevice: ConsoleVPNDeviceIn!): ConsoleVPNDevice @isLoggedInAndVerified @hasAccount

    core_updateVPNDevicePorts(deviceName: String!,ports: [PortIn!]!): Boolean! @isLoggedInAndVerified @hasAccount
    core_updateVPNDeviceEnv(deviceName: String!,projectName: String!, envName: String!): Boolean! @isLoggedInAndVerified @hasAccount
    core_updateVpnDeviceNs(deviceName: String!,ns: String!): Boolean! @isLoggedInAndVerified @hasAccount
    core_updateVpnClusterName(deviceName: String!,clusterName: String!): Boolean! @isLoggedInAndVerified @hasAccount

    core_deleteVPNDevice(deviceName: String!): Boolean! @isLoggedInAndVerified @hasAccount
}

type App @shareable {
  accountName: String!
  apiVersion: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  enabled: Boolean
  environmentName: String!
  id: String!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata @goField(name: "objectMeta")
  projectName: String!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__AppSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type AppEdge @shareable {
  cursor: String!
  node: App!
}

type AppPaginatedRecords @shareable {
  edges: [AppEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input AppIn {
  apiVersion: String
  displayName: String!
  enabled: Boolean
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__AppSpecIn!
}

type Github__com___kloudlite___api___common__CreatedOrUpdatedBy @shareable {
  userEmail: String!
  userId: String!
  userName: String!
}

type Github__com___kloudlite___api___pkg___types__EncodedString @shareable {
  encoding: String!
  value: String!
}

type Github__com___kloudlite___api___pkg___types__SyncStatus @shareable {
  action: Github__com___kloudlite___api___pkg___types__SyncAction!
  error: String
  lastSyncedAt: Date
  recordVersion: Int!
  state: Github__com___kloudlite___api___pkg___types__SyncState!
  syncScheduledAt: Date
}

type Github__com___kloudlite___operator___apis___crds___v1__AppContainer @shareable {
  args: [String!]
  command: [String!]
  env: [Github__com___kloudlite___operator___apis___crds___v1__ContainerEnv!]
  envFrom: [Github__com___kloudlite___operator___apis___crds___v1__EnvFrom!]
  image: String!
  imagePullPolicy: String
  livenessProbe: Github__com___kloudlite___operator___apis___crds___v1__Probe
  name: String!
  readinessProbe: Github__com___kloudlite___operator___apis___crds___v1__Probe
  resourceCpu: Github__com___kloudlite___operator___apis___crds___v1__ContainerResource
  resourceMemory: Github__com___kloudlite___operator___apis___crds___v1__ContainerResource
  volumes: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolume!]
}

type Github__com___kloudlite___operator___apis___crds___v1__AppSpec @shareable {
  containers: [Github__com___kloudlite___operator___apis___crds___v1__AppContainer!]!
  displayName: String
  freeze: Boolean
  hpa: Github__com___kloudlite___operator___apis___crds___v1__HPA
  intercept: Github__com___kloudlite___operator___apis___crds___v1__Intercept
  nodeSelector: Map
  region: String
  replicas: Int
  serviceAccount: String
  services: [Github__com___kloudlite___operator___apis___crds___v1__AppSvc!]
  tolerations: [K8s__io___api___core___v1__Toleration!]
}

type Github__com___kloudlite___operator___apis___crds___v1__AppSvc @shareable {
  name: String
  port: Int!
  targetPort: Int
  type: String
}

type Github__com___kloudlite___operator___apis___crds___v1__BasicAuth @shareable {
  enabled: Boolean!
  secretName: String
  username: String
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerEnv @shareable {
  key: String!
  optional: Boolean
  refKey: String
  refName: String
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret
  value: String
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerResource @shareable {
  max: String
  min: String
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerVolume @shareable {
  items: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItem!]
  mountPath: String!
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItem @shareable {
  fileName: String
  key: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__Cors @shareable {
  allowCredentials: Boolean
  enabled: Boolean
  origins: [String!]
}

type Github__com___kloudlite___operator___apis___crds___v1__EnvFrom @shareable {
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

type Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRouting @shareable {
  mode: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingMode
  privateIngressClass: String
  publicIngressClass: String
}

type Github__com___kloudlite___operator___apis___crds___v1__EnvironmentSpec @shareable {
  projectName: String!
  routing: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRouting
  targetNamespace: String
}

type Github__com___kloudlite___operator___apis___crds___v1__HPA @shareable {
  enabled: Boolean!
  maxReplicas: Int
  minReplicas: Int
  thresholdCpu: Int
  thresholdMemory: Int
}

type Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbe @shareable {
  httpHeaders: Map
  path: String!
  port: Int!
}

type Github__com___kloudlite___operator___apis___crds___v1__Https @shareable {
  clusterIssuer: String
  enabled: Boolean!
  forceRedirect: Boolean
}

type Github__com___kloudlite___operator___apis___crds___v1__Intercept @shareable {
  enabled: Boolean!
  toDevice: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__ManagedResourceSpec @shareable {
  resourceName: String
  resourceTemplate: Github__com___kloudlite___operator___apis___crds___v1__MresResourceTemplate!
}

type Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpec @shareable {
  nodeSelector: Map
  serviceTemplate: Github__com___kloudlite___operator___apis___crds___v1__ServiceTemplate!
  tolerations: [K8s__io___api___core___v1__Toleration!]
}

type Github__com___kloudlite___operator___apis___crds___v1__MresResourceTemplate @shareable {
  apiVersion: String!
  kind: String!
  msvcRef: Github__com___kloudlite___operator___apis___crds___v1__MsvcNamedRef!
  spec: Map!
}

type Github__com___kloudlite___operator___apis___crds___v1__MsvcNamedRef @shareable {
  apiVersion: String!
  kind: String!
  name: String!
  namespace: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__Probe @shareable {
  failureThreshold: Int
  httpGet: Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbe
  initialDelay: Int
  interval: Int
  shell: Github__com___kloudlite___operator___apis___crds___v1__ShellProbe
  tcp: Github__com___kloudlite___operator___apis___crds___v1__TcpProbe
  type: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__ProjectManagedServiceSpec @shareable {
  msvcSpec: Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpec!
  targetNamespace: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__ProjectSpec @shareable {
  targetNamespace: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__RateLimit @shareable {
  connections: Int
  enabled: Boolean
  rpm: Int
  rps: Int
}

type Github__com___kloudlite___operator___apis___crds___v1__Route @shareable {
  app: String
  lambda: String
  path: String!
  port: Int!
  rewrite: Boolean
}

type Github__com___kloudlite___operator___apis___crds___v1__RouterSpec @shareable {
  backendProtocol: String
  basicAuth: Github__com___kloudlite___operator___apis___crds___v1__BasicAuth
  cors: Github__com___kloudlite___operator___apis___crds___v1__Cors
  domains: [String!]!
  https: Github__com___kloudlite___operator___apis___crds___v1__Https
  ingressClass: String
  maxBodySizeInMB: Int
  rateLimit: Github__com___kloudlite___operator___apis___crds___v1__RateLimit
  routes: [Github__com___kloudlite___operator___apis___crds___v1__Route!]
}

type Github__com___kloudlite___operator___apis___crds___v1__ServiceTemplate @shareable {
  apiVersion: String!
  kind: String!
  spec: Map!
}

type Github__com___kloudlite___operator___apis___crds___v1__ShellProbe @shareable {
  command: [String!]
}

type Github__com___kloudlite___operator___apis___crds___v1__TcpProbe @shareable {
  port: Int!
}

type Github__com___kloudlite___operator___apis___wireguard___v1__CNameRecord @shareable {
  host: String
  target: String
}

type Github__com___kloudlite___operator___apis___wireguard___v1__DeviceSpec @shareable {
  activeNamespace: String
  cnameRecords: [Github__com___kloudlite___operator___apis___wireguard___v1__CNameRecord!]
  disabled: Boolean
  nodeSelector: Map
  noExternalService: Boolean
  ports: [Github__com___kloudlite___operator___apis___wireguard___v1__Port!]
}

type Github__com___kloudlite___operator___apis___wireguard___v1__Port @shareable {
  port: Int
  targetPort: Int
}

type Github__com___kloudlite___operator___pkg___operator__Check @shareable {
  generation: Int
  message: String
  status: Boolean!
}

type Github__com___kloudlite___operator___pkg___operator__ResourceRef @shareable {
  apiVersion: String!
  kind: String!
  name: String!
  namespace: String!
}

type Github__com___kloudlite___operator___pkg___operator__Status @shareable {
  checks: Map
  isReady: Boolean!
  lastReadyGeneration: Int
  lastReconcileTime: Date
  message: Github__com___kloudlite___operator___pkg___raw____json__RawJson
  resources: [Github__com___kloudlite___operator___pkg___operator__ResourceRef!]
}

type Github__com___kloudlite___operator___pkg___raw____json__RawJson @shareable {
  RawMessage: Any
}

type K8s__io___api___core___v1__Secret @shareable {
  apiVersion: String
  data: Map
  immutable: Boolean
  kind: String
  metadata: Metadata @goField(name: "objectMeta")
  stringData: Map
  type: K8s__io___api___core___v1__SecretType
}

type K8s__io___api___core___v1__Toleration @shareable {
  effect: K8s__io___api___core___v1__TaintEffect
  key: String
  operator: K8s__io___api___core___v1__TolerationOperator
  tolerationSeconds: Int
  value: String
}

type Metadata @shareable {
  annotations: Map
  creationTimestamp: Date!
  deletionTimestamp: Date
  generation: Int!
  labels: Map
  name: String!
  namespace: String
}

type PageInfo @shareable {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

input Github__com___kloudlite___operator___apis___crds___v1__AppContainerIn {
  args: [String!]
  command: [String!]
  env: [Github__com___kloudlite___operator___apis___crds___v1__ContainerEnvIn!]
  envFrom: [Github__com___kloudlite___operator___apis___crds___v1__EnvFromIn!]
  image: String!
  imagePullPolicy: String
  livenessProbe: Github__com___kloudlite___operator___apis___crds___v1__ProbeIn
  name: String!
  readinessProbe: Github__com___kloudlite___operator___apis___crds___v1__ProbeIn
  resourceCpu: Github__com___kloudlite___operator___apis___crds___v1__ContainerResourceIn
  resourceMemory: Github__com___kloudlite___operator___apis___crds___v1__ContainerResourceIn
  volumes: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeIn!]
}

input Github__com___kloudlite___operator___apis___crds___v1__AppSpecIn {
  containers: [Github__com___kloudlite___operator___apis___crds___v1__AppContainerIn!]!
  displayName: String
  freeze: Boolean
  hpa: Github__com___kloudlite___operator___apis___crds___v1__HPAIn
  intercept: Github__com___kloudlite___operator___apis___crds___v1__InterceptIn
  nodeSelector: Map
  region: String
  replicas: Int
  serviceAccount: String
  services: [Github__com___kloudlite___operator___apis___crds___v1__AppSvcIn!]
  tolerations: [K8s__io___api___core___v1__TolerationIn!]
}

input Github__com___kloudlite___operator___apis___crds___v1__AppSvcIn {
  name: String
  port: Int!
  targetPort: Int
  type: String
}

input Github__com___kloudlite___operator___apis___crds___v1__BasicAuthIn {
  enabled: Boolean!
  secretName: String
  username: String
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerEnvIn {
  key: String!
  optional: Boolean
  refKey: String
  refName: String
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret
  value: String
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerResourceIn {
  max: String
  min: String
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeIn {
  items: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItemIn!]
  mountPath: String!
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItemIn {
  fileName: String
  key: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__CorsIn {
  allowCredentials: Boolean
  enabled: Boolean
  origins: [String!]
}

input Github__com___kloudlite___operator___apis___crds___v1__EnvFromIn {
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

input Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingIn {
  mode: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingMode
}

input Github__com___kloudlite___operator___apis___crds___v1__EnvironmentSpecIn {
  projectName: String!
  routing: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingIn
  targetNamespace: String
}

input Github__com___kloudlite___operator___apis___crds___v1__HPAIn {
  enabled: Boolean!
  maxReplicas: Int
  minReplicas: Int
  thresholdCpu: Int
  thresholdMemory: Int
}

input Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbeIn {
  httpHeaders: Map
  path: String!
  port: Int!
}

input Github__com___kloudlite___operator___apis___crds___v1__HttpsIn {
  clusterIssuer: String
  enabled: Boolean!
  forceRedirect: Boolean
}

input Github__com___kloudlite___operator___apis___crds___v1__InterceptIn {
  enabled: Boolean!
  toDevice: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__ManagedResourceSpecIn {
  resourceName: String
  resourceTemplate: Github__com___kloudlite___operator___apis___crds___v1__MresResourceTemplateIn!
}

input Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpecIn {
  nodeSelector: Map
  serviceTemplate: Github__com___kloudlite___operator___apis___crds___v1__ServiceTemplateIn!
  tolerations: [K8s__io___api___core___v1__TolerationIn!]
}

input Github__com___kloudlite___operator___apis___crds___v1__MresResourceTemplateIn {
  apiVersion: String!
  kind: String!
  msvcRef: Github__com___kloudlite___operator___apis___crds___v1__MsvcNamedRefIn!
  spec: Map!
}

input Github__com___kloudlite___operator___apis___crds___v1__MsvcNamedRefIn {
  apiVersion: String!
  kind: String!
  name: String!
  namespace: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__ProbeIn {
  failureThreshold: Int
  httpGet: Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbeIn
  initialDelay: Int
  interval: Int
  shell: Github__com___kloudlite___operator___apis___crds___v1__ShellProbeIn
  tcp: Github__com___kloudlite___operator___apis___crds___v1__TcpProbeIn
  type: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__ProjectManagedServiceSpecIn {
  msvcSpec: Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpecIn!
  targetNamespace: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__ProjectSpecIn {
  targetNamespace: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__RateLimitIn {
  connections: Int
  enabled: Boolean
  rpm: Int
  rps: Int
}

input Github__com___kloudlite___operator___apis___crds___v1__RouteIn {
  app: String
  lambda: String
  path: String!
  port: Int!
  rewrite: Boolean
}

input Github__com___kloudlite___operator___apis___crds___v1__RouterSpecIn {
  backendProtocol: String
  basicAuth: Github__com___kloudlite___operator___apis___crds___v1__BasicAuthIn
  cors: Github__com___kloudlite___operator___apis___crds___v1__CorsIn
  domains: [String!]!
  https: Github__com___kloudlite___operator___apis___crds___v1__HttpsIn
  ingressClass: String
  maxBodySizeInMB: Int
  rateLimit: Github__com___kloudlite___operator___apis___crds___v1__RateLimitIn
  routes: [Github__com___kloudlite___operator___apis___crds___v1__RouteIn!]
}

input Github__com___kloudlite___operator___apis___crds___v1__ServiceTemplateIn {
  apiVersion: String!
  kind: String!
  spec: Map!
}

input Github__com___kloudlite___operator___apis___crds___v1__ShellProbeIn {
  command: [String!]
}

input Github__com___kloudlite___operator___apis___crds___v1__TcpProbeIn {
  port: Int!
}

input Github__com___kloudlite___operator___apis___wireguard___v1__CNameRecordIn {
  host: String
  target: String
}

input Github__com___kloudlite___operator___apis___wireguard___v1__DeviceSpecIn {
  activeNamespace: String
  cnameRecords: [Github__com___kloudlite___operator___apis___wireguard___v1__CNameRecordIn!]
  ports: [Github__com___kloudlite___operator___apis___wireguard___v1__PortIn!]
}

input Github__com___kloudlite___operator___apis___wireguard___v1__PortIn {
  port: Int
  targetPort: Int
}

input K8s__io___api___core___v1__TolerationIn {
  effect: K8s__io___api___core___v1__TaintEffect
  key: String
  operator: K8s__io___api___core___v1__TolerationOperator
  tolerationSeconds: Int
  value: String
}

input MetadataIn {
  annotations: Map
  labels: Map
  name: String!
  namespace: String
}

enum Github__com___kloudlite___api___apps___console___internal___entities__PullSecretFormat {
  dockerConfigJson
  params
}

enum Github__com___kloudlite___api___pkg___types__SyncAction {
  APPLY
  DELETE
}

enum Github__com___kloudlite___api___pkg___types__SyncState {
  APPLIED_AT_AGENT
  DELETED_AT_AGENT
  DELETING_AT_AGENT
  ERRORED_AT_AGENT
  IDLE
  IN_QUEUE
  UPDATED_AT_AGENT
}

enum Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret {
  config
  secret
}

enum Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingMode {
  private
  public
}

enum K8s__io___api___core___v1__SecretType {
  bootstrap__kubernetes__io___token
  kubernetes__io___basic____auth
  kubernetes__io___dockercfg
  kubernetes__io___dockerconfigjson
  kubernetes__io___service____account____token
  kubernetes__io___ssh____auth
  kubernetes__io___tls
  Opaque
}

enum K8s__io___api___core___v1__TaintEffect {
  NoExecute
  NoSchedule
  PreferNoSchedule
}

enum K8s__io___api___core___v1__TolerationOperator {
  Equal
  Exists
}

type Config @shareable {
  accountName: String!
  apiVersion: String
  binaryData: Map
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  data: Map
  displayName: String!
  environmentName: String!
  id: String!
  immutable: Boolean
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata @goField(name: "objectMeta")
  projectName: String!
  recordVersion: Int!
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type ConfigEdge @shareable {
  cursor: String!
  node: Config!
}

type ConfigPaginatedRecords @shareable {
  edges: [ConfigEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ConfigIn {
  apiVersion: String
  binaryData: Map
  data: Map
  displayName: String!
  immutable: Boolean
  kind: String
  metadata: MetadataIn
}

type ConfigKeyRef @shareable {
  configName: String!
  key: String!
}

input ConfigKeyRefIn {
  configName: String!
  key: String!
}

type ConfigKeyValueRef @shareable {
  configName: String!
  key: String!
  value: String!
}

input ConfigKeyValueRefIn {
  configName: String!
  key: String!
  value: String!
}

type ConsoleVPNDevice @shareable {
  accountName: String!
  apiVersion: String
  clusterName: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  environmentName: String
  id: String!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  linkedClusters: [String!]
  markedForDeletion: Boolean
  metadata: Metadata @goField(name: "objectMeta")
  projectName: String
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___wireguard___v1__DeviceSpec
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
  wireguardConfig: Github__com___kloudlite___api___pkg___types__EncodedString
}

type ConsoleVPNDeviceEdge @shareable {
  cursor: String!
  node: ConsoleVPNDevice!
}

type ConsoleVPNDevicePaginatedRecords @shareable {
  edges: [ConsoleVPNDeviceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ConsoleVPNDeviceIn {
  apiVersion: String
  clusterName: String
  displayName: String!
  environmentName: String
  kind: String
  metadata: MetadataIn
  projectName: String
  spec: Github__com___kloudlite___operator___apis___wireguard___v1__DeviceSpecIn
}

type CursorPagination @shareable {
  after: String
  before: String
  first: Int
  last: Int
  orderBy: String
  sortDirection: CursorPaginationSortDirection
}

input CursorPaginationIn {
  after: String
  before: String
  first: Int
  last: Int
  orderBy: String = "_id"
  sortDirection: CursorPaginationSortDirection = "ASC"
}

enum CursorPaginationSortDirection {
  ASC
  DESC
}

extend schema @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key", "@shareable", "@external"])

directive @goField(
	forceResolver: Boolean
	name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
type Environment @shareable {
  accountName: String!
  apiVersion: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: String!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata @goField(name: "objectMeta")
  projectName: String!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentSpec
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type EnvironmentEdge @shareable {
  cursor: String!
  node: Environment!
}

type EnvironmentPaginatedRecords @shareable {
  edges: [EnvironmentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input EnvironmentIn {
  apiVersion: String
  displayName: String!
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentSpecIn
}

type ImagePullSecret @shareable {
  accountName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  dockerConfigJson: String
  environmentName: String!
  format: Github__com___kloudlite___api___apps___console___internal___entities__PullSecretFormat!
  id: String!
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata! @goField(name: "objectMeta")
  projectName: String!
  recordVersion: Int!
  registryPassword: String
  registryURL: String
  registryUsername: String
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type ImagePullSecretEdge @shareable {
  cursor: String!
  node: ImagePullSecret!
}

type ImagePullSecretPaginatedRecords @shareable {
  edges: [ImagePullSecretEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ImagePullSecretIn {
  displayName: String!
  dockerConfigJson: String
  format: Github__com___kloudlite___api___apps___console___internal___entities__PullSecretFormat!
  metadata: MetadataIn!
  registryPassword: String
  registryURL: String
  registryUsername: String
}

type ManagedResource @shareable {
  accountName: String!
  apiVersion: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  enabled: Boolean
  environmentName: String!
  id: String!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata @goField(name: "objectMeta")
  projectName: String!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__ManagedResourceSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncedOutputSecretRef: K8s__io___api___core___v1__Secret
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type ManagedResourceEdge @shareable {
  cursor: String!
  node: ManagedResource!
}

type ManagedResourcePaginatedRecords @shareable {
  edges: [ManagedResourceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ManagedResourceIn {
  apiVersion: String
  displayName: String!
  enabled: Boolean
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__ManagedResourceSpecIn!
}

type ManagedResourceKeyRef @shareable {
  key: String!
  mresName: String!
}

input ManagedResourceKeyRefIn {
  key: String!
  mresName: String!
}

type ManagedResourceKeyValueRef @shareable {
  key: String!
  mresName: String!
  value: String!
}

input ManagedResourceKeyValueRefIn {
  key: String!
  mresName: String!
  value: String!
}

type MatchFilter @shareable {
  array: [Any!]
  exact: Any
  matchType: MatchFilterMatchType!
  regex: String
}

input MatchFilterIn {
  array: [Any!]
  exact: Any
  matchType: MatchFilterMatchType!
  regex: String
}

enum MatchFilterMatchType {
  array
  exact
  regex
}

type Port @shareable {
  port: Int
  targetPort: Int
}

input PortIn {
  port: Int
  targetPort: Int
}

type Project @shareable {
  accountName: String!
  apiVersion: String
  clusterName: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: String!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata @goField(name: "objectMeta")
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__ProjectSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type ProjectEdge @shareable {
  cursor: String!
  node: Project!
}

type ProjectPaginatedRecords @shareable {
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ProjectIn {
  apiVersion: String
  clusterName: String
  displayName: String!
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__ProjectSpecIn!
}

type ProjectManagedService @shareable {
  accountName: String!
  apiVersion: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: String!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata @goField(name: "objectMeta")
  projectName: String!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__ProjectManagedServiceSpec
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type ProjectManagedServiceEdge @shareable {
  cursor: String!
  node: ProjectManagedService!
}

type ProjectManagedServicePaginatedRecords @shareable {
  edges: [ProjectManagedServiceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ProjectManagedServiceIn {
  apiVersion: String
  displayName: String!
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__ProjectManagedServiceSpecIn
}

type Router @shareable {
  accountName: String!
  apiVersion: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  enabled: Boolean
  environmentName: String!
  id: String!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata @goField(name: "objectMeta")
  projectName: String!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__RouterSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type RouterEdge @shareable {
  cursor: String!
  node: Router!
}

type RouterPaginatedRecords @shareable {
  edges: [RouterEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input RouterIn {
  apiVersion: String
  displayName: String!
  enabled: Boolean
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__RouterSpecIn!
}

scalar Any
scalar Json
scalar Map
scalar Date
type Secret @shareable {
  accountName: String!
  apiVersion: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  data: Map
  displayName: String!
  environmentName: String!
  id: String!
  immutable: Boolean
  isReadyOnly: Boolean!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata @goField(name: "objectMeta")
  projectName: String!
  recordVersion: Int!
  stringData: Map
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  type: K8s__io___api___core___v1__SecretType
  updateTime: Date!
}

type SecretEdge @shareable {
  cursor: String!
  node: Secret!
}

type SecretPaginatedRecords @shareable {
  edges: [SecretEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input SecretIn {
  apiVersion: String
  data: Map
  displayName: String!
  immutable: Boolean
  kind: String
  metadata: MetadataIn
  stringData: Map
  type: K8s__io___api___core___v1__SecretType
}

type SecretKeyRef @shareable {
  key: String!
  secretName: String!
}

input SecretKeyRefIn {
  key: String!
  secretName: String!
}

type SecretKeyValueRef @shareable {
  key: String!
  secretName: String!
  value: String!
}

input SecretKeyValueRefIn {
  key: String!
  secretName: String!
  value: String!
}

