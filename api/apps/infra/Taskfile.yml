version: "3"

dotenv:
  - .secrets/env

vars:
  ImagePrefix: "ghcr.io/kloudlite/platform/apis"

tasks:
  gql:
    dir: ./internal/app
    cmds:
      - go run -tags dynamic github.com/99designs/gqlgen generate
      - rm ./graph/scalars.resolvers.go

  build:
    env:
      CGO_ENABLED: 0
    preconditions:
      - sh: '[ -n "{{.Out}}" ]'
        msg: var Out must have a value
    cmds:
      - go build -ldflags="-s -w" -o {{.Out}}
      - upx {{.Out}}

  k8s-schema:
    cmds:
      - mkdir -p "./internal/app/graph/crd-to-gql"
      - go run ../../cmd/crd-to-gql --dev
          --output "./internal/app/graph/crd-to-gql"
          --crd CloudProvider=cloudproviders.infra.kloudlite.io
          --crd Edge=edges.infra.kloudlite.io
          --crd NodePool=nodepools.infra.kloudlite.io
          --crd WorkerNode=workernodes.infra.kloudlite.io
          --crd NodePool=nodepools.infra.kloudlite.io
          --crd MasterNode=masternodes.cmgr.kloudlite.io
          --crd Secret=secrets.crds.kloudlite.io
          --crd Cluster=clusters.cmgr.kloudlite.io
          --crd BYOCCluster=byocs.clusters.kloudlite.io
          # --crd Account=accounts.wg.kloudlite.io

  run:
    # sources:
    #   - ./internal/**/*.go
    #   - ./main.go
    interactive: true
    cmds:
      # - go run -tags dynamic main.go --dev
      - nodemon -e go --signal SIGKILL --exec 'go run main.go --dev || exit 1'
      # - CGO_BUILD=0 go build -o /tmp/infra
      # - /tmp/infra --dev


  docker-build:
    vars:
      APP: infra
      IMAGE: registry.kloudlite.io/kloudlite/{{.EnvName}}/{{.APP}}:{{.Tag}}
    preconditions:
      - sh: '[[ -n "{{.Tag}}" ]]'
        msg: 'var Tag must have a value'
    cmds:
      - docker buildx build -f ./Dockerfile -t {{.IMAGE}} . --build-arg APP={{.APP}} --platform linux/amd64  --build-context project-root=../..
      - docker push {{.IMAGE}}


  local-build:
    preconditions:
      - sh: '[ -n "{{.Tag}}" ]'
        msg: 'var Tag must have a value'
    vars:
      APP: infra
      IMAGE: "{{.ImagePrefix}}/{{.APP}}:{{.Tag}}"
    silent: true
    cmds:
      - |+
        lineNumbers=$(cat Dockerfile | grep -i '^FROM' -n | tail +2 | awk -F: '{print $1}')

        startLineNo=$(echo "$lineNumbers" | head -n+1)
        finalLineNo=$(echo "$lineNumbers" | tail -1)

        tDir=$(mktemp -d)

        nDockerfile=$(cat Dockerfile | tail --lines=+$startLineNo | grep -i --invert-match 'from=base')
        echo "$nDockerfile" | sed "1 i # syntax=docker/dockerfile:1.4" > $tDir/Dockerfile.base

        cat $tDir/Dockerfile.base | sed "4 i COPY --from=local-builder ./{{.APP}} ./{{.APP}}" > $tDir/Dockerfile
        cat $tDir/Dockerfile
        
        echo "building application ..."
        task build Out=$tDir/{{.APP}}

        docker buildx build -f $tDir/Dockerfile -t {{.IMAGE}} . --build-context local-builder=${tDir}
        docker push {{.IMAGE}}
        rm -rf $tDir
