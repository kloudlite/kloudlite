version: "3"

dotenv:
  - .secrets/env

vars:
  ImagePrefix: "ghcr.io/kloudlite/platform/apis"

tasks:
  gql:
    dir: ./internal/app
    cmds:
      - go run -tags dynamic github.com/99designs/gqlgen generate
      # - rm ./graph/scalars.resolvers.go

  build:
    env:
      CGO_ENABLED: 0
    preconditions:
      - sh: '[ -n "{{.Out}}" ]'
        msg: var Out must have a value
    cmds:
      - go build -ldflags="-s -w" -o {{.Out}}
      - upx {{.Out}}

  k8s-schema:
    cmds:
      - mkdir -p "./internal/app/_struct-to-graphql"
      - go run ../../cmd/struct-to-graphql
          --struct kloudlite.io/apps/infra/internal/entities.Cluster
          --struct kloudlite.io/apps/infra/internal/entities.BYOCCluster
          --struct kloudlite.io/apps/infra/internal/entities.Node
          --struct kloudlite.io/apps/infra/internal/entities.NodePool
          --struct kloudlite.io/apps/infra/internal/entities.CloudProviderSecret
          --struct kloudlite.io/pkg/repos.MatchFilter
          --struct kloudlite.io/pkg/repos.CursorPagination
        > ./internal/app/_struct-to-graphql/main.go
      - |+
        pushd ./internal/app/_struct-to-graphql
        go run main.go --dev --out-dir ../graph/struct-to-graphql --with-pagination Cluster,BYOCCluster,Node,NodePool,CloudProviderSecret
        popd
      - rm -rf ./internal/app/_struct-to-graphql

  run:
    # sources:
    #   - ./internal/**/*.go
    #   - ./main.go
    interactive: true
    cmds:
      # - go run -tags dynamic main.go --dev
      - fwatcher --exec 'go run main.go --dev' --ext '.go'
      # - nodemon -e go --signal SIGKILL --exec 'go run main.go --dev || exit 1'
      # - CGO_BUILD=0 go build -o /tmp/infra
      # - /tmp/infra --dev


  docker-build:
    vars:
      APP: infra
      IMAGE: registry.kloudlite.io/kloudlite/{{.EnvName}}/{{.APP}}:{{.Tag}}
    preconditions:
      - sh: '[[ -n "{{.Tag}}" ]]'
        msg: 'var Tag must have a value'
    cmds:
      - docker buildx build -f ./Dockerfile -t {{.IMAGE}} . --build-arg APP={{.APP}} --platform linux/amd64  --build-context project-root=../..
      - docker push {{.IMAGE}}


  local-build:
    preconditions:
      - sh: '[ -n "{{.Tag}}" ]'
        msg: 'var Tag must have a value'
    vars:
      APP: infra
      IMAGE: "{{.ImagePrefix}}/{{.APP}}:{{.Tag}}"
    silent: true
    cmds:
      - |+
        tdir=$(mktemp -d)
        task build Out=$tdir/{{.APP}}

        docker buildx build -f ./Dockerfile.ci -t {{.IMAGE}} . --build-context builder=${tdir} --build-arg APP="{{.APP}}"
        docker push {{.IMAGE}}
        rm -rf $tdir
