package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"fmt"
	"time"

	"github.com/kloudlite/operator/pkg/operator"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"kloudlite.io/apps/infra/internal/app/graph/generated"
	"kloudlite.io/apps/infra/internal/app/graph/model"
	"kloudlite.io/apps/infra/internal/domain/entities"
	fn "kloudlite.io/pkg/functions"
)

// CreationTime is the resolver for the creationTime field.
func (r *cloudProviderResolver) CreationTime(ctx context.Context, obj *entities.CloudProvider) (string, error) {
	if obj == nil {
		return "", nil
	}
	return obj.CreationTime.Format(time.RFC3339), nil
}

// ID is the resolver for the id field.
func (r *cloudProviderResolver) ID(ctx context.Context, obj *entities.CloudProvider) (string, error) {
	if obj == nil {
		return "", nil
	}
	return string(obj.Id), nil
}

// Spec is the resolver for the spec field.
func (r *cloudProviderResolver) Spec(ctx context.Context, obj *entities.CloudProvider) (*model.GithubComKloudliteClusterOperatorApisInfraV1CloudProviderSpec, error) {
	var m model.GithubComKloudliteClusterOperatorApisInfraV1CloudProviderSpec
	if err := fn.JsonConversion(obj.Spec, &m); err != nil {
		return nil, err
	}
	return &m, nil
}

// Status is the resolver for the status field.
func (r *cloudProviderResolver) Status(ctx context.Context, obj *entities.CloudProvider) (*operator.Status, error) {
	if obj == nil {
		return nil, nil
	}
	var op operator.Status
	if err := fn.JsonConversion(obj.Status, &op); err != nil {
		return nil, err
	}
	return &op, nil
}

// UpdateTime is the resolver for the updateTime field.
func (r *cloudProviderResolver) UpdateTime(ctx context.Context, obj *entities.CloudProvider) (string, error) {
	panic(fmt.Errorf("not implemented: UpdateTime - updateTime"))
}

// Metadata is the resolver for the metadata field.
func (r *cloudProviderInResolver) Metadata(ctx context.Context, obj *entities.CloudProvider, data *v1.ObjectMeta) error {
	panic(fmt.Errorf("not implemented: Metadata - metadata"))
}

// Spec is the resolver for the spec field.
func (r *cloudProviderInResolver) Spec(ctx context.Context, obj *entities.CloudProvider, data *model.GithubComKloudliteClusterOperatorApisInfraV1CloudProviderSpecIn) error {
	if obj == nil {
		return nil
	}
	return fn.JsonConversion(data, &obj.Spec)
}

// CloudProvider returns generated.CloudProviderResolver implementation.
func (r *Resolver) CloudProvider() generated.CloudProviderResolver { return &cloudProviderResolver{r} }

// CloudProviderIn returns generated.CloudProviderInResolver implementation.
func (r *Resolver) CloudProviderIn() generated.CloudProviderInResolver {
	return &cloudProviderInResolver{r}
}

type cloudProviderResolver struct{ *Resolver }
type cloudProviderInResolver struct{ *Resolver }
