package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"github.com/kloudlite/api/pkg/errors"
	"time"

	"github.com/kloudlite/api/apps/infra/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/infra/internal/app/graph/model"
	"github.com/kloudlite/api/apps/infra/internal/entities"
	"github.com/kloudlite/api/common"
	fn "github.com/kloudlite/api/pkg/functions"
	"github.com/kloudlite/api/pkg/types"
	"github.com/kloudlite/operator/pkg/operator"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Fields is the resolver for the fields field.
func (r *github__com___kloudlite___api___apps___infra___internal___entities__MsvcTemplateEntryResolver) Fields(ctx context.Context, obj *entities.MsvcTemplateEntry) ([]*model.GithubComKloudliteAPIAppsInfraInternalEntitiesInputField, error) {
	if obj == nil {
		return nil, errors.Newf("msvcTemplateEntry is nil")
	}
	if obj.Fields == nil {
		return nil, nil
	}
	var res []*model.GithubComKloudliteAPIAppsInfraInternalEntitiesInputField
	if err := fn.JsonConversion(obj.Fields, &res); err != nil {
		return nil, errors.NewE(err)
	}
	return res, nil
}

// Outputs is the resolver for the outputs field.
func (r *github__com___kloudlite___api___apps___infra___internal___entities__MsvcTemplateEntryResolver) Outputs(ctx context.Context, obj *entities.MsvcTemplateEntry) ([]*model.GithubComKloudliteAPIAppsInfraInternalEntitiesOutputField, error) {
	if obj == nil {
		return nil, errors.Newf("msvcTemplateEntry is nil")
	}
	if obj.Outputs == nil {
		return nil, nil
	}
	var res []*model.GithubComKloudliteAPIAppsInfraInternalEntitiesOutputField
	if err := fn.JsonConversion(obj.Outputs, &res); err != nil {
		return nil, errors.NewE(err)
	}
	return res, nil
}

// Resources is the resolver for the resources field.
func (r *github__com___kloudlite___api___apps___infra___internal___entities__MsvcTemplateEntryResolver) Resources(ctx context.Context, obj *entities.MsvcTemplateEntry) ([]*model.GithubComKloudliteAPIAppsInfraInternalEntitiesMresTemplate, error) {
	if obj == nil {
		return nil, errors.Newf("msvcTemplateEntry is nil")
	}
	if obj.Resources == nil {
		return nil, nil
	}
	var res []*model.GithubComKloudliteAPIAppsInfraInternalEntitiesMresTemplate
	if err := fn.JsonConversion(obj.Resources, &res); err != nil {
		return nil, errors.NewE(err)
	}
	return res, nil
}

// UserID is the resolver for the userId field.
func (r *github__com___kloudlite___api___common__CreatedOrUpdatedByResolver) UserID(ctx context.Context, obj *common.CreatedOrUpdatedBy) (string, error) {
	if obj == nil {
		return "", errors.Newf("createdOrUpdatedBy is nil")
	}
	return string(obj.UserId), nil
}

// LastSyncedAt is the resolver for the lastSyncedAt field.
func (r *github__com___kloudlite___api___pkg___types__SyncStatusResolver) LastSyncedAt(ctx context.Context, obj *types.SyncStatus) (*string, error) {
	if obj == nil {
		return nil, errors.Newf("syncStatus is nil")
	}
	return fn.New(obj.LastSyncedAt.Format(time.RFC3339)), nil
}

// SyncScheduledAt is the resolver for the syncScheduledAt field.
func (r *github__com___kloudlite___api___pkg___types__SyncStatusResolver) SyncScheduledAt(ctx context.Context, obj *types.SyncStatus) (*string, error) {
	if obj == nil {
		return nil, errors.Newf("syncStatus is nil")
	}
	return fn.New(obj.SyncScheduledAt.Format(time.RFC3339)), nil
}

// StartedAt is the resolver for the startedAt field.
func (r *github__com___kloudlite___operator___pkg___operator__CheckResolver) StartedAt(ctx context.Context, obj *operator.Check) (*string, error) {
	if obj == nil {
		return nil, errors.Newf("check is nil")
	}

	if obj.StartedAt == nil {
		return nil, nil
	}

	sa := obj.StartedAt.Format(time.RFC3339)
	return &sa, nil
}

// State is the resolver for the state field.
func (r *github__com___kloudlite___operator___pkg___operator__CheckResolver) State(ctx context.Context, obj *operator.Check) (*model.GithubComKloudliteOperatorPkgOperatorState, error) {
	if obj == nil {
		return nil, errors.Newf("check is nil")
	}

	return fn.JsonConvert[*model.GithubComKloudliteOperatorPkgOperatorState](obj.State)
}

// CheckList is the resolver for the checkList field.
func (r *github__com___kloudlite___operator___pkg___operator__StatusResolver) CheckList(ctx context.Context, obj *operator.Status) ([]*model.GithubComKloudliteOperatorPkgOperatorCheckMeta, error) {
	return fn.JsonConvert[[]*model.GithubComKloudliteOperatorPkgOperatorCheckMeta](obj.CheckList)
}

// Checks is the resolver for the checks field.
func (r *github__com___kloudlite___operator___pkg___operator__StatusResolver) Checks(ctx context.Context, obj *operator.Status) (map[string]interface{}, error) {
	var m map[string]any
	if err := fn.JsonConversion(obj.Checks, &m); err != nil {
		return nil, errors.NewE(err)
	}
	return m, nil
}

// LastReconcileTime is the resolver for the lastReconcileTime field.
func (r *github__com___kloudlite___operator___pkg___operator__StatusResolver) LastReconcileTime(ctx context.Context, obj *operator.Status) (*string, error) {
	if obj == nil {
		return nil, errors.Newf("syncStatus is nil")
	}
	if obj.LastReconcileTime == nil {
		return fn.New(time.Now().Format(time.RFC3339)), nil
	}
	return fn.New(obj.LastReconcileTime.Format(time.RFC3339)), nil
}

// Message is the resolver for the message field.
func (r *github__com___kloudlite___operator___pkg___operator__StatusResolver) Message(ctx context.Context, obj *operator.Status) (*model.GithubComKloudliteOperatorPkgRawJSONRawJSON, error) {
	if obj == nil {
		return nil, errors.Newf("syncStatus is nil")
	}
	if obj.Message == nil {
		return nil, nil
	}
	return &model.GithubComKloudliteOperatorPkgRawJSONRawJSON{
		RawMessage: obj.Message.RawMessage,
	}, nil
}

// Annotations is the resolver for the annotations field.
func (r *metadataResolver) Annotations(ctx context.Context, obj *v1.ObjectMeta) (map[string]interface{}, error) {
	var m map[string]any
	if err := fn.JsonConversion(obj.Annotations, &m); err != nil {
		return nil, errors.NewE(err)
	}
	return m, nil
}

// CreationTimestamp is the resolver for the creationTimestamp field.
func (r *metadataResolver) CreationTimestamp(ctx context.Context, obj *v1.ObjectMeta) (string, error) {
	if obj == nil {
		return "", errors.Newf("metadata is nil")
	}
	return obj.CreationTimestamp.Format(time.RFC3339), nil
}

// DeletionTimestamp is the resolver for the deletionTimestamp field.
func (r *metadataResolver) DeletionTimestamp(ctx context.Context, obj *v1.ObjectMeta) (*string, error) {
	if obj == nil {
		return nil, errors.Newf("metadata is nil")
	}

	if obj.DeletionTimestamp == nil {
		return nil, nil
	}

	return fn.New(obj.DeletionTimestamp.Format(time.RFC3339)), nil
}

// Labels is the resolver for the labels field.
func (r *metadataResolver) Labels(ctx context.Context, obj *v1.ObjectMeta) (map[string]interface{}, error) {
	var m map[string]any
	if err := fn.JsonConversion(obj.Labels, &m); err != nil {
		return nil, errors.NewE(err)
	}
	return m, nil
}

// Annotations is the resolver for the annotations field.
func (r *metadataInResolver) Annotations(ctx context.Context, obj *v1.ObjectMeta, data map[string]interface{}) error {
	var m map[string]string
	if err := fn.JsonConversion(data, &m); err != nil {
		return errors.NewE(err)
	}
	obj.SetAnnotations(m)
	return nil
}

// Labels is the resolver for the labels field.
func (r *metadataInResolver) Labels(ctx context.Context, obj *v1.ObjectMeta, data map[string]interface{}) error {
	var m map[string]string
	if err := fn.JsonConversion(data, &m); err != nil {
		return errors.NewE(err)
	}
	obj.SetLabels(m)
	return nil
}

// Github__com___kloudlite___api___apps___infra___internal___entities__MsvcTemplateEntry returns generated.Github__com___kloudlite___api___apps___infra___internal___entities__MsvcTemplateEntryResolver implementation.
func (r *Resolver) Github__com___kloudlite___api___apps___infra___internal___entities__MsvcTemplateEntry() generated.Github__com___kloudlite___api___apps___infra___internal___entities__MsvcTemplateEntryResolver {
	return &github__com___kloudlite___api___apps___infra___internal___entities__MsvcTemplateEntryResolver{r}
}

// Github__com___kloudlite___api___common__CreatedOrUpdatedBy returns generated.Github__com___kloudlite___api___common__CreatedOrUpdatedByResolver implementation.
func (r *Resolver) Github__com___kloudlite___api___common__CreatedOrUpdatedBy() generated.Github__com___kloudlite___api___common__CreatedOrUpdatedByResolver {
	return &github__com___kloudlite___api___common__CreatedOrUpdatedByResolver{r}
}

// Github__com___kloudlite___api___pkg___types__SyncStatus returns generated.Github__com___kloudlite___api___pkg___types__SyncStatusResolver implementation.
func (r *Resolver) Github__com___kloudlite___api___pkg___types__SyncStatus() generated.Github__com___kloudlite___api___pkg___types__SyncStatusResolver {
	return &github__com___kloudlite___api___pkg___types__SyncStatusResolver{r}
}

// Github__com___kloudlite___operator___pkg___operator__Check returns generated.Github__com___kloudlite___operator___pkg___operator__CheckResolver implementation.
func (r *Resolver) Github__com___kloudlite___operator___pkg___operator__Check() generated.Github__com___kloudlite___operator___pkg___operator__CheckResolver {
	return &github__com___kloudlite___operator___pkg___operator__CheckResolver{r}
}

// Github__com___kloudlite___operator___pkg___operator__Status returns generated.Github__com___kloudlite___operator___pkg___operator__StatusResolver implementation.
func (r *Resolver) Github__com___kloudlite___operator___pkg___operator__Status() generated.Github__com___kloudlite___operator___pkg___operator__StatusResolver {
	return &github__com___kloudlite___operator___pkg___operator__StatusResolver{r}
}

// Metadata returns generated.MetadataResolver implementation.
func (r *Resolver) Metadata() generated.MetadataResolver { return &metadataResolver{r} }

// MetadataIn returns generated.MetadataInResolver implementation.
func (r *Resolver) MetadataIn() generated.MetadataInResolver { return &metadataInResolver{r} }

type github__com___kloudlite___api___apps___infra___internal___entities__MsvcTemplateEntryResolver struct{ *Resolver }
type github__com___kloudlite___api___common__CreatedOrUpdatedByResolver struct{ *Resolver }
type github__com___kloudlite___api___pkg___types__SyncStatusResolver struct{ *Resolver }
type github__com___kloudlite___operator___pkg___operator__CheckResolver struct{ *Resolver }
type github__com___kloudlite___operator___pkg___operator__StatusResolver struct{ *Resolver }
type metadataResolver struct{ *Resolver }
type metadataInResolver struct{ *Resolver }
