package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"
	"github.com/kloudlite/api/pkg/errors"
	"time"

	"github.com/kloudlite/api/apps/infra/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/infra/internal/app/graph/model"
	"github.com/kloudlite/api/apps/infra/internal/entities"
	fn "github.com/kloudlite/api/pkg/functions"
	"github.com/kloudlite/api/pkg/repos"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CreationTime is the resolver for the creationTime field.
func (r *globalVPNResolver) CreationTime(ctx context.Context, obj *entities.GlobalVPN) (string, error) {
	if obj == nil {
		return "", errors.Newf("cluster obj is nil")
	}
	return obj.CreationTime.Format(time.RFC3339), nil
}

// ID is the resolver for the id field.
func (r *globalVPNResolver) ID(ctx context.Context, obj *entities.GlobalVPN) (repos.ID, error) {
	if obj == nil {
		return "", errors.Newf("cluster obj is nil")
	}
	return obj.Id, nil
}

// KloudliteDevice is the resolver for the kloudliteDevice field.
func (r *globalVPNResolver) KloudliteDevice(ctx context.Context, obj *entities.GlobalVPN) (*model.GlobalVPNKloudliteDevice, error) {
	panic(fmt.Errorf("not implemented: KloudliteDevice - kloudliteDevice"))
}

// UpdateTime is the resolver for the updateTime field.
func (r *globalVPNResolver) UpdateTime(ctx context.Context, obj *entities.GlobalVPN) (string, error) {
	if obj == nil {
		return "", errors.Newf("cluster is nil")
	}
	return obj.UpdateTime.Format(time.RFC3339), nil
}

// KloudliteDevice is the resolver for the kloudliteDevice field.
func (r *globalVPNInResolver) KloudliteDevice(ctx context.Context, obj *entities.GlobalVPN, data *model.GlobalVPNKloudliteDeviceIn) error {
	panic(fmt.Errorf("not implemented: KloudliteDevice - kloudliteDevice"))
}

// Metadata is the resolver for the metadata field.
func (r *globalVPNInResolver) Metadata(ctx context.Context, obj *entities.GlobalVPN, data *v1.ObjectMeta) error {
	if obj == nil {
		return errors.Newf("cluster is nil")
	}
	return fn.JsonConversion(data, &obj.ObjectMeta)
}

// GlobalVPN returns generated.GlobalVPNResolver implementation.
func (r *Resolver) GlobalVPN() generated.GlobalVPNResolver { return &globalVPNResolver{r} }

// GlobalVPNIn returns generated.GlobalVPNInResolver implementation.
func (r *Resolver) GlobalVPNIn() generated.GlobalVPNInResolver { return &globalVPNInResolver{r} }

type globalVPNResolver struct{ *Resolver }
type globalVPNInResolver struct{ *Resolver }
