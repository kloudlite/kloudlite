package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"fmt"
	"time"

	"github.com/kloudlite/operator/pkg/operator"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"kloudlite.io/apps/infra/internal/app/graph/generated"
	"kloudlite.io/apps/infra/internal/app/graph/model"
	"kloudlite.io/apps/infra/internal/domain/entities"
	fn "kloudlite.io/pkg/functions"
)

// CreationTime is the resolver for the creationTime field.
func (r *masterNodeResolver) CreationTime(ctx context.Context, obj *entities.MasterNode) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("byocCluster is nil")
	}
	return obj.CreationTime.Format(time.RFC3339), nil
}

// ID is the resolver for the id field.
func (r *masterNodeResolver) ID(ctx context.Context, obj *entities.MasterNode) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("masterNode is nil")
	}
	return string(obj.Id), nil
}

// Spec is the resolver for the spec field.
func (r *masterNodeResolver) Spec(ctx context.Context, obj *entities.MasterNode) (*model.GithubComKloudliteClusterOperatorApisCmgrV1MasterNodeSpec, error) {
	var m model.GithubComKloudliteClusterOperatorApisCmgrV1MasterNodeSpec
	if err := fn.JsonConversion(obj.Spec, &m); err != nil {
		return nil, err
	}
	return &m, nil
}

// Status is the resolver for the status field.
func (r *masterNodeResolver) Status(ctx context.Context, obj *entities.MasterNode) (*operator.Status, error) {
	if obj == nil {
		return nil, fmt.Errorf("masterNode is nil")
	}
	var op operator.Status
	if err := fn.JsonConversion(obj.Status, &op); err != nil {
		return nil, err
	}
	return &op, nil
}

// UpdateTime is the resolver for the updateTime field.
func (r *masterNodeResolver) UpdateTime(ctx context.Context, obj *entities.MasterNode) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("masterNode is nil")
	}
	return obj.UpdateTime.Format(time.RFC3339), nil
}

// Metadata is the resolver for the metadata field.
func (r *masterNodeInResolver) Metadata(ctx context.Context, obj *entities.MasterNode, data *v1.ObjectMeta) error {
	if obj == nil {
		return fmt.Errorf("masterNode is nil")
	}
	return fn.JsonConversion(data, &obj.ObjectMeta)
}

// Spec is the resolver for the spec field.
func (r *masterNodeInResolver) Spec(ctx context.Context, obj *entities.MasterNode, data *model.GithubComKloudliteClusterOperatorApisCmgrV1MasterNodeSpecIn) error {
	if obj == nil {
		return nil
	}
	return fn.JsonConversion(data, &obj.Spec)
}

// MasterNode returns generated.MasterNodeResolver implementation.
func (r *Resolver) MasterNode() generated.MasterNodeResolver { return &masterNodeResolver{r} }

// MasterNodeIn returns generated.MasterNodeInResolver implementation.
func (r *Resolver) MasterNodeIn() generated.MasterNodeInResolver { return &masterNodeInResolver{r} }

type masterNodeResolver struct{ *Resolver }
type masterNodeInResolver struct{ *Resolver }
