// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/kloudlite/api/apps/infra/internal/entities"
	"github.com/kloudlite/api/pkg/repos"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

type BuildRunEdge struct {
	Cursor string             `json:"cursor"`
	Node   *entities.BuildRun `json:"node"`
}

type BuildRunPaginatedRecords struct {
	Edges      []*BuildRunEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

type CheckAwsAccessOutput struct {
	Result          bool    `json:"result"`
	InstallationURL *string `json:"installationUrl,omitempty"`
}

type CloudProviderSecretEdge struct {
	Cursor string                        `json:"cursor"`
	Node   *entities.CloudProviderSecret `json:"node"`
}

type CloudProviderSecretPaginatedRecords struct {
	Edges      []*CloudProviderSecretEdge `json:"edges"`
	PageInfo   *PageInfo                  `json:"pageInfo"`
	TotalCount int                        `json:"totalCount"`
}

type ClusterEdge struct {
	Cursor string            `json:"cursor"`
	Node   *entities.Cluster `json:"node"`
}

type ClusterManagedServiceEdge struct {
	Cursor string                          `json:"cursor"`
	Node   *entities.ClusterManagedService `json:"node"`
}

type ClusterManagedServicePaginatedRecords struct {
	Edges      []*ClusterManagedServiceEdge `json:"edges"`
	PageInfo   *PageInfo                    `json:"pageInfo"`
	TotalCount int                          `json:"totalCount"`
}

type ClusterPaginatedRecords struct {
	Edges      []*ClusterEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

type DomainEntryEdge struct {
	Cursor string                `json:"cursor"`
	Node   *entities.DomainEntry `json:"node"`
}

type DomainEntryPaginatedRecords struct {
	Edges      []*DomainEntryEdge `json:"edges"`
	PageInfo   *PageInfo          `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

type EncodedValue struct {
	Value    string `json:"value"`
	Encoding string `json:"encoding"`
}

type GithubComKloudliteAPIAppsInfraInternalEntitiesAWSSecretCredentials struct {
	AccessKey                  *string `json:"accessKey,omitempty"`
	AwsAccountID               *string `json:"awsAccountId,omitempty"`
	CfParamExternalID          *string `json:"cfParamExternalID,omitempty"`
	CfParamInstanceProfileName *string `json:"cfParamInstanceProfileName,omitempty"`
	CfParamRoleName            *string `json:"cfParamRoleName,omitempty"`
	CfParamStackName           *string `json:"cfParamStackName,omitempty"`
	CfParamTrustedArn          *string `json:"cfParamTrustedARN,omitempty"`
	SecretKey                  *string `json:"secretKey,omitempty"`
}

type GithubComKloudliteAPIAppsInfraInternalEntitiesAWSSecretCredentialsIn struct {
	AccessKey    *string `json:"accessKey,omitempty"`
	AwsAccountID *string `json:"awsAccountId,omitempty"`
	SecretKey    *string `json:"secretKey,omitempty"`
}

type GithubComKloudliteAPIPkgTypesEncodedString struct {
	Encoding string `json:"encoding"`
	Value    string `json:"value"`
}

type GithubComKloudliteOperatorApisClustersV1AWSClusterConfig struct {
	K3sMasters    *GithubComKloudliteOperatorApisClustersV1AWSK3sMastersConfig `json:"k3sMasters,omitempty"`
	NodePools     map[string]interface{}                                       `json:"nodePools,omitempty"`
	Region        string                                                       `json:"region"`
	SpotNodePools map[string]interface{}                                       `json:"spotNodePools,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1AWSClusterConfigIn struct {
	K3sMasters *GithubComKloudliteOperatorApisClustersV1AWSK3sMastersConfigIn `json:"k3sMasters,omitempty"`
	Region     string                                                         `json:"region"`
}

type GithubComKloudliteOperatorApisClustersV1AWSK3sMastersConfig struct {
	IamInstanceProfileRole *string                `json:"iamInstanceProfileRole,omitempty"`
	ImageID                string                 `json:"imageId"`
	ImageSSHUsername       string                 `json:"imageSSHUsername"`
	InstanceType           string                 `json:"instanceType"`
	Nodes                  map[string]interface{} `json:"nodes,omitempty"`
	NvidiaGpuEnabled       bool                   `json:"nvidiaGpuEnabled"`
	RootVolumeSize         int                    `json:"rootVolumeSize"`
	RootVolumeType         string                 `json:"rootVolumeType"`
}

type GithubComKloudliteOperatorApisClustersV1AWSK3sMastersConfigIn struct {
	InstanceType     string `json:"instanceType"`
	NvidiaGpuEnabled bool   `json:"nvidiaGpuEnabled"`
}

type GithubComKloudliteOperatorApisClustersV1AWSNodePoolConfig struct {
	AvailabilityZone       string                                                     `json:"availabilityZone"`
	Ec2Pool                *GithubComKloudliteOperatorApisClustersV1AwsEC2PoolConfig  `json:"ec2Pool,omitempty"`
	IamInstanceProfileRole *string                                                    `json:"iamInstanceProfileRole,omitempty"`
	ImageID                string                                                     `json:"imageId"`
	ImageSSHUsername       string                                                     `json:"imageSSHUsername"`
	NvidiaGpuEnabled       bool                                                       `json:"nvidiaGpuEnabled"`
	PoolType               GithubComKloudliteOperatorApisClustersV1AWSPoolType        `json:"poolType"`
	RootVolumeSize         int                                                        `json:"rootVolumeSize"`
	RootVolumeType         string                                                     `json:"rootVolumeType"`
	SpotPool               *GithubComKloudliteOperatorApisClustersV1AwsSpotPoolConfig `json:"spotPool,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1AWSNodePoolConfigIn struct {
	AvailabilityZone string                                                       `json:"availabilityZone"`
	Ec2Pool          *GithubComKloudliteOperatorApisClustersV1AwsEC2PoolConfigIn  `json:"ec2Pool,omitempty"`
	NvidiaGpuEnabled bool                                                         `json:"nvidiaGpuEnabled"`
	PoolType         GithubComKloudliteOperatorApisClustersV1AWSPoolType          `json:"poolType"`
	SpotPool         *GithubComKloudliteOperatorApisClustersV1AwsSpotPoolConfigIn `json:"spotPool,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1AwsEC2PoolConfig struct {
	InstanceType string                 `json:"instanceType"`
	Nodes        map[string]interface{} `json:"nodes,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1AwsEC2PoolConfigIn struct {
	InstanceType string                 `json:"instanceType"`
	Nodes        map[string]interface{} `json:"nodes,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1AwsSpotCPUNode struct {
	MemoryPerVcpu *GithubComKloudliteOperatorApisCommonTypesMinMaxFloat `json:"memoryPerVcpu,omitempty"`
	Vcpu          *GithubComKloudliteOperatorApisCommonTypesMinMaxFloat `json:"vcpu"`
}

type GithubComKloudliteOperatorApisClustersV1AwsSpotCPUNodeIn struct {
	MemoryPerVcpu *GithubComKloudliteOperatorApisCommonTypesMinMaxFloatIn `json:"memoryPerVcpu,omitempty"`
	Vcpu          *GithubComKloudliteOperatorApisCommonTypesMinMaxFloatIn `json:"vcpu"`
}

type GithubComKloudliteOperatorApisClustersV1AwsSpotGpuNode struct {
	InstanceTypes []string `json:"instanceTypes"`
}

type GithubComKloudliteOperatorApisClustersV1AwsSpotGpuNodeIn struct {
	InstanceTypes []string `json:"instanceTypes"`
}

type GithubComKloudliteOperatorApisClustersV1AwsSpotPoolConfig struct {
	CPUNode                  *GithubComKloudliteOperatorApisClustersV1AwsSpotCPUNode `json:"cpuNode,omitempty"`
	GpuNode                  *GithubComKloudliteOperatorApisClustersV1AwsSpotGpuNode `json:"gpuNode,omitempty"`
	Nodes                    map[string]interface{}                                  `json:"nodes,omitempty"`
	SpotFleetTaggingRoleName string                                                  `json:"spotFleetTaggingRoleName"`
}

type GithubComKloudliteOperatorApisClustersV1AwsSpotPoolConfigIn struct {
	CPUNode *GithubComKloudliteOperatorApisClustersV1AwsSpotCPUNodeIn `json:"cpuNode,omitempty"`
	GpuNode *GithubComKloudliteOperatorApisClustersV1AwsSpotGpuNodeIn `json:"gpuNode,omitempty"`
	Nodes   map[string]interface{}                                    `json:"nodes,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1CloudProviderCredentialKeys struct {
	KeyAccessKey               string `json:"keyAccessKey"`
	KeyAWSAccountID            string `json:"keyAWSAccountId"`
	KeyAWSAssumeRoleExternalID string `json:"keyAWSAssumeRoleExternalID"`
	KeyAWSAssumeRoleRoleArn    string `json:"keyAWSAssumeRoleRoleARN"`
	KeyIAMInstanceProfileRole  string `json:"keyIAMInstanceProfileRole"`
	KeySecretKey               string `json:"keySecretKey"`
}

type GithubComKloudliteOperatorApisClustersV1ClusterOutput struct {
	JobName               string `json:"jobName"`
	JobNamespace          string `json:"jobNamespace"`
	KeyK3sAgentJoinToken  string `json:"keyK3sAgentJoinToken"`
	KeyK3sServerJoinToken string `json:"keyK3sServerJoinToken"`
	KeyKubeconfig         string `json:"keyKubeconfig"`
	SecretName            string `json:"secretName"`
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpec struct {
	AccountID              string                                                               `json:"accountId"`
	AccountName            string                                                               `json:"accountName"`
	AvailabilityMode       GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode  `json:"availabilityMode"`
	Aws                    *GithubComKloudliteOperatorApisClustersV1AWSClusterConfig            `json:"aws,omitempty"`
	BackupToS3Enabled      bool                                                                 `json:"backupToS3Enabled"`
	CloudflareEnabled      *bool                                                                `json:"cloudflareEnabled,omitempty"`
	CloudProvider          GithubComKloudliteOperatorApisCommonTypesCloudProvider               `json:"cloudProvider"`
	ClusterInternalDNSHost *string                                                              `json:"clusterInternalDnsHost,omitempty"`
	ClusterTokenRef        *GithubComKloudliteOperatorApisCommonTypesSecretKeyRef               `json:"clusterTokenRef,omitempty"`
	CredentialKeys         *GithubComKloudliteOperatorApisClustersV1CloudProviderCredentialKeys `json:"credentialKeys,omitempty"`
	CredentialsRef         *GithubComKloudliteOperatorApisCommonTypesSecretRef                  `json:"credentialsRef"`
	KloudliteRelease       string                                                               `json:"kloudliteRelease"`
	MessageQueueTopicName  string                                                               `json:"messageQueueTopicName"`
	Output                 *GithubComKloudliteOperatorApisClustersV1ClusterOutput               `json:"output,omitempty"`
	PublicDNSHost          string                                                               `json:"publicDNSHost"`
	TaintMasterNodes       bool                                                                 `json:"taintMasterNodes"`
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpecIn struct {
	AvailabilityMode  GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode `json:"availabilityMode"`
	Aws               *GithubComKloudliteOperatorApisClustersV1AWSClusterConfigIn         `json:"aws,omitempty"`
	CloudflareEnabled *bool                                                               `json:"cloudflareEnabled,omitempty"`
	CloudProvider     GithubComKloudliteOperatorApisCommonTypesCloudProvider              `json:"cloudProvider"`
	CredentialsRef    *GithubComKloudliteOperatorApisCommonTypesSecretRefIn               `json:"credentialsRef"`
}

type GithubComKloudliteOperatorApisClustersV1InfrastuctureAsCode struct {
	CloudProviderAccessKey *GithubComKloudliteOperatorApisCommonTypesSecretKeyRef `json:"cloudProviderAccessKey"`
	CloudProviderSecretKey *GithubComKloudliteOperatorApisCommonTypesSecretKeyRef `json:"cloudProviderSecretKey"`
	JobName                *string                                                `json:"jobName,omitempty"`
	JobNamespace           *string                                                `json:"jobNamespace,omitempty"`
	StateS3BucketFilePath  string                                                 `json:"stateS3BucketFilePath"`
	StateS3BucketName      string                                                 `json:"stateS3BucketName"`
	StateS3BucketRegion    string                                                 `json:"stateS3BucketRegion"`
}

type GithubComKloudliteOperatorApisClustersV1MasterNodeProps struct {
	AvailabilityZone string  `json:"availabilityZone"`
	LastRecreatedAt  *string `json:"lastRecreatedAt,omitempty"`
	Role             string  `json:"role"`
}

type GithubComKloudliteOperatorApisClustersV1NodePoolSpec struct {
	Aws           *GithubComKloudliteOperatorApisClustersV1AWSNodePoolConfig   `json:"aws,omitempty"`
	CloudProvider GithubComKloudliteOperatorApisCommonTypesCloudProvider       `json:"cloudProvider"`
	Iac           *GithubComKloudliteOperatorApisClustersV1InfrastuctureAsCode `json:"iac"`
	MaxCount      int                                                          `json:"maxCount"`
	MinCount      int                                                          `json:"minCount"`
	NodeLabels    map[string]interface{}                                       `json:"nodeLabels,omitempty"`
	NodeTaints    []*K8sIoAPICoreV1Taint                                       `json:"nodeTaints,omitempty"`
	TargetCount   int                                                          `json:"targetCount"`
}

type GithubComKloudliteOperatorApisClustersV1NodePoolSpecIn struct {
	Aws           *GithubComKloudliteOperatorApisClustersV1AWSNodePoolConfigIn `json:"aws,omitempty"`
	CloudProvider GithubComKloudliteOperatorApisCommonTypesCloudProvider       `json:"cloudProvider"`
	MaxCount      int                                                          `json:"maxCount"`
	MinCount      int                                                          `json:"minCount"`
	NodeLabels    map[string]interface{}                                       `json:"nodeLabels,omitempty"`
	NodeTaints    []*K8sIoAPICoreV1TaintIn                                     `json:"nodeTaints,omitempty"`
	TargetCount   int                                                          `json:"targetCount"`
}

type GithubComKloudliteOperatorApisClustersV1NodeProps struct {
	LastRecreatedAt *string `json:"lastRecreatedAt,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1NodePropsIn struct {
	LastRecreatedAt *string `json:"lastRecreatedAt,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1NodeSpec struct {
	NodepoolName string `json:"nodepoolName"`
}

type GithubComKloudliteOperatorApisClustersV1NodeSpecIn struct {
	NodepoolName string `json:"nodepoolName"`
}

type GithubComKloudliteOperatorApisCommonTypesMinMaxFloat struct {
	Max string `json:"max"`
	Min string `json:"min"`
}

type GithubComKloudliteOperatorApisCommonTypesMinMaxFloatIn struct {
	Max string `json:"max"`
	Min string `json:"min"`
}

type GithubComKloudliteOperatorApisCommonTypesSecretKeyRef struct {
	Key       string  `json:"key"`
	Name      string  `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
}

type GithubComKloudliteOperatorApisCommonTypesSecretRef struct {
	Name      string  `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
}

type GithubComKloudliteOperatorApisCommonTypesSecretRefIn struct {
	Name      string  `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
}

type GithubComKloudliteOperatorApisCrdsV1ClusterManagedServiceSpec struct {
	MsvcSpec  *GithubComKloudliteOperatorApisCrdsV1ManagedServiceSpec `json:"msvcSpec"`
	Namespace string                                                  `json:"namespace"`
}

type GithubComKloudliteOperatorApisCrdsV1ClusterManagedServiceSpecIn struct {
	MsvcSpec  *GithubComKloudliteOperatorApisCrdsV1ManagedServiceSpecIn `json:"msvcSpec"`
	Namespace string                                                    `json:"namespace"`
}

type GithubComKloudliteOperatorApisCrdsV1ManagedServiceSpec struct {
	ServiceTemplate *GithubComKloudliteOperatorApisCrdsV1ServiceTemplate `json:"serviceTemplate"`
}

type GithubComKloudliteOperatorApisCrdsV1ManagedServiceSpecIn struct {
	ServiceTemplate *GithubComKloudliteOperatorApisCrdsV1ServiceTemplateIn `json:"serviceTemplate"`
}

type GithubComKloudliteOperatorApisCrdsV1ServiceTemplate struct {
	APIVersion string                 `json:"apiVersion"`
	Kind       string                 `json:"kind"`
	Spec       map[string]interface{} `json:"spec"`
}

type GithubComKloudliteOperatorApisCrdsV1ServiceTemplateIn struct {
	Spec map[string]interface{} `json:"spec"`
}

type GithubComKloudliteOperatorApisDistributionV1BuildOptions struct {
	BuildArgs         map[string]interface{} `json:"buildArgs,omitempty"`
	BuildContexts     map[string]interface{} `json:"buildContexts,omitempty"`
	ContextDir        *string                `json:"contextDir,omitempty"`
	DockerfileContent *string                `json:"dockerfileContent,omitempty"`
	DockerfilePath    *string                `json:"dockerfilePath,omitempty"`
	TargetPlatforms   []string               `json:"targetPlatforms,omitempty"`
}

type GithubComKloudliteOperatorApisDistributionV1BuildOptionsIn struct {
	BuildArgs         map[string]interface{} `json:"buildArgs,omitempty"`
	BuildContexts     map[string]interface{} `json:"buildContexts,omitempty"`
	ContextDir        *string                `json:"contextDir,omitempty"`
	DockerfileContent *string                `json:"dockerfileContent,omitempty"`
	DockerfilePath    *string                `json:"dockerfilePath,omitempty"`
	TargetPlatforms   []string               `json:"targetPlatforms,omitempty"`
}

type GithubComKloudliteOperatorApisDistributionV1BuildRunSpec struct {
	AccountName  string                                                    `json:"accountName"`
	BuildOptions *GithubComKloudliteOperatorApisDistributionV1BuildOptions `json:"buildOptions,omitempty"`
	CacheKeyName *string                                                   `json:"cacheKeyName,omitempty"`
	Registry     *GithubComKloudliteOperatorApisDistributionV1Registry     `json:"registry"`
	Resource     *GithubComKloudliteOperatorApisDistributionV1Resource     `json:"resource"`
}

type GithubComKloudliteOperatorApisDistributionV1BuildRunSpecIn struct {
	BuildOptions *GithubComKloudliteOperatorApisDistributionV1BuildOptionsIn `json:"buildOptions,omitempty"`
	CacheKeyName *string                                                     `json:"cacheKeyName,omitempty"`
	Registry     *GithubComKloudliteOperatorApisDistributionV1RegistryIn     `json:"registry"`
	Resource     *GithubComKloudliteOperatorApisDistributionV1ResourceIn     `json:"resource"`
}

type GithubComKloudliteOperatorApisDistributionV1Registry struct {
	Repo *GithubComKloudliteOperatorApisDistributionV1Repo `json:"repo"`
}

type GithubComKloudliteOperatorApisDistributionV1RegistryIn struct {
	Repo *GithubComKloudliteOperatorApisDistributionV1RepoIn `json:"repo"`
}

type GithubComKloudliteOperatorApisDistributionV1Repo struct {
	Name string   `json:"name"`
	Tags []string `json:"tags"`
}

type GithubComKloudliteOperatorApisDistributionV1RepoIn struct {
	Name string   `json:"name"`
	Tags []string `json:"tags"`
}

type GithubComKloudliteOperatorApisDistributionV1Resource struct {
	CPU        int `json:"cpu"`
	MemoryInMb int `json:"memoryInMb"`
}

type GithubComKloudliteOperatorApisDistributionV1ResourceIn struct {
	CPU        int `json:"cpu"`
	MemoryInMb int `json:"memoryInMb"`
}

type GithubComKloudliteOperatorApisWireguardV1DeviceSpec struct {
	AccountName     string                                           `json:"accountName"`
	ClusterName     string                                           `json:"clusterName"`
	DeviceNamespace *string                                          `json:"deviceNamespace,omitempty"`
	NodeSelector    map[string]interface{}                           `json:"nodeSelector,omitempty"`
	Ports           []*GithubComKloudliteOperatorApisWireguardV1Port `json:"ports,omitempty"`
}

type GithubComKloudliteOperatorApisWireguardV1DeviceSpecIn struct {
	AccountName     string                                             `json:"accountName"`
	ClusterName     string                                             `json:"clusterName"`
	DeviceNamespace *string                                            `json:"deviceNamespace,omitempty"`
	NodeSelector    map[string]interface{}                             `json:"nodeSelector,omitempty"`
	Ports           []*GithubComKloudliteOperatorApisWireguardV1PortIn `json:"ports,omitempty"`
}

type GithubComKloudliteOperatorApisWireguardV1Port struct {
	Port       *int `json:"port,omitempty"`
	TargetPort *int `json:"targetPort,omitempty"`
}

type GithubComKloudliteOperatorApisWireguardV1PortIn struct {
	Port       *int `json:"port,omitempty"`
	TargetPort *int `json:"targetPort,omitempty"`
}

type GithubComKloudliteOperatorPkgOperatorCheckIn struct {
	Generation *int    `json:"generation,omitempty"`
	Message    *string `json:"message,omitempty"`
	Status     bool    `json:"status"`
}

type GithubComKloudliteOperatorPkgOperatorResourceRefIn struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}

type GithubComKloudliteOperatorPkgOperatorStatusIn struct {
	Checks              map[string]interface{}                                `json:"checks,omitempty"`
	IsReady             bool                                                  `json:"isReady"`
	LastReadyGeneration *int                                                  `json:"lastReadyGeneration,omitempty"`
	LastReconcileTime   *string                                               `json:"lastReconcileTime,omitempty"`
	Message             *GithubComKloudliteOperatorPkgRawJSONRawJSONIn        `json:"message,omitempty"`
	Resources           []*GithubComKloudliteOperatorPkgOperatorResourceRefIn `json:"resources,omitempty"`
}

type GithubComKloudliteOperatorPkgRawJSONRawJSON struct {
	RawMessage interface{} `json:"RawMessage,omitempty"`
}

type GithubComKloudliteOperatorPkgRawJSONRawJSONIn struct {
	RawMessage interface{} `json:"RawMessage,omitempty"`
}

type K8sIoAPICoreV1PersistentVolumeClaimCondition struct {
	LastProbeTime      *string                                          `json:"lastProbeTime,omitempty"`
	LastTransitionTime *string                                          `json:"lastTransitionTime,omitempty"`
	Message            *string                                          `json:"message,omitempty"`
	Reason             *string                                          `json:"reason,omitempty"`
	Status             K8sIoAPICoreV1ConditionStatus                    `json:"status"`
	Type               K8sIoAPICoreV1PersistentVolumeClaimConditionType `json:"type"`
}

type K8sIoAPICoreV1PersistentVolumeClaimConditionIn struct {
	LastProbeTime      *string                                          `json:"lastProbeTime,omitempty"`
	LastTransitionTime *string                                          `json:"lastTransitionTime,omitempty"`
	Message            *string                                          `json:"message,omitempty"`
	Reason             *string                                          `json:"reason,omitempty"`
	Status             K8sIoAPICoreV1ConditionStatus                    `json:"status"`
	Type               K8sIoAPICoreV1PersistentVolumeClaimConditionType `json:"type"`
}

type K8sIoAPICoreV1PersistentVolumeClaimSpec struct {
	AccessModes      []string                                     `json:"accessModes,omitempty"`
	DataSource       *K8sIoAPICoreV1TypedLocalObjectReference     `json:"dataSource,omitempty"`
	DataSourceRef    *K8sIoAPICoreV1TypedObjectReference          `json:"dataSourceRef,omitempty"`
	Resources        *K8sIoAPICoreV1ResourceRequirements          `json:"resources,omitempty"`
	Selector         *K8sIoApimachineryPkgApisMetaV1LabelSelector `json:"selector,omitempty"`
	StorageClassName *string                                      `json:"storageClassName,omitempty"`
	VolumeMode       *string                                      `json:"volumeMode,omitempty"`
	VolumeName       *string                                      `json:"volumeName,omitempty"`
}

type K8sIoAPICoreV1PersistentVolumeClaimSpecIn struct {
	AccessModes      []string                                       `json:"accessModes,omitempty"`
	DataSource       *K8sIoAPICoreV1TypedLocalObjectReferenceIn     `json:"dataSource,omitempty"`
	DataSourceRef    *K8sIoAPICoreV1TypedObjectReferenceIn          `json:"dataSourceRef,omitempty"`
	Resources        *K8sIoAPICoreV1ResourceRequirementsIn          `json:"resources,omitempty"`
	Selector         *K8sIoApimachineryPkgApisMetaV1LabelSelectorIn `json:"selector,omitempty"`
	StorageClassName *string                                        `json:"storageClassName,omitempty"`
	VolumeMode       *string                                        `json:"volumeMode,omitempty"`
	VolumeName       *string                                        `json:"volumeName,omitempty"`
}

type K8sIoAPICoreV1PersistentVolumeClaimStatus struct {
	AccessModes               []string                                        `json:"accessModes,omitempty"`
	AllocatedResources        map[string]interface{}                          `json:"allocatedResources,omitempty"`
	AllocatedResourceStatuses map[string]interface{}                          `json:"allocatedResourceStatuses,omitempty"`
	Capacity                  map[string]interface{}                          `json:"capacity,omitempty"`
	Conditions                []*K8sIoAPICoreV1PersistentVolumeClaimCondition `json:"conditions,omitempty"`
	Phase                     *K8sIoAPICoreV1PersistentVolumeClaimPhase       `json:"phase,omitempty"`
}

type K8sIoAPICoreV1PersistentVolumeClaimStatusIn struct {
	AccessModes               []string                                          `json:"accessModes,omitempty"`
	AllocatedResources        map[string]interface{}                            `json:"allocatedResources,omitempty"`
	AllocatedResourceStatuses map[string]interface{}                            `json:"allocatedResourceStatuses,omitempty"`
	Capacity                  map[string]interface{}                            `json:"capacity,omitempty"`
	Conditions                []*K8sIoAPICoreV1PersistentVolumeClaimConditionIn `json:"conditions,omitempty"`
	Phase                     *K8sIoAPICoreV1PersistentVolumeClaimPhase         `json:"phase,omitempty"`
}

type K8sIoAPICoreV1ResourceClaim struct {
	Name string `json:"name"`
}

type K8sIoAPICoreV1ResourceClaimIn struct {
	Name string `json:"name"`
}

type K8sIoAPICoreV1ResourceRequirements struct {
	Claims   []*K8sIoAPICoreV1ResourceClaim `json:"claims,omitempty"`
	Limits   map[string]interface{}         `json:"limits,omitempty"`
	Requests map[string]interface{}         `json:"requests,omitempty"`
}

type K8sIoAPICoreV1ResourceRequirementsIn struct {
	Claims   []*K8sIoAPICoreV1ResourceClaimIn `json:"claims,omitempty"`
	Limits   map[string]interface{}           `json:"limits,omitempty"`
	Requests map[string]interface{}           `json:"requests,omitempty"`
}

type K8sIoAPICoreV1Taint struct {
	Effect    K8sIoAPICoreV1TaintEffect `json:"effect"`
	Key       string                    `json:"key"`
	TimeAdded *string                   `json:"timeAdded,omitempty"`
	Value     *string                   `json:"value,omitempty"`
}

type K8sIoAPICoreV1TaintIn struct {
	Effect    K8sIoAPICoreV1TaintEffect `json:"effect"`
	Key       string                    `json:"key"`
	TimeAdded *string                   `json:"timeAdded,omitempty"`
	Value     *string                   `json:"value,omitempty"`
}

type K8sIoAPICoreV1TypedLocalObjectReference struct {
	APIGroup *string `json:"apiGroup,omitempty"`
	Kind     string  `json:"kind"`
	Name     string  `json:"name"`
}

type K8sIoAPICoreV1TypedLocalObjectReferenceIn struct {
	APIGroup *string `json:"apiGroup,omitempty"`
	Kind     string  `json:"kind"`
	Name     string  `json:"name"`
}

type K8sIoAPICoreV1TypedObjectReference struct {
	APIGroup  *string `json:"apiGroup,omitempty"`
	Kind      string  `json:"kind"`
	Name      string  `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
}

type K8sIoAPICoreV1TypedObjectReferenceIn struct {
	APIGroup  *string `json:"apiGroup,omitempty"`
	Kind      string  `json:"kind"`
	Name      string  `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
}

type K8sIoApimachineryPkgAPIResourceQuantity struct {
	Format K8sIoApimachineryPkgAPIResourceFormat `json:"Format"`
}

type K8sIoApimachineryPkgAPIResourceQuantityIn struct {
	Format K8sIoApimachineryPkgAPIResourceFormat `json:"Format"`
}

type K8sIoApimachineryPkgApisMetaV1LabelSelector struct {
	MatchExpressions []*K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirement `json:"matchExpressions,omitempty"`
	MatchLabels      map[string]interface{}                                    `json:"matchLabels,omitempty"`
}

type K8sIoApimachineryPkgApisMetaV1LabelSelectorIn struct {
	MatchExpressions []*K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirementIn `json:"matchExpressions,omitempty"`
	MatchLabels      map[string]interface{}                                      `json:"matchLabels,omitempty"`
}

type K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirement struct {
	Key      string                                              `json:"key"`
	Operator K8sIoApimachineryPkgApisMetaV1LabelSelectorOperator `json:"operator"`
	Values   []string                                            `json:"values,omitempty"`
}

type K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirementIn struct {
	Key      string                                              `json:"key"`
	Operator K8sIoApimachineryPkgApisMetaV1LabelSelectorOperator `json:"operator"`
	Values   []string                                            `json:"values,omitempty"`
}

type NodeEdge struct {
	Cursor string         `json:"cursor"`
	Node   *entities.Node `json:"node"`
}

type NodeIn struct {
	Metadata *v1.ObjectMeta                                      `json:"metadata,omitempty"`
	Spec     *GithubComKloudliteOperatorApisClustersV1NodeSpecIn `json:"spec"`
}

type NodePaginatedRecords struct {
	Edges      []*NodeEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type NodePoolEdge struct {
	Cursor string             `json:"cursor"`
	Node   *entities.NodePool `json:"node"`
}

type NodePoolPaginatedRecords struct {
	Edges      []*NodePoolEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

type PageInfo struct {
	EndCursor       *string `json:"endCursor,omitempty"`
	HasNextPage     *bool   `json:"hasNextPage,omitempty"`
	HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
	StartCursor     *string `json:"startCursor,omitempty"`
}

type PersistentVolumeClaimEdge struct {
	Cursor string                          `json:"cursor"`
	Node   *entities.PersistentVolumeClaim `json:"node"`
}

type PersistentVolumeClaimPaginatedRecords struct {
	Edges      []*PersistentVolumeClaimEdge `json:"edges"`
	PageInfo   *PageInfo                    `json:"pageInfo"`
	TotalCount int                          `json:"totalCount"`
}

type SearchBuildRuns struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchCluster struct {
	CloudProviderName *repos.MatchFilter `json:"cloudProviderName,omitempty"`
	IsReady           *repos.MatchFilter `json:"isReady,omitempty"`
	Region            *repos.MatchFilter `json:"region,omitempty"`
	Text              *repos.MatchFilter `json:"text,omitempty"`
}

type SearchClusterManagedService struct {
	IsReady *repos.MatchFilter `json:"isReady,omitempty"`
	Text    *repos.MatchFilter `json:"text,omitempty"`
}

type SearchDomainEntry struct {
	ClusterName *repos.MatchFilter `json:"clusterName,omitempty"`
	Text        *repos.MatchFilter `json:"text,omitempty"`
}

type SearchNodepool struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchPersistentVolumeClaims struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchProviderSecret struct {
	CloudProviderName *repos.MatchFilter `json:"cloudProviderName,omitempty"`
	Text              *repos.MatchFilter `json:"text,omitempty"`
}

type SearchVPNDevices struct {
	Text              *repos.MatchFilter `json:"text,omitempty"`
	IsReady           *repos.MatchFilter `json:"isReady,omitempty"`
	MarkedForDeletion *repos.MatchFilter `json:"markedForDeletion,omitempty"`
}

type VPNDeviceEdge struct {
	Cursor string              `json:"cursor"`
	Node   *entities.VPNDevice `json:"node"`
}

type VPNDevicePaginatedRecords struct {
	Edges      []*VPNDeviceEdge `json:"edges"`
	PageInfo   *PageInfo        `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

type GithubComKloudliteOperatorApisClustersV1AWSPoolType string

const (
	GithubComKloudliteOperatorApisClustersV1AWSPoolTypeEc2  GithubComKloudliteOperatorApisClustersV1AWSPoolType = "ec2"
	GithubComKloudliteOperatorApisClustersV1AWSPoolTypeSpot GithubComKloudliteOperatorApisClustersV1AWSPoolType = "spot"
)

var AllGithubComKloudliteOperatorApisClustersV1AWSPoolType = []GithubComKloudliteOperatorApisClustersV1AWSPoolType{
	GithubComKloudliteOperatorApisClustersV1AWSPoolTypeEc2,
	GithubComKloudliteOperatorApisClustersV1AWSPoolTypeSpot,
}

func (e GithubComKloudliteOperatorApisClustersV1AWSPoolType) IsValid() bool {
	switch e {
	case GithubComKloudliteOperatorApisClustersV1AWSPoolTypeEc2, GithubComKloudliteOperatorApisClustersV1AWSPoolTypeSpot:
		return true
	}
	return false
}

func (e GithubComKloudliteOperatorApisClustersV1AWSPoolType) String() string {
	return string(e)
}

func (e *GithubComKloudliteOperatorApisClustersV1AWSPoolType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteOperatorApisClustersV1AWSPoolType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github__com___kloudlite___operator___apis___clusters___v1__AWSPoolType", str)
	}
	return nil
}

func (e GithubComKloudliteOperatorApisClustersV1AWSPoolType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode string

const (
	GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityModeDev GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode = "dev"
	GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityModeHa  GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode = "HA"
)

var AllGithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode = []GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode{
	GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityModeDev,
	GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityModeHa,
}

func (e GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode) IsValid() bool {
	switch e {
	case GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityModeDev, GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityModeHa:
		return true
	}
	return false
}

func (e GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode) String() string {
	return string(e)
}

func (e *GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpecAvailabilityMode", str)
	}
	return nil
}

func (e GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GithubComKloudliteOperatorApisCommonTypesCloudProvider string

const (
	GithubComKloudliteOperatorApisCommonTypesCloudProviderAws   GithubComKloudliteOperatorApisCommonTypesCloudProvider = "aws"
	GithubComKloudliteOperatorApisCommonTypesCloudProviderAzure GithubComKloudliteOperatorApisCommonTypesCloudProvider = "azure"
	GithubComKloudliteOperatorApisCommonTypesCloudProviderDo    GithubComKloudliteOperatorApisCommonTypesCloudProvider = "do"
	GithubComKloudliteOperatorApisCommonTypesCloudProviderGcp   GithubComKloudliteOperatorApisCommonTypesCloudProvider = "gcp"
)

var AllGithubComKloudliteOperatorApisCommonTypesCloudProvider = []GithubComKloudliteOperatorApisCommonTypesCloudProvider{
	GithubComKloudliteOperatorApisCommonTypesCloudProviderAws,
	GithubComKloudliteOperatorApisCommonTypesCloudProviderAzure,
	GithubComKloudliteOperatorApisCommonTypesCloudProviderDo,
	GithubComKloudliteOperatorApisCommonTypesCloudProviderGcp,
}

func (e GithubComKloudliteOperatorApisCommonTypesCloudProvider) IsValid() bool {
	switch e {
	case GithubComKloudliteOperatorApisCommonTypesCloudProviderAws, GithubComKloudliteOperatorApisCommonTypesCloudProviderAzure, GithubComKloudliteOperatorApisCommonTypesCloudProviderDo, GithubComKloudliteOperatorApisCommonTypesCloudProviderGcp:
		return true
	}
	return false
}

func (e GithubComKloudliteOperatorApisCommonTypesCloudProvider) String() string {
	return string(e)
}

func (e *GithubComKloudliteOperatorApisCommonTypesCloudProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteOperatorApisCommonTypesCloudProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github__com___kloudlite___operator___apis___common____types__CloudProvider", str)
	}
	return nil
}

func (e GithubComKloudliteOperatorApisCommonTypesCloudProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type K8sIoAPICoreV1ConditionStatus string

const (
	K8sIoAPICoreV1ConditionStatusFalse   K8sIoAPICoreV1ConditionStatus = "False"
	K8sIoAPICoreV1ConditionStatusTrue    K8sIoAPICoreV1ConditionStatus = "True"
	K8sIoAPICoreV1ConditionStatusUnknown K8sIoAPICoreV1ConditionStatus = "Unknown"
)

var AllK8sIoAPICoreV1ConditionStatus = []K8sIoAPICoreV1ConditionStatus{
	K8sIoAPICoreV1ConditionStatusFalse,
	K8sIoAPICoreV1ConditionStatusTrue,
	K8sIoAPICoreV1ConditionStatusUnknown,
}

func (e K8sIoAPICoreV1ConditionStatus) IsValid() bool {
	switch e {
	case K8sIoAPICoreV1ConditionStatusFalse, K8sIoAPICoreV1ConditionStatusTrue, K8sIoAPICoreV1ConditionStatusUnknown:
		return true
	}
	return false
}

func (e K8sIoAPICoreV1ConditionStatus) String() string {
	return string(e)
}

func (e *K8sIoAPICoreV1ConditionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = K8sIoAPICoreV1ConditionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid K8s__io___api___core___v1__ConditionStatus", str)
	}
	return nil
}

func (e K8sIoAPICoreV1ConditionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type K8sIoAPICoreV1PersistentVolumeClaimConditionType string

const (
	K8sIoAPICoreV1PersistentVolumeClaimConditionTypeFileSystemResizePending K8sIoAPICoreV1PersistentVolumeClaimConditionType = "FileSystemResizePending"
	K8sIoAPICoreV1PersistentVolumeClaimConditionTypeResizing                K8sIoAPICoreV1PersistentVolumeClaimConditionType = "Resizing"
)

var AllK8sIoAPICoreV1PersistentVolumeClaimConditionType = []K8sIoAPICoreV1PersistentVolumeClaimConditionType{
	K8sIoAPICoreV1PersistentVolumeClaimConditionTypeFileSystemResizePending,
	K8sIoAPICoreV1PersistentVolumeClaimConditionTypeResizing,
}

func (e K8sIoAPICoreV1PersistentVolumeClaimConditionType) IsValid() bool {
	switch e {
	case K8sIoAPICoreV1PersistentVolumeClaimConditionTypeFileSystemResizePending, K8sIoAPICoreV1PersistentVolumeClaimConditionTypeResizing:
		return true
	}
	return false
}

func (e K8sIoAPICoreV1PersistentVolumeClaimConditionType) String() string {
	return string(e)
}

func (e *K8sIoAPICoreV1PersistentVolumeClaimConditionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = K8sIoAPICoreV1PersistentVolumeClaimConditionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid K8s__io___api___core___v1__PersistentVolumeClaimConditionType", str)
	}
	return nil
}

func (e K8sIoAPICoreV1PersistentVolumeClaimConditionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type K8sIoAPICoreV1PersistentVolumeClaimPhase string

const (
	K8sIoAPICoreV1PersistentVolumeClaimPhaseBound   K8sIoAPICoreV1PersistentVolumeClaimPhase = "Bound"
	K8sIoAPICoreV1PersistentVolumeClaimPhaseLost    K8sIoAPICoreV1PersistentVolumeClaimPhase = "Lost"
	K8sIoAPICoreV1PersistentVolumeClaimPhasePending K8sIoAPICoreV1PersistentVolumeClaimPhase = "Pending"
)

var AllK8sIoAPICoreV1PersistentVolumeClaimPhase = []K8sIoAPICoreV1PersistentVolumeClaimPhase{
	K8sIoAPICoreV1PersistentVolumeClaimPhaseBound,
	K8sIoAPICoreV1PersistentVolumeClaimPhaseLost,
	K8sIoAPICoreV1PersistentVolumeClaimPhasePending,
}

func (e K8sIoAPICoreV1PersistentVolumeClaimPhase) IsValid() bool {
	switch e {
	case K8sIoAPICoreV1PersistentVolumeClaimPhaseBound, K8sIoAPICoreV1PersistentVolumeClaimPhaseLost, K8sIoAPICoreV1PersistentVolumeClaimPhasePending:
		return true
	}
	return false
}

func (e K8sIoAPICoreV1PersistentVolumeClaimPhase) String() string {
	return string(e)
}

func (e *K8sIoAPICoreV1PersistentVolumeClaimPhase) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = K8sIoAPICoreV1PersistentVolumeClaimPhase(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid K8s__io___api___core___v1__PersistentVolumeClaimPhase", str)
	}
	return nil
}

func (e K8sIoAPICoreV1PersistentVolumeClaimPhase) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type K8sIoAPICoreV1TaintEffect string

const (
	K8sIoAPICoreV1TaintEffectNoExecute        K8sIoAPICoreV1TaintEffect = "NoExecute"
	K8sIoAPICoreV1TaintEffectNoSchedule       K8sIoAPICoreV1TaintEffect = "NoSchedule"
	K8sIoAPICoreV1TaintEffectPreferNoSchedule K8sIoAPICoreV1TaintEffect = "PreferNoSchedule"
)

var AllK8sIoAPICoreV1TaintEffect = []K8sIoAPICoreV1TaintEffect{
	K8sIoAPICoreV1TaintEffectNoExecute,
	K8sIoAPICoreV1TaintEffectNoSchedule,
	K8sIoAPICoreV1TaintEffectPreferNoSchedule,
}

func (e K8sIoAPICoreV1TaintEffect) IsValid() bool {
	switch e {
	case K8sIoAPICoreV1TaintEffectNoExecute, K8sIoAPICoreV1TaintEffectNoSchedule, K8sIoAPICoreV1TaintEffectPreferNoSchedule:
		return true
	}
	return false
}

func (e K8sIoAPICoreV1TaintEffect) String() string {
	return string(e)
}

func (e *K8sIoAPICoreV1TaintEffect) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = K8sIoAPICoreV1TaintEffect(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid K8s__io___api___core___v1__TaintEffect", str)
	}
	return nil
}

func (e K8sIoAPICoreV1TaintEffect) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type K8sIoApimachineryPkgAPIResourceFormat string

const (
	K8sIoApimachineryPkgAPIResourceFormatBinarySi        K8sIoApimachineryPkgAPIResourceFormat = "BinarySI"
	K8sIoApimachineryPkgAPIResourceFormatDecimalExponent K8sIoApimachineryPkgAPIResourceFormat = "DecimalExponent"
	K8sIoApimachineryPkgAPIResourceFormatDecimalSi       K8sIoApimachineryPkgAPIResourceFormat = "DecimalSI"
)

var AllK8sIoApimachineryPkgAPIResourceFormat = []K8sIoApimachineryPkgAPIResourceFormat{
	K8sIoApimachineryPkgAPIResourceFormatBinarySi,
	K8sIoApimachineryPkgAPIResourceFormatDecimalExponent,
	K8sIoApimachineryPkgAPIResourceFormatDecimalSi,
}

func (e K8sIoApimachineryPkgAPIResourceFormat) IsValid() bool {
	switch e {
	case K8sIoApimachineryPkgAPIResourceFormatBinarySi, K8sIoApimachineryPkgAPIResourceFormatDecimalExponent, K8sIoApimachineryPkgAPIResourceFormatDecimalSi:
		return true
	}
	return false
}

func (e K8sIoApimachineryPkgAPIResourceFormat) String() string {
	return string(e)
}

func (e *K8sIoApimachineryPkgAPIResourceFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = K8sIoApimachineryPkgAPIResourceFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid K8s__io___apimachinery___pkg___api___resource__Format", str)
	}
	return nil
}

func (e K8sIoApimachineryPkgAPIResourceFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type K8sIoApimachineryPkgApisMetaV1LabelSelectorOperator string

const (
	K8sIoApimachineryPkgApisMetaV1LabelSelectorOperatorDoesNotExist K8sIoApimachineryPkgApisMetaV1LabelSelectorOperator = "DoesNotExist"
	K8sIoApimachineryPkgApisMetaV1LabelSelectorOperatorExists       K8sIoApimachineryPkgApisMetaV1LabelSelectorOperator = "Exists"
	K8sIoApimachineryPkgApisMetaV1LabelSelectorOperatorIn           K8sIoApimachineryPkgApisMetaV1LabelSelectorOperator = "In"
	K8sIoApimachineryPkgApisMetaV1LabelSelectorOperatorNotIn        K8sIoApimachineryPkgApisMetaV1LabelSelectorOperator = "NotIn"
)

var AllK8sIoApimachineryPkgApisMetaV1LabelSelectorOperator = []K8sIoApimachineryPkgApisMetaV1LabelSelectorOperator{
	K8sIoApimachineryPkgApisMetaV1LabelSelectorOperatorDoesNotExist,
	K8sIoApimachineryPkgApisMetaV1LabelSelectorOperatorExists,
	K8sIoApimachineryPkgApisMetaV1LabelSelectorOperatorIn,
	K8sIoApimachineryPkgApisMetaV1LabelSelectorOperatorNotIn,
}

func (e K8sIoApimachineryPkgApisMetaV1LabelSelectorOperator) IsValid() bool {
	switch e {
	case K8sIoApimachineryPkgApisMetaV1LabelSelectorOperatorDoesNotExist, K8sIoApimachineryPkgApisMetaV1LabelSelectorOperatorExists, K8sIoApimachineryPkgApisMetaV1LabelSelectorOperatorIn, K8sIoApimachineryPkgApisMetaV1LabelSelectorOperatorNotIn:
		return true
	}
	return false
}

func (e K8sIoApimachineryPkgApisMetaV1LabelSelectorOperator) String() string {
	return string(e)
}

func (e *K8sIoApimachineryPkgApisMetaV1LabelSelectorOperator) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = K8sIoApimachineryPkgApisMetaV1LabelSelectorOperator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorOperator", str)
	}
	return nil
}

func (e K8sIoApimachineryPkgApisMetaV1LabelSelectorOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
