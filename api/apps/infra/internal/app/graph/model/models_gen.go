// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AccountSpec struct {
	OwnedDomains []*string `json:"ownedDomains"`
}

type AccountSpecIn struct {
	OwnedDomains []*string `json:"ownedDomains"`
}

type Check struct {
	Status     *bool   `json:"status"`
	Message    *string `json:"message"`
	Generation *int    `json:"generation"`
}

type CloudProviderSpec struct {
	AccountName    string                           `json:"accountName"`
	DisplayName    string                           `json:"display_name"`
	Provider       string                           `json:"provider"`
	ProviderSecret *CloudProviderSpecProviderSecret `json:"providerSecret"`
}

type CloudProviderSpecIn struct {
	AccountName    string                             `json:"accountName"`
	DisplayName    string                             `json:"display_name"`
	Provider       string                             `json:"provider"`
	ProviderSecret *CloudProviderSpecProviderSecretIn `json:"providerSecret"`
}

type CloudProviderSpecProviderSecret struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}

type CloudProviderSpecProviderSecretIn struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
}

type ClusterSpec struct {
	Region       string `json:"region"`
	AccountName  string `json:"accountName"`
	Config       string `json:"config"`
	Count        int    `json:"count"`
	Provider     string `json:"provider"`
	ProviderName string `json:"providerName"`
}

type ClusterSpecIn struct {
	Region       string `json:"region"`
	AccountName  string `json:"accountName"`
	Config       string `json:"config"`
	Count        int    `json:"count"`
	Provider     string `json:"provider"`
	ProviderName string `json:"providerName"`
}

type EdgeSpec struct {
	AccountName  string           `json:"accountName"`
	ClusterName  string           `json:"clusterName"`
	Pools        []*EdgeSpecPools `json:"pools"`
	Provider     *string          `json:"provider"`
	ProviderName string           `json:"providerName"`
	Region       string           `json:"region"`
}

type EdgeSpecIn struct {
	AccountName  string             `json:"accountName"`
	ClusterName  string             `json:"clusterName"`
	Pools        []*EdgeSpecPoolsIn `json:"pools"`
	Provider     *string            `json:"provider"`
	ProviderName string             `json:"providerName"`
	Region       string             `json:"region"`
}

type EdgeSpecPools struct {
	Min    *int   `json:"min"`
	Name   string `json:"name"`
	Config string `json:"config"`
	Max    *int   `json:"max"`
}

type EdgeSpecPoolsIn struct {
	Min    *int   `json:"min"`
	Name   string `json:"name"`
	Config string `json:"config"`
	Max    *int   `json:"max"`
}

type MasterNodeSpec struct {
	Config       string `json:"config"`
	Provider     string `json:"provider"`
	ProviderName string `json:"providerName"`
	Region       string `json:"region"`
	AccountName  string `json:"accountName"`
	ClusterName  string `json:"clusterName"`
}

type MasterNodeSpecIn struct {
	Config       string `json:"config"`
	Provider     string `json:"provider"`
	ProviderName string `json:"providerName"`
	Region       string `json:"region"`
	AccountName  string `json:"accountName"`
	ClusterName  string `json:"clusterName"`
}

type NodePoolSpec struct {
	ClusterName  string `json:"clusterName"`
	EdgeName     string `json:"edgeName"`
	Provider     string `json:"provider"`
	Region       string `json:"region"`
	AccountName  string `json:"accountName"`
	Config       string `json:"config"`
	Max          *int   `json:"max"`
	Min          *int   `json:"min"`
	ProviderName string `json:"providerName"`
}

type NodePoolSpecIn struct {
	ClusterName  string `json:"clusterName"`
	EdgeName     string `json:"edgeName"`
	Provider     string `json:"provider"`
	Region       string `json:"region"`
	AccountName  string `json:"accountName"`
	Config       string `json:"config"`
	Max          *int   `json:"max"`
	Min          *int   `json:"min"`
	ProviderName string `json:"providerName"`
}

type WorkerNodeSpec struct {
	Pool         string `json:"pool"`
	ProviderName string `json:"providerName"`
	Stateful     *bool  `json:"stateful"`
	AccountName  string `json:"accountName"`
	EdgeName     string `json:"edgeName"`
	NodeIndex    *int   `json:"nodeIndex"`
	Provider     string `json:"provider"`
	Region       string `json:"region"`
	ClusterName  string `json:"clusterName"`
	Config       string `json:"config"`
}

type WorkerNodeSpecIn struct {
	Pool         string `json:"pool"`
	ProviderName string `json:"providerName"`
	Stateful     *bool  `json:"stateful"`
	AccountName  string `json:"accountName"`
	EdgeName     string `json:"edgeName"`
	NodeIndex    *int   `json:"nodeIndex"`
	Provider     string `json:"provider"`
	Region       string `json:"region"`
	ClusterName  string `json:"clusterName"`
	Config       string `json:"config"`
}

type SyncAction string

const (
	SyncActionApply  SyncAction = "APPLY"
	SyncActionDelete SyncAction = "DELETE"
)

var AllSyncAction = []SyncAction{
	SyncActionApply,
	SyncActionDelete,
}

func (e SyncAction) IsValid() bool {
	switch e {
	case SyncActionApply, SyncActionDelete:
		return true
	}
	return false
}

func (e SyncAction) String() string {
	return string(e)
}

func (e *SyncAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SyncAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SyncAction", str)
	}
	return nil
}

func (e SyncAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SyncState string

const (
	SyncStateIDLe       SyncState = "IDLE"
	SyncStateInProgress SyncState = "IN_PROGRESS"
	SyncStateReady      SyncState = "READY"
	SyncStateNotReady   SyncState = "NOT_READY"
)

var AllSyncState = []SyncState{
	SyncStateIDLe,
	SyncStateInProgress,
	SyncStateReady,
	SyncStateNotReady,
}

func (e SyncState) IsValid() bool {
	switch e {
	case SyncStateIDLe, SyncStateInProgress, SyncStateReady, SyncStateNotReady:
		return true
	}
	return false
}

func (e SyncState) String() string {
	return string(e)
}

func (e *SyncState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SyncState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SyncState", str)
	}
	return nil
}

func (e SyncState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
