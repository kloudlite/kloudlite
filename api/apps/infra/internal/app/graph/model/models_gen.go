// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"kloudlite.io/apps/infra/internal/entities"
	"kloudlite.io/pkg/repos"
)

type BYOCClusterEdge struct {
	Cursor string                `json:"cursor"`
	Node   *entities.BYOCCluster `json:"node"`
}

type BYOCClusterPaginatedRecords struct {
	Edges      []*BYOCClusterEdge `json:"edges"`
	PageInfo   *PageInfo          `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

type CloudProviderSecretEdge struct {
	Cursor string                        `json:"cursor"`
	Node   *entities.CloudProviderSecret `json:"node"`
}

type CloudProviderSecretPaginatedRecords struct {
	Edges      []*CloudProviderSecretEdge `json:"edges"`
	PageInfo   *PageInfo                  `json:"pageInfo"`
	TotalCount int                        `json:"totalCount"`
}

type ClusterEdge struct {
	Cursor string            `json:"cursor"`
	Node   *entities.Cluster `json:"node"`
}

type ClusterPaginatedRecords struct {
	Edges      []*ClusterEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

type DomainEntryEdge struct {
	Cursor string                `json:"cursor"`
	Node   *entities.DomainEntry `json:"node"`
}

type DomainEntryPaginatedRecords struct {
	Edges      []*DomainEntryEdge `json:"edges"`
	PageInfo   *PageInfo          `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

type GithubComKloudliteOperatorApisClustersV1BYOCSpec struct {
	AccountName        string   `json:"accountName"`
	DisplayName        *string  `json:"displayName,omitempty"`
	IncomingKafkaTopic string   `json:"incomingKafkaTopic"`
	IngressClasses     []string `json:"ingressClasses,omitempty"`
	Provider           string   `json:"provider"`
	PublicIps          []string `json:"publicIps,omitempty"`
	Region             string   `json:"region"`
	StorageClasses     []string `json:"storageClasses,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1BYOCSpecIn struct {
	AccountName        string   `json:"accountName"`
	DisplayName        *string  `json:"displayName,omitempty"`
	IncomingKafkaTopic string   `json:"incomingKafkaTopic"`
	IngressClasses     []string `json:"ingressClasses,omitempty"`
	Provider           string   `json:"provider"`
	PublicIps          []string `json:"publicIps,omitempty"`
	Region             string   `json:"region"`
	StorageClasses     []string `json:"storageClasses,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpec struct {
	AccountID             *string                                                             `json:"accountId,omitempty"`
	AccountName           string                                                              `json:"accountName"`
	AvailabilityMode      GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode `json:"availabilityMode"`
	Aws                   *GithubComKloudliteOperatorApisClustersV1ClusterSpecAws             `json:"aws,omitempty"`
	Azure                 map[string]interface{}                                              `json:"azure,omitempty"`
	CloudProvider         GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProvider    `json:"cloudProvider"`
	ClusterTokenRef       *GithubComKloudliteOperatorApisClustersV1ClusterSpecClusterTokenRef `json:"clusterTokenRef,omitempty"`
	CredentialsRef        *GithubComKloudliteOperatorApisClustersV1ClusterSpecCredentialsRef  `json:"credentialsRef"`
	DNSHostName           *string                                                             `json:"dnsHostName,omitempty"`
	Do                    map[string]interface{}                                              `json:"do,omitempty"`
	Gcp                   map[string]interface{}                                              `json:"gcp,omitempty"`
	KloudliteRelease      string                                                              `json:"kloudliteRelease"`
	MessageQueueTopicName *string                                                             `json:"messageQueueTopicName,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpecAws struct {
	K3sMasters    *GithubComKloudliteOperatorApisClustersV1ClusterSpecAwsK3sMasters `json:"k3sMasters,omitempty"`
	NodePools     map[string]interface{}                                            `json:"nodePools,omitempty"`
	Region        string                                                            `json:"region"`
	SpotNodePools map[string]interface{}                                            `json:"spotNodePools,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpecAwsIn struct {
	K3sMasters    *GithubComKloudliteOperatorApisClustersV1ClusterSpecAwsK3sMastersIn `json:"k3sMasters,omitempty"`
	NodePools     map[string]interface{}                                              `json:"nodePools,omitempty"`
	Region        string                                                              `json:"region"`
	SpotNodePools map[string]interface{}                                              `json:"spotNodePools,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpecAwsK3sMasters struct {
	Ami                    string                 `json:"ami"`
	AmiSSHUsername         string                 `json:"amiSSHUsername"`
	BackupToS3Enabled      bool                   `json:"backupToS3Enabled"`
	CloudflareEnabled      *bool                  `json:"cloudflareEnabled,omitempty"`
	ClusterInternalDNSHost *string                `json:"clusterInternalDnsHost,omitempty"`
	IamInstanceProfileRole *string                `json:"iamInstanceProfileRole,omitempty"`
	InstanceType           string                 `json:"instanceType"`
	Nodes                  map[string]interface{} `json:"nodes,omitempty"`
	NvidiaGpuEnabled       bool                   `json:"nvidiaGpuEnabled"`
	PublicDNSHost          *string                `json:"publicDnsHost,omitempty"`
	RootVolumeSize         int                    `json:"rootVolumeSize"`
	RootVolumeType         string                 `json:"rootVolumeType"`
	TaintMasterNodes       bool                   `json:"taintMasterNodes"`
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpecAwsK3sMastersIn struct {
	Ami                    string                 `json:"ami"`
	AmiSSHUsername         string                 `json:"amiSSHUsername"`
	BackupToS3Enabled      bool                   `json:"backupToS3Enabled"`
	CloudflareEnabled      *bool                  `json:"cloudflareEnabled,omitempty"`
	ClusterInternalDNSHost *string                `json:"clusterInternalDnsHost,omitempty"`
	IamInstanceProfileRole *string                `json:"iamInstanceProfileRole,omitempty"`
	InstanceType           string                 `json:"instanceType"`
	Nodes                  map[string]interface{} `json:"nodes,omitempty"`
	NvidiaGpuEnabled       bool                   `json:"nvidiaGpuEnabled"`
	PublicDNSHost          *string                `json:"publicDnsHost,omitempty"`
	RootVolumeSize         int                    `json:"rootVolumeSize"`
	RootVolumeType         string                 `json:"rootVolumeType"`
	TaintMasterNodes       bool                   `json:"taintMasterNodes"`
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpecClusterTokenRef struct {
	Key       string  `json:"key"`
	Name      string  `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpecClusterTokenRefIn struct {
	Key       string  `json:"key"`
	Name      string  `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpecCredentialsRef struct {
	Name      string  `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpecCredentialsRefIn struct {
	Name      string  `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpecIn struct {
	AccountID             *string                                                               `json:"accountId,omitempty"`
	AccountName           string                                                                `json:"accountName"`
	AvailabilityMode      GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode   `json:"availabilityMode"`
	Aws                   *GithubComKloudliteOperatorApisClustersV1ClusterSpecAwsIn             `json:"aws,omitempty"`
	Azure                 map[string]interface{}                                                `json:"azure,omitempty"`
	CloudProvider         GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProvider      `json:"cloudProvider"`
	ClusterTokenRef       *GithubComKloudliteOperatorApisClustersV1ClusterSpecClusterTokenRefIn `json:"clusterTokenRef,omitempty"`
	CredentialsRef        *GithubComKloudliteOperatorApisClustersV1ClusterSpecCredentialsRefIn  `json:"credentialsRef"`
	DNSHostName           *string                                                               `json:"dnsHostName,omitempty"`
	Do                    map[string]interface{}                                                `json:"do,omitempty"`
	Gcp                   map[string]interface{}                                                `json:"gcp,omitempty"`
	KloudliteRelease      string                                                                `json:"kloudliteRelease"`
	MessageQueueTopicName *string                                                               `json:"messageQueueTopicName,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1NodePoolSpec struct {
	AwsNodeConfig *GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfig `json:"awsNodeConfig,omitempty"`
	Labels        map[string]interface{}                                             `json:"labels,omitempty"`
	MaxCount      int                                                                `json:"maxCount"`
	MinCount      int                                                                `json:"minCount"`
	Taints        []string                                                           `json:"taints,omitempty"`
	TargetCount   int                                                                `json:"targetCount"`
}

type GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfig struct {
	ImageID       *string                                                                         `json:"imageId,omitempty"`
	IsGpu         *bool                                                                           `json:"isGpu,omitempty"`
	OnDemandSpecs *GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigOnDemandSpecs `json:"onDemandSpecs,omitempty"`
	ProvisionMode GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionMode  `json:"provisionMode"`
	Region        *string                                                                         `json:"region,omitempty"`
	SpotSpecs     *GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigSpotSpecs     `json:"spotSpecs,omitempty"`
	Vpc           *string                                                                         `json:"vpc,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigIn struct {
	ImageID       *string                                                                           `json:"imageId,omitempty"`
	IsGpu         *bool                                                                             `json:"isGpu,omitempty"`
	OnDemandSpecs *GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigOnDemandSpecsIn `json:"onDemandSpecs,omitempty"`
	ProvisionMode GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionMode    `json:"provisionMode"`
	Region        *string                                                                           `json:"region,omitempty"`
	SpotSpecs     *GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigSpotSpecsIn     `json:"spotSpecs,omitempty"`
	Vpc           *string                                                                           `json:"vpc,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigOnDemandSpecs struct {
	InstanceType string `json:"instanceType"`
}

type GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigOnDemandSpecsIn struct {
	InstanceType string `json:"instanceType"`
}

type GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigSpotSpecs struct {
	CPUMax int `json:"cpuMax"`
	CPUMin int `json:"cpuMin"`
	MemMax int `json:"memMax"`
	MemMin int `json:"memMin"`
}

type GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigSpotSpecsIn struct {
	CPUMax int `json:"cpuMax"`
	CPUMin int `json:"cpuMin"`
	MemMax int `json:"memMax"`
	MemMin int `json:"memMin"`
}

type GithubComKloudliteOperatorApisClustersV1NodePoolSpecIn struct {
	AwsNodeConfig *GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigIn `json:"awsNodeConfig,omitempty"`
	Labels        map[string]interface{}                                               `json:"labels,omitempty"`
	MaxCount      int                                                                  `json:"maxCount"`
	MinCount      int                                                                  `json:"minCount"`
	Taints        []string                                                             `json:"taints,omitempty"`
	TargetCount   int                                                                  `json:"targetCount"`
}

type GithubComKloudliteOperatorApisClustersV1NodeSpec struct {
	ClusterName  *string                                                  `json:"clusterName,omitempty"`
	Labels       map[string]interface{}                                   `json:"labels,omitempty"`
	NodePoolName *string                                                  `json:"nodePoolName,omitempty"`
	NodeType     GithubComKloudliteOperatorApisClustersV1NodeSpecNodeType `json:"nodeType"`
	Taints       []string                                                 `json:"taints,omitempty"`
}

type GithubComKloudliteOperatorApisClustersV1NodeSpecIn struct {
	ClusterName  *string                                                  `json:"clusterName,omitempty"`
	Labels       map[string]interface{}                                   `json:"labels,omitempty"`
	NodePoolName *string                                                  `json:"nodePoolName,omitempty"`
	NodeType     GithubComKloudliteOperatorApisClustersV1NodeSpecNodeType `json:"nodeType"`
	Taints       []string                                                 `json:"taints,omitempty"`
}

type GithubComKloudliteOperatorApisWireguardV1DeviceSpec struct {
	Offset     *int                                                        `json:"offset,omitempty"`
	Ports      []*GithubComKloudliteOperatorApisWireguardV1DeviceSpecPorts `json:"ports,omitempty"`
	ServerName string                                                      `json:"serverName"`
}

type GithubComKloudliteOperatorApisWireguardV1DeviceSpecIn struct {
	Offset     *int                                                          `json:"offset,omitempty"`
	Ports      []*GithubComKloudliteOperatorApisWireguardV1DeviceSpecPortsIn `json:"ports,omitempty"`
	ServerName string                                                        `json:"serverName"`
}

type GithubComKloudliteOperatorApisWireguardV1DeviceSpecPorts struct {
	Port       *int `json:"port,omitempty"`
	TargetPort *int `json:"targetPort,omitempty"`
}

type GithubComKloudliteOperatorApisWireguardV1DeviceSpecPortsIn struct {
	Port       *int `json:"port,omitempty"`
	TargetPort *int `json:"targetPort,omitempty"`
}

type GithubComKloudliteOperatorPkgRawJSONRawJSON struct {
	RawMessage interface{} `json:"RawMessage,omitempty"`
}

type KloudliteIoAppsInfraInternalEntitiesHelmStatusVal struct {
	IsReady *bool  `json:"isReady,omitempty"`
	Message string `json:"message"`
}

type NodeEdge struct {
	Cursor string         `json:"cursor"`
	Node   *entities.Node `json:"node"`
}

type NodeIn struct {
	APIVersion *string                                             `json:"apiVersion,omitempty"`
	Kind       *string                                             `json:"kind,omitempty"`
	Metadata   *v1.ObjectMeta                                      `json:"metadata"`
	Spec       *GithubComKloudliteOperatorApisClustersV1NodeSpecIn `json:"spec"`
}

type NodePaginatedRecords struct {
	Edges      []*NodeEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

type NodePoolEdge struct {
	Cursor string             `json:"cursor"`
	Node   *entities.NodePool `json:"node"`
}

type NodePoolPaginatedRecords struct {
	Edges      []*NodePoolEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

type PageInfo struct {
	EndCursor       *string `json:"endCursor,omitempty"`
	HasNextPage     *bool   `json:"hasNextPage,omitempty"`
	HasPreviousPage *bool   `json:"hasPreviousPage,omitempty"`
	StartCursor     *string `json:"startCursor,omitempty"`
}

type SearchCluster struct {
	CloudProviderName *repos.MatchFilter `json:"cloudProviderName,omitempty"`
	IsReady           *repos.MatchFilter `json:"isReady,omitempty"`
	Region            *repos.MatchFilter `json:"region,omitempty"`
	Text              *repos.MatchFilter `json:"text,omitempty"`
}

type SearchDomainEntry struct {
	ClusterName *repos.MatchFilter `json:"clusterName,omitempty"`
	Text        *repos.MatchFilter `json:"text,omitempty"`
}

type SearchNodepool struct {
	Text *repos.MatchFilter `json:"text,omitempty"`
}

type SearchProviderSecret struct {
	CloudProviderName *repos.MatchFilter `json:"cloudProviderName,omitempty"`
	Text              *repos.MatchFilter `json:"text,omitempty"`
}

type SearchVPNDevices struct {
	Text              *repos.MatchFilter `json:"text,omitempty"`
	IsReady           *repos.MatchFilter `json:"isReady,omitempty"`
	MarkedForDeletion *repos.MatchFilter `json:"markedForDeletion,omitempty"`
}

type VPNDeviceEdge struct {
	Cursor string              `json:"cursor"`
	Node   *entities.VPNDevice `json:"node"`
}

type VPNDevicePaginatedRecords struct {
	Edges      []*VPNDeviceEdge `json:"edges"`
	PageInfo   *PageInfo        `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode string

const (
	GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityModeDev GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode = "dev"
	GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityModeHa  GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode = "HA"
)

var AllGithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode = []GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode{
	GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityModeDev,
	GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityModeHa,
}

func (e GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode) IsValid() bool {
	switch e {
	case GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityModeDev, GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityModeHa:
		return true
	}
	return false
}

func (e GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode) String() string {
	return string(e)
}

func (e *GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAvailabilityMode", str)
	}
	return nil
}

func (e GithubComKloudliteOperatorApisClustersV1ClusterSpecAvailabilityMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProvider string

const (
	GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProviderAws   GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProvider = "aws"
	GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProviderAzure GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProvider = "azure"
	GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProviderDo    GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProvider = "do"
	GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProviderGcp   GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProvider = "gcp"
)

var AllGithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProvider = []GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProvider{
	GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProviderAws,
	GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProviderAzure,
	GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProviderDo,
	GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProviderGcp,
}

func (e GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProvider) IsValid() bool {
	switch e {
	case GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProviderAws, GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProviderAzure, GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProviderDo, GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProviderGcp:
		return true
	}
	return false
}

func (e GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProvider) String() string {
	return string(e)
}

func (e *GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecCloudProvider", str)
	}
	return nil
}

func (e GithubComKloudliteOperatorApisClustersV1ClusterSpecCloudProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionMode string

const (
	GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionModeOnDemand GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionMode = "on_demand"
	GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionModeReserved GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionMode = "reserved"
	GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionModeSpot     GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionMode = "spot"
)

var AllGithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionMode = []GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionMode{
	GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionModeOnDemand,
	GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionModeReserved,
	GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionModeSpot,
}

func (e GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionMode) IsValid() bool {
	switch e {
	case GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionModeOnDemand, GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionModeReserved, GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionModeSpot:
		return true
	}
	return false
}

func (e GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionMode) String() string {
	return string(e)
}

func (e *GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfigProvisionMode", str)
	}
	return nil
}

func (e GithubComKloudliteOperatorApisClustersV1NodePoolSpecAwsNodeConfigProvisionMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GithubComKloudliteOperatorApisClustersV1NodeSpecNodeType string

const (
	GithubComKloudliteOperatorApisClustersV1NodeSpecNodeTypeCluster GithubComKloudliteOperatorApisClustersV1NodeSpecNodeType = "cluster"
	GithubComKloudliteOperatorApisClustersV1NodeSpecNodeTypeMaster  GithubComKloudliteOperatorApisClustersV1NodeSpecNodeType = "master"
	GithubComKloudliteOperatorApisClustersV1NodeSpecNodeTypeWorker  GithubComKloudliteOperatorApisClustersV1NodeSpecNodeType = "worker"
)

var AllGithubComKloudliteOperatorApisClustersV1NodeSpecNodeType = []GithubComKloudliteOperatorApisClustersV1NodeSpecNodeType{
	GithubComKloudliteOperatorApisClustersV1NodeSpecNodeTypeCluster,
	GithubComKloudliteOperatorApisClustersV1NodeSpecNodeTypeMaster,
	GithubComKloudliteOperatorApisClustersV1NodeSpecNodeTypeWorker,
}

func (e GithubComKloudliteOperatorApisClustersV1NodeSpecNodeType) IsValid() bool {
	switch e {
	case GithubComKloudliteOperatorApisClustersV1NodeSpecNodeTypeCluster, GithubComKloudliteOperatorApisClustersV1NodeSpecNodeTypeMaster, GithubComKloudliteOperatorApisClustersV1NodeSpecNodeTypeWorker:
		return true
	}
	return false
}

func (e GithubComKloudliteOperatorApisClustersV1NodeSpecNodeType) String() string {
	return string(e)
}

func (e *GithubComKloudliteOperatorApisClustersV1NodeSpecNodeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GithubComKloudliteOperatorApisClustersV1NodeSpecNodeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Github_com__kloudlite__operator__apis__clusters__v1_NodeSpecNodeType", str)
	}
	return nil
}

func (e GithubComKloudliteOperatorApisClustersV1NodeSpecNodeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
