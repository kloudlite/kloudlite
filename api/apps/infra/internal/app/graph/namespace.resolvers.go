package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"github.com/kloudlite/api/pkg/errors"
	"time"

	"github.com/kloudlite/api/apps/infra/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/infra/internal/app/graph/model"
	"github.com/kloudlite/api/apps/infra/internal/entities"
	fn "github.com/kloudlite/api/pkg/functions"
	"github.com/kloudlite/api/pkg/repos"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CreationTime is the resolver for the creationTime field.
func (r *namespaceResolver) CreationTime(ctx context.Context, obj *entities.Namespace) (string, error) {
	if obj == nil {
		return "", errors.Newf("namespace/creation-time is nil")
	}
	return obj.CreationTime.Format(time.RFC3339), nil
}

// ID is the resolver for the id field.
func (r *namespaceResolver) ID(ctx context.Context, obj *entities.Namespace) (repos.ID, error) {
	if obj == nil {
		return "", errors.Newf("namespace is nil")
	}
	return obj.Id, nil
}

// Spec is the resolver for the spec field.
func (r *namespaceResolver) Spec(ctx context.Context, obj *entities.Namespace) (*model.K8sIoAPICoreV1NamespaceSpec, error) {
	var m model.K8sIoAPICoreV1NamespaceSpec
	if err := fn.JsonConversion(obj.Spec, &m); err != nil {
		return nil, errors.NewE(err)
	}
	return &m, nil
}

// Status is the resolver for the status field.
func (r *namespaceResolver) Status(ctx context.Context, obj *entities.Namespace) (*model.K8sIoAPICoreV1NamespaceStatus, error) {
	var m model.K8sIoAPICoreV1NamespaceStatus
	if err := fn.JsonConversion(obj.Status, &m); err != nil {
		return nil, errors.NewE(err)
	}
	return &m, nil
}

// UpdateTime is the resolver for the updateTime field.
func (r *namespaceResolver) UpdateTime(ctx context.Context, obj *entities.Namespace) (string, error) {
	if obj == nil || obj.UpdateTime.IsZero() {
		return "", errors.Newf("namespace/update-time is nil")
	}
	return obj.UpdateTime.Format(time.RFC3339), nil
}

// Metadata is the resolver for the metadata field.
func (r *namespaceInResolver) Metadata(ctx context.Context, obj *entities.Namespace, data *v1.ObjectMeta) error {
	if obj == nil {
		return errors.Newf("namespace is nil")
	}
	return fn.JsonConversion(data, &obj.ObjectMeta)
}

// Spec is the resolver for the spec field.
func (r *namespaceInResolver) Spec(ctx context.Context, obj *entities.Namespace, data *model.K8sIoAPICoreV1NamespaceSpecIn) error {
	if obj == nil {
		return errors.Newf("namespace is nil")
	}
	return fn.JsonConversion(data, &obj.Spec)
}

// Status is the resolver for the status field.
func (r *namespaceInResolver) Status(ctx context.Context, obj *entities.Namespace, data *model.K8sIoAPICoreV1NamespaceStatusIn) error {
	if obj == nil {
		return errors.Newf("namespace obj is nil")
	}
	return fn.JsonConversion(data, &obj.Status)
}

// Namespace returns generated.NamespaceResolver implementation.
func (r *Resolver) Namespace() generated.NamespaceResolver { return &namespaceResolver{r} }

// NamespaceIn returns generated.NamespaceInResolver implementation.
func (r *Resolver) NamespaceIn() generated.NamespaceInResolver { return &namespaceInResolver{r} }

type namespaceResolver struct{ *Resolver }
type namespaceInResolver struct{ *Resolver }
