type Github_com__kloudlite__operator__apis__clusters__v1_BYOCSpec @shareable {
  accountName: String!
  displayName: String
  incomingKafkaTopic: String!
  ingressClasses: [String!]
  provider: String!
  publicIps: [String!]
  region: String!
  storageClasses: [String!]
}

type Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpec @shareable {
  accountId: String!
  accountName: String!
  agentHelmValuesRef: Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAgentHelmValuesRef
  availabilityMode: Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAvailabilityMode!
  aws: Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAws
  cloudProvider: Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecCloudProvider!
  credentialsRef: Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecCredentialsRef!
  disableSSH: Boolean
  nodeIps: [String!]
  operatorsHelmValuesRef: Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecOperatorsHelmValuesRef
  vpc: String
}

type Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAgentHelmValuesRef @shareable {
  key: String!
  name: String!
  namespace: String
}

type Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAws @shareable {
  ami: String!
  ec2NodesConfig: Map
  iamInstanceProfileRole: String
  region: String!
  spotNodesConfig: Map
  spotSettings: Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAwsSpotSettings
}

type Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAwsSpotSettings @shareable {
  spotFleetTaggingRoleName: String!
}

type Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecCredentialsRef @shareable {
  name: String!
  namespace: String
}

type Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecOperatorsHelmValuesRef @shareable {
  key: String!
  name: String!
  namespace: String
}

type Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpec @shareable {
  awsNodeConfig: Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfig
  labels: Map
  maxCount: Int!
  minCount: Int!
  taints: [String!]
  targetCount: Int!
}

type Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfig @shareable {
  imageId: String
  isGpu: Boolean
  onDemandSpecs: Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfigOnDemandSpecs
  provisionMode: Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfigProvisionMode!
  region: String
  spotSpecs: Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfigSpotSpecs
  vpc: String
}

type Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfigOnDemandSpecs @shareable {
  instanceType: String!
}

type Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfigSpotSpecs @shareable {
  cpuMax: Int!
  cpuMin: Int!
  memMax: Int!
  memMin: Int!
}

type Github_com__kloudlite__operator__apis__clusters__v1_NodeSpec @shareable {
  clusterName: String
  labels: Map
  nodePoolName: String
  nodeType: Github_com__kloudlite__operator__apis__clusters__v1_NodeSpecNodeType!
  taints: [String!]
}

type Github_com__kloudlite__operator__pkg__operator_Check @shareable {
  generation: Int
  message: String
  status: Boolean!
}

type Github_com__kloudlite__operator__pkg__operator_ResourceRef @shareable {
  apiVersion: String
  kind: String
  name: String!
  namespace: String!
}

type Github_com__kloudlite__operator__pkg__operator_Status @shareable {
  checks: Map
  isReady: Boolean!
  lastReconcileTime: Date
  message: Github_com__kloudlite__operator__pkg__raw___json_RawJson
  resources: [Github_com__kloudlite__operator__pkg__operator_ResourceRef!]
}

type Github_com__kloudlite__operator__pkg__raw___json_RawJson @shareable {
  RawMessage: Any
}

type Kloudlite_io__apps__infra__internal__entities_HelmStatusVal @shareable {
  isReady: Boolean
  message: String!
}

type Kloudlite_io__common_CreatedOrUpdatedBy @shareable {
  userEmail: String!
  userId: String!
  userName: String!
}

type Kloudlite_io__pkg__types_SyncStatus @shareable {
  action: Kloudlite_io__pkg__types_SyncStatusAction!
  error: String
  lastSyncedAt: Date
  recordVersion: Int!
  state: Kloudlite_io__pkg__types_SyncStatusState!
  syncScheduledAt: Date
}

type Metadata @shareable {
  annotations: Map
  creationTimestamp: Date!
  deletionTimestamp: Date
  generation: Int!
  labels: Map
  name: String!
  namespace: String
}

type PageInfo @shareable {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

input Github_com__kloudlite__operator__apis__clusters__v1_BYOCSpecIn {
  accountName: String!
  displayName: String
  incomingKafkaTopic: String!
  ingressClasses: [String!]
  provider: String!
  publicIps: [String!]
  region: String!
  storageClasses: [String!]
}

input Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAgentHelmValuesRefIn {
  key: String!
  name: String!
  namespace: String
}

input Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAwsIn {
  ami: String!
  ec2NodesConfig: Map
  iamInstanceProfileRole: String
  region: String!
  spotNodesConfig: Map
  spotSettings: Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAwsSpotSettingsIn
}

input Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAwsSpotSettingsIn {
  spotFleetTaggingRoleName: String!
}

input Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecCredentialsRefIn {
  name: String!
  namespace: String
}

input Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecIn {
  accountId: String!
  accountName: String!
  agentHelmValuesRef: Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAgentHelmValuesRefIn
  availabilityMode: Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAvailabilityMode!
  aws: Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAwsIn
  cloudProvider: Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecCloudProvider!
  credentialsRef: Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecCredentialsRefIn!
  disableSSH: Boolean
  nodeIps: [String!]
  operatorsHelmValuesRef: Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecOperatorsHelmValuesRefIn
  vpc: String
}

input Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecOperatorsHelmValuesRefIn {
  key: String!
  name: String!
  namespace: String
}

input Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfigIn {
  imageId: String
  isGpu: Boolean
  onDemandSpecs: Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfigOnDemandSpecsIn
  provisionMode: Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfigProvisionMode!
  region: String
  spotSpecs: Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfigSpotSpecsIn
  vpc: String
}

input Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfigOnDemandSpecsIn {
  instanceType: String!
}

input Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfigSpotSpecsIn {
  cpuMax: Int!
  cpuMin: Int!
  memMax: Int!
  memMin: Int!
}

input Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecIn {
  awsNodeConfig: Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfigIn
  labels: Map
  maxCount: Int!
  minCount: Int!
  taints: [String!]
  targetCount: Int!
}

input Github_com__kloudlite__operator__apis__clusters__v1_NodeSpecIn {
  clusterName: String
  labels: Map
  nodePoolName: String
  nodeType: Github_com__kloudlite__operator__apis__clusters__v1_NodeSpecNodeType!
  taints: [String!]
}

input MetadataIn {
  annotations: Map
  labels: Map
  name: String!
  namespace: String
}

enum Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecAvailabilityMode {
  dev
  HA
}

enum Github_com__kloudlite__operator__apis__clusters__v1_ClusterSpecCloudProvider {
  aws
  azure
  do
  gcp
}

enum Github_com__kloudlite__operator__apis__clusters__v1_NodePoolSpecAwsNodeConfigProvisionMode {
  on_demand
  reserved
  spot
}

enum Github_com__kloudlite__operator__apis__clusters__v1_NodeSpecNodeType {
  cluster
  master
  worker
}

enum Kloudlite_io__pkg__types_SyncStatusAction {
  APPLY
  DELETE
}

enum Kloudlite_io__pkg__types_SyncStatusState {
  APPLIED_AT_AGENT
  ERRORED_AT_AGENT
  IDLE
  IN_QUEUE
  RECEIVED_UPDATE_FROM_AGENT
}

