package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"github.com/kloudlite/api/pkg/errors"
	"time"

	"github.com/kloudlite/api/apps/infra/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/infra/internal/app/graph/model"
	"github.com/kloudlite/api/apps/infra/internal/entities"
	fn "github.com/kloudlite/api/pkg/functions"
	"github.com/kloudlite/api/pkg/repos"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CreationTime is the resolver for the creationTime field.
func (r *volumeAttachmentResolver) CreationTime(ctx context.Context, obj *entities.VolumeAttachment) (string, error) {
	if obj == nil {
		return "", errors.Newf("volume-attachment/creation-time is nil")
	}
	return obj.CreationTime.Format(time.RFC3339), nil
}

// ID is the resolver for the id field.
func (r *volumeAttachmentResolver) ID(ctx context.Context, obj *entities.VolumeAttachment) (repos.ID, error) {
	if obj == nil {
		return "", errors.Newf("volume attachment is nil")
	}
	return obj.Id, nil
}

// Spec is the resolver for the spec field.
func (r *volumeAttachmentResolver) Spec(ctx context.Context, obj *entities.VolumeAttachment) (*model.K8sIoAPIStorageV1VolumeAttachmentSpec, error) {
	var m model.K8sIoAPIStorageV1VolumeAttachmentSpec
	if err := fn.JsonConversion(obj.Spec, &m); err != nil {
		return nil, errors.NewE(err)
	}
	return &m, nil
}

// Status is the resolver for the status field.
func (r *volumeAttachmentResolver) Status(ctx context.Context, obj *entities.VolumeAttachment) (*model.K8sIoAPIStorageV1VolumeAttachmentStatus, error) {
	var m model.K8sIoAPIStorageV1VolumeAttachmentStatus
	if err := fn.JsonConversion(obj.Status, &m); err != nil {
		return nil, errors.NewE(err)
	}
	return &m, nil
}

// UpdateTime is the resolver for the updateTime field.
func (r *volumeAttachmentResolver) UpdateTime(ctx context.Context, obj *entities.VolumeAttachment) (string, error) {
	if obj == nil || obj.UpdateTime.IsZero() {
		return "", errors.Newf("volume-attachment/update-time is nil")
	}
	return obj.UpdateTime.Format(time.RFC3339), nil
}

// Metadata is the resolver for the metadata field.
func (r *volumeAttachmentInResolver) Metadata(ctx context.Context, obj *entities.VolumeAttachment, data *v1.ObjectMeta) error {
	if obj == nil {
		return errors.Newf("volume attachment is nil")
	}
	return fn.JsonConversion(data, &obj.ObjectMeta)
}

// Spec is the resolver for the spec field.
func (r *volumeAttachmentInResolver) Spec(ctx context.Context, obj *entities.VolumeAttachment, data *model.K8sIoAPIStorageV1VolumeAttachmentSpecIn) error {
	if obj == nil {
		return errors.Newf("volume attachment is nil")
	}
	return fn.JsonConversion(data, &obj.Spec)
}

// Status is the resolver for the status field.
func (r *volumeAttachmentInResolver) Status(ctx context.Context, obj *entities.VolumeAttachment, data *model.K8sIoAPIStorageV1VolumeAttachmentStatusIn) error {
	if obj == nil {
		return errors.Newf("volume attachment is nil")
	}
	return fn.JsonConversion(data, &obj.Status)
}

// VolumeAttachment returns generated.VolumeAttachmentResolver implementation.
func (r *Resolver) VolumeAttachment() generated.VolumeAttachmentResolver {
	return &volumeAttachmentResolver{r}
}

// VolumeAttachmentIn returns generated.VolumeAttachmentInResolver implementation.
func (r *Resolver) VolumeAttachmentIn() generated.VolumeAttachmentInResolver {
	return &volumeAttachmentInResolver{r}
}

type volumeAttachmentResolver struct{ *Resolver }
type volumeAttachmentInResolver struct{ *Resolver }
