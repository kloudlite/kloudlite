package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"github.com/kloudlite/api/pkg/errors"
	"time"

	"github.com/kloudlite/api/apps/infra/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/infra/internal/app/graph/model"
	"github.com/kloudlite/api/apps/infra/internal/entities"
	fn "github.com/kloudlite/api/pkg/functions"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CreationTime is the resolver for the creationTime field.
func (r *vPNDeviceResolver) CreationTime(ctx context.Context, obj *entities.VPNDevice) (string, error) {
	if obj == nil {
		return "", errors.Newf("obj is nil")
	}
	return obj.CreationTime.Format(time.RFC3339), nil
}

// ID is the resolver for the id field.
func (r *vPNDeviceResolver) ID(ctx context.Context, obj *entities.VPNDevice) (string, error) {
	if obj == nil {
		return "", errors.Newf("obj is nil")
	}
	return string(obj.Id), nil
}

// Spec is the resolver for the spec field.
func (r *vPNDeviceResolver) Spec(ctx context.Context, obj *entities.VPNDevice) (*model.GithubComKloudliteOperatorApisWireguardV1DeviceSpec, error) {
	if obj == nil {
		return nil, errors.Newf("obj is nil")
	}
	var m model.GithubComKloudliteOperatorApisWireguardV1DeviceSpec
	if err := fn.JsonConversion(obj.Spec, &m); err != nil {
		return nil, err
	}
	return &m, nil
}

// UpdateTime is the resolver for the updateTime field.
func (r *vPNDeviceResolver) UpdateTime(ctx context.Context, obj *entities.VPNDevice) (string, error) {
	if obj == nil {
		return "", errors.Newf("obj is nil")
	}
	return obj.UpdateTime.Format(time.RFC3339), nil
}

// WireguardConfig is the resolver for the wireguardConfig field.
func (r *vPNDeviceResolver) WireguardConfig(ctx context.Context, obj *entities.VPNDevice) (*model.KloudliteIoPkgTypesEncodedString, error) {
	var m model.KloudliteIoPkgTypesEncodedString
	if err := fn.JsonConversion(obj.WireguardConfig, &m); err != nil {
		return nil, err
	}
	return &m, nil
}

// Metadata is the resolver for the metadata field.
func (r *vPNDeviceInResolver) Metadata(ctx context.Context, obj *entities.VPNDevice, data *v1.ObjectMeta) error {
	if obj == nil {
		return nil
	}

	return fn.JsonConversion(data, &obj.ObjectMeta)
}

// Spec is the resolver for the spec field.
func (r *vPNDeviceInResolver) Spec(ctx context.Context, obj *entities.VPNDevice, data *model.GithubComKloudliteOperatorApisWireguardV1DeviceSpecIn) error {
	if obj == nil {
		return nil
	}

	return fn.JsonConversion(data, &obj.Spec)
}

// VPNDevice returns generated.VPNDeviceResolver implementation.
func (r *Resolver) VPNDevice() generated.VPNDeviceResolver { return &vPNDeviceResolver{r} }

// VPNDeviceIn returns generated.VPNDeviceInResolver implementation.
func (r *Resolver) VPNDeviceIn() generated.VPNDeviceInResolver { return &vPNDeviceInResolver{r} }

type vPNDeviceResolver struct{ *Resolver }
type vPNDeviceInResolver struct{ *Resolver }
