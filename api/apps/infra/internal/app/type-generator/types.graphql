type Cluster {
	id: String!
	metadata: ObjectMeta
	spec: ClusterSpec
	status: Status
	kind: String
	apiVersion: String
}

type ObjectMeta {
	name: String
	generateName: String
	namespace: String
	selfLink: String
	uid: String
	resourceVersion: String
	generation: Int
	creationTimestamp: String
	deletionTimestamp: String
	deletionGracePeriodSeconds: Int
	labels: String
	annotations: String
	ownerReferences: [OwnerReference]
	finalizers: [String]
	managedFields: [ManagedFieldsEntry]
}

type OwnerReference {
	apiVersion: String!
	kind: String!
	name: String!
	uid: String!
	controller: Boolean
	blockOwnerDeletion: Boolean
}

type ManagedFieldsEntry {
	manager: String
	operation: String
	apiVersion: String
	time: String
	fieldsType: String
	fieldsV1: String
	subresource: String
}

type ClusterSpec {
	accountName: String!
	providerName: String!
	provider: String!
	count: Int!
	region: String!
	config: String!
}

type Status {
	isReady: Boolean!
	message: String
	messages: [ContainerMessage]
	displayVars: String
	generatedVars: String
	conditions: [Condition]
	childConditions: [Condition]
	opsConditions: [Condition]
	checks: String
	lastReconcileTime: String
}

type ContainerMessage {
	state: String!
	pod: String
	container: String
	reason: String!
	message: String!
	exitCode: Int
}

type Condition {
	type: String!
	status: String!
	observedGeneration: Int
	lastTransitionTime: String!
	reason: String!
	message: String!
}

type MasterNode {
	metadata: ObjectMeta
	spec: MasterNodeSpec
	status: Status
}

type MasterNodeSpec {
	accountName: String!
	clusterName: String!
	mysqlURI: String!
	providerName: String!
	provider: String!
	config: String!
	region: String!
}

type CloudProvider {
	metadata: ObjectMeta
	spec: CloudProviderSpec
	status: Status
}

type CloudProviderSpec {
	accountName: String!
	providerSecret: ObjectRef!
}

type ObjectRef {
	name: String!
	namespace: String!
}

type Edge {
	BaseEntity: BaseEntity!
	metadata: ObjectMeta
	spec: EdgeSpec
	status: Status
}

type EdgeSpec {
	accountName: String!
	provider: String
	region: String!
	providerName: String!
	clusterName: String!
	pools: [Pool]
}

type Pool {
	name: String!
	config: String!
	min: Int
	max: Int
}

type NodePool {
	metadata: ObjectMeta
	spec: NodePoolSpec
	status: Status
}

type NodePoolSpec {
	accountName: String!
	clusterName: String!
	edgeName: String!
	provider: String!
	providerName: String!
	region: String!
	config: String!
	min: Int
	max: Int
}

