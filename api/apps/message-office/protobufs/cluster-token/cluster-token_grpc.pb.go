// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: cluster-token.proto

package cluster_token

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClusterToken_GenerateClusterToken_FullMethodName = "/ClusterToken/GenerateClusterToken"
	ClusterToken_GetClusterToken_FullMethodName      = "/ClusterToken/GetClusterToken"
)

// ClusterTokenClient is the client API for ClusterToken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterTokenClient interface {
	GenerateClusterToken(ctx context.Context, in *GenerateClusterTokenIn, opts ...grpc.CallOption) (*GenerateClusterTokenOut, error)
	GetClusterToken(ctx context.Context, in *GetClusterTokenIn, opts ...grpc.CallOption) (*GetClusterTokenOut, error)
}

type clusterTokenClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterTokenClient(cc grpc.ClientConnInterface) ClusterTokenClient {
	return &clusterTokenClient{cc}
}

func (c *clusterTokenClient) GenerateClusterToken(ctx context.Context, in *GenerateClusterTokenIn, opts ...grpc.CallOption) (*GenerateClusterTokenOut, error) {
	out := new(GenerateClusterTokenOut)
	err := c.cc.Invoke(ctx, ClusterToken_GenerateClusterToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterTokenClient) GetClusterToken(ctx context.Context, in *GetClusterTokenIn, opts ...grpc.CallOption) (*GetClusterTokenOut, error) {
	out := new(GetClusterTokenOut)
	err := c.cc.Invoke(ctx, ClusterToken_GetClusterToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterTokenServer is the server API for ClusterToken service.
// All implementations must embed UnimplementedClusterTokenServer
// for forward compatibility
type ClusterTokenServer interface {
	GenerateClusterToken(context.Context, *GenerateClusterTokenIn) (*GenerateClusterTokenOut, error)
	GetClusterToken(context.Context, *GetClusterTokenIn) (*GetClusterTokenOut, error)
	mustEmbedUnimplementedClusterTokenServer()
}

// UnimplementedClusterTokenServer must be embedded to have forward compatible implementations.
type UnimplementedClusterTokenServer struct {
}

func (UnimplementedClusterTokenServer) GenerateClusterToken(context.Context, *GenerateClusterTokenIn) (*GenerateClusterTokenOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateClusterToken not implemented")
}
func (UnimplementedClusterTokenServer) GetClusterToken(context.Context, *GetClusterTokenIn) (*GetClusterTokenOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterToken not implemented")
}
func (UnimplementedClusterTokenServer) mustEmbedUnimplementedClusterTokenServer() {}

// UnsafeClusterTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterTokenServer will
// result in compilation errors.
type UnsafeClusterTokenServer interface {
	mustEmbedUnimplementedClusterTokenServer()
}

func RegisterClusterTokenServer(s grpc.ServiceRegistrar, srv ClusterTokenServer) {
	s.RegisterService(&ClusterToken_ServiceDesc, srv)
}

func _ClusterToken_GenerateClusterToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateClusterTokenIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterTokenServer).GenerateClusterToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterToken_GenerateClusterToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterTokenServer).GenerateClusterToken(ctx, req.(*GenerateClusterTokenIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterToken_GetClusterToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterTokenIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterTokenServer).GetClusterToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterToken_GetClusterToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterTokenServer).GetClusterToken(ctx, req.(*GetClusterTokenIn))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterToken_ServiceDesc is the grpc.ServiceDesc for ClusterToken service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterToken_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClusterToken",
	HandlerType: (*ClusterTokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateClusterToken",
			Handler:    _ClusterToken_GenerateClusterToken_Handler,
		},
		{
			MethodName: "GetClusterToken",
			Handler:    _ClusterToken_GetClusterToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster-token.proto",
}
