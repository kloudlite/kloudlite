// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: platform-edge.proto

package platform_edge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlatformEdge_ListPlatformEdgeClusters_FullMethodName        = "/PlatformEdge/ListPlatformEdgeClusters"
	PlatformEdge_AllocatePlatformEdgeCluster_FullMethodName     = "/PlatformEdge/AllocatePlatformEdgeCluster"
	PlatformEdge_GetAllocatedPlatformEdgeCluster_FullMethodName = "/PlatformEdge/GetAllocatedPlatformEdgeCluster"
)

// PlatformEdgeClient is the client API for PlatformEdge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatformEdgeClient interface {
	ListPlatformEdgeClusters(ctx context.Context, in *ListPlatformEdgeClustersIn, opts ...grpc.CallOption) (*ListPlatformEdgeClustersOut, error)
	AllocatePlatformEdgeCluster(ctx context.Context, in *AllocatePlatformEdgeClusterIn, opts ...grpc.CallOption) (*AllocatePlatformEdgeClusterOut, error)
	GetAllocatedPlatformEdgeCluster(ctx context.Context, in *GetAllocatedPlatformEdgeClusterIn, opts ...grpc.CallOption) (*AllocatePlatformEdgeClusterOut, error)
}

type platformEdgeClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformEdgeClient(cc grpc.ClientConnInterface) PlatformEdgeClient {
	return &platformEdgeClient{cc}
}

func (c *platformEdgeClient) ListPlatformEdgeClusters(ctx context.Context, in *ListPlatformEdgeClustersIn, opts ...grpc.CallOption) (*ListPlatformEdgeClustersOut, error) {
	out := new(ListPlatformEdgeClustersOut)
	err := c.cc.Invoke(ctx, PlatformEdge_ListPlatformEdgeClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformEdgeClient) AllocatePlatformEdgeCluster(ctx context.Context, in *AllocatePlatformEdgeClusterIn, opts ...grpc.CallOption) (*AllocatePlatformEdgeClusterOut, error) {
	out := new(AllocatePlatformEdgeClusterOut)
	err := c.cc.Invoke(ctx, PlatformEdge_AllocatePlatformEdgeCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformEdgeClient) GetAllocatedPlatformEdgeCluster(ctx context.Context, in *GetAllocatedPlatformEdgeClusterIn, opts ...grpc.CallOption) (*AllocatePlatformEdgeClusterOut, error) {
	out := new(AllocatePlatformEdgeClusterOut)
	err := c.cc.Invoke(ctx, PlatformEdge_GetAllocatedPlatformEdgeCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformEdgeServer is the server API for PlatformEdge service.
// All implementations must embed UnimplementedPlatformEdgeServer
// for forward compatibility
type PlatformEdgeServer interface {
	ListPlatformEdgeClusters(context.Context, *ListPlatformEdgeClustersIn) (*ListPlatformEdgeClustersOut, error)
	AllocatePlatformEdgeCluster(context.Context, *AllocatePlatformEdgeClusterIn) (*AllocatePlatformEdgeClusterOut, error)
	GetAllocatedPlatformEdgeCluster(context.Context, *GetAllocatedPlatformEdgeClusterIn) (*AllocatePlatformEdgeClusterOut, error)
	mustEmbedUnimplementedPlatformEdgeServer()
}

// UnimplementedPlatformEdgeServer must be embedded to have forward compatible implementations.
type UnimplementedPlatformEdgeServer struct {
}

func (UnimplementedPlatformEdgeServer) ListPlatformEdgeClusters(context.Context, *ListPlatformEdgeClustersIn) (*ListPlatformEdgeClustersOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlatformEdgeClusters not implemented")
}
func (UnimplementedPlatformEdgeServer) AllocatePlatformEdgeCluster(context.Context, *AllocatePlatformEdgeClusterIn) (*AllocatePlatformEdgeClusterOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocatePlatformEdgeCluster not implemented")
}
func (UnimplementedPlatformEdgeServer) GetAllocatedPlatformEdgeCluster(context.Context, *GetAllocatedPlatformEdgeClusterIn) (*AllocatePlatformEdgeClusterOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocatedPlatformEdgeCluster not implemented")
}
func (UnimplementedPlatformEdgeServer) mustEmbedUnimplementedPlatformEdgeServer() {}

// UnsafePlatformEdgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatformEdgeServer will
// result in compilation errors.
type UnsafePlatformEdgeServer interface {
	mustEmbedUnimplementedPlatformEdgeServer()
}

func RegisterPlatformEdgeServer(s grpc.ServiceRegistrar, srv PlatformEdgeServer) {
	s.RegisterService(&PlatformEdge_ServiceDesc, srv)
}

func _PlatformEdge_ListPlatformEdgeClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlatformEdgeClustersIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformEdgeServer).ListPlatformEdgeClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformEdge_ListPlatformEdgeClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformEdgeServer).ListPlatformEdgeClusters(ctx, req.(*ListPlatformEdgeClustersIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformEdge_AllocatePlatformEdgeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocatePlatformEdgeClusterIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformEdgeServer).AllocatePlatformEdgeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformEdge_AllocatePlatformEdgeCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformEdgeServer).AllocatePlatformEdgeCluster(ctx, req.(*AllocatePlatformEdgeClusterIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformEdge_GetAllocatedPlatformEdgeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllocatedPlatformEdgeClusterIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformEdgeServer).GetAllocatedPlatformEdgeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformEdge_GetAllocatedPlatformEdgeCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformEdgeServer).GetAllocatedPlatformEdgeCluster(ctx, req.(*GetAllocatedPlatformEdgeClusterIn))
	}
	return interceptor(ctx, in, info, handler)
}

// PlatformEdge_ServiceDesc is the grpc.ServiceDesc for PlatformEdge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlatformEdge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PlatformEdge",
	HandlerType: (*PlatformEdgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPlatformEdgeClusters",
			Handler:    _PlatformEdge_ListPlatformEdgeClusters_Handler,
		},
		{
			MethodName: "AllocatePlatformEdgeCluster",
			Handler:    _PlatformEdge_AllocatePlatformEdgeCluster_Handler,
		},
		{
			MethodName: "GetAllocatedPlatformEdgeCluster",
			Handler:    _PlatformEdge_GetAllocatedPlatformEdgeCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform-edge.proto",
}
