// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: internal/proto/vector.proto

package proto_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Vector_PushEvents_FullMethodName  = "/vector.Vector/PushEvents"
	Vector_HealthCheck_FullMethodName = "/vector.Vector/HealthCheck"
)

// VectorClient is the client API for Vector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VectorClient interface {
	PushEvents(ctx context.Context, in *PushEventsRequest, opts ...grpc.CallOption) (*PushEventsResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type vectorClient struct {
	cc grpc.ClientConnInterface
}

func NewVectorClient(cc grpc.ClientConnInterface) VectorClient {
	return &vectorClient{cc}
}

func (c *vectorClient) PushEvents(ctx context.Context, in *PushEventsRequest, opts ...grpc.CallOption) (*PushEventsResponse, error) {
	out := new(PushEventsResponse)
	err := c.cc.Invoke(ctx, Vector_PushEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, Vector_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VectorServer is the server API for Vector service.
// All implementations must embed UnimplementedVectorServer
// for forward compatibility
type VectorServer interface {
	PushEvents(context.Context, *PushEventsRequest) (*PushEventsResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedVectorServer()
}

// UnimplementedVectorServer must be embedded to have forward compatible implementations.
type UnimplementedVectorServer struct {
}

func (UnimplementedVectorServer) PushEvents(context.Context, *PushEventsRequest) (*PushEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushEvents not implemented")
}
func (UnimplementedVectorServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedVectorServer) mustEmbedUnimplementedVectorServer() {}

// UnsafeVectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VectorServer will
// result in compilation errors.
type UnsafeVectorServer interface {
	mustEmbedUnimplementedVectorServer()
}

func RegisterVectorServer(s grpc.ServiceRegistrar, srv VectorServer) {
	s.RegisterService(&Vector_ServiceDesc, srv)
}

func _Vector_PushEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorServer).PushEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vector_PushEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorServer).PushEvents(ctx, req.(*PushEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vector_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vector_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vector_ServiceDesc is the grpc.ServiceDesc for Vector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vector.Vector",
	HandlerType: (*VectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushEvents",
			Handler:    _Vector_PushEvents_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Vector_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/vector.proto",
}
