// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: accounts.external.proto

package accounts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Accounts_GetTeamDetails_FullMethodName              = "/Accounts/GetTeamDetails"
	Accounts_CreateTeam_FullMethodName                  = "/Accounts/CreateTeam"
	Accounts_CheckTeamSlugAvailability_FullMethodName   = "/Accounts/CheckTeamSlugAvailability"
	Accounts_GenerateTeamSlugSuggestions_FullMethodName = "/Accounts/GenerateTeamSlugSuggestions"
	Accounts_DisableTeam_FullMethodName                 = "/Accounts/DisableTeam"
	Accounts_EnableTeam_FullMethodName                  = "/Accounts/EnableTeam"
	Accounts_DeleteTeam_FullMethodName                  = "/Accounts/DeleteTeam"
	Accounts_ListTeams_FullMethodName                   = "/Accounts/ListTeams"
	Accounts_SearchTeams_FullMethodName                 = "/Accounts/SearchTeams"
	Accounts_GetUserTeams_FullMethodName                = "/Accounts/GetUserTeams"
	Accounts_GetTeamMembers_FullMethodName              = "/Accounts/GetTeamMembers"
	Accounts_InviteTeamMember_FullMethodName            = "/Accounts/InviteTeamMember"
	Accounts_RemoveTeamMember_FullMethodName            = "/Accounts/RemoveTeamMember"
	Accounts_UpdateTeamMemberRole_FullMethodName        = "/Accounts/UpdateTeamMemberRole"
	Accounts_RequestTeamCreation_FullMethodName         = "/Accounts/RequestTeamCreation"
	Accounts_ListTeamRequests_FullMethodName            = "/Accounts/ListTeamRequests"
	Accounts_GetTeamRequest_FullMethodName              = "/Accounts/GetTeamRequest"
	Accounts_ApproveTeamRequest_FullMethodName          = "/Accounts/ApproveTeamRequest"
	Accounts_RejectTeamRequest_FullMethodName           = "/Accounts/RejectTeamRequest"
	Accounts_GetPlatformSettings_FullMethodName         = "/Accounts/GetPlatformSettings"
	Accounts_UpdatePlatformSettings_FullMethodName      = "/Accounts/UpdatePlatformSettings"
	Accounts_InvitePlatformUser_FullMethodName          = "/Accounts/InvitePlatformUser"
	Accounts_ListPlatformInvitations_FullMethodName     = "/Accounts/ListPlatformInvitations"
	Accounts_ResendPlatformInvitation_FullMethodName    = "/Accounts/ResendPlatformInvitation"
	Accounts_CancelPlatformInvitation_FullMethodName    = "/Accounts/CancelPlatformInvitation"
	Accounts_AcceptPlatformInvitation_FullMethodName    = "/Accounts/AcceptPlatformInvitation"
)

// AccountsClient is the client API for Accounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsClient interface {
	GetTeamDetails(ctx context.Context, in *GetTeamDetailsRequest, opts ...grpc.CallOption) (*GetTeamDetailsResponse, error)
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error)
	CheckTeamSlugAvailability(ctx context.Context, in *CheckTeamSlugAvailabilityRequest, opts ...grpc.CallOption) (*CheckTeamSlugAvailabilityResponse, error)
	GenerateTeamSlugSuggestions(ctx context.Context, in *GenerateTeamSlugSuggestionsRequest, opts ...grpc.CallOption) (*GenerateTeamSlugSuggestionsResponse, error)
	DisableTeam(ctx context.Context, in *DisableTeamRequest, opts ...grpc.CallOption) (*DisableTeamResponse, error)
	EnableTeam(ctx context.Context, in *EnableTeamRequest, opts ...grpc.CallOption) (*EnableTeamResponse, error)
	DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error)
	ListTeams(ctx context.Context, in *ListTeamsRequest, opts ...grpc.CallOption) (*ListTeamsResponse, error)
	SearchTeams(ctx context.Context, in *SearchTeamsRequest, opts ...grpc.CallOption) (*SearchTeamsResponse, error)
	GetUserTeams(ctx context.Context, in *GetUserTeamsRequest, opts ...grpc.CallOption) (*GetUserTeamsResponse, error)
	GetTeamMembers(ctx context.Context, in *GetTeamMembersRequest, opts ...grpc.CallOption) (*GetTeamMembersResponse, error)
	InviteTeamMember(ctx context.Context, in *InviteTeamMemberRequest, opts ...grpc.CallOption) (*InviteTeamMemberResponse, error)
	RemoveTeamMember(ctx context.Context, in *RemoveTeamMemberRequest, opts ...grpc.CallOption) (*RemoveTeamMemberResponse, error)
	UpdateTeamMemberRole(ctx context.Context, in *UpdateTeamMemberRoleRequest, opts ...grpc.CallOption) (*UpdateTeamMemberRoleResponse, error)
	// Platform management
	RequestTeamCreation(ctx context.Context, in *RequestTeamCreationRequest, opts ...grpc.CallOption) (*RequestTeamCreationResponse, error)
	ListTeamRequests(ctx context.Context, in *ListTeamRequestsRequest, opts ...grpc.CallOption) (*ListTeamRequestsResponse, error)
	GetTeamRequest(ctx context.Context, in *GetTeamRequestRequest, opts ...grpc.CallOption) (*GetTeamRequestResponse, error)
	ApproveTeamRequest(ctx context.Context, in *ApproveTeamRequestRequest, opts ...grpc.CallOption) (*ApproveTeamRequestResponse, error)
	RejectTeamRequest(ctx context.Context, in *RejectTeamRequestRequest, opts ...grpc.CallOption) (*RejectTeamRequestResponse, error)
	// Platform settings management
	GetPlatformSettings(ctx context.Context, in *GetPlatformSettingsRequest, opts ...grpc.CallOption) (*GetPlatformSettingsResponse, error)
	UpdatePlatformSettings(ctx context.Context, in *UpdatePlatformSettingsRequest, opts ...grpc.CallOption) (*UpdatePlatformSettingsResponse, error)
	// Platform user invitations
	InvitePlatformUser(ctx context.Context, in *InvitePlatformUserRequest, opts ...grpc.CallOption) (*InvitePlatformUserResponse, error)
	ListPlatformInvitations(ctx context.Context, in *ListPlatformInvitationsRequest, opts ...grpc.CallOption) (*ListPlatformInvitationsResponse, error)
	ResendPlatformInvitation(ctx context.Context, in *ResendPlatformInvitationRequest, opts ...grpc.CallOption) (*ResendPlatformInvitationResponse, error)
	CancelPlatformInvitation(ctx context.Context, in *CancelPlatformInvitationRequest, opts ...grpc.CallOption) (*CancelPlatformInvitationResponse, error)
	AcceptPlatformInvitation(ctx context.Context, in *AcceptPlatformInvitationRequest, opts ...grpc.CallOption) (*AcceptPlatformInvitationResponse, error)
}

type accountsClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsClient(cc grpc.ClientConnInterface) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) GetTeamDetails(ctx context.Context, in *GetTeamDetailsRequest, opts ...grpc.CallOption) (*GetTeamDetailsResponse, error) {
	out := new(GetTeamDetailsResponse)
	err := c.cc.Invoke(ctx, Accounts_GetTeamDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error) {
	out := new(CreateTeamResponse)
	err := c.cc.Invoke(ctx, Accounts_CreateTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) CheckTeamSlugAvailability(ctx context.Context, in *CheckTeamSlugAvailabilityRequest, opts ...grpc.CallOption) (*CheckTeamSlugAvailabilityResponse, error) {
	out := new(CheckTeamSlugAvailabilityResponse)
	err := c.cc.Invoke(ctx, Accounts_CheckTeamSlugAvailability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GenerateTeamSlugSuggestions(ctx context.Context, in *GenerateTeamSlugSuggestionsRequest, opts ...grpc.CallOption) (*GenerateTeamSlugSuggestionsResponse, error) {
	out := new(GenerateTeamSlugSuggestionsResponse)
	err := c.cc.Invoke(ctx, Accounts_GenerateTeamSlugSuggestions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) DisableTeam(ctx context.Context, in *DisableTeamRequest, opts ...grpc.CallOption) (*DisableTeamResponse, error) {
	out := new(DisableTeamResponse)
	err := c.cc.Invoke(ctx, Accounts_DisableTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) EnableTeam(ctx context.Context, in *EnableTeamRequest, opts ...grpc.CallOption) (*EnableTeamResponse, error) {
	out := new(EnableTeamResponse)
	err := c.cc.Invoke(ctx, Accounts_EnableTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error) {
	out := new(DeleteTeamResponse)
	err := c.cc.Invoke(ctx, Accounts_DeleteTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) ListTeams(ctx context.Context, in *ListTeamsRequest, opts ...grpc.CallOption) (*ListTeamsResponse, error) {
	out := new(ListTeamsResponse)
	err := c.cc.Invoke(ctx, Accounts_ListTeams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) SearchTeams(ctx context.Context, in *SearchTeamsRequest, opts ...grpc.CallOption) (*SearchTeamsResponse, error) {
	out := new(SearchTeamsResponse)
	err := c.cc.Invoke(ctx, Accounts_SearchTeams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetUserTeams(ctx context.Context, in *GetUserTeamsRequest, opts ...grpc.CallOption) (*GetUserTeamsResponse, error) {
	out := new(GetUserTeamsResponse)
	err := c.cc.Invoke(ctx, Accounts_GetUserTeams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetTeamMembers(ctx context.Context, in *GetTeamMembersRequest, opts ...grpc.CallOption) (*GetTeamMembersResponse, error) {
	out := new(GetTeamMembersResponse)
	err := c.cc.Invoke(ctx, Accounts_GetTeamMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) InviteTeamMember(ctx context.Context, in *InviteTeamMemberRequest, opts ...grpc.CallOption) (*InviteTeamMemberResponse, error) {
	out := new(InviteTeamMemberResponse)
	err := c.cc.Invoke(ctx, Accounts_InviteTeamMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) RemoveTeamMember(ctx context.Context, in *RemoveTeamMemberRequest, opts ...grpc.CallOption) (*RemoveTeamMemberResponse, error) {
	out := new(RemoveTeamMemberResponse)
	err := c.cc.Invoke(ctx, Accounts_RemoveTeamMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateTeamMemberRole(ctx context.Context, in *UpdateTeamMemberRoleRequest, opts ...grpc.CallOption) (*UpdateTeamMemberRoleResponse, error) {
	out := new(UpdateTeamMemberRoleResponse)
	err := c.cc.Invoke(ctx, Accounts_UpdateTeamMemberRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) RequestTeamCreation(ctx context.Context, in *RequestTeamCreationRequest, opts ...grpc.CallOption) (*RequestTeamCreationResponse, error) {
	out := new(RequestTeamCreationResponse)
	err := c.cc.Invoke(ctx, Accounts_RequestTeamCreation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) ListTeamRequests(ctx context.Context, in *ListTeamRequestsRequest, opts ...grpc.CallOption) (*ListTeamRequestsResponse, error) {
	out := new(ListTeamRequestsResponse)
	err := c.cc.Invoke(ctx, Accounts_ListTeamRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetTeamRequest(ctx context.Context, in *GetTeamRequestRequest, opts ...grpc.CallOption) (*GetTeamRequestResponse, error) {
	out := new(GetTeamRequestResponse)
	err := c.cc.Invoke(ctx, Accounts_GetTeamRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) ApproveTeamRequest(ctx context.Context, in *ApproveTeamRequestRequest, opts ...grpc.CallOption) (*ApproveTeamRequestResponse, error) {
	out := new(ApproveTeamRequestResponse)
	err := c.cc.Invoke(ctx, Accounts_ApproveTeamRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) RejectTeamRequest(ctx context.Context, in *RejectTeamRequestRequest, opts ...grpc.CallOption) (*RejectTeamRequestResponse, error) {
	out := new(RejectTeamRequestResponse)
	err := c.cc.Invoke(ctx, Accounts_RejectTeamRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) GetPlatformSettings(ctx context.Context, in *GetPlatformSettingsRequest, opts ...grpc.CallOption) (*GetPlatformSettingsResponse, error) {
	out := new(GetPlatformSettingsResponse)
	err := c.cc.Invoke(ctx, Accounts_GetPlatformSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdatePlatformSettings(ctx context.Context, in *UpdatePlatformSettingsRequest, opts ...grpc.CallOption) (*UpdatePlatformSettingsResponse, error) {
	out := new(UpdatePlatformSettingsResponse)
	err := c.cc.Invoke(ctx, Accounts_UpdatePlatformSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) InvitePlatformUser(ctx context.Context, in *InvitePlatformUserRequest, opts ...grpc.CallOption) (*InvitePlatformUserResponse, error) {
	out := new(InvitePlatformUserResponse)
	err := c.cc.Invoke(ctx, Accounts_InvitePlatformUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) ListPlatformInvitations(ctx context.Context, in *ListPlatformInvitationsRequest, opts ...grpc.CallOption) (*ListPlatformInvitationsResponse, error) {
	out := new(ListPlatformInvitationsResponse)
	err := c.cc.Invoke(ctx, Accounts_ListPlatformInvitations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) ResendPlatformInvitation(ctx context.Context, in *ResendPlatformInvitationRequest, opts ...grpc.CallOption) (*ResendPlatformInvitationResponse, error) {
	out := new(ResendPlatformInvitationResponse)
	err := c.cc.Invoke(ctx, Accounts_ResendPlatformInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) CancelPlatformInvitation(ctx context.Context, in *CancelPlatformInvitationRequest, opts ...grpc.CallOption) (*CancelPlatformInvitationResponse, error) {
	out := new(CancelPlatformInvitationResponse)
	err := c.cc.Invoke(ctx, Accounts_CancelPlatformInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) AcceptPlatformInvitation(ctx context.Context, in *AcceptPlatformInvitationRequest, opts ...grpc.CallOption) (*AcceptPlatformInvitationResponse, error) {
	out := new(AcceptPlatformInvitationResponse)
	err := c.cc.Invoke(ctx, Accounts_AcceptPlatformInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServer is the server API for Accounts service.
// All implementations must embed UnimplementedAccountsServer
// for forward compatibility
type AccountsServer interface {
	GetTeamDetails(context.Context, *GetTeamDetailsRequest) (*GetTeamDetailsResponse, error)
	CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error)
	CheckTeamSlugAvailability(context.Context, *CheckTeamSlugAvailabilityRequest) (*CheckTeamSlugAvailabilityResponse, error)
	GenerateTeamSlugSuggestions(context.Context, *GenerateTeamSlugSuggestionsRequest) (*GenerateTeamSlugSuggestionsResponse, error)
	DisableTeam(context.Context, *DisableTeamRequest) (*DisableTeamResponse, error)
	EnableTeam(context.Context, *EnableTeamRequest) (*EnableTeamResponse, error)
	DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error)
	ListTeams(context.Context, *ListTeamsRequest) (*ListTeamsResponse, error)
	SearchTeams(context.Context, *SearchTeamsRequest) (*SearchTeamsResponse, error)
	GetUserTeams(context.Context, *GetUserTeamsRequest) (*GetUserTeamsResponse, error)
	GetTeamMembers(context.Context, *GetTeamMembersRequest) (*GetTeamMembersResponse, error)
	InviteTeamMember(context.Context, *InviteTeamMemberRequest) (*InviteTeamMemberResponse, error)
	RemoveTeamMember(context.Context, *RemoveTeamMemberRequest) (*RemoveTeamMemberResponse, error)
	UpdateTeamMemberRole(context.Context, *UpdateTeamMemberRoleRequest) (*UpdateTeamMemberRoleResponse, error)
	// Platform management
	RequestTeamCreation(context.Context, *RequestTeamCreationRequest) (*RequestTeamCreationResponse, error)
	ListTeamRequests(context.Context, *ListTeamRequestsRequest) (*ListTeamRequestsResponse, error)
	GetTeamRequest(context.Context, *GetTeamRequestRequest) (*GetTeamRequestResponse, error)
	ApproveTeamRequest(context.Context, *ApproveTeamRequestRequest) (*ApproveTeamRequestResponse, error)
	RejectTeamRequest(context.Context, *RejectTeamRequestRequest) (*RejectTeamRequestResponse, error)
	// Platform settings management
	GetPlatformSettings(context.Context, *GetPlatformSettingsRequest) (*GetPlatformSettingsResponse, error)
	UpdatePlatformSettings(context.Context, *UpdatePlatformSettingsRequest) (*UpdatePlatformSettingsResponse, error)
	// Platform user invitations
	InvitePlatformUser(context.Context, *InvitePlatformUserRequest) (*InvitePlatformUserResponse, error)
	ListPlatformInvitations(context.Context, *ListPlatformInvitationsRequest) (*ListPlatformInvitationsResponse, error)
	ResendPlatformInvitation(context.Context, *ResendPlatformInvitationRequest) (*ResendPlatformInvitationResponse, error)
	CancelPlatformInvitation(context.Context, *CancelPlatformInvitationRequest) (*CancelPlatformInvitationResponse, error)
	AcceptPlatformInvitation(context.Context, *AcceptPlatformInvitationRequest) (*AcceptPlatformInvitationResponse, error)
	mustEmbedUnimplementedAccountsServer()
}

// UnimplementedAccountsServer must be embedded to have forward compatible implementations.
type UnimplementedAccountsServer struct {
}

func (UnimplementedAccountsServer) GetTeamDetails(context.Context, *GetTeamDetailsRequest) (*GetTeamDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamDetails not implemented")
}
func (UnimplementedAccountsServer) CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedAccountsServer) CheckTeamSlugAvailability(context.Context, *CheckTeamSlugAvailabilityRequest) (*CheckTeamSlugAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTeamSlugAvailability not implemented")
}
func (UnimplementedAccountsServer) GenerateTeamSlugSuggestions(context.Context, *GenerateTeamSlugSuggestionsRequest) (*GenerateTeamSlugSuggestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTeamSlugSuggestions not implemented")
}
func (UnimplementedAccountsServer) DisableTeam(context.Context, *DisableTeamRequest) (*DisableTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableTeam not implemented")
}
func (UnimplementedAccountsServer) EnableTeam(context.Context, *EnableTeamRequest) (*EnableTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTeam not implemented")
}
func (UnimplementedAccountsServer) DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (UnimplementedAccountsServer) ListTeams(context.Context, *ListTeamsRequest) (*ListTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (UnimplementedAccountsServer) SearchTeams(context.Context, *SearchTeamsRequest) (*SearchTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTeams not implemented")
}
func (UnimplementedAccountsServer) GetUserTeams(context.Context, *GetUserTeamsRequest) (*GetUserTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTeams not implemented")
}
func (UnimplementedAccountsServer) GetTeamMembers(context.Context, *GetTeamMembersRequest) (*GetTeamMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamMembers not implemented")
}
func (UnimplementedAccountsServer) InviteTeamMember(context.Context, *InviteTeamMemberRequest) (*InviteTeamMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteTeamMember not implemented")
}
func (UnimplementedAccountsServer) RemoveTeamMember(context.Context, *RemoveTeamMemberRequest) (*RemoveTeamMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeamMember not implemented")
}
func (UnimplementedAccountsServer) UpdateTeamMemberRole(context.Context, *UpdateTeamMemberRoleRequest) (*UpdateTeamMemberRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeamMemberRole not implemented")
}
func (UnimplementedAccountsServer) RequestTeamCreation(context.Context, *RequestTeamCreationRequest) (*RequestTeamCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestTeamCreation not implemented")
}
func (UnimplementedAccountsServer) ListTeamRequests(context.Context, *ListTeamRequestsRequest) (*ListTeamRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamRequests not implemented")
}
func (UnimplementedAccountsServer) GetTeamRequest(context.Context, *GetTeamRequestRequest) (*GetTeamRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamRequest not implemented")
}
func (UnimplementedAccountsServer) ApproveTeamRequest(context.Context, *ApproveTeamRequestRequest) (*ApproveTeamRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveTeamRequest not implemented")
}
func (UnimplementedAccountsServer) RejectTeamRequest(context.Context, *RejectTeamRequestRequest) (*RejectTeamRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectTeamRequest not implemented")
}
func (UnimplementedAccountsServer) GetPlatformSettings(context.Context, *GetPlatformSettingsRequest) (*GetPlatformSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformSettings not implemented")
}
func (UnimplementedAccountsServer) UpdatePlatformSettings(context.Context, *UpdatePlatformSettingsRequest) (*UpdatePlatformSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlatformSettings not implemented")
}
func (UnimplementedAccountsServer) InvitePlatformUser(context.Context, *InvitePlatformUserRequest) (*InvitePlatformUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvitePlatformUser not implemented")
}
func (UnimplementedAccountsServer) ListPlatformInvitations(context.Context, *ListPlatformInvitationsRequest) (*ListPlatformInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlatformInvitations not implemented")
}
func (UnimplementedAccountsServer) ResendPlatformInvitation(context.Context, *ResendPlatformInvitationRequest) (*ResendPlatformInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendPlatformInvitation not implemented")
}
func (UnimplementedAccountsServer) CancelPlatformInvitation(context.Context, *CancelPlatformInvitationRequest) (*CancelPlatformInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPlatformInvitation not implemented")
}
func (UnimplementedAccountsServer) AcceptPlatformInvitation(context.Context, *AcceptPlatformInvitationRequest) (*AcceptPlatformInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptPlatformInvitation not implemented")
}
func (UnimplementedAccountsServer) mustEmbedUnimplementedAccountsServer() {}

// UnsafeAccountsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsServer will
// result in compilation errors.
type UnsafeAccountsServer interface {
	mustEmbedUnimplementedAccountsServer()
}

func RegisterAccountsServer(s grpc.ServiceRegistrar, srv AccountsServer) {
	s.RegisterService(&Accounts_ServiceDesc, srv)
}

func _Accounts_GetTeamDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetTeamDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_GetTeamDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetTeamDetails(ctx, req.(*GetTeamDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_CreateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_CheckTeamSlugAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTeamSlugAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).CheckTeamSlugAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_CheckTeamSlugAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).CheckTeamSlugAvailability(ctx, req.(*CheckTeamSlugAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GenerateTeamSlugSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTeamSlugSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GenerateTeamSlugSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_GenerateTeamSlugSuggestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GenerateTeamSlugSuggestions(ctx, req.(*GenerateTeamSlugSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_DisableTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).DisableTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_DisableTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).DisableTeam(ctx, req.(*DisableTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_EnableTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).EnableTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_EnableTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).EnableTeam(ctx, req.(*EnableTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_DeleteTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).DeleteTeam(ctx, req.(*DeleteTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_ListTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).ListTeams(ctx, req.(*ListTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_SearchTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).SearchTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_SearchTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).SearchTeams(ctx, req.(*SearchTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetUserTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetUserTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_GetUserTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetUserTeams(ctx, req.(*GetUserTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetTeamMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetTeamMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_GetTeamMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetTeamMembers(ctx, req.(*GetTeamMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_InviteTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).InviteTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_InviteTeamMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).InviteTeamMember(ctx, req.(*InviteTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_RemoveTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeamMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).RemoveTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_RemoveTeamMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).RemoveTeamMember(ctx, req.(*RemoveTeamMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateTeamMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateTeamMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_UpdateTeamMemberRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateTeamMemberRole(ctx, req.(*UpdateTeamMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_RequestTeamCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTeamCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).RequestTeamCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_RequestTeamCreation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).RequestTeamCreation(ctx, req.(*RequestTeamCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_ListTeamRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).ListTeamRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_ListTeamRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).ListTeamRequests(ctx, req.(*ListTeamRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetTeamRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetTeamRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_GetTeamRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetTeamRequest(ctx, req.(*GetTeamRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_ApproveTeamRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveTeamRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).ApproveTeamRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_ApproveTeamRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).ApproveTeamRequest(ctx, req.(*ApproveTeamRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_RejectTeamRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectTeamRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).RejectTeamRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_RejectTeamRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).RejectTeamRequest(ctx, req.(*RejectTeamRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_GetPlatformSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).GetPlatformSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_GetPlatformSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).GetPlatformSettings(ctx, req.(*GetPlatformSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdatePlatformSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlatformSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdatePlatformSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_UpdatePlatformSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdatePlatformSettings(ctx, req.(*UpdatePlatformSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_InvitePlatformUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvitePlatformUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).InvitePlatformUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_InvitePlatformUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).InvitePlatformUser(ctx, req.(*InvitePlatformUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_ListPlatformInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlatformInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).ListPlatformInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_ListPlatformInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).ListPlatformInvitations(ctx, req.(*ListPlatformInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_ResendPlatformInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendPlatformInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).ResendPlatformInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_ResendPlatformInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).ResendPlatformInvitation(ctx, req.(*ResendPlatformInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_CancelPlatformInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPlatformInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).CancelPlatformInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_CancelPlatformInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).CancelPlatformInvitation(ctx, req.(*CancelPlatformInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_AcceptPlatformInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptPlatformInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).AcceptPlatformInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accounts_AcceptPlatformInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).AcceptPlatformInvitation(ctx, req.(*AcceptPlatformInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Accounts_ServiceDesc is the grpc.ServiceDesc for Accounts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Accounts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTeamDetails",
			Handler:    _Accounts_GetTeamDetails_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _Accounts_CreateTeam_Handler,
		},
		{
			MethodName: "CheckTeamSlugAvailability",
			Handler:    _Accounts_CheckTeamSlugAvailability_Handler,
		},
		{
			MethodName: "GenerateTeamSlugSuggestions",
			Handler:    _Accounts_GenerateTeamSlugSuggestions_Handler,
		},
		{
			MethodName: "DisableTeam",
			Handler:    _Accounts_DisableTeam_Handler,
		},
		{
			MethodName: "EnableTeam",
			Handler:    _Accounts_EnableTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _Accounts_DeleteTeam_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _Accounts_ListTeams_Handler,
		},
		{
			MethodName: "SearchTeams",
			Handler:    _Accounts_SearchTeams_Handler,
		},
		{
			MethodName: "GetUserTeams",
			Handler:    _Accounts_GetUserTeams_Handler,
		},
		{
			MethodName: "GetTeamMembers",
			Handler:    _Accounts_GetTeamMembers_Handler,
		},
		{
			MethodName: "InviteTeamMember",
			Handler:    _Accounts_InviteTeamMember_Handler,
		},
		{
			MethodName: "RemoveTeamMember",
			Handler:    _Accounts_RemoveTeamMember_Handler,
		},
		{
			MethodName: "UpdateTeamMemberRole",
			Handler:    _Accounts_UpdateTeamMemberRole_Handler,
		},
		{
			MethodName: "RequestTeamCreation",
			Handler:    _Accounts_RequestTeamCreation_Handler,
		},
		{
			MethodName: "ListTeamRequests",
			Handler:    _Accounts_ListTeamRequests_Handler,
		},
		{
			MethodName: "GetTeamRequest",
			Handler:    _Accounts_GetTeamRequest_Handler,
		},
		{
			MethodName: "ApproveTeamRequest",
			Handler:    _Accounts_ApproveTeamRequest_Handler,
		},
		{
			MethodName: "RejectTeamRequest",
			Handler:    _Accounts_RejectTeamRequest_Handler,
		},
		{
			MethodName: "GetPlatformSettings",
			Handler:    _Accounts_GetPlatformSettings_Handler,
		},
		{
			MethodName: "UpdatePlatformSettings",
			Handler:    _Accounts_UpdatePlatformSettings_Handler,
		},
		{
			MethodName: "InvitePlatformUser",
			Handler:    _Accounts_InvitePlatformUser_Handler,
		},
		{
			MethodName: "ListPlatformInvitations",
			Handler:    _Accounts_ListPlatformInvitations_Handler,
		},
		{
			MethodName: "ResendPlatformInvitation",
			Handler:    _Accounts_ResendPlatformInvitation_Handler,
		},
		{
			MethodName: "CancelPlatformInvitation",
			Handler:    _Accounts_CancelPlatformInvitation_Handler,
		},
		{
			MethodName: "AcceptPlatformInvitation",
			Handler:    _Accounts_AcceptPlatformInvitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounts.external.proto",
}
