// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.4
// source: accounts.v2.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountsV2_GetAccountDetails_FullMethodName            = "/AccountsV2/GetAccountDetails"
	AccountsV2_CreateAccount_FullMethodName                = "/AccountsV2/CreateAccount"
	AccountsV2_CheckAccountNameAvailability_FullMethodName = "/AccountsV2/CheckAccountNameAvailability"
	AccountsV2_DisableAccount_FullMethodName               = "/AccountsV2/DisableAccount"
	AccountsV2_EnableAccount_FullMethodName                = "/AccountsV2/EnableAccount"
	AccountsV2_DeleteAccount_FullMethodName                = "/AccountsV2/DeleteAccount"
	AccountsV2_ListAccounts_FullMethodName                 = "/AccountsV2/ListAccounts"
)

// AccountsV2Client is the client API for AccountsV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsV2Client interface {
	GetAccountDetails(ctx context.Context, in *GetAccountDetailsRequest, opts ...grpc.CallOption) (*GetAccountDetailsResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	CheckAccountNameAvailability(ctx context.Context, in *CheckAccountNameAvailabilityRequest, opts ...grpc.CallOption) (*CheckAccountNameAvailabilityResponse, error)
	DisableAccount(ctx context.Context, in *DisableAccountRequest, opts ...grpc.CallOption) (*DisableAccountResponse, error)
	EnableAccount(ctx context.Context, in *EnableAccountRequest, opts ...grpc.CallOption) (*EnableAccountResponse, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
}

type accountsV2Client struct {
	cc grpc.ClientConnInterface
}

func NewAccountsV2Client(cc grpc.ClientConnInterface) AccountsV2Client {
	return &accountsV2Client{cc}
}

func (c *accountsV2Client) GetAccountDetails(ctx context.Context, in *GetAccountDetailsRequest, opts ...grpc.CallOption) (*GetAccountDetailsResponse, error) {
	out := new(GetAccountDetailsResponse)
	err := c.cc.Invoke(ctx, AccountsV2_GetAccountDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsV2Client) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, AccountsV2_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsV2Client) CheckAccountNameAvailability(ctx context.Context, in *CheckAccountNameAvailabilityRequest, opts ...grpc.CallOption) (*CheckAccountNameAvailabilityResponse, error) {
	out := new(CheckAccountNameAvailabilityResponse)
	err := c.cc.Invoke(ctx, AccountsV2_CheckAccountNameAvailability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsV2Client) DisableAccount(ctx context.Context, in *DisableAccountRequest, opts ...grpc.CallOption) (*DisableAccountResponse, error) {
	out := new(DisableAccountResponse)
	err := c.cc.Invoke(ctx, AccountsV2_DisableAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsV2Client) EnableAccount(ctx context.Context, in *EnableAccountRequest, opts ...grpc.CallOption) (*EnableAccountResponse, error) {
	out := new(EnableAccountResponse)
	err := c.cc.Invoke(ctx, AccountsV2_EnableAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsV2Client) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, AccountsV2_DeleteAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsV2Client) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, AccountsV2_ListAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsV2Server is the server API for AccountsV2 service.
// All implementations must embed UnimplementedAccountsV2Server
// for forward compatibility
type AccountsV2Server interface {
	GetAccountDetails(context.Context, *GetAccountDetailsRequest) (*GetAccountDetailsResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	CheckAccountNameAvailability(context.Context, *CheckAccountNameAvailabilityRequest) (*CheckAccountNameAvailabilityResponse, error)
	DisableAccount(context.Context, *DisableAccountRequest) (*DisableAccountResponse, error)
	EnableAccount(context.Context, *EnableAccountRequest) (*EnableAccountResponse, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	mustEmbedUnimplementedAccountsV2Server()
}

// UnimplementedAccountsV2Server must be embedded to have forward compatible implementations.
type UnimplementedAccountsV2Server struct {
}

func (UnimplementedAccountsV2Server) GetAccountDetails(context.Context, *GetAccountDetailsRequest) (*GetAccountDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountDetails not implemented")
}
func (UnimplementedAccountsV2Server) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountsV2Server) CheckAccountNameAvailability(context.Context, *CheckAccountNameAvailabilityRequest) (*CheckAccountNameAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccountNameAvailability not implemented")
}
func (UnimplementedAccountsV2Server) DisableAccount(context.Context, *DisableAccountRequest) (*DisableAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAccount not implemented")
}
func (UnimplementedAccountsV2Server) EnableAccount(context.Context, *EnableAccountRequest) (*EnableAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAccount not implemented")
}
func (UnimplementedAccountsV2Server) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedAccountsV2Server) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedAccountsV2Server) mustEmbedUnimplementedAccountsV2Server() {}

// UnsafeAccountsV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsV2Server will
// result in compilation errors.
type UnsafeAccountsV2Server interface {
	mustEmbedUnimplementedAccountsV2Server()
}

func RegisterAccountsV2Server(s grpc.ServiceRegistrar, srv AccountsV2Server) {
	s.RegisterService(&AccountsV2_ServiceDesc, srv)
}

func _AccountsV2_GetAccountDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsV2Server).GetAccountDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsV2_GetAccountDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsV2Server).GetAccountDetails(ctx, req.(*GetAccountDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsV2_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsV2Server).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsV2_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsV2Server).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsV2_CheckAccountNameAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccountNameAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsV2Server).CheckAccountNameAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsV2_CheckAccountNameAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsV2Server).CheckAccountNameAvailability(ctx, req.(*CheckAccountNameAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsV2_DisableAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsV2Server).DisableAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsV2_DisableAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsV2Server).DisableAccount(ctx, req.(*DisableAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsV2_EnableAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsV2Server).EnableAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsV2_EnableAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsV2Server).EnableAccount(ctx, req.(*EnableAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsV2_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsV2Server).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsV2_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsV2Server).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsV2_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsV2Server).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountsV2_ListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsV2Server).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountsV2_ServiceDesc is the grpc.ServiceDesc for AccountsV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountsV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AccountsV2",
	HandlerType: (*AccountsV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountDetails",
			Handler:    _AccountsV2_GetAccountDetails_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountsV2_CreateAccount_Handler,
		},
		{
			MethodName: "CheckAccountNameAvailability",
			Handler:    _AccountsV2_CheckAccountNameAvailability_Handler,
		},
		{
			MethodName: "DisableAccount",
			Handler:    _AccountsV2_DisableAccount_Handler,
		},
		{
			MethodName: "EnableAccount",
			Handler:    _AccountsV2_EnableAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AccountsV2_DeleteAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _AccountsV2_ListAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounts.v2.proto",
}
