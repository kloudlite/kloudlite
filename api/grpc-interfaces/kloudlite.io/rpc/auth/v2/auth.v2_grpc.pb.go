// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.4
// source: auth.v2.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthV2_Login_FullMethodName                   = "/AuthV2/Login"
	AuthV2_LoginWithSSO_FullMethodName            = "/AuthV2/LoginWithSSO"
	AuthV2_LoginWithOAuth_FullMethodName          = "/AuthV2/LoginWithOAuth"
	AuthV2_GetUserDetails_FullMethodName          = "/AuthV2/GetUserDetails"
	AuthV2_Signup_FullMethodName                  = "/AuthV2/Signup"
	AuthV2_RequestResetPassword_FullMethodName    = "/AuthV2/RequestResetPassword"
	AuthV2_ResetPassword_FullMethodName           = "/AuthV2/ResetPassword"
	AuthV2_VerifyEmail_FullMethodName             = "/AuthV2/VerifyEmail"
	AuthV2_ResendEmailVerification_FullMethodName = "/AuthV2/ResendEmailVerification"
)

// AuthV2Client is the client API for AuthV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthV2Client interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	LoginWithSSO(ctx context.Context, in *LoginWithSSORequest, opts ...grpc.CallOption) (*LoginWithSSOResponse, error)
	LoginWithOAuth(ctx context.Context, in *LoginWithOAuthRequest, opts ...grpc.CallOption) (*LoginWithOAuthResponse, error)
	GetUserDetails(ctx context.Context, in *GetUserDetailsRequest, opts ...grpc.CallOption) (*GetUserDetailsResponse, error)
	Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error)
	RequestResetPassword(ctx context.Context, in *RequestResetPasswordRequest, opts ...grpc.CallOption) (*RequestResetPasswordResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	ResendEmailVerification(ctx context.Context, in *ResendEmailVerificationRequest, opts ...grpc.CallOption) (*ResendEmailVerificationResponse, error)
}

type authV2Client struct {
	cc grpc.ClientConnInterface
}

func NewAuthV2Client(cc grpc.ClientConnInterface) AuthV2Client {
	return &authV2Client{cc}
}

func (c *authV2Client) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthV2_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV2Client) LoginWithSSO(ctx context.Context, in *LoginWithSSORequest, opts ...grpc.CallOption) (*LoginWithSSOResponse, error) {
	out := new(LoginWithSSOResponse)
	err := c.cc.Invoke(ctx, AuthV2_LoginWithSSO_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV2Client) LoginWithOAuth(ctx context.Context, in *LoginWithOAuthRequest, opts ...grpc.CallOption) (*LoginWithOAuthResponse, error) {
	out := new(LoginWithOAuthResponse)
	err := c.cc.Invoke(ctx, AuthV2_LoginWithOAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV2Client) GetUserDetails(ctx context.Context, in *GetUserDetailsRequest, opts ...grpc.CallOption) (*GetUserDetailsResponse, error) {
	out := new(GetUserDetailsResponse)
	err := c.cc.Invoke(ctx, AuthV2_GetUserDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV2Client) Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error) {
	out := new(SignupResponse)
	err := c.cc.Invoke(ctx, AuthV2_Signup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV2Client) RequestResetPassword(ctx context.Context, in *RequestResetPasswordRequest, opts ...grpc.CallOption) (*RequestResetPasswordResponse, error) {
	out := new(RequestResetPasswordResponse)
	err := c.cc.Invoke(ctx, AuthV2_RequestResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV2Client) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, AuthV2_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV2Client) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, AuthV2_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV2Client) ResendEmailVerification(ctx context.Context, in *ResendEmailVerificationRequest, opts ...grpc.CallOption) (*ResendEmailVerificationResponse, error) {
	out := new(ResendEmailVerificationResponse)
	err := c.cc.Invoke(ctx, AuthV2_ResendEmailVerification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthV2Server is the server API for AuthV2 service.
// All implementations must embed UnimplementedAuthV2Server
// for forward compatibility
type AuthV2Server interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	LoginWithSSO(context.Context, *LoginWithSSORequest) (*LoginWithSSOResponse, error)
	LoginWithOAuth(context.Context, *LoginWithOAuthRequest) (*LoginWithOAuthResponse, error)
	GetUserDetails(context.Context, *GetUserDetailsRequest) (*GetUserDetailsResponse, error)
	Signup(context.Context, *SignupRequest) (*SignupResponse, error)
	RequestResetPassword(context.Context, *RequestResetPasswordRequest) (*RequestResetPasswordResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	ResendEmailVerification(context.Context, *ResendEmailVerificationRequest) (*ResendEmailVerificationResponse, error)
	mustEmbedUnimplementedAuthV2Server()
}

// UnimplementedAuthV2Server must be embedded to have forward compatible implementations.
type UnimplementedAuthV2Server struct {
}

func (UnimplementedAuthV2Server) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthV2Server) LoginWithSSO(context.Context, *LoginWithSSORequest) (*LoginWithSSOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithSSO not implemented")
}
func (UnimplementedAuthV2Server) LoginWithOAuth(context.Context, *LoginWithOAuthRequest) (*LoginWithOAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithOAuth not implemented")
}
func (UnimplementedAuthV2Server) GetUserDetails(context.Context, *GetUserDetailsRequest) (*GetUserDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetails not implemented")
}
func (UnimplementedAuthV2Server) Signup(context.Context, *SignupRequest) (*SignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedAuthV2Server) RequestResetPassword(context.Context, *RequestResetPasswordRequest) (*RequestResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestResetPassword not implemented")
}
func (UnimplementedAuthV2Server) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAuthV2Server) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedAuthV2Server) ResendEmailVerification(context.Context, *ResendEmailVerificationRequest) (*ResendEmailVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendEmailVerification not implemented")
}
func (UnimplementedAuthV2Server) mustEmbedUnimplementedAuthV2Server() {}

// UnsafeAuthV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthV2Server will
// result in compilation errors.
type UnsafeAuthV2Server interface {
	mustEmbedUnimplementedAuthV2Server()
}

func RegisterAuthV2Server(s grpc.ServiceRegistrar, srv AuthV2Server) {
	s.RegisterService(&AuthV2_ServiceDesc, srv)
}

func _AuthV2_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV2Server).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV2_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV2Server).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV2_LoginWithSSO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithSSORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV2Server).LoginWithSSO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV2_LoginWithSSO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV2Server).LoginWithSSO(ctx, req.(*LoginWithSSORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV2_LoginWithOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV2Server).LoginWithOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV2_LoginWithOAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV2Server).LoginWithOAuth(ctx, req.(*LoginWithOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV2_GetUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV2Server).GetUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV2_GetUserDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV2Server).GetUserDetails(ctx, req.(*GetUserDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV2_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV2Server).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV2_Signup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV2Server).Signup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV2_RequestResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV2Server).RequestResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV2_RequestResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV2Server).RequestResetPassword(ctx, req.(*RequestResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV2_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV2Server).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV2_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV2Server).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV2_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV2Server).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV2_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV2Server).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV2_ResendEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV2Server).ResendEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV2_ResendEmailVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV2Server).ResendEmailVerification(ctx, req.(*ResendEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthV2_ServiceDesc is the grpc.ServiceDesc for AuthV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthV2",
	HandlerType: (*AuthV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthV2_Login_Handler,
		},
		{
			MethodName: "LoginWithSSO",
			Handler:    _AuthV2_LoginWithSSO_Handler,
		},
		{
			MethodName: "LoginWithOAuth",
			Handler:    _AuthV2_LoginWithOAuth_Handler,
		},
		{
			MethodName: "GetUserDetails",
			Handler:    _AuthV2_GetUserDetails_Handler,
		},
		{
			MethodName: "Signup",
			Handler:    _AuthV2_Signup_Handler,
		},
		{
			MethodName: "RequestResetPassword",
			Handler:    _AuthV2_RequestResetPassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AuthV2_ResetPassword_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _AuthV2_VerifyEmail_Handler,
		},
		{
			MethodName: "ResendEmailVerification",
			Handler:    _AuthV2_ResendEmailVerification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.v2.proto",
}
