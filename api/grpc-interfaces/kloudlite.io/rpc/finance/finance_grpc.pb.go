// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: finance.proto

package finance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Finance_StartBillable_FullMethodName      = "/Finance/startBillable"
	Finance_StopBillable_FullMethodName       = "/Finance/stopBillable"
	Finance_GetAttachedCluster_FullMethodName = "/Finance/getAttachedCluster"
)

// FinanceClient is the client API for Finance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinanceClient interface {
	StartBillable(ctx context.Context, in *StartBillableIn, opts ...grpc.CallOption) (*StartBillableOut, error)
	StopBillable(ctx context.Context, in *StopBillableIn, opts ...grpc.CallOption) (*StopBillableOut, error)
	GetAttachedCluster(ctx context.Context, in *GetAttachedClusterIn, opts ...grpc.CallOption) (*GetAttachedClusterOut, error)
}

type financeClient struct {
	cc grpc.ClientConnInterface
}

func NewFinanceClient(cc grpc.ClientConnInterface) FinanceClient {
	return &financeClient{cc}
}

func (c *financeClient) StartBillable(ctx context.Context, in *StartBillableIn, opts ...grpc.CallOption) (*StartBillableOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartBillableOut)
	err := c.cc.Invoke(ctx, Finance_StartBillable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeClient) StopBillable(ctx context.Context, in *StopBillableIn, opts ...grpc.CallOption) (*StopBillableOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopBillableOut)
	err := c.cc.Invoke(ctx, Finance_StopBillable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeClient) GetAttachedCluster(ctx context.Context, in *GetAttachedClusterIn, opts ...grpc.CallOption) (*GetAttachedClusterOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAttachedClusterOut)
	err := c.cc.Invoke(ctx, Finance_GetAttachedCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinanceServer is the server API for Finance service.
// All implementations must embed UnimplementedFinanceServer
// for forward compatibility.
type FinanceServer interface {
	StartBillable(context.Context, *StartBillableIn) (*StartBillableOut, error)
	StopBillable(context.Context, *StopBillableIn) (*StopBillableOut, error)
	GetAttachedCluster(context.Context, *GetAttachedClusterIn) (*GetAttachedClusterOut, error)
	mustEmbedUnimplementedFinanceServer()
}

// UnimplementedFinanceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFinanceServer struct{}

func (UnimplementedFinanceServer) StartBillable(context.Context, *StartBillableIn) (*StartBillableOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBillable not implemented")
}
func (UnimplementedFinanceServer) StopBillable(context.Context, *StopBillableIn) (*StopBillableOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBillable not implemented")
}
func (UnimplementedFinanceServer) GetAttachedCluster(context.Context, *GetAttachedClusterIn) (*GetAttachedClusterOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachedCluster not implemented")
}
func (UnimplementedFinanceServer) mustEmbedUnimplementedFinanceServer() {}
func (UnimplementedFinanceServer) testEmbeddedByValue()                 {}

// UnsafeFinanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinanceServer will
// result in compilation errors.
type UnsafeFinanceServer interface {
	mustEmbedUnimplementedFinanceServer()
}

func RegisterFinanceServer(s grpc.ServiceRegistrar, srv FinanceServer) {
	// If the following call pancis, it indicates UnimplementedFinanceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Finance_ServiceDesc, srv)
}

func _Finance_StartBillable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBillableIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServer).StartBillable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Finance_StartBillable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServer).StartBillable(ctx, req.(*StartBillableIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Finance_StopBillable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopBillableIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServer).StopBillable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Finance_StopBillable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServer).StopBillable(ctx, req.(*StopBillableIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Finance_GetAttachedCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachedClusterIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServer).GetAttachedCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Finance_GetAttachedCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServer).GetAttachedCluster(ctx, req.(*GetAttachedClusterIn))
	}
	return interceptor(ctx, in, info, handler)
}

// Finance_ServiceDesc is the grpc.ServiceDesc for Finance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Finance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Finance",
	HandlerType: (*FinanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "startBillable",
			Handler:    _Finance_StartBillable_Handler,
		},
		{
			MethodName: "stopBillable",
			Handler:    _Finance_StopBillable_Handler,
		},
		{
			MethodName: "getAttachedCluster",
			Handler:    _Finance_GetAttachedCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}
