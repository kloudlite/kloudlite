// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: infra.proto

package infra

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InfraClient is the client API for Infra service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfraClient interface {
	GetCluster(ctx context.Context, in *GetClusterIn, opts ...grpc.CallOption) (*GetClusterOut, error)
	GetNodepool(ctx context.Context, in *GetNodepoolIn, opts ...grpc.CallOption) (*GetNodepoolOut, error)
	GetVpnDevice(ctx context.Context, in *GetVpnDeviceIn, opts ...grpc.CallOption) (*GetVpnDeviceOut, error)
	UpsertVpnDevice(ctx context.Context, in *UpsertVpnDeviceIn, opts ...grpc.CallOption) (*UpsertVpnDeviceOut, error)
	DeleteVpnDevice(ctx context.Context, in *DeleteVpnDeviceIn, opts ...grpc.CallOption) (*DeleteVpnDeviceOut, error)
}

type infraClient struct {
	cc grpc.ClientConnInterface
}

func NewInfraClient(cc grpc.ClientConnInterface) InfraClient {
	return &infraClient{cc}
}

func (c *infraClient) GetCluster(ctx context.Context, in *GetClusterIn, opts ...grpc.CallOption) (*GetClusterOut, error) {
	out := new(GetClusterOut)
	err := c.cc.Invoke(ctx, "/Infra/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraClient) GetNodepool(ctx context.Context, in *GetNodepoolIn, opts ...grpc.CallOption) (*GetNodepoolOut, error) {
	out := new(GetNodepoolOut)
	err := c.cc.Invoke(ctx, "/Infra/GetNodepool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraClient) GetVpnDevice(ctx context.Context, in *GetVpnDeviceIn, opts ...grpc.CallOption) (*GetVpnDeviceOut, error) {
	out := new(GetVpnDeviceOut)
	err := c.cc.Invoke(ctx, "/Infra/GetVpnDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraClient) UpsertVpnDevice(ctx context.Context, in *UpsertVpnDeviceIn, opts ...grpc.CallOption) (*UpsertVpnDeviceOut, error) {
	out := new(UpsertVpnDeviceOut)
	err := c.cc.Invoke(ctx, "/Infra/UpsertVpnDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infraClient) DeleteVpnDevice(ctx context.Context, in *DeleteVpnDeviceIn, opts ...grpc.CallOption) (*DeleteVpnDeviceOut, error) {
	out := new(DeleteVpnDeviceOut)
	err := c.cc.Invoke(ctx, "/Infra/DeleteVpnDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfraServer is the server API for Infra service.
// All implementations must embed UnimplementedInfraServer
// for forward compatibility
type InfraServer interface {
	GetCluster(context.Context, *GetClusterIn) (*GetClusterOut, error)
	GetNodepool(context.Context, *GetNodepoolIn) (*GetNodepoolOut, error)
	GetVpnDevice(context.Context, *GetVpnDeviceIn) (*GetVpnDeviceOut, error)
	UpsertVpnDevice(context.Context, *UpsertVpnDeviceIn) (*UpsertVpnDeviceOut, error)
	DeleteVpnDevice(context.Context, *DeleteVpnDeviceIn) (*DeleteVpnDeviceOut, error)
	mustEmbedUnimplementedInfraServer()
}

// UnimplementedInfraServer must be embedded to have forward compatible implementations.
type UnimplementedInfraServer struct {
}

func (UnimplementedInfraServer) GetCluster(context.Context, *GetClusterIn) (*GetClusterOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedInfraServer) GetNodepool(context.Context, *GetNodepoolIn) (*GetNodepoolOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodepool not implemented")
}
func (UnimplementedInfraServer) GetVpnDevice(context.Context, *GetVpnDeviceIn) (*GetVpnDeviceOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVpnDevice not implemented")
}
func (UnimplementedInfraServer) UpsertVpnDevice(context.Context, *UpsertVpnDeviceIn) (*UpsertVpnDeviceOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertVpnDevice not implemented")
}
func (UnimplementedInfraServer) DeleteVpnDevice(context.Context, *DeleteVpnDeviceIn) (*DeleteVpnDeviceOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVpnDevice not implemented")
}
func (UnimplementedInfraServer) mustEmbedUnimplementedInfraServer() {}

// UnsafeInfraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfraServer will
// result in compilation errors.
type UnsafeInfraServer interface {
	mustEmbedUnimplementedInfraServer()
}

func RegisterInfraServer(s grpc.ServiceRegistrar, srv InfraServer) {
	s.RegisterService(&Infra_ServiceDesc, srv)
}

func _Infra_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Infra/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraServer).GetCluster(ctx, req.(*GetClusterIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Infra_GetNodepool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodepoolIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraServer).GetNodepool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Infra/GetNodepool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraServer).GetNodepool(ctx, req.(*GetNodepoolIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Infra_GetVpnDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVpnDeviceIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraServer).GetVpnDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Infra/GetVpnDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraServer).GetVpnDevice(ctx, req.(*GetVpnDeviceIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Infra_UpsertVpnDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertVpnDeviceIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraServer).UpsertVpnDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Infra/UpsertVpnDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraServer).UpsertVpnDevice(ctx, req.(*UpsertVpnDeviceIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Infra_DeleteVpnDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVpnDeviceIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfraServer).DeleteVpnDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Infra/DeleteVpnDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfraServer).DeleteVpnDevice(ctx, req.(*DeleteVpnDeviceIn))
	}
	return interceptor(ctx, in, info, handler)
}

// Infra_ServiceDesc is the grpc.ServiceDesc for Infra service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Infra_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Infra",
	HandlerType: (*InfraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCluster",
			Handler:    _Infra_GetCluster_Handler,
		},
		{
			MethodName: "GetNodepool",
			Handler:    _Infra_GetNodepool_Handler,
		},
		{
			MethodName: "GetVpnDevice",
			Handler:    _Infra_GetVpnDevice_Handler,
		},
		{
			MethodName: "UpsertVpnDevice",
			Handler:    _Infra_UpsertVpnDevice_Handler,
		},
		{
			MethodName: "DeleteVpnDevice",
			Handler:    _Infra_DeleteVpnDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra.proto",
}
