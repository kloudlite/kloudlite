package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"time"

	"github.com/kloudlite/api/pkg/errors"

	"github.com/kloudlite/api/apps/console/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/console/internal/app/graph/model"
	"github.com/kloudlite/api/apps/console/internal/entities"
	"github.com/kloudlite/api/common"
	fn "github.com/kloudlite/api/pkg/functions"
	"github.com/kloudlite/api/pkg/types"
	v12 "github.com/kloudlite/operator/apis/crds/v1"
	"github.com/kloudlite/operator/toolkit/reconciler"
	v11 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Meta is the resolver for the meta field.
func (r *github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginResolver) Meta(ctx context.Context, obj *entities.ManagedServicePlugin) (*model.GithubComKloudliteAPIAppsConsoleInternalEntitiesManagedServicePluginMeta, error) {
	return fn.JsonConvertP[model.GithubComKloudliteAPIAppsConsoleInternalEntitiesManagedServicePluginMeta](obj.Meta)
}

// Spec is the resolver for the spec field.
func (r *github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginResolver) Spec(ctx context.Context, obj *entities.ManagedServicePlugin) (*model.GithubComKloudliteAPIAppsConsoleInternalEntitiesManagedServicePluginSpec, error) {
	return fn.JsonConvertP[model.GithubComKloudliteAPIAppsConsoleInternalEntitiesManagedServicePluginSpec](obj.Spec)
}

// UserID is the resolver for the userId field.
func (r *github__com___kloudlite___api___common__CreatedOrUpdatedByResolver) UserID(ctx context.Context, obj *common.CreatedOrUpdatedBy) (string, error) {
	if obj == nil {
		return "", fmt.Errorf("obj is nil")
	}
	return string(obj.UserId), nil
}

// LastSyncedAt is the resolver for the lastSyncedAt field.
func (r *github__com___kloudlite___api___pkg___types__SyncStatusResolver) LastSyncedAt(ctx context.Context, obj *types.SyncStatus) (*string, error) {
	return fn.New(obj.LastSyncedAt.Format(time.RFC3339)), nil
}

// SyncScheduledAt is the resolver for the syncScheduledAt field.
func (r *github__com___kloudlite___api___pkg___types__SyncStatusResolver) SyncScheduledAt(ctx context.Context, obj *types.SyncStatus) (*string, error) {
	return fn.New(obj.SyncScheduledAt.Format(time.RFC3339)), nil
}

// CheckList is the resolver for the checkList field.
func (r *github__com___kloudlite___operator___toolkit___reconciler__StatusResolver) CheckList(ctx context.Context, obj *reconciler.Status) ([]*model.GithubComKloudliteOperatorToolkitReconcilerCheckMeta, error) {
	if obj == nil {
		return nil, errors.Newf("obj is nil")
	}

	return fn.JsonConvert[[]*model.GithubComKloudliteOperatorToolkitReconcilerCheckMeta](obj.CheckList)
}

// Checks is the resolver for the checks field.
func (r *github__com___kloudlite___operator___toolkit___reconciler__StatusResolver) Checks(ctx context.Context, obj *reconciler.Status) (map[string]interface{}, error) {
	if obj == nil {
		return nil, errors.Newf("obj is nil")
	}
	var m map[string]any
	if err := fn.JsonConversion(obj.Checks, &m); err != nil {
		return nil, errors.NewE(err)
	}
	return m, nil
}

// LastReconcileTime is the resolver for the lastReconcileTime field.
func (r *github__com___kloudlite___operator___toolkit___reconciler__StatusResolver) LastReconcileTime(ctx context.Context, obj *reconciler.Status) (*string, error) {
	if obj == nil {
		return nil, errors.Newf("obj is nil")
	}

	if obj.LastReconcileTime == nil {
		return nil, nil
	}

	return fn.New(obj.LastReconcileTime.Format(time.RFC3339)), nil
}

// Resources is the resolver for the resources field.
func (r *github__com___kloudlite___operator___toolkit___reconciler__StatusResolver) Resources(ctx context.Context, obj *reconciler.Status) ([]*model.GithubComKloudliteOperatorToolkitReconcilerResourceRef, error) {
	var m []*model.GithubComKloudliteOperatorToolkitReconcilerResourceRef
	if err := fn.JsonConversion(obj.Resources, &m); err != nil {
		return nil, errors.NewE(err)
	}
	return m, nil
}

// Data is the resolver for the data field.
func (r *k8s__io___api___core___v1__SecretResolver) Data(ctx context.Context, obj *v11.Secret) (map[string]interface{}, error) {
	if obj == nil {
		return nil, errNilSecret
	}

	m := make(map[string]any, len(obj.Data))
	if err := fn.JsonConversion(obj.Data, &m); err != nil {
		return nil, err
	}

	return m, nil
}

// StringData is the resolver for the stringData field.
func (r *k8s__io___api___core___v1__SecretResolver) StringData(ctx context.Context, obj *v11.Secret) (map[string]interface{}, error) {
	if obj == nil {
		return nil, errNilSecret
	}

	m := make(map[string]any, len(obj.StringData))
	if err := fn.JsonConversion(obj.StringData, &m); err != nil {
		return nil, err
	}

	return m, nil
}

// Type is the resolver for the type field.
func (r *k8s__io___api___core___v1__SecretResolver) Type(ctx context.Context, obj *v11.Secret) (*model.K8sIoAPICoreV1SecretType, error) {
	if obj == nil {
		return nil, errNilSecret
	}

	return fn.New(model.K8sIoAPICoreV1SecretType(obj.Type)), nil
}

// Annotations is the resolver for the annotations field.
func (r *metadataResolver) Annotations(ctx context.Context, obj *v1.ObjectMeta) (map[string]interface{}, error) {
	var m map[string]any
	if err := fn.JsonConversion(obj.Annotations, &m); err != nil {
		return nil, errors.NewE(err)
	}
	return m, nil
}

// CreationTimestamp is the resolver for the creationTimestamp field.
func (r *metadataResolver) CreationTimestamp(ctx context.Context, obj *v1.ObjectMeta) (string, error) {
	if obj == nil {
		return "", errors.Newf("metadata is nil")
	}
	return obj.CreationTimestamp.Format(time.RFC3339), nil
}

// DeletionTimestamp is the resolver for the deletionTimestamp field.
func (r *metadataResolver) DeletionTimestamp(ctx context.Context, obj *v1.ObjectMeta) (*string, error) {
	if obj == nil {
		return nil, errors.Newf("metadata is nil")
	}

	if obj.DeletionTimestamp == nil {
		return nil, nil
	}

	return fn.New(obj.DeletionTimestamp.Format(time.RFC3339)), nil
}

// Labels is the resolver for the labels field.
func (r *metadataResolver) Labels(ctx context.Context, obj *v1.ObjectMeta) (map[string]interface{}, error) {
	var m map[string]any
	if err := fn.JsonConversion(obj.Labels, &m); err != nil {
		return nil, errors.NewE(err)
	}
	return m, nil
}

// LastSyncedAt is the resolver for the lastSyncedAt field.
func (r *github__com___kloudlite___api___pkg___types__SyncStatusInResolver) LastSyncedAt(ctx context.Context, obj *types.SyncStatus, data *string) error {
	panic(fmt.Errorf("not implemented: LastSyncedAt - lastSyncedAt"))
}

// SyncScheduledAt is the resolver for the syncScheduledAt field.
func (r *github__com___kloudlite___api___pkg___types__SyncStatusInResolver) SyncScheduledAt(ctx context.Context, obj *types.SyncStatus, data *string) error {
	panic(fmt.Errorf("not implemented: SyncScheduledAt - syncScheduledAt"))
}

// AppPort is the resolver for the appPort field.
func (r *github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappingsInResolver) AppPort(ctx context.Context, obj *v12.AppInterceptPortMappings, data int) error {
	if obj == nil {
		return errors.Newf("object is nil")
	}
	obj.AppPort = uint16(data)
	return nil
}

// DevicePort is the resolver for the devicePort field.
func (r *github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappingsInResolver) DevicePort(ctx context.Context, obj *v12.AppInterceptPortMappings, data int) error {
	if obj == nil {
		return errors.Newf("object is nil")
	}
	obj.DevicePort = uint16(data)
	return nil
}

// Protocol is the resolver for the protocol field.
func (r *github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappingsInResolver) Protocol(ctx context.Context, obj *v12.AppInterceptPortMappings, data model.GithubComKloudliteOperatorApisCrdsV1ServiceProtocol) error {
	obj.Protocol = v12.ServiceProtocol(data)
	return nil
}

// DevicePort is the resolver for the devicePort field.
func (r *github__com___kloudlite___operator___apis___crds___v1__SvcInterceptPortMappingsInResolver) DevicePort(ctx context.Context, obj *v12.SvcInterceptPortMappings, data int) error {
	obj.DevicePort = uint16(data)
	return nil
}

// ServicePort is the resolver for the servicePort field.
func (r *github__com___kloudlite___operator___apis___crds___v1__SvcInterceptPortMappingsInResolver) ServicePort(ctx context.Context, obj *v12.SvcInterceptPortMappings, data int) error {
	obj.ServicePort = uint16(data)
	return nil
}

// Annotations is the resolver for the annotations field.
func (r *metadataInResolver) Annotations(ctx context.Context, obj *v1.ObjectMeta, data map[string]interface{}) error {
	var m map[string]string
	if err := fn.JsonConversion(data, &m); err != nil {
		return errors.NewE(err)
	}
	obj.SetAnnotations(m)
	return nil
}

// Labels is the resolver for the labels field.
func (r *metadataInResolver) Labels(ctx context.Context, obj *v1.ObjectMeta, data map[string]interface{}) error {
	var m map[string]string
	if err := fn.JsonConversion(data, &m); err != nil {
		return errors.NewE(err)
	}
	obj.SetLabels(m)
	return nil
}

// Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePlugin returns generated.Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginResolver implementation.
func (r *Resolver) Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePlugin() generated.Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginResolver {
	return &github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginResolver{r}
}

// Github__com___kloudlite___api___common__CreatedOrUpdatedBy returns generated.Github__com___kloudlite___api___common__CreatedOrUpdatedByResolver implementation.
func (r *Resolver) Github__com___kloudlite___api___common__CreatedOrUpdatedBy() generated.Github__com___kloudlite___api___common__CreatedOrUpdatedByResolver {
	return &github__com___kloudlite___api___common__CreatedOrUpdatedByResolver{r}
}

// Github__com___kloudlite___api___pkg___types__SyncStatus returns generated.Github__com___kloudlite___api___pkg___types__SyncStatusResolver implementation.
func (r *Resolver) Github__com___kloudlite___api___pkg___types__SyncStatus() generated.Github__com___kloudlite___api___pkg___types__SyncStatusResolver {
	return &github__com___kloudlite___api___pkg___types__SyncStatusResolver{r}
}

// Github__com___kloudlite___operator___toolkit___reconciler__Status returns generated.Github__com___kloudlite___operator___toolkit___reconciler__StatusResolver implementation.
func (r *Resolver) Github__com___kloudlite___operator___toolkit___reconciler__Status() generated.Github__com___kloudlite___operator___toolkit___reconciler__StatusResolver {
	return &github__com___kloudlite___operator___toolkit___reconciler__StatusResolver{r}
}

// K8s__io___api___core___v1__Secret returns generated.K8s__io___api___core___v1__SecretResolver implementation.
func (r *Resolver) K8s__io___api___core___v1__Secret() generated.K8s__io___api___core___v1__SecretResolver {
	return &k8s__io___api___core___v1__SecretResolver{r}
}

// Metadata returns generated.MetadataResolver implementation.
func (r *Resolver) Metadata() generated.MetadataResolver { return &metadataResolver{r} }

// Github__com___kloudlite___api___pkg___types__SyncStatusIn returns generated.Github__com___kloudlite___api___pkg___types__SyncStatusInResolver implementation.
func (r *Resolver) Github__com___kloudlite___api___pkg___types__SyncStatusIn() generated.Github__com___kloudlite___api___pkg___types__SyncStatusInResolver {
	return &github__com___kloudlite___api___pkg___types__SyncStatusInResolver{r}
}

// Github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappingsIn returns generated.Github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappingsInResolver implementation.
func (r *Resolver) Github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappingsIn() generated.Github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappingsInResolver {
	return &github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappingsInResolver{r}
}

// Github__com___kloudlite___operator___apis___crds___v1__SvcInterceptPortMappingsIn returns generated.Github__com___kloudlite___operator___apis___crds___v1__SvcInterceptPortMappingsInResolver implementation.
func (r *Resolver) Github__com___kloudlite___operator___apis___crds___v1__SvcInterceptPortMappingsIn() generated.Github__com___kloudlite___operator___apis___crds___v1__SvcInterceptPortMappingsInResolver {
	return &github__com___kloudlite___operator___apis___crds___v1__SvcInterceptPortMappingsInResolver{r}
}

// MetadataIn returns generated.MetadataInResolver implementation.
func (r *Resolver) MetadataIn() generated.MetadataInResolver { return &metadataInResolver{r} }

type (
	github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginResolver struct{ *Resolver }
	github__com___kloudlite___api___common__CreatedOrUpdatedByResolver                                 struct{ *Resolver }
	github__com___kloudlite___api___pkg___types__SyncStatusResolver                                    struct{ *Resolver }
	github__com___kloudlite___operator___toolkit___reconciler__StatusResolver                          struct{ *Resolver }
	k8s__io___api___core___v1__SecretResolver                                                          struct{ *Resolver }
	metadataResolver                                                                                   struct{ *Resolver }
	github__com___kloudlite___api___pkg___types__SyncStatusInResolver                                  struct{ *Resolver }
	github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappingsInResolver          struct{ *Resolver }
	github__com___kloudlite___operator___apis___crds___v1__SvcInterceptPortMappingsInResolver          struct{ *Resolver }
	metadataInResolver                                                                                 struct{ *Resolver }
)
