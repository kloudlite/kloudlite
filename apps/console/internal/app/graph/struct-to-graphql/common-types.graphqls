type Github__com___kloudlite___api___apps___console___internal___entities__InterceptStatus @shareable {
  intercepted: Boolean
  portMappings: [Github__com___kloudlite___operator___apis___crds___v1__SvcInterceptPortMappings!]
  toAddr: String!
}

type Github__com___kloudlite___api___apps___console___internal___entities__ManagedResourceRef @shareable {
  id: String!
  name: String!
  namespace: String!
}

type Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePlugin @shareable {
  meta: Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginMeta
  plugin: String!
  spec: Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginSpec!
}

type Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginInputField @shareable {
  defaultValue: Any
  description: String
  displayUnit: String
  input: String!
  label: String!
  max: Float
  min: Float
  multiplier: Float
  required: Boolean
  type: String!
  unit: String
}

type Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginMeta @shareable {
  logo: String!
}

type Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginSpec @shareable {
  apiVersion: String!
  services: [Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginSpecServices!]!
}

type Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginSpecServices @shareable {
  active: Boolean!
  description: String!
  inputs: [Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginInputField!]!
  kind: String!
  resources: [Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginSpecServicesResources!]!
}

type Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginSpecServicesResources @shareable {
  description: String!
  inputs: [Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginInputField!]!
  kind: String!
}

type Github__com___kloudlite___api___apps___console___internal___entities__SecretCreatedFor @shareable {
  name: String!
  namespace: String!
  refId: String!
  resourceType: Github__com___kloudlite___api___apps___console___internal___entities__ResourceType!
}

type Github__com___kloudlite___api___common__CreatedOrUpdatedBy @shareable {
  userEmail: String!
  userId: String!
  userName: String!
}

type Github__com___kloudlite___api___pkg___types__SyncStatus @shareable {
  action: Github__com___kloudlite___api___pkg___types__SyncAction!
  error: String
  lastSyncedAt: Date
  recordVersion: Int!
  state: Github__com___kloudlite___api___pkg___types__SyncState!
  syncScheduledAt: Date
}

type Github__com___kloudlite___operator___apis___common____types__NamespacedResourceRef @shareable {
  name: String!
  namespace: String!
}

type Github__com___kloudlite___operator___apis___common____types__SecretRef @shareable {
  name: String!
  namespace: String
}

type Github__com___kloudlite___operator___apis___crds___v1__AppContainer @shareable {
  args: [String!]
  command: [String!]
  env: [Github__com___kloudlite___operator___apis___crds___v1__ContainerEnv!]
  envFrom: [Github__com___kloudlite___operator___apis___crds___v1__EnvFrom!]
  image: String!
  imagePullPolicy: String
  livenessProbe: Github__com___kloudlite___operator___apis___crds___v1__Probe
  name: String!
  readinessProbe: Github__com___kloudlite___operator___apis___crds___v1__Probe
  resourceCpu: Github__com___kloudlite___operator___apis___crds___v1__ContainerResource
  resourceMemory: Github__com___kloudlite___operator___apis___crds___v1__ContainerResource
  volumes: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolume!]
}

type Github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappings @shareable {
  appPort: Int!
  devicePort: Int!
  protocol: Github__com___kloudlite___operator___apis___crds___v1__ServiceProtocol!
}

type Github__com___kloudlite___operator___apis___crds___v1__AppRouter @shareable {
  backendProtocol: String
  basicAuth: Github__com___kloudlite___operator___apis___crds___v1__BasicAuth
  cors: Github__com___kloudlite___operator___apis___crds___v1__Cors
  domains: [String!]!
  https: Github__com___kloudlite___operator___apis___crds___v1__Https
  ingressClass: String
  maxBodySizeInMB: Int
  nginxIngressAnnotations: Map
  rateLimit: Github__com___kloudlite___operator___apis___crds___v1__RateLimit
  routes: [Github__com___kloudlite___operator___apis___crds___v1__Route!]
}

type Github__com___kloudlite___operator___apis___crds___v1__AppSpec @shareable {
  containers: [Github__com___kloudlite___operator___apis___crds___v1__AppContainer!]!
  displayName: String
  freeze: Boolean
  hpa: Github__com___kloudlite___operator___apis___crds___v1__HPA
  intercept: Github__com___kloudlite___operator___apis___crds___v1__Intercept
  nodeSelector: Map
  region: String
  replicas: Int
  router: Github__com___kloudlite___operator___apis___crds___v1__AppRouter
  serviceAccount: String
  services: [Github__com___kloudlite___operator___apis___crds___v1__AppSvc!]
  tolerations: [K8s__io___api___core___v1__Toleration!]
  topologySpreadConstraints: [K8s__io___api___core___v1__TopologySpreadConstraint!]
}

type Github__com___kloudlite___operator___apis___crds___v1__AppSvc @shareable {
  port: Int!
  protocol: String
}

type Github__com___kloudlite___operator___apis___crds___v1__BasicAuth @shareable {
  enabled: Boolean!
  secretName: String
  username: String
}

type Github__com___kloudlite___operator___apis___crds___v1__ClusterManagedServiceSpec @shareable {
  msvcSpec: Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpec!
  targetNamespace: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerEnv @shareable {
  key: String!
  optional: Boolean
  refKey: String
  refName: String
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret
  value: String
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerResource @shareable {
  max: String
  min: String
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerVolume @shareable {
  items: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItem!]
  mountPath: String!
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItem @shareable {
  fileName: String
  key: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__Cors @shareable {
  allowCredentials: Boolean
  enabled: Boolean
  origins: [String!]
}

type Github__com___kloudlite___operator___apis___crds___v1__EnvFrom @shareable {
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

type Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRouting @shareable {
  mode: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingMode
  privateIngressClass: String
  publicIngressClass: String
}

type Github__com___kloudlite___operator___apis___crds___v1__EnvironmentSpec @shareable {
  routing: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRouting
  suspend: Boolean
  targetNamespace: String
}

type Github__com___kloudlite___operator___apis___crds___v1__ExternalAppSpec @shareable {
  intercept: Github__com___kloudlite___operator___apis___crds___v1__Intercept
  record: String!
  recordType: Github__com___kloudlite___operator___apis___crds___v1__ExternalAppRecordType!
}

type Github__com___kloudlite___operator___apis___crds___v1__HPA @shareable {
  enabled: Boolean!
  maxReplicas: Int
  minReplicas: Int
  thresholdCpu: Int
  thresholdMemory: Int
}

type Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbe @shareable {
  httpHeaders: Map
  path: String!
  port: Int!
}

type Github__com___kloudlite___operator___apis___crds___v1__Https @shareable {
  clusterIssuer: String
  enabled: Boolean!
  forceRedirect: Boolean
}

type Github__com___kloudlite___operator___apis___crds___v1__Intercept @shareable {
  enabled: Boolean
  portMappings: [Github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappings!]
  toDevice: String
  toIPAddr: String
}

type Github__com___kloudlite___operator___apis___crds___v1__ManagedResourceSpec @shareable {
  managedServiceRef: Github__com___kloudlite___operator___toolkit___types__ObjectReference!
  plugin: Github__com___kloudlite___operator___apis___crds___v1__PluginTemplate!
}

type Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpec @shareable {
  plugin: Github__com___kloudlite___operator___apis___crds___v1__PluginTemplate
  serviceTemplate: Github__com___kloudlite___operator___apis___crds___v1__PluginTemplate
}

type Github__com___kloudlite___operator___apis___crds___v1__PluginTemplate @shareable {
  apiVersion: String!
  export: Github__com___kloudlite___operator___toolkit___plugin__Export
  kind: String!
  spec: Map
}

type Github__com___kloudlite___operator___apis___crds___v1__Probe @shareable {
  failureThreshold: Int
  httpGet: Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbe
  initialDelay: Int
  interval: Int
  shell: Github__com___kloudlite___operator___apis___crds___v1__ShellProbe
  tcp: Github__com___kloudlite___operator___apis___crds___v1__TcpProbe
  type: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__RateLimit @shareable {
  connections: Int
  enabled: Boolean
  rpm: Int
  rps: Int
}

type Github__com___kloudlite___operator___apis___crds___v1__Route @shareable {
  app: String!
  path: String!
  port: Int!
  rewrite: Boolean
}

type Github__com___kloudlite___operator___apis___crds___v1__RouterSpec @shareable {
  backendProtocol: String
  basicAuth: Github__com___kloudlite___operator___apis___crds___v1__BasicAuth
  cors: Github__com___kloudlite___operator___apis___crds___v1__Cors
  domains: [String!]!
  https: Github__com___kloudlite___operator___apis___crds___v1__Https
  ingressClass: String
  maxBodySizeInMB: Int
  nginxIngressAnnotations: Map
  rateLimit: Github__com___kloudlite___operator___apis___crds___v1__RateLimit
  routes: [Github__com___kloudlite___operator___apis___crds___v1__Route!]
}

type Github__com___kloudlite___operator___apis___crds___v1__ShellProbe @shareable {
  command: [String!]
}

type Github__com___kloudlite___operator___apis___crds___v1__SvcInterceptPortMappings @shareable {
  devicePort: Int!
  servicePort: Int!
}

type Github__com___kloudlite___operator___apis___crds___v1__TcpProbe @shareable {
  port: Int!
}

type Github__com___kloudlite___operator___apis___networking___v1__ServiceBindingSpec @shareable {
  globalIP: String!
  hostname: String
  ports: [K8s__io___api___core___v1__ServicePort!]
  serviceIP: String
  serviceRef: Github__com___kloudlite___operator___apis___common____types__NamespacedResourceRef
}

type Github__com___kloudlite___operator___pkg___operator__Check @shareable {
  debug: String
  error: String
  generation: Int
  info: String
  message: String
  startedAt: Date
  state: Github__com___kloudlite___operator___pkg___operator__State
  status: Boolean!
}

type Github__com___kloudlite___operator___pkg___operator__CheckMeta @shareable {
  debug: Boolean
  description: String
  hide: Boolean
  name: String!
  title: String!
}

type Github__com___kloudlite___operator___pkg___operator__ResourceRef @shareable {
  apiVersion: String!
  kind: String!
  name: String!
  namespace: String!
}

type Github__com___kloudlite___operator___pkg___operator__Status @shareable {
  checkList: [Github__com___kloudlite___operator___pkg___operator__CheckMeta!]
  checks: Map
  isReady: Boolean!
  lastReadyGeneration: Int
  lastReconcileTime: Date
  message: Github__com___kloudlite___operator___pkg___raw____json__RawJson
  resources: [Github__com___kloudlite___operator___pkg___operator__ResourceRef!]
}

type Github__com___kloudlite___operator___pkg___raw____json__RawJson @shareable {
  RawMessage: Any
}

type Github__com___kloudlite___operator___toolkit___plugin__Export @shareable {
  template: String
  viaSecret: String
}

type Github__com___kloudlite___operator___toolkit___reconciler__Check @shareable {
  debug: String
  error: String
  generation: Int
  info: String
  message: String
  startedAt: Date
  state: Github__com___kloudlite___operator___toolkit___reconciler__State
  status: Boolean!
}

type Github__com___kloudlite___operator___toolkit___reconciler__CheckMeta @shareable {
  debug: Boolean
  description: String
  hide: Boolean
  name: String!
  title: String!
}

type Github__com___kloudlite___operator___toolkit___reconciler__ResourceRef @shareable {
  apiVersion: String!
  kind: String!
  name: String!
  namespace: String!
}

type Github__com___kloudlite___operator___toolkit___reconciler__Status @shareable {
  checkList: [Github__com___kloudlite___operator___toolkit___reconciler__CheckMeta!]
  checks: Map
  isReady: Boolean!
  lastReadyGeneration: Int
  lastReconcileTime: Date
  resources: [Github__com___kloudlite___operator___toolkit___reconciler__ResourceRef!]
}

type Github__com___kloudlite___operator___toolkit___types__CPUResource @shareable {
  max: String!
  min: String!
}

type Github__com___kloudlite___operator___toolkit___types__MemoryResource @shareable {
  max: String!
  min: String!
}

type Github__com___kloudlite___operator___toolkit___types__ObjectReference @shareable {
  apiVersion: String!
  kind: String!
  name: String!
  namespace: String!
}

type Github__com___kloudlite___operator___toolkit___types__Resource @shareable {
  cpu: Github__com___kloudlite___operator___toolkit___types__CPUResource
  memory: Github__com___kloudlite___operator___toolkit___types__MemoryResource
}

type Github__com___kloudlite___plugin____helm____chart___api___v1__ChartInfo @shareable {
  name: String!
  url: String!
  version: String
}

type Github__com___kloudlite___plugin____helm____chart___api___v1__HelmChartSpec @shareable {
  chart: Github__com___kloudlite___plugin____helm____chart___api___v1__ChartInfo!
  helmValues: Map!
  jobVars: Github__com___kloudlite___plugin____helm____chart___api___v1__HelmJobVars
  postInstall: String
  postUninstall: String
  preInstall: String
  preUninstall: String
}

type Github__com___kloudlite___plugin____helm____chart___api___v1__HelmChartStatus @shareable {
  checkList: [Github__com___kloudlite___operator___toolkit___reconciler__CheckMeta!]
  checks: Map
  isReady: Boolean!
  lastReadyGeneration: Int
  lastReconcileTime: Date
  releaseNotes: String!
  releaseStatus: String!
  resources: [Github__com___kloudlite___operator___toolkit___reconciler__ResourceRef!]
}

type Github__com___kloudlite___plugin____helm____chart___api___v1__HelmJobVars @shareable {
  affinity: K8s__io___api___core___v1__Affinity
  nodeSelector: Map
  resources: Github__com___kloudlite___operator___toolkit___types__Resource
  tolerations: [K8s__io___api___core___v1__Toleration!]
}

type K8s__io___api___core___v1__Affinity @shareable {
  nodeAffinity: K8s__io___api___core___v1__NodeAffinity
  podAffinity: K8s__io___api___core___v1__PodAffinity
  podAntiAffinity: K8s__io___api___core___v1__PodAntiAffinity
}

type K8s__io___api___core___v1__NodeAffinity @shareable {
  preferredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__PreferredSchedulingTerm!]
  requiredDuringSchedulingIgnoredDuringExecution: K8s__io___api___core___v1__NodeSelector
}

type K8s__io___api___core___v1__NodeSelector @shareable {
  nodeSelectorTerms: [K8s__io___api___core___v1__NodeSelectorTerm!]!
}

type K8s__io___api___core___v1__NodeSelectorRequirement @shareable {
  key: String!
  operator: K8s__io___api___core___v1__NodeSelectorOperator!
  values: [String!]
}

type K8s__io___api___core___v1__NodeSelectorTerm @shareable {
  matchExpressions: [K8s__io___api___core___v1__NodeSelectorRequirement!]
  matchFields: [K8s__io___api___core___v1__NodeSelectorRequirement!]
}

type K8s__io___api___core___v1__PodAffinity @shareable {
  preferredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__WeightedPodAffinityTerm!]
  requiredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__PodAffinityTerm!]
}

type K8s__io___api___core___v1__PodAffinityTerm @shareable {
  labelSelector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelector
  matchLabelKeys: [String!]
  mismatchLabelKeys: [String!]
  namespaces: [String!]
  namespaceSelector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelector
  topologyKey: String!
}

type K8s__io___api___core___v1__PodAntiAffinity @shareable {
  preferredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__WeightedPodAffinityTerm!]
  requiredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__PodAffinityTerm!]
}

type K8s__io___api___core___v1__PreferredSchedulingTerm @shareable {
  preference: K8s__io___api___core___v1__NodeSelectorTerm!
  weight: Int!
}

type K8s__io___api___core___v1__Secret @shareable {
  apiVersion: String
  data: Map
  immutable: Boolean
  kind: String
  metadata: Metadata @goField(name: "objectMeta")
  stringData: Map
  type: K8s__io___api___core___v1__SecretType
}

type K8s__io___api___core___v1__ServicePort @shareable {
  appProtocol: String
  name: String
  nodePort: Int
  port: Int!
  protocol: K8s__io___api___core___v1__Protocol
  targetPort: K8s__io___apimachinery___pkg___util___intstr__IntOrString
}

type K8s__io___api___core___v1__Toleration @shareable {
  effect: K8s__io___api___core___v1__TaintEffect
  key: String
  operator: K8s__io___api___core___v1__TolerationOperator
  tolerationSeconds: Int
  value: String
}

type K8s__io___api___core___v1__TopologySpreadConstraint @shareable {
  labelSelector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelector
  matchLabelKeys: [String!]
  maxSkew: Int!
  minDomains: Int
  nodeAffinityPolicy: String
  nodeTaintsPolicy: String
  topologyKey: String!
  whenUnsatisfiable: K8s__io___api___core___v1__UnsatisfiableConstraintAction!
}

type K8s__io___api___core___v1__WeightedPodAffinityTerm @shareable {
  podAffinityTerm: K8s__io___api___core___v1__PodAffinityTerm!
  weight: Int!
}

type K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelector @shareable {
  matchExpressions: [K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorRequirement!]
  matchLabels: Map
}

type K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorRequirement @shareable {
  key: String!
  operator: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorOperator!
  values: [String!]
}

type K8s__io___apimachinery___pkg___util___intstr__IntOrString @shareable {
  IntVal: Int!
  StrVal: String!
  Type: Int!
}

type Metadata @shareable {
  annotations: Map
  creationTimestamp: Date!
  deletionTimestamp: Date
  generation: Int!
  labels: Map
  name: String!
  namespace: String
}

type PageInfo @shareable {
  endCursor: String
  hasNextPage: Boolean
  hasPrevPage: Boolean
  startCursor: String
}

input Github__com___kloudlite___api___apps___console___internal___entities__InterceptStatusIn {
  intercepted: Boolean
  portMappings: [Github__com___kloudlite___operator___apis___crds___v1__SvcInterceptPortMappingsIn!]
  toAddr: String!
}

input Github__com___kloudlite___api___apps___console___internal___entities__ManagedResourceRefIn {
  id: String!
  name: String!
  namespace: String!
}

input Github__com___kloudlite___api___apps___console___internal___entities__ManagedServicePluginInputFieldIn {
  defaultValue: Any
  description: String
  displayUnit: String
  input: String!
  label: String!
  max: Float
  min: Float
  multiplier: Float
  required: Boolean
  type: String!
  unit: String
}

input Github__com___kloudlite___api___pkg___types__SyncStatusIn {
  action: Github__com___kloudlite___api___pkg___types__SyncAction!
  error: String
  lastSyncedAt: Date
  recordVersion: Int!
  state: Github__com___kloudlite___api___pkg___types__SyncState!
  syncScheduledAt: Date
}

input Github__com___kloudlite___operator___apis___common____types__NamespacedResourceRefIn {
  name: String!
  namespace: String!
}

input Github__com___kloudlite___operator___apis___common____types__SecretRefIn {
  name: String!
  namespace: String
}

input Github__com___kloudlite___operator___apis___crds___v1__AppContainerIn {
  args: [String!]
  command: [String!]
  env: [Github__com___kloudlite___operator___apis___crds___v1__ContainerEnvIn!]
  envFrom: [Github__com___kloudlite___operator___apis___crds___v1__EnvFromIn!]
  image: String!
  imagePullPolicy: String
  livenessProbe: Github__com___kloudlite___operator___apis___crds___v1__ProbeIn
  name: String!
  readinessProbe: Github__com___kloudlite___operator___apis___crds___v1__ProbeIn
  resourceCpu: Github__com___kloudlite___operator___apis___crds___v1__ContainerResourceIn
  resourceMemory: Github__com___kloudlite___operator___apis___crds___v1__ContainerResourceIn
  volumes: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeIn!]
}

input Github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappingsIn {
  appPort: Int!
  devicePort: Int!
  protocol: Github__com___kloudlite___operator___apis___crds___v1__ServiceProtocol!
}

input Github__com___kloudlite___operator___apis___crds___v1__AppRouterIn {
  backendProtocol: String
  basicAuth: Github__com___kloudlite___operator___apis___crds___v1__BasicAuthIn
  cors: Github__com___kloudlite___operator___apis___crds___v1__CorsIn
  domains: [String!]!
  https: Github__com___kloudlite___operator___apis___crds___v1__HttpsIn
  ingressClass: String
  maxBodySizeInMB: Int
  nginxIngressAnnotations: Map
  rateLimit: Github__com___kloudlite___operator___apis___crds___v1__RateLimitIn
  routes: [Github__com___kloudlite___operator___apis___crds___v1__RouteIn!]
}

input Github__com___kloudlite___operator___apis___crds___v1__AppSpecIn {
  containers: [Github__com___kloudlite___operator___apis___crds___v1__AppContainerIn!]!
  displayName: String
  freeze: Boolean
  hpa: Github__com___kloudlite___operator___apis___crds___v1__HPAIn
  intercept: Github__com___kloudlite___operator___apis___crds___v1__InterceptIn
  nodeSelector: Map
  region: String
  replicas: Int
  router: Github__com___kloudlite___operator___apis___crds___v1__AppRouterIn
  serviceAccount: String
  services: [Github__com___kloudlite___operator___apis___crds___v1__AppSvcIn!]
  tolerations: [K8s__io___api___core___v1__TolerationIn!]
  topologySpreadConstraints: [K8s__io___api___core___v1__TopologySpreadConstraintIn!]
}

input Github__com___kloudlite___operator___apis___crds___v1__AppSvcIn {
  port: Int!
  protocol: String
}

input Github__com___kloudlite___operator___apis___crds___v1__BasicAuthIn {
  enabled: Boolean!
  secretName: String
  username: String
}

input Github__com___kloudlite___operator___apis___crds___v1__ClusterManagedServiceSpecIn {
  msvcSpec: Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpecIn!
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerEnvIn {
  key: String!
  optional: Boolean
  refKey: String
  refName: String
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret
  value: String
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerResourceIn {
  max: String
  min: String
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeIn {
  items: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItemIn!]
  mountPath: String!
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItemIn {
  fileName: String
  key: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__CorsIn {
  allowCredentials: Boolean
  enabled: Boolean
  origins: [String!]
}

input Github__com___kloudlite___operator___apis___crds___v1__EnvFromIn {
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

input Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingIn {
  mode: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingMode
}

input Github__com___kloudlite___operator___apis___crds___v1__EnvironmentSpecIn {
  routing: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingIn
  suspend: Boolean
  targetNamespace: String
}

input Github__com___kloudlite___operator___apis___crds___v1__ExternalAppSpecIn {
  intercept: Github__com___kloudlite___operator___apis___crds___v1__InterceptIn
  record: String!
  recordType: Github__com___kloudlite___operator___apis___crds___v1__ExternalAppRecordType!
}

input Github__com___kloudlite___operator___apis___crds___v1__HPAIn {
  enabled: Boolean!
  maxReplicas: Int
  minReplicas: Int
  thresholdCpu: Int
  thresholdMemory: Int
}

input Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbeIn {
  httpHeaders: Map
  path: String!
  port: Int!
}

input Github__com___kloudlite___operator___apis___crds___v1__HttpsIn {
  clusterIssuer: String
  enabled: Boolean!
  forceRedirect: Boolean
}

input Github__com___kloudlite___operator___apis___crds___v1__InterceptIn {
  enabled: Boolean
  portMappings: [Github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappingsIn!]
  toDevice: String
  toIPAddr: String
}

input Github__com___kloudlite___operator___apis___crds___v1__ManagedResourceSpecIn {
  managedServiceRef: Github__com___kloudlite___operator___toolkit___types__ObjectReferenceIn!
  plugin: Github__com___kloudlite___operator___apis___crds___v1__PluginTemplateIn!
}

input Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpecIn {
  plugin: Github__com___kloudlite___operator___apis___crds___v1__PluginTemplateIn
  serviceTemplate: Github__com___kloudlite___operator___apis___crds___v1__PluginTemplateIn
}

input Github__com___kloudlite___operator___apis___crds___v1__PluginTemplateIn {
  apiVersion: String!
  export: Github__com___kloudlite___operator___toolkit___plugin__ExportIn
  kind: String!
  spec: Map
}

input Github__com___kloudlite___operator___apis___crds___v1__ProbeIn {
  failureThreshold: Int
  httpGet: Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbeIn
  initialDelay: Int
  interval: Int
  shell: Github__com___kloudlite___operator___apis___crds___v1__ShellProbeIn
  tcp: Github__com___kloudlite___operator___apis___crds___v1__TcpProbeIn
  type: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__RateLimitIn {
  connections: Int
  enabled: Boolean
  rpm: Int
  rps: Int
}

input Github__com___kloudlite___operator___apis___crds___v1__RouteIn {
  app: String!
  path: String!
  port: Int!
  rewrite: Boolean
}

input Github__com___kloudlite___operator___apis___crds___v1__RouterSpecIn {
  backendProtocol: String
  basicAuth: Github__com___kloudlite___operator___apis___crds___v1__BasicAuthIn
  cors: Github__com___kloudlite___operator___apis___crds___v1__CorsIn
  domains: [String!]!
  https: Github__com___kloudlite___operator___apis___crds___v1__HttpsIn
  ingressClass: String
  maxBodySizeInMB: Int
  nginxIngressAnnotations: Map
  rateLimit: Github__com___kloudlite___operator___apis___crds___v1__RateLimitIn
  routes: [Github__com___kloudlite___operator___apis___crds___v1__RouteIn!]
}

input Github__com___kloudlite___operator___apis___crds___v1__ShellProbeIn {
  command: [String!]
}

input Github__com___kloudlite___operator___apis___crds___v1__SvcInterceptPortMappingsIn {
  devicePort: Int!
  servicePort: Int!
}

input Github__com___kloudlite___operator___apis___crds___v1__TcpProbeIn {
  port: Int!
}

input Github__com___kloudlite___operator___apis___networking___v1__ServiceBindingSpecIn {
  globalIP: String!
  hostname: String
  ports: [K8s__io___api___core___v1__ServicePortIn!]
  serviceIP: String
  serviceRef: Github__com___kloudlite___operator___apis___common____types__NamespacedResourceRefIn
}

input Github__com___kloudlite___operator___pkg___operator__CheckIn {
  debug: String
  error: String
  generation: Int
  info: String
  message: String
  startedAt: Date
  state: Github__com___kloudlite___operator___pkg___operator__State
  status: Boolean!
}

input Github__com___kloudlite___operator___pkg___operator__CheckMetaIn {
  debug: Boolean
  description: String
  hide: Boolean
  name: String!
  title: String!
}

input Github__com___kloudlite___operator___pkg___operator__ResourceRefIn {
  apiVersion: String!
  kind: String!
  name: String!
  namespace: String!
}

input Github__com___kloudlite___operator___pkg___operator__StatusIn {
  checkList: [Github__com___kloudlite___operator___pkg___operator__CheckMetaIn!]
  checks: Map
  isReady: Boolean!
  lastReadyGeneration: Int
  lastReconcileTime: Date
  message: Github__com___kloudlite___operator___pkg___raw____json__RawJsonIn
  resources: [Github__com___kloudlite___operator___pkg___operator__ResourceRefIn!]
}

input Github__com___kloudlite___operator___pkg___raw____json__RawJsonIn {
  RawMessage: Any
}

input Github__com___kloudlite___operator___toolkit___plugin__ExportIn {
  template: String
  viaSecret: String
}

input Github__com___kloudlite___operator___toolkit___reconciler__CheckIn {
  debug: String
  error: String
  generation: Int
  info: String
  message: String
  startedAt: Date
  state: Github__com___kloudlite___operator___toolkit___reconciler__State
  status: Boolean!
}

input Github__com___kloudlite___operator___toolkit___reconciler__CheckMetaIn {
  debug: Boolean
  description: String
  hide: Boolean
  name: String!
  title: String!
}

input Github__com___kloudlite___operator___toolkit___reconciler__ResourceRefIn {
  apiVersion: String!
  kind: String!
  name: String!
  namespace: String!
}

input Github__com___kloudlite___operator___toolkit___reconciler__StatusIn {
  checkList: [Github__com___kloudlite___operator___toolkit___reconciler__CheckMetaIn!]
  checks: Map
  isReady: Boolean!
  lastReadyGeneration: Int
  lastReconcileTime: Date
  resources: [Github__com___kloudlite___operator___toolkit___reconciler__ResourceRefIn!]
}

input Github__com___kloudlite___operator___toolkit___types__CPUResourceIn {
  max: String!
  min: String!
}

input Github__com___kloudlite___operator___toolkit___types__MemoryResourceIn {
  max: String!
  min: String!
}

input Github__com___kloudlite___operator___toolkit___types__ObjectReferenceIn {
  apiVersion: String!
  kind: String!
  name: String!
  namespace: String!
}

input Github__com___kloudlite___operator___toolkit___types__ResourceIn {
  cpu: Github__com___kloudlite___operator___toolkit___types__CPUResourceIn
  memory: Github__com___kloudlite___operator___toolkit___types__MemoryResourceIn
}

input Github__com___kloudlite___plugin____helm____chart___api___v1__ChartInfoIn {
  name: String!
  url: String!
  version: String
}

input Github__com___kloudlite___plugin____helm____chart___api___v1__HelmChartSpecIn {
  chart: Github__com___kloudlite___plugin____helm____chart___api___v1__ChartInfoIn!
  helmValues: Map!
  jobVars: Github__com___kloudlite___plugin____helm____chart___api___v1__HelmJobVarsIn
  postInstall: String
  postUninstall: String
  preInstall: String
  preUninstall: String
}

input Github__com___kloudlite___plugin____helm____chart___api___v1__HelmChartStatusIn {
  checkList: [Github__com___kloudlite___operator___toolkit___reconciler__CheckMetaIn!]
  checks: Map
  isReady: Boolean!
  lastReadyGeneration: Int
  lastReconcileTime: Date
  releaseNotes: String!
  releaseStatus: String!
  resources: [Github__com___kloudlite___operator___toolkit___reconciler__ResourceRefIn!]
}

input Github__com___kloudlite___plugin____helm____chart___api___v1__HelmJobVarsIn {
  affinity: K8s__io___api___core___v1__AffinityIn
  nodeSelector: Map
  resources: Github__com___kloudlite___operator___toolkit___types__ResourceIn
  tolerations: [K8s__io___api___core___v1__TolerationIn!]
}

input K8s__io___api___core___v1__AffinityIn {
  nodeAffinity: K8s__io___api___core___v1__NodeAffinityIn
  podAffinity: K8s__io___api___core___v1__PodAffinityIn
  podAntiAffinity: K8s__io___api___core___v1__PodAntiAffinityIn
}

input K8s__io___api___core___v1__NodeAffinityIn {
  preferredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__PreferredSchedulingTermIn!]
  requiredDuringSchedulingIgnoredDuringExecution: K8s__io___api___core___v1__NodeSelectorIn
}

input K8s__io___api___core___v1__NodeSelectorIn {
  nodeSelectorTerms: [K8s__io___api___core___v1__NodeSelectorTermIn!]!
}

input K8s__io___api___core___v1__NodeSelectorRequirementIn {
  key: String!
  operator: K8s__io___api___core___v1__NodeSelectorOperator!
  values: [String!]
}

input K8s__io___api___core___v1__NodeSelectorTermIn {
  matchExpressions: [K8s__io___api___core___v1__NodeSelectorRequirementIn!]
  matchFields: [K8s__io___api___core___v1__NodeSelectorRequirementIn!]
}

input K8s__io___api___core___v1__PodAffinityIn {
  preferredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__WeightedPodAffinityTermIn!]
  requiredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__PodAffinityTermIn!]
}

input K8s__io___api___core___v1__PodAffinityTermIn {
  labelSelector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorIn
  matchLabelKeys: [String!]
  mismatchLabelKeys: [String!]
  namespaces: [String!]
  namespaceSelector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorIn
  topologyKey: String!
}

input K8s__io___api___core___v1__PodAntiAffinityIn {
  preferredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__WeightedPodAffinityTermIn!]
  requiredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__PodAffinityTermIn!]
}

input K8s__io___api___core___v1__PreferredSchedulingTermIn {
  preference: K8s__io___api___core___v1__NodeSelectorTermIn!
  weight: Int!
}

input K8s__io___api___core___v1__ServicePortIn {
  appProtocol: String
  name: String
  nodePort: Int
  port: Int!
  protocol: K8s__io___api___core___v1__Protocol
  targetPort: K8s__io___apimachinery___pkg___util___intstr__IntOrStringIn
}

input K8s__io___api___core___v1__TolerationIn {
  effect: K8s__io___api___core___v1__TaintEffect
  key: String
  operator: K8s__io___api___core___v1__TolerationOperator
  tolerationSeconds: Int
  value: String
}

input K8s__io___api___core___v1__TopologySpreadConstraintIn {
  labelSelector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorIn
  matchLabelKeys: [String!]
  maxSkew: Int!
  minDomains: Int
  nodeAffinityPolicy: String
  nodeTaintsPolicy: String
  topologyKey: String!
  whenUnsatisfiable: K8s__io___api___core___v1__UnsatisfiableConstraintAction!
}

input K8s__io___api___core___v1__WeightedPodAffinityTermIn {
  podAffinityTerm: K8s__io___api___core___v1__PodAffinityTermIn!
  weight: Int!
}

input K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorIn {
  matchExpressions: [K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorRequirementIn!]
  matchLabels: Map
}

input K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorRequirementIn {
  key: String!
  operator: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorOperator!
  values: [String!]
}

input K8s__io___apimachinery___pkg___util___intstr__IntOrStringIn {
  IntVal: Int!
  StrVal: String!
  Type: Int!
}

input MetadataIn {
  annotations: Map
  labels: Map
  name: String!
  namespace: String
}

enum Github__com___kloudlite___api___apps___console___internal___entities__PullSecretFormat {
  dockerConfigJson
  params
}

enum Github__com___kloudlite___api___apps___console___internal___entities__ResourceType {
  app
  cluster_managed_service
  config
  environment
  external_app
  helm_chart
  image_pull_secret
  imported_managed_resource
  managed_resource
  router
  secret
  service_binding
}

enum Github__com___kloudlite___api___pkg___repos__MatchType {
  array
  exact
  not_in_array
  regex
}

enum Github__com___kloudlite___api___pkg___types__SyncAction {
  APPLY
  DELETE
}

enum Github__com___kloudlite___api___pkg___types__SyncState {
  APPLIED_AT_AGENT
  DELETED_AT_AGENT
  DELETING_AT_AGENT
  ERRORED_AT_AGENT
  IDLE
  IN_QUEUE
  UPDATED_AT_AGENT
}

enum Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret {
  config
  pvc
  secret
}

enum Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingMode {
  private
  public
}

enum Github__com___kloudlite___operator___apis___crds___v1__ExternalAppRecordType {
  CNAME
  IPAddr
}

enum Github__com___kloudlite___operator___apis___crds___v1__ServiceProtocol {
  TCP
  UDP
}

enum Github__com___kloudlite___operator___pkg___operator__State {
  errored____during____reconcilation
  finished____reconcilation
  under____reconcilation
  yet____to____be____reconciled
}

enum Github__com___kloudlite___operator___toolkit___reconciler__State {
  errored____during____reconcilation
  finished____reconcilation
  under____reconcilation
  yet____to____be____reconciled
}

enum K8s__io___api___core___v1__NodeSelectorOperator {
  DoesNotExist
  Exists
  Gt
  In
  Lt
  NotIn
}

enum K8s__io___api___core___v1__Protocol {
  SCTP
  TCP
  UDP
}

enum K8s__io___api___core___v1__SecretType {
  bootstrap__kubernetes__io___token
  kubernetes__io___basic____auth
  kubernetes__io___dockercfg
  kubernetes__io___dockerconfigjson
  kubernetes__io___service____account____token
  kubernetes__io___ssh____auth
  kubernetes__io___tls
  Opaque
}

enum K8s__io___api___core___v1__TaintEffect {
  NoExecute
  NoSchedule
  PreferNoSchedule
}

enum K8s__io___api___core___v1__TolerationOperator {
  Equal
  Exists
}

enum K8s__io___api___core___v1__UnsatisfiableConstraintAction {
  DoNotSchedule
  ScheduleAnyway
}

enum K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorOperator {
  DoesNotExist
  Exists
  In
  NotIn
}

