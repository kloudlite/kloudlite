package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"github.com/kloudlite/api/pkg/errors"
	"time"

	"github.com/kloudlite/api/apps/infra/internal/app/graph/generated"
	"github.com/kloudlite/api/apps/infra/internal/app/graph/model"
	"github.com/kloudlite/api/apps/infra/internal/entities"
	fn "github.com/kloudlite/api/pkg/functions"
	"github.com/kloudlite/api/pkg/repos"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CreationTime is the resolver for the creationTime field.
func (r *workmachineResolver) CreationTime(ctx context.Context, obj *entities.Workmachine) (string, error) {
	if obj == nil {
		return "", errors.Newf("workmachine obj is nil")
	}
	return obj.CreationTime.Format(time.RFC3339), nil
}

// DispatchAddr is the resolver for the dispatchAddr field.
func (r *workmachineResolver) DispatchAddr(ctx context.Context, obj *entities.Workmachine) (*model.GithubComKloudliteAPIAppsInfraInternalEntitiesDispatchAddr, error) {
	panic(fmt.Errorf("not implemented: DispatchAddr - dispatchAddr"))
}

// ID is the resolver for the id field.
func (r *workmachineResolver) ID(ctx context.Context, obj *entities.Workmachine) (repos.ID, error) {
	if obj == nil {
		return "", errors.Newf("workmachine obj is nil")
	}
	return obj.Id, nil
}

// Spec is the resolver for the spec field.
func (r *workmachineResolver) Spec(ctx context.Context, obj *entities.Workmachine) (*model.GithubComKloudliteOperatorApisCrdsV1WorkMachineSpec, error) {
	var m model.GithubComKloudliteOperatorApisCrdsV1WorkMachineSpec
	if err := fn.JsonConversion(obj.Spec, &m); err != nil {
		return nil, errors.NewE(err)
	}
	return &m, nil
}

// Status is the resolver for the status field.
func (r *workmachineResolver) Status(ctx context.Context, obj *entities.Workmachine) (*model.GithubComKloudliteOperatorApisCrdsV1WorkMachineStatus, error) {
	var m model.GithubComKloudliteOperatorApisCrdsV1WorkMachineStatus
	if err := fn.JsonConversion(obj.Status, &m); err != nil {
		return nil, errors.NewE(err)
	}
	return &m, nil
}

// UpdateTime is the resolver for the updateTime field.
func (r *workmachineResolver) UpdateTime(ctx context.Context, obj *entities.Workmachine) (string, error) {
	if obj == nil || obj.UpdateTime.IsZero() {
		return "", errors.Newf("workmachine is nil")
	}
	return obj.UpdateTime.Format(time.RFC3339), nil
}

// Metadata is the resolver for the metadata field.
func (r *workmachineInResolver) Metadata(ctx context.Context, obj *entities.Workmachine, data *v1.ObjectMeta) error {
	if obj == nil {
		return errors.Newf("workmachine is nil")
	}
	return fn.JsonConversion(data, &obj.ObjectMeta)
}

// Spec is the resolver for the spec field.
func (r *workmachineInResolver) Spec(ctx context.Context, obj *entities.Workmachine, data *model.GithubComKloudliteOperatorApisCrdsV1WorkMachineSpecIn) error {
	if obj == nil {
		return nil
	}
	return fn.JsonConversion(data, &obj.Spec)
}

// Status is the resolver for the status field.
func (r *workmachineInResolver) Status(ctx context.Context, obj *entities.Workmachine, data *model.GithubComKloudliteOperatorApisCrdsV1WorkMachineStatusIn) error {
	if obj == nil {
		return errors.Newf("workmachine is nil")
	}
	return fn.JsonConversion(data, &obj.Status)
}

// Workmachine returns generated.WorkmachineResolver implementation.
func (r *Resolver) Workmachine() generated.WorkmachineResolver { return &workmachineResolver{r} }

// WorkmachineIn returns generated.WorkmachineInResolver implementation.
func (r *Resolver) WorkmachineIn() generated.WorkmachineInResolver { return &workmachineInResolver{r} }

type workmachineResolver struct{ *Resolver }
type workmachineInResolver struct{ *Resolver }
