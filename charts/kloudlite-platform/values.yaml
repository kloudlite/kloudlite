# Globals
global:
  isDev: false
  # -- image pull policies for kloudlite pods, belonging to this chart
  imagePullPolicy: Always

  nodeSelector: &nodeSelector { }
  # -- tolerations for pods belonging to this release
  tolerations: &tolerations [ ]

  # -- podlabels for pods belonging to this release
  podLabels: &podLabels { }

  # -- cookie domain dictates at what domain, the cookies should be set for auth or other purposes
  cookieDomain: '.kloudlite.io'

  # -- base domain for all routers exposed through this cluster
  baseDomain: 'platform.kloudlite.io'

  secondaryDomain: 'khost.dev'

  # -- kloudlite account name, required only for labelling purposes, does not need to be a real kloudlite account name
  accountName: 'kloudlite'

  # -- kloudlite cluster name, required only for labelling purposes, does not need to be a real kloudlite cluster name
  clusterName: 'platform'

  # -- cluster internal DNS name
  clusterInternalDNS: "cluster.local"

  # @ignored
  # -- account cookie name, that console-api should expect, while any client communicates through it's graphql interface
  accountCookieName: "kloudlite-account"

  # -- cluster cookie name, that console-api should expect, while any client communicates through it's graphql interface
  # @ignored
  clusterCookieName: "kloudlite-cluster"

  # -- service account for privileged k8s operations, like creating namespaces, apps, routers etc.
  clusterSvcAccount: kloudlite-cluster-svc-account

  # -- service account for non k8s operations, just for specifying image pull secrets
  normalSvcAccount: kloudlite-svc-account

  # -- default project workspace name, the one that should be auto created, whenever you create a project
  defaultProjectWorkspaceName: "default"

  statefulPriorityClassName: "stateful"

  kloudlite_release: v1.0.5-nightly

  ingressClassName: "ingress-nginx"

# Cluster Management
certManager:
  # -- whether to enable cert-manager
  enabled: true
  name: cert-manager
  certIssuer:
    name: kloudlite-cluster-issuer
    # -- email that should be used for communicating with lets-encrypt services
    acmeEmail: sample@example.com

  configuration:
    nodeSelector: {}
    tolerations: []
ingressController:
  enabled: true
  name: ingress-nginx
  configuration:
    # -- can be DaemonSet or Deployment
    controllerKind: "DaemonSet"

    nodeSelector:
      node-role.kubernetes.io/control-plane: "true"

    tolerations:
      - key: node-role.kubernetes.io/master
        value: "true"
        effect: NoSchedule
descheduler:
  enabled: true
vectorAgent:
  enabled: true
  name: vector-agent
  description: "vector agent for shipping logs to centralized vector aggregator"
cloudflareWildCardCert:
  enabled: true
  certificateName: cloudflare-wildcard-cert
  tlsSecretName: kl-cert-wildcard-tls
  # -- cloudflare authz credentials
  cloudflareCreds:
    # -- cloudflare authorized email
    email: <cloudflare-email>
    # -- cloudflare authorized secret token
    secretToken: <cloudflare-secret-token>
  # -- list of all SANs (Subject Alternative Names) for which wildcard certs should be created
  domains:
    - '*.platform.kloudlite.io'

# Backing Services
loki:
  enabled: true
  name: loki-stack
  configuration:
    s3credentials:
      awsAccessKeyId: <loki-s3-aws-access-key-id>
      awsSecretAccessKey: <loki-s3-aws-secret-access-key>
      region: <loki-s3-bucket-region>
      bucketName: <loki-s3-bucket-name>

vector:
  enabled: true
  name: vector

kubeapps:
  enabled: true
  name: kubeapps


grafana:
  enabled: true
  name: grafana
  configuration:
    volumeSize: 2Gi
    nodeSelector: {}

prometheus:
  enabled: true
  name: prometheus
  configuration:
    prometheus:
      volumeSize: 2Gi
      nodeSelector: {}
    alertmanager:
      volumeSize: 2Gi

nats:
  runAsCluster: false
  replicas: 1

distribution:
  domain: cr.khost.dev
  secret: <distribution-secret>
  tls:
    enabled: true
  s3:
    enabled: false
    bucketName: <distribution-s3-bucket-name>
    endpoint: <distribution-s3-bucket-endpoint>
    accessKey: <distribution-s3-bucket-access-key>
    secretKey: <distribution-s3-bucket-secret-key>
    region: <distribution-s3-bucket-region>

mongo:
  rootPassword: <mongo-root-password>
  size: 2Gi
  nodeSelector: {}
  externalDB:
    dbURL: <mongo-db-url>
    authDBName: <mongo-db-name>
  runAsCluster: false
  replicas: 1

# Storage
persistence:
  storageClasses:
    # -- ext4 storage class name
    ext4: sc-ext4
    # -- xfs storage class name
    xfs: sc-xfs

# Configs & Secrets
oAuth:
  # -- secret where all oauth credentials should be
  secretName: oauth-secrets
  enabled: true
  providers:
    google:
      # -- whether to enable google oAuth2
      enabled: true
      # -- google oAuth2 callback url
      callbackUrl: https://auth.platform.kloudlite.io/oauth2/callback/google
      # -- google oAuth2 Client ID
      clientId: <google-client-id>
      # -- google oAuth2 Client Secret
      clientSecret: <google-client-secret>
    gitlab:
      # -- whether to enable gitlab oAuth2
      enabled: true
      # -- gitlab oAuth2 callback url
      callbackUrl: https://auth.platform.kloudlite.io/oauth2/callback/gitlab
      # -- gitlab oAuth2 Client ID
      clientId: <gitlab-client-id>
      # -- gitlab oAuth2 Client Secret
      clientSecret: <gitlab-client-secret>
    github:
      # -- whether to enable GitHub oAuth2
      enabled: true
      # -- GitHub oAuth2 callback url
      callbackUrl: https://auth.platform.kloudlite.io/oauth2/callback/github
      # -- GitHub oAuth2 Client ID
      clientId: <github-client-id>
      # -- GitHub oAuth2 Client Secret
      clientSecret: <github-client-secret>

      # -- GitHub app id
      appId: <github-app-id>
      # -- GitHub app private key (base64 encoded)
      appPrivateKey: <pvt-key>
      # -- GitHub app name, that we want to install on user's GitHub account
      githubAppName: kloudlite-dev
sendGrid:
  # -- sendgrid api key for email communications, if (sendgrid.enabled)
  apiKey:
  # -- email through which we should be sending emails to target users, if (sendgrid.enabled)
  supportEmail:
aws:
  accessKey: <access-key>
  secretKey: <secret-key>

  cloudformation:
    stackNamePrefix: "kloudlite-tenant-stack"
    roleNamePrefix: "kloudlite-tenant-role"
    instanceProfileNamePrefix: "kloudlite-instance-profile"
    stackS3URL: "https://kloudlite-platform-production-assets.s3.ap-south-1.amazonaws.com/public/cloudformation-templates/cloudformation.yml"
    params:
      trustedARN: "arn:aws:iam::855999427630:root"

webhookSecrets:
  name: webhook-secrets
  # -- webhook authz secret for gitlab webhooks
  gitlabSecret: <webhook-authz-gitlab-secret>
  # -- webhook authz secret for GitHub webhooks
  githubSecret: <webhook-authz-github-secret>
  githubAuthzSecret: <webhook-authz-github-authz-secret>
  authzSecret: <webhook-authz-github-authz-secret>
  # -- webhook authz secret for kloudlite internal calls
  kloudliteSecret: <webhook-authz-kloudlite-secret>

# Microservices
apps:
  authApi:
    # -- image (with tag) for auth api
    image: ghcr.io/kloudlite/api/auth:v1.0.5-nightly
  klInstaller:
    # -- image (with tag) for comms api
    image: ghcr.io/kloudlite/kl/installer:v1.0.5-nightly

  commsApi:
    # -- image (with tag) for comms api
    image: ghcr.io/kloudlite/api/comms:v1.0.5-nightly

  consoleApi:
    # -- image (with tag) for console api
    image: ghcr.io/kloudlite/api/console:v1.0.5-nightly
    configuration:
      logsAndMetricsHttpPort: 9100
  accountsApi:
    # -- image (with tag) for accounts api
    image: ghcr.io/kloudlite/api/accounts:v1.0.5-nightly
  iamApi:
    # -- image (with tag) for iam api
    image: ghcr.io/kloudlite/api/iam:v1.0.5-nightly
  infraApi:
    # -- image (with tag) for infra api
    image: ghcr.io/kloudlite/api/infra:v1.0.5-nightly
  gatewayApi:
    image: ghcr.io/kloudlite/api/gateway:v1.0.5-nightly
  containerRegistryApi:
    # -- image (with tag) for container registry api
    image: ghcr.io/kloudlite/api/container-registry:v1.0.5-nightly
    configuration:
      # -- (number) port on which container registry event listener should listen
      eventListenerPort: 4001
      registrySecret: <registry-secret>

      buildClusterName: ""
      buildClusterAccountName: ""

      # -- namespace, in which build runs should be created
      jobBuildNamespace: "kloudlite"

      authorizerPort: 4000
  auditLoggingWorker:
    # -- image (with tag) for audit logging worker
    image: ghcr.io/kloudlite/api/worker-audit-logging:v1.0.5-nightly
  webhooksApi:
    # -- image (with tag) for webhooks api
    image: ghcr.io/kloudlite/api/webhook:v1.0.5-nightly
  messageOfficeApi:
    # -- image (with tag) for message office api
    image: ghcr.io/kloudlite/api/message-office:v1.0.5-nightly

    configuration:
      # @ignored
      externalGrpcPort: 3001

      # @ignored
      internalGrpcPort: 3002

      # -- token hashing secret, that is used to hash access tokens for kloudlite agents
      # -- consider using 128 characters random string, you can use `python -c "import secrets; print(secrets.token_urlsafe(128))"`
      tokenHashingSecret: <token-hashing-secret>
      platformAccessToken: "sample"
  consoleWeb:
    enabled: true
    # -- image (with tag) for console web
    image: ghcr.io/kloudlite/web/console:v1.0.5-nightly
  authWeb:
    enabled: true
    # -- image (with tag) for auth web
    image: ghcr.io/kloudlite/web/auth:v1.0.5-nightly

operators:
  preferOperatorsOnMasterNodes: true
  platformOperator:
    # -- whether to enable platform operator
    enabled: true
    # -- image (with tag) for platform operator
    image: ghcr.io/kloudlite/operator/platform:v1.0.5-nightly

    configuration:
      cluster:
        jobImage: ghcr.io/kloudlite/infrastructure-as-code:v1.0.5-nightly

        IACStateStore:
          # -- s3 bucket name, to store kloudlite's infrastructure-as-code remote state
          s3BucketName: "kloudlite-dev-tf"
          # -- s3 bucket region, to store kloudlite's infrastructure-as-code remote state
          s3BucketRegion: "ap-south-1"
          s3BucketDir: "terraform-states"

          accessKey: <access-key>
          secretKey: <secret-key>

        cloudflare:
          # -- cloudflare zone id, to manage CNAMEs and A records for managed clusters
          zoneId: <zone-id>
          # -- cloudflare base domain, on top of which CNAMES and wildcard names will be created
          baseDomain: "infra.kloudlite.io"
  wgOperator:
    enabled: false
    # -- wg operator image and tag
    image: ghcr.io/kloudlite/operator/wireguard:v1.0.5-nightly
    # -- wireguard configuration options
    configuration:
      # -- cluster pods CIDR range
      podCIDR: 10.42.0.0/16
      # -- cluster services CIDR range
      svcCIDR: 10.43.0.0/16
      # -- dns hosted zone, i.e., dns pointing to this cluster
      dnsHostedZone: <dns-hosted-zone>
      enableExamples: false

envVars:
  db:
    authDB: auth-db
    consoleDB: console-db
    accountsDB: accounts-db
    registryDB: registry-db
    eventsDB: events-db
    iamDB: iam-db
    infraDB: infra-db
    messageOfficeDB: message-office-db
  grpc:
    authGRPCAddr: auth-api:3001
  nats:
    url: nats://nats:4222
    streams:
      events:
        name: events
        subjects: "events.>"
        maxMsgBytes: 2MB
      resourceSync:
        name: resource-sync
        subjects: "resource-sync.>"
        maxMsgBytes: 2MB
    buckets:
      sessionKVBucketName: auth-session
      verifyTokenBucketName: verify-token
      resetTokenBucketName: reset-token
