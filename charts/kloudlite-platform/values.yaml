# Globals
global:
  isDev: false

  # -- image pull policies for kloudlite pods, belonging to this chart, could be Always | IfNotPresent
  imagePullPolicy: "" 

  nodeSelector: &nodeSelector { }
  # -- tolerations for pods belonging to this release
  tolerations: &tolerations [ ]

  # -- podlabels for pods belonging to this release
  podLabels: &podLabels { }

  # -- cookie domain dictates at what domain, the cookies should be set for auth or other purposes
  cookieDomain: '.kloudlite.io'

  # -- base domain for all routers exposed through this cluster
  baseDomain: 'platform.kloudlite.io'
  secondaryDomain: 'khost.dev'

  # -- router domain defaults to `global.baseDomain`
  routerDomain: ''

  # -- kloudlite account name, required only for labelling purposes, does not need to be a real kloudlite account name
  accountName: 'kloudlite'

  # -- kloudlite cluster name, required only for labelling purposes, does not need to be a real kloudlite cluster name
  clusterName: 'platform'

  # -- cluster internal DNS name
  clusterInternalDNS: "cluster.local"

  # @ignored
  # -- account cookie name, that console-api should expect, while any client communicates through it's graphql interface
  accountCookieName: "kloudlite-account"

  # -- cluster cookie name, that console-api should expect, while any client communicates through it's graphql interface
  # @ignored
  clusterCookieName: "kloudlite-cluster"

  # -- service account for privileged k8s operations, like creating namespaces, apps, routers etc.
  clusterSvcAccount: kloudlite-cluster-svc-account

  # -- service account for non k8s operations, just for specifying image pull secrets
  normalSvcAccount: kloudlite-svc-account

  # -- default project workspace name, the one that should be auto created, whenever you create a project
  defaultProjectWorkspaceName: "default"

  statefulPriorityClassName: "stateful"

  # -- (string) if not set, defaults to .Chart.AppVersion
  kloudlite_release: ""

  ingressClassName: "ingress-nginx"

# Cluster Management
certManager:
  # -- whether to enable cert-manager
  enabled: true
  name: cert-manager
  certIssuer:
    name: kloudlite-cluster-issuer
    # -- email that should be used for communicating with lets-encrypt services
    acmeEmail: sample@example.com

  configuration:
    nodeSelector: {}
    tolerations: []

ingressController:
  enabled: true
  name: ingress-nginx
  configuration:
    # -- can be DaemonSet or Deployment
    controllerKind: "DaemonSet"

    nodeSelector:
      node-role.kubernetes.io/control-plane: "true"

    tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule

descheduler:
  enabled: true

clusterAutoscaler:
  enabled: true

vectorAgent:
  enabled: true
  name: vector-agent
  description: "vector agent for shipping logs to centralized vector aggregator"

cloudflareWildCardCert:
  enabled: true
  certificateName: cloudflare-wildcard-cert
  tlsSecretName: kl-cert-wildcard-tls
  # -- cloudflare authz credentials
  cloudflareCreds:
    # -- cloudflare authorized email
    email: ""
    # -- cloudflare authorized secret token
    secretToken: ""
  # -- list of all SANs (Subject Alternative Names) for which wildcard certs should be created
  domains:
    # -- should default to basedomain
    - '*.platform.kloudlite.io'

# Backing Services
loki:
  enabled: false
  name: loki-stack
  configuration:
    s3credentials:
      awsAccessKeyId: ""
      awsSecretAccessKey: ""
      region: ""
      bucketName: ""

vector:
  enabled: true
  name: vector

grafana:
  enabled: true
  name: grafana
  configuration:
    volumeSize: 2Gi
    nodeSelector: {}

prometheus:
  enabled: true
  name: prometheus
  configuration:
    prometheus:
      volumeSize: 2Gi
      nodeSelector: {}
    alertmanager:
      volumeSize: 2Gi

victoriaMetrics:
  enabled: true
  name: victoria-metrics
  configuration:
    vmselect:
      volumeSize: 2Gi
    vmcluster:
      volumeSize: 10Gi

nats:
  runAsCluster: false
  replicas: 3
  configuration:
    user: "sample"
    password: "sample"

    volumeSize: 10Gi

distribution:
  domain: cr.khost.dev
  secret: <distribution-secret>
  tls:
    enabled: true
  s3:
    enabled: false

    bucketName: ""
    endpoint: ""
    accessKey: ""
    secretKey: ""
    region: ""

mongo:
  # rootPassword: <mongo-root-password>
  runAsCluster: false
  replicas: 1
  configuration:
    volumeSize: 2Gi
    nodeSelector: {}
  externalDB:
    dbURL: ""
    authDBName: ""

# Storage
persistence:
  storageClasses:
    # -- ext4 storage class name
    ext4: sc-ext4
    # -- xfs storage class name
    xfs: sc-xfs

# Configs & Secrets
oAuth:
  # -- secret where all oauth credentials should be
  secretName: oauth-secrets
  enabled: true
  providers:
    google:
      # -- whether to enable google oAuth2
      enabled: true
      # -- google oAuth2 callback url
      callbackUrl: https://auth.platform.kloudlite.io/oauth2/callback/google
      # -- google oAuth2 Client ID
      clientId: ""
      # -- google oAuth2 Client Secret
      clientSecret: ""
    gitlab:
      # -- whether to enable gitlab oAuth2
      enabled: true
      # -- gitlab oAuth2 callback url
      callbackUrl: https://auth.platform.kloudlite.io/oauth2/callback/gitlab
      # -- gitlab oAuth2 Client ID
      clientId: ""
      # -- gitlab oAuth2 Client Secret
      clientSecret: ""
    github:
      # -- whether to enable GitHub oAuth2
      enabled: true
      # -- GitHub oAuth2 callback url
      callbackUrl: https://auth.platform.kloudlite.io/oauth2/callback/github
      # -- (string) (REQUIRED, if enabled) GitHub oAuth2 Client ID
      clientId: ""
      # -- (string) (REQUIRED, if enabled) GitHub oAuth2 Client Secret
      clientSecret: ""

      # -- GitHub app id
      appId: ""
      # -- GitHub app private key (base64 encoded)
      appPrivateKey: ""
      # -- GitHub app name, that we want to install on user's GitHub account
      githubAppName: "" # kloudlite-dev

sendGrid:
  # -- sendgrid api key for email communications, if (sendgrid.enabled)
  apiKey: ""
  # -- email through which we should be sending emails to target users, if (sendgrid.enabled)
  supportEmail: ""

aws:
  # (string) REQUIRED, AWS Access Key
  accessKey: ""
  # (string) REQUIRED, AWS Secret Key
  secretKey: ""

  # fill in the values via, the cloudformation stack, created by `github.com/kloudlite/infrastructure-as-code/aws/cloudformation`
  cloudformation:
    stackNamePrefix: "kloudlite-tenant-stack"
    roleNamePrefix: "kloudlite-tenant-role"
    instanceProfileNamePrefix: "kloudlite-instance-profile"
    stackS3URL: "https://kloudlite-platform-production-assets.s3.ap-south-1.amazonaws.com/public/cloudformation-templates/cloudformation.yml"
    params:
      trustedARN: "arn:aws:iam::855999427630:root"

webhookSecrets:
  name: webhook-secrets
  # -- webhook authz secret for gitlab webhooks
  gitlabSecret: ""
  # -- webhook authz secret for GitHub webhooks
  githubSecret: ""
  githubAuthzSecret: ""
  authzSecret: ""
  # -- webhook authz secret for kloudlite internal calls
  kloudliteSecret: ""

# Microservices
apps:
  websocketApi:
    # -- image (with tag) for websocket-server api
    image: 
      repository: ghcr.io/kloudlite/api/websocket-server
      tag: ""

  authApi:
    # -- image (with tag) for auth api
    image: 
      repository: ghcr.io/kloudlite/api/auth
      tag: ""

  klInstaller:
    image:
      repository: ghcr.io/kloudlite/kl/installer
      tag: ""

  commsApi:
    # -- image (with tag) for comms api
    image:
      repository: ghcr.io/kloudlite/api/comms
      tag: ""

  consoleApi:
    # -- image (with tag) for console api
    image:
      repository: ghcr.io/kloudlite/api/console
      tag: ""
    configuration:
      logsAndMetricsHttpPort: 9100
      vpnDeviceNamespace: "kl-vpn-devices"
        
  accountsApi:
    # -- image (with tag) for accounts api
    image: 
      repository: ghcr.io/kloudlite/api/accounts
      tag: ""

  iamApi:
    image:
      repository: ghcr.io/kloudlite/api/iam
      tag: ""

  infraApi:
    # -- image (with tag) for infra api
    image:
      repository: ghcr.io/kloudlite/api/infra
      tag: ""

  gatewayApi:
    image:
      repository: ghcr.io/kloudlite/api/gateway
      tag: ""

  containerRegistryApi:
    # -- image (with tag) for container registry api
    image:
      repository: ghcr.io/kloudlite/api/container-registry
      tag: ""

    configuration:
      # -- (number) port on which container registry event listener should listen
      eventListenerPort: 4001
      registrySecret: ""

      buildClusterName: ""
      buildClusterAccountName: ""

      # -- namespace, in which build runs should be created
      jobBuildNamespace: "kloudlite"
      authorizerPort: 4000

  auditLoggingWorker:
    image: 
      repository: ghcr.io/kloudlite/api/worker-audit-logging
      tag: ""

  webhooksApi:
    # -- image (with tag) for webhooks api
    image: 
      repository: ghcr.io/kloudlite/api/webhook
      tag: ""

  messageOfficeApi:
    # -- image (with tag) for message office api
    image:
      repository: ghcr.io/kloudlite/api/message-office
      tag: ""

    configuration:
      # @ignored
      externalGrpcPort: 3001

      # @ignored
      internalGrpcPort: 3002

      # -- token hashing secret, that is used to hash access tokens for kloudlite agents
      # -- consider using 128 characters random string, you can use `python -c "import secrets; print(secrets.token_urlsafe(128))"`
      tokenHashingSecret: ""
      platformAccessToken: "sample"

  consoleWeb:
    enabled: true
    # -- image (with tag) for console web
    image: 
      repository: ghcr.io/kloudlite/web/console
      tag: ""

  authWeb:
    enabled: true
    # -- image (with tag) for auth web
    image:
      repository: ghcr.io/kloudlite/web/auth
      tag: ""

operators:
  preferOperatorsOnMasterNodes: true
  platformOperator:
    # -- whether to enable platform operator
    enabled: true
    # -- image (with tag) for platform operator
    image: 
      repository: ghcr.io/kloudlite/operator/platform
      tag: ""

    configuration:
      nodepool:
        extractFromCluster: true

        # if extractFromCluster is true, the following values are ignored, as these values are referred from `kube-system/k3s-params` namespace
        cloudProviderName: "aws"
        cloudProviderRegion: "ap-south-1"

        # -- k3s agent join token, as nodepools are effectively agent nodes
        k3sAgentJoinToken: ""

        # -- k3s masters public DNS Host
        k3sServerPublicHost: ""

      wireguard:
        # -- cluster pods CIDR range
        podCIDR: 10.42.0.0/16
        # -- cluster services CIDR range
        svcCIDR: 10.43.0.0/16

        enableExamples: true

      helmCharts:
        jobImage:
          repository: ghcr.io/kloudlite/operator/workers/helm-runner
          tag: ""

      cluster:
        jobImage:
          repository: ghcr.io/kloudlite/infrastructure-as-code/iac-job
          tag: ""
        cloudflare:
          # -- cloudflare zone id, to manage CNAMEs and A records for managed clusters
          zoneId: ""
          # -- cloudflare base domain, on top of which CNAMES and wildcard names will be created
          baseDomain: ""

envVars:
  db:
    authDB: auth-db
    consoleDB: console-db
    accountsDB: accounts-db
    registryDB: registry-db
    eventsDB: events-db
    iamDB: iam-db
    infraDB: infra-db
    messageOfficeDB: message-office-db
  grpc:
    authGRPCAddr: auth-api:3001
  nats:
    url: nats://nats:4222
    streams:
      events:
        name: events
        subjects: "events.>"
        maxMsgBytes: 500kB
        maxMsgsPerSubject: 2
      resourceSync:
        name: resource-sync
        subjects: "resource-sync.>"
        maxMsgBytes: 500kB
        # maxMsgsPerSubject: 2
      logs:
        name: logs
        subjects: "logs.>"
        maxMsgBytes: 2MB
        maxAge: "3h"
        # maxMsgsPerSubject: 2
    buckets:
      sessionKVBucket:
        name: auth-session
        storage: file
      verifyTokenBucket:
        name: verify-token
        storage: file
      consoleCacheBucket:
        name: console-cache
        storage: file
      resetTokenBucket:
        name: reset-token
        storage: file
