name: Conditional Builds Workflow

on:
  release:
    types: [created]
  push:
    branches:
      - 'release-*'
      - 'fix-*'

jobs:
  build:
    name: Build ${{ matrix.app }}-${{ matrix.platform }}-${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        app: [kl,kli]
        os: [ubuntu-latest, windows-latest, macos-latest, macos-14]
        arch: [amd64, arm64]
        include:
          - os: ubuntu-latest
            goos: linux
            platform: linux
          - os: windows-latest
            goos: windows
            platform: windows
          - os: macos-latest
            goos: darwin
            platform: darwin
          - os: macos-14
            goos: darwin
            platform: darwin
        exclude:
          - os: macos-14
            arch: amd64
          - os: macos-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Setup Go
        uses: actions/setup-go@v5.0.0
        with:
          go-version: '^1.19'

      - name: Set up QEMU
        if: matrix.arch == 'arm64' && matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Setup libappindicator3-dev for linux
        if: matrix.goos == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install gcc libgtk-3-dev libayatana-appindicator3-dev

      - name: Check Go version
        run: |
          go version
          echo "[PRE] GOOS: $(go env GOOS) GOARCH: $(go env GOARCH)"

      - name: Create Image Tag
        run: |
          import re
          import os

          ref = os.getenv('GITHUB_REF')
          if ref.startswith('refs/heads/release-'):
              tag = ref.replace('refs/heads/release-', '')
              if not re.search('-nightly$', tag):
                  tag = f"{tag}-nightly"
          elif ref.startswith('refs/tags/'):
              tag = ref.replace('refs/tags/', '')
          else:
              tag = 'default-tag' # Fallback tag, adjust as needed

          print(f"::set-env name=TAG::{tag}")
        shell: python

      - name: Build Linux & Mac
        if: matrix.goos == 'linux' || matrix.goos == 'darwin'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
          FLAGS: "-X github.com/kloudlite/kl/flags.Version=${{ steps.tag_name.outputs.TAG_NAME }} -X github.com/kloudlite/kl/flags.CliName=${{ matrix.app }} -X github.com/kloudlite/kl/flags.DevMode=true"
          RELEASE_NAME: ${{ matrix.app }}-${{ steps.tag_name.outputs.TAG_NAME }}-${{ matrix.platform }}-${{ matrix.arch }}
        run: |
          echo "[POST] GOOS: $(go env GOOS) GOARCH: $(go env GOARCH)"

          echo "Building for ${{ matrix.goos }}, ${{ matrix.arch }}"
          mkdir bin
          mkdir out
          go build -o bin/${{ matrix.app }} main.go

          zip -j out/$RELEASE_NAME.zip bin/${{ matrix.app }}
          tar -czvf out/$RELEASE_NAME.tar.gz bin/${{ matrix.app }}

      - name: Build Windows
        if: matrix.goos == 'windows'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
          FLAGS: "-X github.com/kloudlite/kl/flags.Version=${{ steps.tag_name.outputs.TAG_NAME }} -X github.com/kloudlite/kl/flags.CliName=${{ matrix.app }} -X github.com/kloudlite/kl/flags.DevMode=true"
          RELEASE_NAME: ${{ matrix.app }}-${{ steps.tag_name.outputs.TAG_NAME }}-${{ matrix.platform }}-${{ matrix.arch }}
        run: |
          echo "[POST] GOOS: $(go env GOOS) GOARCH: $(go env GOARCH)"

          echo "Building for ${{ matrix.goos }}, ${{ matrix.arch }}"
          mkdir bin
          mkdir out
          go build -o bin/${{ matrix.app }}.exe main.go

          tar.exe -cvf out/$RELEASE_NAME.tar.gz bin/${{ matrix.app }}.exe
          tar.exe -a -cvf out/$RELEASE_NAME.zip bin/${{ matrix.app }}.exe

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: out/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}/artifacts

      - name: Create Image Tag
        id: tag_name
        run: |
          import re
          import os

          ref = os.getenv('GITHUB_REF')
          if ref.startswith('refs/heads/release-'):
              tag = ref.replace('refs/heads/release-', '')
              if not re.search('-nightly$', tag):
                  tag = f"{tag}-nightly"
          elif ref.startswith('refs/tags/'):
              tag = ref.replace('refs/tags/', '')
          else:
              tag = 'default-tag' # Fallback tag, adjust as needed

          print(f"::set-env name=TAG::{tag}")
        shell: python

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**
          tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
