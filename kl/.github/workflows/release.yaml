name: Conditional Builds Workflow

on:
  release:
    types: [created]
  push:
    branches:
      - 'release-*'

jobs:
  docker-build:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Create and Set Image Tag
        id: tag_name
        run: |
          import re
          import os

          ref = os.getenv('GITHUB_REF')
          if ref.startswith('refs/heads/release-'):
              tag = ref.replace('refs/heads/release-', '')
              if not re.search('-nightly$', tag):
                  tag += "-nightly"
          elif ref.startswith('refs/tags/'):
              tag = ref.replace('refs/tags/', '')
          else:
              tag = 'default-tag'  # Adjust this fallback tag as necessary

          with open(os.getenv('GITHUB_ENV'), 'a') as env_file:
              env_file.write(f"TAG={tag}\n")

          with open(os.getenv('GITHUB_OUTPUT'), 'a') as env_out:
              env_out.write(f"TAG_NAME={tag}\n")
        shell: python

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v4

      - name: Build & Push Image
        if: startsWith(github.ref, 'refs/heads/release-') || startsWith(github.ref, 'refs/tags/')
        env:
          IMAGE_TAG: ${{ steps.tag_name.outputs.TAG_NAME }}
          OVERRIDE_PUSHED_IMAGE: "false"
        run: |
          set +e
          image_name="ghcr.io/kloudlite/kl/box"

          docker manifest inspect $image_name:$IMAGE_TAG
          exit_status=$?
          if [ $exit_status -eq 0 ]; then
            [ "$OVERRIDE_PUSHED_IMAGE" = "false" ] && echo "image ($image_name:$IMAGE_TAG) already exists, and override image is disable, exiting" && exit 0
            echo "image exists, but override pushed image is set to true. proceeding with building image"
          fi

          set -e

          docker buildx build --platform linux/amd64,linux/arm64 -t "$image_name:$IMAGE_TAG" --build-arg VERSION=$IMAGE_TAG --build-context project=. klbox-docker --push

  build:
    name: Build ${{ matrix.app }}-${{ matrix.platform }}-${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        app: [kl,kli]
        os: [ubuntu-latest, windows-latest, macos-14, macos-13]
        arch: [amd64, arm64]
        include:
          - os: ubuntu-latest
            goos: linux
            platform: linux
          - os: windows-latest
            goos: windows
            platform: windows
          - os: macos-13
            goos: darwin
            platform: darwin
          - os: macos-14
            goos: darwin
            platform: darwin
        exclude:
          - os: macos-14
            arch: amd64
          - os: macos-13
            arch: arm64
          - os: ubuntu-latest
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.19'

      - name: Set up QEMU
        if: matrix.arch == 'arm64' && matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Setup libappindicator3-dev for linux
        if: matrix.goos == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install gcc libgtk-3-dev libayatana-appindicator3-dev

      - name: Check Go version
        run: |
          go version
          echo "[PRE] GOOS: $(go env GOOS) GOARCH: $(go env GOARCH)"

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Create and Set Image Tag
        id: tag_name
        run: |
          import re
          import os

          ref = os.getenv('GITHUB_REF')
          if ref.startswith('refs/heads/release-'):
              tag = ref.replace('refs/heads/release-', '')
              if not re.search('-nightly$', tag):
                  tag += "-nightly"
          elif ref.startswith('refs/tags/'):
              tag = ref.replace('refs/tags/', '')
          else:
              tag = 'default-tag'  # Adjust this fallback tag as necessary

          with open(os.getenv('GITHUB_ENV'), 'a') as env_file:
              env_file.write(f"TAG={tag}\n")

          with open(os.getenv('GITHUB_OUTPUT'), 'a') as env_out:
              env_out.write(f"TAG_NAME={tag}\n")
        shell: python


      - name: Build Linux & Mac
        if: matrix.goos == 'linux' || matrix.goos == 'darwin'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
          FLAGS: "-X github.com/kloudlite/kl/flags.Version=${{ steps.tag_name.outputs.TAG_NAME }} -X github.com/kloudlite/kl/flags.CliName=${{ matrix.app }}"
        run: |
          echo "[POST] GOOS: $(go env GOOS) GOARCH: $(go env GOARCH)"

          echo "Building for ${{ matrix.goos }}, ${{ matrix.arch }}"
          mkdir bin
          mkdir out
          go build --tags main -o bin/${{ matrix.app }} -ldflags "${{ env.FLAGS }}" main.go

      - name: Build Windows
        if: matrix.goos == 'windows'
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
          FLAGS: "-X github.com/kloudlite/kl/flags.Version=${{ steps.tag_name.outputs.TAG_NAME }} -X github.com/kloudlite/kl/flags.CliName=${{ matrix.app }}"
        run: |
          echo "[POST] GOOS: $(go env GOOS) GOARCH: $(go env GOARCH)"

          echo "Building for ${{ matrix.goos }}, ${{ matrix.arch }}"
          mkdir bin
          mkdir out
          go build --tags main -o bin/${{ matrix.app }}.exe -ldflags "${{ env.FLAGS }}" main.go

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}-${{ steps.tag_name.outputs.TAG_NAME }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: bin/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}/artifacts

      - name: Create and Set Image Tag
        id: tag_name
        run: |
          import re
          import os

          ref = os.getenv('GITHUB_REF')
          if ref.startswith('refs/heads/release-'):
              tag = ref.replace('refs/heads/release-', '')
              if not re.search('-nightly$', tag):
                  tag += "-nightly"
          elif ref.startswith('refs/tags/'):
              tag = ref.replace('refs/tags/', '')
          else:
              tag = 'default-tag'  # Adjust this fallback tag as necessary

          with open(os.getenv('GITHUB_ENV'), 'a') as env_file:
              env_file.write(f"TAG={tag}\n")

          with open(os.getenv('GITHUB_OUTPUT'), 'a') as env_out:
              env_out.write(f"TAG_NAME={tag}\n")
        shell: python

      - name: Compress to Zip and gzip
        run: |
          out_dir=${{ github.workspace }}/out
          mkdir -p $out_dir

          cd ${{ github.workspace }}/artifacts
          for f in *; do
            if [ -d "$f" ]; then
              zip -r "$out_dir/$f.zip" "$f"
              tar -czvf "$out_dir/$f.tar.gz" "$f"
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: out/**
          tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
