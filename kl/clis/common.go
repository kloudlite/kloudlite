package clis

import (
	"errors"
	"fmt"
	"os"
	"path"
	"strings"
	"time"

	fn "github.com/kloudlite/kl/pkg/functions"
	"github.com/spf13/cobra"
	"github.com/spf13/cobra/doc"
)

func RunDocGen(cmd *cobra.Command, _ []string) error {
	cliName := cmd.Use

	if _, er := os.Stat(fmt.Sprintf("./docs/%s", cliName)); errors.Is(er, os.ErrNotExist) {
		err := os.MkdirAll(fmt.Sprintf("./docs/%s", cliName), os.ModePerm)
		if err != nil {
			return fn.NewE(err)
		}

	} else {
		err := os.RemoveAll(fmt.Sprintf("./docs/%s", cliName))

		if err != nil {
			return fn.NewE(err)
		}

		err = os.MkdirAll(fmt.Sprintf("./docs/%s", cliName), os.ModePerm)
		if er != nil {
			return fn.NewE(err)
		}
	}

	if err := doc.GenMarkdownTree(cmd, fmt.Sprintf("./docs/%s", cliName)); err != nil {
		return fn.NewE(err)
	}

	if err := generateDocs(cmd, fmt.Sprintf("./docs/%s", cliName)); err != nil {
		return fn.NewE(err)
	}
	return nil
}

func generateDocs(cmd *cobra.Command, dir string) error {

	fileContent := fmt.Sprintf(`## %s

%s

%s

%s

%s

###### Auto generated by %s CLI on %s
`, cmd.CommandPath(), cmd.Short, getSynopsis(cmd), getOptions(cmd), commandsList(cmd), cmd.Use,
		fmt.Sprintf("%d-%s-%d", time.Now().Day(), time.Now().Month(), time.Now().Year()))

	if err := os.WriteFile(path.Join(dir, strings.ReplaceAll(cmd.CommandPath(), " ", "_")+".md"), []byte(fileContent), 0644); err != nil {
		return fn.NewE(err)
	}

	for _, c := range cmd.Commands() {
		err := generateDocs(c, dir)
		if err != nil {
			return fn.NewE(err)
		}
	}

	return nil
}

func code(str string, lang string) string {
	return fmt.Sprintf("```%s\n%s\n```", lang, str)
}

func getOptions(cmd *cobra.Command) string {

	return fmt.Sprintf(`### Options

%s`,
		code(
			fmt.Sprintf("%s%s",
				func() string {
					if strings.TrimSpace(cmd.Flags().FlagUsages()) == "" {
						return ""
					}
					return cmd.Flags().FlagUsages()
				}(), func() string {
					if cmd.Parent() != nil {
						return fmt.Sprintf("  -h, --help   help for %s", cmd.Name())
					}
					return ""
				}()),
			""))

}

func getSynopsis(cmd *cobra.Command) string {
	if cmd.Long != "" {
		return fmt.Sprintf(`### Synopsis

%s`, code(cmd.Long, ""))
	}
	return ""
}

func commandsList(cmd *cobra.Command) string {

	result := "### SEE ALSO\n"

	if cmd.Parent() != nil {
		parent := cmd.Parent()

		result = fmt.Sprintf("%s\n* [%s](%s.md)  - %s",
			result, parent.CommandPath(),
			strings.ReplaceAll(parent.CommandPath(), " ", "_"),
			parent.Short)
	}

	for _, c := range cmd.Commands() {
		result = fmt.Sprintf("%s\n* [%s](%s.md)  - %s",
			result, c.CommandPath(),
			strings.ReplaceAll(c.CommandPath(), " ", "_"),
			c.Short)
	}

	return result
}
