name: Release Container Image

on:
  workflow_dispatch:

  push:
    paths:
      - "*.go"
      - "pkg/**"
      - "internal/**"
      - ".github/**"

permissions:
  contents: read
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
 
      - name: Setup Golang caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-golang-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golang-

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21.5

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install UPX
        run: |
          curl -L0 https://github.com/upx/upx/releases/download/v4.2.1/upx-4.2.1-amd64_linux.tar.xz > upx.tar.xz
          tar -xf upx.tar.xz
          sudo mv upx-4.2.1-amd64_linux/upx /usr/local/bin

      - name: Building Binary
        env:
          CGO_ENABLED: 0
        run: |
          task build Out=kubelet-metrics-reexporter

      - name: Create Image Tag from branch name
        if: startsWith(github.ref, 'refs/heads/release')
        run: |
          set +e
          IMAGE_TAG=$(echo ${GITHUB_REF#refs/heads/} | sed 's/release-//g')
          echo "$IMAGE_TAG" | grep -i '\-nightly$'
          if [ $? -ne 0 ]; then
            IMAGE_TAG="$IMAGE_TAG-nightly"
          fi
          set -e

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "OVERRIDE_PUSHED_IMAGE=true" >> $GITHUB_ENV

      - name: Create Image Tag from tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          IMAGE_TAG=$(echo ${GITHUB_REF#refs/tags/})

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "OVERRIDE_PUSHED_IMAGE=false" >> $GITHUB_ENV

      - name: Build And Push Image
        if: startsWith(github.ref, 'refs/heads/release') || startsWith(github.ref, 'refs/tags/')
        run: |+
          docker manifest inspect $image_name:$IMAGE_TAG
          exit_status=$?
          if [ $exit_status -eq 0 ]; then
            [ "$OVERRIDE_PUSHED_IMAGE" = "false" ] && echo "image ($image_name:$IMAGE_TAG) already exists, and override image is disable, exiting" && exit 0
            echo "image exists, but override pushed image is set to true. proceeding with building image"
          fi

          task docker:build-n-push Tag="$IMAGE_TAG"

