name: 'build kloudlite operator action'
description: 'builds kloudlite Operators'

inputs:
  github_token:
    description: 'GitHub Token'
    required: true

  git_directory:
    description: 'git directory'
    default: "."

  build_directory:
    description: "build directory"
    default: "."

runs:
  using: 'composite'
  steps:
    - name: setup ENV Variables
      shell: bash
      run: |+
        echo "GOMODCACHE=${{github.workspace}}/actions/go-mod-cache" >> $GITHUB_ENV
        echo "GOCACHE=${{github.workspace}}/actions/go-cache" >> $GITHUB_ENV

    - name: calculate cache hash
      shell: bash
      working-directory: ${{ inputs.git_directory }}
      run: |+
        echo "cache_hash=${{ hashFiles('./go.mod', './go.sum') }}" >> $GITHUB_ENV

    - name: Setup Caches
      uses: actions/cache@v4
      env:
        cache-name: go-cache-${{ github.repository_id }}
      with:
        path: |+
          ${{ env.GOMODCACHE }}
          ${{ env.GOCACHE }}
        key: ${{ runner.os }}-${{github.repository_id}}-${{ inputs.build_directory }}-${{ env.cache_hash }}
        save-always: true
        restore-keys: |
          ${{ runner.os }}-${{github.repository_id}}-${{ inputs.build_directory }}-

    - name: just ensuring path to setup action exists
      shell: bash
      run: |+
        ln -sf ${{ inputs.git_directory }}/.github/actions ./operator-github-actions

    - name: setup
      id: setup
      uses: ./operator-github-actions/setup/
      with:
        nix-develop-arguments: "${{ inputs.git_directory }}#default"
        flake-lock: ${{ inputs.git_directory }}/flake.lock

    - name: Build & Push Image
      # if: ${{ startsWith(github.ref, 'refs/heads/release') || startsWith(github.ref, 'refs/tags/') }}
      working-directory: ${{ inputs.git_directory }}
      env:
        IMAGE_TAG: ${{steps.setup.outputs.image_tag}}
        OVERRIDE_PUSHED_IMAGE: ${{steps.setup.outputs.override_pushed_image}}
      shell: bash
      run: |
        set +e
        image_name="ghcr.io/${{ github.repository }}/${{matrix.name}}"

        docker manifest inspect "$image_name:$IMAGE_TAG"
        exit_status=$?
        if [ $exit_status -eq 0 ]; then
          [ "$OVERRIDE_PUSHED_IMAGE" = "false" ] && echo "image ($image_name:$IMAGE_TAG) already exists, and override image is disable, exiting" && exit 0
          echo "image exists, but override pushed image is set to true. proceeding with building image"
        fi

        set -e

        ls -al 
        pushd ${{ inputs.build_directory }}
        task container:build-and-push Image=$image_name:$IMAGE_TAG
        popd
