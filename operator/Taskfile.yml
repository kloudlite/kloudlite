version: 3

dotenv: [".secrets/env"]

includes:
  helm:
    taskfile: ./helm/Taskfile.yml
    dir: ./helm/

tasks:
  new-kind:
    silent: true
    cmds:
      - |+
        [ -z "{{.Group}}" ] && echo env-var 'Group' not provided && exit 1
        [ -z "{{.Kind}}" ] && echo env-var 'Kind' not provided && exit 1
        exit 0
      - operator-sdk create api --group {{.Group}} --version v1 --resource --controller --kind "{{.Kind}}"

  setup:
    dir: ./bin
    cmds:
      - curl -L0 https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.5/kustomize_v4.5.5_linux_amd64.tar.gz > kustomize.tar.gz
      - tar xf kustomize.tar.gz && rm -rf kustomize.tar.gz

  run:
    run: always
    cmds:
      - task: kill-port
      - go build -i -tags dynamic -o ./bin/operator
      - ./bin/operator --dev {{.CLI_ARGS}} |& pp -rel-path
    sources:
      - "./**/*.go"
    method: timestamp

  build:
    env:
      IMG: harbor.dev.madhouselabs.io/kloudlite/{{.EnvName}}/kloudlite-operator:{{.Tag}}
      NAMESPACE: kl-core
    preconditions:
      - sh: test -n '{{.Tag}}'
        msg: "var Tag must have a value"
      - sh: test -n '{{.EnvName}}'
        msg: "var EnvName must have a value"
    cmds:
      - make dev-docker-build dev-docker-push

  deploy:
    env:
      IMG: harbor.dev.madhouselabs.io/kloudlite/koperator:latest
      NAMESPACE: koperator
    cmds:
      - make dev-docker-build dev-docker-push
      - cd config/manager && kustomize edit set image controller=${IMG} && kustomize edit set namespace ${NAMESPACE}
      - cd config/default && kustomize edit set namespace ${NAMESPACE}
      - make deploy

  gen-yamls:
    vars:
      Name: kloudlite-operator
      Image: harbor.dev.madhouselabs.io/kloudlite/{{.EnvName}}/{{.Name}}:{{.Tag}}
      Namespace: kl-core
      WebhookPort: 1717
#    env:
##      IMG: harbor.dev.madhouselabs.io/kloudlite/$ENV_NAME/{{.Name}}:latest
#      IMG: "{{.Image}}"
#      NAMESPACE: kl-core
    preconditions:
      - sh: test -n '{{.Tag}}'
        msg: "var Tag must have a value"
      - sh: test -n '{{.EnvName}}'
        msg: "var EnvName must have a value"
    cmds:
      - make manifests
#      - |+
#        pushd config/manager > /dev/null
#        kustomize edit set image controller=${IMG}
#        kustomize edit set namespace ${NAMESPACE}
#        popd > /dev/null
#      - |+
#        pushd config/default > /dev/null
#        kustomize edit set image controller=${IMG}
#        kustomize edit set namespace ${NAMESPACE}
#        popd > /dev/null
      - |+
        cat config/crd/bases/*.yaml | yq -y

        yamls=$(kustomize build config/default | yq 'select(.kind | [.] - ["Deployment", "Service", "ConfigMap"] | length > 0 | not)' -y)
        echo "---"
        echo "$yamls" | yq '
          select((.kind == "ConfigMap") and (.metadata.name == "manager-config")) |
          .metadata.name = "{{.Name}}-manager-config"
        ' -y

        echo "---"
        echo "$yamls" | yq '
          select(.kind == "Service") |
          .metadata.labels."control-plane" = "{{.Name}}" |
          .spec.selector."control-plane" = "{{.Name}}" |
          .metadata.name = "{{.Name}}" |
          .spec.ports = (
            .spec.ports + [{name: "http-webhook", port: {{.WebhookPort}}, protocol: "TCP"}]
          )
        ' -y
        echo "---"
        echo "$yamls" | yq '
          select(.kind == "Deployment") |
          .metadata.name = "{{.Name}}" |
          .metadata.namespace = "{{.Namespace}}" |
          .metadata.labels."control-plane" = "{{.Name}}" |
          .spec.selector.matchLabels."control-plane" = "{{.Name}}" |
          .spec.template.metadata.labels."control-plane" = "{{.Name}}" |
          .spec.template.spec.containers = (
            .spec.template.spec.containers | map_values(
              if .name == "manager" then
                (.image = "{{.Image}}" | .command = .command + ["--all"])
              else . end
            )
          )
        ' -y

  pre:
    run: once
    cmds:
      - go mod tidy
      - make manifests
      - make generate
      - kubectl apply -f config/crd/bases

