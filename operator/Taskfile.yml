version: 3

vars:
  ImagePrefix: "ghcr.io/kloudlite/operators"
  dockerRegistry: registry.kloudlite.io
  KlControllerGen: "./bin/kl-controller-gen"
  KlTemplatizer: "./bin/kl-templatizer"

tasks:
  new-kind:
    summary: |+
      [example usage]
      task new-kind Group=sample Kind=SampleKind

    silent: true
    preconditions:
      - sh: '[ -n "{{.Group}}" ]'
        msg: 'var Group must have a value'
      - sh: '[ -n "{{.Kind}}" ]'
        msg: 'var Kind must have a value'

    cmds:
      - operator-sdk create api --group {{.Group}} --version v1 --resource --controller=false --kind "{{.Kind}}"

  build:
    env:
      CGO_ENABLED: 0
    preconditions:
      - sh: '[ -n "{{.Out}}" ]'
        msg: var Out must have a value
      - sh: '[ -n "{{.CWD}}" ]'
        msg: var CWD must have a value
    dir: "{{.CWD}}"
    cmds:
      - go build -ldflags="-s -w" -o {{.Out}}
      - upx {{.Out}}

  setup:
    dir: ./bin
    cmds:
      - curl -L0 https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.5/kustomize_v4.5.5_linux_amd64.tar.gz > kustomize.tar.gz
      - tar xf kustomize.tar.gz && rm -rf kustomize.tar.gz

  yaml:crds:
    cmds:
      - make manifests
      - |+
        [ -f config/crd/bases/_.yaml ] && rm config/crd/bases/_.yaml
      - |+
        for file in $(ls config/crd/bases/*.yaml)
        do
          cat $file
          echo "---"
        done

  # helm-pull:
  #   preconditions:
  #     - sh: '[ -n "{{.Dir}}" ]'
  #       msg: 'var Dir must have a value'
  #     - sh: '[ -d "{{.Dir}}" ]'
  #       msg: 'Dir ({{.Dir}}) must exist'
  #   cmds:
  #     - |+
  #       pushd {{.Dir}}
  #       helm pull {{.ClI_ARGS}} -d ./helm-charts
  #       popd

  yaml:operator:
    summary: |+
      template args
        - Namespace
        - EnvName
        - ImageTag
        - ImagePullPolicy
        - SvcAccountName

      optional args:
        - NodeSelctor
        - Tolerations
      
      need to be provided while applying this generated manifest

      ###
      .securityContext.capabilities.drop=["ALL"] |
      .securityContext.seccompProfile.type = "RuntimeDefault" |

    preconditions:
      - sh: '[ -n "{{.Name}}" ]'
        msg: 'env Name must be set'
#      - sh: '[ -n "{{.Dir}}" ]'
#        msg: 'env var Dir must be set'
#
    vars:
#      Image: "{{.dockerRegistry}}/kloudlite/operators/${ENV_NAME}/{{.Name}}:${IMAGE_TAG}"
#      Image: '{{ printf "%s/kloudlite/operators/{{.ENV_NAME}}/%s:{{.IMAGE_TAG}}" .dockerRegistry .Name }}'
      Image: '{{ printf "%s/kloudlite/operators/{{.EnvName}}/%s:{{.ImageTag}}" .dockerRegistry .Name }}'
      Namespace: '{{ printf "{{.Namespace}}" }}'
      SvcAccountName: '{{ printf "{{.SvcAccountName}}" }}'
      ImagePullPolicy: '{{ printf "{{.ImagePullPolicy}}" }}'
      OverrideFile: "./operators/{{.Name}}/overrides.yml"
    silent: true
    env:
      Name: "{{.Name}}"
      Namespace: "{{.Namespace}}"
      SvcAccountName: "{{.SvcAccountName}}"
      Image: "{{.Image}}"
      ImagePullPolicy: "{{.ImagePullPolicy}}"
    cmds:
      - |+
        setArgs=""
        [ -f "{{.OverrideFile}}" ] && {
           setArgs=$(cat "{{.OverrideFile}}" | yq -r 'to_entries|map("--set \(.key)=###\(.value)###") | join(" ")' | sed "s/###/'/g" )
        }
        
        if [[ -z "{{.Dir}}" ]]; then
          eval {{.KlTemplatizer}} < ./operators/deployment.yml.tpl $setArgs
        else
          outputName="{{.Dir}}/{{.Name}}.yml.tpl"
          eval {{.KlTemplatizer}} < ./operators/deployment.yml.tpl $setArgs > $outputName
          echo "saving to file: $outputName"
        fi
#       - |+
#         export PATH="$PWD/bin:$PATH"
#
#         kustomize build config/default | yq '
#           select(.kind == "Deployment") |
#           .metadata.name = "kl-{{.Name}}-operator" |
#           .metadata.namespace = "{{.Namespace}}" |
#           .metadata.labels."control-plane" = "{{.Name}}" |
#           .spec.selector.matchLabels."control-plane" = "{{.Name}}" |
#           .spec.template.metadata.labels."control-plane" = "{{.Name}}" |
#           .spec.template.spec.serviceAccountName = "{{.SvcAccountName}}" |
#           .spec.template.spec.containers = (
#             .spec.template.spec.containers | map_values(
#               if .name == "manager" then
#                 .image = "{{.Image}}" |
#                 .imagePullPolicy = "{{.ImagePullPolicy}}" |
#                 .resources.limits = {} |
#                 .resources.limits.memory = "200Mi" |
#                 .resources.requests.cpu = "64m" |
#                 .resources.requests.memory = "96Mi" |
#                 .securityContext.allowPrivilegeEscalation = false
#               elif .name == "kube-rbac-proxy" then
#                 .resources.limits = {} |
#                 .resources.requests.cpu = "5m" |
#                 .resources.requests.memory = "10Mi" |
#                 .securityContext.allowPrivilegeEscalation = false
#               else . end
#             )
#           )
#         ' -y
#

  yaml:operators:
    silent: true
    preconditions:
      - sh: '[ -n "{{.Dir}}" ]'
        msg: 'Dir must be set'
    cmds:
      - |+
        outputDir=$(mktemp -d)
        #echo "outputDir: $outputDir"
        for dir in $(ls -d ./operators/*/)
        do
          # [ "$dir" != "msvc-neo4j" ] && task yaml:operator Name="$(basename $dir)" Dir="$outputDir"
          # [ "$dir" != "msvc-neo4j" ] && task yaml:operator Name="$(basename $dir)"
          task yaml:operator Name="$(basename $dir)" Dir="{{.Dir}}"
        done
  
  yaml:primary-operators:
    cmds:
      - |+
        outputDir=$(mktemp -d)
        #echo "outputDir: $outputDir"
        #for dir in $(ls -d ./operators/*/)
        dirs=("./operators/project" "./operators/status-n-billing" "./operators/app-n-lambda" "./operators/msvc-n-mres" "./operators/msvc-mongo" "./operators/msvc-redis" "./operators/msvc-redpanda" "./operators/routers" "./operators/extensions" "./operators/csi-drivers")
        for dir in "${dirs[@]}"
        do
          # task yaml:operator Name="$(basename $dir)" Dir="$outputDir"
          task yaml:operator Name="$(basename $dir)"
        done

  gobuild:operator:
    preconditions:
      - sh: '[ -n "{{.Name}}" ]'
        msg: "var Name must have a value"
      - sh: '[ -d "./operators/{{.Name}}" ]'
        msg: 'directory operators/{{.Name}} must exist'
    env:
      CGO_ENABLED: 0
      GOOS: linux
      GOARCH: amd64
    cmds:
      - |+
        pushd "./operators/{{.Name}}" 1> /dev/null
        go build -o /tmp/{{.Name}} ./main.go
        popd 1> /dev/null

#
  local-build:operator:
    preconditions:
      # - sh: '[ -n "{{.Name}}" ]'
      #   msg: "var Name must have a value"
      - sh: '[ -d "./operators/{{.Name}}" ]'
        msg: 'directory operators/{{.Name}} must exist'
      - sh: '[ -n "{{.Tag}}" ]'
        msg: 'var Tag must have a value'
    interactive: true
    vars:
      Name:
        sh: ls ./operators | fzf --prompt "build operator> "
      # Image: "{{.dockerRegistry}}/kloudlite/operators/{{.EnvName}}/{{.Name}}:{{.Tag}}"
      Image: "{{.ImagePrefix}}/{{.Name}}:{{.Tag}}"
    env:
      CGO_ENABLED: 0
      GOOS: linux
      GOARCH: amd64
    silent: true
    cmds:
      - |+
        pushd "./operators/{{.Name}}" 1> /dev/null
        lineNumbers=$(cat Dockerfile | grep -i '^FROM' -n | tail +2 | awk -F: '{print $1}')
        
        startLineNo=$(echo "$lineNumbers" | head -n+1)
        finalLineNo=$(echo "$lineNumbers" | tail -1)

        tDir=$(mktemp -d)

        nDockerfile=$(cat Dockerfile | tail --lines=+$startLineNo | grep -i --invert-match 'from=builder')
        echo "$nDockerfile" | sed "1 i # syntax=docker/dockerfile:1.4" > $tDir/Dockerfile.base

        #lineNo=$(cat Dockerfile | grep -i '^FROM' -n | tail -1 | awk -F: '{print $1}')

        echo "[Debug]: $tDir/Dockerfile.base"
        lastStage=$(cat $tDir/Dockerfile.base | grep -i '^FROM' -n | tail -1 | awk -F: '{print $1}')
        cat $tDir/Dockerfile.base | sed "$(( $lastStage + 1 )) i COPY --from=local-builder ./{{.Name}} /manager" > $tDir/Dockerfile
        cat $tDir/Dockerfile

        echo "building application ..."

        go build -ldflags="-s -w" -o $tDir/{{.Name}}

        docker buildx build -f $tDir/Dockerfile -t {{.Image}} . --build-context local-builder=${tDir}
        docker push {{.Image}}
        # depot buildx build -f $tDir/Dockerfile -t {{.Image}} . --build-context local-builder=${tDir}
        # docker push {{.Image}}
        rm -rf $tDir
        popd 1> /dev/null


  local-build:agent:
    preconditions:
      - sh: '[ -n "{{.Tag}}" ]'
        msg: 'var Tag must have a value'
    vars:
      Name: kl-agent
      Image: ghcr.io/kloudlite/agents/{{.Name}}:{{.Tag}}
    dir: ./agent
    env:
      CGO_ENABLED: 0
      GOOS: linux
      GOARCH: amd64
    silent: true
    cmds:
      - |+
        lineNumbers=$(cat Dockerfile | grep -i '^FROM' -n | tail +2 | awk -F: '{print $1}')

        startLineNo=$(echo "$lineNumbers" | head -n+1)
        finalLineNo=$(echo "$lineNumbers" | tail -1)

        tDir=$(mktemp -d)

        nDockerfile=$(cat Dockerfile | tail --lines=+$startLineNo | grep -i --invert-match 'from=builder')
        echo "$nDockerfile" | sed "1 i # syntax=docker/dockerfile:1.4" > $tDir/Dockerfile.base

        #lineNo=$(cat Dockerfile | grep -i '^FROM' -n | tail -1 | awk -F: '{print $1}')
        CGO_ENABLED=0 go build -o $tDir/{{.Name}} .
        
        echo "[Debug]: $tDir/Dockerfile.base"
        
        lastStage=$(cat $tDir/Dockerfile.base | grep -i '^FROM' -n | tail -1 | awk -F: '{print $1}')
        cat $tDir/Dockerfile.base | sed "$(( $lastStage + 1 )) i COPY --from=local-builder ./{{.Name}} /kloudlite-agent" > $tDir/Dockerfile
        cat $tDir/Dockerfile

        docker buildx build -f $tDir/Dockerfile -t {{.Image}} . --build-context local-builder=${tDir}
        docker push {{.Image}}
        rm -rf $tDir

  build:operator:
    preconditions:
      - sh: '[ -n "{{.Name}}" ]'
        msg: "var Name must have a value"
      - sh: '[ -d "./operators/{{.Name}}" ]'
        msg: 'directory operators/{{.Name}} must exist'
      - sh: '[ -n "{{.EnvName}}" ]'
        msg: 'var EnvName must have a value'
      - sh: '[ -n "{{.Tag}}" ]'
        msg: 'var Tag must have a value'
    vars:
      Image: "{{.dockerRegistry}}/kloudlite/operators/{{.EnvName}}/{{.Name}}:{{.Tag}}"
    silent: true
    cmds:
      - |+
        #pushd "./operators/{{.Name}}" 1> /dev/null
        # docker buildx build -t {{.Image}} . --build-context project="../.." --build-arg name="{{.Name}}"
        # docker push {{.Image}}
        depot build -t {{.Image}} --build-arg name="{{.Name}}" -f operators/{{.Name}}/Dockerfile .
        depot push {{.Image}}
        popd 1> /dev/null
#

  pre:
    run: once
    cmds:
      - go mod tidy
      - make manifests
      - make generate
      - |+
        [ -f config/crd/bases/_.yaml ] && rm config/crd/bases/_.yaml
      - kubectl apply -f config/crd/bases

  manifests:
    summary: |+
      copied from makefile, written to make and apply for specific types
    vars:
      filePath:
        sh: dirname $(fd '.*_types.go' apis | fzf)
      # apply: false
      outputDir:
        sh: mktemp -d
    silent: true
    cmds:
      - |+
        # bin/controller-gen rbac:roleName=manager-role crd webhook paths="./..." output:crd:artifacts:config=config/crd/bases
        bin/controller-gen rbac:roleName=manager-role crd webhook paths="./{{.filePath}}" output:crd:artifacts:config={{.outputDir}}
        if [ "{{.apply}}" == "true" ]; then
          kubectl apply -f {{.outputDir}}
        fi
        mv {{.outputDir}}/* config/crd/bases/
        rm -rf {{.outputDir}}


  new:operator:
    preconditions:
      - sh: test -n '{{.name}}'
        msg: "var name must have a value"
      - sh: test ! -d './operators/{{.name}}'
        msg: 'directory ./operators/{{.name}} must not exist'
    cmds:
      - mkdir -p ./operators/{{.name}}

  new:controller:
    summary: |+
      example:
        task new:controller -- --api-group mongodb.msvc.kloudlite.io --debug --kind Database --kind-plural databases --package database --kind-pkg mongodbMsvcv1
      {{.KLOP}} controller create --api-group crds.kloudlite.io --kind Project --kind-pkg crdsv1 --kind-plural projects --package controllers --debug

    silent: true
    vars:
      KLOP:
        sh: echo "$PWD/cmd/{{.KlControllerGen}}"
    cmds:
      # - eval {{.KlControllerGen}} controller create {{.CLI_ARGS}}
      - go run $PWD/cmd/main.go controller create {{.CLI_ARGS}}

  new:msvc-controller:
    summary: |+
      example:
        task new:msvc-controller -- --api-group mongodb.msvc.kloudlite.io --debug --kind Database --kind-plural databases --package database --kind-pkg mongodbMsvcv1
      {{.KLOP}} msvc-controller create --api-group crds.kloudlite.io --kind Project --kind-pkg crdsv1 --kind-plural projects --package controllers --debug
#

    silent: true
    cmds:
      - eval {{.KlControllerGen}} msvc-controller create {{.CLI_ARGS}}

  new:mres-controller:
    summary: |+
      example:
        task new:msvc-controller -- --api-group mongodb.msvc.kloudlite.io --debug --kind Database --kind-plural databases --package database --kind-pkg mongodbMsvcv1
      {{.KLOP}} msvc-controller create --api-group crds.kloudlite.io --kind Project --kind-pkg crdsv1 --kind-plural projects --package controllers --debug
#

    silent: true
    cmds:
      - eval {{.KlControllerGen}} mres-controller create {{.CLI_ARGS}}

  install:cmd:
    cmds:
      - go build -o "{{.KlControllerGen}}" ./cmd/main.go

  install:templatizer:
    cmds:
      - go build -o "{{.KlTemplatizer}}" ./cmd/template/main.go

  build:agent:
    preconditions:
      - sh: '[ -n "{{.EnvName}}" ]'
        msg: 'var EnvName must have a value'
      - sh: '[ -n "{{.Tag}}" ]'
        msg: 'var Tag must have a value'
    vars:
      Name: kl-agent
      Image: "{{.dockerRegistry}}/kloudlite/{{.EnvName}}/{{.Name}}:{{.Tag}}"
    dir: ./agent
    cmds:
      - docker buildx build -t {{.Image}} . --build-context project=".." --build-arg name="{{.Name}}"
      - docker push {{.Image}}

  build:webhook-worker:
    preconditions:
      - sh: '[ -n "{{.EnvName}}" ]'
        msg: 'var EnvName must have a value'
      - sh: '[ -n "{{.Tag}}" ]'
        msg: 'var Tag must have a value'
    vars:
      Name: webhook-worker
      Image: "{{.dockerRegistry}}/kloudlite/workers/{{.EnvName}}/registry-webhook-worker:{{.Tag}}"
    dir: ./webhook-worker
    cmds:
      - docker buildx build -t {{.Image}} . --build-context project=".." --build-arg name="{{.Name}}"
      - docker push {{.Image}}

  local-build:webhook-worker:
    preconditions:
      - sh: '[ -n "{{.EnvName}}" ]'
        msg: 'var EnvName must have a value'
      - sh: '[ -n "{{.Tag}}" ]'
        msg: 'var Tag must have a value'
    vars:
      Name: webhook-worker
      Image: "{{.dockerRegistry}}/kloudlite/workers/{{.EnvName}}/registry-webhook-worker:{{.Tag}}"
    dir: ./webhook-worker
    cmds:
      - |+
        lineNumbers=$(cat Dockerfile | grep -i '^FROM' -n | tail +2 | awk -F: '{print $1}')

        startLineNo=$(echo "$lineNumbers" | head -n+1)
        finalLineNo=$(echo "$lineNumbers" | tail -1)
        
        tDir=$(mktemp -d)
        
        nDockerfile=$(cat Dockerfile | tail --lines=+$startLineNo | grep -i --invert-match 'from=builder')
        echo "$nDockerfile" | sed "1 i # syntax=docker/dockerfile:1.4" > $tDir/Dockerfile.base
        
        #lineNo=$(cat Dockerfile | grep -i '^FROM' -n | tail -1 | awk -F: '{print $1}')
        CGO_ENABLED=0 go build -o $tDir/{{.Name}} .

        echo "[Debug]: $tDir/Dockerfile.base"

        lastStage=$(cat $tDir/Dockerfile.base | grep -i '^FROM' -n | tail -1 | awk -F: '{print $1}')
        cat $tDir/Dockerfile.base | sed "$(( $lastStage + 1 )) i COPY --from=local-builder ./{{.Name}} /kloudlite-agent" > $tDir/Dockerfile
        cat $tDir/Dockerfile
        
        docker buildx build -f $tDir/Dockerfile -t {{.Image}} . --build-context local-builder=${tDir}
        docker push {{.Image}}
        rm -rf $tDir

  build:http-lb:
    dir: ./http-lb
    preconditions:
      - sh: '[ -n "{{.EnvName}}" ]'
        msg: 'var EnvName must have a value'
      - sh: '[ -n "{{.Tag}}" ]'
        msg: 'var Tag must have a value'
    vars:
      Image: "{{.dockerRegistry}}/kloudlite/{{.EnvName}}/lb:{{.Tag}}"
    cmds:
      - docker buildx build -t {{.Image}} .
      - docker push {{.Image}}

  run:operator:
    vars:
      Dir:
        sh: ls | fzf
    dir: "./operators/{{.Dir}}"
    silent: true
    interactive: true
    cmds:
      - |+
        set -a
        source .secrets/env
        set +a
        CGO_ENABLED=0 go build -o /tmp/{{.Dir}}
        # /tmp/{{.Dir}} --dev
        # dlv debug -l 127.0.0.1:31117  ./main.go -- --dev
        # dlv exec -l 127.0.0.1:31117 --headless /tmp/{{.Dir}} -- --dev
        /tmp/{{.Dir}} --dev

  run:webhook-worker:
    dir: "./webhook-worker"
    silent: true
    interactive: true
    vars:
      Name: webhook-worker
    cmds:
      - |+
        set -a
        source .secrets/env
        set +a
        CGO_ENABLED=0 go build -o /tmp/{{.Name}}
        # /tmp/{{.Dir}} --dev
        # dlv debug -l 127.0.0.1:31117  ./main.go -- --dev
        dlv exec -l 127.0.0.1:31117 --headless /tmp/{{.Name}} -- --dev

  test:app:
    interactive: true
    cmds:
      - nodemon -e 'go'  -w "./operators/app-n-lambda/internal/controllers/app" --exec "go test -v github.com/kloudlite/operator/operators/app-n-lambda/internal/controllers/app || exit 1"

  test:project:
    interactive: true
#    sources:
#      - ./operators/project/internal/controllers/envenv/*
    cmds:
#      - go build github.com/kloudlite/operator/operators/project
      - nodemon -w "./operators/project/internal/controllers/env" --exec "go test github.com/kloudlite/operator/operators/project/internal/controllers/env | tail -f /dev/null"

  run:env-route-switcher:
    dir: ./apps/env-route-switcher
    dotenv:
      - ./.secrets/env
    cmds:
      - go run ./main.go --dev --addr=localhost:8081

  build:workspace-route-switcher:
    dir: ./apps/workspace-route-switcher
    preconditions:
      - sh: '[ -n "{{.Tag}}" ]'
        msg: 'var Tag must have a value'
    vars:
      App: "workspace-route-switcher"
      Image: "{{.ImagePrefix}}/{{.App}}:{{.Tag}}"
    dotenv:
      - ./.secrets/env
    interactive: true
    silent: true
    cmds:
      - |
        lineNumbers=$(cat Dockerfile | grep -i '^FROM' -n | tail +2 | awk -F: '{print $1}')
        
        startLineNo=$(echo "$lineNumbers" | head -n+1)
        finalLineNo=$(echo "$lineNumbers" | tail -1)

        tDir=$(mktemp -d)
        echo "temp dir: $tDir"

        nDockerfile=$(cat Dockerfile | tail --lines=+$startLineNo | grep -i --invert-match 'from=builder')
        echo "$nDockerfile" | sed "1 i # syntax=docker/dockerfile:1.4" > $tDir/Dockerfile.base

        #lineNo=$(cat Dockerfile | grep -i '^FROM' -n | tail -1 | awk -F: '{print $1}')
        echo "[Debug]: $tDir/Dockerfile.base"

        lastStage=$(cat $tDir/Dockerfile.base | grep -i '^FROM' -n | tail -1 | awk -F: '{print $1}')
        cat $tDir/Dockerfile.base | sed "$(( $lastStage + 1 )) i COPY --from=local-builder ./{{.App}} ./{{.App}}" > $tDir/Dockerfile
        cat $tDir/Dockerfile

        CGO_ENABLED=0 go build -v -o $tDir/{{.App}} .

        docker buildx build -f $tDir/Dockerfile -t {{.Image}} . --build-context local-builder=${tDir}
        docker push {{.Image}}
        rm -rf $tDir
        #popd 1> /dev/null

  grpc-interfaces:
    dir: ./grpc-interfaces
    summary: |+
      add these lines at top of every grpc file
      ```proto
        syntax = "proto3";
        option go_package = "github.com/kloudlite/operator/grpc/<proto-file-name>";
      ```
    cmds:
      - protoc --go_out=. --go-grpc_out=. --go_opt=paths=import --go-grpc_opt=paths=import ./*.proto

