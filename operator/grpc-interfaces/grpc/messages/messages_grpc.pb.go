// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: messages.proto

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageDispatchService_ValidateAccessToken_FullMethodName    = "/MessageDispatchService/ValidateAccessToken"
	MessageDispatchService_GetAccessToken_FullMethodName         = "/MessageDispatchService/GetAccessToken"
	MessageDispatchService_SendActions_FullMethodName            = "/MessageDispatchService/SendActions"
	MessageDispatchService_ReceiveErrors_FullMethodName          = "/MessageDispatchService/ReceiveErrors"
	MessageDispatchService_ReceiveResourceUpdates_FullMethodName = "/MessageDispatchService/ReceiveResourceUpdates"
	MessageDispatchService_ReceiveInfraUpdates_FullMethodName    = "/MessageDispatchService/ReceiveInfraUpdates"
	MessageDispatchService_ReceiveClusterUpdates_FullMethodName  = "/MessageDispatchService/ReceiveClusterUpdates"
	MessageDispatchService_Ping_FullMethodName                   = "/MessageDispatchService/Ping"
)

// MessageDispatchServiceClient is the client API for MessageDispatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageDispatchServiceClient interface {
	ValidateAccessToken(ctx context.Context, in *ValidateAccessTokenIn, opts ...grpc.CallOption) (*ValidateAccessTokenOut, error)
	GetAccessToken(ctx context.Context, in *GetClusterTokenIn, opts ...grpc.CallOption) (*GetClusterTokenOut, error)
	SendActions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MessageDispatchService_SendActionsClient, error)
	ReceiveErrors(ctx context.Context, opts ...grpc.CallOption) (MessageDispatchService_ReceiveErrorsClient, error)
	ReceiveResourceUpdates(ctx context.Context, opts ...grpc.CallOption) (MessageDispatchService_ReceiveResourceUpdatesClient, error)
	ReceiveInfraUpdates(ctx context.Context, opts ...grpc.CallOption) (MessageDispatchService_ReceiveInfraUpdatesClient, error)
	ReceiveClusterUpdates(ctx context.Context, opts ...grpc.CallOption) (MessageDispatchService_ReceiveClusterUpdatesClient, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingOutput, error)
}

type messageDispatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageDispatchServiceClient(cc grpc.ClientConnInterface) MessageDispatchServiceClient {
	return &messageDispatchServiceClient{cc}
}

func (c *messageDispatchServiceClient) ValidateAccessToken(ctx context.Context, in *ValidateAccessTokenIn, opts ...grpc.CallOption) (*ValidateAccessTokenOut, error) {
	out := new(ValidateAccessTokenOut)
	err := c.cc.Invoke(ctx, MessageDispatchService_ValidateAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDispatchServiceClient) GetAccessToken(ctx context.Context, in *GetClusterTokenIn, opts ...grpc.CallOption) (*GetClusterTokenOut, error) {
	out := new(GetClusterTokenOut)
	err := c.cc.Invoke(ctx, MessageDispatchService_GetAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageDispatchServiceClient) SendActions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MessageDispatchService_SendActionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageDispatchService_ServiceDesc.Streams[0], MessageDispatchService_SendActions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDispatchServiceSendActionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageDispatchService_SendActionsClient interface {
	Recv() (*Action, error)
	grpc.ClientStream
}

type messageDispatchServiceSendActionsClient struct {
	grpc.ClientStream
}

func (x *messageDispatchServiceSendActionsClient) Recv() (*Action, error) {
	m := new(Action)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDispatchServiceClient) ReceiveErrors(ctx context.Context, opts ...grpc.CallOption) (MessageDispatchService_ReceiveErrorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageDispatchService_ServiceDesc.Streams[1], MessageDispatchService_ReceiveErrors_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDispatchServiceReceiveErrorsClient{stream}
	return x, nil
}

type MessageDispatchService_ReceiveErrorsClient interface {
	Send(*ErrorData) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDispatchServiceReceiveErrorsClient struct {
	grpc.ClientStream
}

func (x *messageDispatchServiceReceiveErrorsClient) Send(m *ErrorData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDispatchServiceReceiveErrorsClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDispatchServiceClient) ReceiveResourceUpdates(ctx context.Context, opts ...grpc.CallOption) (MessageDispatchService_ReceiveResourceUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageDispatchService_ServiceDesc.Streams[2], MessageDispatchService_ReceiveResourceUpdates_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDispatchServiceReceiveResourceUpdatesClient{stream}
	return x, nil
}

type MessageDispatchService_ReceiveResourceUpdatesClient interface {
	Send(*ResourceUpdate) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDispatchServiceReceiveResourceUpdatesClient struct {
	grpc.ClientStream
}

func (x *messageDispatchServiceReceiveResourceUpdatesClient) Send(m *ResourceUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDispatchServiceReceiveResourceUpdatesClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDispatchServiceClient) ReceiveInfraUpdates(ctx context.Context, opts ...grpc.CallOption) (MessageDispatchService_ReceiveInfraUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageDispatchService_ServiceDesc.Streams[3], MessageDispatchService_ReceiveInfraUpdates_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDispatchServiceReceiveInfraUpdatesClient{stream}
	return x, nil
}

type MessageDispatchService_ReceiveInfraUpdatesClient interface {
	Send(*InfraUpdate) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDispatchServiceReceiveInfraUpdatesClient struct {
	grpc.ClientStream
}

func (x *messageDispatchServiceReceiveInfraUpdatesClient) Send(m *InfraUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDispatchServiceReceiveInfraUpdatesClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDispatchServiceClient) ReceiveClusterUpdates(ctx context.Context, opts ...grpc.CallOption) (MessageDispatchService_ReceiveClusterUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageDispatchService_ServiceDesc.Streams[4], MessageDispatchService_ReceiveClusterUpdates_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDispatchServiceReceiveClusterUpdatesClient{stream}
	return x, nil
}

type MessageDispatchService_ReceiveClusterUpdatesClient interface {
	Send(*ClusterUpdate) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDispatchServiceReceiveClusterUpdatesClient struct {
	grpc.ClientStream
}

func (x *messageDispatchServiceReceiveClusterUpdatesClient) Send(m *ClusterUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDispatchServiceReceiveClusterUpdatesClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDispatchServiceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingOutput, error) {
	out := new(PingOutput)
	err := c.cc.Invoke(ctx, MessageDispatchService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageDispatchServiceServer is the server API for MessageDispatchService service.
// All implementations must embed UnimplementedMessageDispatchServiceServer
// for forward compatibility
type MessageDispatchServiceServer interface {
	ValidateAccessToken(context.Context, *ValidateAccessTokenIn) (*ValidateAccessTokenOut, error)
	GetAccessToken(context.Context, *GetClusterTokenIn) (*GetClusterTokenOut, error)
	SendActions(*Empty, MessageDispatchService_SendActionsServer) error
	ReceiveErrors(MessageDispatchService_ReceiveErrorsServer) error
	ReceiveResourceUpdates(MessageDispatchService_ReceiveResourceUpdatesServer) error
	ReceiveInfraUpdates(MessageDispatchService_ReceiveInfraUpdatesServer) error
	ReceiveClusterUpdates(MessageDispatchService_ReceiveClusterUpdatesServer) error
	Ping(context.Context, *Empty) (*PingOutput, error)
	mustEmbedUnimplementedMessageDispatchServiceServer()
}

// UnimplementedMessageDispatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageDispatchServiceServer struct {
}

func (UnimplementedMessageDispatchServiceServer) ValidateAccessToken(context.Context, *ValidateAccessTokenIn) (*ValidateAccessTokenOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccessToken not implemented")
}
func (UnimplementedMessageDispatchServiceServer) GetAccessToken(context.Context, *GetClusterTokenIn) (*GetClusterTokenOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedMessageDispatchServiceServer) SendActions(*Empty, MessageDispatchService_SendActionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendActions not implemented")
}
func (UnimplementedMessageDispatchServiceServer) ReceiveErrors(MessageDispatchService_ReceiveErrorsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveErrors not implemented")
}
func (UnimplementedMessageDispatchServiceServer) ReceiveResourceUpdates(MessageDispatchService_ReceiveResourceUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveResourceUpdates not implemented")
}
func (UnimplementedMessageDispatchServiceServer) ReceiveInfraUpdates(MessageDispatchService_ReceiveInfraUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveInfraUpdates not implemented")
}
func (UnimplementedMessageDispatchServiceServer) ReceiveClusterUpdates(MessageDispatchService_ReceiveClusterUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveClusterUpdates not implemented")
}
func (UnimplementedMessageDispatchServiceServer) Ping(context.Context, *Empty) (*PingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMessageDispatchServiceServer) mustEmbedUnimplementedMessageDispatchServiceServer() {
}

// UnsafeMessageDispatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageDispatchServiceServer will
// result in compilation errors.
type UnsafeMessageDispatchServiceServer interface {
	mustEmbedUnimplementedMessageDispatchServiceServer()
}

func RegisterMessageDispatchServiceServer(s grpc.ServiceRegistrar, srv MessageDispatchServiceServer) {
	s.RegisterService(&MessageDispatchService_ServiceDesc, srv)
}

func _MessageDispatchService_ValidateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccessTokenIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDispatchServiceServer).ValidateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageDispatchService_ValidateAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDispatchServiceServer).ValidateAccessToken(ctx, req.(*ValidateAccessTokenIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDispatchService_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterTokenIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDispatchServiceServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageDispatchService_GetAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDispatchServiceServer).GetAccessToken(ctx, req.(*GetClusterTokenIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageDispatchService_SendActions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageDispatchServiceServer).SendActions(m, &messageDispatchServiceSendActionsServer{stream})
}

type MessageDispatchService_SendActionsServer interface {
	Send(*Action) error
	grpc.ServerStream
}

type messageDispatchServiceSendActionsServer struct {
	grpc.ServerStream
}

func (x *messageDispatchServiceSendActionsServer) Send(m *Action) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageDispatchService_ReceiveErrors_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDispatchServiceServer).ReceiveErrors(&messageDispatchServiceReceiveErrorsServer{stream})
}

type MessageDispatchService_ReceiveErrorsServer interface {
	SendAndClose(*Empty) error
	Recv() (*ErrorData, error)
	grpc.ServerStream
}

type messageDispatchServiceReceiveErrorsServer struct {
	grpc.ServerStream
}

func (x *messageDispatchServiceReceiveErrorsServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDispatchServiceReceiveErrorsServer) Recv() (*ErrorData, error) {
	m := new(ErrorData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDispatchService_ReceiveResourceUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDispatchServiceServer).ReceiveResourceUpdates(&messageDispatchServiceReceiveResourceUpdatesServer{stream})
}

type MessageDispatchService_ReceiveResourceUpdatesServer interface {
	SendAndClose(*Empty) error
	Recv() (*ResourceUpdate, error)
	grpc.ServerStream
}

type messageDispatchServiceReceiveResourceUpdatesServer struct {
	grpc.ServerStream
}

func (x *messageDispatchServiceReceiveResourceUpdatesServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDispatchServiceReceiveResourceUpdatesServer) Recv() (*ResourceUpdate, error) {
	m := new(ResourceUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDispatchService_ReceiveInfraUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDispatchServiceServer).ReceiveInfraUpdates(&messageDispatchServiceReceiveInfraUpdatesServer{stream})
}

type MessageDispatchService_ReceiveInfraUpdatesServer interface {
	SendAndClose(*Empty) error
	Recv() (*InfraUpdate, error)
	grpc.ServerStream
}

type messageDispatchServiceReceiveInfraUpdatesServer struct {
	grpc.ServerStream
}

func (x *messageDispatchServiceReceiveInfraUpdatesServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDispatchServiceReceiveInfraUpdatesServer) Recv() (*InfraUpdate, error) {
	m := new(InfraUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDispatchService_ReceiveClusterUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDispatchServiceServer).ReceiveClusterUpdates(&messageDispatchServiceReceiveClusterUpdatesServer{stream})
}

type MessageDispatchService_ReceiveClusterUpdatesServer interface {
	SendAndClose(*Empty) error
	Recv() (*ClusterUpdate, error)
	grpc.ServerStream
}

type messageDispatchServiceReceiveClusterUpdatesServer struct {
	grpc.ServerStream
}

func (x *messageDispatchServiceReceiveClusterUpdatesServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDispatchServiceReceiveClusterUpdatesServer) Recv() (*ClusterUpdate, error) {
	m := new(ClusterUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDispatchService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDispatchServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageDispatchService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDispatchServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageDispatchService_ServiceDesc is the grpc.ServiceDesc for MessageDispatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageDispatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessageDispatchService",
	HandlerType: (*MessageDispatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateAccessToken",
			Handler:    _MessageDispatchService_ValidateAccessToken_Handler,
		},
		{
			MethodName: "GetAccessToken",
			Handler:    _MessageDispatchService_GetAccessToken_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MessageDispatchService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendActions",
			Handler:       _MessageDispatchService_SendActions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReceiveErrors",
			Handler:       _MessageDispatchService_ReceiveErrors_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveResourceUpdates",
			Handler:       _MessageDispatchService_ReceiveResourceUpdates_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveInfraUpdates",
			Handler:       _MessageDispatchService_ReceiveInfraUpdates_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveClusterUpdates",
			Handler:       _MessageDispatchService_ReceiveClusterUpdates_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "messages.proto",
}
