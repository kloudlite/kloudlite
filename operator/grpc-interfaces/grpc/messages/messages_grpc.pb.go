// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: messages.proto

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageDispatchServiceClient is the client API for MessageDispatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageDispatchServiceClient interface {
	SendActions(ctx context.Context, in *StreamActionsRequest, opts ...grpc.CallOption) (MessageDispatchService_SendActionsClient, error)
	ReceiveStatusMessages(ctx context.Context, opts ...grpc.CallOption) (MessageDispatchService_ReceiveStatusMessagesClient, error)
	GetAccessToken(ctx context.Context, in *GetClusterTokenIn, opts ...grpc.CallOption) (*GetClusterTokenOut, error)
}

type messageDispatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageDispatchServiceClient(cc grpc.ClientConnInterface) MessageDispatchServiceClient {
	return &messageDispatchServiceClient{cc}
}

func (c *messageDispatchServiceClient) SendActions(ctx context.Context, in *StreamActionsRequest, opts ...grpc.CallOption) (MessageDispatchService_SendActionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageDispatchService_ServiceDesc.Streams[0], "/MessageDispatchService/SendActions", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDispatchServiceSendActionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageDispatchService_SendActionsClient interface {
	Recv() (*Action, error)
	grpc.ClientStream
}

type messageDispatchServiceSendActionsClient struct {
	grpc.ClientStream
}

func (x *messageDispatchServiceSendActionsClient) Recv() (*Action, error) {
	m := new(Action)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDispatchServiceClient) ReceiveStatusMessages(ctx context.Context, opts ...grpc.CallOption) (MessageDispatchService_ReceiveStatusMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageDispatchService_ServiceDesc.Streams[1], "/MessageDispatchService/ReceiveStatusMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageDispatchServiceReceiveStatusMessagesClient{stream}
	return x, nil
}

type MessageDispatchService_ReceiveStatusMessagesClient interface {
	Send(*StatusData) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageDispatchServiceReceiveStatusMessagesClient struct {
	grpc.ClientStream
}

func (x *messageDispatchServiceReceiveStatusMessagesClient) Send(m *StatusData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageDispatchServiceReceiveStatusMessagesClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageDispatchServiceClient) GetAccessToken(ctx context.Context, in *GetClusterTokenIn, opts ...grpc.CallOption) (*GetClusterTokenOut, error) {
	out := new(GetClusterTokenOut)
	err := c.cc.Invoke(ctx, "/MessageDispatchService/GetAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageDispatchServiceServer is the server API for MessageDispatchService service.
// All implementations must embed UnimplementedMessageDispatchServiceServer
// for forward compatibility
type MessageDispatchServiceServer interface {
	SendActions(*StreamActionsRequest, MessageDispatchService_SendActionsServer) error
	ReceiveStatusMessages(MessageDispatchService_ReceiveStatusMessagesServer) error
	GetAccessToken(context.Context, *GetClusterTokenIn) (*GetClusterTokenOut, error)
	mustEmbedUnimplementedMessageDispatchServiceServer()
}

// UnimplementedMessageDispatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageDispatchServiceServer struct {
}

func (UnimplementedMessageDispatchServiceServer) SendActions(*StreamActionsRequest, MessageDispatchService_SendActionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendActions not implemented")
}
func (UnimplementedMessageDispatchServiceServer) ReceiveStatusMessages(MessageDispatchService_ReceiveStatusMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveStatusMessages not implemented")
}
func (UnimplementedMessageDispatchServiceServer) GetAccessToken(context.Context, *GetClusterTokenIn) (*GetClusterTokenOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedMessageDispatchServiceServer) mustEmbedUnimplementedMessageDispatchServiceServer() {
}

// UnsafeMessageDispatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageDispatchServiceServer will
// result in compilation errors.
type UnsafeMessageDispatchServiceServer interface {
	mustEmbedUnimplementedMessageDispatchServiceServer()
}

func RegisterMessageDispatchServiceServer(s grpc.ServiceRegistrar, srv MessageDispatchServiceServer) {
	s.RegisterService(&MessageDispatchService_ServiceDesc, srv)
}

func _MessageDispatchService_SendActions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamActionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageDispatchServiceServer).SendActions(m, &messageDispatchServiceSendActionsServer{stream})
}

type MessageDispatchService_SendActionsServer interface {
	Send(*Action) error
	grpc.ServerStream
}

type messageDispatchServiceSendActionsServer struct {
	grpc.ServerStream
}

func (x *messageDispatchServiceSendActionsServer) Send(m *Action) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageDispatchService_ReceiveStatusMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageDispatchServiceServer).ReceiveStatusMessages(&messageDispatchServiceReceiveStatusMessagesServer{stream})
}

type MessageDispatchService_ReceiveStatusMessagesServer interface {
	SendAndClose(*Empty) error
	Recv() (*StatusData, error)
	grpc.ServerStream
}

type messageDispatchServiceReceiveStatusMessagesServer struct {
	grpc.ServerStream
}

func (x *messageDispatchServiceReceiveStatusMessagesServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageDispatchServiceReceiveStatusMessagesServer) Recv() (*StatusData, error) {
	m := new(StatusData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageDispatchService_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterTokenIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageDispatchServiceServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MessageDispatchService/GetAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageDispatchServiceServer).GetAccessToken(ctx, req.(*GetClusterTokenIn))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageDispatchService_ServiceDesc is the grpc.ServiceDesc for MessageDispatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageDispatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessageDispatchService",
	HandlerType: (*MessageDispatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccessToken",
			Handler:    _MessageDispatchService_GetAccessToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendActions",
			Handler:       _MessageDispatchService_SendActions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReceiveStatusMessages",
			Handler:       _MessageDispatchService_ReceiveStatusMessages_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "messages.proto",
}
