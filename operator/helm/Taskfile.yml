version: 3

tasks:
  init:
    cmds:
      - operator-sdk init --plugins helm --domain kloudlite.io --group msvc --version v1 --kind MongoDB --helm-chart-repo https://charts.bitnami.com/bitnami --helm-chart mongodb

  new-kind:
    summary: '
      example:
        task new-kind Repo="https://charts.bitnami.com/bitnami" Chart="mongodb" Kind="MongoDB"
    '
    vars:
      Domain: kloudlite.io
      Group: msvc
    preconditions:
      - sh: test -n '{{.Repo}}'
        msg: 'var Repo must have a value'
      - sh: test -n '{{.Chart}}'
        msg: 'var Chart must have a value'
      - sh: test -n '{{.Kind}}'
        msg: 'var Kind must have a value'
    cmds:
      - operator-sdk create api --plugins helm --group {{.Group}} --version v1 --kind {{.Kind}} --helm-chart-repo {{.Repo}} --helm-chart {{.Chart}}

  build:
    vars:
      Name: kloudlite-helm-operator
      Namespace: kl-core
      Image: "harbor.dev.madhouselabs.io/kloudlite/{{.EnvName}}/{{.Name}}:{{.Tag}}"
    preconditions:
      - sh: test -n '{{.EnvName}}'
        msg: 'var EnvName must have a value'
      - sh: test -n '{{.Tag}}'
        msg: 'var Tag must have a value'
    env:
      IMG: "{{.Image}}"
      Namespace: "{{.Namespace}}"
    cmds:
      - make docker-build docker-push

  gen-yamls:
    vars:
      Name: kloudlite-helm-operator
      Namespace: kl-core
      Image: "harbor.dev.madhouselabs.io/kloudlite/{{.EnvName}}/kloudlite-helm-operator:{{.Tag}}"
      SvcAccountName: kloudlite-cluster-svc-account
    preconditions:
      - sh: test -n '{{.EnvName}}'
        msg: 'var EnvName must have a value'
      - sh: test -n '{{.Tag}}'
        msg: 'var Tag must have a value'
    env:
#       IMG: harbor.dev.madhouselabs.io/dev-kloudlite/{{.Name}}:latest
      NAMESPACE: kl-core
    cmds:
      - |+
        cat config/crd/bases/*.yaml | yq -y
        yamls=$(kustomize build config/default | yq 'select(.kind | [.] - ["Deployment", "Service", "ConfigMap"] | length > 0 | not)' -y)
        echo "---"
        echo "$yamls" | yq '
          select((.kind == "ConfigMap") and (.metadata.name == "manager-config")) |
          .metadata.name = "{{.Name}}-manager-config" |
          .metadata.namespace = "{{.Namespace}}"
        ' -y

        echo "---"
        echo "$yamls" | yq '
          select(.kind == "Service") |
            .metadata.labels."control-plane" = "{{.Name}}" |
            .spec.selector."control-plane" = "{{.Name}}" |
            .metadata.name = "{{.Name}}" |
            .metadata.namespace = "{{.Namespace}}"
        ' -y

        echo "---"
        echo "$yamls" | yq '
          select(.kind == "Deployment") |
            .metadata.name = "{{.Name}}" |
            .metadata.namespace = "{{.Namespace}}" |
            .metadata.labels."control-plane" = "{{.Name}}" |
            .spec.selector.matchLabels."control-plane" = "{{.Name}}" |
            .spec.template.metadata.labels."control-plane" = "{{.Name}}" |

            .spec.template.spec.serviceAccountName = "{{.SvcAccountName}}" |
            .spec.template.spec.containers = (
              .spec.template.spec.containers |
              map_values(
                if .name == "manager" then
                  .image = "{{.Image}}"
                else . end
              ) |
              map_values(
                if .name == "kube-rbac-proxy" then
                  .resources.limits.cpu = "60m"  |
                  .resources.limits.memory = "80Mi" |
                  .resources.requests.cpu = "10m" |
                  .resources.requests.memory = "20Mi"
                else . end
              )
            )
        ' -y
      #

  run:
    cmds:
      - make install
      - bin/helm-operator run --metrics-bind-address=":10017" --health-probe-bind-address=":10016"

  clean:
    cmds:
      - rm -rf ./helm-charts
