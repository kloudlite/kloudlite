apiVersion: msvc.kloudlite.io/v1
kind: HelmInfluxDB
metadata:
  name: helminfluxdb-sample
spec:
  # Default values copied from <project_dir>/helm-charts/influxdb/values.yaml
  auth:
    admin:
      bucket: primary
      org: primary
      password: ""
      token: ""
      username: admin
    createUserToken: false
    enabled: true
    existingSecret: ""
    readUser:
      password: ""
      username: ""
    usePasswordFiles: false
    user:
      bucket: ""
      org: ""
      password: ""
      username: ""
    writeUser:
      password: ""
      username: ""
  backup:
    affinity: {}
    cronjob:
      historyLimit: 1
      podAnnotations: {}
      schedule: 0 2 * * *
      securityContext:
        enabled: true
        fsGroup: 1001
        runAsUser: 1001
    directory: /backups
    enabled: false
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    podAffinityPreset: ""
    podAntiAffinityPreset: soft
    retentionDays: 10
    tolerations: []
    uploadProviders:
      aws:
        accessKeyID: ""
        bucketName: s3://bucket/influxdb
        enabled: false
        existingSecret: ""
        image:
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: docker.io
          repository: bitnami/aws-cli
          tag: 2.4.7-debian-10-r4
        region: us-east-1
        secretAccessKey: ""
      azure:
        containerName: influxdb-container
        enabled: false
        existingSecret: ""
        image:
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: docker.io
          repository: bitnami/azure-cli
          tag: 2.37.0-debian-11-r3
        secret: ""
        secretKey: connection-string
      google:
        bucketName: gs://bucket/influxdb
        enabled: false
        existingSecret: ""
        image:
          pullPolicy: IfNotPresent
          pullSecrets: []
          registry: docker.io
          repository: bitnami/google-cloud-sdk
          tag: 0.389.0-debian-11-r1
        secret: ""
        secretKey: key.json
  clusterDomain: cluster.local
  collectd:
    enabled: false
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePort: ""
      port: 25826
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
  commonAnnotations: {}
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  extraDeploy: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/influxdb
    tag: 2.2.0-debian-11-r3
  influxdb:
    affinity: {}
    args: []
    command: []
    configuration: ""
    containerPorts:
      http: 8086
      rpc: 8088
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    initdbScripts: {}
    initdbScriptsCM: ""
    initdbScriptsSecret: ""
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 180
      periodSeconds: 45
      successThreshold: 1
      timeoutSeconds: 30
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: OrderedReady
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 60
      periodSeconds: 45
      successThreshold: 1
      timeoutSeconds: 30
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        http: ""
        rpc: ""
      ports:
        http: 8086
        rpc: 8088
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 6
      initialDelaySeconds: 180
      periodSeconds: 45
      successThreshold: 1
      timeoutSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
    hostname: influxdb.local
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    tls: false
  kubeVersion: ""
  metrics:
    enabled: false
    service:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: '{{ .Values.metrics.service.port }}'
        prometheus.io/scrape: "true"
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePort: ""
      port: 9122
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
  nameOverride: ""
  networkPolicy:
    allowExternal: true
    enabled: false
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    size: 8Gi
    storageClass: ""
  psp:
    create: false
  rbac:
    create: false
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  volumePermissions:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r3
    securityContext:
      runAsUser: 0
  
  
