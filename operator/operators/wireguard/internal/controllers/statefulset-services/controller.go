package statefulset_services

import (
	"context"
	"fmt"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/runtime"

	ctrl "sigs.k8s.io/controller-runtime"

	"github.com/kloudlite/operator/operators/wireguard/internal/env"
	"github.com/kloudlite/operator/pkg/constants"
	"github.com/kloudlite/operator/pkg/kubectl"
	"github.com/kloudlite/operator/pkg/logging"
	rApi "github.com/kloudlite/operator/pkg/operator"
	stepResult "github.com/kloudlite/operator/pkg/operator/step-result"

	fn "github.com/kloudlite/operator/pkg/functions"
	appsv1 "k8s.io/api/apps/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	apiLabels "k8s.io/apimachinery/pkg/labels"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
)

type Reconciler struct {
	client.Client
	Scheme     *runtime.Scheme
	logger     logging.Logger
	Name       string
	yamlClient kubectl.YAMLClient
	Env        *env.Env
}

func (r *Reconciler) GetName() string {
	return r.Name
}

const (
	ServiceForStatefulPods string = "service-for-stateful-pods"
)

// +kubebuilder:rbac:groups=wireguard.kloudlite.io,resources=connections,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=wireguard.kloudlite.io,resources=connections/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=wireguard.kloudlite.io,resources=connections/finalizers,verbs=update
func (r *Reconciler) Reconcile(ctx context.Context, request ctrl.Request) (ctrl.Result, error) {
	sts, err := rApi.Get(ctx, r.Client, request.NamespacedName, &appsv1.StatefulSet{})
	if err != nil {
		return ctrl.Result{}, nil
	}

	if sts.GetDeletionTimestamp() != nil {
		if x := r.finalize(sts); !x.ShouldProceed() {
			return x.ReconcilerResponse()
		}

		return ctrl.Result{}, nil
	}

	if step := r.ensureServicesForStatefulsetPods(ctx, sts); !step.ShouldProceed() {
		return step.ReconcilerResponse()
	}

	return ctrl.Result{}, nil
}

func (r *Reconciler) finalize(sts *appsv1.StatefulSet) stepResult.Result {
	panic("not implemented")
}

func (r *Reconciler) ensureServicesForStatefulsetPods(ctx context.Context, sts *appsv1.StatefulSet) stepResult.Result {
	var podsList corev1.PodList
	if err := r.List(ctx, &podsList, &client.ListOptions{
		LabelSelector: apiLabels.SelectorFromSet(sts.Spec.Selector.MatchLabels),
		Namespace:     sts.Namespace,
	}); err != nil {
		return stepResult.New().Err(err)
	}

	var svcList corev1.ServiceList
	if err := r.List(ctx, &svcList, &client.ListOptions{
		LabelSelector: apiLabels.SelectorFromSet(sts.Spec.Selector.MatchLabels),
		Namespace:     sts.Namespace,
	}); err != nil {
		return stepResult.New().Err(err)
	}

	for _, svc := range svcList.Items {
		for _, pod := range podsList.Items {
			nsvc := &corev1.Service{ObjectMeta: metav1.ObjectMeta{Name: fmt.Sprintf("%s-%s", pod.Name, svc.Name), Namespace: sts.Namespace}}
			if _, err := controllerutil.CreateOrUpdate(ctx, r.Client, nsvc, func() error {
				nsvc.SetAnnotations(map[string]string{
					constants.DescriptionKey: "generated by kloudlite, for access to statefulset pod services, across the cluster's GlobalVPN",
				})
				nsvc.Spec.Type = corev1.ServiceTypeClusterIP
				nsvc.Spec.Selector = sts.Spec.Selector.MatchLabels
				nsvc.Spec.Ports = svc.Spec.Ports
				stsAsOwner := fn.AsOwner(sts, false)
				stsAsOwner.Controller = fn.New(true)
				nsvc.SetOwnerReferences([]metav1.OwnerReference{fn.AsOwner(&pod, false), stsAsOwner})
				return nil
			}); err != nil {
				return stepResult.New().Err(err)
			}
		}
	}

	return stepResult.New().Continue(true)
}

func (r *Reconciler) SetupWithManager(mgr ctrl.Manager, logger logging.Logger) error {
	r.Client = mgr.GetClient()
	r.Scheme = mgr.GetScheme()
	r.logger = logger.WithName(r.Name)
	r.yamlClient = kubectl.NewYAMLClientOrDie(mgr.GetConfig(), kubectl.YAMLClientOpts{Logger: r.logger})

	builder := ctrl.NewControllerManagedBy(mgr).For(&appsv1.StatefulSet{})
	builder.Owns(&corev1.Service{})

	builder.WithEventFilter(rApi.ReconcileFilter())
	return builder.Complete(r)
}
