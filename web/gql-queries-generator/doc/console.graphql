# This file is auto generated don't modify it manually
# generated by pnpm gql:parse

query consoleAccountCheckNameAvailability($name: String!) {
  accounts_checkNameAvailability(name: $name) {
    result
    suggestedNames
  }
}

query consoleInfraCheckNameAvailability($resType: ResType!, $name: String!) {
  infra_checkNameAvailability(resType: $resType, name: $name) {
    suggestedNames
    result
  }
}

query consoleCoreCheckNameAvailability($resType: ConsoleResType!, $name: String!, $namespace: String) {
  core_checkNameAvailability(
    resType: $resType
    name: $name
    namespace: $namespace
  ) {
    result
    suggestedNames
  }
}

query consoleWhoAmI {
  auth_me {
    id
    email
  }
}

mutation consoleCreateAccount($account: AccountIn!) {
  accounts_createAccount(account: $account) {
    displayName
  }
}

query consoleListAccounts {
  accounts_listAccounts {
    id
    metadata {
      name
      annotations
    }
    updateTime
    displayName
  }
}

query consoleGetAccount($accountName: String!) {
  accounts_getAccount(accountName: $accountName) {
    metadata {
      name
      annotations
    }
    updateTime
    contactEmail
    displayName
  }
}

mutation consoleCreateProject($project: ProjectIn!) {
  core_createProject(project: $project) {
    id
  }
}

query consoleGetProject($name: String!) {
  core_getProject(name: $name) {
    metadata {
      name
      annotations
      namespace
    }
    spec {
      targetNamespace
      displayName
    }
  }
}

query consoleListProjects($clusterName: String, $pagination: CursorPaginationIn, $search: SearchProjects) {
  core_listProjects(clusterName: $clusterName, pq: $pagination, search: $search) {
    totalCount
    edges {
      node {
        id
        creationTime
        clusterName
        apiVersion
        kind
        metadata {
          namespace
          name
          labels
          deletionTimestamp
          generation
          creationTimestamp
          annotations
        }
        recordVersion
        spec {
          targetNamespace
          logo
          displayName
          clusterName
          accountName
        }
        status {
          resources {
            name
            kind
            apiVersion
            namespace
          }
          message {
            RawMessage
          }
          lastReconcileTime
          isReady
          checks
        }
        syncStatus {
          syncScheduledAt
          state
          recordVersion
          lastSyncedAt
          error
          action
        }
        updateTime
        accountName
      }
    }
    pageInfo {
      startCursor
      hasNextPage
      endCursor
      hasPreviousPage
    }
  }
}

mutation consoleCreateCluster($cluster: ClusterIn!) {
  infra_createCluster(cluster: $cluster) {
    id
  }
}

query consoleClustersCount {
  infra_listClusters {
    totalCount
  }
}

query consoleListClusters($search: SearchCluster, $pagination: CursorPaginationIn) {
  infra_listClusters(search: $search, pagination: $pagination) {
    totalCount
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    edges {
      cursor
      node {
        metadata {
          name
          annotations
        }
        updateTime
        syncStatus {
          syncScheduledAt
          lastSyncedAt
          recordVersion
          state
          error
          action
        }
        status {
          resources {
            namespace
            name
            kind
            apiVersion
          }
          message {
            RawMessage
          }
          lastReconcileTime
          isReady
          checks
        }
        recordVersion
        spec {
          vpc
          region
          credentialsRef {
            namespace
            name
          }
          cloudProvider
          availabilityMode
        }
      }
    }
  }
}

query consoleGetCluster($name: String!) {
  infra_getCluster(name: $name) {
    metadata {
      name
      annotations
    }
    spec {
      vpc
      region
      nodeIps
      cloudProvider
      availabilityMode
    }
  }
}

query consoleListProviderSecrets($pagination: CursorPaginationIn, $search: SearchProviderSecret) {
  infra_listProviderSecrets(pagination: $pagination, search: $search) {
    edges {
      node {
        enabled
        stringData
        metadata {
          annotations
          name
        }
        cloudProviderName
        status {
          resources {
            namespace
            name
            kind
            apiVersion
          }
          message {
            RawMessage
          }
          lastReconcileTime
          isReady
          checks
        }
        creationTime
        updateTime
      }
    }
    totalCount
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
  }
}

mutation consoleCreateProviderSecret($secret: CloudProviderSecretIn!) {
  infra_createProviderSecret(secret: $secret) {
    metadata {
      name
    }
  }
}

mutation consoleUpdateProviderSecret($secret: CloudProviderSecretIn!) {
  infra_updateProviderSecret(secret: $secret) {
    id
  }
}

mutation consoleDeleteProviderSecret($secretName: String!) {
  infra_deleteProviderSecret(secretName: $secretName)
}

query consoleGetProviderSecret($name: String!) {
  infra_getProviderSecret(name: $name) {
    metadata {
      name
      annotations
    }
    cloudProviderName
  }
}

mutation consoleCreateNodePool($clusterName: String!, $pool: NodePoolIn!) {
  infra_createNodePool(clusterName: $clusterName, pool: $pool) {
    id
  }
}

query consoleListNodePools($clusterName: String!, $pagination: CursorPaginationIn, $search: SearchNodepool) {
  infra_listNodePools(
    clusterName: $clusterName
    pagination: $pagination
    search: $search
  ) {
    edges {
      node {
        updateTime
        spec {
          targetCount
          minCount
          maxCount
          awsNodeConfig {
            vpc
            spotSpecs {
              memMin
              memMax
              cpuMin
              cpuMax
            }
            region
            provisionMode
            onDemandSpecs {
              instanceType
            }
            isGpu
            imageId
          }
        }
        metadata {
          name
          annotations
        }
        clusterName
        status {
          isReady
          message {
            RawMessage
          }
          checks
        }
      }
    }
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    totalCount
  }
}

query consoleGetWorkspace($project: ProjectId!, $name: String!) {
  core_getWorkspace(project: $project, name: $name) {
    spec {
      targetNamespace
      projectName
    }
    displayName
    metadata {
      namespace
      name
      annotations
      labels
    }
    updateTime
  }
}

mutation consoleCreateWorkspace($env: WorkspaceIn!) {
  core_createWorkspace(env: $env) {
    id
  }
}

query consoleListWorkspaces($project: ProjectId!, $search: SearchWorkspaces, $pagination: CursorPaginationIn) {
  core_listWorkspaces(project: $project, search: $search, pq: $pagination) {
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    totalCount
    edges {
      node {
        metadata {
          name
          namespace
          labels
          annotations
        }
        displayName
        clusterName
        updateTime
        spec {
          targetNamespace
          projectName
        }
      }
    }
  }
}

query consoleGetEnvironment($project: ProjectId!, $name: String!) {
  core_getEnvironment(project: $project, name: $name) {
    spec {
      targetNamespace
      projectName
    }
    updateTime
    displayName
    metadata {
      namespace
      name
      annotations
      labels
    }
  }
}

mutation consoleCreateEnvironment($env: WorkspaceIn!) {
  core_createEnvironment(env: $env) {
    id
  }
}

query consoleListEnvironments($project: ProjectId!, $search: SearchWorkspaces, $pagination: CursorPaginationIn) {
  core_listEnvironments(project: $project, search: $search, pq: $pagination) {
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    totalCount
    edges {
      node {
        metadata {
          name
          namespace
          labels
          annotations
        }
        displayName
        clusterName
        updateTime
        spec {
          targetNamespace
          projectName
        }
      }
    }
  }
}

query consoleListApps($project: ProjectId!, $scope: WorkspaceOrEnvId!, $search: SearchApps, $pagination: CursorPaginationIn) {
  core_listApps(
    project: $project
    scope: $scope
    search: $search
    pq: $pagination
  ) {
    totalCount
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    edges {
      cursor
      node {
        spec {
          displayName
        }
        clusterName
        metadata {
          namespace
          name
          labels
          annotations
        }
      }
    }
  }
}

query consoleListRouters($project: ProjectId!, $scope: WorkspaceOrEnvId!, $search: SearchRouters, $pq: CursorPaginationIn) {
  core_listRouters(project: $project, scope: $scope, search: $search, pq: $pq) {
    edges {
      node {
        metadata {
          name
          namespace
          annotations
          labels
        }
        spec {
          routes {
            app
            lambda
            path
          }
        }
      }
    }
  }
}

mutation consoleUpdateConfig($config: ConfigIn!) {
  core_updateConfig(config: $config) {
    id
  }
}

query consoleGetConfig($project: ProjectId!, $scope: WorkspaceOrEnvId!, $name: String!) {
  core_getConfig(project: $project, scope: $scope, name: $name) {
    data
    updateTime
    displayName
    metadata {
      name
      namespace
      annotations
      labels
    }
  }
}

query consoleListConfigs($project: ProjectId!, $scope: WorkspaceOrEnvId!, $search: SearchConfigs, $pagination: CursorPaginationIn) {
  core_listConfigs(
    project: $project
    scope: $scope
    search: $search
    pq: $pagination
  ) {
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    totalCount
    edges {
      node {
        metadata {
          namespace
          name
          annotations
          labels
        }
        displayName
        updateTime
        data
      }
    }
  }
}

mutation consoleCreateConfig($config: ConfigIn!) {
  core_createConfig(config: $config) {
    id
  }
}

query consoleListSecrets($project: ProjectId!, $scope: WorkspaceOrEnvId!, $pq: CursorPaginationIn, $search: SearchSecrets) {
  core_listSecrets(project: $project, scope: $scope, pq: $pq, search: $search) {
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    totalCount
    edges {
      node {
        metadata {
          namespace
          name
          annotations
          labels
        }
        updateTime
        stringData
      }
    }
  }
}

mutation consoleCreateSecret($secret: SecretIn!) {
  core_createSecret(secret: $secret) {
    id
  }
}

query consoleGetSecret($project: ProjectId!, $scope: WorkspaceOrEnvId!, $name: String!) {
  core_getSecret(project: $project, scope: $scope, name: $name) {
    stringData
    updateTime
    displayName
    metadata {
      name
      namespace
      annotations
      labels
    }
  }
}