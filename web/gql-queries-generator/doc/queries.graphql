# This file is auto generated don't modify it manually
# generated by pnpm gql:parse

query consoleAccountCheckNameAvailability($name: String!) {
  accounts_checkNameAvailability(name: $name) {
    result
    suggestedNames
  }
}

query consoleInfraCheckNameAvailability($resType: ResType!, $name: String!, $clusterName: String) {
  infra_checkNameAvailability(
    resType: $resType
    name: $name
    clusterName: $clusterName
  ) {
    suggestedNames
    result
  }
}

query consoleCoreCheckNameAvailability($resType: ConsoleResType!, $name: String!, $namespace: String) {
  core_checkNameAvailability(
    resType: $resType
    name: $name
    namespace: $namespace
  ) {
    result
    suggestedNames
  }
}

query consoleWhoAmI {
  auth_me {
    id
    email
  }
}

mutation consoleCreateAccount($account: AccountIn!) {
  accounts_createAccount(account: $account) {
    displayName
  }
}

query consoleListAccounts {
  accounts_listAccounts {
    id
    metadata {
      name
      annotations
    }
    updateTime
    displayName
  }
}

query consoleGetAccount($accountName: String!) {
  accounts_getAccount(accountName: $accountName) {
    metadata {
      name
      annotations
    }
    updateTime
    contactEmail
    displayName
  }
}

mutation consoleCreateProject($project: ProjectIn!) {
  core_createProject(project: $project) {
    id
  }
}

query consoleGetProject($name: String!) {
  core_getProject(name: $name) {
    id
    displayName
    creationTime
    clusterName
    apiVersion
    kind
    metadata {
      namespace
      name
      labels
      deletionTimestamp
      generation
      creationTimestamp
      annotations
    }
    recordVersion
    spec {
      targetNamespace
      logo
      displayName
      clusterName
      accountName
    }
    status {
      resources {
        name
        kind
        apiVersion
        namespace
      }
      message {
        RawMessage
      }
      lastReconcileTime
      isReady
      checks
    }
    syncStatus {
      syncScheduledAt
      state
      recordVersion
      lastSyncedAt
      error
      action
    }
    updateTime
    accountName
  }
}

query consoleListProjects($clusterName: String, $pagination: CursorPaginationIn, $search: SearchProjects) {
  core_listProjects(clusterName: $clusterName, pq: $pagination, search: $search) {
    totalCount
    edges {
      node {
        id
        displayName
        creationTime
        clusterName
        apiVersion
        kind
        metadata {
          namespace
          name
          labels
          deletionTimestamp
          generation
          creationTimestamp
          annotations
        }
        recordVersion
        spec {
          targetNamespace
          logo
          displayName
          clusterName
          accountName
        }
        status {
          resources {
            name
            kind
            apiVersion
            namespace
          }
          message {
            RawMessage
          }
          lastReconcileTime
          isReady
          checks
        }
        syncStatus {
          syncScheduledAt
          state
          recordVersion
          lastSyncedAt
          error
          action
        }
        updateTime
        accountName
      }
    }
    pageInfo {
      startCursor
      hasNextPage
      endCursor
      hasPreviousPage
    }
  }
}

mutation consoleCreateCluster($cluster: ClusterIn!) {
  infra_createCluster(cluster: $cluster) {
    id
  }
}

query consoleClustersCount {
  infra_listClusters {
    totalCount
  }
}

query consoleListClusters($search: SearchCluster, $pagination: CursorPaginationIn) {
  infra_listClusters(search: $search, pagination: $pagination) {
    totalCount
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    edges {
      cursor
      node {
        displayName
        metadata {
          name
          annotations
        }
        updateTime
        syncStatus {
          syncScheduledAt
          lastSyncedAt
          recordVersion
          state
          error
          action
        }
        status {
          resources {
            namespace
            name
            kind
            apiVersion
          }
          message {
            RawMessage
          }
          lastReconcileTime
          isReady
          checks
        }
        recordVersion
        spec {
          vpc
          region
          credentialsRef {
            namespace
            name
          }
          cloudProvider
          availabilityMode
        }
      }
    }
  }
}

query consoleGetCluster($name: String!) {
  infra_getCluster(name: $name) {
    displayName
    metadata {
      name
      annotations
    }
    updateTime
    syncStatus {
      syncScheduledAt
      lastSyncedAt
      recordVersion
      state
      error
      action
    }
    status {
      resources {
        namespace
        name
        kind
        apiVersion
      }
      message {
        RawMessage
      }
      lastReconcileTime
      isReady
      checks
    }
    recordVersion
    spec {
      vpc
      region
      credentialsRef {
        namespace
        name
      }
      cloudProvider
      availabilityMode
    }
  }
}

query consoleListProviderSecrets($pagination: CursorPaginationIn, $search: SearchProviderSecret) {
  infra_listProviderSecrets(pagination: $pagination, search: $search) {
    edges {
      node {
        accountName
        apiVersion
        cloudProviderName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        data
        displayName
        enabled
        id
        kind
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        recordVersion
        status {
          checks
          isReady
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        stringData
        type
        updateTime
      }
      cursor
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleCreateProviderSecret($secret: CloudProviderSecretIn!) {
  infra_createProviderSecret(secret: $secret) {
    metadata {
      name
    }
  }
}

mutation consoleUpdateProviderSecret($secret: CloudProviderSecretIn!) {
  infra_updateProviderSecret(secret: $secret) {
    id
  }
}

mutation consoleDeleteProviderSecret($secretName: String!) {
  infra_deleteProviderSecret(secretName: $secretName)
}

query consoleGetProviderSecret($name: String!) {
  infra_getProviderSecret(name: $name) {
    enabled
    stringData
    metadata {
      annotations
      name
    }
    cloudProviderName
    status {
      resources {
        namespace
        name
        kind
        apiVersion
      }
      message {
        RawMessage
      }
      lastReconcileTime
      isReady
      checks
    }
    creationTime
    updateTime
  }
}

query consoleGetNodePool($clusterName: String!, $poolName: String!) {
  infra_getNodePool(clusterName: $clusterName, poolName: $poolName) {
    updateTime
    spec {
      targetCount
      minCount
      maxCount
      awsNodeConfig {
        vpc
        spotSpecs {
          memMin
          memMax
          cpuMin
          cpuMax
        }
        region
        provisionMode
        onDemandSpecs {
          instanceType
        }
        isGpu
        imageId
      }
    }
    metadata {
      name
      annotations
    }
    clusterName
    status {
      isReady
      message {
        RawMessage
      }
      checks
    }
  }
}

mutation consoleCreateNodePool($clusterName: String!, $pool: NodePoolIn!) {
  infra_createNodePool(clusterName: $clusterName, pool: $pool) {
    id
  }
}

query consoleListNodePools($clusterName: String!, $pagination: CursorPaginationIn, $search: SearchNodepool) {
  infra_listNodePools(
    clusterName: $clusterName
    pagination: $pagination
    search: $search
  ) {
    edges {
      node {
        updateTime
        spec {
          targetCount
          minCount
          maxCount
          awsNodeConfig {
            vpc
            spotSpecs {
              memMin
              memMax
              cpuMin
              cpuMax
            }
            region
            provisionMode
            onDemandSpecs {
              instanceType
            }
            isGpu
            imageId
          }
        }
        metadata {
          name
          annotations
        }
        clusterName
        status {
          isReady
          message {
            RawMessage
          }
          checks
        }
      }
    }
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    totalCount
  }
}

query consoleGetWorkspace($project: ProjectId!, $name: String!) {
  core_getWorkspace(project: $project, name: $name) {
    metadata {
      name
      namespace
      labels
      annotations
    }
    displayName
    clusterName
    updateTime
    spec {
      targetNamespace
      projectName
    }
  }
}

mutation consoleCreateWorkspace($env: WorkspaceIn!) {
  core_createWorkspace(env: $env) {
    id
  }
}

mutation consoleUpdateWorkspace($env: WorkspaceIn!) {
  core_updateWorkspace(env: $env) {
    id
  }
}

query consoleListWorkspaces($project: ProjectId!, $search: SearchWorkspaces, $pagination: CursorPaginationIn) {
  core_listWorkspaces(project: $project, search: $search, pq: $pagination) {
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    totalCount
    edges {
      node {
        metadata {
          name
          namespace
          labels
          annotations
        }
        displayName
        clusterName
        updateTime
        creationTime
        spec {
          targetNamespace
          projectName
        }
        createdBy {
          userEmail
          userId
          userName
        }
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
      }
    }
  }
}

query consoleGetEnvironment($project: ProjectId!, $name: String!) {
  core_getEnvironment(project: $project, name: $name) {
    metadata {
      name
      namespace
      labels
      annotations
    }
    displayName
    clusterName
    updateTime
    spec {
      targetNamespace
      projectName
    }
  }
}

mutation consoleCreateEnvironment($env: WorkspaceIn!) {
  core_createEnvironment(env: $env) {
    id
  }
}

mutation consoleUpdateEnvironment($env: WorkspaceIn!) {
  core_updateEnvironment(env: $env) {
    id
  }
}

query consoleListEnvironments($project: ProjectId!, $search: SearchWorkspaces, $pagination: CursorPaginationIn) {
  core_listEnvironments(project: $project, search: $search, pq: $pagination) {
    edges {
      cursor
      node {
        accountName
        apiVersion
        clusterName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        id
        kind
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        projectName
        recordVersion
        spec {
          isEnvironment
          projectName
          targetNamespace
        }
        status {
          checks
          isReady
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleCreateApp($app: AppIn!) {
  core_createApp(app: $app) {
    id
  }
}

mutation consoleUpdateApp($app: AppIn!) {
  core_updateApp(app: $app) {
    id
  }
}

query consoleGetApp($project: ProjectId!, $scope: WorkspaceOrEnvId!, $name: String!) {
  core_getApp(project: $project, scope: $scope, name: $name) {
    creationTime
    accountName
    displayName
    createdBy {
      userName
      userId
      userEmail
    }
    lastUpdatedBy {
      userName
      userId
      userEmail
    }
    markedForDeletion
    metadata {
      name
      namespace
      annotations
    }
    updateTime
    spec {
      tolerations {
        value
        tolerationSeconds
        operator
        key
        effect
      }
      services {
        type
        targetPort
        port
        name
      }
      serviceAccount
      replicas
      region
      nodeSelector
      intercept {
        enabled
        toDevice
      }
      hpa {
        maxReplicas
        enabled
        minReplicas
        thresholdCpu
        thresholdMemory
      }
      freeze
      displayName
      containers {
        args
        command
        env {
          refName
          refKey
          optional
          key
          type
          value
        }
        envFrom {
          type
          refName
        }
        image
        imagePullPolicy
        livenessProbe {
          type
          tcp {
            port
          }
          shell {
            command
          }
          interval
          initialDelay
          httpGet {
            httpHeaders
            path
            port
          }
          failureThreshold
        }
        name
        readinessProbe {
          type
          tcp {
            port
          }
          shell {
            command
          }
          interval
          initialDelay
          httpGet {
            httpHeaders
            path
            port
          }
          failureThreshold
        }
        resourceCpu {
          min
          max
        }
        resourceMemory {
          min
          max
        }
        volumes {
          type
          refName
          mountPath
          items {
            fileName
            key
          }
        }
      }
    }
    status {
      resources {
        namespace
        name
        kind
        apiVersion
      }
      message {
        RawMessage
      }
      lastReconcileTime
      isReady
      checks
    }
    syncStatus {
      syncScheduledAt
      state
      recordVersion
      lastSyncedAt
      error
      action
    }
  }
}

query consoleListApps($project: ProjectId!, $scope: WorkspaceOrEnvId!, $search: SearchApps, $pagination: CursorPaginationIn) {
  core_listApps(
    project: $project
    scope: $scope
    search: $search
    pq: $pagination
  ) {
    totalCount
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    edges {
      cursor
      node {
        creationTime
        displayName
        createdBy {
          userName
          userId
          userEmail
        }
        lastUpdatedBy {
          userName
          userId
          userEmail
        }
        markedForDeletion
        metadata {
          name
        }
        updateTime
        spec {
          freeze
          displayName
        }
        status {
          resources {
            namespace
            name
            kind
            apiVersion
          }
          message {
            RawMessage
          }
          lastReconcileTime
          isReady
          checks
        }
        syncStatus {
          syncScheduledAt
          state
          recordVersion
          lastSyncedAt
          error
          action
        }
      }
    }
  }
}

query consoleListRouters($project: ProjectId!, $scope: WorkspaceOrEnvId!, $search: SearchRouters, $pq: CursorPaginationIn) {
  core_listRouters(project: $project, scope: $scope, search: $search, pq: $pq) {
    edges {
      cursor
      node {
        metadata {
          name
          namespace
          annotations
          labels
        }
        spec {
          routes {
            app
            lambda
            path
          }
        }
      }
    }
  }
}

mutation consoleUpdateConfig($config: ConfigIn!) {
  core_updateConfig(config: $config) {
    id
  }
}

query consoleGetConfig($project: ProjectId!, $scope: WorkspaceOrEnvId!, $name: String!) {
  core_getConfig(project: $project, scope: $scope, name: $name) {
    metadata {
      namespace
      name
      annotations
      labels
    }
    displayName
    updateTime
    data
  }
}

query consoleListConfigs($project: ProjectId!, $scope: WorkspaceOrEnvId!, $search: SearchConfigs, $pagination: CursorPaginationIn) {
  core_listConfigs(
    project: $project
    scope: $scope
    search: $search
    pq: $pagination
  ) {
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    totalCount
    edges {
      node {
        metadata {
          namespace
          name
          annotations
          labels
        }
        displayName
        updateTime
        data
      }
    }
  }
}

mutation consoleCreateConfig($config: ConfigIn!) {
  core_createConfig(config: $config) {
    id
  }
}

query consoleListSecrets($project: ProjectId!, $scope: WorkspaceOrEnvId!, $pq: CursorPaginationIn, $search: SearchSecrets) {
  core_listSecrets(project: $project, scope: $scope, pq: $pq, search: $search) {
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    totalCount
    edges {
      node {
        stringData
        updateTime
        displayName
        metadata {
          name
          namespace
          annotations
          labels
        }
      }
    }
  }
}

mutation consoleCreateSecret($secret: SecretIn!) {
  core_createSecret(secret: $secret) {
    id
  }
}

query consoleGetSecret($project: ProjectId!, $scope: WorkspaceOrEnvId!, $name: String!) {
  core_getSecret(project: $project, scope: $scope, name: $name) {
    stringData
    updateTime
    displayName
    metadata {
      name
      namespace
      annotations
      labels
    }
  }
}

mutation consoleUpdateSecret($secret: SecretIn!) {
  core_updateSecret(secret: $secret) {
    id
  }
}

mutation consoleCreateVpnDevice($vpnDevice: VPNDeviceIn!) {
  core_createVPNDevice(vpnDevice: $vpnDevice) {
    id
  }
}

mutation consoleUpdateVpnDevice($vpnDevice: VPNDeviceIn!) {
  core_updateVPNDevice(vpnDevice: $vpnDevice) {
    id
  }
}

query consoleListVpnDevices($search: SearchVPNDevices, $pq: CursorPaginationIn) {
  core_listVPNDevices(search: $search, pq: $pq) {
    edges {
      cursor
      node {
        metadata {
          name
        }
        clusterName
        displayName
        spec {
          serverName
          ports {
            port
            targetPort
          }
          offset
        }
        createdBy {
          userId
          userName
          userEmail
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

query consoleGetVpnDevice($name: String!) {
  core_getVPNDevice(name: $name) {
    updateTime
    spec {
      serverName
      ports {
        port
        targetPort
      }
      offset
    }
    clusterName
    displayName
    metadata {
      name
    }
  }
}

query consoleListInvitationsForAccount($accountName: String!) {
  accounts_listInvitations(accountName: $accountName) {
    accepted
    accountName
    creationTime
    id
    inviteToken
    invitedBy
    markedForDeletion
    recordVersion
    rejected
    updateTime
    userEmail
    userName
    userRole
  }
}

query consoleListMembershipsForAccount($accountName: String!) {
  accounts_listMembershipsForAccount(accountName: $accountName) {
    user {
      verified
      name
      joined
      email
    }
    role
  }
}

mutation consoleDeleteAccountInvitation($accountName: String!, $invitationId: String!) {
  accounts_deleteInvitation(
    accountName: $accountName
    invitationId: $invitationId
  )
}

mutation consoleInviteMemberForAccount($accountName: String!, $invitation: InvitationIn!) {
  accounts_inviteMember(accountName: $accountName, invitation: $invitation) {
    id
  }
}

mutation consoleUpdateAccountMembership($accountName: String!, $memberId: ID!, $role: Kloudlite_io__apps__iam__types_Role!) {
  accounts_updateAccountMembership(
    accountName: $accountName
    memberId: $memberId
    role: $role
  )
}

query consoleGetTemplate($category: String!, $name: String!) {
  core_getManagedServiceTemplate(category: $category, name: $name) {
    active
    apiVersion
    description
    displayName
    fields {
      defaultValue
      inputType
      label
      max
      min
      name
      required
      unit
    }
    kind
    logoUrl
    name
    outputs {
      description
      label
      name
    }
    resources {
      apiVersion
      description
      displayName
      fields {
        defaultValue
        inputType
        label
        max
        min
        name
        required
        unit
      }
      kind
      name
      outputs {
        description
        label
        name
      }
    }
  }
}

query consoleListTemplates {
  core_listManagedServiceTemplates {
    category
    displayName
    items {
      description
      active
      displayName
      fields {
        defaultValue
        inputType
        label
        max
        min
        name
        required
        unit
      }
      logoUrl
      name
      outputs {
        name
        label
        description
      }
      resources {
        description
        displayName
        fields {
          defaultValue
          inputType
          label
          max
          min
          name
          required
          unit
        }
        name
        outputs {
          description
          label
          name
        }
        kind
        apiVersion
      }
      kind
      apiVersion
    }
  }
}

query consoleGetManagedService($project: ProjectId!, $scope: WorkspaceOrEnvId!, $name: String!) {
  core_getManagedService(project: $project, scope: $scope, name: $name) {
    accountName
    apiVersion
    clusterName
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    enabled
    id
    kind
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    recordVersion
    spec {
      inputs
      msvcKind {
        apiVersion
        kind
      }
      nodeSelector
      region
      tolerations {
        effect
        key
        operator
        tolerationSeconds
        value
      }
    }
    status {
      checks
      isReady
      lastReconcileTime
      message {
        RawMessage
      }
      resources {
        apiVersion
        kind
        name
        namespace
      }
    }
    syncStatus {
      action
      error
      lastSyncedAt
      recordVersion
      state
      syncScheduledAt
    }
    updateTime
  }
}

query consoleListManagedServices($project: ProjectId!, $scope: WorkspaceOrEnvId!) {
  core_listManagedServices(project: $project, scope: $scope) {
    edges {
      cursor
      node {
        accountName
        apiVersion
        clusterName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        enabled
        id
        kind
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        recordVersion
        spec {
          inputs
          msvcKind {
            apiVersion
            kind
          }
          nodeSelector
          region
          tolerations {
            effect
            key
            operator
            tolerationSeconds
            value
          }
        }
        status {
          checks
          isReady
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleCreateManagedService($msvc: ManagedServiceIn!) {
  core_createManagedService(msvc: $msvc) {
    id
  }
}

query consoleGetManagedResource($project: ProjectId!, $scope: WorkspaceOrEnvId!, $name: String!) {
  core_getManagedResource(project: $project, scope: $scope, name: $name) {
    accountName
    apiVersion
    clusterName
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    enabled
    id
    kind
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    recordVersion
    spec {
      inputs
      mresKind {
        kind
      }
      msvcRef {
        apiVersion
        kind
        name
      }
    }
    status {
      checks
      isReady
      lastReconcileTime
      message {
        RawMessage
      }
      resources {
        apiVersion
        kind
        name
        namespace
      }
    }
    syncStatus {
      action
      error
      lastSyncedAt
      recordVersion
      state
      syncScheduledAt
    }
    updateTime
  }
}

query consoleListManagedResource($project: ProjectId!, $scope: WorkspaceOrEnvId!) {
  core_listManagedResources(project: $project, scope: $scope) {
    edges {
      cursor
      node {
        accountName
        apiVersion
        clusterName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        enabled
        id
        kind
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        recordVersion
        spec {
          inputs
          mresKind {
            kind
          }
          msvcRef {
            apiVersion
            kind
            name
          }
        }
        status {
          checks
          isReady
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleCreateManagedResource($mres: ManagedResourceIn!) {
  core_createManagedResource(mres: $mres) {
    id
  }
}

mutation authRequestResetPassword($email: String!) {
  auth_requestResetPassword(email: $email)
}

mutation authResetPassword($token: String!, $password: String!) {
  auth_resetPassword(token: $token, password: $password)
}

mutation authOauthLogin($code: String!, $provider: String!, $state: String) {
  oAuth_login(code: $code, provider: $provider, state: $state) {
    id
  }
}

mutation authVerifyEmail($token: String!) {
  auth_verifyEmail(token: $token) {
    id
  }
}

query authLoginPageInitUrls {
  githubLoginUrl: oAuth_requestLogin(provider: "github")
  gitlabLoginUrl: oAuth_requestLogin(provider: "gitlab")
  googleLoginUrl: oAuth_requestLogin(provider: "google")
}

mutation authLogin($email: String!, $password: String!) {
  auth_login(email: $email, password: $password) {
    id
  }
}

mutation authLogout {
  auth_logout
}

mutation authSignUpWithEmail($name: String!, $password: String!, $email: String!) {
  auth_signup(name: $name, password: $password, email: $email) {
    id
  }
}

query authWhoAmI {
  auth_me {
    id
    email
    verified
  }
}

query libWhoAmI {
  auth_me {
    verified
    name
    id
    email
  }
}