# This file is auto generated don't modify it manually
# generated by pnpm gql:parse

query consoleAccountCheckNameAvailability($name: String!) {
  accounts_checkNameAvailability(name: $name) {
    result
    suggestedNames
  }
}

query consoleCrCheckNameAvailability($name: String!) {
  cr_checkUserNameAvailability(name: $name) {
    result
    suggestedNames
  }
}

query consoleInfraCheckNameAvailability($resType: ResType!, $name: String!, $clusterName: String) {
  infra_checkNameAvailability(
    resType: $resType
    name: $name
    clusterName: $clusterName
  ) {
    suggestedNames
    result
  }
}

query consoleCoreCheckNameAvailability($resType: ConsoleResType!, $name: String!, $envName: String) {
  core_checkNameAvailability(resType: $resType, name: $name, envName: $envName) {
    result
  }
}

query consoleWhoAmI {
  auth_me {
    id
    email
    providerGitlab
    providerGithub
    providerGoogle
  }
}

mutation consoleCreateAccount($account: AccountIn!) {
  accounts_createAccount(account: $account) {
    displayName
  }
}

query consoleListAccounts {
  accounts_listAccounts {
    id
    metadata {
      name
      annotations
    }
    updateTime
    displayName
  }
}

mutation consoleUpdateAccount($account: AccountIn!) {
  accounts_updateAccount(account: $account) {
    id
  }
}

query consoleGetAccount($accountName: String!) {
  accounts_getAccount(accountName: $accountName) {
    metadata {
      name
      annotations
    }
    targetNamespace
    updateTime
    contactEmail
    displayName
  }
}

mutation consoleDeleteAccount($accountName: String!) {
  accounts_deleteAccount(accountName: $accountName)
}

query consoleListDnsHosts {
  infra_listClusters {
    edges {
      node {
        metadata {
          name
          namespace
        }
        spec {
          publicDNSHost
        }
      }
    }
  }
}

mutation consoleCreateCluster($cluster: ClusterIn!) {
  infra_createCluster(cluster: $cluster) {
    id
  }
}

mutation consoleDeleteCluster($name: String!) {
  infra_deleteCluster(name: $name)
}

query consoleClustersCount {
  infra_listClusters {
    totalCount
  }
}

query consoleListAllClusters($search: SearchCluster, $pagination: CursorPaginationIn) {
  byok_clusters: infra_listBYOKClusters(search: $search, pagination: $pagination) {
    edges {
      cursor
      node {
        accountName
        clusterPublicEndpoint
        clusterSvcCIDR
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        globalVPN
        id
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        recordVersion
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
  clusters: infra_listClusters(search: $search, pagination: $pagination) {
    totalCount
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    edges {
      cursor
      node {
        id
        displayName
        markedForDeletion
        metadata {
          name
          annotations
          generation
        }
        creationTime
        lastUpdatedBy {
          userId
          userName
          userEmail
        }
        createdBy {
          userEmail
          userId
          userName
        }
        updateTime
        status {
          checks
          checkList {
            description
            debug
            name
            title
          }
          isReady
          lastReadyGeneration
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        recordVersion
        spec {
          messageQueueTopicName
          kloudliteRelease
          clusterTokenRef {
            key
            name
            namespace
          }
          accountId
          accountName
          availabilityMode
          aws {
            k3sMasters {
              iamInstanceProfileRole
              instanceType
              nodes
              nvidiaGpuEnabled
              rootVolumeSize
              rootVolumeType
            }
            nodePools
            region
            spotNodePools
          }
          gcp {
            credentialsRef {
              name
              namespace
            }
            gcpProjectID
            region
          }
          cloudProvider
          backupToS3Enabled
          cloudflareEnabled
          clusterInternalDnsHost
          clusterServiceCIDR
          output {
            keyK3sAgentJoinToken
            keyK3sServerJoinToken
            keyKubeconfig
            secretName
          }
          publicDNSHost
          taintMasterNodes
        }
      }
    }
  }
}

query consoleListClusters($search: SearchCluster, $pagination: CursorPaginationIn) {
  infra_listClusters(search: $search, pagination: $pagination) {
    totalCount
    pageInfo {
      startCursor
      hasPreviousPage
      hasNextPage
      endCursor
    }
    edges {
      cursor
      node {
        id
        displayName
        markedForDeletion
        metadata {
          name
          annotations
          generation
        }
        creationTime
        lastUpdatedBy {
          userId
          userName
          userEmail
        }
        createdBy {
          userEmail
          userId
          userName
        }
        updateTime
        status {
          checks
          checkList {
            description
            debug
            name
            title
          }
          isReady
          lastReadyGeneration
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        recordVersion
        spec {
          messageQueueTopicName
          kloudliteRelease
          clusterTokenRef {
            key
            name
            namespace
          }
          accountId
          accountName
          availabilityMode
          aws {
            k3sMasters {
              iamInstanceProfileRole
              instanceType
              nodes
              nvidiaGpuEnabled
              rootVolumeSize
              rootVolumeType
            }
            nodePools
            region
            spotNodePools
          }
          gcp {
            credentialsRef {
              name
              namespace
            }
            gcpProjectID
            region
          }
          cloudProvider
          backupToS3Enabled
          cloudflareEnabled
          clusterInternalDnsHost
          output {
            keyK3sAgentJoinToken
            keyK3sServerJoinToken
            keyKubeconfig
            secretName
          }
          publicDNSHost
          taintMasterNodes
        }
      }
    }
  }
}

query consoleGetCluster($name: String!) {
  infra_getCluster(name: $name) {
    accountName
    apiVersion
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    id
    kind
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    recordVersion
    spec {
      accountId
      accountName
      availabilityMode
      aws {
        k3sMasters {
          iamInstanceProfileRole
          instanceType
          nodes
          nvidiaGpuEnabled
          rootVolumeSize
          rootVolumeType
        }
        nodePools
        region
        spotNodePools
      }
      backupToS3Enabled
      cloudflareEnabled
      cloudProvider
      clusterInternalDnsHost
      clusterTokenRef {
        key
        name
        namespace
      }
      kloudliteRelease
      messageQueueTopicName
      output {
        keyK3sAgentJoinToken
        keyK3sServerJoinToken
        keyKubeconfig
        secretName
      }
      publicDNSHost
      taintMasterNodes
    }
    status {
      checks
      checkList {
        description
        debug
        name
        title
      }
      isReady
      lastReadyGeneration
      lastReconcileTime
      message {
        RawMessage
      }
      resources {
        apiVersion
        kind
        name
        namespace
      }
    }
    syncStatus {
      error
      lastSyncedAt
      recordVersion
      syncScheduledAt
    }
    updateTime
  }
}

query consoleGetKubeConfig($name: String!) {
  infra_getCluster(name: $name) {
    adminKubeconfig {
      encoding
      value
    }
  }
}

mutation consoleUpdateCluster($cluster: ClusterIn!) {
  infra_updateCluster(cluster: $cluster) {
    id
  }
}

query consoleCheckAwsAccess($cloudproviderName: String!) {
  infra_checkAwsAccess(cloudproviderName: $cloudproviderName) {
    result
    installationUrl
  }
}

query consoleListProviderSecrets($search: SearchProviderSecret, $pagination: CursorPaginationIn) {
  infra_listProviderSecrets(search: $search, pagination: $pagination) {
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
    edges {
      cursor
      node {
        cloudProviderName
        createdBy {
          userEmail
          userId
          userName
        }
        aws {
          authMechanism
        }
        creationTime
        gcp {
          serviceAccountJSON
        }
        displayName
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        metadata {
          namespace
          name
          labels
          annotations
        }
        updateTime
      }
    }
  }
}

mutation consoleCreateProviderSecret($secret: CloudProviderSecretIn!) {
  infra_createProviderSecret(secret: $secret) {
    metadata {
      name
    }
  }
}

mutation consoleUpdateProviderSecret($secret: CloudProviderSecretIn!) {
  infra_updateProviderSecret(secret: $secret) {
    id
  }
}

mutation consoleDeleteProviderSecret($secretName: String!) {
  infra_deleteProviderSecret(secretName: $secretName)
}

query consoleGetProviderSecret($name: String!) {
  infra_getProviderSecret(name: $name) {
    cloudProviderName
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    metadata {
      namespace
      name
      labels
    }
    updateTime
  }
}

query consoleGetNodePool($clusterName: String!, $poolName: String!) {
  infra_getNodePool(clusterName: $clusterName, poolName: $poolName) {
    id
    clusterName
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    kind
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    spec {
      gcp {
        availabilityZone
        machineType
        poolType
      }
      aws {
        availabilityZone
        ec2Pool {
          instanceType
          nodes
        }
        iamInstanceProfileRole
        nvidiaGpuEnabled
        poolType
        rootVolumeSize
        rootVolumeType
        spotPool {
          cpuNode {
            memoryPerVcpu {
              max
              min
            }
            vcpu {
              max
              min
            }
          }
          gpuNode {
            instanceTypes
          }
          nodes
          spotFleetTaggingRoleName
        }
      }
      cloudProvider
      maxCount
      minCount
      nodeLabels
    }
    status {
      checks
      isReady
      lastReadyGeneration
      lastReconcileTime
      message {
        RawMessage
      }
      resources {
        apiVersion
        kind
        name
        namespace
      }
    }
    updateTime
  }
}

mutation consoleCreateNodePool($clusterName: String!, $pool: NodePoolIn!) {
  infra_createNodePool(clusterName: $clusterName, pool: $pool) {
    id
  }
}

mutation consoleUpdateNodePool($clusterName: String!, $pool: NodePoolIn!) {
  infra_updateNodePool(clusterName: $clusterName, pool: $pool) {
    id
  }
}

query consoleListNodePools($clusterName: String!, $search: SearchNodepool, $pagination: CursorPaginationIn) {
  infra_listNodePools(
    clusterName: $clusterName
    search: $search
    pagination: $pagination
  ) {
    edges {
      cursor
      node {
        id
        clusterName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          generation
          name
          namespace
        }
        recordVersion
        spec {
          gcp {
            availabilityZone
            machineType
            poolType
          }
          aws {
            availabilityZone
            ec2Pool {
              instanceType
              nodes
            }
            nvidiaGpuEnabled
            poolType
            spotPool {
              cpuNode {
                memoryPerVcpu {
                  max
                  min
                }
                vcpu {
                  max
                  min
                }
              }
              gpuNode {
                instanceTypes
              }
              nodes
              spotFleetTaggingRoleName
            }
          }
          cloudProvider
          maxCount
          minCount
          nodeLabels
        }
        status {
          checks
          isReady
          lastReadyGeneration
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleDeleteNodePool($clusterName: String!, $poolName: String!) {
  infra_deleteNodePool(clusterName: $clusterName, poolName: $poolName)
}

query consoleGetEnvironment($name: String!) {
  core_getEnvironment(name: $name) {
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    clusterName
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    clusterName
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    spec {
      routing {
        mode
        privateIngressClass
        publicIngressClass
      }
      targetNamespace
    }
    status {
      checks
      checkList {
        description
        debug
        name
        title
      }
      isReady
      lastReadyGeneration
      lastReconcileTime
      message {
        RawMessage
      }
      resources {
        apiVersion
        kind
        name
        namespace
      }
    }
    updateTime
  }
}

mutation consoleCreateEnvironment($env: EnvironmentIn!) {
  core_createEnvironment(env: $env) {
    id
  }
}

mutation consoleUpdateEnvironment($env: EnvironmentIn!) {
  core_updateEnvironment(env: $env) {
    id
  }
}

mutation consoleDeleteEnvironment($envName: String!) {
  core_deleteEnvironment(envName: $envName)
}

query consoleListEnvironments($search: SearchEnvironments, $pq: CursorPaginationIn) {
  core_listEnvironments(search: $search, pq: $pq) {
    edges {
      cursor
      node {
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        clusterName
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          generation
          name
          namespace
        }
        recordVersion
        spec {
          routing {
            mode
            privateIngressClass
            publicIngressClass
          }
          targetNamespace
        }
        status {
          checks
          checkList {
            description
            debug
            name
            title
          }
          isReady
          lastReadyGeneration
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleCloneEnvironment($sourceEnvName: String!, $destinationEnvName: String!, $displayName: String!, $environmentRoutingMode: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingMode!) {
  core_cloneEnvironment(
    sourceEnvName: $sourceEnvName
    destinationEnvName: $destinationEnvName
    displayName: $displayName
    environmentRoutingMode: $environmentRoutingMode
  ) {
    id
  }
}

query consoleRestartApp($envName: String!, $appName: String!) {
  core_restartApp(envName: $envName, appName: $appName)
}

mutation consoleCreateApp($envName: String!, $app: AppIn!) {
  core_createApp(envName: $envName, app: $app) {
    id
  }
}

mutation consoleUpdateApp($envName: String!, $app: AppIn!) {
  core_updateApp(envName: $envName, app: $app) {
    id
  }
}

mutation consoleInterceptApp($portMappings: [Github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappingsIn!], $intercept: Boolean!, $deviceName: String!, $appname: String!, $envName: String!) {
  core_interceptApp(
    portMappings: $portMappings
    intercept: $intercept
    deviceName: $deviceName
    appname: $appname
    envName: $envName
  )
}

mutation consoleDeleteApp($envName: String!, $appName: String!) {
  core_deleteApp(envName: $envName, appName: $appName)
}

query consoleGetApp($envName: String!, $name: String!) {
  core_getApp(envName: $envName, name: $name) {
    id
    recordVersion
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    enabled
    environmentName
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    metadata {
      annotations
      name
      namespace
    }
    spec {
      containers {
        args
        command
        env {
          key
          optional
          refKey
          refName
          type
          value
        }
        envFrom {
          refName
          type
        }
        image
        imagePullPolicy
        livenessProbe {
          failureThreshold
          httpGet {
            httpHeaders
            path
            port
          }
          initialDelay
          interval
          shell {
            command
          }
          tcp {
            port
          }
          type
        }
        name
        readinessProbe {
          failureThreshold
          initialDelay
          interval
          type
        }
        resourceCpu {
          max
          min
        }
        resourceMemory {
          max
          min
        }
        volumes {
          items {
            fileName
            key
          }
          mountPath
          refName
          type
        }
      }
      displayName
      freeze
      hpa {
        enabled
        maxReplicas
        minReplicas
        thresholdCpu
        thresholdMemory
      }
      intercept {
        enabled
        toDevice
        portMappings {
          devicePort
          appPort
        }
      }
      nodeSelector
      region
      replicas
      serviceAccount
      services {
        port
      }
      tolerations {
        effect
        key
        operator
        tolerationSeconds
        value
      }
    }
    status {
      checkList {
        description
        debug
        title
        name
      }
      checks
      isReady
      lastReadyGeneration
      lastReconcileTime
      message {
        RawMessage
      }
      resources {
        apiVersion
        kind
        name
        namespace
      }
    }
    ciBuildId
    updateTime
    build {
      id
      buildClusterName
      name
      source {
        branch
        provider
        repository
      }
      spec {
        buildOptions {
          buildArgs
          buildContexts
          contextDir
          dockerfileContent
          dockerfilePath
          targetPlatforms
        }
        registry {
          repo {
            name
            tags
          }
        }
        resource {
          cpu
          memoryInMb
        }
      }
    }
  }
}

query consoleListApps($envName: String!, $search: SearchApps, $pq: CursorPaginationIn) {
  core_listApps(envName: $envName, search: $search, pq: $pq) {
    edges {
      cursor
      node {
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        enabled
        environmentName
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          generation
          name
          namespace
        }
        recordVersion
        spec {
          containers {
            args
            command
            env {
              key
              optional
              refKey
              refName
              type
              value
            }
            envFrom {
              refName
              type
            }
            image
            imagePullPolicy
            name
            readinessProbe {
              failureThreshold
              initialDelay
              interval
              type
            }
            resourceCpu {
              max
              min
            }
            resourceMemory {
              max
              min
            }
          }
          displayName
          freeze
          hpa {
            enabled
            maxReplicas
            minReplicas
            thresholdCpu
            thresholdMemory
          }
          intercept {
            enabled
            toDevice
            portMappings {
              devicePort
              appPort
            }
          }
          nodeSelector
          region
          replicas
          serviceAccount
          services {
            port
          }
          tolerations {
            effect
            key
            operator
            tolerationSeconds
            value
          }
        }
        status {
          checks
          isReady
          lastReadyGeneration
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
          checkList {
            description
            debug
            title
            name
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleCreateRouter($envName: String!, $router: RouterIn!) {
  core_createRouter(envName: $envName, router: $router) {
    id
  }
}

mutation consoleUpdateRouter($envName: String!, $router: RouterIn!) {
  core_updateRouter(envName: $envName, router: $router) {
    id
  }
}

mutation consoleDeleteRouter($envName: String!, $routerName: String!) {
  core_deleteRouter(envName: $envName, routerName: $routerName)
}

query consoleListRouters($envName: String!, $search: SearchRouters, $pq: CursorPaginationIn) {
  core_listRouters(envName: $envName, search: $search, pq: $pq) {
    edges {
      cursor
      node {
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        enabled
        environmentName
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          generation
          name
          namespace
        }
        recordVersion
        spec {
          backendProtocol
          basicAuth {
            enabled
            secretName
            username
          }
          cors {
            allowCredentials
            enabled
            origins
          }
          domains
          https {
            clusterIssuer
            enabled
            forceRedirect
          }
          ingressClass
          maxBodySizeInMB
          rateLimit {
            connections
            enabled
            rpm
            rps
          }
          routes {
            app
            path
            port
            rewrite
          }
        }
        status {
          checks
          checkList {
            description
            debug
            name
            title
          }
          isReady
          lastReadyGeneration
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

query consoleGetRouter($envName: String!, $name: String!) {
  core_getRouter(envName: $envName, name: $name) {
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    enabled
    environmentName
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    metadata {
      name
      namespace
    }
    spec {
      backendProtocol
      basicAuth {
        enabled
        secretName
        username
      }
      cors {
        allowCredentials
        enabled
        origins
      }
      domains
      https {
        clusterIssuer
        enabled
        forceRedirect
      }
      ingressClass
      maxBodySizeInMB
      rateLimit {
        connections
        enabled
        rpm
        rps
      }
      routes {
        app
        path
        port
        rewrite
      }
    }
    status {
      checks
      checkList {
        description
        debug
        name
        title
      }
      isReady
    }
    updateTime
  }
}

mutation consoleUpdateConfig($envName: String!, $config: ConfigIn!) {
  core_updateConfig(envName: $envName, config: $config) {
    id
  }
}

mutation consoleDeleteConfig($envName: String!, $configName: String!) {
  core_deleteConfig(envName: $envName, configName: $configName)
}

query consoleGetConfig($envName: String!, $name: String!) {
  core_getConfig(envName: $envName, name: $name) {
    binaryData
    data
    displayName
    environmentName
    immutable
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
  }
}

query consoleListConfigs($envName: String!, $search: SearchConfigs, $pq: CursorPaginationIn) {
  core_listConfigs(envName: $envName, search: $search, pq: $pq) {
    edges {
      cursor
      node {
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        data
        environmentName
        immutable
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleCreateConfig($envName: String!, $config: ConfigIn!) {
  core_createConfig(envName: $envName, config: $config) {
    id
  }
}

query consoleListSecrets($envName: String!, $search: SearchSecrets, $pq: CursorPaginationIn) {
  core_listSecrets(envName: $envName, search: $search, pq: $pq) {
    edges {
      cursor
      node {
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        stringData
        environmentName
        isReadyOnly
        immutable
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        type
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleCreateSecret($envName: String!, $secret: SecretIn!) {
  core_createSecret(envName: $envName, secret: $secret) {
    id
  }
}

query consoleGetSecret($envName: String!, $name: String!) {
  core_getSecret(envName: $envName, name: $name) {
    data
    displayName
    environmentName
    immutable
    markedForDeletion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    stringData
    type
  }
}

mutation consoleUpdateSecret($envName: String!, $secret: SecretIn!) {
  core_updateSecret(envName: $envName, secret: $secret) {
    id
  }
}

mutation consoleDeleteSecret($envName: String!, $secretName: String!) {
  core_deleteSecret(envName: $envName, secretName: $secretName)
}

query consoleListInvitationsForAccount($accountName: String!) {
  accounts_listInvitations(accountName: $accountName) {
    accepted
    accountName
    creationTime
    id
    inviteToken
    invitedBy
    markedForDeletion
    recordVersion
    rejected
    updateTime
    userEmail
    userName
    userRole
  }
}

query consoleListMembershipsForAccount($accountName: String!) {
  accounts_listMembershipsForAccount(accountName: $accountName) {
    user {
      verified
      name
      joined
      email
    }
    role
  }
}

mutation consoleDeleteAccountInvitation($accountName: String!, $invitationId: String!) {
  accounts_deleteInvitation(
    accountName: $accountName
    invitationId: $invitationId
  )
}

mutation consoleInviteMembersForAccount($accountName: String!, $invitations: [InvitationIn!]!) {
  accounts_inviteMembers(accountName: $accountName, invitations: $invitations) {
    id
  }
}

query consoleListInvitationsForUser($onlyPending: Boolean!) {
  accounts_listInvitationsForUser(onlyPending: $onlyPending) {
    accountName
    id
    updateTime
    inviteToken
  }
}

mutation consoleAcceptInvitation($accountName: String!, $inviteToken: String!) {
  accounts_acceptInvitation(accountName: $accountName, inviteToken: $inviteToken)
}

mutation consoleRejectInvitation($accountName: String!, $inviteToken: String!) {
  accounts_rejectInvitation(accountName: $accountName, inviteToken: $inviteToken)
}

mutation consoleUpdateAccountMembership($accountName: String!, $memberId: ID!, $role: Github__com___kloudlite___api___apps___iam___types__Role!) {
  accounts_updateAccountMembership(
    accountName: $accountName
    memberId: $memberId
    role: $role
  )
}

mutation consoleDeleteAccountMembership($accountName: String!, $memberId: ID!) {
  accounts_removeAccountMembership(accountName: $accountName, memberId: $memberId)
}

query consoleGetCredToken($username: String!) {
  cr_getCredToken(username: $username)
}

query consoleListCred($search: SearchCreds, $pagination: CursorPaginationIn) {
  cr_listCreds(search: $search, pagination: $pagination) {
    edges {
      cursor
      node {
        access
        accountName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        expiration {
          unit
          value
        }
        id
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        name
        recordVersion
        updateTime
        username
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleCreateCred($credential: CredentialIn!) {
  cr_createCred(credential: $credential) {
    id
  }
}

mutation consoleDeleteCred($username: String!) {
  cr_deleteCred(username: $username)
}

query consoleListRepo($search: SearchRepos, $pagination: CursorPaginationIn) {
  cr_listRepos(search: $search, pagination: $pagination) {
    edges {
      cursor
      node {
        accountName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        id
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        name
        recordVersion
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleCreateRepo($repository: RepositoryIn!) {
  cr_createRepo(repository: $repository) {
    id
  }
}

mutation consoleDeleteRepo($name: String!) {
  cr_deleteRepo(name: $name)
}

query consoleListDigest($repoName: String!, $search: SearchRepos, $pagination: CursorPaginationIn) {
  cr_listDigests(repoName: $repoName, search: $search, pagination: $pagination) {
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
    edges {
      cursor
      node {
        url
        updateTime
        tags
        size
        repository
        digest
        creationTime
      }
    }
  }
}

mutation consoleDeleteDigest($repoName: String!, $digest: String!) {
  cr_deleteDigest(repoName: $repoName, digest: $digest)
}

query consoleGetGitConnections($state: String) {
  auth_me {
    providerGitlab
    providerGithub
    providerGoogle
  }
  githubLoginUrl: oAuth_requestLogin(provider: "github", state: $state)
  gitlabLoginUrl: oAuth_requestLogin(provider: "gitlab", state: $state)
}

query consoleGetLogins {
  auth_me {
    providerGithub
    providerGitlab
  }
}

query consoleLoginUrls {
  githubLoginUrl: oAuth_requestLogin(
    provider: "github"
    state: "redirect:add-provider"
  )
  gitlabLoginUrl: oAuth_requestLogin(
    provider: "gitlab"
    state: "redirect:add-provider"
  )
}

query consoleListGithubRepos($installationId: Int!, $pagination: PaginationIn) {
  cr_listGithubRepos(installationId: $installationId, pagination: $pagination) {
    repositories {
      cloneUrl
      defaultBranch
      fullName
      private
      updatedAt
    }
    totalCount
  }
}

query consoleListGithubInstalltions($pagination: PaginationIn) {
  cr_listGithubInstallations(pagination: $pagination) {
    account {
      avatarUrl
      id
      login
      nodeId
      type
    }
    appId
    id
    nodeId
    repositoriesUrl
    targetId
    targetType
  }
}

query consoleListGithubBranches($repoUrl: String!, $pagination: PaginationIn) {
  cr_listGithubBranches(repoUrl: $repoUrl, pagination: $pagination) {
    name
  }
}

query consoleSearchGithubRepos($organization: String!, $search: String!, $pagination: PaginationIn) {
  cr_searchGithubRepos(
    organization: $organization
    search: $search
    pagination: $pagination
  ) {
    repositories {
      cloneUrl
      defaultBranch
      fullName
      private
      updatedAt
    }
  }
}

query consoleListGitlabGroups($query: String, $pagination: PaginationIn) {
  cr_listGitlabGroups(query: $query, pagination: $pagination) {
    fullName
    id
  }
}

query consoleListGitlabRepos($query: String, $pagination: PaginationIn, $groupId: String!) {
  cr_listGitlabRepositories(
    query: $query
    pagination: $pagination
    groupId: $groupId
  ) {
    createdAt
    name
    id
    public
    httpUrlToRepo
  }
}

query consoleListGitlabBranches($repoId: String!, $query: String, $pagination: PaginationIn) {
  cr_listGitlabBranches(repoId: $repoId, query: $query, pagination: $pagination) {
    name
    protected
  }
}

query consoleGetDomain($domainName: String!) {
  infra_getDomainEntry(domainName: $domainName) {
    updateTime
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    id
    domainName
    displayName
    creationTime
    createdBy {
      userEmail
      userId
      userName
    }
    clusterName
  }
}

mutation consoleCreateDomain($domainEntry: DomainEntryIn!) {
  infra_createDomainEntry(domainEntry: $domainEntry) {
    id
  }
}

mutation consoleUpdateDomain($domainEntry: DomainEntryIn!) {
  infra_updateDomainEntry(domainEntry: $domainEntry) {
    id
  }
}

mutation consoleDeleteDomain($domainName: String!) {
  infra_deleteDomainEntry(domainName: $domainName)
}

query consoleListDomains($search: SearchDomainEntry, $pagination: CursorPaginationIn) {
  infra_listDomainEntries(search: $search, pagination: $pagination) {
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
    edges {
      cursor
      node {
        updateTime
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        id
        domainName
        displayName
        creationTime
        createdBy {
          userEmail
          userId
          userName
        }
      }
    }
  }
}

query consoleListBuilds($repoName: String!, $search: SearchBuilds, $pagination: CursorPaginationIn) {
  cr_listBuilds(repoName: $repoName, search: $search, pagination: $pagination) {
    edges {
      cursor
      node {
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        buildClusterName
        credUser {
          userEmail
          userId
          userName
        }
        errorMessages
        id
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        name
        source {
          branch
          provider
          repository
          webhookId
        }
        spec {
          buildOptions {
            buildArgs
            buildContexts
            contextDir
            dockerfileContent
            dockerfilePath
            targetPlatforms
          }
          registry {
            repo {
              name
              tags
            }
          }
          resource {
            cpu
            memoryInMb
          }
          caches {
            name
            path
          }
        }
        status
        updateTime
        latestBuildRun {
          recordVersion
          status {
            checkList {
              debug
              description
              name
              title
            }
            checks
            isReady
            lastReadyGeneration
            lastReconcileTime
            message {
              RawMessage
            }
            resources {
              apiVersion
              kind
              name
              namespace
            }
          }
          syncStatus {
            action
            error
            lastSyncedAt
            recordVersion
            state
            syncScheduledAt
          }
          markedForDeletion
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleCreateBuild($build: BuildIn!) {
  cr_addBuild(build: $build) {
    id
  }
}

mutation consoleUpdateBuild($crUpdateBuildId: ID!, $build: BuildIn!) {
  cr_updateBuild(id: $crUpdateBuildId, build: $build) {
    id
  }
}

mutation consoleDeleteBuild($crDeleteBuildId: ID!) {
  cr_deleteBuild(id: $crDeleteBuildId)
}

mutation consoleTriggerBuild($crTriggerBuildId: ID!) {
  cr_triggerBuild(id: $crTriggerBuildId)
}

query consoleGetPvc($clusterName: String!, $name: String!) {
  infra_getPVC(clusterName: $clusterName, name: $name) {
    clusterName
    creationTime
    markedForDeletion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    spec {
      accessModes
      dataSource {
        apiGroup
        kind
        name
      }
      dataSourceRef {
        apiGroup
        kind
        name
        namespace
      }
      resources {
        claims {
          name
        }
        limits
        requests
      }
      selector {
        matchExpressions {
          key
          operator
          values
        }
        matchLabels
      }
      storageClassName
      volumeMode
      volumeName
    }
    status {
      accessModes
      allocatedResources
      capacity
      conditions {
        lastProbeTime
        lastTransitionTime
        message
        reason
        status
        type
      }
      phase
    }
    updateTime
  }
}

query consoleListPvcs($clusterName: String!, $search: SearchPersistentVolumeClaims, $pq: CursorPaginationIn) {
  infra_listPVCs(clusterName: $clusterName, search: $search, pq: $pq) {
    edges {
      cursor
      node {
        creationTime
        id
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        spec {
          accessModes
          dataSource {
            apiGroup
            kind
            name
          }
          dataSourceRef {
            apiGroup
            kind
            name
            namespace
          }
          resources {
            claims {
              name
            }
            limits
            requests
          }
          selector {
            matchExpressions {
              key
              operator
              values
            }
            matchLabels
          }
          storageClassName
          volumeMode
          volumeName
        }
        status {
          accessModes
          allocatedResources
          capacity
          conditions {
            lastProbeTime
            lastTransitionTime
            message
            reason
            status
            type
          }
          phase
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

query consoleGetPv($clusterName: String!, $name: String!) {
  infra_getPV(clusterName: $clusterName, name: $name) {
    clusterName
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    recordVersion
    spec {
      accessModes
      awsElasticBlockStore {
        fsType
        partition
        readOnly
        volumeID
      }
      azureDisk {
        cachingMode
        diskName
        diskURI
        fsType
        kind
        readOnly
      }
      azureFile {
        readOnly
        secretName
        secretNamespace
        shareName
      }
      capacity
      cephfs {
        monitors
        path
        readOnly
        secretFile
        secretRef {
          name
          namespace
        }
        user
      }
      cinder {
        fsType
        readOnly
        volumeID
      }
      claimRef {
        apiVersion
        fieldPath
        kind
        name
        namespace
        resourceVersion
        uid
      }
      csi {
        controllerExpandSecretRef {
          name
          namespace
        }
        controllerPublishSecretRef {
          name
          namespace
        }
        driver
        fsType
        nodeExpandSecretRef {
          name
          namespace
        }
        nodePublishSecretRef {
          name
          namespace
        }
        nodeStageSecretRef {
          name
          namespace
        }
        readOnly
        volumeAttributes
        volumeHandle
      }
      fc {
        fsType
        lun
        readOnly
        targetWWNs
        wwids
      }
      flexVolume {
        driver
        fsType
        options
        readOnly
      }
      flocker {
        datasetName
        datasetUUID
      }
      gcePersistentDisk {
        fsType
        partition
        pdName
        readOnly
      }
      glusterfs {
        endpoints
        endpointsNamespace
        path
        readOnly
      }
      hostPath {
        path
        type
      }
      iscsi {
        chapAuthDiscovery
        chapAuthSession
        fsType
        initiatorName
        iqn
        iscsiInterface
        lun
        portals
        readOnly
        targetPortal
      }
      local {
        fsType
        path
      }
      mountOptions
      nfs {
        path
        readOnly
        server
      }
      nodeAffinity {
        required {
          nodeSelectorTerms {
            matchExpressions {
              key
              operator
              values
            }
            matchFields {
              key
              operator
              values
            }
          }
        }
      }
      persistentVolumeReclaimPolicy
      photonPersistentDisk {
        fsType
        pdID
      }
      portworxVolume {
        fsType
        readOnly
        volumeID
      }
      quobyte {
        group
        readOnly
        registry
        tenant
        user
        volume
      }
      rbd {
        fsType
        image
        keyring
        monitors
        pool
        readOnly
        user
      }
      scaleIO {
        fsType
        gateway
        protectionDomain
        readOnly
        sslEnabled
        storageMode
        storagePool
        system
        volumeName
      }
      storageClassName
      storageos {
        fsType
        readOnly
        secretRef {
          apiVersion
          fieldPath
          kind
          name
          namespace
          resourceVersion
          uid
        }
        volumeName
        volumeNamespace
      }
      volumeMode
      vsphereVolume {
        fsType
        storagePolicyID
        storagePolicyName
        volumePath
      }
    }
    status {
      lastPhaseTransitionTime
      message
      phase
      reason
    }
    updateTime
  }
}

query consoleListPvs($clusterName: String!, $search: SearchPersistentVolumes, $pq: CursorPaginationIn) {
  infra_listPVs(clusterName: $clusterName, search: $search, pq: $pq) {
    edges {
      cursor
      node {
        clusterName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        recordVersion
        spec {
          accessModes
          awsElasticBlockStore {
            fsType
            partition
            readOnly
            volumeID
          }
          azureDisk {
            cachingMode
            diskName
            diskURI
            fsType
            kind
            readOnly
          }
          azureFile {
            readOnly
            secretName
            secretNamespace
            shareName
          }
          capacity
          cephfs {
            monitors
            path
            readOnly
            secretFile
            secretRef {
              name
              namespace
            }
            user
          }
          cinder {
            fsType
            readOnly
            volumeID
          }
          claimRef {
            apiVersion
            fieldPath
            kind
            name
            namespace
            resourceVersion
            uid
          }
          csi {
            controllerExpandSecretRef {
              name
              namespace
            }
            controllerPublishSecretRef {
              name
              namespace
            }
            driver
            fsType
            nodeExpandSecretRef {
              name
              namespace
            }
            nodePublishSecretRef {
              name
              namespace
            }
            nodeStageSecretRef {
              name
              namespace
            }
            readOnly
            volumeAttributes
            volumeHandle
          }
          fc {
            fsType
            lun
            readOnly
            targetWWNs
            wwids
          }
          flexVolume {
            driver
            fsType
            options
            readOnly
          }
          flocker {
            datasetName
            datasetUUID
          }
          gcePersistentDisk {
            fsType
            partition
            pdName
            readOnly
          }
          glusterfs {
            endpoints
            endpointsNamespace
            path
            readOnly
          }
          hostPath {
            path
            type
          }
          iscsi {
            chapAuthDiscovery
            chapAuthSession
            fsType
            initiatorName
            iqn
            iscsiInterface
            lun
            portals
            readOnly
            targetPortal
          }
          local {
            fsType
            path
          }
          mountOptions
          nfs {
            path
            readOnly
            server
          }
          persistentVolumeReclaimPolicy
          photonPersistentDisk {
            fsType
            pdID
          }
          portworxVolume {
            fsType
            readOnly
            volumeID
          }
          quobyte {
            group
            readOnly
            registry
            tenant
            user
            volume
          }
          rbd {
            fsType
            image
            keyring
            monitors
            pool
            readOnly
            user
          }
          scaleIO {
            fsType
            gateway
            protectionDomain
            readOnly
            sslEnabled
            storageMode
            storagePool
            system
            volumeName
          }
          storageClassName
          storageos {
            fsType
            readOnly
            secretRef {
              apiVersion
              fieldPath
              kind
              name
              namespace
              resourceVersion
              uid
            }
            volumeName
            volumeNamespace
          }
          volumeMode
          vsphereVolume {
            fsType
            storagePolicyID
            storagePolicyName
            volumePath
          }
        }
        status {
          lastPhaseTransitionTime
          message
          phase
          reason
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleDeletePV($clusterName: String!, $pvName: String!) {
  infra_deletePV(clusterName: $clusterName, pvName: $pvName)
}

query consoleListBuildRuns($search: SearchBuildRuns, $pq: CursorPaginationIn) {
  cr_listBuildRuns(search: $search, pq: $pq) {
    edges {
      cursor
      node {
        id
        clusterName
        creationTime
        markedForDeletion
        recordVersion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        spec {
          accountName
          buildOptions {
            buildArgs
            buildContexts
            contextDir
            dockerfileContent
            dockerfilePath
            targetPlatforms
          }
          registry {
            repo {
              name
              tags
            }
          }
          resource {
            cpu
            memoryInMb
          }
        }
        status {
          checks
          checkList {
            description
            debug
            name
            title
          }
          isReady
          lastReadyGeneration
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

query consoleGetBuildRun($buildId: ID!, $buildRunName: String!) {
  cr_getBuildRun(buildID: $buildId, buildRunName: $buildRunName) {
    clusterName
    creationTime
    markedForDeletion
    recordVersion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    spec {
      accountName
      buildOptions {
        buildArgs
        buildContexts
        contextDir
        dockerfileContent
        dockerfilePath
        targetPlatforms
      }
      registry {
        repo {
          name
          tags
        }
      }
      resource {
        cpu
        memoryInMb
      }
    }
    status {
      checks
      checkList {
        description
        debug
        name
        title
      }
      isReady
      lastReadyGeneration
      lastReconcileTime
      message {
        RawMessage
      }
      resources {
        apiVersion
        kind
        name
        namespace
      }
    }
    syncStatus {
      action
      error
      lastSyncedAt
      recordVersion
      state
      syncScheduledAt
    }
    updateTime
  }
}

query consoleGetClusterMSv($name: String!) {
  infra_getClusterManagedService(name: $name) {
    clusterName
    creationTime
    displayName
    id
    kind
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    recordVersion
    spec {
      msvcSpec {
        nodeSelector
        serviceTemplate {
          apiVersion
          kind
          spec
        }
        tolerations {
          effect
          key
          operator
          tolerationSeconds
          value
        }
      }
      targetNamespace
    }
    updateTime
  }
}

mutation consoleCreateClusterMSv($service: ClusterManagedServiceIn!) {
  infra_createClusterManagedService(service: $service) {
    id
  }
}

mutation consoleUpdateClusterMSv($service: ClusterManagedServiceIn!) {
  infra_updateClusterManagedService(service: $service) {
    id
  }
}

query consoleListClusterMSvs($pagination: CursorPaginationIn, $search: SearchClusterManagedService) {
  infra_listClusterManagedServices(pagination: $pagination, search: $search) {
    edges {
      cursor
      node {
        accountName
        apiVersion
        clusterName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        id
        kind
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        recordVersion
        spec {
          msvcSpec {
            nodeSelector
            serviceTemplate {
              apiVersion
              kind
              spec
            }
            tolerations {
              effect
              key
              operator
              tolerationSeconds
              value
            }
          }
          targetNamespace
        }
        status {
          checkList {
            debug
            description
            hide
            name
            title
          }
          checks
          isReady
          lastReadyGeneration
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleDeleteClusterMSv($name: String!) {
  infra_deleteClusterManagedService(name: $name)
}

mutation consoleDeleteByokCluster($name: String!) {
  infra_deleteBYOKCluster(name: $name)
}

mutation consoleCreateBYOKCluster($cluster: BYOKClusterIn!) {
  infra_createBYOKCluster(cluster: $cluster) {
    id
  }
}

mutation consoleUpdateByokCluster($clusterName: String!, $displayName: String!) {
  infra_updateBYOKCluster(clusterName: $clusterName, displayName: $displayName) {
    id
  }
}

query consoleGetBYOKClusterInstructions($name: String!) {
  infrat_getBYOKClusterSetupInstructions(name: $name)
}

query consoleGetByokCluster($name: String!) {
  infra_getBYOKCluster(name: $name) {
    accountName
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    id
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    recordVersion
    syncStatus {
      action
      error
      lastSyncedAt
      recordVersion
      state
      syncScheduledAt
    }
    updateTime
    clusterPublicEndpoint
    clusterSvcCIDR
    globalVPN
  }
}

query consoleListByokClusters($search: SearchCluster, $pagination: CursorPaginationIn) {
  infra_listBYOKClusters(search: $search, pagination: $pagination) {
    edges {
      cursor
      node {
        accountName
        clusterPublicEndpoint
        clusterSvcCIDR
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        globalVPN
        id
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        recordVersion
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

query consoleGetMSvTemplate($category: String!, $name: String!) {
  infra_getManagedServiceTemplate(category: $category, name: $name) {
    active
    apiVersion
    description
    displayName
    fields {
      defaultValue
      inputType
      label
      max
      min
      name
      required
      unit
      displayUnit
      multiplier
    }
    kind
    logoUrl
    name
    outputs {
      description
      label
      name
    }
    resources {
      apiVersion
      description
      displayName
      kind
      name
      fields {
        defaultValue
        displayUnit
        inputType
        label
        max
        min
        multiplier
        name
        required
        unit
      }
    }
  }
}

query consoleListMSvTemplates {
  infra_listManagedServiceTemplates {
    category
    displayName
    items {
      active
      apiVersion
      description
      displayName
      fields {
        defaultValue
        inputType
        label
        max
        min
        name
        required
        unit
        displayUnit
        multiplier
      }
      kind
      logoUrl
      name
      outputs {
        description
        label
        name
      }
      resources {
        apiVersion
        description
        displayName
        kind
        name
        fields {
          defaultValue
          displayUnit
          inputType
          label
          max
          min
          multiplier
          name
          required
          unit
        }
      }
    }
  }
}

query consoleGetManagedResource($envName: String!, $name: String!) {
  core_getManagedResource(envName: $envName, name: $name) {
    displayName
    enabled
    environmentName
    markedForDeletion
    metadata {
      name
      namespace
    }
    spec {
      resourceTemplate {
        apiVersion
        kind
        msvcRef {
          apiVersion
          kind
          name
          namespace
        }
        spec
      }
    }
    updateTime
  }
}

mutation consoleCreateManagedResource($envName: String!, $mres: ManagedResourceIn!) {
  core_createManagedResource(envName: $envName, mres: $mres) {
    id
  }
}

mutation consoleUpdateManagedResource($envName: String!, $mres: ManagedResourceIn!) {
  core_updateManagedResource(envName: $envName, mres: $mres) {
    id
  }
}

query consoleListManagedResources($envName: String!, $search: SearchManagedResources, $pq: CursorPaginationIn) {
  core_listManagedResources(envName: $envName, search: $search, pq: $pq) {
    edges {
      cursor
      node {
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        recordVersion
        spec {
          resourceTemplate {
            apiVersion
            kind
            msvcRef {
              apiVersion
              kind
              name
              namespace
              clusterName
            }
            spec
          }
        }
        status {
          checks
          checkList {
            description
            debug
            name
            title
          }
          isReady
          lastReadyGeneration
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        syncedOutputSecretRef {
          metadata {
            name
            namespace
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleDeleteManagedResource($envName: String!, $mresName: String!) {
  core_deleteManagedResource(envName: $envName, mresName: $mresName)
}

query consoleGetHelmChart($clusterName: String!, $name: String!) {
  infra_getHelmRelease(clusterName: $clusterName, name: $name) {
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    metadata {
      name
      namespace
    }
    spec {
      chartName
      chartRepoURL
      chartVersion
      values
    }
    status {
      checks
      checkList {
        description
        debug
        title
        name
      }
      isReady
      lastReadyGeneration
      lastReconcileTime
      message {
        RawMessage
      }
      releaseNotes
      releaseStatus
      resources {
        apiVersion
        kind
        name
        namespace
      }
    }
    updateTime
  }
}

query consoleListHelmChart($clusterName: String!, $search: SearchHelmRelease, $pagination: CursorPaginationIn) {
  infra_listHelmReleases(
    clusterName: $clusterName
    search: $search
    pagination: $pagination
  ) {
    edges {
      cursor
      node {
        clusterName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          generation
          name
          namespace
          annotations
        }
        recordVersion
        spec {
          chartName
          chartRepoURL
          chartVersion
          values
        }
        status {
          checks
          checkList {
            description
            debug
            title
            name
          }
          isReady
          lastReadyGeneration
          lastReconcileTime
          message {
            RawMessage
          }
          releaseNotes
          releaseStatus
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleCreateHelmChart($clusterName: String!, $release: HelmReleaseIn!) {
  infra_createHelmRelease(clusterName: $clusterName, release: $release) {
    id
  }
}

mutation consoleUpdateHelmChart($clusterName: String!, $release: HelmReleaseIn!) {
  infra_updateHelmRelease(clusterName: $clusterName, release: $release) {
    id
  }
}

mutation consoleDeleteHelmChart($clusterName: String!, $releaseName: String!) {
  infra_deleteHelmRelease(clusterName: $clusterName, releaseName: $releaseName)
}

query consoleListNamespaces($clusterName: String!) {
  infra_listNamespaces(clusterName: $clusterName) {
    edges {
      cursor
      node {
        accountName
        apiVersion
        clusterName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        id
        kind
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        recordVersion
        spec {
          finalizers
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleCreateConsoleVpnDevice($vpnDevice: ConsoleVPNDeviceIn!) {
  core_createVPNDevice(vpnDevice: $vpnDevice) {
    id
  }
}

mutation consoleUpdateConsoleVpnDevice($vpnDevice: ConsoleVPNDeviceIn!) {
  core_updateVPNDevice(vpnDevice: $vpnDevice) {
    id
  }
}

query consoleListConsoleVpnDevices($search: CoreSearchVPNDevices, $pq: CursorPaginationIn) {
  core_listVPNDevices(search: $search, pq: $pq) {
    edges {
      cursor
      node {
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        environmentName
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          generation
          name
          namespace
        }
        recordVersion
        status {
          checkList {
            debug
            description
            name
            title
          }
          checks
          isReady
          lastReadyGeneration
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        spec {
          cnameRecords {
            host
            target
          }
          activeNamespace
          disabled
          nodeSelector
          ports {
            port
            targetPort
          }
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

query consoleGetConsoleVpnDevice($name: String!) {
  core_getVPNDevice(name: $name) {
    displayName
    environmentName
    metadata {
      name
      namespace
    }
    recordVersion
    spec {
      cnameRecords {
        host
        target
      }
      activeNamespace
      disabled
      nodeSelector
      ports {
        port
        targetPort
      }
    }
    wireguardConfig {
      encoding
      value
    }
  }
}

query consoleListConsoleVpnDevicesForUser {
  core_listVPNDevicesForUser {
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    environmentName
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    metadata {
      generation
      name
      namespace
    }
    recordVersion
    status {
      checkList {
        debug
        description
        name
        title
      }
      checks
      isReady
      lastReadyGeneration
      lastReconcileTime
      message {
        RawMessage
      }
      resources {
        apiVersion
        kind
        name
        namespace
      }
    }
    syncStatus {
      action
      error
      lastSyncedAt
      recordVersion
      state
      syncScheduledAt
    }
    spec {
      cnameRecords {
        host
        target
      }
      activeNamespace
      disabled
      nodeSelector
      ports {
        port
        targetPort
      }
    }
    updateTime
  }
}

mutation consoleDeleteConsoleVpnDevice($deviceName: String!) {
  core_deleteVPNDevice(deviceName: $deviceName)
}

mutation consoleCreateImagePullSecret($pullSecret: ImagePullSecretIn!) {
  core_createImagePullSecret(pullSecret: $pullSecret) {
    id
  }
}

mutation consoleUpdateImagePullSecret($pullSecret: ImagePullSecretIn!) {
  core_updateImagePullSecret(pullSecret: $pullSecret) {
    id
  }
}

mutation consoleDeleteImagePullSecrets($name: String!) {
  core_deleteImagePullSecret(name: $name)
}

query consoleListImagePullSecrets($search: SearchImagePullSecrets, $pq: CursorPaginationIn) {
  core_listImagePullSecrets(search: $search, pq: $pq) {
    edges {
      cursor
      node {
        accountName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        dockerConfigJson
        format
        id
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        recordVersion
        registryPassword
        registryURL
        registryUsername
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation consoleDeleteGlobalVpnDevice($gvpn: String!, $deviceName: String!) {
  infra_deleteGlobalVPNDevice(gvpn: $gvpn, deviceName: $deviceName)
}

mutation consoleCreateGlobalVpnDevice($gvpnDevice: GlobalVPNDeviceIn!) {
  infra_createGlobalVPNDevice(gvpnDevice: $gvpnDevice) {
    id
  }
}

mutation consoleUpdateGlobalVpnDevice($gvpnDevice: GlobalVPNDeviceIn!) {
  infra_updateGlobalVPNDevice(gvpnDevice: $gvpnDevice) {
    id
  }
}

query consoleGetGlobalVpnDevice($gvpn: String!, $deviceName: String!) {
  infra_getGlobalVPNDevice(gvpn: $gvpn, deviceName: $deviceName) {
    accountName
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    globalVPNName
    id
    ipAddr
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    privateKey
    publicKey
    recordVersion
    updateTime
    wireguardConfig {
      value
      encoding
    }
  }
}

query consoleListGlobalVpnDevices($gvpn: String!, $search: SearchGlobalVPNDevices, $pagination: CursorPaginationIn) {
  infra_listGlobalVPNDevices(
    gvpn: $gvpn
    search: $search
    pagination: $pagination
  ) {
    edges {
      cursor
      node {
        accountName
        createdBy {
          userEmail
          userId
          userName
        }
        creationMethod
        creationTime
        displayName
        globalVPNName
        id
        ipAddr
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        privateKey
        publicKey
        recordVersion
        updateTime
        wireguardConfig {
          value
          encoding
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

query iotconsoleAccountCheckNameAvailability($name: String!) {
  accounts_checkNameAvailability(name: $name) {
    result
    suggestedNames
  }
}

query iotconsoleCrCheckNameAvailability($name: String!) {
  cr_checkUserNameAvailability(name: $name) {
    result
    suggestedNames
  }
}

query iotconsoleInfraCheckNameAvailability($resType: ResType!, $name: String!, $clusterName: String) {
  infra_checkNameAvailability(
    resType: $resType
    name: $name
    clusterName: $clusterName
  ) {
    suggestedNames
    result
  }
}

query iotconsoleCoreCheckNameAvailability($resType: ConsoleResType!, $name: String!, $projectName: String, $envName: String) {
  core_checkNameAvailability(resType: $resType, name: $name, envName: $envName) {
    result
  }
}

query iotconsoleWhoAmI {
  auth_me {
    id
    email
    providerGitlab
    providerGithub
    providerGoogle
  }
}

mutation iotconsoleCreateAccount($account: AccountIn!) {
  accounts_createAccount(account: $account) {
    displayName
  }
}

query iotconsoleListAccounts {
  accounts_listAccounts {
    id
    metadata {
      name
      annotations
    }
    updateTime
    displayName
  }
}

mutation iotconsoleUpdateAccount($account: AccountIn!) {
  accounts_updateAccount(account: $account) {
    id
  }
}

query iotconsoleGetAccount($accountName: String!) {
  accounts_getAccount(accountName: $accountName) {
    metadata {
      name
      annotations
    }
    targetNamespace
    updateTime
    contactEmail
    displayName
  }
}

mutation iotconsoleDeleteAccount($accountName: String!) {
  accounts_deleteAccount(accountName: $accountName)
}

mutation iotconsoleDeleteIotProject($name: String!) {
  iot_deleteProject(name: $name)
}

mutation iotconsoleCreateIotProject($project: IOTProjectIn!) {
  iot_createProject(project: $project) {
    id
  }
}

mutation iotconsoleUpdateIotProject($project: IOTProjectIn!) {
  iot_updateProject(project: $project) {
    id
  }
}

query iotconsoleGetIotProject($name: String!) {
  iot_getProject(name: $name) {
    accountName
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    id
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    name
    recordVersion
    updateTime
  }
}

query iotconsoleListIotProjects($search: SearchIOTProjects, $pq: CursorPaginationIn) {
  iot_listProjects(search: $search, pq: $pq) {
    edges {
      node {
        displayName
        name
        creationTime
        markedForDeletion
        updateTime
        createdBy {
          userEmail
          userName
          userId
        }
        lastUpdatedBy {
          userEmail
          userName
          userId
        }
      }
      cursor
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation iotconsoleDeleteIotDeviceBlueprint($projectName: String!, $name: String!) {
  iot_deleteDeviceBlueprint(projectName: $projectName, name: $name)
}

mutation iotconsoleCreateIotDeviceBlueprint($deviceBlueprint: IOTDeviceBlueprintIn!, $projectName: String!) {
  iot_createDeviceBlueprint(
    projectName: $projectName
    deviceBlueprint: $deviceBlueprint
  ) {
    id
  }
}

mutation iotconsoleUpdateIotDeviceBlueprint($deviceBlueprint: IOTDeviceBlueprintIn!, $projectName: String!) {
  iot_updateDeviceBlueprint(
    projectName: $projectName
    deviceBlueprint: $deviceBlueprint
  ) {
    id
  }
}

query iotconsoleGetIotDeviceBlueprint($projectName: String!, $name: String!) {
  iot_getDeviceBlueprint(projectName: $projectName, name: $name) {
    accountName
    bluePrintType
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    id
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    name
    recordVersion
    updateTime
    version
  }
}

query iotconsoleListIotDeviceBlueprints($search: SearchIOTDeviceBlueprints, $pq: CursorPaginationIn, $projectName: String!) {
  iot_listDeviceBlueprints(projectName: $projectName, search: $search, pq: $pq) {
    edges {
      cursor
      node {
        accountName
        bluePrintType
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        id
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        name
        recordVersion
        updateTime
        version
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation iotconsoleDeleteIotDeployment($projectName: String!, $name: String!) {
  iot_deleteDeployment(projectName: $projectName, name: $name)
}

mutation iotconsoleCreateIotDeployment($projectName: String!, $deployment: IOTDeploymentIn!) {
  iot_createDeployment(projectName: $projectName, deployment: $deployment) {
    id
  }
}

mutation iotconsoleUpdateIotDeployment($projectName: String!, $deployment: IOTDeploymentIn!) {
  iot_updateDeployment(projectName: $projectName, deployment: $deployment) {
    id
  }
}

query iotconsoleGetIotDeployment($projectName: String!, $name: String!) {
  iot_getDeployment(projectName: $projectName, name: $name) {
    accountName
    CIDR
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    displayName
    exposedServices {
      ip
      name
    }
    id
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    name
    recordVersion
    updateTime
  }
}

query iotconsoleListIotDeployments($search: SearchIOTDeployments, $pq: CursorPaginationIn, $projectName: String!) {
  iot_listDeployments(projectName: $projectName, search: $search, pq: $pq) {
    edges {
      cursor
      node {
        accountName
        CIDR
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        exposedServices {
          ip
          name
        }
        id
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        name
        recordVersion
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation iotconsoleDeleteIotApp($projectName: String!, $deviceBlueprintName: String!, $name: String!) {
  iot_deleteApp(
    projectName: $projectName
    deviceBlueprintName: $deviceBlueprintName
    name: $name
  )
}

mutation iotconsoleCreateIotApp($deviceBlueprintName: String!, $app: IOTAppIn!, $projectName: String!) {
  iot_createApp(
    projectName: $projectName
    deviceBlueprintName: $deviceBlueprintName
    app: $app
  ) {
    id
  }
}

mutation iotconsoleUpdateIotApp($projectName: String!, $deviceBlueprintName: String!, $app: IOTAppIn!) {
  iot_updateApp(
    projectName: $projectName
    deviceBlueprintName: $deviceBlueprintName
    app: $app
  ) {
    id
  }
}

query iotconsoleGetIotApp($projectName: String!, $deviceBlueprintName: String!, $name: String!) {
  iot_getApp(
    projectName: $projectName
    deviceBlueprintName: $deviceBlueprintName
    name: $name
  ) {
    accountName
    apiVersion
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    deviceBlueprintName
    displayName
    enabled
    id
    kind
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    metadata {
      annotations
      labels
      name
      namespace
    }
    recordVersion
    spec {
      containers {
        args
        command
        env {
          key
          optional
          refKey
          refName
          type
          value
        }
        envFrom {
          refName
          type
        }
        image
        imagePullPolicy
        livenessProbe {
          failureThreshold
          httpGet {
            httpHeaders
            path
            port
          }
          initialDelay
          interval
          shell {
            command
          }
          tcp {
            port
          }
          type
        }
        name
        readinessProbe {
          failureThreshold
          initialDelay
          interval
          type
        }
        resourceCpu {
          max
          min
        }
        resourceMemory {
          max
          min
        }
        volumes {
          items {
            fileName
            key
          }
          mountPath
          refName
          type
        }
      }
      displayName
      freeze
      hpa {
        enabled
        maxReplicas
        minReplicas
        thresholdCpu
        thresholdMemory
      }
      intercept {
        enabled
        toDevice
      }
      nodeSelector
      region
      replicas
      serviceAccount
      services {
        port
      }
      tolerations {
        effect
        key
        operator
        tolerationSeconds
        value
      }
      topologySpreadConstraints {
        labelSelector {
          matchExpressions {
            key
            operator
            values
          }
          matchLabels
        }
        matchLabelKeys
        maxSkew
        minDomains
        nodeAffinityPolicy
        nodeTaintsPolicy
        topologyKey
        whenUnsatisfiable
      }
    }
    status {
      checkList {
        debug
        description
        name
        title
      }
      checks
      isReady
      lastReadyGeneration
      lastReconcileTime
      message {
        RawMessage
      }
      resources {
        apiVersion
        kind
        name
        namespace
      }
    }
    updateTime
  }
}

query iotconsoleListIotApps($deviceBlueprintName: String!, $search: SearchIOTApps, $pq: CursorPaginationIn, $projectName: String!) {
  iot_listApps(
    projectName: $projectName
    deviceBlueprintName: $deviceBlueprintName
    search: $search
    pq: $pq
  ) {
    edges {
      cursor
      node {
        accountName
        apiVersion
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        deviceBlueprintName
        displayName
        enabled
        id
        kind
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          labels
          name
          namespace
        }
        recordVersion
        spec {
          containers {
            args
            command
            env {
              key
              optional
              refKey
              refName
              type
              value
            }
            envFrom {
              refName
              type
            }
            image
            imagePullPolicy
            livenessProbe {
              failureThreshold
              httpGet {
                httpHeaders
                path
                port
              }
              initialDelay
              interval
              shell {
                command
              }
              tcp {
                port
              }
              type
            }
            name
            readinessProbe {
              failureThreshold
              initialDelay
              interval
              type
            }
            resourceCpu {
              max
              min
            }
            resourceMemory {
              max
              min
            }
            volumes {
              items {
                fileName
                key
              }
              mountPath
              refName
              type
            }
          }
          displayName
          freeze
          hpa {
            enabled
            maxReplicas
            minReplicas
            thresholdCpu
            thresholdMemory
          }
          intercept {
            enabled
            toDevice
          }
          nodeSelector
          region
          replicas
          serviceAccount
          services {
            port
          }
          tolerations {
            effect
            key
            operator
            tolerationSeconds
            value
          }
          topologySpreadConstraints {
            labelSelector {
              matchExpressions {
                key
                operator
                values
              }
              matchLabels
            }
            matchLabelKeys
            maxSkew
            minDomains
            nodeAffinityPolicy
            nodeTaintsPolicy
            topologyKey
            whenUnsatisfiable
          }
        }
        status {
          checkList {
            debug
            description
            name
            title
          }
          checks
          isReady
          lastReadyGeneration
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation iotconsoleDeleteIotDevice($projectName: String!, $deploymentName: String!, $name: String!) {
  iot_deleteDevice(
    projectName: $projectName
    deploymentName: $deploymentName
    name: $name
  )
}

mutation iotconsoleCreateIotDevice($deploymentName: String!, $device: IOTDeviceIn!, $projectName: String!) {
  iot_createDevice(
    projectName: $projectName
    deploymentName: $deploymentName
    device: $device
  ) {
    id
  }
}

mutation iotconsoleUpdateIotDevice($deploymentName: String!, $device: IOTDeviceIn!, $projectName: String!) {
  iot_updateDevice(
    projectName: $projectName
    deploymentName: $deploymentName
    device: $device
  ) {
    id
  }
}

query iotconsoleGetIotDevice($projectName: String!, $deploymentName: String!, $name: String!) {
  iot_getDevice(
    projectName: $projectName
    deploymentName: $deploymentName
    name: $name
  ) {
    accountName
    createdBy {
      userEmail
      userId
      userName
    }
    creationTime
    deploymentName
    displayName
    id
    ip
    lastUpdatedBy {
      userEmail
      userId
      userName
    }
    markedForDeletion
    name
    podCIDR
    publicKey
    recordVersion
    serviceCIDR
    updateTime
    version
  }
}

query iotconsoleListIotDevices($deploymentName: String!, $search: SearchIOTDevices, $pq: CursorPaginationIn, $projectName: String!) {
  iot_listDevices(
    projectName: $projectName
    deploymentName: $deploymentName
    search: $search
    pq: $pq
  ) {
    edges {
      cursor
      node {
        accountName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        deploymentName
        displayName
        id
        ip
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        name
        podCIDR
        publicKey
        recordVersion
        serviceCIDR
        updateTime
        version
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

query iotconsoleListRepo($search: SearchRepos, $pagination: CursorPaginationIn) {
  cr_listRepos(search: $search, pagination: $pagination) {
    edges {
      cursor
      node {
        accountName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        id
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        name
        recordVersion
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation iotconsoleCreateRepo($repository: RepositoryIn!) {
  cr_createRepo(repository: $repository) {
    id
  }
}

mutation iotconsoleDeleteRepo($name: String!) {
  cr_deleteRepo(name: $name)
}

query iotconsoleListDigest($repoName: String!, $search: SearchRepos, $pagination: CursorPaginationIn) {
  cr_listDigests(repoName: $repoName, search: $search, pagination: $pagination) {
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
    edges {
      cursor
      node {
        url
        updateTime
        tags
        size
        repository
        digest
        creationTime
      }
    }
  }
}

mutation iotconsoleDeleteDigest($repoName: String!, $digest: String!) {
  cr_deleteDigest(repoName: $repoName, digest: $digest)
}

mutation iotconsoleUpdateConfig($envName: String!, $config: ConfigIn!) {
  core_updateConfig(envName: $envName, config: $config) {
    id
  }
}

mutation iotconsoleDeleteConfig($envName: String!, $configName: String!) {
  core_deleteConfig(envName: $envName, configName: $configName)
}

query iotconsoleGetConfig($envName: String!, $name: String!) {
  core_getConfig(envName: $envName, name: $name) {
    binaryData
    data
    displayName
    environmentName
    immutable
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
  }
}

query iotconsoleListConfigs($envName: String!, $search: SearchConfigs, $pq: CursorPaginationIn) {
  core_listConfigs(envName: $envName, search: $search, pq: $pq) {
    edges {
      cursor
      node {
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        data
        environmentName
        immutable
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation iotconsoleCreateConfig($envName: String!, $config: ConfigIn!) {
  core_createConfig(envName: $envName, config: $config) {
    id
  }
}

query iotconsoleListSecrets($envName: String!, $search: SearchSecrets, $pq: CursorPaginationIn) {
  core_listSecrets(envName: $envName, search: $search, pq: $pq) {
    edges {
      cursor
      node {
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        displayName
        stringData
        environmentName
        isReadyOnly
        immutable
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        type
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation iotconsoleCreateSecret($envName: String!, $secret: SecretIn!) {
  core_createSecret(envName: $envName, secret: $secret) {
    id
  }
}

query iotconsoleGetSecret($envName: String!, $name: String!) {
  core_getSecret(envName: $envName, name: $name) {
    data
    displayName
    environmentName
    immutable
    markedForDeletion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    stringData
    type
  }
}

mutation iotconsoleUpdateSecret($envName: String!, $secret: SecretIn!) {
  core_updateSecret(envName: $envName, secret: $secret) {
    id
  }
}

mutation iotconsoleDeleteSecret($envName: String!, $secretName: String!) {
  core_deleteSecret(envName: $envName, secretName: $secretName)
}

query iotconsoleGetCredToken($username: String!) {
  cr_getCredToken(username: $username)
}

query iotconsoleListCred($search: SearchCreds, $pagination: CursorPaginationIn) {
  cr_listCreds(search: $search, pagination: $pagination) {
    edges {
      cursor
      node {
        access
        accountName
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        expiration {
          unit
          value
        }
        id
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        name
        recordVersion
        updateTime
        username
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation iotconsoleCreateCred($credential: CredentialIn!) {
  cr_createCred(credential: $credential) {
    id
  }
}

mutation iotconsoleDeleteCred($username: String!) {
  cr_deleteCred(username: $username)
}

query iotconsoleGetGitConnections($state: String) {
  auth_me {
    providerGitlab
    providerGithub
    providerGoogle
  }
  githubLoginUrl: oAuth_requestLogin(provider: "github", state: $state)
  gitlabLoginUrl: oAuth_requestLogin(provider: "gitlab", state: $state)
}

query iotconsoleGetLogins {
  auth_me {
    providerGithub
    providerGitlab
  }
}

query iotconsoleLoginUrls {
  githubLoginUrl: oAuth_requestLogin(
    provider: "github"
    state: "redirect:add-provider"
  )
  gitlabLoginUrl: oAuth_requestLogin(
    provider: "gitlab"
    state: "redirect:add-provider"
  )
}

query iotconsoleListGithubRepos($installationId: Int!, $pagination: PaginationIn) {
  cr_listGithubRepos(installationId: $installationId, pagination: $pagination) {
    repositories {
      cloneUrl
      defaultBranch
      fullName
      private
      updatedAt
    }
    totalCount
  }
}

query iotconsoleListGithubInstalltions($pagination: PaginationIn) {
  cr_listGithubInstallations(pagination: $pagination) {
    account {
      avatarUrl
      id
      login
      nodeId
      type
    }
    appId
    id
    nodeId
    repositoriesUrl
    targetId
    targetType
  }
}

query iotconsoleListGithubBranches($repoUrl: String!, $pagination: PaginationIn) {
  cr_listGithubBranches(repoUrl: $repoUrl, pagination: $pagination) {
    name
  }
}

query iotconsoleSearchGithubRepos($organization: String!, $search: String!, $pagination: PaginationIn) {
  cr_searchGithubRepos(
    organization: $organization
    search: $search
    pagination: $pagination
  ) {
    repositories {
      cloneUrl
      defaultBranch
      fullName
      private
      updatedAt
    }
  }
}

query iotconsoleListGitlabGroups($query: String, $pagination: PaginationIn) {
  cr_listGitlabGroups(query: $query, pagination: $pagination) {
    fullName
    id
  }
}

query iotconsoleListGitlabRepos($query: String, $pagination: PaginationIn, $groupId: String!) {
  cr_listGitlabRepositories(
    query: $query
    pagination: $pagination
    groupId: $groupId
  ) {
    createdAt
    name
    id
    public
    httpUrlToRepo
  }
}

query iotconsoleListGitlabBranches($repoId: String!, $query: String, $pagination: PaginationIn) {
  cr_listGitlabBranches(repoId: $repoId, query: $query, pagination: $pagination) {
    name
    protected
  }
}

query iotconsoleListBuilds($repoName: String!, $search: SearchBuilds, $pagination: CursorPaginationIn) {
  cr_listBuilds(repoName: $repoName, search: $search, pagination: $pagination) {
    edges {
      cursor
      node {
        createdBy {
          userEmail
          userId
          userName
        }
        creationTime
        buildClusterName
        credUser {
          userEmail
          userId
          userName
        }
        errorMessages
        id
        lastUpdatedBy {
          userEmail
          userId
          userName
        }
        markedForDeletion
        name
        source {
          branch
          provider
          repository
          webhookId
        }
        spec {
          buildOptions {
            buildArgs
            buildContexts
            contextDir
            dockerfileContent
            dockerfilePath
            targetPlatforms
          }
          registry {
            repo {
              name
              tags
            }
          }
          resource {
            cpu
            memoryInMb
          }
          caches {
            name
            path
          }
        }
        status
        updateTime
        latestBuildRun {
          recordVersion
          status {
            checkList {
              debug
              description
              name
              title
            }
            checks
            isReady
            lastReadyGeneration
            lastReconcileTime
            message {
              RawMessage
            }
            resources {
              apiVersion
              kind
              name
              namespace
            }
          }
          syncStatus {
            action
            error
            lastSyncedAt
            recordVersion
            state
            syncScheduledAt
          }
          markedForDeletion
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

mutation iotconsoleCreateBuild($build: BuildIn!) {
  cr_addBuild(build: $build) {
    id
  }
}

mutation iotconsoleUpdateBuild($crUpdateBuildId: ID!, $build: BuildIn!) {
  cr_updateBuild(id: $crUpdateBuildId, build: $build) {
    id
  }
}

mutation iotconsoleDeleteBuild($crDeleteBuildId: ID!) {
  cr_deleteBuild(id: $crDeleteBuildId)
}

mutation iotconsoleTriggerBuild($crTriggerBuildId: ID!) {
  cr_triggerBuild(id: $crTriggerBuildId)
}

query iotconsoleListBuildRuns($search: SearchBuildRuns, $pq: CursorPaginationIn) {
  cr_listBuildRuns(search: $search, pq: $pq) {
    edges {
      cursor
      node {
        id
        clusterName
        creationTime
        markedForDeletion
        recordVersion
        metadata {
          annotations
          creationTimestamp
          deletionTimestamp
          generation
          labels
          name
          namespace
        }
        spec {
          accountName
          buildOptions {
            buildArgs
            buildContexts
            contextDir
            dockerfileContent
            dockerfilePath
            targetPlatforms
          }
          registry {
            repo {
              name
              tags
            }
          }
          resource {
            cpu
            memoryInMb
          }
        }
        status {
          checks
          checkList {
            description
            debug
            name
            title
          }
          isReady
          lastReadyGeneration
          lastReconcileTime
          message {
            RawMessage
          }
          resources {
            apiVersion
            kind
            name
            namespace
          }
        }
        syncStatus {
          action
          error
          lastSyncedAt
          recordVersion
          state
          syncScheduledAt
        }
        updateTime
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

query iotconsoleGetBuildRun($buildId: ID!, $buildRunName: String!) {
  cr_getBuildRun(buildID: $buildId, buildRunName: $buildRunName) {
    clusterName
    creationTime
    markedForDeletion
    recordVersion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    spec {
      accountName
      buildOptions {
        buildArgs
        buildContexts
        contextDir
        dockerfileContent
        dockerfilePath
        targetPlatforms
      }
      registry {
        repo {
          name
          tags
        }
      }
      resource {
        cpu
        memoryInMb
      }
    }
    status {
      checks
      checkList {
        description
        debug
        name
        title
      }
      isReady
      lastReadyGeneration
      lastReconcileTime
      message {
        RawMessage
      }
      resources {
        apiVersion
        kind
        name
        namespace
      }
    }
    syncStatus {
      action
      error
      lastSyncedAt
      recordVersion
      state
      syncScheduledAt
    }
    updateTime
  }
}

query iotconsoleListInvitationsForAccount($accountName: String!) {
  accounts_listInvitations(accountName: $accountName) {
    accepted
    accountName
    creationTime
    id
    inviteToken
    invitedBy
    markedForDeletion
    recordVersion
    rejected
    updateTime
    userEmail
    userName
    userRole
  }
}

query iotconsoleListMembershipsForAccount($accountName: String!) {
  accounts_listMembershipsForAccount(accountName: $accountName) {
    user {
      verified
      name
      joined
      email
    }
    role
  }
}

mutation iotconsoleDeleteAccountInvitation($accountName: String!, $invitationId: String!) {
  accounts_deleteInvitation(
    accountName: $accountName
    invitationId: $invitationId
  )
}

mutation iotconsoleInviteMembersForAccount($accountName: String!, $invitations: [InvitationIn!]!) {
  accounts_inviteMembers(accountName: $accountName, invitations: $invitations) {
    id
  }
}

query iotconsoleListInvitationsForUser($onlyPending: Boolean!) {
  accounts_listInvitationsForUser(onlyPending: $onlyPending) {
    accountName
    id
    updateTime
    inviteToken
  }
}

mutation iotconsoleAcceptInvitation($accountName: String!, $inviteToken: String!) {
  accounts_acceptInvitation(accountName: $accountName, inviteToken: $inviteToken)
}

mutation iotconsoleRejectInvitation($accountName: String!, $inviteToken: String!) {
  accounts_rejectInvitation(accountName: $accountName, inviteToken: $inviteToken)
}

mutation iotconsoleUpdateAccountMembership($accountName: String!, $memberId: ID!, $role: Github__com___kloudlite___api___apps___iam___types__Role!) {
  accounts_updateAccountMembership(
    accountName: $accountName
    memberId: $memberId
    role: $role
  )
}

mutation iotconsoleDeleteAccountMembership($accountName: String!, $memberId: ID!) {
  accounts_removeAccountMembership(accountName: $accountName, memberId: $memberId)
}

mutation authCli_updateDeviceCluster($deviceName: String!, $clusterName: String!) {
  core_updateVpnClusterName(deviceName: $deviceName, clusterName: $clusterName)
}

mutation authCli_updateDeviceNs($deviceName: String!, $ns: String!) {
  core_updateVpnDeviceNs(deviceName: $deviceName, ns: $ns)
}

mutation authCli_updateDevicePorts($deviceName: String!, $ports: [PortIn!]!) {
  core_updateVPNDevicePorts(deviceName: $deviceName, ports: $ports)
}

mutation authCli_updateDeviceEnv($deviceName: String!, $envName: String!) {
  core_updateVPNDeviceEnv(deviceName: $deviceName, envName: $envName)
}

query authCli_listDevices {
  core_listVPNDevicesForUser {
    displayName
    environmentName
    metadata {
      name
    }
    clusterName
    status {
      isReady
      message {
        RawMessage
      }
    }
    spec {
      cnameRecords {
        host
        target
      }
      activeNamespace
      disabled
      ports {
        port
        targetPort
      }
    }
  }
}

query authCli_getDevice($name: String!) {
  core_getVPNDevice(name: $name) {
    displayName
    metadata {
      name
    }
    clusterName
    environmentName
    spec {
      activeNamespace
      disabled
      ports {
        port
        targetPort
      }
    }
    wireguardConfig {
      encoding
      value
    }
  }
}

mutation authCli_createDevice($vpnDevice: ConsoleVPNDeviceIn!) {
  core_createVPNDevice(vpnDevice: $vpnDevice) {
    metadata {
      name
    }
    wireguardConfig {
      encoding
      value
    }
  }
}

mutation authCli_createGlobalVPNDevice($gvpnDevice: GlobalVPNDeviceIn!) {
  infra_createGlobalVPNDevice(gvpnDevice: $gvpnDevice) {
    accountName
    creationTime
    createdBy {
      userEmail
      userId
      userName
    }
    displayName
    globalVPNName
    id
    ipAddr
    lastUpdatedBy {
      userName
      userId
      userEmail
    }
    markedForDeletion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    privateKey
    publicKey
    recordVersion
    updateTime
    wireguardConfig {
      value
      encoding
    }
  }
}

query authCli_getMresOutputKeyValues($envName: String!, $keyrefs: [ManagedResourceKeyRefIn]) {
  core_getManagedResouceOutputKeyValues(envName: $envName, keyrefs: $keyrefs) {
    key
    mresName
    value
  }
}

query authCli_getGlobalVpnDevice($gvpn: String!, $deviceName: String!) {
  infra_getGlobalVPNDevice(gvpn: $gvpn, deviceName: $deviceName) {
    accountName
    creationTime
    createdBy {
      userEmail
      userId
      userName
    }
    displayName
    globalVPNName
    id
    ipAddr
    lastUpdatedBy {
      userName
      userId
      userEmail
    }
    markedForDeletion
    metadata {
      annotations
      creationTimestamp
      deletionTimestamp
      generation
      labels
      name
      namespace
    }
    privateKey
    publicKey
    recordVersion
    updateTime
    wireguardConfig {
      value
      encoding
    }
  }
}

query authCli_coreCheckNameAvailability($resType: ConsoleResType!, $name: String!) {
  core_checkNameAvailability(resType: $resType, name: $name) {
    result
    suggestedNames
  }
}

query authCli_getMresKeys($envName: String!, $name: String!) {
  core_getManagedResouceOutputKeys(envName: $envName, name: $name)
}

query authCli_listMreses($envName: String!, $pq: CursorPaginationIn) {
  core_listManagedResources(envName: $envName, pq: $pq) {
    edges {
      node {
        displayName
        metadata {
          name
          namespace
        }
      }
    }
  }
}

query authCli_getMresConfigsValues($keyrefs: [ManagedResourceKeyRefIn], $envName: String!) {
  core_getManagedResouceOutputKeyValues(keyrefs: $keyrefs, envName: $envName) {
    key
    mresName
    value
  }
}

query authCli_infraCheckNameAvailability($resType: ResType!, $name: String!, $clusterName: String) {
  infra_checkNameAvailability(
    resType: $resType
    name: $name
    clusterName: $clusterName
  ) {
    result
    suggestedNames
  }
}

query authCli_getConfigSecretMap($envName: String!, $configQueries: [ConfigKeyRefIn], $secretQueries: [SecretKeyRefIn!], $mresQueries: [ManagedResourceKeyRefIn]) {
  configs: core_getConfigValues(envName: $envName, queries: $configQueries) {
    configName
    key
    value
  }
  secrets: core_getSecretValues(envName: $envName, queries: $secretQueries) {
    key
    secretName
    value
  }
  mreses: core_getManagedResouceOutputKeyValues(
    keyrefs: $mresQueries
    envName: $envName
  ) {
    key
    mresName
    value
  }
}

mutation authCli_interceptApp($portMappings: [Github__com___kloudlite___operator___apis___crds___v1__AppInterceptPortMappingsIn!], $intercept: Boolean!, $deviceName: String!, $appname: String!, $envName: String!) {
  core_interceptApp(
    portMappings: $portMappings
    intercept: $intercept
    deviceName: $deviceName
    appname: $appname
    envName: $envName
  )
}

query authCli_getEnvironment($name: String!) {
  core_getEnvironment(name: $name) {
    spec {
      targetNamespace
    }
  }
}

query authCli_getSecret($envName: String!, $name: String!) {
  core_getSecret(envName: $envName, name: $name) {
    displayName
    metadata {
      name
      namespace
    }
    stringData
  }
}

query authCli_getConfig($envName: String!, $name: String!) {
  core_getConfig(envName: $envName, name: $name) {
    data
    displayName
    metadata {
      name
      namespace
    }
  }
}

query authCli_listApps($envName: String!) {
  core_listApps(envName: $envName) {
    edges {
      cursor
      node {
        displayName
        environmentName
        markedForDeletion
        metadata {
          annotations
          name
          namespace
        }
        spec {
          displayName
          containers {
            args
            command
            env {
              key
              optional
              refKey
              refName
              type
              value
            }
            envFrom {
              refName
              type
            }
            image
            name
          }
          intercept {
            enabled
            toDevice
          }
          nodeSelector
          replicas
          serviceAccount
          services {
            port
          }
        }
        status {
          checks
          isReady
          message {
            RawMessage
          }
        }
      }
    }
  }
}

query authCli_listConfigs($envName: String!) {
  core_listConfigs(envName: $envName) {
    totalCount
    edges {
      node {
        data
        displayName
        metadata {
          name
          namespace
        }
      }
    }
  }
}

query authCli_listSecrets($envName: String!, $pq: CursorPaginationIn) {
  core_listSecrets(envName: $envName, pq: $pq) {
    edges {
      cursor
      node {
        displayName
        markedForDeletion
        metadata {
          name
          namespace
        }
        stringData
      }
    }
  }
}

query authCli_listEnvironments($pq: CursorPaginationIn) {
  core_listEnvironments(pq: $pq) {
    edges {
      cursor
      node {
        displayName
        markedForDeletion
        metadata {
          name
          namespace
        }
        spec {
          targetNamespace
        }
        status {
          isReady
          message {
            RawMessage
          }
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
      hasPreviousPage
      startCursor
    }
    totalCount
  }
}

query authCli_getKubeConfig($name: String!) {
  infra_getCluster(name: $name) {
    adminKubeconfig {
      encoding
      value
    }
    status {
      isReady
    }
  }
}

query authCli_listClusters($pagination: CursorPaginationIn) {
  infra_listClusters(pagination: $pagination) {
    edges {
      node {
        displayName
        metadata {
          name
        }
        status {
          isReady
        }
      }
    }
  }
}

query authCli_listAccounts {
  accounts_listAccounts {
    metadata {
      name
    }
    displayName
  }
}

query authCli_getCurrentUser {
  auth_me {
    id
    email
    name
  }
}

mutation authCli_createRemoteLogin($secret: String) {
  auth_createRemoteLogin(secret: $secret)
}

query authCli_getRemoteLogin($loginId: String!, $secret: String!) {
  auth_getRemoteLogin(loginId: $loginId, secret: $secret) {
    authHeader
    status
  }
}

mutation authSetRemoteAuthHeader($loginId: String!, $authHeader: String) {
  auth_setRemoteAuthHeader(loginId: $loginId, authHeader: $authHeader)
}

query authCheckOauthEnabled {
  auth_listOAuthProviders {
    enabled
    provider
  }
}

mutation authAddOauthCredientials($provider: String!, $state: String!, $code: String!) {
  oAuth_addLogin(provider: $provider, state: $state, code: $code)
}

mutation authRequestResetPassword($email: String!) {
  auth_requestResetPassword(email: $email)
}

mutation authResetPassword($token: String!, $password: String!) {
  auth_resetPassword(token: $token, password: $password)
}

mutation authOauthLogin($code: String!, $provider: String!, $state: String) {
  oAuth_login(code: $code, provider: $provider, state: $state) {
    id
  }
}

mutation authVerifyEmail($token: String!) {
  auth_verifyEmail(token: $token) {
    id
  }
}

query authLoginPageInitUrls {
  githubLoginUrl: oAuth_requestLogin(provider: "github")
  gitlabLoginUrl: oAuth_requestLogin(provider: "gitlab")
  googleLoginUrl: oAuth_requestLogin(provider: "google")
}

mutation authLogin($email: String!, $password: String!) {
  auth_login(email: $email, password: $password) {
    id
  }
}

mutation authLogout {
  auth_logout
}

mutation authSignUpWithEmail($name: String!, $password: String!, $email: String!) {
  auth_signup(name: $name, password: $password, email: $email) {
    id
  }
}

query authWhoAmI {
  auth_me {
    id
    email
    verified
  }
}

query libWhoAmI {
  auth_me {
    verified
    name
    id
    email
    providerGitlab
    providerGithub
    providerGoogle
  }
}