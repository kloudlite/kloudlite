// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v5.29.3
// source: accounts.external.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface CheckTeamSlugAvailabilityRequest {
  slug: string;
}

export interface CheckTeamSlugAvailabilityResponse {
  result: boolean;
  suggestedSlugs: string[];
}

export interface GenerateTeamSlugSuggestionsRequest {
  displayName: string;
}

export interface GenerateTeamSlugSuggestionsResponse {
  suggestions: string[];
}

export interface GetTeamDetailsRequest {
  teamId: string;
}

export interface GetTeamDetailsResponse {
  teamId: string;
  slug: string;
  displayName: string;
  ownerId: string;
  /** e.g., "active", "disabled", "deleted" */
  status: string;
  region: string;
}

export interface CreateTeamRequest {
  slug: string;
  displayName: string;
  region: string;
  description: string;
}

export interface CreateTeamResponse {
  teamId: string;
}

export interface DisableTeamRequest {
  teamId: string;
}

export interface DisableTeamResponse {
  teamId: string;
  /** e.g., "disabled" */
  status: string;
}

export interface EnableTeamRequest {
  teamId: string;
}

export interface EnableTeamResponse {
  teamId: string;
  /** e.g., "active" */
  status: string;
}

export interface DeleteTeamRequest {
  teamId: string;
}

export interface DeleteTeamResponse {
  teamId: string;
  /** e.g., "deleted" */
  status: string;
}

export interface ListTeamsRequest {
  /** User ID to list teams for */
  userId: string;
}

export interface ListTeamsResponse {
  teams: TeamDetails[];
}

export interface TeamDetails {
  teamId: string;
  slug: string;
  displayName: string;
  /** User ID of the team owner */
  ownerId: string;
  /** e.g., "active", "disabled", "deleted" */
  status: string;
  region: string;
  /** User's role in the team */
  role: string;
}

export interface SearchTeamsRequest {
  query: string;
  limit: number;
  offset: number;
}

export interface SearchTeamsResponse {
  teams: TeamDetails[];
  totalCount: number;
}

export interface GetUserTeamsRequest {
  /** User ID to get teams for */
  userId: string;
}

export interface GetUserTeamsResponse {
  teams: TeamDetails[];
}

export interface GetTeamMembersRequest {
  teamId: string;
}

export interface GetTeamMembersResponse {
  members: TeamMember[];
}

export interface TeamMember {
  userId: string;
  email: string;
  name: string;
  role: string;
  joinedAt: string;
}

export interface InviteTeamMemberRequest {
  teamId: string;
  email: string;
  role: string;
}

export interface InviteTeamMemberResponse {
  invitationId: string;
}

export interface RemoveTeamMemberRequest {
  teamId: string;
  userId: string;
}

export interface RemoveTeamMemberResponse {
  success: boolean;
}

export interface UpdateTeamMemberRoleRequest {
  teamId: string;
  userId: string;
  role: string;
}

export interface UpdateTeamMemberRoleResponse {
  success: boolean;
}

/** Platform management messages */
export interface RequestTeamCreationRequest {
  slug: string;
  displayName: string;
  description: string;
  region: string;
}

export interface RequestTeamCreationResponse {
  requestId: string;
  status: string;
}

export interface ListTeamRequestsRequest {
  /** optional: "pending", "approved", "rejected" */
  status: string;
}

export interface ListTeamRequestsResponse {
  requests: TeamRequest[];
}

export interface TeamRequest {
  requestId: string;
  slug: string;
  displayName: string;
  description: string;
  region: string;
  status: string;
  requestedBy: string;
  requestedByEmail: string;
  requestedAt: string;
  reviewedBy: string;
  reviewedByEmail: string;
  reviewedAt: string;
  rejectionReason: string;
}

export interface GetTeamRequestRequest {
  requestId: string;
}

export interface GetTeamRequestResponse {
  request: TeamRequest | undefined;
}

export interface ApproveTeamRequestRequest {
  requestId: string;
}

export interface ApproveTeamRequestResponse {
  teamId: string;
}

export interface RejectTeamRequestRequest {
  requestId: string;
  reason: string;
}

export interface RejectTeamRequestResponse {
  success: boolean;
}

/** Platform settings messages */
export interface GetPlatformSettingsRequest {
}

export interface GetPlatformSettingsResponse {
  settings: PlatformSettings | undefined;
}

export interface PlatformSettings {
  platformOwnerEmail: string;
  supportEmail: string;
  allowSignup: boolean;
  oauthProviders: OAuthProviderSettings | undefined;
  teamSettings: TeamSettings | undefined;
  features: PlatformFeatures | undefined;
  cloudProvider: CloudProviderConfig | undefined;
}

export interface OAuthProviderSettings {
  google: OAuthProvider | undefined;
  github: OAuthProvider | undefined;
  microsoft: MicrosoftOAuthProvider | undefined;
}

export interface OAuthProvider {
  enabled: boolean;
  clientId: string;
  clientSecret: string;
}

export interface MicrosoftOAuthProvider {
  enabled: boolean;
  clientId: string;
  clientSecret: string;
  tenantId: string;
}

export interface TeamSettings {
  requireApproval: boolean;
  autoApproveFirstTeam: boolean;
  maxTeamsPerUser: number;
}

export interface PlatformFeatures {
  enableDeviceFlow: boolean;
  enableCLI: boolean;
  enableAPI: boolean;
}

export interface CloudProviderConfig {
  /** "aws", "gcp", "azure", "digitalocean" - empty means no provider */
  provider: string;
  aws: AWSConfig | undefined;
  gcp: GCPConfig | undefined;
  azure: AzureConfig | undefined;
  digitalocean: DigitalOceanConfig | undefined;
}

export interface AWSConfig {
  accessKeyId: string;
  secretAccessKey: string;
  region: string;
}

export interface GCPConfig {
  projectId: string;
  serviceAccountKey: string;
}

export interface AzureConfig {
  subscriptionId: string;
  tenantId: string;
  clientId: string;
  clientSecret: string;
}

export interface DigitalOceanConfig {
  token: string;
}

export interface UpdatePlatformSettingsRequest {
  settings: PlatformSettings | undefined;
}

export interface UpdatePlatformSettingsResponse {
  success: boolean;
}

/** Platform invitation messages */
export interface InvitePlatformUserRequest {
  email: string;
  /** "super_admin", "admin", "user" */
  role: string;
}

export interface InvitePlatformUserResponse {
  success: boolean;
  invitationId: string;
  error: string;
}

export interface ListPlatformInvitationsRequest {
  /** optional filter: "pending", "accepted", "expired", "cancelled" */
  status: string;
}

export interface ListPlatformInvitationsResponse {
  invitations: PlatformInvitation[];
}

export interface PlatformInvitation {
  id: string;
  email: string;
  role: string;
  invitedBy: string;
  invitedByEmail: string;
  /** "pending", "accepted", "expired", "cancelled" */
  status: string;
  createdAt: string;
  expiresAt: string;
  acceptedAt: string;
}

export interface ResendPlatformInvitationRequest {
  invitationId: string;
}

export interface ResendPlatformInvitationResponse {
  success: boolean;
  error: string;
}

export interface CancelPlatformInvitationRequest {
  invitationId: string;
}

export interface CancelPlatformInvitationResponse {
  success: boolean;
}

export interface AcceptPlatformInvitationRequest {
  token: string;
}

export interface AcceptPlatformInvitationResponse {
  success: boolean;
  error: string;
}

function createBaseCheckTeamSlugAvailabilityRequest(): CheckTeamSlugAvailabilityRequest {
  return { slug: "" };
}

export const CheckTeamSlugAvailabilityRequest: MessageFns<CheckTeamSlugAvailabilityRequest> = {
  encode(message: CheckTeamSlugAvailabilityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.slug !== "") {
      writer.uint32(10).string(message.slug);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckTeamSlugAvailabilityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckTeamSlugAvailabilityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckTeamSlugAvailabilityRequest {
    return { slug: isSet(object.slug) ? globalThis.String(object.slug) : "" };
  },

  toJSON(message: CheckTeamSlugAvailabilityRequest): unknown {
    const obj: any = {};
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckTeamSlugAvailabilityRequest>, I>>(
    base?: I,
  ): CheckTeamSlugAvailabilityRequest {
    return CheckTeamSlugAvailabilityRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckTeamSlugAvailabilityRequest>, I>>(
    object: I,
  ): CheckTeamSlugAvailabilityRequest {
    const message = createBaseCheckTeamSlugAvailabilityRequest();
    message.slug = object.slug ?? "";
    return message;
  },
};

function createBaseCheckTeamSlugAvailabilityResponse(): CheckTeamSlugAvailabilityResponse {
  return { result: false, suggestedSlugs: [] };
}

export const CheckTeamSlugAvailabilityResponse: MessageFns<CheckTeamSlugAvailabilityResponse> = {
  encode(message: CheckTeamSlugAvailabilityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== false) {
      writer.uint32(8).bool(message.result);
    }
    for (const v of message.suggestedSlugs) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckTeamSlugAvailabilityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckTeamSlugAvailabilityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.result = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.suggestedSlugs.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckTeamSlugAvailabilityResponse {
    return {
      result: isSet(object.result) ? globalThis.Boolean(object.result) : false,
      suggestedSlugs: globalThis.Array.isArray(object?.suggestedSlugs)
        ? object.suggestedSlugs.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CheckTeamSlugAvailabilityResponse): unknown {
    const obj: any = {};
    if (message.result !== false) {
      obj.result = message.result;
    }
    if (message.suggestedSlugs?.length) {
      obj.suggestedSlugs = message.suggestedSlugs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckTeamSlugAvailabilityResponse>, I>>(
    base?: I,
  ): CheckTeamSlugAvailabilityResponse {
    return CheckTeamSlugAvailabilityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckTeamSlugAvailabilityResponse>, I>>(
    object: I,
  ): CheckTeamSlugAvailabilityResponse {
    const message = createBaseCheckTeamSlugAvailabilityResponse();
    message.result = object.result ?? false;
    message.suggestedSlugs = object.suggestedSlugs?.map((e) => e) || [];
    return message;
  },
};

function createBaseGenerateTeamSlugSuggestionsRequest(): GenerateTeamSlugSuggestionsRequest {
  return { displayName: "" };
}

export const GenerateTeamSlugSuggestionsRequest: MessageFns<GenerateTeamSlugSuggestionsRequest> = {
  encode(message: GenerateTeamSlugSuggestionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== "") {
      writer.uint32(10).string(message.displayName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateTeamSlugSuggestionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateTeamSlugSuggestionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateTeamSlugSuggestionsRequest {
    return { displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "" };
  },

  toJSON(message: GenerateTeamSlugSuggestionsRequest): unknown {
    const obj: any = {};
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateTeamSlugSuggestionsRequest>, I>>(
    base?: I,
  ): GenerateTeamSlugSuggestionsRequest {
    return GenerateTeamSlugSuggestionsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateTeamSlugSuggestionsRequest>, I>>(
    object: I,
  ): GenerateTeamSlugSuggestionsRequest {
    const message = createBaseGenerateTeamSlugSuggestionsRequest();
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseGenerateTeamSlugSuggestionsResponse(): GenerateTeamSlugSuggestionsResponse {
  return { suggestions: [] };
}

export const GenerateTeamSlugSuggestionsResponse: MessageFns<GenerateTeamSlugSuggestionsResponse> = {
  encode(message: GenerateTeamSlugSuggestionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.suggestions) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateTeamSlugSuggestionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateTeamSlugSuggestionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.suggestions.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerateTeamSlugSuggestionsResponse {
    return {
      suggestions: globalThis.Array.isArray(object?.suggestions)
        ? object.suggestions.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GenerateTeamSlugSuggestionsResponse): unknown {
    const obj: any = {};
    if (message.suggestions?.length) {
      obj.suggestions = message.suggestions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenerateTeamSlugSuggestionsResponse>, I>>(
    base?: I,
  ): GenerateTeamSlugSuggestionsResponse {
    return GenerateTeamSlugSuggestionsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenerateTeamSlugSuggestionsResponse>, I>>(
    object: I,
  ): GenerateTeamSlugSuggestionsResponse {
    const message = createBaseGenerateTeamSlugSuggestionsResponse();
    message.suggestions = object.suggestions?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetTeamDetailsRequest(): GetTeamDetailsRequest {
  return { teamId: "" };
}

export const GetTeamDetailsRequest: MessageFns<GetTeamDetailsRequest> = {
  encode(message: GetTeamDetailsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTeamDetailsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTeamDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTeamDetailsRequest {
    return { teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "" };
  },

  toJSON(message: GetTeamDetailsRequest): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTeamDetailsRequest>, I>>(base?: I): GetTeamDetailsRequest {
    return GetTeamDetailsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTeamDetailsRequest>, I>>(object: I): GetTeamDetailsRequest {
    const message = createBaseGetTeamDetailsRequest();
    message.teamId = object.teamId ?? "";
    return message;
  },
};

function createBaseGetTeamDetailsResponse(): GetTeamDetailsResponse {
  return { teamId: "", slug: "", displayName: "", ownerId: "", status: "", region: "" };
}

export const GetTeamDetailsResponse: MessageFns<GetTeamDetailsResponse> = {
  encode(message: GetTeamDetailsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    if (message.slug !== "") {
      writer.uint32(18).string(message.slug);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.ownerId !== "") {
      writer.uint32(34).string(message.ownerId);
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.region !== "") {
      writer.uint32(50).string(message.region);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTeamDetailsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTeamDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.region = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTeamDetailsResponse {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
    };
  },

  toJSON(message: GetTeamDetailsResponse): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTeamDetailsResponse>, I>>(base?: I): GetTeamDetailsResponse {
    return GetTeamDetailsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTeamDetailsResponse>, I>>(object: I): GetTeamDetailsResponse {
    const message = createBaseGetTeamDetailsResponse();
    message.teamId = object.teamId ?? "";
    message.slug = object.slug ?? "";
    message.displayName = object.displayName ?? "";
    message.ownerId = object.ownerId ?? "";
    message.status = object.status ?? "";
    message.region = object.region ?? "";
    return message;
  },
};

function createBaseCreateTeamRequest(): CreateTeamRequest {
  return { slug: "", displayName: "", region: "", description: "" };
}

export const CreateTeamRequest: MessageFns<CreateTeamRequest> = {
  encode(message: CreateTeamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.slug !== "") {
      writer.uint32(10).string(message.slug);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.region !== "") {
      writer.uint32(26).string(message.region);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTeamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTeamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTeamRequest {
    return {
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: CreateTeamRequest): unknown {
    const obj: any = {};
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTeamRequest>, I>>(base?: I): CreateTeamRequest {
    return CreateTeamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTeamRequest>, I>>(object: I): CreateTeamRequest {
    const message = createBaseCreateTeamRequest();
    message.slug = object.slug ?? "";
    message.displayName = object.displayName ?? "";
    message.region = object.region ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseCreateTeamResponse(): CreateTeamResponse {
  return { teamId: "" };
}

export const CreateTeamResponse: MessageFns<CreateTeamResponse> = {
  encode(message: CreateTeamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTeamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTeamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTeamResponse {
    return { teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "" };
  },

  toJSON(message: CreateTeamResponse): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTeamResponse>, I>>(base?: I): CreateTeamResponse {
    return CreateTeamResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTeamResponse>, I>>(object: I): CreateTeamResponse {
    const message = createBaseCreateTeamResponse();
    message.teamId = object.teamId ?? "";
    return message;
  },
};

function createBaseDisableTeamRequest(): DisableTeamRequest {
  return { teamId: "" };
}

export const DisableTeamRequest: MessageFns<DisableTeamRequest> = {
  encode(message: DisableTeamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableTeamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableTeamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisableTeamRequest {
    return { teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "" };
  },

  toJSON(message: DisableTeamRequest): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisableTeamRequest>, I>>(base?: I): DisableTeamRequest {
    return DisableTeamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisableTeamRequest>, I>>(object: I): DisableTeamRequest {
    const message = createBaseDisableTeamRequest();
    message.teamId = object.teamId ?? "";
    return message;
  },
};

function createBaseDisableTeamResponse(): DisableTeamResponse {
  return { teamId: "", status: "" };
}

export const DisableTeamResponse: MessageFns<DisableTeamResponse> = {
  encode(message: DisableTeamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableTeamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableTeamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisableTeamResponse {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: DisableTeamResponse): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisableTeamResponse>, I>>(base?: I): DisableTeamResponse {
    return DisableTeamResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisableTeamResponse>, I>>(object: I): DisableTeamResponse {
    const message = createBaseDisableTeamResponse();
    message.teamId = object.teamId ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseEnableTeamRequest(): EnableTeamRequest {
  return { teamId: "" };
}

export const EnableTeamRequest: MessageFns<EnableTeamRequest> = {
  encode(message: EnableTeamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableTeamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableTeamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnableTeamRequest {
    return { teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "" };
  },

  toJSON(message: EnableTeamRequest): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnableTeamRequest>, I>>(base?: I): EnableTeamRequest {
    return EnableTeamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnableTeamRequest>, I>>(object: I): EnableTeamRequest {
    const message = createBaseEnableTeamRequest();
    message.teamId = object.teamId ?? "";
    return message;
  },
};

function createBaseEnableTeamResponse(): EnableTeamResponse {
  return { teamId: "", status: "" };
}

export const EnableTeamResponse: MessageFns<EnableTeamResponse> = {
  encode(message: EnableTeamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableTeamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableTeamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnableTeamResponse {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: EnableTeamResponse): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnableTeamResponse>, I>>(base?: I): EnableTeamResponse {
    return EnableTeamResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnableTeamResponse>, I>>(object: I): EnableTeamResponse {
    const message = createBaseEnableTeamResponse();
    message.teamId = object.teamId ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseDeleteTeamRequest(): DeleteTeamRequest {
  return { teamId: "" };
}

export const DeleteTeamRequest: MessageFns<DeleteTeamRequest> = {
  encode(message: DeleteTeamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTeamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTeamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTeamRequest {
    return { teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "" };
  },

  toJSON(message: DeleteTeamRequest): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteTeamRequest>, I>>(base?: I): DeleteTeamRequest {
    return DeleteTeamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteTeamRequest>, I>>(object: I): DeleteTeamRequest {
    const message = createBaseDeleteTeamRequest();
    message.teamId = object.teamId ?? "";
    return message;
  },
};

function createBaseDeleteTeamResponse(): DeleteTeamResponse {
  return { teamId: "", status: "" };
}

export const DeleteTeamResponse: MessageFns<DeleteTeamResponse> = {
  encode(message: DeleteTeamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTeamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTeamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTeamResponse {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: DeleteTeamResponse): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteTeamResponse>, I>>(base?: I): DeleteTeamResponse {
    return DeleteTeamResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteTeamResponse>, I>>(object: I): DeleteTeamResponse {
    const message = createBaseDeleteTeamResponse();
    message.teamId = object.teamId ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseListTeamsRequest(): ListTeamsRequest {
  return { userId: "" };
}

export const ListTeamsRequest: MessageFns<ListTeamsRequest> = {
  encode(message: ListTeamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTeamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTeamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTeamsRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: ListTeamsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTeamsRequest>, I>>(base?: I): ListTeamsRequest {
    return ListTeamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTeamsRequest>, I>>(object: I): ListTeamsRequest {
    const message = createBaseListTeamsRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseListTeamsResponse(): ListTeamsResponse {
  return { teams: [] };
}

export const ListTeamsResponse: MessageFns<ListTeamsResponse> = {
  encode(message: ListTeamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.teams) {
      TeamDetails.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTeamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTeamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teams.push(TeamDetails.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTeamsResponse {
    return {
      teams: globalThis.Array.isArray(object?.teams) ? object.teams.map((e: any) => TeamDetails.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListTeamsResponse): unknown {
    const obj: any = {};
    if (message.teams?.length) {
      obj.teams = message.teams.map((e) => TeamDetails.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTeamsResponse>, I>>(base?: I): ListTeamsResponse {
    return ListTeamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTeamsResponse>, I>>(object: I): ListTeamsResponse {
    const message = createBaseListTeamsResponse();
    message.teams = object.teams?.map((e) => TeamDetails.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTeamDetails(): TeamDetails {
  return { teamId: "", slug: "", displayName: "", ownerId: "", status: "", region: "", role: "" };
}

export const TeamDetails: MessageFns<TeamDetails> = {
  encode(message: TeamDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    if (message.slug !== "") {
      writer.uint32(18).string(message.slug);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.ownerId !== "") {
      writer.uint32(34).string(message.ownerId);
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.region !== "") {
      writer.uint32(50).string(message.region);
    }
    if (message.role !== "") {
      writer.uint32(58).string(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TeamDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTeamDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.role = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TeamDetails {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
    };
  },

  toJSON(message: TeamDetails): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TeamDetails>, I>>(base?: I): TeamDetails {
    return TeamDetails.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TeamDetails>, I>>(object: I): TeamDetails {
    const message = createBaseTeamDetails();
    message.teamId = object.teamId ?? "";
    message.slug = object.slug ?? "";
    message.displayName = object.displayName ?? "";
    message.ownerId = object.ownerId ?? "";
    message.status = object.status ?? "";
    message.region = object.region ?? "";
    message.role = object.role ?? "";
    return message;
  },
};

function createBaseSearchTeamsRequest(): SearchTeamsRequest {
  return { query: "", limit: 0, offset: 0 };
}

export const SearchTeamsRequest: MessageFns<SearchTeamsRequest> = {
  encode(message: SearchTeamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(24).int32(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchTeamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchTeamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.offset = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchTeamsRequest {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: SearchTeamsRequest): unknown {
    const obj: any = {};
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchTeamsRequest>, I>>(base?: I): SearchTeamsRequest {
    return SearchTeamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchTeamsRequest>, I>>(object: I): SearchTeamsRequest {
    const message = createBaseSearchTeamsRequest();
    message.query = object.query ?? "";
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseSearchTeamsResponse(): SearchTeamsResponse {
  return { teams: [], totalCount: 0 };
}

export const SearchTeamsResponse: MessageFns<SearchTeamsResponse> = {
  encode(message: SearchTeamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.teams) {
      TeamDetails.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchTeamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchTeamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teams.push(TeamDetails.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchTeamsResponse {
    return {
      teams: globalThis.Array.isArray(object?.teams) ? object.teams.map((e: any) => TeamDetails.fromJSON(e)) : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
    };
  },

  toJSON(message: SearchTeamsResponse): unknown {
    const obj: any = {};
    if (message.teams?.length) {
      obj.teams = message.teams.map((e) => TeamDetails.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchTeamsResponse>, I>>(base?: I): SearchTeamsResponse {
    return SearchTeamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchTeamsResponse>, I>>(object: I): SearchTeamsResponse {
    const message = createBaseSearchTeamsResponse();
    message.teams = object.teams?.map((e) => TeamDetails.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    return message;
  },
};

function createBaseGetUserTeamsRequest(): GetUserTeamsRequest {
  return { userId: "" };
}

export const GetUserTeamsRequest: MessageFns<GetUserTeamsRequest> = {
  encode(message: GetUserTeamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserTeamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserTeamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserTeamsRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: GetUserTeamsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserTeamsRequest>, I>>(base?: I): GetUserTeamsRequest {
    return GetUserTeamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserTeamsRequest>, I>>(object: I): GetUserTeamsRequest {
    const message = createBaseGetUserTeamsRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetUserTeamsResponse(): GetUserTeamsResponse {
  return { teams: [] };
}

export const GetUserTeamsResponse: MessageFns<GetUserTeamsResponse> = {
  encode(message: GetUserTeamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.teams) {
      TeamDetails.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserTeamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserTeamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teams.push(TeamDetails.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserTeamsResponse {
    return {
      teams: globalThis.Array.isArray(object?.teams) ? object.teams.map((e: any) => TeamDetails.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetUserTeamsResponse): unknown {
    const obj: any = {};
    if (message.teams?.length) {
      obj.teams = message.teams.map((e) => TeamDetails.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserTeamsResponse>, I>>(base?: I): GetUserTeamsResponse {
    return GetUserTeamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserTeamsResponse>, I>>(object: I): GetUserTeamsResponse {
    const message = createBaseGetUserTeamsResponse();
    message.teams = object.teams?.map((e) => TeamDetails.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetTeamMembersRequest(): GetTeamMembersRequest {
  return { teamId: "" };
}

export const GetTeamMembersRequest: MessageFns<GetTeamMembersRequest> = {
  encode(message: GetTeamMembersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTeamMembersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTeamMembersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTeamMembersRequest {
    return { teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "" };
  },

  toJSON(message: GetTeamMembersRequest): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTeamMembersRequest>, I>>(base?: I): GetTeamMembersRequest {
    return GetTeamMembersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTeamMembersRequest>, I>>(object: I): GetTeamMembersRequest {
    const message = createBaseGetTeamMembersRequest();
    message.teamId = object.teamId ?? "";
    return message;
  },
};

function createBaseGetTeamMembersResponse(): GetTeamMembersResponse {
  return { members: [] };
}

export const GetTeamMembersResponse: MessageFns<GetTeamMembersResponse> = {
  encode(message: GetTeamMembersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.members) {
      TeamMember.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTeamMembersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTeamMembersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.members.push(TeamMember.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTeamMembersResponse {
    return {
      members: globalThis.Array.isArray(object?.members) ? object.members.map((e: any) => TeamMember.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetTeamMembersResponse): unknown {
    const obj: any = {};
    if (message.members?.length) {
      obj.members = message.members.map((e) => TeamMember.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTeamMembersResponse>, I>>(base?: I): GetTeamMembersResponse {
    return GetTeamMembersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTeamMembersResponse>, I>>(object: I): GetTeamMembersResponse {
    const message = createBaseGetTeamMembersResponse();
    message.members = object.members?.map((e) => TeamMember.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTeamMember(): TeamMember {
  return { userId: "", email: "", name: "", role: "", joinedAt: "" };
}

export const TeamMember: MessageFns<TeamMember> = {
  encode(message: TeamMember, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.role !== "") {
      writer.uint32(34).string(message.role);
    }
    if (message.joinedAt !== "") {
      writer.uint32(42).string(message.joinedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TeamMember {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTeamMember();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.joinedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TeamMember {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      joinedAt: isSet(object.joinedAt) ? globalThis.String(object.joinedAt) : "",
    };
  },

  toJSON(message: TeamMember): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.joinedAt !== "") {
      obj.joinedAt = message.joinedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TeamMember>, I>>(base?: I): TeamMember {
    return TeamMember.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TeamMember>, I>>(object: I): TeamMember {
    const message = createBaseTeamMember();
    message.userId = object.userId ?? "";
    message.email = object.email ?? "";
    message.name = object.name ?? "";
    message.role = object.role ?? "";
    message.joinedAt = object.joinedAt ?? "";
    return message;
  },
};

function createBaseInviteTeamMemberRequest(): InviteTeamMemberRequest {
  return { teamId: "", email: "", role: "" };
}

export const InviteTeamMemberRequest: MessageFns<InviteTeamMemberRequest> = {
  encode(message: InviteTeamMemberRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InviteTeamMemberRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInviteTeamMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InviteTeamMemberRequest {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
    };
  },

  toJSON(message: InviteTeamMemberRequest): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InviteTeamMemberRequest>, I>>(base?: I): InviteTeamMemberRequest {
    return InviteTeamMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InviteTeamMemberRequest>, I>>(object: I): InviteTeamMemberRequest {
    const message = createBaseInviteTeamMemberRequest();
    message.teamId = object.teamId ?? "";
    message.email = object.email ?? "";
    message.role = object.role ?? "";
    return message;
  },
};

function createBaseInviteTeamMemberResponse(): InviteTeamMemberResponse {
  return { invitationId: "" };
}

export const InviteTeamMemberResponse: MessageFns<InviteTeamMemberResponse> = {
  encode(message: InviteTeamMemberResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invitationId !== "") {
      writer.uint32(10).string(message.invitationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InviteTeamMemberResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInviteTeamMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.invitationId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InviteTeamMemberResponse {
    return { invitationId: isSet(object.invitationId) ? globalThis.String(object.invitationId) : "" };
  },

  toJSON(message: InviteTeamMemberResponse): unknown {
    const obj: any = {};
    if (message.invitationId !== "") {
      obj.invitationId = message.invitationId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InviteTeamMemberResponse>, I>>(base?: I): InviteTeamMemberResponse {
    return InviteTeamMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InviteTeamMemberResponse>, I>>(object: I): InviteTeamMemberResponse {
    const message = createBaseInviteTeamMemberResponse();
    message.invitationId = object.invitationId ?? "";
    return message;
  },
};

function createBaseRemoveTeamMemberRequest(): RemoveTeamMemberRequest {
  return { teamId: "", userId: "" };
}

export const RemoveTeamMemberRequest: MessageFns<RemoveTeamMemberRequest> = {
  encode(message: RemoveTeamMemberRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveTeamMemberRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveTeamMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveTeamMemberRequest {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: RemoveTeamMemberRequest): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveTeamMemberRequest>, I>>(base?: I): RemoveTeamMemberRequest {
    return RemoveTeamMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveTeamMemberRequest>, I>>(object: I): RemoveTeamMemberRequest {
    const message = createBaseRemoveTeamMemberRequest();
    message.teamId = object.teamId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveTeamMemberResponse(): RemoveTeamMemberResponse {
  return { success: false };
}

export const RemoveTeamMemberResponse: MessageFns<RemoveTeamMemberResponse> = {
  encode(message: RemoveTeamMemberResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveTeamMemberResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveTeamMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveTeamMemberResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: RemoveTeamMemberResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveTeamMemberResponse>, I>>(base?: I): RemoveTeamMemberResponse {
    return RemoveTeamMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveTeamMemberResponse>, I>>(object: I): RemoveTeamMemberResponse {
    const message = createBaseRemoveTeamMemberResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseUpdateTeamMemberRoleRequest(): UpdateTeamMemberRoleRequest {
  return { teamId: "", userId: "", role: "" };
}

export const UpdateTeamMemberRoleRequest: MessageFns<UpdateTeamMemberRoleRequest> = {
  encode(message: UpdateTeamMemberRoleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTeamMemberRoleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTeamMemberRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTeamMemberRoleRequest {
    return {
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
    };
  },

  toJSON(message: UpdateTeamMemberRoleRequest): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTeamMemberRoleRequest>, I>>(base?: I): UpdateTeamMemberRoleRequest {
    return UpdateTeamMemberRoleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTeamMemberRoleRequest>, I>>(object: I): UpdateTeamMemberRoleRequest {
    const message = createBaseUpdateTeamMemberRoleRequest();
    message.teamId = object.teamId ?? "";
    message.userId = object.userId ?? "";
    message.role = object.role ?? "";
    return message;
  },
};

function createBaseUpdateTeamMemberRoleResponse(): UpdateTeamMemberRoleResponse {
  return { success: false };
}

export const UpdateTeamMemberRoleResponse: MessageFns<UpdateTeamMemberRoleResponse> = {
  encode(message: UpdateTeamMemberRoleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTeamMemberRoleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTeamMemberRoleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTeamMemberRoleResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: UpdateTeamMemberRoleResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTeamMemberRoleResponse>, I>>(base?: I): UpdateTeamMemberRoleResponse {
    return UpdateTeamMemberRoleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTeamMemberRoleResponse>, I>>(object: I): UpdateTeamMemberRoleResponse {
    const message = createBaseUpdateTeamMemberRoleResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseRequestTeamCreationRequest(): RequestTeamCreationRequest {
  return { slug: "", displayName: "", description: "", region: "" };
}

export const RequestTeamCreationRequest: MessageFns<RequestTeamCreationRequest> = {
  encode(message: RequestTeamCreationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.slug !== "") {
      writer.uint32(10).string(message.slug);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.region !== "") {
      writer.uint32(34).string(message.region);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestTeamCreationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestTeamCreationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.region = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestTeamCreationRequest {
    return {
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
    };
  },

  toJSON(message: RequestTeamCreationRequest): unknown {
    const obj: any = {};
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestTeamCreationRequest>, I>>(base?: I): RequestTeamCreationRequest {
    return RequestTeamCreationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestTeamCreationRequest>, I>>(object: I): RequestTeamCreationRequest {
    const message = createBaseRequestTeamCreationRequest();
    message.slug = object.slug ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.region = object.region ?? "";
    return message;
  },
};

function createBaseRequestTeamCreationResponse(): RequestTeamCreationResponse {
  return { requestId: "", status: "" };
}

export const RequestTeamCreationResponse: MessageFns<RequestTeamCreationResponse> = {
  encode(message: RequestTeamCreationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestTeamCreationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestTeamCreationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestTeamCreationResponse {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: RequestTeamCreationResponse): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestTeamCreationResponse>, I>>(base?: I): RequestTeamCreationResponse {
    return RequestTeamCreationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestTeamCreationResponse>, I>>(object: I): RequestTeamCreationResponse {
    const message = createBaseRequestTeamCreationResponse();
    message.requestId = object.requestId ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseListTeamRequestsRequest(): ListTeamRequestsRequest {
  return { status: "" };
}

export const ListTeamRequestsRequest: MessageFns<ListTeamRequestsRequest> = {
  encode(message: ListTeamRequestsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTeamRequestsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTeamRequestsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTeamRequestsRequest {
    return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
  },

  toJSON(message: ListTeamRequestsRequest): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTeamRequestsRequest>, I>>(base?: I): ListTeamRequestsRequest {
    return ListTeamRequestsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTeamRequestsRequest>, I>>(object: I): ListTeamRequestsRequest {
    const message = createBaseListTeamRequestsRequest();
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseListTeamRequestsResponse(): ListTeamRequestsResponse {
  return { requests: [] };
}

export const ListTeamRequestsResponse: MessageFns<ListTeamRequestsResponse> = {
  encode(message: ListTeamRequestsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.requests) {
      TeamRequest.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTeamRequestsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTeamRequestsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requests.push(TeamRequest.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTeamRequestsResponse {
    return {
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => TeamRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListTeamRequestsResponse): unknown {
    const obj: any = {};
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => TeamRequest.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTeamRequestsResponse>, I>>(base?: I): ListTeamRequestsResponse {
    return ListTeamRequestsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTeamRequestsResponse>, I>>(object: I): ListTeamRequestsResponse {
    const message = createBaseListTeamRequestsResponse();
    message.requests = object.requests?.map((e) => TeamRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTeamRequest(): TeamRequest {
  return {
    requestId: "",
    slug: "",
    displayName: "",
    description: "",
    region: "",
    status: "",
    requestedBy: "",
    requestedByEmail: "",
    requestedAt: "",
    reviewedBy: "",
    reviewedByEmail: "",
    reviewedAt: "",
    rejectionReason: "",
  };
}

export const TeamRequest: MessageFns<TeamRequest> = {
  encode(message: TeamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.slug !== "") {
      writer.uint32(18).string(message.slug);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.region !== "") {
      writer.uint32(42).string(message.region);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    if (message.requestedBy !== "") {
      writer.uint32(58).string(message.requestedBy);
    }
    if (message.requestedByEmail !== "") {
      writer.uint32(66).string(message.requestedByEmail);
    }
    if (message.requestedAt !== "") {
      writer.uint32(74).string(message.requestedAt);
    }
    if (message.reviewedBy !== "") {
      writer.uint32(82).string(message.reviewedBy);
    }
    if (message.reviewedByEmail !== "") {
      writer.uint32(90).string(message.reviewedByEmail);
    }
    if (message.reviewedAt !== "") {
      writer.uint32(98).string(message.reviewedAt);
    }
    if (message.rejectionReason !== "") {
      writer.uint32(106).string(message.rejectionReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TeamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTeamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.requestedBy = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.requestedByEmail = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.requestedAt = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.reviewedBy = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.reviewedByEmail = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.reviewedAt = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.rejectionReason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TeamRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      requestedBy: isSet(object.requestedBy) ? globalThis.String(object.requestedBy) : "",
      requestedByEmail: isSet(object.requestedByEmail) ? globalThis.String(object.requestedByEmail) : "",
      requestedAt: isSet(object.requestedAt) ? globalThis.String(object.requestedAt) : "",
      reviewedBy: isSet(object.reviewedBy) ? globalThis.String(object.reviewedBy) : "",
      reviewedByEmail: isSet(object.reviewedByEmail) ? globalThis.String(object.reviewedByEmail) : "",
      reviewedAt: isSet(object.reviewedAt) ? globalThis.String(object.reviewedAt) : "",
      rejectionReason: isSet(object.rejectionReason) ? globalThis.String(object.rejectionReason) : "",
    };
  },

  toJSON(message: TeamRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.requestedBy !== "") {
      obj.requestedBy = message.requestedBy;
    }
    if (message.requestedByEmail !== "") {
      obj.requestedByEmail = message.requestedByEmail;
    }
    if (message.requestedAt !== "") {
      obj.requestedAt = message.requestedAt;
    }
    if (message.reviewedBy !== "") {
      obj.reviewedBy = message.reviewedBy;
    }
    if (message.reviewedByEmail !== "") {
      obj.reviewedByEmail = message.reviewedByEmail;
    }
    if (message.reviewedAt !== "") {
      obj.reviewedAt = message.reviewedAt;
    }
    if (message.rejectionReason !== "") {
      obj.rejectionReason = message.rejectionReason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TeamRequest>, I>>(base?: I): TeamRequest {
    return TeamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TeamRequest>, I>>(object: I): TeamRequest {
    const message = createBaseTeamRequest();
    message.requestId = object.requestId ?? "";
    message.slug = object.slug ?? "";
    message.displayName = object.displayName ?? "";
    message.description = object.description ?? "";
    message.region = object.region ?? "";
    message.status = object.status ?? "";
    message.requestedBy = object.requestedBy ?? "";
    message.requestedByEmail = object.requestedByEmail ?? "";
    message.requestedAt = object.requestedAt ?? "";
    message.reviewedBy = object.reviewedBy ?? "";
    message.reviewedByEmail = object.reviewedByEmail ?? "";
    message.reviewedAt = object.reviewedAt ?? "";
    message.rejectionReason = object.rejectionReason ?? "";
    return message;
  },
};

function createBaseGetTeamRequestRequest(): GetTeamRequestRequest {
  return { requestId: "" };
}

export const GetTeamRequestRequest: MessageFns<GetTeamRequestRequest> = {
  encode(message: GetTeamRequestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTeamRequestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTeamRequestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTeamRequestRequest {
    return { requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "" };
  },

  toJSON(message: GetTeamRequestRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTeamRequestRequest>, I>>(base?: I): GetTeamRequestRequest {
    return GetTeamRequestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTeamRequestRequest>, I>>(object: I): GetTeamRequestRequest {
    const message = createBaseGetTeamRequestRequest();
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseGetTeamRequestResponse(): GetTeamRequestResponse {
  return { request: undefined };
}

export const GetTeamRequestResponse: MessageFns<GetTeamRequestResponse> = {
  encode(message: GetTeamRequestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request !== undefined) {
      TeamRequest.encode(message.request, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTeamRequestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTeamRequestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.request = TeamRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTeamRequestResponse {
    return { request: isSet(object.request) ? TeamRequest.fromJSON(object.request) : undefined };
  },

  toJSON(message: GetTeamRequestResponse): unknown {
    const obj: any = {};
    if (message.request !== undefined) {
      obj.request = TeamRequest.toJSON(message.request);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTeamRequestResponse>, I>>(base?: I): GetTeamRequestResponse {
    return GetTeamRequestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTeamRequestResponse>, I>>(object: I): GetTeamRequestResponse {
    const message = createBaseGetTeamRequestResponse();
    message.request = (object.request !== undefined && object.request !== null)
      ? TeamRequest.fromPartial(object.request)
      : undefined;
    return message;
  },
};

function createBaseApproveTeamRequestRequest(): ApproveTeamRequestRequest {
  return { requestId: "" };
}

export const ApproveTeamRequestRequest: MessageFns<ApproveTeamRequestRequest> = {
  encode(message: ApproveTeamRequestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApproveTeamRequestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApproveTeamRequestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApproveTeamRequestRequest {
    return { requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "" };
  },

  toJSON(message: ApproveTeamRequestRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApproveTeamRequestRequest>, I>>(base?: I): ApproveTeamRequestRequest {
    return ApproveTeamRequestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApproveTeamRequestRequest>, I>>(object: I): ApproveTeamRequestRequest {
    const message = createBaseApproveTeamRequestRequest();
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseApproveTeamRequestResponse(): ApproveTeamRequestResponse {
  return { teamId: "" };
}

export const ApproveTeamRequestResponse: MessageFns<ApproveTeamRequestResponse> = {
  encode(message: ApproveTeamRequestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.teamId !== "") {
      writer.uint32(10).string(message.teamId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApproveTeamRequestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApproveTeamRequestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApproveTeamRequestResponse {
    return { teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "" };
  },

  toJSON(message: ApproveTeamRequestResponse): unknown {
    const obj: any = {};
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApproveTeamRequestResponse>, I>>(base?: I): ApproveTeamRequestResponse {
    return ApproveTeamRequestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApproveTeamRequestResponse>, I>>(object: I): ApproveTeamRequestResponse {
    const message = createBaseApproveTeamRequestResponse();
    message.teamId = object.teamId ?? "";
    return message;
  },
};

function createBaseRejectTeamRequestRequest(): RejectTeamRequestRequest {
  return { requestId: "", reason: "" };
}

export const RejectTeamRequestRequest: MessageFns<RejectTeamRequestRequest> = {
  encode(message: RejectTeamRequestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.reason !== "") {
      writer.uint32(18).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RejectTeamRequestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRejectTeamRequestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RejectTeamRequestRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
    };
  },

  toJSON(message: RejectTeamRequestRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RejectTeamRequestRequest>, I>>(base?: I): RejectTeamRequestRequest {
    return RejectTeamRequestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RejectTeamRequestRequest>, I>>(object: I): RejectTeamRequestRequest {
    const message = createBaseRejectTeamRequestRequest();
    message.requestId = object.requestId ?? "";
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseRejectTeamRequestResponse(): RejectTeamRequestResponse {
  return { success: false };
}

export const RejectTeamRequestResponse: MessageFns<RejectTeamRequestResponse> = {
  encode(message: RejectTeamRequestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RejectTeamRequestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRejectTeamRequestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RejectTeamRequestResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: RejectTeamRequestResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RejectTeamRequestResponse>, I>>(base?: I): RejectTeamRequestResponse {
    return RejectTeamRequestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RejectTeamRequestResponse>, I>>(object: I): RejectTeamRequestResponse {
    const message = createBaseRejectTeamRequestResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseGetPlatformSettingsRequest(): GetPlatformSettingsRequest {
  return {};
}

export const GetPlatformSettingsRequest: MessageFns<GetPlatformSettingsRequest> = {
  encode(_: GetPlatformSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPlatformSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlatformSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPlatformSettingsRequest {
    return {};
  },

  toJSON(_: GetPlatformSettingsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPlatformSettingsRequest>, I>>(base?: I): GetPlatformSettingsRequest {
    return GetPlatformSettingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPlatformSettingsRequest>, I>>(_: I): GetPlatformSettingsRequest {
    const message = createBaseGetPlatformSettingsRequest();
    return message;
  },
};

function createBaseGetPlatformSettingsResponse(): GetPlatformSettingsResponse {
  return { settings: undefined };
}

export const GetPlatformSettingsResponse: MessageFns<GetPlatformSettingsResponse> = {
  encode(message: GetPlatformSettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.settings !== undefined) {
      PlatformSettings.encode(message.settings, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPlatformSettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlatformSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.settings = PlatformSettings.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPlatformSettingsResponse {
    return { settings: isSet(object.settings) ? PlatformSettings.fromJSON(object.settings) : undefined };
  },

  toJSON(message: GetPlatformSettingsResponse): unknown {
    const obj: any = {};
    if (message.settings !== undefined) {
      obj.settings = PlatformSettings.toJSON(message.settings);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPlatformSettingsResponse>, I>>(base?: I): GetPlatformSettingsResponse {
    return GetPlatformSettingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPlatformSettingsResponse>, I>>(object: I): GetPlatformSettingsResponse {
    const message = createBaseGetPlatformSettingsResponse();
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? PlatformSettings.fromPartial(object.settings)
      : undefined;
    return message;
  },
};

function createBasePlatformSettings(): PlatformSettings {
  return {
    platformOwnerEmail: "",
    supportEmail: "",
    allowSignup: false,
    oauthProviders: undefined,
    teamSettings: undefined,
    features: undefined,
    cloudProvider: undefined,
  };
}

export const PlatformSettings: MessageFns<PlatformSettings> = {
  encode(message: PlatformSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.platformOwnerEmail !== "") {
      writer.uint32(10).string(message.platformOwnerEmail);
    }
    if (message.supportEmail !== "") {
      writer.uint32(18).string(message.supportEmail);
    }
    if (message.allowSignup !== false) {
      writer.uint32(24).bool(message.allowSignup);
    }
    if (message.oauthProviders !== undefined) {
      OAuthProviderSettings.encode(message.oauthProviders, writer.uint32(34).fork()).join();
    }
    if (message.teamSettings !== undefined) {
      TeamSettings.encode(message.teamSettings, writer.uint32(42).fork()).join();
    }
    if (message.features !== undefined) {
      PlatformFeatures.encode(message.features, writer.uint32(50).fork()).join();
    }
    if (message.cloudProvider !== undefined) {
      CloudProviderConfig.encode(message.cloudProvider, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlatformSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlatformSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.platformOwnerEmail = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.supportEmail = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.allowSignup = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.oauthProviders = OAuthProviderSettings.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.teamSettings = TeamSettings.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.features = PlatformFeatures.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.cloudProvider = CloudProviderConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlatformSettings {
    return {
      platformOwnerEmail: isSet(object.platformOwnerEmail) ? globalThis.String(object.platformOwnerEmail) : "",
      supportEmail: isSet(object.supportEmail) ? globalThis.String(object.supportEmail) : "",
      allowSignup: isSet(object.allowSignup) ? globalThis.Boolean(object.allowSignup) : false,
      oauthProviders: isSet(object.oauthProviders) ? OAuthProviderSettings.fromJSON(object.oauthProviders) : undefined,
      teamSettings: isSet(object.teamSettings) ? TeamSettings.fromJSON(object.teamSettings) : undefined,
      features: isSet(object.features) ? PlatformFeatures.fromJSON(object.features) : undefined,
      cloudProvider: isSet(object.cloudProvider) ? CloudProviderConfig.fromJSON(object.cloudProvider) : undefined,
    };
  },

  toJSON(message: PlatformSettings): unknown {
    const obj: any = {};
    if (message.platformOwnerEmail !== "") {
      obj.platformOwnerEmail = message.platformOwnerEmail;
    }
    if (message.supportEmail !== "") {
      obj.supportEmail = message.supportEmail;
    }
    if (message.allowSignup !== false) {
      obj.allowSignup = message.allowSignup;
    }
    if (message.oauthProviders !== undefined) {
      obj.oauthProviders = OAuthProviderSettings.toJSON(message.oauthProviders);
    }
    if (message.teamSettings !== undefined) {
      obj.teamSettings = TeamSettings.toJSON(message.teamSettings);
    }
    if (message.features !== undefined) {
      obj.features = PlatformFeatures.toJSON(message.features);
    }
    if (message.cloudProvider !== undefined) {
      obj.cloudProvider = CloudProviderConfig.toJSON(message.cloudProvider);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlatformSettings>, I>>(base?: I): PlatformSettings {
    return PlatformSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlatformSettings>, I>>(object: I): PlatformSettings {
    const message = createBasePlatformSettings();
    message.platformOwnerEmail = object.platformOwnerEmail ?? "";
    message.supportEmail = object.supportEmail ?? "";
    message.allowSignup = object.allowSignup ?? false;
    message.oauthProviders = (object.oauthProviders !== undefined && object.oauthProviders !== null)
      ? OAuthProviderSettings.fromPartial(object.oauthProviders)
      : undefined;
    message.teamSettings = (object.teamSettings !== undefined && object.teamSettings !== null)
      ? TeamSettings.fromPartial(object.teamSettings)
      : undefined;
    message.features = (object.features !== undefined && object.features !== null)
      ? PlatformFeatures.fromPartial(object.features)
      : undefined;
    message.cloudProvider = (object.cloudProvider !== undefined && object.cloudProvider !== null)
      ? CloudProviderConfig.fromPartial(object.cloudProvider)
      : undefined;
    return message;
  },
};

function createBaseOAuthProviderSettings(): OAuthProviderSettings {
  return { google: undefined, github: undefined, microsoft: undefined };
}

export const OAuthProviderSettings: MessageFns<OAuthProviderSettings> = {
  encode(message: OAuthProviderSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.google !== undefined) {
      OAuthProvider.encode(message.google, writer.uint32(10).fork()).join();
    }
    if (message.github !== undefined) {
      OAuthProvider.encode(message.github, writer.uint32(18).fork()).join();
    }
    if (message.microsoft !== undefined) {
      MicrosoftOAuthProvider.encode(message.microsoft, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OAuthProviderSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOAuthProviderSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.google = OAuthProvider.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.github = OAuthProvider.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.microsoft = MicrosoftOAuthProvider.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OAuthProviderSettings {
    return {
      google: isSet(object.google) ? OAuthProvider.fromJSON(object.google) : undefined,
      github: isSet(object.github) ? OAuthProvider.fromJSON(object.github) : undefined,
      microsoft: isSet(object.microsoft) ? MicrosoftOAuthProvider.fromJSON(object.microsoft) : undefined,
    };
  },

  toJSON(message: OAuthProviderSettings): unknown {
    const obj: any = {};
    if (message.google !== undefined) {
      obj.google = OAuthProvider.toJSON(message.google);
    }
    if (message.github !== undefined) {
      obj.github = OAuthProvider.toJSON(message.github);
    }
    if (message.microsoft !== undefined) {
      obj.microsoft = MicrosoftOAuthProvider.toJSON(message.microsoft);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OAuthProviderSettings>, I>>(base?: I): OAuthProviderSettings {
    return OAuthProviderSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OAuthProviderSettings>, I>>(object: I): OAuthProviderSettings {
    const message = createBaseOAuthProviderSettings();
    message.google = (object.google !== undefined && object.google !== null)
      ? OAuthProvider.fromPartial(object.google)
      : undefined;
    message.github = (object.github !== undefined && object.github !== null)
      ? OAuthProvider.fromPartial(object.github)
      : undefined;
    message.microsoft = (object.microsoft !== undefined && object.microsoft !== null)
      ? MicrosoftOAuthProvider.fromPartial(object.microsoft)
      : undefined;
    return message;
  },
};

function createBaseOAuthProvider(): OAuthProvider {
  return { enabled: false, clientId: "", clientSecret: "" };
}

export const OAuthProvider: MessageFns<OAuthProvider> = {
  encode(message: OAuthProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OAuthProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOAuthProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OAuthProvider {
    return {
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
    };
  },

  toJSON(message: OAuthProvider): unknown {
    const obj: any = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OAuthProvider>, I>>(base?: I): OAuthProvider {
    return OAuthProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OAuthProvider>, I>>(object: I): OAuthProvider {
    const message = createBaseOAuthProvider();
    message.enabled = object.enabled ?? false;
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    return message;
  },
};

function createBaseMicrosoftOAuthProvider(): MicrosoftOAuthProvider {
  return { enabled: false, clientId: "", clientSecret: "", tenantId: "" };
}

export const MicrosoftOAuthProvider: MessageFns<MicrosoftOAuthProvider> = {
  encode(message: MicrosoftOAuthProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.tenantId !== "") {
      writer.uint32(34).string(message.tenantId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MicrosoftOAuthProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMicrosoftOAuthProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MicrosoftOAuthProvider {
    return {
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
      tenantId: isSet(object.tenantId) ? globalThis.String(object.tenantId) : "",
    };
  },

  toJSON(message: MicrosoftOAuthProvider): unknown {
    const obj: any = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    if (message.tenantId !== "") {
      obj.tenantId = message.tenantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MicrosoftOAuthProvider>, I>>(base?: I): MicrosoftOAuthProvider {
    return MicrosoftOAuthProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MicrosoftOAuthProvider>, I>>(object: I): MicrosoftOAuthProvider {
    const message = createBaseMicrosoftOAuthProvider();
    message.enabled = object.enabled ?? false;
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.tenantId = object.tenantId ?? "";
    return message;
  },
};

function createBaseTeamSettings(): TeamSettings {
  return { requireApproval: false, autoApproveFirstTeam: false, maxTeamsPerUser: 0 };
}

export const TeamSettings: MessageFns<TeamSettings> = {
  encode(message: TeamSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requireApproval !== false) {
      writer.uint32(8).bool(message.requireApproval);
    }
    if (message.autoApproveFirstTeam !== false) {
      writer.uint32(16).bool(message.autoApproveFirstTeam);
    }
    if (message.maxTeamsPerUser !== 0) {
      writer.uint32(24).int32(message.maxTeamsPerUser);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TeamSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTeamSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.requireApproval = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.autoApproveFirstTeam = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxTeamsPerUser = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TeamSettings {
    return {
      requireApproval: isSet(object.requireApproval) ? globalThis.Boolean(object.requireApproval) : false,
      autoApproveFirstTeam: isSet(object.autoApproveFirstTeam)
        ? globalThis.Boolean(object.autoApproveFirstTeam)
        : false,
      maxTeamsPerUser: isSet(object.maxTeamsPerUser) ? globalThis.Number(object.maxTeamsPerUser) : 0,
    };
  },

  toJSON(message: TeamSettings): unknown {
    const obj: any = {};
    if (message.requireApproval !== false) {
      obj.requireApproval = message.requireApproval;
    }
    if (message.autoApproveFirstTeam !== false) {
      obj.autoApproveFirstTeam = message.autoApproveFirstTeam;
    }
    if (message.maxTeamsPerUser !== 0) {
      obj.maxTeamsPerUser = Math.round(message.maxTeamsPerUser);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TeamSettings>, I>>(base?: I): TeamSettings {
    return TeamSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TeamSettings>, I>>(object: I): TeamSettings {
    const message = createBaseTeamSettings();
    message.requireApproval = object.requireApproval ?? false;
    message.autoApproveFirstTeam = object.autoApproveFirstTeam ?? false;
    message.maxTeamsPerUser = object.maxTeamsPerUser ?? 0;
    return message;
  },
};

function createBasePlatformFeatures(): PlatformFeatures {
  return { enableDeviceFlow: false, enableCLI: false, enableAPI: false };
}

export const PlatformFeatures: MessageFns<PlatformFeatures> = {
  encode(message: PlatformFeatures, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enableDeviceFlow !== false) {
      writer.uint32(8).bool(message.enableDeviceFlow);
    }
    if (message.enableCLI !== false) {
      writer.uint32(16).bool(message.enableCLI);
    }
    if (message.enableAPI !== false) {
      writer.uint32(24).bool(message.enableAPI);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlatformFeatures {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlatformFeatures();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enableDeviceFlow = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enableCLI = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enableAPI = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlatformFeatures {
    return {
      enableDeviceFlow: isSet(object.enableDeviceFlow) ? globalThis.Boolean(object.enableDeviceFlow) : false,
      enableCLI: isSet(object.enableCLI) ? globalThis.Boolean(object.enableCLI) : false,
      enableAPI: isSet(object.enableAPI) ? globalThis.Boolean(object.enableAPI) : false,
    };
  },

  toJSON(message: PlatformFeatures): unknown {
    const obj: any = {};
    if (message.enableDeviceFlow !== false) {
      obj.enableDeviceFlow = message.enableDeviceFlow;
    }
    if (message.enableCLI !== false) {
      obj.enableCLI = message.enableCLI;
    }
    if (message.enableAPI !== false) {
      obj.enableAPI = message.enableAPI;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlatformFeatures>, I>>(base?: I): PlatformFeatures {
    return PlatformFeatures.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlatformFeatures>, I>>(object: I): PlatformFeatures {
    const message = createBasePlatformFeatures();
    message.enableDeviceFlow = object.enableDeviceFlow ?? false;
    message.enableCLI = object.enableCLI ?? false;
    message.enableAPI = object.enableAPI ?? false;
    return message;
  },
};

function createBaseCloudProviderConfig(): CloudProviderConfig {
  return { provider: "", aws: undefined, gcp: undefined, azure: undefined, digitalocean: undefined };
}

export const CloudProviderConfig: MessageFns<CloudProviderConfig> = {
  encode(message: CloudProviderConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.provider !== "") {
      writer.uint32(10).string(message.provider);
    }
    if (message.aws !== undefined) {
      AWSConfig.encode(message.aws, writer.uint32(18).fork()).join();
    }
    if (message.gcp !== undefined) {
      GCPConfig.encode(message.gcp, writer.uint32(26).fork()).join();
    }
    if (message.azure !== undefined) {
      AzureConfig.encode(message.azure, writer.uint32(34).fork()).join();
    }
    if (message.digitalocean !== undefined) {
      DigitalOceanConfig.encode(message.digitalocean, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloudProviderConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloudProviderConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.provider = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.aws = AWSConfig.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gcp = GCPConfig.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.azure = AzureConfig.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.digitalocean = DigitalOceanConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloudProviderConfig {
    return {
      provider: isSet(object.provider) ? globalThis.String(object.provider) : "",
      aws: isSet(object.aws) ? AWSConfig.fromJSON(object.aws) : undefined,
      gcp: isSet(object.gcp) ? GCPConfig.fromJSON(object.gcp) : undefined,
      azure: isSet(object.azure) ? AzureConfig.fromJSON(object.azure) : undefined,
      digitalocean: isSet(object.digitalocean) ? DigitalOceanConfig.fromJSON(object.digitalocean) : undefined,
    };
  },

  toJSON(message: CloudProviderConfig): unknown {
    const obj: any = {};
    if (message.provider !== "") {
      obj.provider = message.provider;
    }
    if (message.aws !== undefined) {
      obj.aws = AWSConfig.toJSON(message.aws);
    }
    if (message.gcp !== undefined) {
      obj.gcp = GCPConfig.toJSON(message.gcp);
    }
    if (message.azure !== undefined) {
      obj.azure = AzureConfig.toJSON(message.azure);
    }
    if (message.digitalocean !== undefined) {
      obj.digitalocean = DigitalOceanConfig.toJSON(message.digitalocean);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CloudProviderConfig>, I>>(base?: I): CloudProviderConfig {
    return CloudProviderConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CloudProviderConfig>, I>>(object: I): CloudProviderConfig {
    const message = createBaseCloudProviderConfig();
    message.provider = object.provider ?? "";
    message.aws = (object.aws !== undefined && object.aws !== null) ? AWSConfig.fromPartial(object.aws) : undefined;
    message.gcp = (object.gcp !== undefined && object.gcp !== null) ? GCPConfig.fromPartial(object.gcp) : undefined;
    message.azure = (object.azure !== undefined && object.azure !== null)
      ? AzureConfig.fromPartial(object.azure)
      : undefined;
    message.digitalocean = (object.digitalocean !== undefined && object.digitalocean !== null)
      ? DigitalOceanConfig.fromPartial(object.digitalocean)
      : undefined;
    return message;
  },
};

function createBaseAWSConfig(): AWSConfig {
  return { accessKeyId: "", secretAccessKey: "", region: "" };
}

export const AWSConfig: MessageFns<AWSConfig> = {
  encode(message: AWSConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessKeyId !== "") {
      writer.uint32(10).string(message.accessKeyId);
    }
    if (message.secretAccessKey !== "") {
      writer.uint32(18).string(message.secretAccessKey);
    }
    if (message.region !== "") {
      writer.uint32(26).string(message.region);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AWSConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAWSConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessKeyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.secretAccessKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.region = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AWSConfig {
    return {
      accessKeyId: isSet(object.accessKeyId) ? globalThis.String(object.accessKeyId) : "",
      secretAccessKey: isSet(object.secretAccessKey) ? globalThis.String(object.secretAccessKey) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
    };
  },

  toJSON(message: AWSConfig): unknown {
    const obj: any = {};
    if (message.accessKeyId !== "") {
      obj.accessKeyId = message.accessKeyId;
    }
    if (message.secretAccessKey !== "") {
      obj.secretAccessKey = message.secretAccessKey;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AWSConfig>, I>>(base?: I): AWSConfig {
    return AWSConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AWSConfig>, I>>(object: I): AWSConfig {
    const message = createBaseAWSConfig();
    message.accessKeyId = object.accessKeyId ?? "";
    message.secretAccessKey = object.secretAccessKey ?? "";
    message.region = object.region ?? "";
    return message;
  },
};

function createBaseGCPConfig(): GCPConfig {
  return { projectId: "", serviceAccountKey: "" };
}

export const GCPConfig: MessageFns<GCPConfig> = {
  encode(message: GCPConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.serviceAccountKey !== "") {
      writer.uint32(18).string(message.serviceAccountKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GCPConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGCPConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serviceAccountKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GCPConfig {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      serviceAccountKey: isSet(object.serviceAccountKey) ? globalThis.String(object.serviceAccountKey) : "",
    };
  },

  toJSON(message: GCPConfig): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.serviceAccountKey !== "") {
      obj.serviceAccountKey = message.serviceAccountKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GCPConfig>, I>>(base?: I): GCPConfig {
    return GCPConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GCPConfig>, I>>(object: I): GCPConfig {
    const message = createBaseGCPConfig();
    message.projectId = object.projectId ?? "";
    message.serviceAccountKey = object.serviceAccountKey ?? "";
    return message;
  },
};

function createBaseAzureConfig(): AzureConfig {
  return { subscriptionId: "", tenantId: "", clientId: "", clientSecret: "" };
}

export const AzureConfig: MessageFns<AzureConfig> = {
  encode(message: AzureConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subscriptionId !== "") {
      writer.uint32(10).string(message.subscriptionId);
    }
    if (message.tenantId !== "") {
      writer.uint32(18).string(message.tenantId);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AzureConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAzureConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.subscriptionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AzureConfig {
    return {
      subscriptionId: isSet(object.subscriptionId) ? globalThis.String(object.subscriptionId) : "",
      tenantId: isSet(object.tenantId) ? globalThis.String(object.tenantId) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
    };
  },

  toJSON(message: AzureConfig): unknown {
    const obj: any = {};
    if (message.subscriptionId !== "") {
      obj.subscriptionId = message.subscriptionId;
    }
    if (message.tenantId !== "") {
      obj.tenantId = message.tenantId;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.clientSecret !== "") {
      obj.clientSecret = message.clientSecret;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AzureConfig>, I>>(base?: I): AzureConfig {
    return AzureConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AzureConfig>, I>>(object: I): AzureConfig {
    const message = createBaseAzureConfig();
    message.subscriptionId = object.subscriptionId ?? "";
    message.tenantId = object.tenantId ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    return message;
  },
};

function createBaseDigitalOceanConfig(): DigitalOceanConfig {
  return { token: "" };
}

export const DigitalOceanConfig: MessageFns<DigitalOceanConfig> = {
  encode(message: DigitalOceanConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DigitalOceanConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDigitalOceanConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DigitalOceanConfig {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: DigitalOceanConfig): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DigitalOceanConfig>, I>>(base?: I): DigitalOceanConfig {
    return DigitalOceanConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DigitalOceanConfig>, I>>(object: I): DigitalOceanConfig {
    const message = createBaseDigitalOceanConfig();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseUpdatePlatformSettingsRequest(): UpdatePlatformSettingsRequest {
  return { settings: undefined };
}

export const UpdatePlatformSettingsRequest: MessageFns<UpdatePlatformSettingsRequest> = {
  encode(message: UpdatePlatformSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.settings !== undefined) {
      PlatformSettings.encode(message.settings, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePlatformSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePlatformSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.settings = PlatformSettings.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePlatformSettingsRequest {
    return { settings: isSet(object.settings) ? PlatformSettings.fromJSON(object.settings) : undefined };
  },

  toJSON(message: UpdatePlatformSettingsRequest): unknown {
    const obj: any = {};
    if (message.settings !== undefined) {
      obj.settings = PlatformSettings.toJSON(message.settings);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePlatformSettingsRequest>, I>>(base?: I): UpdatePlatformSettingsRequest {
    return UpdatePlatformSettingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePlatformSettingsRequest>, I>>(
    object: I,
  ): UpdatePlatformSettingsRequest {
    const message = createBaseUpdatePlatformSettingsRequest();
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? PlatformSettings.fromPartial(object.settings)
      : undefined;
    return message;
  },
};

function createBaseUpdatePlatformSettingsResponse(): UpdatePlatformSettingsResponse {
  return { success: false };
}

export const UpdatePlatformSettingsResponse: MessageFns<UpdatePlatformSettingsResponse> = {
  encode(message: UpdatePlatformSettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePlatformSettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePlatformSettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePlatformSettingsResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: UpdatePlatformSettingsResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePlatformSettingsResponse>, I>>(base?: I): UpdatePlatformSettingsResponse {
    return UpdatePlatformSettingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePlatformSettingsResponse>, I>>(
    object: I,
  ): UpdatePlatformSettingsResponse {
    const message = createBaseUpdatePlatformSettingsResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseInvitePlatformUserRequest(): InvitePlatformUserRequest {
  return { email: "", role: "" };
}

export const InvitePlatformUserRequest: MessageFns<InvitePlatformUserRequest> = {
  encode(message: InvitePlatformUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.role !== "") {
      writer.uint32(18).string(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvitePlatformUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvitePlatformUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.role = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvitePlatformUserRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
    };
  },

  toJSON(message: InvitePlatformUserRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvitePlatformUserRequest>, I>>(base?: I): InvitePlatformUserRequest {
    return InvitePlatformUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvitePlatformUserRequest>, I>>(object: I): InvitePlatformUserRequest {
    const message = createBaseInvitePlatformUserRequest();
    message.email = object.email ?? "";
    message.role = object.role ?? "";
    return message;
  },
};

function createBaseInvitePlatformUserResponse(): InvitePlatformUserResponse {
  return { success: false, invitationId: "", error: "" };
}

export const InvitePlatformUserResponse: MessageFns<InvitePlatformUserResponse> = {
  encode(message: InvitePlatformUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.invitationId !== "") {
      writer.uint32(18).string(message.invitationId);
    }
    if (message.error !== "") {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvitePlatformUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvitePlatformUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.invitationId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvitePlatformUserResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      invitationId: isSet(object.invitationId) ? globalThis.String(object.invitationId) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: InvitePlatformUserResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.invitationId !== "") {
      obj.invitationId = message.invitationId;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvitePlatformUserResponse>, I>>(base?: I): InvitePlatformUserResponse {
    return InvitePlatformUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvitePlatformUserResponse>, I>>(object: I): InvitePlatformUserResponse {
    const message = createBaseInvitePlatformUserResponse();
    message.success = object.success ?? false;
    message.invitationId = object.invitationId ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseListPlatformInvitationsRequest(): ListPlatformInvitationsRequest {
  return { status: "" };
}

export const ListPlatformInvitationsRequest: MessageFns<ListPlatformInvitationsRequest> = {
  encode(message: ListPlatformInvitationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPlatformInvitationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPlatformInvitationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPlatformInvitationsRequest {
    return { status: isSet(object.status) ? globalThis.String(object.status) : "" };
  },

  toJSON(message: ListPlatformInvitationsRequest): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPlatformInvitationsRequest>, I>>(base?: I): ListPlatformInvitationsRequest {
    return ListPlatformInvitationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPlatformInvitationsRequest>, I>>(
    object: I,
  ): ListPlatformInvitationsRequest {
    const message = createBaseListPlatformInvitationsRequest();
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseListPlatformInvitationsResponse(): ListPlatformInvitationsResponse {
  return { invitations: [] };
}

export const ListPlatformInvitationsResponse: MessageFns<ListPlatformInvitationsResponse> = {
  encode(message: ListPlatformInvitationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.invitations) {
      PlatformInvitation.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPlatformInvitationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPlatformInvitationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.invitations.push(PlatformInvitation.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPlatformInvitationsResponse {
    return {
      invitations: globalThis.Array.isArray(object?.invitations)
        ? object.invitations.map((e: any) => PlatformInvitation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListPlatformInvitationsResponse): unknown {
    const obj: any = {};
    if (message.invitations?.length) {
      obj.invitations = message.invitations.map((e) => PlatformInvitation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPlatformInvitationsResponse>, I>>(base?: I): ListPlatformInvitationsResponse {
    return ListPlatformInvitationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPlatformInvitationsResponse>, I>>(
    object: I,
  ): ListPlatformInvitationsResponse {
    const message = createBaseListPlatformInvitationsResponse();
    message.invitations = object.invitations?.map((e) => PlatformInvitation.fromPartial(e)) || [];
    return message;
  },
};

function createBasePlatformInvitation(): PlatformInvitation {
  return {
    id: "",
    email: "",
    role: "",
    invitedBy: "",
    invitedByEmail: "",
    status: "",
    createdAt: "",
    expiresAt: "",
    acceptedAt: "",
  };
}

export const PlatformInvitation: MessageFns<PlatformInvitation> = {
  encode(message: PlatformInvitation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    if (message.invitedBy !== "") {
      writer.uint32(34).string(message.invitedBy);
    }
    if (message.invitedByEmail !== "") {
      writer.uint32(42).string(message.invitedByEmail);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    if (message.createdAt !== "") {
      writer.uint32(58).string(message.createdAt);
    }
    if (message.expiresAt !== "") {
      writer.uint32(66).string(message.expiresAt);
    }
    if (message.acceptedAt !== "") {
      writer.uint32(74).string(message.acceptedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlatformInvitation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlatformInvitation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.invitedBy = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.invitedByEmail = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.expiresAt = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.acceptedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlatformInvitation {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      invitedBy: isSet(object.invitedBy) ? globalThis.String(object.invitedBy) : "",
      invitedByEmail: isSet(object.invitedByEmail) ? globalThis.String(object.invitedByEmail) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      expiresAt: isSet(object.expiresAt) ? globalThis.String(object.expiresAt) : "",
      acceptedAt: isSet(object.acceptedAt) ? globalThis.String(object.acceptedAt) : "",
    };
  },

  toJSON(message: PlatformInvitation): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.invitedBy !== "") {
      obj.invitedBy = message.invitedBy;
    }
    if (message.invitedByEmail !== "") {
      obj.invitedByEmail = message.invitedByEmail;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.expiresAt !== "") {
      obj.expiresAt = message.expiresAt;
    }
    if (message.acceptedAt !== "") {
      obj.acceptedAt = message.acceptedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlatformInvitation>, I>>(base?: I): PlatformInvitation {
    return PlatformInvitation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlatformInvitation>, I>>(object: I): PlatformInvitation {
    const message = createBasePlatformInvitation();
    message.id = object.id ?? "";
    message.email = object.email ?? "";
    message.role = object.role ?? "";
    message.invitedBy = object.invitedBy ?? "";
    message.invitedByEmail = object.invitedByEmail ?? "";
    message.status = object.status ?? "";
    message.createdAt = object.createdAt ?? "";
    message.expiresAt = object.expiresAt ?? "";
    message.acceptedAt = object.acceptedAt ?? "";
    return message;
  },
};

function createBaseResendPlatformInvitationRequest(): ResendPlatformInvitationRequest {
  return { invitationId: "" };
}

export const ResendPlatformInvitationRequest: MessageFns<ResendPlatformInvitationRequest> = {
  encode(message: ResendPlatformInvitationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invitationId !== "") {
      writer.uint32(10).string(message.invitationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResendPlatformInvitationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendPlatformInvitationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.invitationId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResendPlatformInvitationRequest {
    return { invitationId: isSet(object.invitationId) ? globalThis.String(object.invitationId) : "" };
  },

  toJSON(message: ResendPlatformInvitationRequest): unknown {
    const obj: any = {};
    if (message.invitationId !== "") {
      obj.invitationId = message.invitationId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResendPlatformInvitationRequest>, I>>(base?: I): ResendPlatformInvitationRequest {
    return ResendPlatformInvitationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResendPlatformInvitationRequest>, I>>(
    object: I,
  ): ResendPlatformInvitationRequest {
    const message = createBaseResendPlatformInvitationRequest();
    message.invitationId = object.invitationId ?? "";
    return message;
  },
};

function createBaseResendPlatformInvitationResponse(): ResendPlatformInvitationResponse {
  return { success: false, error: "" };
}

export const ResendPlatformInvitationResponse: MessageFns<ResendPlatformInvitationResponse> = {
  encode(message: ResendPlatformInvitationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResendPlatformInvitationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendPlatformInvitationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResendPlatformInvitationResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: ResendPlatformInvitationResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResendPlatformInvitationResponse>, I>>(
    base?: I,
  ): ResendPlatformInvitationResponse {
    return ResendPlatformInvitationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResendPlatformInvitationResponse>, I>>(
    object: I,
  ): ResendPlatformInvitationResponse {
    const message = createBaseResendPlatformInvitationResponse();
    message.success = object.success ?? false;
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseCancelPlatformInvitationRequest(): CancelPlatformInvitationRequest {
  return { invitationId: "" };
}

export const CancelPlatformInvitationRequest: MessageFns<CancelPlatformInvitationRequest> = {
  encode(message: CancelPlatformInvitationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.invitationId !== "") {
      writer.uint32(10).string(message.invitationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelPlatformInvitationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelPlatformInvitationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.invitationId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelPlatformInvitationRequest {
    return { invitationId: isSet(object.invitationId) ? globalThis.String(object.invitationId) : "" };
  },

  toJSON(message: CancelPlatformInvitationRequest): unknown {
    const obj: any = {};
    if (message.invitationId !== "") {
      obj.invitationId = message.invitationId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelPlatformInvitationRequest>, I>>(base?: I): CancelPlatformInvitationRequest {
    return CancelPlatformInvitationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelPlatformInvitationRequest>, I>>(
    object: I,
  ): CancelPlatformInvitationRequest {
    const message = createBaseCancelPlatformInvitationRequest();
    message.invitationId = object.invitationId ?? "";
    return message;
  },
};

function createBaseCancelPlatformInvitationResponse(): CancelPlatformInvitationResponse {
  return { success: false };
}

export const CancelPlatformInvitationResponse: MessageFns<CancelPlatformInvitationResponse> = {
  encode(message: CancelPlatformInvitationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelPlatformInvitationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelPlatformInvitationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelPlatformInvitationResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: CancelPlatformInvitationResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelPlatformInvitationResponse>, I>>(
    base?: I,
  ): CancelPlatformInvitationResponse {
    return CancelPlatformInvitationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelPlatformInvitationResponse>, I>>(
    object: I,
  ): CancelPlatformInvitationResponse {
    const message = createBaseCancelPlatformInvitationResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseAcceptPlatformInvitationRequest(): AcceptPlatformInvitationRequest {
  return { token: "" };
}

export const AcceptPlatformInvitationRequest: MessageFns<AcceptPlatformInvitationRequest> = {
  encode(message: AcceptPlatformInvitationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AcceptPlatformInvitationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcceptPlatformInvitationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AcceptPlatformInvitationRequest {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: AcceptPlatformInvitationRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AcceptPlatformInvitationRequest>, I>>(base?: I): AcceptPlatformInvitationRequest {
    return AcceptPlatformInvitationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AcceptPlatformInvitationRequest>, I>>(
    object: I,
  ): AcceptPlatformInvitationRequest {
    const message = createBaseAcceptPlatformInvitationRequest();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseAcceptPlatformInvitationResponse(): AcceptPlatformInvitationResponse {
  return { success: false, error: "" };
}

export const AcceptPlatformInvitationResponse: MessageFns<AcceptPlatformInvitationResponse> = {
  encode(message: AcceptPlatformInvitationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AcceptPlatformInvitationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcceptPlatformInvitationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AcceptPlatformInvitationResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: AcceptPlatformInvitationResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AcceptPlatformInvitationResponse>, I>>(
    base?: I,
  ): AcceptPlatformInvitationResponse {
    return AcceptPlatformInvitationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AcceptPlatformInvitationResponse>, I>>(
    object: I,
  ): AcceptPlatformInvitationResponse {
    const message = createBaseAcceptPlatformInvitationResponse();
    message.success = object.success ?? false;
    message.error = object.error ?? "";
    return message;
  },
};

export type AccountsService = typeof AccountsService;
export const AccountsService = {
  getTeamDetails: {
    path: "/Accounts/GetTeamDetails",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetTeamDetailsRequest): Buffer =>
      Buffer.from(GetTeamDetailsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetTeamDetailsRequest => GetTeamDetailsRequest.decode(value),
    responseSerialize: (value: GetTeamDetailsResponse): Buffer =>
      Buffer.from(GetTeamDetailsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetTeamDetailsResponse => GetTeamDetailsResponse.decode(value),
  },
  createTeam: {
    path: "/Accounts/CreateTeam",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateTeamRequest): Buffer => Buffer.from(CreateTeamRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateTeamRequest => CreateTeamRequest.decode(value),
    responseSerialize: (value: CreateTeamResponse): Buffer => Buffer.from(CreateTeamResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateTeamResponse => CreateTeamResponse.decode(value),
  },
  checkTeamSlugAvailability: {
    path: "/Accounts/CheckTeamSlugAvailability",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CheckTeamSlugAvailabilityRequest): Buffer =>
      Buffer.from(CheckTeamSlugAvailabilityRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CheckTeamSlugAvailabilityRequest =>
      CheckTeamSlugAvailabilityRequest.decode(value),
    responseSerialize: (value: CheckTeamSlugAvailabilityResponse): Buffer =>
      Buffer.from(CheckTeamSlugAvailabilityResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CheckTeamSlugAvailabilityResponse =>
      CheckTeamSlugAvailabilityResponse.decode(value),
  },
  generateTeamSlugSuggestions: {
    path: "/Accounts/GenerateTeamSlugSuggestions",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GenerateTeamSlugSuggestionsRequest): Buffer =>
      Buffer.from(GenerateTeamSlugSuggestionsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GenerateTeamSlugSuggestionsRequest =>
      GenerateTeamSlugSuggestionsRequest.decode(value),
    responseSerialize: (value: GenerateTeamSlugSuggestionsResponse): Buffer =>
      Buffer.from(GenerateTeamSlugSuggestionsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GenerateTeamSlugSuggestionsResponse =>
      GenerateTeamSlugSuggestionsResponse.decode(value),
  },
  disableTeam: {
    path: "/Accounts/DisableTeam",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DisableTeamRequest): Buffer => Buffer.from(DisableTeamRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): DisableTeamRequest => DisableTeamRequest.decode(value),
    responseSerialize: (value: DisableTeamResponse): Buffer => Buffer.from(DisableTeamResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): DisableTeamResponse => DisableTeamResponse.decode(value),
  },
  enableTeam: {
    path: "/Accounts/EnableTeam",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EnableTeamRequest): Buffer => Buffer.from(EnableTeamRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EnableTeamRequest => EnableTeamRequest.decode(value),
    responseSerialize: (value: EnableTeamResponse): Buffer => Buffer.from(EnableTeamResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): EnableTeamResponse => EnableTeamResponse.decode(value),
  },
  deleteTeam: {
    path: "/Accounts/DeleteTeam",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteTeamRequest): Buffer => Buffer.from(DeleteTeamRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): DeleteTeamRequest => DeleteTeamRequest.decode(value),
    responseSerialize: (value: DeleteTeamResponse): Buffer => Buffer.from(DeleteTeamResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): DeleteTeamResponse => DeleteTeamResponse.decode(value),
  },
  listTeams: {
    path: "/Accounts/ListTeams",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListTeamsRequest): Buffer => Buffer.from(ListTeamsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListTeamsRequest => ListTeamsRequest.decode(value),
    responseSerialize: (value: ListTeamsResponse): Buffer => Buffer.from(ListTeamsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListTeamsResponse => ListTeamsResponse.decode(value),
  },
  searchTeams: {
    path: "/Accounts/SearchTeams",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SearchTeamsRequest): Buffer => Buffer.from(SearchTeamsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SearchTeamsRequest => SearchTeamsRequest.decode(value),
    responseSerialize: (value: SearchTeamsResponse): Buffer => Buffer.from(SearchTeamsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SearchTeamsResponse => SearchTeamsResponse.decode(value),
  },
  getUserTeams: {
    path: "/Accounts/GetUserTeams",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserTeamsRequest): Buffer => Buffer.from(GetUserTeamsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUserTeamsRequest => GetUserTeamsRequest.decode(value),
    responseSerialize: (value: GetUserTeamsResponse): Buffer =>
      Buffer.from(GetUserTeamsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetUserTeamsResponse => GetUserTeamsResponse.decode(value),
  },
  getTeamMembers: {
    path: "/Accounts/GetTeamMembers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetTeamMembersRequest): Buffer =>
      Buffer.from(GetTeamMembersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetTeamMembersRequest => GetTeamMembersRequest.decode(value),
    responseSerialize: (value: GetTeamMembersResponse): Buffer =>
      Buffer.from(GetTeamMembersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetTeamMembersResponse => GetTeamMembersResponse.decode(value),
  },
  inviteTeamMember: {
    path: "/Accounts/InviteTeamMember",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InviteTeamMemberRequest): Buffer =>
      Buffer.from(InviteTeamMemberRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): InviteTeamMemberRequest => InviteTeamMemberRequest.decode(value),
    responseSerialize: (value: InviteTeamMemberResponse): Buffer =>
      Buffer.from(InviteTeamMemberResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): InviteTeamMemberResponse => InviteTeamMemberResponse.decode(value),
  },
  removeTeamMember: {
    path: "/Accounts/RemoveTeamMember",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveTeamMemberRequest): Buffer =>
      Buffer.from(RemoveTeamMemberRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RemoveTeamMemberRequest => RemoveTeamMemberRequest.decode(value),
    responseSerialize: (value: RemoveTeamMemberResponse): Buffer =>
      Buffer.from(RemoveTeamMemberResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): RemoveTeamMemberResponse => RemoveTeamMemberResponse.decode(value),
  },
  updateTeamMemberRole: {
    path: "/Accounts/UpdateTeamMemberRole",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateTeamMemberRoleRequest): Buffer =>
      Buffer.from(UpdateTeamMemberRoleRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateTeamMemberRoleRequest => UpdateTeamMemberRoleRequest.decode(value),
    responseSerialize: (value: UpdateTeamMemberRoleResponse): Buffer =>
      Buffer.from(UpdateTeamMemberRoleResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UpdateTeamMemberRoleResponse => UpdateTeamMemberRoleResponse.decode(value),
  },
  /** Platform management */
  requestTeamCreation: {
    path: "/Accounts/RequestTeamCreation",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RequestTeamCreationRequest): Buffer =>
      Buffer.from(RequestTeamCreationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RequestTeamCreationRequest => RequestTeamCreationRequest.decode(value),
    responseSerialize: (value: RequestTeamCreationResponse): Buffer =>
      Buffer.from(RequestTeamCreationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): RequestTeamCreationResponse => RequestTeamCreationResponse.decode(value),
  },
  listTeamRequests: {
    path: "/Accounts/ListTeamRequests",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListTeamRequestsRequest): Buffer =>
      Buffer.from(ListTeamRequestsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListTeamRequestsRequest => ListTeamRequestsRequest.decode(value),
    responseSerialize: (value: ListTeamRequestsResponse): Buffer =>
      Buffer.from(ListTeamRequestsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListTeamRequestsResponse => ListTeamRequestsResponse.decode(value),
  },
  getTeamRequest: {
    path: "/Accounts/GetTeamRequest",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetTeamRequestRequest): Buffer =>
      Buffer.from(GetTeamRequestRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetTeamRequestRequest => GetTeamRequestRequest.decode(value),
    responseSerialize: (value: GetTeamRequestResponse): Buffer =>
      Buffer.from(GetTeamRequestResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetTeamRequestResponse => GetTeamRequestResponse.decode(value),
  },
  approveTeamRequest: {
    path: "/Accounts/ApproveTeamRequest",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ApproveTeamRequestRequest): Buffer =>
      Buffer.from(ApproveTeamRequestRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ApproveTeamRequestRequest => ApproveTeamRequestRequest.decode(value),
    responseSerialize: (value: ApproveTeamRequestResponse): Buffer =>
      Buffer.from(ApproveTeamRequestResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ApproveTeamRequestResponse => ApproveTeamRequestResponse.decode(value),
  },
  rejectTeamRequest: {
    path: "/Accounts/RejectTeamRequest",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RejectTeamRequestRequest): Buffer =>
      Buffer.from(RejectTeamRequestRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RejectTeamRequestRequest => RejectTeamRequestRequest.decode(value),
    responseSerialize: (value: RejectTeamRequestResponse): Buffer =>
      Buffer.from(RejectTeamRequestResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): RejectTeamRequestResponse => RejectTeamRequestResponse.decode(value),
  },
  /** Platform settings management */
  getPlatformSettings: {
    path: "/Accounts/GetPlatformSettings",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetPlatformSettingsRequest): Buffer =>
      Buffer.from(GetPlatformSettingsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetPlatformSettingsRequest => GetPlatformSettingsRequest.decode(value),
    responseSerialize: (value: GetPlatformSettingsResponse): Buffer =>
      Buffer.from(GetPlatformSettingsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetPlatformSettingsResponse => GetPlatformSettingsResponse.decode(value),
  },
  updatePlatformSettings: {
    path: "/Accounts/UpdatePlatformSettings",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdatePlatformSettingsRequest): Buffer =>
      Buffer.from(UpdatePlatformSettingsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdatePlatformSettingsRequest => UpdatePlatformSettingsRequest.decode(value),
    responseSerialize: (value: UpdatePlatformSettingsResponse): Buffer =>
      Buffer.from(UpdatePlatformSettingsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UpdatePlatformSettingsResponse =>
      UpdatePlatformSettingsResponse.decode(value),
  },
  /** Platform user invitations */
  invitePlatformUser: {
    path: "/Accounts/InvitePlatformUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InvitePlatformUserRequest): Buffer =>
      Buffer.from(InvitePlatformUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): InvitePlatformUserRequest => InvitePlatformUserRequest.decode(value),
    responseSerialize: (value: InvitePlatformUserResponse): Buffer =>
      Buffer.from(InvitePlatformUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): InvitePlatformUserResponse => InvitePlatformUserResponse.decode(value),
  },
  listPlatformInvitations: {
    path: "/Accounts/ListPlatformInvitations",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListPlatformInvitationsRequest): Buffer =>
      Buffer.from(ListPlatformInvitationsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListPlatformInvitationsRequest => ListPlatformInvitationsRequest.decode(value),
    responseSerialize: (value: ListPlatformInvitationsResponse): Buffer =>
      Buffer.from(ListPlatformInvitationsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListPlatformInvitationsResponse =>
      ListPlatformInvitationsResponse.decode(value),
  },
  resendPlatformInvitation: {
    path: "/Accounts/ResendPlatformInvitation",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ResendPlatformInvitationRequest): Buffer =>
      Buffer.from(ResendPlatformInvitationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ResendPlatformInvitationRequest =>
      ResendPlatformInvitationRequest.decode(value),
    responseSerialize: (value: ResendPlatformInvitationResponse): Buffer =>
      Buffer.from(ResendPlatformInvitationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ResendPlatformInvitationResponse =>
      ResendPlatformInvitationResponse.decode(value),
  },
  cancelPlatformInvitation: {
    path: "/Accounts/CancelPlatformInvitation",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CancelPlatformInvitationRequest): Buffer =>
      Buffer.from(CancelPlatformInvitationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CancelPlatformInvitationRequest =>
      CancelPlatformInvitationRequest.decode(value),
    responseSerialize: (value: CancelPlatformInvitationResponse): Buffer =>
      Buffer.from(CancelPlatformInvitationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CancelPlatformInvitationResponse =>
      CancelPlatformInvitationResponse.decode(value),
  },
  acceptPlatformInvitation: {
    path: "/Accounts/AcceptPlatformInvitation",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AcceptPlatformInvitationRequest): Buffer =>
      Buffer.from(AcceptPlatformInvitationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): AcceptPlatformInvitationRequest =>
      AcceptPlatformInvitationRequest.decode(value),
    responseSerialize: (value: AcceptPlatformInvitationResponse): Buffer =>
      Buffer.from(AcceptPlatformInvitationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AcceptPlatformInvitationResponse =>
      AcceptPlatformInvitationResponse.decode(value),
  },
} as const;

export interface AccountsServer extends UntypedServiceImplementation {
  getTeamDetails: handleUnaryCall<GetTeamDetailsRequest, GetTeamDetailsResponse>;
  createTeam: handleUnaryCall<CreateTeamRequest, CreateTeamResponse>;
  checkTeamSlugAvailability: handleUnaryCall<CheckTeamSlugAvailabilityRequest, CheckTeamSlugAvailabilityResponse>;
  generateTeamSlugSuggestions: handleUnaryCall<GenerateTeamSlugSuggestionsRequest, GenerateTeamSlugSuggestionsResponse>;
  disableTeam: handleUnaryCall<DisableTeamRequest, DisableTeamResponse>;
  enableTeam: handleUnaryCall<EnableTeamRequest, EnableTeamResponse>;
  deleteTeam: handleUnaryCall<DeleteTeamRequest, DeleteTeamResponse>;
  listTeams: handleUnaryCall<ListTeamsRequest, ListTeamsResponse>;
  searchTeams: handleUnaryCall<SearchTeamsRequest, SearchTeamsResponse>;
  getUserTeams: handleUnaryCall<GetUserTeamsRequest, GetUserTeamsResponse>;
  getTeamMembers: handleUnaryCall<GetTeamMembersRequest, GetTeamMembersResponse>;
  inviteTeamMember: handleUnaryCall<InviteTeamMemberRequest, InviteTeamMemberResponse>;
  removeTeamMember: handleUnaryCall<RemoveTeamMemberRequest, RemoveTeamMemberResponse>;
  updateTeamMemberRole: handleUnaryCall<UpdateTeamMemberRoleRequest, UpdateTeamMemberRoleResponse>;
  /** Platform management */
  requestTeamCreation: handleUnaryCall<RequestTeamCreationRequest, RequestTeamCreationResponse>;
  listTeamRequests: handleUnaryCall<ListTeamRequestsRequest, ListTeamRequestsResponse>;
  getTeamRequest: handleUnaryCall<GetTeamRequestRequest, GetTeamRequestResponse>;
  approveTeamRequest: handleUnaryCall<ApproveTeamRequestRequest, ApproveTeamRequestResponse>;
  rejectTeamRequest: handleUnaryCall<RejectTeamRequestRequest, RejectTeamRequestResponse>;
  /** Platform settings management */
  getPlatformSettings: handleUnaryCall<GetPlatformSettingsRequest, GetPlatformSettingsResponse>;
  updatePlatformSettings: handleUnaryCall<UpdatePlatformSettingsRequest, UpdatePlatformSettingsResponse>;
  /** Platform user invitations */
  invitePlatformUser: handleUnaryCall<InvitePlatformUserRequest, InvitePlatformUserResponse>;
  listPlatformInvitations: handleUnaryCall<ListPlatformInvitationsRequest, ListPlatformInvitationsResponse>;
  resendPlatformInvitation: handleUnaryCall<ResendPlatformInvitationRequest, ResendPlatformInvitationResponse>;
  cancelPlatformInvitation: handleUnaryCall<CancelPlatformInvitationRequest, CancelPlatformInvitationResponse>;
  acceptPlatformInvitation: handleUnaryCall<AcceptPlatformInvitationRequest, AcceptPlatformInvitationResponse>;
}

export interface AccountsClient extends Client {
  getTeamDetails(
    request: GetTeamDetailsRequest,
    callback: (error: ServiceError | null, response: GetTeamDetailsResponse) => void,
  ): ClientUnaryCall;
  getTeamDetails(
    request: GetTeamDetailsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetTeamDetailsResponse) => void,
  ): ClientUnaryCall;
  getTeamDetails(
    request: GetTeamDetailsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetTeamDetailsResponse) => void,
  ): ClientUnaryCall;
  createTeam(
    request: CreateTeamRequest,
    callback: (error: ServiceError | null, response: CreateTeamResponse) => void,
  ): ClientUnaryCall;
  createTeam(
    request: CreateTeamRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateTeamResponse) => void,
  ): ClientUnaryCall;
  createTeam(
    request: CreateTeamRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateTeamResponse) => void,
  ): ClientUnaryCall;
  checkTeamSlugAvailability(
    request: CheckTeamSlugAvailabilityRequest,
    callback: (error: ServiceError | null, response: CheckTeamSlugAvailabilityResponse) => void,
  ): ClientUnaryCall;
  checkTeamSlugAvailability(
    request: CheckTeamSlugAvailabilityRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CheckTeamSlugAvailabilityResponse) => void,
  ): ClientUnaryCall;
  checkTeamSlugAvailability(
    request: CheckTeamSlugAvailabilityRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CheckTeamSlugAvailabilityResponse) => void,
  ): ClientUnaryCall;
  generateTeamSlugSuggestions(
    request: GenerateTeamSlugSuggestionsRequest,
    callback: (error: ServiceError | null, response: GenerateTeamSlugSuggestionsResponse) => void,
  ): ClientUnaryCall;
  generateTeamSlugSuggestions(
    request: GenerateTeamSlugSuggestionsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GenerateTeamSlugSuggestionsResponse) => void,
  ): ClientUnaryCall;
  generateTeamSlugSuggestions(
    request: GenerateTeamSlugSuggestionsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GenerateTeamSlugSuggestionsResponse) => void,
  ): ClientUnaryCall;
  disableTeam(
    request: DisableTeamRequest,
    callback: (error: ServiceError | null, response: DisableTeamResponse) => void,
  ): ClientUnaryCall;
  disableTeam(
    request: DisableTeamRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DisableTeamResponse) => void,
  ): ClientUnaryCall;
  disableTeam(
    request: DisableTeamRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DisableTeamResponse) => void,
  ): ClientUnaryCall;
  enableTeam(
    request: EnableTeamRequest,
    callback: (error: ServiceError | null, response: EnableTeamResponse) => void,
  ): ClientUnaryCall;
  enableTeam(
    request: EnableTeamRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: EnableTeamResponse) => void,
  ): ClientUnaryCall;
  enableTeam(
    request: EnableTeamRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: EnableTeamResponse) => void,
  ): ClientUnaryCall;
  deleteTeam(
    request: DeleteTeamRequest,
    callback: (error: ServiceError | null, response: DeleteTeamResponse) => void,
  ): ClientUnaryCall;
  deleteTeam(
    request: DeleteTeamRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteTeamResponse) => void,
  ): ClientUnaryCall;
  deleteTeam(
    request: DeleteTeamRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteTeamResponse) => void,
  ): ClientUnaryCall;
  listTeams(
    request: ListTeamsRequest,
    callback: (error: ServiceError | null, response: ListTeamsResponse) => void,
  ): ClientUnaryCall;
  listTeams(
    request: ListTeamsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListTeamsResponse) => void,
  ): ClientUnaryCall;
  listTeams(
    request: ListTeamsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListTeamsResponse) => void,
  ): ClientUnaryCall;
  searchTeams(
    request: SearchTeamsRequest,
    callback: (error: ServiceError | null, response: SearchTeamsResponse) => void,
  ): ClientUnaryCall;
  searchTeams(
    request: SearchTeamsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SearchTeamsResponse) => void,
  ): ClientUnaryCall;
  searchTeams(
    request: SearchTeamsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SearchTeamsResponse) => void,
  ): ClientUnaryCall;
  getUserTeams(
    request: GetUserTeamsRequest,
    callback: (error: ServiceError | null, response: GetUserTeamsResponse) => void,
  ): ClientUnaryCall;
  getUserTeams(
    request: GetUserTeamsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUserTeamsResponse) => void,
  ): ClientUnaryCall;
  getUserTeams(
    request: GetUserTeamsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUserTeamsResponse) => void,
  ): ClientUnaryCall;
  getTeamMembers(
    request: GetTeamMembersRequest,
    callback: (error: ServiceError | null, response: GetTeamMembersResponse) => void,
  ): ClientUnaryCall;
  getTeamMembers(
    request: GetTeamMembersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetTeamMembersResponse) => void,
  ): ClientUnaryCall;
  getTeamMembers(
    request: GetTeamMembersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetTeamMembersResponse) => void,
  ): ClientUnaryCall;
  inviteTeamMember(
    request: InviteTeamMemberRequest,
    callback: (error: ServiceError | null, response: InviteTeamMemberResponse) => void,
  ): ClientUnaryCall;
  inviteTeamMember(
    request: InviteTeamMemberRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: InviteTeamMemberResponse) => void,
  ): ClientUnaryCall;
  inviteTeamMember(
    request: InviteTeamMemberRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: InviteTeamMemberResponse) => void,
  ): ClientUnaryCall;
  removeTeamMember(
    request: RemoveTeamMemberRequest,
    callback: (error: ServiceError | null, response: RemoveTeamMemberResponse) => void,
  ): ClientUnaryCall;
  removeTeamMember(
    request: RemoveTeamMemberRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveTeamMemberResponse) => void,
  ): ClientUnaryCall;
  removeTeamMember(
    request: RemoveTeamMemberRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveTeamMemberResponse) => void,
  ): ClientUnaryCall;
  updateTeamMemberRole(
    request: UpdateTeamMemberRoleRequest,
    callback: (error: ServiceError | null, response: UpdateTeamMemberRoleResponse) => void,
  ): ClientUnaryCall;
  updateTeamMemberRole(
    request: UpdateTeamMemberRoleRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateTeamMemberRoleResponse) => void,
  ): ClientUnaryCall;
  updateTeamMemberRole(
    request: UpdateTeamMemberRoleRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateTeamMemberRoleResponse) => void,
  ): ClientUnaryCall;
  /** Platform management */
  requestTeamCreation(
    request: RequestTeamCreationRequest,
    callback: (error: ServiceError | null, response: RequestTeamCreationResponse) => void,
  ): ClientUnaryCall;
  requestTeamCreation(
    request: RequestTeamCreationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RequestTeamCreationResponse) => void,
  ): ClientUnaryCall;
  requestTeamCreation(
    request: RequestTeamCreationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RequestTeamCreationResponse) => void,
  ): ClientUnaryCall;
  listTeamRequests(
    request: ListTeamRequestsRequest,
    callback: (error: ServiceError | null, response: ListTeamRequestsResponse) => void,
  ): ClientUnaryCall;
  listTeamRequests(
    request: ListTeamRequestsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListTeamRequestsResponse) => void,
  ): ClientUnaryCall;
  listTeamRequests(
    request: ListTeamRequestsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListTeamRequestsResponse) => void,
  ): ClientUnaryCall;
  getTeamRequest(
    request: GetTeamRequestRequest,
    callback: (error: ServiceError | null, response: GetTeamRequestResponse) => void,
  ): ClientUnaryCall;
  getTeamRequest(
    request: GetTeamRequestRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetTeamRequestResponse) => void,
  ): ClientUnaryCall;
  getTeamRequest(
    request: GetTeamRequestRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetTeamRequestResponse) => void,
  ): ClientUnaryCall;
  approveTeamRequest(
    request: ApproveTeamRequestRequest,
    callback: (error: ServiceError | null, response: ApproveTeamRequestResponse) => void,
  ): ClientUnaryCall;
  approveTeamRequest(
    request: ApproveTeamRequestRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ApproveTeamRequestResponse) => void,
  ): ClientUnaryCall;
  approveTeamRequest(
    request: ApproveTeamRequestRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ApproveTeamRequestResponse) => void,
  ): ClientUnaryCall;
  rejectTeamRequest(
    request: RejectTeamRequestRequest,
    callback: (error: ServiceError | null, response: RejectTeamRequestResponse) => void,
  ): ClientUnaryCall;
  rejectTeamRequest(
    request: RejectTeamRequestRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RejectTeamRequestResponse) => void,
  ): ClientUnaryCall;
  rejectTeamRequest(
    request: RejectTeamRequestRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RejectTeamRequestResponse) => void,
  ): ClientUnaryCall;
  /** Platform settings management */
  getPlatformSettings(
    request: GetPlatformSettingsRequest,
    callback: (error: ServiceError | null, response: GetPlatformSettingsResponse) => void,
  ): ClientUnaryCall;
  getPlatformSettings(
    request: GetPlatformSettingsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetPlatformSettingsResponse) => void,
  ): ClientUnaryCall;
  getPlatformSettings(
    request: GetPlatformSettingsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetPlatformSettingsResponse) => void,
  ): ClientUnaryCall;
  updatePlatformSettings(
    request: UpdatePlatformSettingsRequest,
    callback: (error: ServiceError | null, response: UpdatePlatformSettingsResponse) => void,
  ): ClientUnaryCall;
  updatePlatformSettings(
    request: UpdatePlatformSettingsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdatePlatformSettingsResponse) => void,
  ): ClientUnaryCall;
  updatePlatformSettings(
    request: UpdatePlatformSettingsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdatePlatformSettingsResponse) => void,
  ): ClientUnaryCall;
  /** Platform user invitations */
  invitePlatformUser(
    request: InvitePlatformUserRequest,
    callback: (error: ServiceError | null, response: InvitePlatformUserResponse) => void,
  ): ClientUnaryCall;
  invitePlatformUser(
    request: InvitePlatformUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: InvitePlatformUserResponse) => void,
  ): ClientUnaryCall;
  invitePlatformUser(
    request: InvitePlatformUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: InvitePlatformUserResponse) => void,
  ): ClientUnaryCall;
  listPlatformInvitations(
    request: ListPlatformInvitationsRequest,
    callback: (error: ServiceError | null, response: ListPlatformInvitationsResponse) => void,
  ): ClientUnaryCall;
  listPlatformInvitations(
    request: ListPlatformInvitationsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListPlatformInvitationsResponse) => void,
  ): ClientUnaryCall;
  listPlatformInvitations(
    request: ListPlatformInvitationsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListPlatformInvitationsResponse) => void,
  ): ClientUnaryCall;
  resendPlatformInvitation(
    request: ResendPlatformInvitationRequest,
    callback: (error: ServiceError | null, response: ResendPlatformInvitationResponse) => void,
  ): ClientUnaryCall;
  resendPlatformInvitation(
    request: ResendPlatformInvitationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ResendPlatformInvitationResponse) => void,
  ): ClientUnaryCall;
  resendPlatformInvitation(
    request: ResendPlatformInvitationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResendPlatformInvitationResponse) => void,
  ): ClientUnaryCall;
  cancelPlatformInvitation(
    request: CancelPlatformInvitationRequest,
    callback: (error: ServiceError | null, response: CancelPlatformInvitationResponse) => void,
  ): ClientUnaryCall;
  cancelPlatformInvitation(
    request: CancelPlatformInvitationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CancelPlatformInvitationResponse) => void,
  ): ClientUnaryCall;
  cancelPlatformInvitation(
    request: CancelPlatformInvitationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CancelPlatformInvitationResponse) => void,
  ): ClientUnaryCall;
  acceptPlatformInvitation(
    request: AcceptPlatformInvitationRequest,
    callback: (error: ServiceError | null, response: AcceptPlatformInvitationResponse) => void,
  ): ClientUnaryCall;
  acceptPlatformInvitation(
    request: AcceptPlatformInvitationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AcceptPlatformInvitationResponse) => void,
  ): ClientUnaryCall;
  acceptPlatformInvitation(
    request: AcceptPlatformInvitationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AcceptPlatformInvitationResponse) => void,
  ): ClientUnaryCall;
}

export const AccountsClient = makeGenericClientConstructor(AccountsService, "Accounts") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AccountsClient;
  service: typeof AccountsService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
