// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v4.25.4
// source: accounts.external.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface CheckAccountNameAvailabilityRequest {
  name: string;
}

export interface CheckAccountNameAvailabilityResponse {
  result: boolean;
  suggestedNames: string[];
}

export interface GetAccountDetailsRequest {
  accountId: string;
}

export interface GetAccountDetailsResponse {
  accountId: string;
  name: string;
  ownerId: string;
  /** e.g., "active", "disabled", "deleted" */
  status: string;
}

export interface CreateAccountRequest {
  name: string;
  displayName: string;
  region: string;
}

export interface CreateAccountResponse {
  accountId: string;
}

export interface DisableAccountRequest {
  accountId: string;
}

export interface DisableAccountResponse {
  accountId: string;
  /** e.g., "disabled" */
  status: string;
}

export interface EnableAccountRequest {
  accountId: string;
}

export interface EnableAccountResponse {
  accountId: string;
  /** e.g., "active" */
  status: string;
}

export interface DeleteAccountRequest {
  accountId: string;
}

export interface DeleteAccountResponse {
  accountId: string;
  /** e.g., "deleted" */
  status: string;
}

export interface ListAccountsRequest {
  /** User ID to list accounts for */
  ownerId: string;
}

export interface ListAccountsResponse {
  accounts: AccountDetails[];
}

export interface AccountDetails {
  accountId: string;
  name: string;
  /** User ID of the account owner */
  ownerId: string;
  /** e.g., "active", "disabled", "deleted" */
  status: string;
}

function createBaseCheckAccountNameAvailabilityRequest(): CheckAccountNameAvailabilityRequest {
  return { name: "" };
}

export const CheckAccountNameAvailabilityRequest: MessageFns<CheckAccountNameAvailabilityRequest> = {
  encode(message: CheckAccountNameAvailabilityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckAccountNameAvailabilityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckAccountNameAvailabilityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckAccountNameAvailabilityRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: CheckAccountNameAvailabilityRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckAccountNameAvailabilityRequest>, I>>(
    base?: I,
  ): CheckAccountNameAvailabilityRequest {
    return CheckAccountNameAvailabilityRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckAccountNameAvailabilityRequest>, I>>(
    object: I,
  ): CheckAccountNameAvailabilityRequest {
    const message = createBaseCheckAccountNameAvailabilityRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCheckAccountNameAvailabilityResponse(): CheckAccountNameAvailabilityResponse {
  return { result: false, suggestedNames: [] };
}

export const CheckAccountNameAvailabilityResponse: MessageFns<CheckAccountNameAvailabilityResponse> = {
  encode(message: CheckAccountNameAvailabilityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== false) {
      writer.uint32(8).bool(message.result);
    }
    for (const v of message.suggestedNames) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckAccountNameAvailabilityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckAccountNameAvailabilityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.result = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.suggestedNames.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckAccountNameAvailabilityResponse {
    return {
      result: isSet(object.result) ? globalThis.Boolean(object.result) : false,
      suggestedNames: globalThis.Array.isArray(object?.suggestedNames)
        ? object.suggestedNames.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CheckAccountNameAvailabilityResponse): unknown {
    const obj: any = {};
    if (message.result !== false) {
      obj.result = message.result;
    }
    if (message.suggestedNames?.length) {
      obj.suggestedNames = message.suggestedNames;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckAccountNameAvailabilityResponse>, I>>(
    base?: I,
  ): CheckAccountNameAvailabilityResponse {
    return CheckAccountNameAvailabilityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckAccountNameAvailabilityResponse>, I>>(
    object: I,
  ): CheckAccountNameAvailabilityResponse {
    const message = createBaseCheckAccountNameAvailabilityResponse();
    message.result = object.result ?? false;
    message.suggestedNames = object.suggestedNames?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetAccountDetailsRequest(): GetAccountDetailsRequest {
  return { accountId: "" };
}

export const GetAccountDetailsRequest: MessageFns<GetAccountDetailsRequest> = {
  encode(message: GetAccountDetailsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAccountDetailsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccountDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccountDetailsRequest {
    return { accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "" };
  },

  toJSON(message: GetAccountDetailsRequest): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAccountDetailsRequest>, I>>(base?: I): GetAccountDetailsRequest {
    return GetAccountDetailsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAccountDetailsRequest>, I>>(object: I): GetAccountDetailsRequest {
    const message = createBaseGetAccountDetailsRequest();
    message.accountId = object.accountId ?? "";
    return message;
  },
};

function createBaseGetAccountDetailsResponse(): GetAccountDetailsResponse {
  return { accountId: "", name: "", ownerId: "", status: "" };
}

export const GetAccountDetailsResponse: MessageFns<GetAccountDetailsResponse> = {
  encode(message: GetAccountDetailsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.ownerId !== "") {
      writer.uint32(26).string(message.ownerId);
    }
    if (message.status !== "") {
      writer.uint32(34).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAccountDetailsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccountDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccountDetailsResponse {
    return {
      accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: GetAccountDetailsResponse): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAccountDetailsResponse>, I>>(base?: I): GetAccountDetailsResponse {
    return GetAccountDetailsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAccountDetailsResponse>, I>>(object: I): GetAccountDetailsResponse {
    const message = createBaseGetAccountDetailsResponse();
    message.accountId = object.accountId ?? "";
    message.name = object.name ?? "";
    message.ownerId = object.ownerId ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseCreateAccountRequest(): CreateAccountRequest {
  return { name: "", displayName: "", region: "" };
}

export const CreateAccountRequest: MessageFns<CreateAccountRequest> = {
  encode(message: CreateAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.region !== "") {
      writer.uint32(26).string(message.region);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.region = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAccountRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
    };
  },

  toJSON(message: CreateAccountRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAccountRequest>, I>>(base?: I): CreateAccountRequest {
    return CreateAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAccountRequest>, I>>(object: I): CreateAccountRequest {
    const message = createBaseCreateAccountRequest();
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.region = object.region ?? "";
    return message;
  },
};

function createBaseCreateAccountResponse(): CreateAccountResponse {
  return { accountId: "" };
}

export const CreateAccountResponse: MessageFns<CreateAccountResponse> = {
  encode(message: CreateAccountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAccountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAccountResponse {
    return { accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "" };
  },

  toJSON(message: CreateAccountResponse): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateAccountResponse>, I>>(base?: I): CreateAccountResponse {
    return CreateAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateAccountResponse>, I>>(object: I): CreateAccountResponse {
    const message = createBaseCreateAccountResponse();
    message.accountId = object.accountId ?? "";
    return message;
  },
};

function createBaseDisableAccountRequest(): DisableAccountRequest {
  return { accountId: "" };
}

export const DisableAccountRequest: MessageFns<DisableAccountRequest> = {
  encode(message: DisableAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisableAccountRequest {
    return { accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "" };
  },

  toJSON(message: DisableAccountRequest): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisableAccountRequest>, I>>(base?: I): DisableAccountRequest {
    return DisableAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisableAccountRequest>, I>>(object: I): DisableAccountRequest {
    const message = createBaseDisableAccountRequest();
    message.accountId = object.accountId ?? "";
    return message;
  },
};

function createBaseDisableAccountResponse(): DisableAccountResponse {
  return { accountId: "", status: "" };
}

export const DisableAccountResponse: MessageFns<DisableAccountResponse> = {
  encode(message: DisableAccountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisableAccountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisableAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisableAccountResponse {
    return {
      accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: DisableAccountResponse): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisableAccountResponse>, I>>(base?: I): DisableAccountResponse {
    return DisableAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisableAccountResponse>, I>>(object: I): DisableAccountResponse {
    const message = createBaseDisableAccountResponse();
    message.accountId = object.accountId ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseEnableAccountRequest(): EnableAccountRequest {
  return { accountId: "" };
}

export const EnableAccountRequest: MessageFns<EnableAccountRequest> = {
  encode(message: EnableAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnableAccountRequest {
    return { accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "" };
  },

  toJSON(message: EnableAccountRequest): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnableAccountRequest>, I>>(base?: I): EnableAccountRequest {
    return EnableAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnableAccountRequest>, I>>(object: I): EnableAccountRequest {
    const message = createBaseEnableAccountRequest();
    message.accountId = object.accountId ?? "";
    return message;
  },
};

function createBaseEnableAccountResponse(): EnableAccountResponse {
  return { accountId: "", status: "" };
}

export const EnableAccountResponse: MessageFns<EnableAccountResponse> = {
  encode(message: EnableAccountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnableAccountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnableAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnableAccountResponse {
    return {
      accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: EnableAccountResponse): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnableAccountResponse>, I>>(base?: I): EnableAccountResponse {
    return EnableAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnableAccountResponse>, I>>(object: I): EnableAccountResponse {
    const message = createBaseEnableAccountResponse();
    message.accountId = object.accountId ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseDeleteAccountRequest(): DeleteAccountRequest {
  return { accountId: "" };
}

export const DeleteAccountRequest: MessageFns<DeleteAccountRequest> = {
  encode(message: DeleteAccountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAccountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAccountRequest {
    return { accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "" };
  },

  toJSON(message: DeleteAccountRequest): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteAccountRequest>, I>>(base?: I): DeleteAccountRequest {
    return DeleteAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteAccountRequest>, I>>(object: I): DeleteAccountRequest {
    const message = createBaseDeleteAccountRequest();
    message.accountId = object.accountId ?? "";
    return message;
  },
};

function createBaseDeleteAccountResponse(): DeleteAccountResponse {
  return { accountId: "", status: "" };
}

export const DeleteAccountResponse: MessageFns<DeleteAccountResponse> = {
  encode(message: DeleteAccountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAccountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAccountResponse {
    return {
      accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: DeleteAccountResponse): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteAccountResponse>, I>>(base?: I): DeleteAccountResponse {
    return DeleteAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteAccountResponse>, I>>(object: I): DeleteAccountResponse {
    const message = createBaseDeleteAccountResponse();
    message.accountId = object.accountId ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseListAccountsRequest(): ListAccountsRequest {
  return { ownerId: "" };
}

export const ListAccountsRequest: MessageFns<ListAccountsRequest> = {
  encode(message: ListAccountsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ownerId !== "") {
      writer.uint32(10).string(message.ownerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountsRequest {
    return { ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "" };
  },

  toJSON(message: ListAccountsRequest): unknown {
    const obj: any = {};
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAccountsRequest>, I>>(base?: I): ListAccountsRequest {
    return ListAccountsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAccountsRequest>, I>>(object: I): ListAccountsRequest {
    const message = createBaseListAccountsRequest();
    message.ownerId = object.ownerId ?? "";
    return message;
  },
};

function createBaseListAccountsResponse(): ListAccountsResponse {
  return { accounts: [] };
}

export const ListAccountsResponse: MessageFns<ListAccountsResponse> = {
  encode(message: ListAccountsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accounts) {
      AccountDetails.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAccountsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAccountsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accounts.push(AccountDetails.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAccountsResponse {
    return {
      accounts: globalThis.Array.isArray(object?.accounts)
        ? object.accounts.map((e: any) => AccountDetails.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListAccountsResponse): unknown {
    const obj: any = {};
    if (message.accounts?.length) {
      obj.accounts = message.accounts.map((e) => AccountDetails.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAccountsResponse>, I>>(base?: I): ListAccountsResponse {
    return ListAccountsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAccountsResponse>, I>>(object: I): ListAccountsResponse {
    const message = createBaseListAccountsResponse();
    message.accounts = object.accounts?.map((e) => AccountDetails.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAccountDetails(): AccountDetails {
  return { accountId: "", name: "", ownerId: "", status: "" };
}

export const AccountDetails: MessageFns<AccountDetails> = {
  encode(message: AccountDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.ownerId !== "") {
      writer.uint32(26).string(message.ownerId);
    }
    if (message.status !== "") {
      writer.uint32(34).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountDetails {
    return {
      accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: AccountDetails): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccountDetails>, I>>(base?: I): AccountDetails {
    return AccountDetails.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccountDetails>, I>>(object: I): AccountDetails {
    const message = createBaseAccountDetails();
    message.accountId = object.accountId ?? "";
    message.name = object.name ?? "";
    message.ownerId = object.ownerId ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

export type AccountsService = typeof AccountsService;
export const AccountsService = {
  getAccountDetails: {
    path: "/Accounts/GetAccountDetails",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAccountDetailsRequest): Buffer =>
      Buffer.from(GetAccountDetailsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetAccountDetailsRequest => GetAccountDetailsRequest.decode(value),
    responseSerialize: (value: GetAccountDetailsResponse): Buffer =>
      Buffer.from(GetAccountDetailsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetAccountDetailsResponse => GetAccountDetailsResponse.decode(value),
  },
  createAccount: {
    path: "/Accounts/CreateAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateAccountRequest): Buffer => Buffer.from(CreateAccountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateAccountRequest => CreateAccountRequest.decode(value),
    responseSerialize: (value: CreateAccountResponse): Buffer =>
      Buffer.from(CreateAccountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateAccountResponse => CreateAccountResponse.decode(value),
  },
  checkAccountNameAvailability: {
    path: "/Accounts/CheckAccountNameAvailability",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CheckAccountNameAvailabilityRequest): Buffer =>
      Buffer.from(CheckAccountNameAvailabilityRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CheckAccountNameAvailabilityRequest =>
      CheckAccountNameAvailabilityRequest.decode(value),
    responseSerialize: (value: CheckAccountNameAvailabilityResponse): Buffer =>
      Buffer.from(CheckAccountNameAvailabilityResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CheckAccountNameAvailabilityResponse =>
      CheckAccountNameAvailabilityResponse.decode(value),
  },
  disableAccount: {
    path: "/Accounts/DisableAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DisableAccountRequest): Buffer =>
      Buffer.from(DisableAccountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): DisableAccountRequest => DisableAccountRequest.decode(value),
    responseSerialize: (value: DisableAccountResponse): Buffer =>
      Buffer.from(DisableAccountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): DisableAccountResponse => DisableAccountResponse.decode(value),
  },
  enableAccount: {
    path: "/Accounts/EnableAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EnableAccountRequest): Buffer => Buffer.from(EnableAccountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EnableAccountRequest => EnableAccountRequest.decode(value),
    responseSerialize: (value: EnableAccountResponse): Buffer =>
      Buffer.from(EnableAccountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): EnableAccountResponse => EnableAccountResponse.decode(value),
  },
  deleteAccount: {
    path: "/Accounts/DeleteAccount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteAccountRequest): Buffer => Buffer.from(DeleteAccountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): DeleteAccountRequest => DeleteAccountRequest.decode(value),
    responseSerialize: (value: DeleteAccountResponse): Buffer =>
      Buffer.from(DeleteAccountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): DeleteAccountResponse => DeleteAccountResponse.decode(value),
  },
  listAccounts: {
    path: "/Accounts/ListAccounts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListAccountsRequest): Buffer => Buffer.from(ListAccountsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListAccountsRequest => ListAccountsRequest.decode(value),
    responseSerialize: (value: ListAccountsResponse): Buffer =>
      Buffer.from(ListAccountsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListAccountsResponse => ListAccountsResponse.decode(value),
  },
} as const;

export interface AccountsServer extends UntypedServiceImplementation {
  getAccountDetails: handleUnaryCall<GetAccountDetailsRequest, GetAccountDetailsResponse>;
  createAccount: handleUnaryCall<CreateAccountRequest, CreateAccountResponse>;
  checkAccountNameAvailability: handleUnaryCall<
    CheckAccountNameAvailabilityRequest,
    CheckAccountNameAvailabilityResponse
  >;
  disableAccount: handleUnaryCall<DisableAccountRequest, DisableAccountResponse>;
  enableAccount: handleUnaryCall<EnableAccountRequest, EnableAccountResponse>;
  deleteAccount: handleUnaryCall<DeleteAccountRequest, DeleteAccountResponse>;
  listAccounts: handleUnaryCall<ListAccountsRequest, ListAccountsResponse>;
}

export interface AccountsClient extends Client {
  getAccountDetails(
    request: GetAccountDetailsRequest,
    callback: (error: ServiceError | null, response: GetAccountDetailsResponse) => void,
  ): ClientUnaryCall;
  getAccountDetails(
    request: GetAccountDetailsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAccountDetailsResponse) => void,
  ): ClientUnaryCall;
  getAccountDetails(
    request: GetAccountDetailsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAccountDetailsResponse) => void,
  ): ClientUnaryCall;
  createAccount(
    request: CreateAccountRequest,
    callback: (error: ServiceError | null, response: CreateAccountResponse) => void,
  ): ClientUnaryCall;
  createAccount(
    request: CreateAccountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateAccountResponse) => void,
  ): ClientUnaryCall;
  createAccount(
    request: CreateAccountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateAccountResponse) => void,
  ): ClientUnaryCall;
  checkAccountNameAvailability(
    request: CheckAccountNameAvailabilityRequest,
    callback: (error: ServiceError | null, response: CheckAccountNameAvailabilityResponse) => void,
  ): ClientUnaryCall;
  checkAccountNameAvailability(
    request: CheckAccountNameAvailabilityRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CheckAccountNameAvailabilityResponse) => void,
  ): ClientUnaryCall;
  checkAccountNameAvailability(
    request: CheckAccountNameAvailabilityRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CheckAccountNameAvailabilityResponse) => void,
  ): ClientUnaryCall;
  disableAccount(
    request: DisableAccountRequest,
    callback: (error: ServiceError | null, response: DisableAccountResponse) => void,
  ): ClientUnaryCall;
  disableAccount(
    request: DisableAccountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DisableAccountResponse) => void,
  ): ClientUnaryCall;
  disableAccount(
    request: DisableAccountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DisableAccountResponse) => void,
  ): ClientUnaryCall;
  enableAccount(
    request: EnableAccountRequest,
    callback: (error: ServiceError | null, response: EnableAccountResponse) => void,
  ): ClientUnaryCall;
  enableAccount(
    request: EnableAccountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: EnableAccountResponse) => void,
  ): ClientUnaryCall;
  enableAccount(
    request: EnableAccountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: EnableAccountResponse) => void,
  ): ClientUnaryCall;
  deleteAccount(
    request: DeleteAccountRequest,
    callback: (error: ServiceError | null, response: DeleteAccountResponse) => void,
  ): ClientUnaryCall;
  deleteAccount(
    request: DeleteAccountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteAccountResponse) => void,
  ): ClientUnaryCall;
  deleteAccount(
    request: DeleteAccountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteAccountResponse) => void,
  ): ClientUnaryCall;
  listAccounts(
    request: ListAccountsRequest,
    callback: (error: ServiceError | null, response: ListAccountsResponse) => void,
  ): ClientUnaryCall;
  listAccounts(
    request: ListAccountsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListAccountsResponse) => void,
  ): ClientUnaryCall;
  listAccounts(
    request: ListAccountsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListAccountsResponse) => void,
  ): ClientUnaryCall;
}

export const AccountsClient = makeGenericClientConstructor(AccountsService, "Accounts") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AccountsClient;
  service: typeof AccountsService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
