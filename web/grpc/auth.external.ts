// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v5.29.3
// source: auth.external.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface LoginWithOAuthRequest {
  email: string;
  name: string;
  provider: string;
}

export interface LoginWithOAuthResponse {
  userId: string;
  token: string;
  refreshToken: string;
}

export interface LoginWithSSORequest {
  email: string;
  name: string;
}

export interface LoginWithSSOResponse {
  userId: string;
  token: string;
  refreshToken: string;
}

export interface GetUserDetailsRequest {
  userId: string;
}

export interface GetUserDetailsResponse {
  userId: string;
  name: string;
  email: string;
  emailVerified: boolean;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  userId: string;
  token: string;
  refreshToken: string;
}

export interface SignupRequest {
  name: string;
  email: string;
  password: string;
}

export interface SignupResponse {
  userId: string;
  token: string;
  refreshToken: string;
}

export interface ResetPasswordRequest {
  resetToken: string;
  newPassword: string;
}

export interface ResetPasswordResponse {
  success: boolean;
}

export interface RequestResetPasswordRequest {
  email: string;
}

export interface RequestResetPasswordResponse {
  success: boolean;
  /** e.g., "Reset link sent to email" */
  resetToken: string;
}

export interface VerifyEmailRequest {
  verificationToken: string;
}

export interface VerifyEmailResponse {
  success: boolean;
  /** e.g., "User ID after email verification" */
  userId: string;
}

export interface ResendEmailVerificationRequest {
  email: string;
}

export interface ResendEmailVerificationResponse {
  success: boolean;
  /** e.g., "Verification email resent" */
  message: string;
}

export interface RefreshTokenRequest {
  refreshToken: string;
}

export interface RefreshTokenResponse {
  token: string;
  refreshToken: string;
}

/** Device Flow Messages */
export interface InitiateDeviceFlowRequest {
  /** CLI client identifier */
  clientId: string;
}

export interface InitiateDeviceFlowResponse {
  deviceCode: string;
  /** The code user enters on the website */
  userCode: string;
  /** URL like https://kloudlite.io/device */
  verificationUri: string;
  /** URL with code pre-filled if supported */
  verificationUriComplete: string;
  /** Seconds until device code expires */
  expiresIn: number;
  /** Seconds between polling requests */
  interval: number;
}

export interface PollDeviceTokenRequest {
  deviceCode: string;
  clientId: string;
}

export interface PollDeviceTokenResponse {
  authorized: boolean;
  userId: string;
  token: string;
  refreshToken: string;
  /** "authorization_pending", "slow_down", "expired_token", "access_denied" */
  error: string;
}

export interface VerifyDeviceCodeRequest {
  userCode: string;
  /** User ID from the logged in session */
  userId: string;
}

export interface VerifyDeviceCodeResponse {
  success: boolean;
  message: string;
}

/** Platform user management messages */
export interface GetPlatformRoleRequest {
}

export interface GetPlatformRoleResponse {
  /** "super_admin", "admin", "user", or empty */
  role: string;
  canCreateTeams: boolean;
  canManagePlatform: boolean;
}

export interface ListPlatformUsersRequest {
  /** optional filter by role */
  role: string;
}

export interface ListPlatformUsersResponse {
  users: PlatformUser[];
}

export interface PlatformUser {
  userId: string;
  email: string;
  role: string;
  createdAt: string;
}

export interface UpdatePlatformUserRoleRequest {
  userId: string;
  /** "super_admin", "admin", "user" */
  role: string;
}

export interface UpdatePlatformUserRoleResponse {
  success: boolean;
}

/** Notification messages */
export interface NotificationTarget {
  /** "user", "team_role", "platform_role" */
  type: string;
  userId: string;
  teamId: string;
  minTeamRole: string;
  minPlatformRole: string;
}

export interface NotificationAction {
  /** e.g., "approve", "reject", "accept", "decline" */
  id: string;
  /** e.g., "Approve", "Reject" */
  label: string;
  /** e.g., "primary", "danger", "default" */
  style: string;
  /** e.g., "/api/teams/approve" */
  endpoint: string;
  /** e.g., "POST", "DELETE" */
  method: string;
  /** Additional data to send */
  data: { [key: string]: string };
}

export interface NotificationAction_DataEntry {
  key: string;
  value: string;
}

export interface Notification {
  id: string;
  target: NotificationTarget | undefined;
  type: string;
  title: string;
  description: string;
  teamId: string;
  teamName: string;
  requestId: string;
  inviteId: string;
  read: boolean;
  readAt: string;
  actionRequired: boolean;
  /** 1-4 actions */
  actions: NotificationAction[];
  actionTaken: boolean;
  createdAt: string;
}

export interface ListNotificationsRequest {
  limit: number;
  offset: number;
  unreadOnly: boolean;
  actionRequiredOnly: boolean;
}

export interface ListNotificationsResponse {
  notifications: Notification[];
  totalCount: number;
}

export interface GetUnreadNotificationCountRequest {
}

export interface GetUnreadNotificationCountResponse {
  count: number;
}

export interface MarkNotificationAsReadRequest {
  notificationId: string;
}

export interface MarkNotificationAsReadResponse {
  success: boolean;
}

export interface MarkAllNotificationsAsReadRequest {
}

export interface MarkAllNotificationsAsReadResponse {
  markedCount: number;
}

export interface MarkNotificationActionTakenRequest {
  notificationId: string;
  /** Which action was taken */
  actionId: string;
}

export interface MarkNotificationActionTakenResponse {
  success: boolean;
}

function createBaseLoginWithOAuthRequest(): LoginWithOAuthRequest {
  return { email: "", name: "", provider: "" };
}

export const LoginWithOAuthRequest: MessageFns<LoginWithOAuthRequest> = {
  encode(message: LoginWithOAuthRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.provider !== "") {
      writer.uint32(26).string(message.provider);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginWithOAuthRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginWithOAuthRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.provider = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginWithOAuthRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      provider: isSet(object.provider) ? globalThis.String(object.provider) : "",
    };
  },

  toJSON(message: LoginWithOAuthRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.provider !== "") {
      obj.provider = message.provider;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginWithOAuthRequest>, I>>(base?: I): LoginWithOAuthRequest {
    return LoginWithOAuthRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginWithOAuthRequest>, I>>(object: I): LoginWithOAuthRequest {
    const message = createBaseLoginWithOAuthRequest();
    message.email = object.email ?? "";
    message.name = object.name ?? "";
    message.provider = object.provider ?? "";
    return message;
  },
};

function createBaseLoginWithOAuthResponse(): LoginWithOAuthResponse {
  return { userId: "", token: "", refreshToken: "" };
}

export const LoginWithOAuthResponse: MessageFns<LoginWithOAuthResponse> = {
  encode(message: LoginWithOAuthResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    if (message.refreshToken !== "") {
      writer.uint32(26).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginWithOAuthResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginWithOAuthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginWithOAuthResponse {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
    };
  },

  toJSON(message: LoginWithOAuthResponse): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginWithOAuthResponse>, I>>(base?: I): LoginWithOAuthResponse {
    return LoginWithOAuthResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginWithOAuthResponse>, I>>(object: I): LoginWithOAuthResponse {
    const message = createBaseLoginWithOAuthResponse();
    message.userId = object.userId ?? "";
    message.token = object.token ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseLoginWithSSORequest(): LoginWithSSORequest {
  return { email: "", name: "" };
}

export const LoginWithSSORequest: MessageFns<LoginWithSSORequest> = {
  encode(message: LoginWithSSORequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginWithSSORequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginWithSSORequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginWithSSORequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: LoginWithSSORequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginWithSSORequest>, I>>(base?: I): LoginWithSSORequest {
    return LoginWithSSORequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginWithSSORequest>, I>>(object: I): LoginWithSSORequest {
    const message = createBaseLoginWithSSORequest();
    message.email = object.email ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseLoginWithSSOResponse(): LoginWithSSOResponse {
  return { userId: "", token: "", refreshToken: "" };
}

export const LoginWithSSOResponse: MessageFns<LoginWithSSOResponse> = {
  encode(message: LoginWithSSOResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    if (message.refreshToken !== "") {
      writer.uint32(26).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginWithSSOResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginWithSSOResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginWithSSOResponse {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
    };
  },

  toJSON(message: LoginWithSSOResponse): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginWithSSOResponse>, I>>(base?: I): LoginWithSSOResponse {
    return LoginWithSSOResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginWithSSOResponse>, I>>(object: I): LoginWithSSOResponse {
    const message = createBaseLoginWithSSOResponse();
    message.userId = object.userId ?? "";
    message.token = object.token ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseGetUserDetailsRequest(): GetUserDetailsRequest {
  return { userId: "" };
}

export const GetUserDetailsRequest: MessageFns<GetUserDetailsRequest> = {
  encode(message: GetUserDetailsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserDetailsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserDetailsRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: GetUserDetailsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserDetailsRequest>, I>>(base?: I): GetUserDetailsRequest {
    return GetUserDetailsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserDetailsRequest>, I>>(object: I): GetUserDetailsRequest {
    const message = createBaseGetUserDetailsRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetUserDetailsResponse(): GetUserDetailsResponse {
  return { userId: "", name: "", email: "", emailVerified: false };
}

export const GetUserDetailsResponse: MessageFns<GetUserDetailsResponse> = {
  encode(message: GetUserDetailsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.emailVerified !== false) {
      writer.uint32(32).bool(message.emailVerified);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserDetailsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.emailVerified = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserDetailsResponse {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      emailVerified: isSet(object.emailVerified) ? globalThis.Boolean(object.emailVerified) : false,
    };
  },

  toJSON(message: GetUserDetailsResponse): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.emailVerified !== false) {
      obj.emailVerified = message.emailVerified;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserDetailsResponse>, I>>(base?: I): GetUserDetailsResponse {
    return GetUserDetailsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserDetailsResponse>, I>>(object: I): GetUserDetailsResponse {
    const message = createBaseGetUserDetailsResponse();
    message.userId = object.userId ?? "";
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.emailVerified = object.emailVerified ?? false;
    return message;
  },
};

function createBaseLoginRequest(): LoginRequest {
  return { email: "", password: "" };
}

export const LoginRequest: MessageFns<LoginRequest> = {
  encode(message: LoginRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: LoginRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginRequest>, I>>(base?: I): LoginRequest {
    return LoginRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginRequest>, I>>(object: I): LoginRequest {
    const message = createBaseLoginRequest();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseLoginResponse(): LoginResponse {
  return { userId: "", token: "", refreshToken: "" };
}

export const LoginResponse: MessageFns<LoginResponse> = {
  encode(message: LoginResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    if (message.refreshToken !== "") {
      writer.uint32(26).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginResponse {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
    };
  },

  toJSON(message: LoginResponse): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginResponse>, I>>(base?: I): LoginResponse {
    return LoginResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginResponse>, I>>(object: I): LoginResponse {
    const message = createBaseLoginResponse();
    message.userId = object.userId ?? "";
    message.token = object.token ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseSignupRequest(): SignupRequest {
  return { name: "", email: "", password: "" };
}

export const SignupRequest: MessageFns<SignupRequest> = {
  encode(message: SignupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignupRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: SignupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignupRequest>, I>>(base?: I): SignupRequest {
    return SignupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignupRequest>, I>>(object: I): SignupRequest {
    const message = createBaseSignupRequest();
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseSignupResponse(): SignupResponse {
  return { userId: "", token: "", refreshToken: "" };
}

export const SignupResponse: MessageFns<SignupResponse> = {
  encode(message: SignupResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    if (message.refreshToken !== "") {
      writer.uint32(26).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignupResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignupResponse {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
    };
  },

  toJSON(message: SignupResponse): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignupResponse>, I>>(base?: I): SignupResponse {
    return SignupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignupResponse>, I>>(object: I): SignupResponse {
    const message = createBaseSignupResponse();
    message.userId = object.userId ?? "";
    message.token = object.token ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseResetPasswordRequest(): ResetPasswordRequest {
  return { resetToken: "", newPassword: "" };
}

export const ResetPasswordRequest: MessageFns<ResetPasswordRequest> = {
  encode(message: ResetPasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resetToken !== "") {
      writer.uint32(10).string(message.resetToken);
    }
    if (message.newPassword !== "") {
      writer.uint32(18).string(message.newPassword);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetPasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resetToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.newPassword = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetPasswordRequest {
    return {
      resetToken: isSet(object.resetToken) ? globalThis.String(object.resetToken) : "",
      newPassword: isSet(object.newPassword) ? globalThis.String(object.newPassword) : "",
    };
  },

  toJSON(message: ResetPasswordRequest): unknown {
    const obj: any = {};
    if (message.resetToken !== "") {
      obj.resetToken = message.resetToken;
    }
    if (message.newPassword !== "") {
      obj.newPassword = message.newPassword;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetPasswordRequest>, I>>(base?: I): ResetPasswordRequest {
    return ResetPasswordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetPasswordRequest>, I>>(object: I): ResetPasswordRequest {
    const message = createBaseResetPasswordRequest();
    message.resetToken = object.resetToken ?? "";
    message.newPassword = object.newPassword ?? "";
    return message;
  },
};

function createBaseResetPasswordResponse(): ResetPasswordResponse {
  return { success: false };
}

export const ResetPasswordResponse: MessageFns<ResetPasswordResponse> = {
  encode(message: ResetPasswordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetPasswordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetPasswordResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: ResetPasswordResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetPasswordResponse>, I>>(base?: I): ResetPasswordResponse {
    return ResetPasswordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetPasswordResponse>, I>>(object: I): ResetPasswordResponse {
    const message = createBaseResetPasswordResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseRequestResetPasswordRequest(): RequestResetPasswordRequest {
  return { email: "" };
}

export const RequestResetPasswordRequest: MessageFns<RequestResetPasswordRequest> = {
  encode(message: RequestResetPasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestResetPasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestResetPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestResetPasswordRequest {
    return { email: isSet(object.email) ? globalThis.String(object.email) : "" };
  },

  toJSON(message: RequestResetPasswordRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestResetPasswordRequest>, I>>(base?: I): RequestResetPasswordRequest {
    return RequestResetPasswordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestResetPasswordRequest>, I>>(object: I): RequestResetPasswordRequest {
    const message = createBaseRequestResetPasswordRequest();
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseRequestResetPasswordResponse(): RequestResetPasswordResponse {
  return { success: false, resetToken: "" };
}

export const RequestResetPasswordResponse: MessageFns<RequestResetPasswordResponse> = {
  encode(message: RequestResetPasswordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.resetToken !== "") {
      writer.uint32(18).string(message.resetToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestResetPasswordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestResetPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resetToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestResetPasswordResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      resetToken: isSet(object.resetToken) ? globalThis.String(object.resetToken) : "",
    };
  },

  toJSON(message: RequestResetPasswordResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.resetToken !== "") {
      obj.resetToken = message.resetToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestResetPasswordResponse>, I>>(base?: I): RequestResetPasswordResponse {
    return RequestResetPasswordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestResetPasswordResponse>, I>>(object: I): RequestResetPasswordResponse {
    const message = createBaseRequestResetPasswordResponse();
    message.success = object.success ?? false;
    message.resetToken = object.resetToken ?? "";
    return message;
  },
};

function createBaseVerifyEmailRequest(): VerifyEmailRequest {
  return { verificationToken: "" };
}

export const VerifyEmailRequest: MessageFns<VerifyEmailRequest> = {
  encode(message: VerifyEmailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.verificationToken !== "") {
      writer.uint32(10).string(message.verificationToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyEmailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.verificationToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyEmailRequest {
    return { verificationToken: isSet(object.verificationToken) ? globalThis.String(object.verificationToken) : "" };
  },

  toJSON(message: VerifyEmailRequest): unknown {
    const obj: any = {};
    if (message.verificationToken !== "") {
      obj.verificationToken = message.verificationToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyEmailRequest>, I>>(base?: I): VerifyEmailRequest {
    return VerifyEmailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyEmailRequest>, I>>(object: I): VerifyEmailRequest {
    const message = createBaseVerifyEmailRequest();
    message.verificationToken = object.verificationToken ?? "";
    return message;
  },
};

function createBaseVerifyEmailResponse(): VerifyEmailResponse {
  return { success: false, userId: "" };
}

export const VerifyEmailResponse: MessageFns<VerifyEmailResponse> = {
  encode(message: VerifyEmailResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyEmailResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyEmailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyEmailResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: VerifyEmailResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyEmailResponse>, I>>(base?: I): VerifyEmailResponse {
    return VerifyEmailResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyEmailResponse>, I>>(object: I): VerifyEmailResponse {
    const message = createBaseVerifyEmailResponse();
    message.success = object.success ?? false;
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseResendEmailVerificationRequest(): ResendEmailVerificationRequest {
  return { email: "" };
}

export const ResendEmailVerificationRequest: MessageFns<ResendEmailVerificationRequest> = {
  encode(message: ResendEmailVerificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResendEmailVerificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendEmailVerificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResendEmailVerificationRequest {
    return { email: isSet(object.email) ? globalThis.String(object.email) : "" };
  },

  toJSON(message: ResendEmailVerificationRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResendEmailVerificationRequest>, I>>(base?: I): ResendEmailVerificationRequest {
    return ResendEmailVerificationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResendEmailVerificationRequest>, I>>(
    object: I,
  ): ResendEmailVerificationRequest {
    const message = createBaseResendEmailVerificationRequest();
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseResendEmailVerificationResponse(): ResendEmailVerificationResponse {
  return { success: false, message: "" };
}

export const ResendEmailVerificationResponse: MessageFns<ResendEmailVerificationResponse> = {
  encode(message: ResendEmailVerificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResendEmailVerificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendEmailVerificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResendEmailVerificationResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ResendEmailVerificationResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResendEmailVerificationResponse>, I>>(base?: I): ResendEmailVerificationResponse {
    return ResendEmailVerificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResendEmailVerificationResponse>, I>>(
    object: I,
  ): ResendEmailVerificationResponse {
    const message = createBaseResendEmailVerificationResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseRefreshTokenRequest(): RefreshTokenRequest {
  return { refreshToken: "" };
}

export const RefreshTokenRequest: MessageFns<RefreshTokenRequest> = {
  encode(message: RefreshTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.refreshToken !== "") {
      writer.uint32(10).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefreshTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefreshTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RefreshTokenRequest {
    return { refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "" };
  },

  toJSON(message: RefreshTokenRequest): unknown {
    const obj: any = {};
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RefreshTokenRequest>, I>>(base?: I): RefreshTokenRequest {
    return RefreshTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RefreshTokenRequest>, I>>(object: I): RefreshTokenRequest {
    const message = createBaseRefreshTokenRequest();
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseRefreshTokenResponse(): RefreshTokenResponse {
  return { token: "", refreshToken: "" };
}

export const RefreshTokenResponse: MessageFns<RefreshTokenResponse> = {
  encode(message: RefreshTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.refreshToken !== "") {
      writer.uint32(18).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefreshTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefreshTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RefreshTokenResponse {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
    };
  },

  toJSON(message: RefreshTokenResponse): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RefreshTokenResponse>, I>>(base?: I): RefreshTokenResponse {
    return RefreshTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RefreshTokenResponse>, I>>(object: I): RefreshTokenResponse {
    const message = createBaseRefreshTokenResponse();
    message.token = object.token ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseInitiateDeviceFlowRequest(): InitiateDeviceFlowRequest {
  return { clientId: "" };
}

export const InitiateDeviceFlowRequest: MessageFns<InitiateDeviceFlowRequest> = {
  encode(message: InitiateDeviceFlowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitiateDeviceFlowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitiateDeviceFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitiateDeviceFlowRequest {
    return { clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "" };
  },

  toJSON(message: InitiateDeviceFlowRequest): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitiateDeviceFlowRequest>, I>>(base?: I): InitiateDeviceFlowRequest {
    return InitiateDeviceFlowRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitiateDeviceFlowRequest>, I>>(object: I): InitiateDeviceFlowRequest {
    const message = createBaseInitiateDeviceFlowRequest();
    message.clientId = object.clientId ?? "";
    return message;
  },
};

function createBaseInitiateDeviceFlowResponse(): InitiateDeviceFlowResponse {
  return { deviceCode: "", userCode: "", verificationUri: "", verificationUriComplete: "", expiresIn: 0, interval: 0 };
}

export const InitiateDeviceFlowResponse: MessageFns<InitiateDeviceFlowResponse> = {
  encode(message: InitiateDeviceFlowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deviceCode !== "") {
      writer.uint32(10).string(message.deviceCode);
    }
    if (message.userCode !== "") {
      writer.uint32(18).string(message.userCode);
    }
    if (message.verificationUri !== "") {
      writer.uint32(26).string(message.verificationUri);
    }
    if (message.verificationUriComplete !== "") {
      writer.uint32(34).string(message.verificationUriComplete);
    }
    if (message.expiresIn !== 0) {
      writer.uint32(40).int32(message.expiresIn);
    }
    if (message.interval !== 0) {
      writer.uint32(48).int32(message.interval);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitiateDeviceFlowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitiateDeviceFlowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deviceCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.verificationUri = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.verificationUriComplete = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.expiresIn = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.interval = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitiateDeviceFlowResponse {
    return {
      deviceCode: isSet(object.deviceCode) ? globalThis.String(object.deviceCode) : "",
      userCode: isSet(object.userCode) ? globalThis.String(object.userCode) : "",
      verificationUri: isSet(object.verificationUri) ? globalThis.String(object.verificationUri) : "",
      verificationUriComplete: isSet(object.verificationUriComplete)
        ? globalThis.String(object.verificationUriComplete)
        : "",
      expiresIn: isSet(object.expiresIn) ? globalThis.Number(object.expiresIn) : 0,
      interval: isSet(object.interval) ? globalThis.Number(object.interval) : 0,
    };
  },

  toJSON(message: InitiateDeviceFlowResponse): unknown {
    const obj: any = {};
    if (message.deviceCode !== "") {
      obj.deviceCode = message.deviceCode;
    }
    if (message.userCode !== "") {
      obj.userCode = message.userCode;
    }
    if (message.verificationUri !== "") {
      obj.verificationUri = message.verificationUri;
    }
    if (message.verificationUriComplete !== "") {
      obj.verificationUriComplete = message.verificationUriComplete;
    }
    if (message.expiresIn !== 0) {
      obj.expiresIn = Math.round(message.expiresIn);
    }
    if (message.interval !== 0) {
      obj.interval = Math.round(message.interval);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitiateDeviceFlowResponse>, I>>(base?: I): InitiateDeviceFlowResponse {
    return InitiateDeviceFlowResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitiateDeviceFlowResponse>, I>>(object: I): InitiateDeviceFlowResponse {
    const message = createBaseInitiateDeviceFlowResponse();
    message.deviceCode = object.deviceCode ?? "";
    message.userCode = object.userCode ?? "";
    message.verificationUri = object.verificationUri ?? "";
    message.verificationUriComplete = object.verificationUriComplete ?? "";
    message.expiresIn = object.expiresIn ?? 0;
    message.interval = object.interval ?? 0;
    return message;
  },
};

function createBasePollDeviceTokenRequest(): PollDeviceTokenRequest {
  return { deviceCode: "", clientId: "" };
}

export const PollDeviceTokenRequest: MessageFns<PollDeviceTokenRequest> = {
  encode(message: PollDeviceTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deviceCode !== "") {
      writer.uint32(10).string(message.deviceCode);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PollDeviceTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePollDeviceTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deviceCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PollDeviceTokenRequest {
    return {
      deviceCode: isSet(object.deviceCode) ? globalThis.String(object.deviceCode) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
    };
  },

  toJSON(message: PollDeviceTokenRequest): unknown {
    const obj: any = {};
    if (message.deviceCode !== "") {
      obj.deviceCode = message.deviceCode;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PollDeviceTokenRequest>, I>>(base?: I): PollDeviceTokenRequest {
    return PollDeviceTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PollDeviceTokenRequest>, I>>(object: I): PollDeviceTokenRequest {
    const message = createBasePollDeviceTokenRequest();
    message.deviceCode = object.deviceCode ?? "";
    message.clientId = object.clientId ?? "";
    return message;
  },
};

function createBasePollDeviceTokenResponse(): PollDeviceTokenResponse {
  return { authorized: false, userId: "", token: "", refreshToken: "", error: "" };
}

export const PollDeviceTokenResponse: MessageFns<PollDeviceTokenResponse> = {
  encode(message: PollDeviceTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authorized !== false) {
      writer.uint32(8).bool(message.authorized);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.token !== "") {
      writer.uint32(26).string(message.token);
    }
    if (message.refreshToken !== "") {
      writer.uint32(34).string(message.refreshToken);
    }
    if (message.error !== "") {
      writer.uint32(42).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PollDeviceTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePollDeviceTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.authorized = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PollDeviceTokenResponse {
    return {
      authorized: isSet(object.authorized) ? globalThis.Boolean(object.authorized) : false,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: PollDeviceTokenResponse): unknown {
    const obj: any = {};
    if (message.authorized !== false) {
      obj.authorized = message.authorized;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PollDeviceTokenResponse>, I>>(base?: I): PollDeviceTokenResponse {
    return PollDeviceTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PollDeviceTokenResponse>, I>>(object: I): PollDeviceTokenResponse {
    const message = createBasePollDeviceTokenResponse();
    message.authorized = object.authorized ?? false;
    message.userId = object.userId ?? "";
    message.token = object.token ?? "";
    message.refreshToken = object.refreshToken ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseVerifyDeviceCodeRequest(): VerifyDeviceCodeRequest {
  return { userCode: "", userId: "" };
}

export const VerifyDeviceCodeRequest: MessageFns<VerifyDeviceCodeRequest> = {
  encode(message: VerifyDeviceCodeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userCode !== "") {
      writer.uint32(10).string(message.userCode);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyDeviceCodeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyDeviceCodeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyDeviceCodeRequest {
    return {
      userCode: isSet(object.userCode) ? globalThis.String(object.userCode) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: VerifyDeviceCodeRequest): unknown {
    const obj: any = {};
    if (message.userCode !== "") {
      obj.userCode = message.userCode;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyDeviceCodeRequest>, I>>(base?: I): VerifyDeviceCodeRequest {
    return VerifyDeviceCodeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyDeviceCodeRequest>, I>>(object: I): VerifyDeviceCodeRequest {
    const message = createBaseVerifyDeviceCodeRequest();
    message.userCode = object.userCode ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseVerifyDeviceCodeResponse(): VerifyDeviceCodeResponse {
  return { success: false, message: "" };
}

export const VerifyDeviceCodeResponse: MessageFns<VerifyDeviceCodeResponse> = {
  encode(message: VerifyDeviceCodeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifyDeviceCodeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyDeviceCodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyDeviceCodeResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: VerifyDeviceCodeResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyDeviceCodeResponse>, I>>(base?: I): VerifyDeviceCodeResponse {
    return VerifyDeviceCodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyDeviceCodeResponse>, I>>(object: I): VerifyDeviceCodeResponse {
    const message = createBaseVerifyDeviceCodeResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseGetPlatformRoleRequest(): GetPlatformRoleRequest {
  return {};
}

export const GetPlatformRoleRequest: MessageFns<GetPlatformRoleRequest> = {
  encode(_: GetPlatformRoleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPlatformRoleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlatformRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPlatformRoleRequest {
    return {};
  },

  toJSON(_: GetPlatformRoleRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPlatformRoleRequest>, I>>(base?: I): GetPlatformRoleRequest {
    return GetPlatformRoleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPlatformRoleRequest>, I>>(_: I): GetPlatformRoleRequest {
    const message = createBaseGetPlatformRoleRequest();
    return message;
  },
};

function createBaseGetPlatformRoleResponse(): GetPlatformRoleResponse {
  return { role: "", canCreateTeams: false, canManagePlatform: false };
}

export const GetPlatformRoleResponse: MessageFns<GetPlatformRoleResponse> = {
  encode(message: GetPlatformRoleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.role !== "") {
      writer.uint32(10).string(message.role);
    }
    if (message.canCreateTeams !== false) {
      writer.uint32(16).bool(message.canCreateTeams);
    }
    if (message.canManagePlatform !== false) {
      writer.uint32(24).bool(message.canManagePlatform);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPlatformRoleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPlatformRoleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.canCreateTeams = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.canManagePlatform = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPlatformRoleResponse {
    return {
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      canCreateTeams: isSet(object.canCreateTeams) ? globalThis.Boolean(object.canCreateTeams) : false,
      canManagePlatform: isSet(object.canManagePlatform) ? globalThis.Boolean(object.canManagePlatform) : false,
    };
  },

  toJSON(message: GetPlatformRoleResponse): unknown {
    const obj: any = {};
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.canCreateTeams !== false) {
      obj.canCreateTeams = message.canCreateTeams;
    }
    if (message.canManagePlatform !== false) {
      obj.canManagePlatform = message.canManagePlatform;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPlatformRoleResponse>, I>>(base?: I): GetPlatformRoleResponse {
    return GetPlatformRoleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPlatformRoleResponse>, I>>(object: I): GetPlatformRoleResponse {
    const message = createBaseGetPlatformRoleResponse();
    message.role = object.role ?? "";
    message.canCreateTeams = object.canCreateTeams ?? false;
    message.canManagePlatform = object.canManagePlatform ?? false;
    return message;
  },
};

function createBaseListPlatformUsersRequest(): ListPlatformUsersRequest {
  return { role: "" };
}

export const ListPlatformUsersRequest: MessageFns<ListPlatformUsersRequest> = {
  encode(message: ListPlatformUsersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.role !== "") {
      writer.uint32(10).string(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPlatformUsersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPlatformUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.role = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPlatformUsersRequest {
    return { role: isSet(object.role) ? globalThis.String(object.role) : "" };
  },

  toJSON(message: ListPlatformUsersRequest): unknown {
    const obj: any = {};
    if (message.role !== "") {
      obj.role = message.role;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPlatformUsersRequest>, I>>(base?: I): ListPlatformUsersRequest {
    return ListPlatformUsersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPlatformUsersRequest>, I>>(object: I): ListPlatformUsersRequest {
    const message = createBaseListPlatformUsersRequest();
    message.role = object.role ?? "";
    return message;
  },
};

function createBaseListPlatformUsersResponse(): ListPlatformUsersResponse {
  return { users: [] };
}

export const ListPlatformUsersResponse: MessageFns<ListPlatformUsersResponse> = {
  encode(message: ListPlatformUsersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      PlatformUser.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPlatformUsersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPlatformUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(PlatformUser.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPlatformUsersResponse {
    return {
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => PlatformUser.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListPlatformUsersResponse): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => PlatformUser.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPlatformUsersResponse>, I>>(base?: I): ListPlatformUsersResponse {
    return ListPlatformUsersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPlatformUsersResponse>, I>>(object: I): ListPlatformUsersResponse {
    const message = createBaseListPlatformUsersResponse();
    message.users = object.users?.map((e) => PlatformUser.fromPartial(e)) || [];
    return message;
  },
};

function createBasePlatformUser(): PlatformUser {
  return { userId: "", email: "", role: "", createdAt: "" };
}

export const PlatformUser: MessageFns<PlatformUser> = {
  encode(message: PlatformUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlatformUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlatformUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlatformUser {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: PlatformUser): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlatformUser>, I>>(base?: I): PlatformUser {
    return PlatformUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlatformUser>, I>>(object: I): PlatformUser {
    const message = createBasePlatformUser();
    message.userId = object.userId ?? "";
    message.email = object.email ?? "";
    message.role = object.role ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseUpdatePlatformUserRoleRequest(): UpdatePlatformUserRoleRequest {
  return { userId: "", role: "" };
}

export const UpdatePlatformUserRoleRequest: MessageFns<UpdatePlatformUserRoleRequest> = {
  encode(message: UpdatePlatformUserRoleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.role !== "") {
      writer.uint32(18).string(message.role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePlatformUserRoleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePlatformUserRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.role = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePlatformUserRoleRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
    };
  },

  toJSON(message: UpdatePlatformUserRoleRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePlatformUserRoleRequest>, I>>(base?: I): UpdatePlatformUserRoleRequest {
    return UpdatePlatformUserRoleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePlatformUserRoleRequest>, I>>(
    object: I,
  ): UpdatePlatformUserRoleRequest {
    const message = createBaseUpdatePlatformUserRoleRequest();
    message.userId = object.userId ?? "";
    message.role = object.role ?? "";
    return message;
  },
};

function createBaseUpdatePlatformUserRoleResponse(): UpdatePlatformUserRoleResponse {
  return { success: false };
}

export const UpdatePlatformUserRoleResponse: MessageFns<UpdatePlatformUserRoleResponse> = {
  encode(message: UpdatePlatformUserRoleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePlatformUserRoleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePlatformUserRoleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePlatformUserRoleResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: UpdatePlatformUserRoleResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePlatformUserRoleResponse>, I>>(base?: I): UpdatePlatformUserRoleResponse {
    return UpdatePlatformUserRoleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePlatformUserRoleResponse>, I>>(
    object: I,
  ): UpdatePlatformUserRoleResponse {
    const message = createBaseUpdatePlatformUserRoleResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseNotificationTarget(): NotificationTarget {
  return { type: "", userId: "", teamId: "", minTeamRole: "", minPlatformRole: "" };
}

export const NotificationTarget: MessageFns<NotificationTarget> = {
  encode(message: NotificationTarget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.teamId !== "") {
      writer.uint32(26).string(message.teamId);
    }
    if (message.minTeamRole !== "") {
      writer.uint32(34).string(message.minTeamRole);
    }
    if (message.minPlatformRole !== "") {
      writer.uint32(42).string(message.minPlatformRole);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationTarget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.minTeamRole = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.minPlatformRole = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationTarget {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      minTeamRole: isSet(object.minTeamRole) ? globalThis.String(object.minTeamRole) : "",
      minPlatformRole: isSet(object.minPlatformRole) ? globalThis.String(object.minPlatformRole) : "",
    };
  },

  toJSON(message: NotificationTarget): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.minTeamRole !== "") {
      obj.minTeamRole = message.minTeamRole;
    }
    if (message.minPlatformRole !== "") {
      obj.minPlatformRole = message.minPlatformRole;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NotificationTarget>, I>>(base?: I): NotificationTarget {
    return NotificationTarget.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NotificationTarget>, I>>(object: I): NotificationTarget {
    const message = createBaseNotificationTarget();
    message.type = object.type ?? "";
    message.userId = object.userId ?? "";
    message.teamId = object.teamId ?? "";
    message.minTeamRole = object.minTeamRole ?? "";
    message.minPlatformRole = object.minPlatformRole ?? "";
    return message;
  },
};

function createBaseNotificationAction(): NotificationAction {
  return { id: "", label: "", style: "", endpoint: "", method: "", data: {} };
}

export const NotificationAction: MessageFns<NotificationAction> = {
  encode(message: NotificationAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    if (message.style !== "") {
      writer.uint32(26).string(message.style);
    }
    if (message.endpoint !== "") {
      writer.uint32(34).string(message.endpoint);
    }
    if (message.method !== "") {
      writer.uint32(42).string(message.method);
    }
    Object.entries(message.data).forEach(([key, value]) => {
      NotificationAction_DataEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.style = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.method = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = NotificationAction_DataEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.data[entry6.key] = entry6.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationAction {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      style: isSet(object.style) ? globalThis.String(object.style) : "",
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      data: isObject(object.data)
        ? Object.entries(object.data).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: NotificationAction): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.style !== "") {
      obj.style = message.style;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.data) {
      const entries = Object.entries(message.data);
      if (entries.length > 0) {
        obj.data = {};
        entries.forEach(([k, v]) => {
          obj.data[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NotificationAction>, I>>(base?: I): NotificationAction {
    return NotificationAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NotificationAction>, I>>(object: I): NotificationAction {
    const message = createBaseNotificationAction();
    message.id = object.id ?? "";
    message.label = object.label ?? "";
    message.style = object.style ?? "";
    message.endpoint = object.endpoint ?? "";
    message.method = object.method ?? "";
    message.data = Object.entries(object.data ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseNotificationAction_DataEntry(): NotificationAction_DataEntry {
  return { key: "", value: "" };
}

export const NotificationAction_DataEntry: MessageFns<NotificationAction_DataEntry> = {
  encode(message: NotificationAction_DataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationAction_DataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationAction_DataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationAction_DataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: NotificationAction_DataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NotificationAction_DataEntry>, I>>(base?: I): NotificationAction_DataEntry {
    return NotificationAction_DataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NotificationAction_DataEntry>, I>>(object: I): NotificationAction_DataEntry {
    const message = createBaseNotificationAction_DataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseNotification(): Notification {
  return {
    id: "",
    target: undefined,
    type: "",
    title: "",
    description: "",
    teamId: "",
    teamName: "",
    requestId: "",
    inviteId: "",
    read: false,
    readAt: "",
    actionRequired: false,
    actions: [],
    actionTaken: false,
    createdAt: "",
  };
}

export const Notification: MessageFns<Notification> = {
  encode(message: Notification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.target !== undefined) {
      NotificationTarget.encode(message.target, writer.uint32(18).fork()).join();
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.title !== "") {
      writer.uint32(34).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.teamId !== "") {
      writer.uint32(50).string(message.teamId);
    }
    if (message.teamName !== "") {
      writer.uint32(58).string(message.teamName);
    }
    if (message.requestId !== "") {
      writer.uint32(66).string(message.requestId);
    }
    if (message.inviteId !== "") {
      writer.uint32(74).string(message.inviteId);
    }
    if (message.read !== false) {
      writer.uint32(80).bool(message.read);
    }
    if (message.readAt !== "") {
      writer.uint32(90).string(message.readAt);
    }
    if (message.actionRequired !== false) {
      writer.uint32(96).bool(message.actionRequired);
    }
    for (const v of message.actions) {
      NotificationAction.encode(v!, writer.uint32(106).fork()).join();
    }
    if (message.actionTaken !== false) {
      writer.uint32(112).bool(message.actionTaken);
    }
    if (message.createdAt !== "") {
      writer.uint32(122).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Notification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.target = NotificationTarget.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.teamId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.teamName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.inviteId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.read = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.readAt = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.actionRequired = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.actions.push(NotificationAction.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.actionTaken = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Notification {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      target: isSet(object.target) ? NotificationTarget.fromJSON(object.target) : undefined,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
      teamName: isSet(object.teamName) ? globalThis.String(object.teamName) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      inviteId: isSet(object.inviteId) ? globalThis.String(object.inviteId) : "",
      read: isSet(object.read) ? globalThis.Boolean(object.read) : false,
      readAt: isSet(object.readAt) ? globalThis.String(object.readAt) : "",
      actionRequired: isSet(object.actionRequired) ? globalThis.Boolean(object.actionRequired) : false,
      actions: globalThis.Array.isArray(object?.actions)
        ? object.actions.map((e: any) => NotificationAction.fromJSON(e))
        : [],
      actionTaken: isSet(object.actionTaken) ? globalThis.Boolean(object.actionTaken) : false,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: Notification): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.target !== undefined) {
      obj.target = NotificationTarget.toJSON(message.target);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.teamId !== "") {
      obj.teamId = message.teamId;
    }
    if (message.teamName !== "") {
      obj.teamName = message.teamName;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.inviteId !== "") {
      obj.inviteId = message.inviteId;
    }
    if (message.read !== false) {
      obj.read = message.read;
    }
    if (message.readAt !== "") {
      obj.readAt = message.readAt;
    }
    if (message.actionRequired !== false) {
      obj.actionRequired = message.actionRequired;
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => NotificationAction.toJSON(e));
    }
    if (message.actionTaken !== false) {
      obj.actionTaken = message.actionTaken;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Notification>, I>>(base?: I): Notification {
    return Notification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Notification>, I>>(object: I): Notification {
    const message = createBaseNotification();
    message.id = object.id ?? "";
    message.target = (object.target !== undefined && object.target !== null)
      ? NotificationTarget.fromPartial(object.target)
      : undefined;
    message.type = object.type ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.teamId = object.teamId ?? "";
    message.teamName = object.teamName ?? "";
    message.requestId = object.requestId ?? "";
    message.inviteId = object.inviteId ?? "";
    message.read = object.read ?? false;
    message.readAt = object.readAt ?? "";
    message.actionRequired = object.actionRequired ?? false;
    message.actions = object.actions?.map((e) => NotificationAction.fromPartial(e)) || [];
    message.actionTaken = object.actionTaken ?? false;
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseListNotificationsRequest(): ListNotificationsRequest {
  return { limit: 0, offset: 0, unreadOnly: false, actionRequiredOnly: false };
}

export const ListNotificationsRequest: MessageFns<ListNotificationsRequest> = {
  encode(message: ListNotificationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.limit !== 0) {
      writer.uint32(8).int32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(16).int32(message.offset);
    }
    if (message.unreadOnly !== false) {
      writer.uint32(24).bool(message.unreadOnly);
    }
    if (message.actionRequiredOnly !== false) {
      writer.uint32(32).bool(message.actionRequiredOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotificationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotificationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.offset = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.unreadOnly = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.actionRequiredOnly = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotificationsRequest {
    return {
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
      unreadOnly: isSet(object.unreadOnly) ? globalThis.Boolean(object.unreadOnly) : false,
      actionRequiredOnly: isSet(object.actionRequiredOnly) ? globalThis.Boolean(object.actionRequiredOnly) : false,
    };
  },

  toJSON(message: ListNotificationsRequest): unknown {
    const obj: any = {};
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.unreadOnly !== false) {
      obj.unreadOnly = message.unreadOnly;
    }
    if (message.actionRequiredOnly !== false) {
      obj.actionRequiredOnly = message.actionRequiredOnly;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListNotificationsRequest>, I>>(base?: I): ListNotificationsRequest {
    return ListNotificationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListNotificationsRequest>, I>>(object: I): ListNotificationsRequest {
    const message = createBaseListNotificationsRequest();
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    message.unreadOnly = object.unreadOnly ?? false;
    message.actionRequiredOnly = object.actionRequiredOnly ?? false;
    return message;
  },
};

function createBaseListNotificationsResponse(): ListNotificationsResponse {
  return { notifications: [], totalCount: 0 };
}

export const ListNotificationsResponse: MessageFns<ListNotificationsResponse> = {
  encode(message: ListNotificationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.notifications) {
      Notification.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListNotificationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListNotificationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notifications.push(Notification.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListNotificationsResponse {
    return {
      notifications: globalThis.Array.isArray(object?.notifications)
        ? object.notifications.map((e: any) => Notification.fromJSON(e))
        : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
    };
  },

  toJSON(message: ListNotificationsResponse): unknown {
    const obj: any = {};
    if (message.notifications?.length) {
      obj.notifications = message.notifications.map((e) => Notification.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListNotificationsResponse>, I>>(base?: I): ListNotificationsResponse {
    return ListNotificationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListNotificationsResponse>, I>>(object: I): ListNotificationsResponse {
    const message = createBaseListNotificationsResponse();
    message.notifications = object.notifications?.map((e) => Notification.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    return message;
  },
};

function createBaseGetUnreadNotificationCountRequest(): GetUnreadNotificationCountRequest {
  return {};
}

export const GetUnreadNotificationCountRequest: MessageFns<GetUnreadNotificationCountRequest> = {
  encode(_: GetUnreadNotificationCountRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUnreadNotificationCountRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUnreadNotificationCountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetUnreadNotificationCountRequest {
    return {};
  },

  toJSON(_: GetUnreadNotificationCountRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUnreadNotificationCountRequest>, I>>(
    base?: I,
  ): GetUnreadNotificationCountRequest {
    return GetUnreadNotificationCountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUnreadNotificationCountRequest>, I>>(
    _: I,
  ): GetUnreadNotificationCountRequest {
    const message = createBaseGetUnreadNotificationCountRequest();
    return message;
  },
};

function createBaseGetUnreadNotificationCountResponse(): GetUnreadNotificationCountResponse {
  return { count: 0 };
}

export const GetUnreadNotificationCountResponse: MessageFns<GetUnreadNotificationCountResponse> = {
  encode(message: GetUnreadNotificationCountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.count !== 0) {
      writer.uint32(8).int32(message.count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUnreadNotificationCountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUnreadNotificationCountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUnreadNotificationCountResponse {
    return { count: isSet(object.count) ? globalThis.Number(object.count) : 0 };
  },

  toJSON(message: GetUnreadNotificationCountResponse): unknown {
    const obj: any = {};
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUnreadNotificationCountResponse>, I>>(
    base?: I,
  ): GetUnreadNotificationCountResponse {
    return GetUnreadNotificationCountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUnreadNotificationCountResponse>, I>>(
    object: I,
  ): GetUnreadNotificationCountResponse {
    const message = createBaseGetUnreadNotificationCountResponse();
    message.count = object.count ?? 0;
    return message;
  },
};

function createBaseMarkNotificationAsReadRequest(): MarkNotificationAsReadRequest {
  return { notificationId: "" };
}

export const MarkNotificationAsReadRequest: MessageFns<MarkNotificationAsReadRequest> = {
  encode(message: MarkNotificationAsReadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notificationId !== "") {
      writer.uint32(10).string(message.notificationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkNotificationAsReadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkNotificationAsReadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notificationId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkNotificationAsReadRequest {
    return { notificationId: isSet(object.notificationId) ? globalThis.String(object.notificationId) : "" };
  },

  toJSON(message: MarkNotificationAsReadRequest): unknown {
    const obj: any = {};
    if (message.notificationId !== "") {
      obj.notificationId = message.notificationId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkNotificationAsReadRequest>, I>>(base?: I): MarkNotificationAsReadRequest {
    return MarkNotificationAsReadRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkNotificationAsReadRequest>, I>>(
    object: I,
  ): MarkNotificationAsReadRequest {
    const message = createBaseMarkNotificationAsReadRequest();
    message.notificationId = object.notificationId ?? "";
    return message;
  },
};

function createBaseMarkNotificationAsReadResponse(): MarkNotificationAsReadResponse {
  return { success: false };
}

export const MarkNotificationAsReadResponse: MessageFns<MarkNotificationAsReadResponse> = {
  encode(message: MarkNotificationAsReadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkNotificationAsReadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkNotificationAsReadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkNotificationAsReadResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: MarkNotificationAsReadResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkNotificationAsReadResponse>, I>>(base?: I): MarkNotificationAsReadResponse {
    return MarkNotificationAsReadResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkNotificationAsReadResponse>, I>>(
    object: I,
  ): MarkNotificationAsReadResponse {
    const message = createBaseMarkNotificationAsReadResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseMarkAllNotificationsAsReadRequest(): MarkAllNotificationsAsReadRequest {
  return {};
}

export const MarkAllNotificationsAsReadRequest: MessageFns<MarkAllNotificationsAsReadRequest> = {
  encode(_: MarkAllNotificationsAsReadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkAllNotificationsAsReadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkAllNotificationsAsReadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MarkAllNotificationsAsReadRequest {
    return {};
  },

  toJSON(_: MarkAllNotificationsAsReadRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkAllNotificationsAsReadRequest>, I>>(
    base?: I,
  ): MarkAllNotificationsAsReadRequest {
    return MarkAllNotificationsAsReadRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkAllNotificationsAsReadRequest>, I>>(
    _: I,
  ): MarkAllNotificationsAsReadRequest {
    const message = createBaseMarkAllNotificationsAsReadRequest();
    return message;
  },
};

function createBaseMarkAllNotificationsAsReadResponse(): MarkAllNotificationsAsReadResponse {
  return { markedCount: 0 };
}

export const MarkAllNotificationsAsReadResponse: MessageFns<MarkAllNotificationsAsReadResponse> = {
  encode(message: MarkAllNotificationsAsReadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.markedCount !== 0) {
      writer.uint32(8).int32(message.markedCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkAllNotificationsAsReadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkAllNotificationsAsReadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.markedCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkAllNotificationsAsReadResponse {
    return { markedCount: isSet(object.markedCount) ? globalThis.Number(object.markedCount) : 0 };
  },

  toJSON(message: MarkAllNotificationsAsReadResponse): unknown {
    const obj: any = {};
    if (message.markedCount !== 0) {
      obj.markedCount = Math.round(message.markedCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkAllNotificationsAsReadResponse>, I>>(
    base?: I,
  ): MarkAllNotificationsAsReadResponse {
    return MarkAllNotificationsAsReadResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkAllNotificationsAsReadResponse>, I>>(
    object: I,
  ): MarkAllNotificationsAsReadResponse {
    const message = createBaseMarkAllNotificationsAsReadResponse();
    message.markedCount = object.markedCount ?? 0;
    return message;
  },
};

function createBaseMarkNotificationActionTakenRequest(): MarkNotificationActionTakenRequest {
  return { notificationId: "", actionId: "" };
}

export const MarkNotificationActionTakenRequest: MessageFns<MarkNotificationActionTakenRequest> = {
  encode(message: MarkNotificationActionTakenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.notificationId !== "") {
      writer.uint32(10).string(message.notificationId);
    }
    if (message.actionId !== "") {
      writer.uint32(18).string(message.actionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkNotificationActionTakenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkNotificationActionTakenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.notificationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.actionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkNotificationActionTakenRequest {
    return {
      notificationId: isSet(object.notificationId) ? globalThis.String(object.notificationId) : "",
      actionId: isSet(object.actionId) ? globalThis.String(object.actionId) : "",
    };
  },

  toJSON(message: MarkNotificationActionTakenRequest): unknown {
    const obj: any = {};
    if (message.notificationId !== "") {
      obj.notificationId = message.notificationId;
    }
    if (message.actionId !== "") {
      obj.actionId = message.actionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkNotificationActionTakenRequest>, I>>(
    base?: I,
  ): MarkNotificationActionTakenRequest {
    return MarkNotificationActionTakenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkNotificationActionTakenRequest>, I>>(
    object: I,
  ): MarkNotificationActionTakenRequest {
    const message = createBaseMarkNotificationActionTakenRequest();
    message.notificationId = object.notificationId ?? "";
    message.actionId = object.actionId ?? "";
    return message;
  },
};

function createBaseMarkNotificationActionTakenResponse(): MarkNotificationActionTakenResponse {
  return { success: false };
}

export const MarkNotificationActionTakenResponse: MessageFns<MarkNotificationActionTakenResponse> = {
  encode(message: MarkNotificationActionTakenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkNotificationActionTakenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkNotificationActionTakenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkNotificationActionTakenResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: MarkNotificationActionTakenResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkNotificationActionTakenResponse>, I>>(
    base?: I,
  ): MarkNotificationActionTakenResponse {
    return MarkNotificationActionTakenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkNotificationActionTakenResponse>, I>>(
    object: I,
  ): MarkNotificationActionTakenResponse {
    const message = createBaseMarkNotificationActionTakenResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export type AuthService = typeof AuthService;
export const AuthService = {
  /** For Web */
  login: {
    path: "/Auth/Login",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LoginRequest): Buffer => Buffer.from(LoginRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): LoginRequest => LoginRequest.decode(value),
    responseSerialize: (value: LoginResponse): Buffer => Buffer.from(LoginResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): LoginResponse => LoginResponse.decode(value),
  },
  loginWithSso: {
    path: "/Auth/LoginWithSSO",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LoginWithSSORequest): Buffer => Buffer.from(LoginWithSSORequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): LoginWithSSORequest => LoginWithSSORequest.decode(value),
    responseSerialize: (value: LoginWithSSOResponse): Buffer =>
      Buffer.from(LoginWithSSOResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): LoginWithSSOResponse => LoginWithSSOResponse.decode(value),
  },
  loginWithOAuth: {
    path: "/Auth/LoginWithOAuth",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LoginWithOAuthRequest): Buffer =>
      Buffer.from(LoginWithOAuthRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): LoginWithOAuthRequest => LoginWithOAuthRequest.decode(value),
    responseSerialize: (value: LoginWithOAuthResponse): Buffer =>
      Buffer.from(LoginWithOAuthResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): LoginWithOAuthResponse => LoginWithOAuthResponse.decode(value),
  },
  getUserDetails: {
    path: "/Auth/GetUserDetails",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserDetailsRequest): Buffer =>
      Buffer.from(GetUserDetailsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUserDetailsRequest => GetUserDetailsRequest.decode(value),
    responseSerialize: (value: GetUserDetailsResponse): Buffer =>
      Buffer.from(GetUserDetailsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetUserDetailsResponse => GetUserDetailsResponse.decode(value),
  },
  signup: {
    path: "/Auth/Signup",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SignupRequest): Buffer => Buffer.from(SignupRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SignupRequest => SignupRequest.decode(value),
    responseSerialize: (value: SignupResponse): Buffer => Buffer.from(SignupResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SignupResponse => SignupResponse.decode(value),
  },
  requestResetPassword: {
    path: "/Auth/RequestResetPassword",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RequestResetPasswordRequest): Buffer =>
      Buffer.from(RequestResetPasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RequestResetPasswordRequest => RequestResetPasswordRequest.decode(value),
    responseSerialize: (value: RequestResetPasswordResponse): Buffer =>
      Buffer.from(RequestResetPasswordResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): RequestResetPasswordResponse => RequestResetPasswordResponse.decode(value),
  },
  resetPassword: {
    path: "/Auth/ResetPassword",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ResetPasswordRequest): Buffer => Buffer.from(ResetPasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ResetPasswordRequest => ResetPasswordRequest.decode(value),
    responseSerialize: (value: ResetPasswordResponse): Buffer =>
      Buffer.from(ResetPasswordResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ResetPasswordResponse => ResetPasswordResponse.decode(value),
  },
  verifyEmail: {
    path: "/Auth/VerifyEmail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: VerifyEmailRequest): Buffer => Buffer.from(VerifyEmailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): VerifyEmailRequest => VerifyEmailRequest.decode(value),
    responseSerialize: (value: VerifyEmailResponse): Buffer => Buffer.from(VerifyEmailResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): VerifyEmailResponse => VerifyEmailResponse.decode(value),
  },
  resendEmailVerification: {
    path: "/Auth/ResendEmailVerification",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ResendEmailVerificationRequest): Buffer =>
      Buffer.from(ResendEmailVerificationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ResendEmailVerificationRequest => ResendEmailVerificationRequest.decode(value),
    responseSerialize: (value: ResendEmailVerificationResponse): Buffer =>
      Buffer.from(ResendEmailVerificationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ResendEmailVerificationResponse =>
      ResendEmailVerificationResponse.decode(value),
  },
  refreshToken: {
    path: "/Auth/RefreshToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RefreshTokenRequest): Buffer => Buffer.from(RefreshTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RefreshTokenRequest => RefreshTokenRequest.decode(value),
    responseSerialize: (value: RefreshTokenResponse): Buffer =>
      Buffer.from(RefreshTokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): RefreshTokenResponse => RefreshTokenResponse.decode(value),
  },
  /** For CLI Device Flow */
  initiateDeviceFlow: {
    path: "/Auth/InitiateDeviceFlow",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InitiateDeviceFlowRequest): Buffer =>
      Buffer.from(InitiateDeviceFlowRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): InitiateDeviceFlowRequest => InitiateDeviceFlowRequest.decode(value),
    responseSerialize: (value: InitiateDeviceFlowResponse): Buffer =>
      Buffer.from(InitiateDeviceFlowResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): InitiateDeviceFlowResponse => InitiateDeviceFlowResponse.decode(value),
  },
  pollDeviceToken: {
    path: "/Auth/PollDeviceToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PollDeviceTokenRequest): Buffer =>
      Buffer.from(PollDeviceTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): PollDeviceTokenRequest => PollDeviceTokenRequest.decode(value),
    responseSerialize: (value: PollDeviceTokenResponse): Buffer =>
      Buffer.from(PollDeviceTokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): PollDeviceTokenResponse => PollDeviceTokenResponse.decode(value),
  },
  verifyDeviceCode: {
    path: "/Auth/VerifyDeviceCode",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: VerifyDeviceCodeRequest): Buffer =>
      Buffer.from(VerifyDeviceCodeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): VerifyDeviceCodeRequest => VerifyDeviceCodeRequest.decode(value),
    responseSerialize: (value: VerifyDeviceCodeResponse): Buffer =>
      Buffer.from(VerifyDeviceCodeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): VerifyDeviceCodeResponse => VerifyDeviceCodeResponse.decode(value),
  },
  /** Platform user management */
  getPlatformRole: {
    path: "/Auth/GetPlatformRole",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetPlatformRoleRequest): Buffer =>
      Buffer.from(GetPlatformRoleRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetPlatformRoleRequest => GetPlatformRoleRequest.decode(value),
    responseSerialize: (value: GetPlatformRoleResponse): Buffer =>
      Buffer.from(GetPlatformRoleResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetPlatformRoleResponse => GetPlatformRoleResponse.decode(value),
  },
  listPlatformUsers: {
    path: "/Auth/ListPlatformUsers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListPlatformUsersRequest): Buffer =>
      Buffer.from(ListPlatformUsersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListPlatformUsersRequest => ListPlatformUsersRequest.decode(value),
    responseSerialize: (value: ListPlatformUsersResponse): Buffer =>
      Buffer.from(ListPlatformUsersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListPlatformUsersResponse => ListPlatformUsersResponse.decode(value),
  },
  updatePlatformUserRole: {
    path: "/Auth/UpdatePlatformUserRole",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdatePlatformUserRoleRequest): Buffer =>
      Buffer.from(UpdatePlatformUserRoleRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdatePlatformUserRoleRequest => UpdatePlatformUserRoleRequest.decode(value),
    responseSerialize: (value: UpdatePlatformUserRoleResponse): Buffer =>
      Buffer.from(UpdatePlatformUserRoleResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UpdatePlatformUserRoleResponse =>
      UpdatePlatformUserRoleResponse.decode(value),
  },
  /** Notifications */
  listNotifications: {
    path: "/Auth/ListNotifications",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListNotificationsRequest): Buffer =>
      Buffer.from(ListNotificationsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListNotificationsRequest => ListNotificationsRequest.decode(value),
    responseSerialize: (value: ListNotificationsResponse): Buffer =>
      Buffer.from(ListNotificationsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListNotificationsResponse => ListNotificationsResponse.decode(value),
  },
  getUnreadNotificationCount: {
    path: "/Auth/GetUnreadNotificationCount",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUnreadNotificationCountRequest): Buffer =>
      Buffer.from(GetUnreadNotificationCountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUnreadNotificationCountRequest =>
      GetUnreadNotificationCountRequest.decode(value),
    responseSerialize: (value: GetUnreadNotificationCountResponse): Buffer =>
      Buffer.from(GetUnreadNotificationCountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetUnreadNotificationCountResponse =>
      GetUnreadNotificationCountResponse.decode(value),
  },
  markNotificationAsRead: {
    path: "/Auth/MarkNotificationAsRead",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MarkNotificationAsReadRequest): Buffer =>
      Buffer.from(MarkNotificationAsReadRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): MarkNotificationAsReadRequest => MarkNotificationAsReadRequest.decode(value),
    responseSerialize: (value: MarkNotificationAsReadResponse): Buffer =>
      Buffer.from(MarkNotificationAsReadResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MarkNotificationAsReadResponse =>
      MarkNotificationAsReadResponse.decode(value),
  },
  markAllNotificationsAsRead: {
    path: "/Auth/MarkAllNotificationsAsRead",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MarkAllNotificationsAsReadRequest): Buffer =>
      Buffer.from(MarkAllNotificationsAsReadRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): MarkAllNotificationsAsReadRequest =>
      MarkAllNotificationsAsReadRequest.decode(value),
    responseSerialize: (value: MarkAllNotificationsAsReadResponse): Buffer =>
      Buffer.from(MarkAllNotificationsAsReadResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MarkAllNotificationsAsReadResponse =>
      MarkAllNotificationsAsReadResponse.decode(value),
  },
  markNotificationActionTaken: {
    path: "/Auth/MarkNotificationActionTaken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MarkNotificationActionTakenRequest): Buffer =>
      Buffer.from(MarkNotificationActionTakenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): MarkNotificationActionTakenRequest =>
      MarkNotificationActionTakenRequest.decode(value),
    responseSerialize: (value: MarkNotificationActionTakenResponse): Buffer =>
      Buffer.from(MarkNotificationActionTakenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MarkNotificationActionTakenResponse =>
      MarkNotificationActionTakenResponse.decode(value),
  },
} as const;

export interface AuthServer extends UntypedServiceImplementation {
  /** For Web */
  login: handleUnaryCall<LoginRequest, LoginResponse>;
  loginWithSso: handleUnaryCall<LoginWithSSORequest, LoginWithSSOResponse>;
  loginWithOAuth: handleUnaryCall<LoginWithOAuthRequest, LoginWithOAuthResponse>;
  getUserDetails: handleUnaryCall<GetUserDetailsRequest, GetUserDetailsResponse>;
  signup: handleUnaryCall<SignupRequest, SignupResponse>;
  requestResetPassword: handleUnaryCall<RequestResetPasswordRequest, RequestResetPasswordResponse>;
  resetPassword: handleUnaryCall<ResetPasswordRequest, ResetPasswordResponse>;
  verifyEmail: handleUnaryCall<VerifyEmailRequest, VerifyEmailResponse>;
  resendEmailVerification: handleUnaryCall<ResendEmailVerificationRequest, ResendEmailVerificationResponse>;
  refreshToken: handleUnaryCall<RefreshTokenRequest, RefreshTokenResponse>;
  /** For CLI Device Flow */
  initiateDeviceFlow: handleUnaryCall<InitiateDeviceFlowRequest, InitiateDeviceFlowResponse>;
  pollDeviceToken: handleUnaryCall<PollDeviceTokenRequest, PollDeviceTokenResponse>;
  verifyDeviceCode: handleUnaryCall<VerifyDeviceCodeRequest, VerifyDeviceCodeResponse>;
  /** Platform user management */
  getPlatformRole: handleUnaryCall<GetPlatformRoleRequest, GetPlatformRoleResponse>;
  listPlatformUsers: handleUnaryCall<ListPlatformUsersRequest, ListPlatformUsersResponse>;
  updatePlatformUserRole: handleUnaryCall<UpdatePlatformUserRoleRequest, UpdatePlatformUserRoleResponse>;
  /** Notifications */
  listNotifications: handleUnaryCall<ListNotificationsRequest, ListNotificationsResponse>;
  getUnreadNotificationCount: handleUnaryCall<GetUnreadNotificationCountRequest, GetUnreadNotificationCountResponse>;
  markNotificationAsRead: handleUnaryCall<MarkNotificationAsReadRequest, MarkNotificationAsReadResponse>;
  markAllNotificationsAsRead: handleUnaryCall<MarkAllNotificationsAsReadRequest, MarkAllNotificationsAsReadResponse>;
  markNotificationActionTaken: handleUnaryCall<MarkNotificationActionTakenRequest, MarkNotificationActionTakenResponse>;
}

export interface AuthClient extends Client {
  /** For Web */
  login(
    request: LoginRequest,
    callback: (error: ServiceError | null, response: LoginResponse) => void,
  ): ClientUnaryCall;
  login(
    request: LoginRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: LoginResponse) => void,
  ): ClientUnaryCall;
  login(
    request: LoginRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: LoginResponse) => void,
  ): ClientUnaryCall;
  loginWithSso(
    request: LoginWithSSORequest,
    callback: (error: ServiceError | null, response: LoginWithSSOResponse) => void,
  ): ClientUnaryCall;
  loginWithSso(
    request: LoginWithSSORequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: LoginWithSSOResponse) => void,
  ): ClientUnaryCall;
  loginWithSso(
    request: LoginWithSSORequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: LoginWithSSOResponse) => void,
  ): ClientUnaryCall;
  loginWithOAuth(
    request: LoginWithOAuthRequest,
    callback: (error: ServiceError | null, response: LoginWithOAuthResponse) => void,
  ): ClientUnaryCall;
  loginWithOAuth(
    request: LoginWithOAuthRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: LoginWithOAuthResponse) => void,
  ): ClientUnaryCall;
  loginWithOAuth(
    request: LoginWithOAuthRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: LoginWithOAuthResponse) => void,
  ): ClientUnaryCall;
  getUserDetails(
    request: GetUserDetailsRequest,
    callback: (error: ServiceError | null, response: GetUserDetailsResponse) => void,
  ): ClientUnaryCall;
  getUserDetails(
    request: GetUserDetailsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUserDetailsResponse) => void,
  ): ClientUnaryCall;
  getUserDetails(
    request: GetUserDetailsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUserDetailsResponse) => void,
  ): ClientUnaryCall;
  signup(
    request: SignupRequest,
    callback: (error: ServiceError | null, response: SignupResponse) => void,
  ): ClientUnaryCall;
  signup(
    request: SignupRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SignupResponse) => void,
  ): ClientUnaryCall;
  signup(
    request: SignupRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SignupResponse) => void,
  ): ClientUnaryCall;
  requestResetPassword(
    request: RequestResetPasswordRequest,
    callback: (error: ServiceError | null, response: RequestResetPasswordResponse) => void,
  ): ClientUnaryCall;
  requestResetPassword(
    request: RequestResetPasswordRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RequestResetPasswordResponse) => void,
  ): ClientUnaryCall;
  requestResetPassword(
    request: RequestResetPasswordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RequestResetPasswordResponse) => void,
  ): ClientUnaryCall;
  resetPassword(
    request: ResetPasswordRequest,
    callback: (error: ServiceError | null, response: ResetPasswordResponse) => void,
  ): ClientUnaryCall;
  resetPassword(
    request: ResetPasswordRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ResetPasswordResponse) => void,
  ): ClientUnaryCall;
  resetPassword(
    request: ResetPasswordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResetPasswordResponse) => void,
  ): ClientUnaryCall;
  verifyEmail(
    request: VerifyEmailRequest,
    callback: (error: ServiceError | null, response: VerifyEmailResponse) => void,
  ): ClientUnaryCall;
  verifyEmail(
    request: VerifyEmailRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: VerifyEmailResponse) => void,
  ): ClientUnaryCall;
  verifyEmail(
    request: VerifyEmailRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: VerifyEmailResponse) => void,
  ): ClientUnaryCall;
  resendEmailVerification(
    request: ResendEmailVerificationRequest,
    callback: (error: ServiceError | null, response: ResendEmailVerificationResponse) => void,
  ): ClientUnaryCall;
  resendEmailVerification(
    request: ResendEmailVerificationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ResendEmailVerificationResponse) => void,
  ): ClientUnaryCall;
  resendEmailVerification(
    request: ResendEmailVerificationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ResendEmailVerificationResponse) => void,
  ): ClientUnaryCall;
  refreshToken(
    request: RefreshTokenRequest,
    callback: (error: ServiceError | null, response: RefreshTokenResponse) => void,
  ): ClientUnaryCall;
  refreshToken(
    request: RefreshTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RefreshTokenResponse) => void,
  ): ClientUnaryCall;
  refreshToken(
    request: RefreshTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RefreshTokenResponse) => void,
  ): ClientUnaryCall;
  /** For CLI Device Flow */
  initiateDeviceFlow(
    request: InitiateDeviceFlowRequest,
    callback: (error: ServiceError | null, response: InitiateDeviceFlowResponse) => void,
  ): ClientUnaryCall;
  initiateDeviceFlow(
    request: InitiateDeviceFlowRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: InitiateDeviceFlowResponse) => void,
  ): ClientUnaryCall;
  initiateDeviceFlow(
    request: InitiateDeviceFlowRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: InitiateDeviceFlowResponse) => void,
  ): ClientUnaryCall;
  pollDeviceToken(
    request: PollDeviceTokenRequest,
    callback: (error: ServiceError | null, response: PollDeviceTokenResponse) => void,
  ): ClientUnaryCall;
  pollDeviceToken(
    request: PollDeviceTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PollDeviceTokenResponse) => void,
  ): ClientUnaryCall;
  pollDeviceToken(
    request: PollDeviceTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PollDeviceTokenResponse) => void,
  ): ClientUnaryCall;
  verifyDeviceCode(
    request: VerifyDeviceCodeRequest,
    callback: (error: ServiceError | null, response: VerifyDeviceCodeResponse) => void,
  ): ClientUnaryCall;
  verifyDeviceCode(
    request: VerifyDeviceCodeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: VerifyDeviceCodeResponse) => void,
  ): ClientUnaryCall;
  verifyDeviceCode(
    request: VerifyDeviceCodeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: VerifyDeviceCodeResponse) => void,
  ): ClientUnaryCall;
  /** Platform user management */
  getPlatformRole(
    request: GetPlatformRoleRequest,
    callback: (error: ServiceError | null, response: GetPlatformRoleResponse) => void,
  ): ClientUnaryCall;
  getPlatformRole(
    request: GetPlatformRoleRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetPlatformRoleResponse) => void,
  ): ClientUnaryCall;
  getPlatformRole(
    request: GetPlatformRoleRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetPlatformRoleResponse) => void,
  ): ClientUnaryCall;
  listPlatformUsers(
    request: ListPlatformUsersRequest,
    callback: (error: ServiceError | null, response: ListPlatformUsersResponse) => void,
  ): ClientUnaryCall;
  listPlatformUsers(
    request: ListPlatformUsersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListPlatformUsersResponse) => void,
  ): ClientUnaryCall;
  listPlatformUsers(
    request: ListPlatformUsersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListPlatformUsersResponse) => void,
  ): ClientUnaryCall;
  updatePlatformUserRole(
    request: UpdatePlatformUserRoleRequest,
    callback: (error: ServiceError | null, response: UpdatePlatformUserRoleResponse) => void,
  ): ClientUnaryCall;
  updatePlatformUserRole(
    request: UpdatePlatformUserRoleRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdatePlatformUserRoleResponse) => void,
  ): ClientUnaryCall;
  updatePlatformUserRole(
    request: UpdatePlatformUserRoleRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdatePlatformUserRoleResponse) => void,
  ): ClientUnaryCall;
  /** Notifications */
  listNotifications(
    request: ListNotificationsRequest,
    callback: (error: ServiceError | null, response: ListNotificationsResponse) => void,
  ): ClientUnaryCall;
  listNotifications(
    request: ListNotificationsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListNotificationsResponse) => void,
  ): ClientUnaryCall;
  listNotifications(
    request: ListNotificationsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListNotificationsResponse) => void,
  ): ClientUnaryCall;
  getUnreadNotificationCount(
    request: GetUnreadNotificationCountRequest,
    callback: (error: ServiceError | null, response: GetUnreadNotificationCountResponse) => void,
  ): ClientUnaryCall;
  getUnreadNotificationCount(
    request: GetUnreadNotificationCountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUnreadNotificationCountResponse) => void,
  ): ClientUnaryCall;
  getUnreadNotificationCount(
    request: GetUnreadNotificationCountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUnreadNotificationCountResponse) => void,
  ): ClientUnaryCall;
  markNotificationAsRead(
    request: MarkNotificationAsReadRequest,
    callback: (error: ServiceError | null, response: MarkNotificationAsReadResponse) => void,
  ): ClientUnaryCall;
  markNotificationAsRead(
    request: MarkNotificationAsReadRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MarkNotificationAsReadResponse) => void,
  ): ClientUnaryCall;
  markNotificationAsRead(
    request: MarkNotificationAsReadRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MarkNotificationAsReadResponse) => void,
  ): ClientUnaryCall;
  markAllNotificationsAsRead(
    request: MarkAllNotificationsAsReadRequest,
    callback: (error: ServiceError | null, response: MarkAllNotificationsAsReadResponse) => void,
  ): ClientUnaryCall;
  markAllNotificationsAsRead(
    request: MarkAllNotificationsAsReadRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MarkAllNotificationsAsReadResponse) => void,
  ): ClientUnaryCall;
  markAllNotificationsAsRead(
    request: MarkAllNotificationsAsReadRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MarkAllNotificationsAsReadResponse) => void,
  ): ClientUnaryCall;
  markNotificationActionTaken(
    request: MarkNotificationActionTakenRequest,
    callback: (error: ServiceError | null, response: MarkNotificationActionTakenResponse) => void,
  ): ClientUnaryCall;
  markNotificationActionTaken(
    request: MarkNotificationActionTakenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MarkNotificationActionTakenResponse) => void,
  ): ClientUnaryCall;
  markNotificationActionTaken(
    request: MarkNotificationActionTakenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MarkNotificationActionTakenResponse) => void,
  ): ClientUnaryCall;
}

export const AuthClient = makeGenericClientConstructor(AuthService, "Auth") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuthClient;
  service: typeof AuthService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
