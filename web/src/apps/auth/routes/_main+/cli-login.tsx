import { Button, IconButton } from '~/components/atoms/button';
import { IExtRemixCtx } from '~/root/lib/types/common';
import getQueries from '~/root/lib/server/helpers/get-queries';
import { getCookie } from '~/root/lib/app-setup/cookies';
import withContext from '~/root/lib/app-setup/with-contxt';
import {
  Link,
  useLoaderData,
  useLocation,
  useNavigate,
} from '@remix-run/react';
import md5 from '~/root/lib/client/helpers/md5';
import { Avatar } from '~/components/atoms/avatar';
import { cn } from '~/components/utils';
import { SignOut } from '@jengaicons/react';
import { GQLServerHandler } from '~/auth/server/gql/saved-queries';
import { BrandLogo } from '~/components/branding/brand-logo';
import Container from '~/auth/components/container';

function CliLogin() {
  const { loginId, user } = useLoaderData();

  const location = useLocation();
  const navigate = useNavigate();

  const onAuthenticate = () => {
    if (!loginId) return;
    const cookie = getCookie();
    cookie.set('cliLogin', loginId);
    navigate('/');
  };

  if (!loginId) {
    return (
      <Container>
        <div className="flex flex-col gap-5xl">
          <BrandLogo darkBg={false} size={60} />
          <div className="flex flex-col gap-lg text-center max-w-[400px] items-center">
            <span className="headingXl flex flex-row items-center gap-xl">
              Login id not provided
            </span>
            <div className="bodyMd flex flex-col gap-md">
              <span className="text-text-soft">
                You should be able to login with the url generated by <br />
                <code className="mx-md">kl login</code>
                command
              </span>
              <span>
                Setup kloudlite-client following instructions provided
                <span>
                  <Button
                    content="here"
                    to="https://github.com/kloudlite/kl"
                    LinkComponent={Link}
                    variant="primary-plain"
                    className="!inline"
                  />
                </span>
              </span>
            </div>
          </div>
        </div>
      </Container>
    );
  }

  const { avatar, email, name } = user || {};

  const profile = () => {
    return (
      <div className="">
        <div className="">
          {/* eslint-disable-next-line no-nested-ternary */}
          {avatar ? (
            <img
              alt="profile"
              src={avatar}
              className="rounded-full object-cover"
            />
          ) : email ? (
            <img
              className="rounded-full"
              alt={email}
              src={`https://www.gravatar.com/avatar/${md5(email)}?d=identicon`}
            />
          ) : (
            <Avatar size="lg" image={email} />
          )}
        </div>
      </div>
    );
  };

  const logOut = async () => {
    navigate(
      `${
        location.pathname +
        location.search +
        (location.search.trim() ? '&' : '?')
      }logout=yes`,
      { replace: true }
    );
  };

  return (
    <Container>
      <div
        className={cn(
          'flex gap-3xl min-w-[500px] p-3xl bg-surface-basic-default rounded border-border-default border items-center',
          'flex-row'
        )}
      >
        <div className="flex gap-lg flex-grow items-center">
          <BrandLogo darkBg={false} size={40} />
          <div className="flex flex-col flex-grow">
            <div className="headingMd font-mono">kl login</div>
            <div className="bodyMd text-text-soft">
              Authenticating Kloudlite Cli
            </div>
            {user && (
              <div className="bodySm text-text-soft">
                Logged in as{' '}
                <span className="bodySm-semibold">{user.email}</span>
              </div>
            )}
          </div>
        </div>
        {!user && <Button onClick={onAuthenticate} content="Authenticate" />}
        <div>
          {user && (
            <div className="bodyMd flex flex-col gap-md">
              <div className="flex flex-row gap-lg">
                <Button onClick={onAuthenticate} content="Authenticate" />
                <IconButton
                  variant="outline"
                  onClick={logOut}
                  icon={<SignOut />}
                />
              </div>
            </div>
          )}
        </div>
      </div>
    </Container>
  );
}

export const loader = async (ctx: IExtRemixCtx) => {
  const { loginId, logout } = await getQueries(ctx);
  if (logout) {
    const cookie = getCookie(ctx);

    Object.keys(cookie.getAll()).forEach((key) => {
      cookie.remove(key);
    });

    return withContext(ctx, { loginId });
  }

  const { data } = await GQLServerHandler(ctx.request).whoAmI();

  return {
    loginId: loginId || null,
    user: data || null,
  };
};

export default CliLogin;
