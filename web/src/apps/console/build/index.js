var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);

// node_modules/source-map-support/node_modules/source-map/lib/base64.js
var require_base64 = __commonJS({
  "node_modules/source-map-support/node_modules/source-map/lib/base64.js"(exports) {
    var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
    exports.encode = function(number2) {
      if (0 <= number2 && number2 < intToCharMap.length)
        return intToCharMap[number2];
      throw new TypeError("Must be between 0 and 63: " + number2);
    };
    exports.decode = function(charCode) {
      var bigA = 65, bigZ = 90, littleA = 97, littleZ = 122, zero = 48, nine = 57, plus = 43, slash = 47, littleOffset = 26, numberOffset = 52;
      return bigA <= charCode && charCode <= bigZ ? charCode - bigA : littleA <= charCode && charCode <= littleZ ? charCode - littleA + littleOffset : zero <= charCode && charCode <= nine ? charCode - zero + numberOffset : charCode == plus ? 62 : charCode == slash ? 63 : -1;
    };
  }
});

// node_modules/source-map-support/node_modules/source-map/lib/base64-vlq.js
var require_base64_vlq = __commonJS({
  "node_modules/source-map-support/node_modules/source-map/lib/base64-vlq.js"(exports) {
    var base64 = require_base64(), VLQ_BASE_SHIFT = 5, VLQ_BASE = 1 << VLQ_BASE_SHIFT, VLQ_BASE_MASK = VLQ_BASE - 1, VLQ_CONTINUATION_BIT = VLQ_BASE;
    function toVLQSigned(aValue) {
      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
    }
    function fromVLQSigned(aValue) {
      var isNegative = (aValue & 1) === 1, shifted = aValue >> 1;
      return isNegative ? -shifted : shifted;
    }
    exports.encode = function(aValue) {
      var encoded = "", digit, vlq = toVLQSigned(aValue);
      do
        digit = vlq & VLQ_BASE_MASK, vlq >>>= VLQ_BASE_SHIFT, vlq > 0 && (digit |= VLQ_CONTINUATION_BIT), encoded += base64.encode(digit);
      while (vlq > 0);
      return encoded;
    };
    exports.decode = function(aStr, aIndex, aOutParam) {
      var strLen = aStr.length, result = 0, shift2 = 0, continuation, digit;
      do {
        if (aIndex >= strLen)
          throw new Error("Expected more digits in base 64 VLQ value.");
        if (digit = base64.decode(aStr.charCodeAt(aIndex++)), digit === -1)
          throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        continuation = !!(digit & VLQ_CONTINUATION_BIT), digit &= VLQ_BASE_MASK, result = result + (digit << shift2), shift2 += VLQ_BASE_SHIFT;
      } while (continuation);
      aOutParam.value = fromVLQSigned(result), aOutParam.rest = aIndex;
    };
  }
});

// node_modules/source-map-support/node_modules/source-map/lib/util.js
var require_util = __commonJS({
  "node_modules/source-map-support/node_modules/source-map/lib/util.js"(exports) {
    function getArg(aArgs, aName, aDefaultValue) {
      if (aName in aArgs)
        return aArgs[aName];
      if (arguments.length === 3)
        return aDefaultValue;
      throw new Error('"' + aName + '" is a required argument.');
    }
    exports.getArg = getArg;
    var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/, dataUrlRegexp = /^data:.+\,.+$/;
    function urlParse(aUrl) {
      var match = aUrl.match(urlRegexp);
      return match ? {
        scheme: match[1],
        auth: match[2],
        host: match[3],
        port: match[4],
        path: match[5]
      } : null;
    }
    exports.urlParse = urlParse;
    function urlGenerate(aParsedUrl) {
      var url = "";
      return aParsedUrl.scheme && (url += aParsedUrl.scheme + ":"), url += "//", aParsedUrl.auth && (url += aParsedUrl.auth + "@"), aParsedUrl.host && (url += aParsedUrl.host), aParsedUrl.port && (url += ":" + aParsedUrl.port), aParsedUrl.path && (url += aParsedUrl.path), url;
    }
    exports.urlGenerate = urlGenerate;
    function normalize(aPath) {
      var path = aPath, url = urlParse(aPath);
      if (url) {
        if (!url.path)
          return aPath;
        path = url.path;
      }
      for (var isAbsolute = exports.isAbsolute(path), parts = path.split(/\/+/), part, up = 0, i13 = parts.length - 1; i13 >= 0; i13--)
        part = parts[i13], part === "." ? parts.splice(i13, 1) : part === ".." ? up++ : up > 0 && (part === "" ? (parts.splice(i13 + 1, up), up = 0) : (parts.splice(i13, 2), up--));
      return path = parts.join("/"), path === "" && (path = isAbsolute ? "/" : "."), url ? (url.path = path, urlGenerate(url)) : path;
    }
    exports.normalize = normalize;
    function join(aRoot, aPath) {
      aRoot === "" && (aRoot = "."), aPath === "" && (aPath = ".");
      var aPathUrl = urlParse(aPath), aRootUrl = urlParse(aRoot);
      if (aRootUrl && (aRoot = aRootUrl.path || "/"), aPathUrl && !aPathUrl.scheme)
        return aRootUrl && (aPathUrl.scheme = aRootUrl.scheme), urlGenerate(aPathUrl);
      if (aPathUrl || aPath.match(dataUrlRegexp))
        return aPath;
      if (aRootUrl && !aRootUrl.host && !aRootUrl.path)
        return aRootUrl.host = aPath, urlGenerate(aRootUrl);
      var joined = aPath.charAt(0) === "/" ? aPath : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);
      return aRootUrl ? (aRootUrl.path = joined, urlGenerate(aRootUrl)) : joined;
    }
    exports.join = join;
    exports.isAbsolute = function(aPath) {
      return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
    };
    function relative(aRoot, aPath) {
      aRoot === "" && (aRoot = "."), aRoot = aRoot.replace(/\/$/, "");
      for (var level = 0; aPath.indexOf(aRoot + "/") !== 0; ) {
        var index2 = aRoot.lastIndexOf("/");
        if (index2 < 0 || (aRoot = aRoot.slice(0, index2), aRoot.match(/^([^\/]+:\/)?\/*$/)))
          return aPath;
        ++level;
      }
      return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
    }
    exports.relative = relative;
    var supportsNullProto = function() {
      var obj = /* @__PURE__ */ Object.create(null);
      return !("__proto__" in obj);
    }();
    function identity(s) {
      return s;
    }
    function toSetString(aStr) {
      return isProtoString(aStr) ? "$" + aStr : aStr;
    }
    exports.toSetString = supportsNullProto ? identity : toSetString;
    function fromSetString(aStr) {
      return isProtoString(aStr) ? aStr.slice(1) : aStr;
    }
    exports.fromSetString = supportsNullProto ? identity : fromSetString;
    function isProtoString(s) {
      if (!s)
        return !1;
      var length = s.length;
      if (length < 9 || s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95)
        return !1;
      for (var i13 = length - 10; i13 >= 0; i13--)
        if (s.charCodeAt(i13) !== 36)
          return !1;
      return !0;
    }
    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
      var cmp = strcmp(mappingA.source, mappingB.source);
      return cmp !== 0 || (cmp = mappingA.originalLine - mappingB.originalLine, cmp !== 0) || (cmp = mappingA.originalColumn - mappingB.originalColumn, cmp !== 0 || onlyCompareOriginal) || (cmp = mappingA.generatedColumn - mappingB.generatedColumn, cmp !== 0) || (cmp = mappingA.generatedLine - mappingB.generatedLine, cmp !== 0) ? cmp : strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByOriginalPositions = compareByOriginalPositions;
    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      return cmp !== 0 || (cmp = mappingA.generatedColumn - mappingB.generatedColumn, cmp !== 0 || onlyCompareGenerated) || (cmp = strcmp(mappingA.source, mappingB.source), cmp !== 0) || (cmp = mappingA.originalLine - mappingB.originalLine, cmp !== 0) || (cmp = mappingA.originalColumn - mappingB.originalColumn, cmp !== 0) ? cmp : strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
    function strcmp(aStr1, aStr2) {
      return aStr1 === aStr2 ? 0 : aStr1 === null ? 1 : aStr2 === null ? -1 : aStr1 > aStr2 ? 1 : -1;
    }
    function compareByGeneratedPositionsInflated(mappingA, mappingB) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      return cmp !== 0 || (cmp = mappingA.generatedColumn - mappingB.generatedColumn, cmp !== 0) || (cmp = strcmp(mappingA.source, mappingB.source), cmp !== 0) || (cmp = mappingA.originalLine - mappingB.originalLine, cmp !== 0) || (cmp = mappingA.originalColumn - mappingB.originalColumn, cmp !== 0) ? cmp : strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
    function parseSourceMapInput(str) {
      return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
    }
    exports.parseSourceMapInput = parseSourceMapInput;
    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
      if (sourceURL = sourceURL || "", sourceRoot && (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/" && (sourceRoot += "/"), sourceURL = sourceRoot + sourceURL), sourceMapURL) {
        var parsed = urlParse(sourceMapURL);
        if (!parsed)
          throw new Error("sourceMapURL could not be parsed");
        if (parsed.path) {
          var index2 = parsed.path.lastIndexOf("/");
          index2 >= 0 && (parsed.path = parsed.path.substring(0, index2 + 1));
        }
        sourceURL = join(urlGenerate(parsed), sourceURL);
      }
      return normalize(sourceURL);
    }
    exports.computeSourceURL = computeSourceURL;
  }
});

// node_modules/source-map-support/node_modules/source-map/lib/array-set.js
var require_array_set = __commonJS({
  "node_modules/source-map-support/node_modules/source-map/lib/array-set.js"(exports) {
    var util = require_util(), has = Object.prototype.hasOwnProperty, hasNativeMap = typeof Map < "u";
    function ArraySet() {
      this._array = [], this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
    }
    ArraySet.fromArray = function(aArray, aAllowDuplicates) {
      for (var set = new ArraySet(), i13 = 0, len = aArray.length; i13 < len; i13++)
        set.add(aArray[i13], aAllowDuplicates);
      return set;
    };
    ArraySet.prototype.size = function() {
      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    };
    ArraySet.prototype.add = function(aStr, aAllowDuplicates) {
      var sStr = hasNativeMap ? aStr : util.toSetString(aStr), isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr), idx = this._array.length;
      (!isDuplicate || aAllowDuplicates) && this._array.push(aStr), isDuplicate || (hasNativeMap ? this._set.set(aStr, idx) : this._set[sStr] = idx);
    };
    ArraySet.prototype.has = function(aStr) {
      if (hasNativeMap)
        return this._set.has(aStr);
      var sStr = util.toSetString(aStr);
      return has.call(this._set, sStr);
    };
    ArraySet.prototype.indexOf = function(aStr) {
      if (hasNativeMap) {
        var idx = this._set.get(aStr);
        if (idx >= 0)
          return idx;
      } else {
        var sStr = util.toSetString(aStr);
        if (has.call(this._set, sStr))
          return this._set[sStr];
      }
      throw new Error('"' + aStr + '" is not in the set.');
    };
    ArraySet.prototype.at = function(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length)
        return this._array[aIdx];
      throw new Error("No element indexed by " + aIdx);
    };
    ArraySet.prototype.toArray = function() {
      return this._array.slice();
    };
    exports.ArraySet = ArraySet;
  }
});

// node_modules/source-map-support/node_modules/source-map/lib/mapping-list.js
var require_mapping_list = __commonJS({
  "node_modules/source-map-support/node_modules/source-map/lib/mapping-list.js"(exports) {
    var util = require_util();
    function generatedPositionAfter(mappingA, mappingB) {
      var lineA = mappingA.generatedLine, lineB = mappingB.generatedLine, columnA = mappingA.generatedColumn, columnB = mappingB.generatedColumn;
      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
    }
    function MappingList() {
      this._array = [], this._sorted = !0, this._last = { generatedLine: -1, generatedColumn: 0 };
    }
    MappingList.prototype.unsortedForEach = function(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };
    MappingList.prototype.add = function(aMapping) {
      generatedPositionAfter(this._last, aMapping) ? (this._last = aMapping, this._array.push(aMapping)) : (this._sorted = !1, this._array.push(aMapping));
    };
    MappingList.prototype.toArray = function() {
      return this._sorted || (this._array.sort(util.compareByGeneratedPositionsInflated), this._sorted = !0), this._array;
    };
    exports.MappingList = MappingList;
  }
});

// node_modules/source-map-support/node_modules/source-map/lib/source-map-generator.js
var require_source_map_generator = __commonJS({
  "node_modules/source-map-support/node_modules/source-map/lib/source-map-generator.js"(exports) {
    var base64VLQ = require_base64_vlq(), util = require_util(), ArraySet = require_array_set().ArraySet, MappingList = require_mapping_list().MappingList;
    function SourceMapGenerator(aArgs) {
      aArgs || (aArgs = {}), this._file = util.getArg(aArgs, "file", null), this._sourceRoot = util.getArg(aArgs, "sourceRoot", null), this._skipValidation = util.getArg(aArgs, "skipValidation", !1), this._sources = new ArraySet(), this._names = new ArraySet(), this._mappings = new MappingList(), this._sourcesContents = null;
    }
    SourceMapGenerator.prototype._version = 3;
    SourceMapGenerator.fromSourceMap = function(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot, generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot
      });
      return aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };
        mapping.source != null && (newMapping.source = mapping.source, sourceRoot != null && (newMapping.source = util.relative(sourceRoot, newMapping.source)), newMapping.original = {
          line: mapping.originalLine,
          column: mapping.originalColumn
        }, mapping.name != null && (newMapping.name = mapping.name)), generator.addMapping(newMapping);
      }), aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var sourceRelative = sourceFile;
        sourceRoot !== null && (sourceRelative = util.relative(sourceRoot, sourceFile)), generator._sources.has(sourceRelative) || generator._sources.add(sourceRelative);
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        content != null && generator.setSourceContent(sourceFile, content);
      }), generator;
    };
    SourceMapGenerator.prototype.addMapping = function(aArgs) {
      var generated = util.getArg(aArgs, "generated"), original = util.getArg(aArgs, "original", null), source = util.getArg(aArgs, "source", null), name = util.getArg(aArgs, "name", null);
      this._skipValidation || this._validateMapping(generated, original, source, name), source != null && (source = String(source), this._sources.has(source) || this._sources.add(source)), name != null && (name = String(name), this._names.has(name) || this._names.add(name)), this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source,
        name
      });
    };
    SourceMapGenerator.prototype.setSourceContent = function(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      this._sourceRoot != null && (source = util.relative(this._sourceRoot, source)), aSourceContent != null ? (this._sourcesContents || (this._sourcesContents = /* @__PURE__ */ Object.create(null)), this._sourcesContents[util.toSetString(source)] = aSourceContent) : this._sourcesContents && (delete this._sourcesContents[util.toSetString(source)], Object.keys(this._sourcesContents).length === 0 && (this._sourcesContents = null));
    };
    SourceMapGenerator.prototype.applySourceMap = function(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null)
          throw new Error(
            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`
          );
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      sourceRoot != null && (sourceFile = util.relative(sourceRoot, sourceFile));
      var newSources = new ArraySet(), newNames = new ArraySet();
      this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          original.source != null && (mapping.source = original.source, aSourceMapPath != null && (mapping.source = util.join(aSourceMapPath, mapping.source)), sourceRoot != null && (mapping.source = util.relative(sourceRoot, mapping.source)), mapping.originalLine = original.line, mapping.originalColumn = original.column, original.name != null && (mapping.name = original.name));
        }
        var source = mapping.source;
        source != null && !newSources.has(source) && newSources.add(source);
        var name = mapping.name;
        name != null && !newNames.has(name) && newNames.add(name);
      }, this), this._sources = newSources, this._names = newNames, aSourceMapConsumer.sources.forEach(function(sourceFile2) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
        content != null && (aSourceMapPath != null && (sourceFile2 = util.join(aSourceMapPath, sourceFile2)), sourceRoot != null && (sourceFile2 = util.relative(sourceRoot, sourceFile2)), this.setSourceContent(sourceFile2, content));
      }, this);
    };
    SourceMapGenerator.prototype._validateMapping = function(aGenerated, aOriginal, aSource, aName) {
      if (aOriginal && typeof aOriginal.line != "number" && typeof aOriginal.column != "number")
        throw new Error(
          "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values."
        );
      if (!(aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName)) {
        if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource)
          return;
        throw new Error("Invalid mapping: " + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };
    SourceMapGenerator.prototype._serializeMappings = function() {
      for (var previousGeneratedColumn = 0, previousGeneratedLine = 1, previousOriginalColumn = 0, previousOriginalLine = 0, previousName = 0, previousSource = 0, result = "", next, mapping, nameIdx, sourceIdx, mappings = this._mappings.toArray(), i13 = 0, len = mappings.length; i13 < len; i13++) {
        if (mapping = mappings[i13], next = "", mapping.generatedLine !== previousGeneratedLine)
          for (previousGeneratedColumn = 0; mapping.generatedLine !== previousGeneratedLine; )
            next += ";", previousGeneratedLine++;
        else if (i13 > 0) {
          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i13 - 1]))
            continue;
          next += ",";
        }
        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn), previousGeneratedColumn = mapping.generatedColumn, mapping.source != null && (sourceIdx = this._sources.indexOf(mapping.source), next += base64VLQ.encode(sourceIdx - previousSource), previousSource = sourceIdx, next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine), previousOriginalLine = mapping.originalLine - 1, next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn), previousOriginalColumn = mapping.originalColumn, mapping.name != null && (nameIdx = this._names.indexOf(mapping.name), next += base64VLQ.encode(nameIdx - previousName), previousName = nameIdx)), result += next;
      }
      return result;
    };
    SourceMapGenerator.prototype._generateSourcesContent = function(aSources, aSourceRoot) {
      return aSources.map(function(source) {
        if (!this._sourcesContents)
          return null;
        aSourceRoot != null && (source = util.relative(aSourceRoot, source));
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
      }, this);
    };
    SourceMapGenerator.prototype.toJSON = function() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      return this._file != null && (map.file = this._file), this._sourceRoot != null && (map.sourceRoot = this._sourceRoot), this._sourcesContents && (map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot)), map;
    };
    SourceMapGenerator.prototype.toString = function() {
      return JSON.stringify(this.toJSON());
    };
    exports.SourceMapGenerator = SourceMapGenerator;
  }
});

// node_modules/source-map-support/node_modules/source-map/lib/binary-search.js
var require_binary_search = __commonJS({
  "node_modules/source-map-support/node_modules/source-map/lib/binary-search.js"(exports) {
    exports.GREATEST_LOWER_BOUND = 1;
    exports.LEAST_UPPER_BOUND = 2;
    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
      var mid = Math.floor((aHigh - aLow) / 2) + aLow, cmp = aCompare(aNeedle, aHaystack[mid], !0);
      return cmp === 0 ? mid : cmp > 0 ? aHigh - mid > 1 ? recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias) : aBias == exports.LEAST_UPPER_BOUND ? aHigh < aHaystack.length ? aHigh : -1 : mid : mid - aLow > 1 ? recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias) : aBias == exports.LEAST_UPPER_BOUND ? mid : aLow < 0 ? -1 : aLow;
    }
    exports.search = function(aNeedle, aHaystack, aCompare, aBias) {
      if (aHaystack.length === 0)
        return -1;
      var index2 = recursiveSearch(
        -1,
        aHaystack.length,
        aNeedle,
        aHaystack,
        aCompare,
        aBias || exports.GREATEST_LOWER_BOUND
      );
      if (index2 < 0)
        return -1;
      for (; index2 - 1 >= 0 && aCompare(aHaystack[index2], aHaystack[index2 - 1], !0) === 0; )
        --index2;
      return index2;
    };
  }
});

// node_modules/source-map-support/node_modules/source-map/lib/quick-sort.js
var require_quick_sort = __commonJS({
  "node_modules/source-map-support/node_modules/source-map/lib/quick-sort.js"(exports) {
    function swap(ary, x, y) {
      var temp = ary[x];
      ary[x] = ary[y], ary[y] = temp;
    }
    function randomIntInRange(low, high) {
      return Math.round(low + Math.random() * (high - low));
    }
    function doQuickSort(ary, comparator, p, r25) {
      if (p < r25) {
        var pivotIndex = randomIntInRange(p, r25), i13 = p - 1;
        swap(ary, pivotIndex, r25);
        for (var pivot = ary[r25], j = p; j < r25; j++)
          comparator(ary[j], pivot) <= 0 && (i13 += 1, swap(ary, i13, j));
        swap(ary, i13 + 1, j);
        var q = i13 + 1;
        doQuickSort(ary, comparator, p, q - 1), doQuickSort(ary, comparator, q + 1, r25);
      }
    }
    exports.quickSort = function(ary, comparator) {
      doQuickSort(ary, comparator, 0, ary.length - 1);
    };
  }
});

// node_modules/source-map-support/node_modules/source-map/lib/source-map-consumer.js
var require_source_map_consumer = __commonJS({
  "node_modules/source-map-support/node_modules/source-map/lib/source-map-consumer.js"(exports) {
    var util = require_util(), binarySearch = require_binary_search(), ArraySet = require_array_set().ArraySet, base64VLQ = require_base64_vlq(), quickSort = require_quick_sort().quickSort;
    function SourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      return typeof aSourceMap == "string" && (sourceMap = util.parseSourceMapInput(aSourceMap)), sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
    }
    SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
    };
    SourceMapConsumer.prototype._version = 3;
    SourceMapConsumer.prototype.__generatedMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
      configurable: !0,
      enumerable: !0,
      get: function() {
        return this.__generatedMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__generatedMappings;
      }
    });
    SourceMapConsumer.prototype.__originalMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
      configurable: !0,
      enumerable: !0,
      get: function() {
        return this.__originalMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__originalMappings;
      }
    });
    SourceMapConsumer.prototype._charIsMappingSeparator = function(aStr, index2) {
      var c = aStr.charAt(index2);
      return c === ";" || c === ",";
    };
    SourceMapConsumer.prototype._parseMappings = function(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    };
    SourceMapConsumer.GENERATED_ORDER = 1;
    SourceMapConsumer.ORIGINAL_ORDER = 2;
    SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
    SourceMapConsumer.LEAST_UPPER_BOUND = 2;
    SourceMapConsumer.prototype.eachMapping = function(aCallback, aContext, aOrder) {
      var context = aContext || null, order = aOrder || SourceMapConsumer.GENERATED_ORDER, mappings;
      switch (order) {
        case SourceMapConsumer.GENERATED_ORDER:
          mappings = this._generatedMappings;
          break;
        case SourceMapConsumer.ORIGINAL_ORDER:
          mappings = this._originalMappings;
          break;
        default:
          throw new Error("Unknown order of iteration.");
      }
      var sourceRoot = this.sourceRoot;
      mappings.map(function(mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        return source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL), {
          source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    };
    SourceMapConsumer.prototype.allGeneratedPositionsFor = function(aArgs) {
      var line = util.getArg(aArgs, "line"), needle = {
        source: util.getArg(aArgs, "source"),
        originalLine: line,
        originalColumn: util.getArg(aArgs, "column", 0)
      };
      if (needle.source = this._findSourceIndex(needle.source), needle.source < 0)
        return [];
      var mappings = [], index2 = this._findMapping(
        needle,
        this._originalMappings,
        "originalLine",
        "originalColumn",
        util.compareByOriginalPositions,
        binarySearch.LEAST_UPPER_BOUND
      );
      if (index2 >= 0) {
        var mapping = this._originalMappings[index2];
        if (aArgs.column === void 0)
          for (var originalLine = mapping.originalLine; mapping && mapping.originalLine === originalLine; )
            mappings.push({
              line: util.getArg(mapping, "generatedLine", null),
              column: util.getArg(mapping, "generatedColumn", null),
              lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
            }), mapping = this._originalMappings[++index2];
        else
          for (var originalColumn = mapping.originalColumn; mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn; )
            mappings.push({
              line: util.getArg(mapping, "generatedLine", null),
              column: util.getArg(mapping, "generatedColumn", null),
              lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
            }), mapping = this._originalMappings[++index2];
      }
      return mappings;
    };
    exports.SourceMapConsumer = SourceMapConsumer;
    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      typeof aSourceMap == "string" && (sourceMap = util.parseSourceMapInput(aSourceMap));
      var version = util.getArg(sourceMap, "version"), sources = util.getArg(sourceMap, "sources"), names = util.getArg(sourceMap, "names", []), sourceRoot = util.getArg(sourceMap, "sourceRoot", null), sourcesContent = util.getArg(sourceMap, "sourcesContent", null), mappings = util.getArg(sourceMap, "mappings"), file = util.getArg(sourceMap, "file", null);
      if (version != this._version)
        throw new Error("Unsupported version: " + version);
      sourceRoot && (sourceRoot = util.normalize(sourceRoot)), sources = sources.map(String).map(util.normalize).map(function(source) {
        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
      }), this._names = ArraySet.fromArray(names.map(String), !0), this._sources = ArraySet.fromArray(sources, !0), this._absoluteSources = this._sources.toArray().map(function(s) {
        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
      }), this.sourceRoot = sourceRoot, this.sourcesContent = sourcesContent, this._mappings = mappings, this._sourceMapURL = aSourceMapURL, this.file = file;
    }
    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
      var relativeSource = aSource;
      if (this.sourceRoot != null && (relativeSource = util.relative(this.sourceRoot, relativeSource)), this._sources.has(relativeSource))
        return this._sources.indexOf(relativeSource);
      var i13;
      for (i13 = 0; i13 < this._absoluteSources.length; ++i13)
        if (this._absoluteSources[i13] == aSource)
          return i13;
      return -1;
    };
    BasicSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
      var smc = Object.create(BasicSourceMapConsumer.prototype), names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), !0), sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), !0);
      smc.sourceRoot = aSourceMap._sourceRoot, smc.sourcesContent = aSourceMap._generateSourcesContent(
        smc._sources.toArray(),
        smc.sourceRoot
      ), smc.file = aSourceMap._file, smc._sourceMapURL = aSourceMapURL, smc._absoluteSources = smc._sources.toArray().map(function(s) {
        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
      });
      for (var generatedMappings = aSourceMap._mappings.toArray().slice(), destGeneratedMappings = smc.__generatedMappings = [], destOriginalMappings = smc.__originalMappings = [], i13 = 0, length = generatedMappings.length; i13 < length; i13++) {
        var srcMapping = generatedMappings[i13], destMapping = new Mapping();
        destMapping.generatedLine = srcMapping.generatedLine, destMapping.generatedColumn = srcMapping.generatedColumn, srcMapping.source && (destMapping.source = sources.indexOf(srcMapping.source), destMapping.originalLine = srcMapping.originalLine, destMapping.originalColumn = srcMapping.originalColumn, srcMapping.name && (destMapping.name = names.indexOf(srcMapping.name)), destOriginalMappings.push(destMapping)), destGeneratedMappings.push(destMapping);
      }
      return quickSort(smc.__originalMappings, util.compareByOriginalPositions), smc;
    };
    BasicSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
      get: function() {
        return this._absoluteSources.slice();
      }
    });
    function Mapping() {
      this.generatedLine = 0, this.generatedColumn = 0, this.source = null, this.originalLine = null, this.originalColumn = null, this.name = null;
    }
    BasicSourceMapConsumer.prototype._parseMappings = function(aStr, aSourceRoot) {
      for (var generatedLine = 1, previousGeneratedColumn = 0, previousOriginalLine = 0, previousOriginalColumn = 0, previousSource = 0, previousName = 0, length = aStr.length, index2 = 0, cachedSegments = {}, temp = {}, originalMappings = [], generatedMappings = [], mapping, str, segment, end, value; index2 < length; )
        if (aStr.charAt(index2) === ";")
          generatedLine++, index2++, previousGeneratedColumn = 0;
        else if (aStr.charAt(index2) === ",")
          index2++;
        else {
          for (mapping = new Mapping(), mapping.generatedLine = generatedLine, end = index2; end < length && !this._charIsMappingSeparator(aStr, end); end++)
            ;
          if (str = aStr.slice(index2, end), segment = cachedSegments[str], segment)
            index2 += str.length;
          else {
            for (segment = []; index2 < end; )
              base64VLQ.decode(aStr, index2, temp), value = temp.value, index2 = temp.rest, segment.push(value);
            if (segment.length === 2)
              throw new Error("Found a source, but no line and column");
            if (segment.length === 3)
              throw new Error("Found a source and line, but no column");
            cachedSegments[str] = segment;
          }
          mapping.generatedColumn = previousGeneratedColumn + segment[0], previousGeneratedColumn = mapping.generatedColumn, segment.length > 1 && (mapping.source = previousSource + segment[1], previousSource += segment[1], mapping.originalLine = previousOriginalLine + segment[2], previousOriginalLine = mapping.originalLine, mapping.originalLine += 1, mapping.originalColumn = previousOriginalColumn + segment[3], previousOriginalColumn = mapping.originalColumn, segment.length > 4 && (mapping.name = previousName + segment[4], previousName += segment[4])), generatedMappings.push(mapping), typeof mapping.originalLine == "number" && originalMappings.push(mapping);
        }
      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated), this.__generatedMappings = generatedMappings, quickSort(originalMappings, util.compareByOriginalPositions), this.__originalMappings = originalMappings;
    };
    BasicSourceMapConsumer.prototype._findMapping = function(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
      if (aNeedle[aLineName] <= 0)
        throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
      if (aNeedle[aColumnName] < 0)
        throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };
    BasicSourceMapConsumer.prototype.computeColumnSpans = function() {
      for (var index2 = 0; index2 < this._generatedMappings.length; ++index2) {
        var mapping = this._generatedMappings[index2];
        if (index2 + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index2 + 1];
          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }
        mapping.lastGeneratedColumn = 1 / 0;
      }
    };
    BasicSourceMapConsumer.prototype.originalPositionFor = function(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, "line"),
        generatedColumn: util.getArg(aArgs, "column")
      }, index2 = this._findMapping(
        needle,
        this._generatedMappings,
        "generatedLine",
        "generatedColumn",
        util.compareByGeneratedPositionsDeflated,
        util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
      );
      if (index2 >= 0) {
        var mapping = this._generatedMappings[index2];
        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, "source", null);
          source !== null && (source = this._sources.at(source), source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL));
          var name = util.getArg(mapping, "name", null);
          return name !== null && (name = this._names.at(name)), {
            source,
            line: util.getArg(mapping, "originalLine", null),
            column: util.getArg(mapping, "originalColumn", null),
            name
          };
        }
      }
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };
    BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function() {
      return this.sourcesContent ? this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
        return sc == null;
      }) : !1;
    };
    BasicSourceMapConsumer.prototype.sourceContentFor = function(aSource, nullOnMissing) {
      if (!this.sourcesContent)
        return null;
      var index2 = this._findSourceIndex(aSource);
      if (index2 >= 0)
        return this.sourcesContent[index2];
      var relativeSource = aSource;
      this.sourceRoot != null && (relativeSource = util.relative(this.sourceRoot, relativeSource));
      var url;
      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
        var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
        if (url.scheme == "file" && this._sources.has(fileUriAbsPath))
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
        if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource))
          return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
      if (nullOnMissing)
        return null;
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    };
    BasicSourceMapConsumer.prototype.generatedPositionFor = function(aArgs) {
      var source = util.getArg(aArgs, "source");
      if (source = this._findSourceIndex(source), source < 0)
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      var needle = {
        source,
        originalLine: util.getArg(aArgs, "line"),
        originalColumn: util.getArg(aArgs, "column")
      }, index2 = this._findMapping(
        needle,
        this._originalMappings,
        "originalLine",
        "originalColumn",
        util.compareByOriginalPositions,
        util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
      );
      if (index2 >= 0) {
        var mapping = this._originalMappings[index2];
        if (mapping.source === needle.source)
          return {
            line: util.getArg(mapping, "generatedLine", null),
            column: util.getArg(mapping, "generatedColumn", null),
            lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
          };
      }
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };
    exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      typeof aSourceMap == "string" && (sourceMap = util.parseSourceMapInput(aSourceMap));
      var version = util.getArg(sourceMap, "version"), sections = util.getArg(sourceMap, "sections");
      if (version != this._version)
        throw new Error("Unsupported version: " + version);
      this._sources = new ArraySet(), this._names = new ArraySet();
      var lastOffset = {
        line: -1,
        column: 0
      };
      this._sections = sections.map(function(s) {
        if (s.url)
          throw new Error("Support for url field in sections not implemented.");
        var offset2 = util.getArg(s, "offset"), offsetLine = util.getArg(offset2, "line"), offsetColumn = util.getArg(offset2, "column");
        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column)
          throw new Error("Section offsets must be ordered and non-overlapping.");
        return lastOffset = offset2, {
          generatedOffset: {
            // The offset fields are 0-based, but we use 1-based indices when
            // encoding/decoding from VLQ.
            generatedLine: offsetLine + 1,
            generatedColumn: offsetColumn + 1
          },
          consumer: new SourceMapConsumer(util.getArg(s, "map"), aSourceMapURL)
        };
      });
    }
    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
    IndexedSourceMapConsumer.prototype._version = 3;
    Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
      get: function() {
        for (var sources = [], i13 = 0; i13 < this._sections.length; i13++)
          for (var j = 0; j < this._sections[i13].consumer.sources.length; j++)
            sources.push(this._sections[i13].consumer.sources[j]);
        return sources;
      }
    });
    IndexedSourceMapConsumer.prototype.originalPositionFor = function(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, "line"),
        generatedColumn: util.getArg(aArgs, "column")
      }, sectionIndex = binarySearch.search(
        needle,
        this._sections,
        function(needle2, section2) {
          var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
          return cmp || needle2.generatedColumn - section2.generatedOffset.generatedColumn;
        }
      ), section = this._sections[sectionIndex];
      return section ? section.consumer.originalPositionFor({
        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        bias: aArgs.bias
      }) : {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };
    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function() {
      return this._sections.every(function(s) {
        return s.consumer.hasContentsOfAllSources();
      });
    };
    IndexedSourceMapConsumer.prototype.sourceContentFor = function(aSource, nullOnMissing) {
      for (var i13 = 0; i13 < this._sections.length; i13++) {
        var section = this._sections[i13], content = section.consumer.sourceContentFor(aSource, !0);
        if (content)
          return content;
      }
      if (nullOnMissing)
        return null;
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    };
    IndexedSourceMapConsumer.prototype.generatedPositionFor = function(aArgs) {
      for (var i13 = 0; i13 < this._sections.length; i13++) {
        var section = this._sections[i13];
        if (section.consumer._findSourceIndex(util.getArg(aArgs, "source")) !== -1) {
          var generatedPosition = section.consumer.generatedPositionFor(aArgs);
          if (generatedPosition) {
            var ret = {
              line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
              column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
            };
            return ret;
          }
        }
      }
      return {
        line: null,
        column: null
      };
    };
    IndexedSourceMapConsumer.prototype._parseMappings = function(aStr, aSourceRoot) {
      this.__generatedMappings = [], this.__originalMappings = [];
      for (var i13 = 0; i13 < this._sections.length; i13++)
        for (var section = this._sections[i13], sectionMappings = section.consumer._generatedMappings, j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[j], source = section.consumer._sources.at(mapping.source);
          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL), this._sources.add(source), source = this._sources.indexOf(source);
          var name = null;
          mapping.name && (name = section.consumer._names.at(mapping.name), this._names.add(name), name = this._names.indexOf(name));
          var adjustedMapping = {
            source,
            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name
          };
          this.__generatedMappings.push(adjustedMapping), typeof adjustedMapping.originalLine == "number" && this.__originalMappings.push(adjustedMapping);
        }
      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated), quickSort(this.__originalMappings, util.compareByOriginalPositions);
    };
    exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
  }
});

// node_modules/source-map-support/node_modules/source-map/lib/source-node.js
var require_source_node = __commonJS({
  "node_modules/source-map-support/node_modules/source-map/lib/source-node.js"(exports) {
    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator, util = require_util(), REGEX_NEWLINE = /(\r?\n)/, NEWLINE_CODE = 10, isSourceNode = "$$$isSourceNode$$$";
    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
      this.children = [], this.sourceContents = {}, this.line = aLine ?? null, this.column = aColumn ?? null, this.source = aSource ?? null, this.name = aName ?? null, this[isSourceNode] = !0, aChunks != null && this.add(aChunks);
    }
    SourceNode.fromStringWithSourceMap = function(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      var node = new SourceNode(), remainingLines = aGeneratedCode.split(REGEX_NEWLINE), remainingLinesIndex = 0, shiftNextLine = function() {
        var lineContents = getNextLine(), newLine = getNextLine() || "";
        return lineContents + newLine;
        function getNextLine() {
          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
        }
      }, lastGeneratedLine = 1, lastGeneratedColumn = 0, lastMapping = null;
      return aSourceMapConsumer.eachMapping(function(mapping) {
        if (lastMapping !== null)
          if (lastGeneratedLine < mapping.generatedLine)
            addMappingWithCode(lastMapping, shiftNextLine()), lastGeneratedLine++, lastGeneratedColumn = 0;
          else {
            var nextLine = remainingLines[remainingLinesIndex] || "", code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn), lastGeneratedColumn = mapping.generatedColumn, addMappingWithCode(lastMapping, code), lastMapping = mapping;
            return;
          }
        for (; lastGeneratedLine < mapping.generatedLine; )
          node.add(shiftNextLine()), lastGeneratedLine++;
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[remainingLinesIndex] || "";
          node.add(nextLine.substr(0, mapping.generatedColumn)), remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn), lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this), remainingLinesIndex < remainingLines.length && (lastMapping && addMappingWithCode(lastMapping, shiftNextLine()), node.add(remainingLines.splice(remainingLinesIndex).join(""))), aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        content != null && (aRelativePath != null && (sourceFile = util.join(aRelativePath, sourceFile)), node.setSourceContent(sourceFile, content));
      }), node;
      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === void 0)
          node.add(code);
        else {
          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
          node.add(new SourceNode(
            mapping.originalLine,
            mapping.originalColumn,
            source,
            code,
            mapping.name
          ));
        }
      }
    };
    SourceNode.prototype.add = function(aChunk) {
      if (Array.isArray(aChunk))
        aChunk.forEach(function(chunk) {
          this.add(chunk);
        }, this);
      else if (aChunk[isSourceNode] || typeof aChunk == "string")
        aChunk && this.children.push(aChunk);
      else
        throw new TypeError(
          "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
        );
      return this;
    };
    SourceNode.prototype.prepend = function(aChunk) {
      if (Array.isArray(aChunk))
        for (var i13 = aChunk.length - 1; i13 >= 0; i13--)
          this.prepend(aChunk[i13]);
      else if (aChunk[isSourceNode] || typeof aChunk == "string")
        this.children.unshift(aChunk);
      else
        throw new TypeError(
          "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
        );
      return this;
    };
    SourceNode.prototype.walk = function(aFn) {
      for (var chunk, i13 = 0, len = this.children.length; i13 < len; i13++)
        chunk = this.children[i13], chunk[isSourceNode] ? chunk.walk(aFn) : chunk !== "" && aFn(chunk, {
          source: this.source,
          line: this.line,
          column: this.column,
          name: this.name
        });
    };
    SourceNode.prototype.join = function(aSep) {
      var newChildren, i13, len = this.children.length;
      if (len > 0) {
        for (newChildren = [], i13 = 0; i13 < len - 1; i13++)
          newChildren.push(this.children[i13]), newChildren.push(aSep);
        newChildren.push(this.children[i13]), this.children = newChildren;
      }
      return this;
    };
    SourceNode.prototype.replaceRight = function(aPattern, aReplacement) {
      var lastChild = this.children[this.children.length - 1];
      return lastChild[isSourceNode] ? lastChild.replaceRight(aPattern, aReplacement) : typeof lastChild == "string" ? this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement) : this.children.push("".replace(aPattern, aReplacement)), this;
    };
    SourceNode.prototype.setSourceContent = function(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };
    SourceNode.prototype.walkSourceContents = function(aFn) {
      for (var i13 = 0, len = this.children.length; i13 < len; i13++)
        this.children[i13][isSourceNode] && this.children[i13].walkSourceContents(aFn);
      for (var sources = Object.keys(this.sourceContents), i13 = 0, len = sources.length; i13 < len; i13++)
        aFn(util.fromSetString(sources[i13]), this.sourceContents[sources[i13]]);
    };
    SourceNode.prototype.toString = function() {
      var str = "";
      return this.walk(function(chunk) {
        str += chunk;
      }), str;
    };
    SourceNode.prototype.toStringWithSourceMap = function(aArgs) {
      var generated = {
        code: "",
        line: 1,
        column: 0
      }, map = new SourceMapGenerator(aArgs), sourceMappingActive = !1, lastOriginalSource = null, lastOriginalLine = null, lastOriginalColumn = null, lastOriginalName = null;
      return this.walk(function(chunk, original) {
        generated.code += chunk, original.source !== null && original.line !== null && original.column !== null ? ((lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) && map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        }), lastOriginalSource = original.source, lastOriginalLine = original.line, lastOriginalColumn = original.column, lastOriginalName = original.name, sourceMappingActive = !0) : sourceMappingActive && (map.addMapping({
          generated: {
            line: generated.line,
            column: generated.column
          }
        }), lastOriginalSource = null, sourceMappingActive = !1);
        for (var idx = 0, length = chunk.length; idx < length; idx++)
          chunk.charCodeAt(idx) === NEWLINE_CODE ? (generated.line++, generated.column = 0, idx + 1 === length ? (lastOriginalSource = null, sourceMappingActive = !1) : sourceMappingActive && map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          })) : generated.column++;
      }), this.walkSourceContents(function(sourceFile, sourceContent) {
        map.setSourceContent(sourceFile, sourceContent);
      }), { code: generated.code, map };
    };
    exports.SourceNode = SourceNode;
  }
});

// node_modules/source-map-support/node_modules/source-map/source-map.js
var require_source_map = __commonJS({
  "node_modules/source-map-support/node_modules/source-map/source-map.js"(exports) {
    exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;
    exports.SourceNode = require_source_node().SourceNode;
  }
});

// node_modules/buffer-from/index.js
var require_buffer_from = __commonJS({
  "node_modules/buffer-from/index.js"(exports, module2) {
    var toString = Object.prototype.toString, isModern = typeof Buffer < "u" && typeof Buffer.alloc == "function" && typeof Buffer.allocUnsafe == "function" && typeof Buffer.from == "function";
    function isArrayBuffer(input) {
      return toString.call(input).slice(8, -1) === "ArrayBuffer";
    }
    function fromArrayBuffer(obj, byteOffset, length) {
      byteOffset >>>= 0;
      var maxLength = obj.byteLength - byteOffset;
      if (maxLength < 0)
        throw new RangeError("'offset' is out of bounds");
      if (length === void 0)
        length = maxLength;
      else if (length >>>= 0, length > maxLength)
        throw new RangeError("'length' is out of bounds");
      return isModern ? Buffer.from(obj.slice(byteOffset, byteOffset + length)) : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)));
    }
    function fromString(string, encoding) {
      if ((typeof encoding != "string" || encoding === "") && (encoding = "utf8"), !Buffer.isEncoding(encoding))
        throw new TypeError('"encoding" must be a valid string encoding');
      return isModern ? Buffer.from(string, encoding) : new Buffer(string, encoding);
    }
    function bufferFrom(value, encodingOrOffset, length) {
      if (typeof value == "number")
        throw new TypeError('"value" argument must not be a number');
      return isArrayBuffer(value) ? fromArrayBuffer(value, encodingOrOffset, length) : typeof value == "string" ? fromString(value, encodingOrOffset) : isModern ? Buffer.from(value) : new Buffer(value);
    }
    module2.exports = bufferFrom;
  }
});

// node_modules/source-map-support/source-map-support.js
var require_source_map_support = __commonJS({
  "node_modules/source-map-support/source-map-support.js"(exports, module2) {
    var SourceMapConsumer = require_source_map().SourceMapConsumer, path = require("path"), fs;
    try {
      fs = require("fs"), (!fs.existsSync || !fs.readFileSync) && (fs = null);
    } catch {
    }
    var bufferFrom = require_buffer_from();
    function dynamicRequire(mod, request) {
      return mod.require(request);
    }
    var errorFormatterInstalled = !1, uncaughtShimInstalled = !1, emptyCacheBetweenOperations = !1, environment = "auto", fileContentsCache = {}, sourceMapCache = {}, reSourceMap = /^data:application\/json[^,]+base64,/, retrieveFileHandlers = [], retrieveMapHandlers = [];
    function isInBrowser() {
      return environment === "browser" ? !0 : environment === "node" ? !1 : typeof window < "u" && typeof XMLHttpRequest == "function" && !(window.require && window.module && window.process && window.process.type === "renderer");
    }
    function hasGlobalProcessEventEmitter() {
      return typeof process == "object" && process !== null && typeof process.on == "function";
    }
    function globalProcessVersion() {
      return typeof process == "object" && process !== null ? process.version : "";
    }
    function globalProcessStderr() {
      if (typeof process == "object" && process !== null)
        return process.stderr;
    }
    function globalProcessExit(code) {
      if (typeof process == "object" && process !== null && typeof process.exit == "function")
        return process.exit(code);
    }
    function handlerExec(list2) {
      return function(arg) {
        for (var i13 = 0; i13 < list2.length; i13++) {
          var ret = list2[i13](arg);
          if (ret)
            return ret;
        }
        return null;
      };
    }
    var retrieveFile = handlerExec(retrieveFileHandlers);
    retrieveFileHandlers.push(function(path2) {
      if (path2 = path2.trim(), /^file:/.test(path2) && (path2 = path2.replace(/file:\/\/\/(\w:)?/, function(protocol, drive) {
        return drive ? "" : (
          // file:///C:/dir/file -> C:/dir/file
          "/"
        );
      })), path2 in fileContentsCache)
        return fileContentsCache[path2];
      var contents = "";
      try {
        if (fs)
          fs.existsSync(path2) && (contents = fs.readFileSync(path2, "utf8"));
        else {
          var xhr = new XMLHttpRequest();
          xhr.open(
            "GET",
            path2,
            /** async */
            !1
          ), xhr.send(null), xhr.readyState === 4 && xhr.status === 200 && (contents = xhr.responseText);
        }
      } catch {
      }
      return fileContentsCache[path2] = contents;
    });
    function supportRelativeURL(file, url) {
      if (!file)
        return url;
      var dir = path.dirname(file), match = /^\w+:\/\/[^\/]*/.exec(dir), protocol = match ? match[0] : "", startPath = dir.slice(protocol.length);
      return protocol && /^\/\w\:/.test(startPath) ? (protocol += "/", protocol + path.resolve(dir.slice(protocol.length), url).replace(/\\/g, "/")) : protocol + path.resolve(dir.slice(protocol.length), url);
    }
    function retrieveSourceMapURL(source) {
      var fileData;
      if (isInBrowser())
        try {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", source, !1), xhr.send(null), fileData = xhr.readyState === 4 ? xhr.responseText : null;
          var sourceMapHeader = xhr.getResponseHeader("SourceMap") || xhr.getResponseHeader("X-SourceMap");
          if (sourceMapHeader)
            return sourceMapHeader;
        } catch {
        }
      fileData = retrieveFile(source);
      for (var re = /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg, lastMatch, match; match = re.exec(fileData); )
        lastMatch = match;
      return lastMatch ? lastMatch[1] : null;
    }
    var retrieveSourceMap = handlerExec(retrieveMapHandlers);
    retrieveMapHandlers.push(function(source) {
      var sourceMappingURL = retrieveSourceMapURL(source);
      if (!sourceMappingURL)
        return null;
      var sourceMapData;
      if (reSourceMap.test(sourceMappingURL)) {
        var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(",") + 1);
        sourceMapData = bufferFrom(rawData, "base64").toString(), sourceMappingURL = source;
      } else
        sourceMappingURL = supportRelativeURL(source, sourceMappingURL), sourceMapData = retrieveFile(sourceMappingURL);
      return sourceMapData ? {
        url: sourceMappingURL,
        map: sourceMapData
      } : null;
    });
    function mapSourcePosition(position) {
      var sourceMap = sourceMapCache[position.source];
      if (!sourceMap) {
        var urlAndMap = retrieveSourceMap(position.source);
        urlAndMap ? (sourceMap = sourceMapCache[position.source] = {
          url: urlAndMap.url,
          map: new SourceMapConsumer(urlAndMap.map)
        }, sourceMap.map.sourcesContent && sourceMap.map.sources.forEach(function(source, i13) {
          var contents = sourceMap.map.sourcesContent[i13];
          if (contents) {
            var url = supportRelativeURL(sourceMap.url, source);
            fileContentsCache[url] = contents;
          }
        })) : sourceMap = sourceMapCache[position.source] = {
          url: null,
          map: null
        };
      }
      if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor == "function") {
        var originalPosition = sourceMap.map.originalPositionFor(position);
        if (originalPosition.source !== null)
          return originalPosition.source = supportRelativeURL(
            sourceMap.url,
            originalPosition.source
          ), originalPosition;
      }
      return position;
    }
    function mapEvalOrigin(origin) {
      var match = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin);
      if (match) {
        var position = mapSourcePosition({
          source: match[2],
          line: +match[3],
          column: match[4] - 1
        });
        return "eval at " + match[1] + " (" + position.source + ":" + position.line + ":" + (position.column + 1) + ")";
      }
      return match = /^eval at ([^(]+) \((.+)\)$/.exec(origin), match ? "eval at " + match[1] + " (" + mapEvalOrigin(match[2]) + ")" : origin;
    }
    function CallSiteToString() {
      var fileName, fileLocation = "";
      if (this.isNative())
        fileLocation = "native";
      else {
        fileName = this.getScriptNameOrSourceURL(), !fileName && this.isEval() && (fileLocation = this.getEvalOrigin(), fileLocation += ", "), fileName ? fileLocation += fileName : fileLocation += "<anonymous>";
        var lineNumber = this.getLineNumber();
        if (lineNumber != null) {
          fileLocation += ":" + lineNumber;
          var columnNumber = this.getColumnNumber();
          columnNumber && (fileLocation += ":" + columnNumber);
        }
      }
      var line = "", functionName = this.getFunctionName(), addSuffix = !0, isConstructor = this.isConstructor(), isMethodCall = !(this.isToplevel() || isConstructor);
      if (isMethodCall) {
        var typeName = this.getTypeName();
        typeName === "[object Object]" && (typeName = "null");
        var methodName = this.getMethodName();
        functionName ? (typeName && functionName.indexOf(typeName) != 0 && (line += typeName + "."), line += functionName, methodName && functionName.indexOf("." + methodName) != functionName.length - methodName.length - 1 && (line += " [as " + methodName + "]")) : line += typeName + "." + (methodName || "<anonymous>");
      } else
        isConstructor ? line += "new " + (functionName || "<anonymous>") : functionName ? line += functionName : (line += fileLocation, addSuffix = !1);
      return addSuffix && (line += " (" + fileLocation + ")"), line;
    }
    function cloneCallSite(frame2) {
      var object = {};
      return Object.getOwnPropertyNames(Object.getPrototypeOf(frame2)).forEach(function(name) {
        object[name] = /^(?:is|get)/.test(name) ? function() {
          return frame2[name].call(frame2);
        } : frame2[name];
      }), object.toString = CallSiteToString, object;
    }
    function wrapCallSite(frame2, state) {
      if (state === void 0 && (state = { nextPosition: null, curPosition: null }), frame2.isNative())
        return state.curPosition = null, frame2;
      var source = frame2.getFileName() || frame2.getScriptNameOrSourceURL();
      if (source) {
        var line = frame2.getLineNumber(), column = frame2.getColumnNumber() - 1, noHeader = /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/, headerLength = noHeader.test(globalProcessVersion()) ? 0 : 62;
        line === 1 && column > headerLength && !isInBrowser() && !frame2.isEval() && (column -= headerLength);
        var position = mapSourcePosition({
          source,
          line,
          column
        });
        state.curPosition = position, frame2 = cloneCallSite(frame2);
        var originalFunctionName = frame2.getFunctionName;
        return frame2.getFunctionName = function() {
          return state.nextPosition == null ? originalFunctionName() : state.nextPosition.name || originalFunctionName();
        }, frame2.getFileName = function() {
          return position.source;
        }, frame2.getLineNumber = function() {
          return position.line;
        }, frame2.getColumnNumber = function() {
          return position.column + 1;
        }, frame2.getScriptNameOrSourceURL = function() {
          return position.source;
        }, frame2;
      }
      var origin = frame2.isEval() && frame2.getEvalOrigin();
      return origin && (origin = mapEvalOrigin(origin), frame2 = cloneCallSite(frame2), frame2.getEvalOrigin = function() {
        return origin;
      }), frame2;
    }
    function prepareStackTrace(error2, stack) {
      emptyCacheBetweenOperations && (fileContentsCache = {}, sourceMapCache = {});
      for (var name = error2.name || "Error", message2 = error2.message || "", errorString = name + ": " + message2, state = { nextPosition: null, curPosition: null }, processedStack = [], i13 = stack.length - 1; i13 >= 0; i13--)
        processedStack.push(`
    at ` + wrapCallSite(stack[i13], state)), state.nextPosition = state.curPosition;
      return state.curPosition = state.nextPosition = null, errorString + processedStack.reverse().join("");
    }
    function getErrorSource(error2) {
      var match = /\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(error2.stack);
      if (match) {
        var source = match[1], line = +match[2], column = +match[3], contents = fileContentsCache[source];
        if (!contents && fs && fs.existsSync(source))
          try {
            contents = fs.readFileSync(source, "utf8");
          } catch {
            contents = "";
          }
        if (contents) {
          var code = contents.split(/(?:\r\n|\r|\n)/)[line - 1];
          if (code)
            return source + ":" + line + `
` + code + `
` + new Array(column).join(" ") + "^";
        }
      }
      return null;
    }
    function printErrorAndExit(error2) {
      var source = getErrorSource(error2), stderr = globalProcessStderr();
      stderr && stderr._handle && stderr._handle.setBlocking && stderr._handle.setBlocking(!0), source && (console.error(), console.error(source)), console.error(error2.stack), globalProcessExit(1);
    }
    function shimEmitUncaughtException() {
      var origEmit = process.emit;
      process.emit = function(type2) {
        if (type2 === "uncaughtException") {
          var hasStack = arguments[1] && arguments[1].stack, hasListeners = this.listeners(type2).length > 0;
          if (hasStack && !hasListeners)
            return printErrorAndExit(arguments[1]);
        }
        return origEmit.apply(this, arguments);
      };
    }
    var originalRetrieveFileHandlers = retrieveFileHandlers.slice(0), originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);
    exports.wrapCallSite = wrapCallSite;
    exports.getErrorSource = getErrorSource;
    exports.mapSourcePosition = mapSourcePosition;
    exports.retrieveSourceMap = retrieveSourceMap;
    exports.install = function(options) {
      if (options = options || {}, options.environment && (environment = options.environment, ["node", "browser", "auto"].indexOf(environment) === -1))
        throw new Error("environment " + environment + " was unknown. Available options are {auto, browser, node}");
      if (options.retrieveFile && (options.overrideRetrieveFile && (retrieveFileHandlers.length = 0), retrieveFileHandlers.unshift(options.retrieveFile)), options.retrieveSourceMap && (options.overrideRetrieveSourceMap && (retrieveMapHandlers.length = 0), retrieveMapHandlers.unshift(options.retrieveSourceMap)), options.hookRequire && !isInBrowser()) {
        var Module = dynamicRequire(module2, "module"), $compile = Module.prototype._compile;
        $compile.__sourceMapSupport || (Module.prototype._compile = function(content, filename) {
          return fileContentsCache[filename] = content, sourceMapCache[filename] = void 0, $compile.call(this, content, filename);
        }, Module.prototype._compile.__sourceMapSupport = !0);
      }
      if (emptyCacheBetweenOperations || (emptyCacheBetweenOperations = "emptyCacheBetweenOperations" in options ? options.emptyCacheBetweenOperations : !1), errorFormatterInstalled || (errorFormatterInstalled = !0, Error.prepareStackTrace = prepareStackTrace), !uncaughtShimInstalled) {
        var installHandler = "handleUncaughtExceptions" in options ? options.handleUncaughtExceptions : !0;
        try {
          var worker_threads = dynamicRequire(module2, "worker_threads");
          worker_threads.isMainThread === !1 && (installHandler = !1);
        } catch {
        }
        installHandler && hasGlobalProcessEventEmitter() && (uncaughtShimInstalled = !0, shimEmitUncaughtException());
      }
    };
    exports.resetRetrieveHandlers = function() {
      retrieveFileHandlers.length = 0, retrieveMapHandlers.length = 0, retrieveFileHandlers = originalRetrieveFileHandlers.slice(0), retrieveMapHandlers = originalRetrieveMapHandlers.slice(0), retrieveSourceMap = handlerExec(retrieveMapHandlers), retrieveFile = handlerExec(retrieveFileHandlers);
    };
  }
});

// node_modules/event-target-shim/dist/event-target-shim.js
var require_event_target_shim = __commonJS({
  "node_modules/event-target-shim/dist/event-target-shim.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var privateData = /* @__PURE__ */ new WeakMap(), wrappers = /* @__PURE__ */ new WeakMap();
    function pd(event) {
      let retv = privateData.get(event);
      return console.assert(
        retv != null,
        "'this' is expected an Event object, but got",
        event
      ), retv;
    }
    function setCancelFlag(data) {
      if (data.passiveListener != null) {
        typeof console < "u" && typeof console.error == "function" && console.error(
          "Unable to preventDefault inside passive event listener invocation.",
          data.passiveListener
        );
        return;
      }
      data.event.cancelable && (data.canceled = !0, typeof data.event.preventDefault == "function" && data.event.preventDefault());
    }
    function Event2(eventTarget, event) {
      privateData.set(this, {
        eventTarget,
        event,
        eventPhase: 2,
        currentTarget: eventTarget,
        canceled: !1,
        stopped: !1,
        immediateStopped: !1,
        passiveListener: null,
        timeStamp: event.timeStamp || Date.now()
      }), Object.defineProperty(this, "isTrusted", { value: !1, enumerable: !0 });
      let keys = Object.keys(event);
      for (let i13 = 0; i13 < keys.length; ++i13) {
        let key = keys[i13];
        key in this || Object.defineProperty(this, key, defineRedirectDescriptor(key));
      }
    }
    Event2.prototype = {
      /**
       * The type of this event.
       * @type {string}
       */
      get type() {
        return pd(this).event.type;
      },
      /**
       * The target of this event.
       * @type {EventTarget}
       */
      get target() {
        return pd(this).eventTarget;
      },
      /**
       * The target of this event.
       * @type {EventTarget}
       */
      get currentTarget() {
        return pd(this).currentTarget;
      },
      /**
       * @returns {EventTarget[]} The composed path of this event.
       */
      composedPath() {
        let currentTarget = pd(this).currentTarget;
        return currentTarget == null ? [] : [currentTarget];
      },
      /**
       * Constant of NONE.
       * @type {number}
       */
      get NONE() {
        return 0;
      },
      /**
       * Constant of CAPTURING_PHASE.
       * @type {number}
       */
      get CAPTURING_PHASE() {
        return 1;
      },
      /**
       * Constant of AT_TARGET.
       * @type {number}
       */
      get AT_TARGET() {
        return 2;
      },
      /**
       * Constant of BUBBLING_PHASE.
       * @type {number}
       */
      get BUBBLING_PHASE() {
        return 3;
      },
      /**
       * The target of this event.
       * @type {number}
       */
      get eventPhase() {
        return pd(this).eventPhase;
      },
      /**
       * Stop event bubbling.
       * @returns {void}
       */
      stopPropagation() {
        let data = pd(this);
        data.stopped = !0, typeof data.event.stopPropagation == "function" && data.event.stopPropagation();
      },
      /**
       * Stop event bubbling.
       * @returns {void}
       */
      stopImmediatePropagation() {
        let data = pd(this);
        data.stopped = !0, data.immediateStopped = !0, typeof data.event.stopImmediatePropagation == "function" && data.event.stopImmediatePropagation();
      },
      /**
       * The flag to be bubbling.
       * @type {boolean}
       */
      get bubbles() {
        return Boolean(pd(this).event.bubbles);
      },
      /**
       * The flag to be cancelable.
       * @type {boolean}
       */
      get cancelable() {
        return Boolean(pd(this).event.cancelable);
      },
      /**
       * Cancel this event.
       * @returns {void}
       */
      preventDefault() {
        setCancelFlag(pd(this));
      },
      /**
       * The flag to indicate cancellation state.
       * @type {boolean}
       */
      get defaultPrevented() {
        return pd(this).canceled;
      },
      /**
       * The flag to be composed.
       * @type {boolean}
       */
      get composed() {
        return Boolean(pd(this).event.composed);
      },
      /**
       * The unix time of this event.
       * @type {number}
       */
      get timeStamp() {
        return pd(this).timeStamp;
      },
      /**
       * The target of this event.
       * @type {EventTarget}
       * @deprecated
       */
      get srcElement() {
        return pd(this).eventTarget;
      },
      /**
       * The flag to stop event bubbling.
       * @type {boolean}
       * @deprecated
       */
      get cancelBubble() {
        return pd(this).stopped;
      },
      set cancelBubble(value) {
        if (!value)
          return;
        let data = pd(this);
        data.stopped = !0, typeof data.event.cancelBubble == "boolean" && (data.event.cancelBubble = !0);
      },
      /**
       * The flag to indicate cancellation state.
       * @type {boolean}
       * @deprecated
       */
      get returnValue() {
        return !pd(this).canceled;
      },
      set returnValue(value) {
        value || setCancelFlag(pd(this));
      },
      /**
       * Initialize this event object. But do nothing under event dispatching.
       * @param {string} type The event type.
       * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
       * @param {boolean} [cancelable=false] The flag to be possible to cancel.
       * @deprecated
       */
      initEvent() {
      }
    };
    Object.defineProperty(Event2.prototype, "constructor", {
      value: Event2,
      configurable: !0,
      writable: !0
    });
    typeof window < "u" && typeof window.Event < "u" && (Object.setPrototypeOf(Event2.prototype, window.Event.prototype), wrappers.set(window.Event.prototype, Event2));
    function defineRedirectDescriptor(key) {
      return {
        get() {
          return pd(this).event[key];
        },
        set(value) {
          pd(this).event[key] = value;
        },
        configurable: !0,
        enumerable: !0
      };
    }
    function defineCallDescriptor(key) {
      return {
        value() {
          let event = pd(this).event;
          return event[key].apply(event, arguments);
        },
        configurable: !0,
        enumerable: !0
      };
    }
    function defineWrapper(BaseEvent, proto) {
      let keys = Object.keys(proto);
      if (keys.length === 0)
        return BaseEvent;
      function CustomEvent2(eventTarget, event) {
        BaseEvent.call(this, eventTarget, event);
      }
      CustomEvent2.prototype = Object.create(BaseEvent.prototype, {
        constructor: { value: CustomEvent2, configurable: !0, writable: !0 }
      });
      for (let i13 = 0; i13 < keys.length; ++i13) {
        let key = keys[i13];
        if (!(key in BaseEvent.prototype)) {
          let isFunc = typeof Object.getOwnPropertyDescriptor(proto, key).value == "function";
          Object.defineProperty(
            CustomEvent2.prototype,
            key,
            isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key)
          );
        }
      }
      return CustomEvent2;
    }
    function getWrapper(proto) {
      if (proto == null || proto === Object.prototype)
        return Event2;
      let wrapper = wrappers.get(proto);
      return wrapper == null && (wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto), wrappers.set(proto, wrapper)), wrapper;
    }
    function wrapEvent(eventTarget, event) {
      let Wrapper = getWrapper(Object.getPrototypeOf(event));
      return new Wrapper(eventTarget, event);
    }
    function isStopped(event) {
      return pd(event).immediateStopped;
    }
    function setEventPhase(event, eventPhase) {
      pd(event).eventPhase = eventPhase;
    }
    function setCurrentTarget(event, currentTarget) {
      pd(event).currentTarget = currentTarget;
    }
    function setPassiveListener(event, passiveListener) {
      pd(event).passiveListener = passiveListener;
    }
    var listenersMap = /* @__PURE__ */ new WeakMap(), CAPTURE = 1, BUBBLE = 2, ATTRIBUTE = 3;
    function isObject(x) {
      return x !== null && typeof x == "object";
    }
    function getListeners(eventTarget) {
      let listeners = listenersMap.get(eventTarget);
      if (listeners == null)
        throw new TypeError(
          "'this' is expected an EventTarget object, but got another value."
        );
      return listeners;
    }
    function defineEventAttributeDescriptor(eventName) {
      return {
        get() {
          let node = getListeners(this).get(eventName);
          for (; node != null; ) {
            if (node.listenerType === ATTRIBUTE)
              return node.listener;
            node = node.next;
          }
          return null;
        },
        set(listener) {
          typeof listener != "function" && !isObject(listener) && (listener = null);
          let listeners = getListeners(this), prev = null, node = listeners.get(eventName);
          for (; node != null; )
            node.listenerType === ATTRIBUTE ? prev !== null ? prev.next = node.next : node.next !== null ? listeners.set(eventName, node.next) : listeners.delete(eventName) : prev = node, node = node.next;
          if (listener !== null) {
            let newNode = {
              listener,
              listenerType: ATTRIBUTE,
              passive: !1,
              once: !1,
              next: null
            };
            prev === null ? listeners.set(eventName, newNode) : prev.next = newNode;
          }
        },
        configurable: !0,
        enumerable: !0
      };
    }
    function defineEventAttribute(eventTargetPrototype, eventName) {
      Object.defineProperty(
        eventTargetPrototype,
        `on${eventName}`,
        defineEventAttributeDescriptor(eventName)
      );
    }
    function defineCustomEventTarget(eventNames) {
      function CustomEventTarget() {
        EventTarget.call(this);
      }
      CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
        constructor: {
          value: CustomEventTarget,
          configurable: !0,
          writable: !0
        }
      });
      for (let i13 = 0; i13 < eventNames.length; ++i13)
        defineEventAttribute(CustomEventTarget.prototype, eventNames[i13]);
      return CustomEventTarget;
    }
    function EventTarget() {
      if (this instanceof EventTarget) {
        listenersMap.set(this, /* @__PURE__ */ new Map());
        return;
      }
      if (arguments.length === 1 && Array.isArray(arguments[0]))
        return defineCustomEventTarget(arguments[0]);
      if (arguments.length > 0) {
        let types2 = new Array(arguments.length);
        for (let i13 = 0; i13 < arguments.length; ++i13)
          types2[i13] = arguments[i13];
        return defineCustomEventTarget(types2);
      }
      throw new TypeError("Cannot call a class as a function");
    }
    EventTarget.prototype = {
      /**
       * Add a given listener to this event target.
       * @param {string} eventName The event name to add.
       * @param {Function} listener The listener to add.
       * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
       * @returns {void}
       */
      addEventListener(eventName, listener, options) {
        if (listener == null)
          return;
        if (typeof listener != "function" && !isObject(listener))
          throw new TypeError("'listener' should be a function or an object.");
        let listeners = getListeners(this), optionsIsObj = isObject(options), listenerType = Boolean(optionsIsObj ? options.capture : options) ? CAPTURE : BUBBLE, newNode = {
          listener,
          listenerType,
          passive: optionsIsObj && Boolean(options.passive),
          once: optionsIsObj && Boolean(options.once),
          next: null
        }, node = listeners.get(eventName);
        if (node === void 0) {
          listeners.set(eventName, newNode);
          return;
        }
        let prev = null;
        for (; node != null; ) {
          if (node.listener === listener && node.listenerType === listenerType)
            return;
          prev = node, node = node.next;
        }
        prev.next = newNode;
      },
      /**
       * Remove a given listener from this event target.
       * @param {string} eventName The event name to remove.
       * @param {Function} listener The listener to remove.
       * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
       * @returns {void}
       */
      removeEventListener(eventName, listener, options) {
        if (listener == null)
          return;
        let listeners = getListeners(this), listenerType = (isObject(options) ? Boolean(options.capture) : Boolean(options)) ? CAPTURE : BUBBLE, prev = null, node = listeners.get(eventName);
        for (; node != null; ) {
          if (node.listener === listener && node.listenerType === listenerType) {
            prev !== null ? prev.next = node.next : node.next !== null ? listeners.set(eventName, node.next) : listeners.delete(eventName);
            return;
          }
          prev = node, node = node.next;
        }
      },
      /**
       * Dispatch a given event.
       * @param {Event|{type:string}} event The event to dispatch.
       * @returns {boolean} `false` if canceled.
       */
      dispatchEvent(event) {
        if (event == null || typeof event.type != "string")
          throw new TypeError('"event.type" should be a string.');
        let listeners = getListeners(this), eventName = event.type, node = listeners.get(eventName);
        if (node == null)
          return !0;
        let wrappedEvent = wrapEvent(this, event), prev = null;
        for (; node != null; ) {
          if (node.once ? prev !== null ? prev.next = node.next : node.next !== null ? listeners.set(eventName, node.next) : listeners.delete(eventName) : prev = node, setPassiveListener(
            wrappedEvent,
            node.passive ? node.listener : null
          ), typeof node.listener == "function")
            try {
              node.listener.call(this, wrappedEvent);
            } catch (err) {
              typeof console < "u" && typeof console.error == "function" && console.error(err);
            }
          else
            node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent == "function" && node.listener.handleEvent(wrappedEvent);
          if (isStopped(wrappedEvent))
            break;
          node = node.next;
        }
        return setPassiveListener(wrappedEvent, null), setEventPhase(wrappedEvent, 0), setCurrentTarget(wrappedEvent, null), !wrappedEvent.defaultPrevented;
      }
    };
    Object.defineProperty(EventTarget.prototype, "constructor", {
      value: EventTarget,
      configurable: !0,
      writable: !0
    });
    typeof window < "u" && typeof window.EventTarget < "u" && Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
    exports.defineEventAttribute = defineEventAttribute;
    exports.EventTarget = EventTarget;
    exports.default = EventTarget;
    module2.exports = EventTarget;
    module2.exports.EventTarget = module2.exports.default = EventTarget;
    module2.exports.defineEventAttribute = defineEventAttribute;
  }
});

// node_modules/abort-controller/dist/abort-controller.js
var require_abort_controller = __commonJS({
  "node_modules/abort-controller/dist/abort-controller.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var eventTargetShim = require_event_target_shim(), AbortSignal = class extends eventTargetShim.EventTarget {
      /**
       * AbortSignal cannot be constructed directly.
       */
      constructor() {
        throw super(), new TypeError("AbortSignal cannot be constructed directly");
      }
      /**
       * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
       */
      get aborted() {
        let aborted = abortedFlags.get(this);
        if (typeof aborted != "boolean")
          throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? "null" : typeof this}`);
        return aborted;
      }
    };
    eventTargetShim.defineEventAttribute(AbortSignal.prototype, "abort");
    function createAbortSignal() {
      let signal = Object.create(AbortSignal.prototype);
      return eventTargetShim.EventTarget.call(signal), abortedFlags.set(signal, !1), signal;
    }
    function abortSignal(signal) {
      abortedFlags.get(signal) === !1 && (abortedFlags.set(signal, !0), signal.dispatchEvent({ type: "abort" }));
    }
    var abortedFlags = /* @__PURE__ */ new WeakMap();
    Object.defineProperties(AbortSignal.prototype, {
      aborted: { enumerable: !0 }
    });
    typeof Symbol == "function" && typeof Symbol.toStringTag == "symbol" && Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
      configurable: !0,
      value: "AbortSignal"
    });
    var AbortController2 = class {
      /**
       * Initialize this controller.
       */
      constructor() {
        signals.set(this, createAbortSignal());
      }
      /**
       * Returns the `AbortSignal` object associated with this object.
       */
      get signal() {
        return getSignal(this);
      }
      /**
       * Abort and signal to any observers that the associated activity is to be aborted.
       */
      abort() {
        abortSignal(getSignal(this));
      }
    }, signals = /* @__PURE__ */ new WeakMap();
    function getSignal(controller) {
      let signal = signals.get(controller);
      if (signal == null)
        throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? "null" : typeof controller}`);
      return signal;
    }
    Object.defineProperties(AbortController2.prototype, {
      signal: { enumerable: !0 },
      abort: { enumerable: !0 }
    });
    typeof Symbol == "function" && typeof Symbol.toStringTag == "symbol" && Object.defineProperty(AbortController2.prototype, Symbol.toStringTag, {
      configurable: !0,
      value: "AbortController"
    });
    exports.AbortController = AbortController2;
    exports.AbortSignal = AbortSignal;
    exports.default = AbortController2;
    module2.exports = AbortController2;
    module2.exports.AbortController = module2.exports.default = AbortController2;
    module2.exports.AbortSignal = AbortSignal;
  }
});

// node_modules/mrmime/index.js
var require_mrmime = __commonJS({
  "node_modules/mrmime/index.js"(exports) {
    var mimes = {
      ez: "application/andrew-inset",
      aw: "application/applixware",
      atom: "application/atom+xml",
      atomcat: "application/atomcat+xml",
      atomdeleted: "application/atomdeleted+xml",
      atomsvc: "application/atomsvc+xml",
      dwd: "application/atsc-dwd+xml",
      held: "application/atsc-held+xml",
      rsat: "application/atsc-rsat+xml",
      bdoc: "application/bdoc",
      xcs: "application/calendar+xml",
      ccxml: "application/ccxml+xml",
      cdfx: "application/cdfx+xml",
      cdmia: "application/cdmi-capability",
      cdmic: "application/cdmi-container",
      cdmid: "application/cdmi-domain",
      cdmio: "application/cdmi-object",
      cdmiq: "application/cdmi-queue",
      cu: "application/cu-seeme",
      mpd: "application/dash+xml",
      davmount: "application/davmount+xml",
      dbk: "application/docbook+xml",
      dssc: "application/dssc+der",
      xdssc: "application/dssc+xml",
      es: "application/ecmascript",
      ecma: "application/ecmascript",
      emma: "application/emma+xml",
      emotionml: "application/emotionml+xml",
      epub: "application/epub+zip",
      exi: "application/exi",
      fdt: "application/fdt+xml",
      pfr: "application/font-tdpfr",
      geojson: "application/geo+json",
      gml: "application/gml+xml",
      gpx: "application/gpx+xml",
      gxf: "application/gxf",
      gz: "application/gzip",
      hjson: "application/hjson",
      stk: "application/hyperstudio",
      ink: "application/inkml+xml",
      inkml: "application/inkml+xml",
      ipfix: "application/ipfix",
      its: "application/its+xml",
      jar: "application/java-archive",
      war: "application/java-archive",
      ear: "application/java-archive",
      ser: "application/java-serialized-object",
      class: "application/java-vm",
      js: "application/javascript",
      mjs: "application/javascript",
      json: "application/json",
      map: "application/json",
      json5: "application/json5",
      jsonml: "application/jsonml+json",
      jsonld: "application/ld+json",
      lgr: "application/lgr+xml",
      lostxml: "application/lost+xml",
      hqx: "application/mac-binhex40",
      cpt: "application/mac-compactpro",
      mads: "application/mads+xml",
      webmanifest: "application/manifest+json",
      mrc: "application/marc",
      mrcx: "application/marcxml+xml",
      ma: "application/mathematica",
      nb: "application/mathematica",
      mb: "application/mathematica",
      mathml: "application/mathml+xml",
      mbox: "application/mbox",
      mscml: "application/mediaservercontrol+xml",
      metalink: "application/metalink+xml",
      meta4: "application/metalink4+xml",
      mets: "application/mets+xml",
      maei: "application/mmt-aei+xml",
      musd: "application/mmt-usd+xml",
      mods: "application/mods+xml",
      m21: "application/mp21",
      mp21: "application/mp21",
      mp4s: "application/mp4",
      m4p: "application/mp4",
      doc: "application/msword",
      dot: "application/msword",
      mxf: "application/mxf",
      nq: "application/n-quads",
      nt: "application/n-triples",
      cjs: "application/node",
      bin: "application/octet-stream",
      dms: "application/octet-stream",
      lrf: "application/octet-stream",
      mar: "application/octet-stream",
      so: "application/octet-stream",
      dist: "application/octet-stream",
      distz: "application/octet-stream",
      pkg: "application/octet-stream",
      bpk: "application/octet-stream",
      dump: "application/octet-stream",
      elc: "application/octet-stream",
      deploy: "application/octet-stream",
      exe: "application/octet-stream",
      dll: "application/octet-stream",
      deb: "application/octet-stream",
      dmg: "application/octet-stream",
      iso: "application/octet-stream",
      img: "application/octet-stream",
      msi: "application/octet-stream",
      msp: "application/octet-stream",
      msm: "application/octet-stream",
      buffer: "application/octet-stream",
      oda: "application/oda",
      opf: "application/oebps-package+xml",
      ogx: "application/ogg",
      omdoc: "application/omdoc+xml",
      onetoc: "application/onenote",
      onetoc2: "application/onenote",
      onetmp: "application/onenote",
      onepkg: "application/onenote",
      oxps: "application/oxps",
      relo: "application/p2p-overlay+xml",
      xer: "application/patch-ops-error+xml",
      pdf: "application/pdf",
      pgp: "application/pgp-encrypted",
      asc: "application/pgp-signature",
      sig: "application/pgp-signature",
      prf: "application/pics-rules",
      p10: "application/pkcs10",
      p7m: "application/pkcs7-mime",
      p7c: "application/pkcs7-mime",
      p7s: "application/pkcs7-signature",
      p8: "application/pkcs8",
      ac: "application/pkix-attr-cert",
      cer: "application/pkix-cert",
      crl: "application/pkix-crl",
      pkipath: "application/pkix-pkipath",
      pki: "application/pkixcmp",
      pls: "application/pls+xml",
      ai: "application/postscript",
      eps: "application/postscript",
      ps: "application/postscript",
      provx: "application/provenance+xml",
      cww: "application/prs.cww",
      pskcxml: "application/pskc+xml",
      raml: "application/raml+yaml",
      rdf: "application/rdf+xml",
      owl: "application/rdf+xml",
      rif: "application/reginfo+xml",
      rnc: "application/relax-ng-compact-syntax",
      rl: "application/resource-lists+xml",
      rld: "application/resource-lists-diff+xml",
      rs: "application/rls-services+xml",
      rapd: "application/route-apd+xml",
      sls: "application/route-s-tsid+xml",
      rusd: "application/route-usd+xml",
      gbr: "application/rpki-ghostbusters",
      mft: "application/rpki-manifest",
      roa: "application/rpki-roa",
      rsd: "application/rsd+xml",
      rss: "application/rss+xml",
      rtf: "application/rtf",
      sbml: "application/sbml+xml",
      scq: "application/scvp-cv-request",
      scs: "application/scvp-cv-response",
      spq: "application/scvp-vp-request",
      spp: "application/scvp-vp-response",
      sdp: "application/sdp",
      senmlx: "application/senml+xml",
      sensmlx: "application/sensml+xml",
      setpay: "application/set-payment-initiation",
      setreg: "application/set-registration-initiation",
      shf: "application/shf+xml",
      siv: "application/sieve",
      sieve: "application/sieve",
      smi: "application/smil+xml",
      smil: "application/smil+xml",
      rq: "application/sparql-query",
      srx: "application/sparql-results+xml",
      gram: "application/srgs",
      grxml: "application/srgs+xml",
      sru: "application/sru+xml",
      ssdl: "application/ssdl+xml",
      ssml: "application/ssml+xml",
      swidtag: "application/swid+xml",
      tei: "application/tei+xml",
      teicorpus: "application/tei+xml",
      tfi: "application/thraud+xml",
      tsd: "application/timestamped-data",
      toml: "application/toml",
      trig: "application/trig",
      ttml: "application/ttml+xml",
      ubj: "application/ubjson",
      rsheet: "application/urc-ressheet+xml",
      td: "application/urc-targetdesc+xml",
      vxml: "application/voicexml+xml",
      wasm: "application/wasm",
      wgt: "application/widget",
      hlp: "application/winhlp",
      wsdl: "application/wsdl+xml",
      wspolicy: "application/wspolicy+xml",
      xaml: "application/xaml+xml",
      xav: "application/xcap-att+xml",
      xca: "application/xcap-caps+xml",
      xdf: "application/xcap-diff+xml",
      xel: "application/xcap-el+xml",
      xns: "application/xcap-ns+xml",
      xenc: "application/xenc+xml",
      xhtml: "application/xhtml+xml",
      xht: "application/xhtml+xml",
      xlf: "application/xliff+xml",
      xml: "application/xml",
      xsl: "application/xml",
      xsd: "application/xml",
      rng: "application/xml",
      dtd: "application/xml-dtd",
      xop: "application/xop+xml",
      xpl: "application/xproc+xml",
      xslt: "application/xml",
      xspf: "application/xspf+xml",
      mxml: "application/xv+xml",
      xhvml: "application/xv+xml",
      xvml: "application/xv+xml",
      xvm: "application/xv+xml",
      yang: "application/yang",
      yin: "application/yin+xml",
      zip: "application/zip",
      "3gpp": "video/3gpp",
      adp: "audio/adpcm",
      amr: "audio/amr",
      au: "audio/basic",
      snd: "audio/basic",
      mid: "audio/midi",
      midi: "audio/midi",
      kar: "audio/midi",
      rmi: "audio/midi",
      mxmf: "audio/mobile-xmf",
      mp3: "audio/mpeg",
      m4a: "audio/mp4",
      mp4a: "audio/mp4",
      mpga: "audio/mpeg",
      mp2: "audio/mpeg",
      mp2a: "audio/mpeg",
      m2a: "audio/mpeg",
      m3a: "audio/mpeg",
      oga: "audio/ogg",
      ogg: "audio/ogg",
      spx: "audio/ogg",
      opus: "audio/ogg",
      s3m: "audio/s3m",
      sil: "audio/silk",
      wav: "audio/wav",
      weba: "audio/webm",
      xm: "audio/xm",
      ttc: "font/collection",
      otf: "font/otf",
      ttf: "font/ttf",
      woff: "font/woff",
      woff2: "font/woff2",
      exr: "image/aces",
      apng: "image/apng",
      avif: "image/avif",
      bmp: "image/bmp",
      cgm: "image/cgm",
      drle: "image/dicom-rle",
      emf: "image/emf",
      fits: "image/fits",
      g3: "image/g3fax",
      gif: "image/gif",
      heic: "image/heic",
      heics: "image/heic-sequence",
      heif: "image/heif",
      heifs: "image/heif-sequence",
      hej2: "image/hej2k",
      hsj2: "image/hsj2",
      ief: "image/ief",
      jls: "image/jls",
      jp2: "image/jp2",
      jpg2: "image/jp2",
      jpeg: "image/jpeg",
      jpg: "image/jpeg",
      jpe: "image/jpeg",
      jph: "image/jph",
      jhc: "image/jphc",
      jpm: "image/jpm",
      jpx: "image/jpx",
      jpf: "image/jpx",
      jxr: "image/jxr",
      jxra: "image/jxra",
      jxrs: "image/jxrs",
      jxs: "image/jxs",
      jxsc: "image/jxsc",
      jxsi: "image/jxsi",
      jxss: "image/jxss",
      ktx: "image/ktx",
      ktx2: "image/ktx2",
      png: "image/png",
      btif: "image/prs.btif",
      pti: "image/prs.pti",
      sgi: "image/sgi",
      svg: "image/svg+xml",
      svgz: "image/svg+xml",
      t38: "image/t38",
      tif: "image/tiff",
      tiff: "image/tiff",
      tfx: "image/tiff-fx",
      webp: "image/webp",
      wmf: "image/wmf",
      "disposition-notification": "message/disposition-notification",
      u8msg: "message/global",
      u8dsn: "message/global-delivery-status",
      u8mdn: "message/global-disposition-notification",
      u8hdr: "message/global-headers",
      eml: "message/rfc822",
      mime: "message/rfc822",
      "3mf": "model/3mf",
      gltf: "model/gltf+json",
      glb: "model/gltf-binary",
      igs: "model/iges",
      iges: "model/iges",
      msh: "model/mesh",
      mesh: "model/mesh",
      silo: "model/mesh",
      mtl: "model/mtl",
      obj: "model/obj",
      stpz: "model/step+zip",
      stpxz: "model/step-xml+zip",
      stl: "model/stl",
      wrl: "model/vrml",
      vrml: "model/vrml",
      x3db: "model/x3d+fastinfoset",
      x3dbz: "model/x3d+binary",
      x3dv: "model/x3d-vrml",
      x3dvz: "model/x3d+vrml",
      x3d: "model/x3d+xml",
      x3dz: "model/x3d+xml",
      appcache: "text/cache-manifest",
      manifest: "text/cache-manifest",
      ics: "text/calendar",
      ifb: "text/calendar",
      coffee: "text/coffeescript",
      litcoffee: "text/coffeescript",
      css: "text/css",
      csv: "text/csv",
      html: "text/html",
      htm: "text/html",
      shtml: "text/html",
      jade: "text/jade",
      jsx: "text/jsx",
      less: "text/less",
      markdown: "text/markdown",
      md: "text/markdown",
      mml: "text/mathml",
      mdx: "text/mdx",
      n3: "text/n3",
      txt: "text/plain",
      text: "text/plain",
      conf: "text/plain",
      def: "text/plain",
      list: "text/plain",
      log: "text/plain",
      in: "text/plain",
      ini: "text/plain",
      dsc: "text/prs.lines.tag",
      rtx: "text/richtext",
      sgml: "text/sgml",
      sgm: "text/sgml",
      shex: "text/shex",
      slim: "text/slim",
      slm: "text/slim",
      spdx: "text/spdx",
      stylus: "text/stylus",
      styl: "text/stylus",
      tsv: "text/tab-separated-values",
      t: "text/troff",
      tr: "text/troff",
      roff: "text/troff",
      man: "text/troff",
      me: "text/troff",
      ms: "text/troff",
      ttl: "text/turtle",
      uri: "text/uri-list",
      uris: "text/uri-list",
      urls: "text/uri-list",
      vcard: "text/vcard",
      vtt: "text/vtt",
      yaml: "text/yaml",
      yml: "text/yaml",
      "3gp": "video/3gpp",
      "3g2": "video/3gpp2",
      h261: "video/h261",
      h263: "video/h263",
      h264: "video/h264",
      m4s: "video/iso.segment",
      jpgv: "video/jpeg",
      jpgm: "image/jpm",
      mj2: "video/mj2",
      mjp2: "video/mj2",
      ts: "video/mp2t",
      mp4: "video/mp4",
      mp4v: "video/mp4",
      mpg4: "video/mp4",
      mpeg: "video/mpeg",
      mpg: "video/mpeg",
      mpe: "video/mpeg",
      m1v: "video/mpeg",
      m2v: "video/mpeg",
      ogv: "video/ogg",
      qt: "video/quicktime",
      mov: "video/quicktime",
      webm: "video/webm"
    };
    function lookup(extn) {
      let tmp = ("" + extn).trim().toLowerCase(), idx = tmp.lastIndexOf(".");
      return mimes[~idx ? tmp.substring(++idx) : tmp];
    }
    exports.lookup = lookup;
    exports.mimes = mimes;
  }
});

// node_modules/data-uri-to-buffer/dist/src/index.js
var require_src = __commonJS({
  "node_modules/data-uri-to-buffer/dist/src/index.js"(exports, module2) {
    "use strict";
    function dataUriToBuffer(uri) {
      if (!/^data:/i.test(uri))
        throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
      uri = uri.replace(/\r?\n/g, "");
      let firstComma = uri.indexOf(",");
      if (firstComma === -1 || firstComma <= 4)
        throw new TypeError("malformed data: URI");
      let meta = uri.substring(5, firstComma).split(";"), charset = "", base64 = !1, type2 = meta[0] || "text/plain", typeFull = type2;
      for (let i13 = 1; i13 < meta.length; i13++)
        meta[i13] === "base64" ? base64 = !0 : (typeFull += `;${meta[i13]}`, meta[i13].indexOf("charset=") === 0 && (charset = meta[i13].substring(8)));
      !meta[0] && !charset.length && (typeFull += ";charset=US-ASCII", charset = "US-ASCII");
      let encoding = base64 ? "base64" : "ascii", data = unescape(uri.substring(firstComma + 1)), buffer = Buffer.from(data, encoding);
      return buffer.type = type2, buffer.typeFull = typeFull, buffer.charset = charset, buffer;
    }
    module2.exports = dataUriToBuffer;
  }
});

// node_modules/web-encoding/src/lib.js
var require_lib = __commonJS({
  "node_modules/web-encoding/src/lib.js"(exports) {
    "use strict";
    exports.TextEncoder = typeof TextEncoder < "u" ? TextEncoder : require("util").TextEncoder;
    exports.TextDecoder = typeof TextDecoder < "u" ? TextDecoder : require("util").TextDecoder;
  }
});

// node_modules/web-streams-polyfill/dist/ponyfill.js
var require_ponyfill = __commonJS({
  "node_modules/web-streams-polyfill/dist/ponyfill.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports == "object" && typeof module2 < "u" ? factory(exports) : typeof define == "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis < "u" ? globalThis : global2 || self, factory(global2.WebStreamsPolyfill = {}));
    })(exports, function(exports2) {
      "use strict";
      var SymbolPolyfill = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? Symbol : function(description) {
        return "Symbol(" + description + ")";
      };
      function noop2() {
      }
      function getGlobals() {
        if (typeof self < "u")
          return self;
        if (typeof window < "u")
          return window;
        if (typeof global < "u")
          return global;
      }
      var globals = getGlobals();
      function typeIsObject(x) {
        return typeof x == "object" && x !== null || typeof x == "function";
      }
      var rethrowAssertionErrorRejection = noop2, originalPromise = Promise, originalPromiseThen = Promise.prototype.then, originalPromiseResolve = Promise.resolve.bind(originalPromise), originalPromiseReject = Promise.reject.bind(originalPromise);
      function newPromise(executor) {
        return new originalPromise(executor);
      }
      function promiseResolvedWith(value) {
        return originalPromiseResolve(value);
      }
      function promiseRejectedWith(reason) {
        return originalPromiseReject(reason);
      }
      function PerformPromiseThen(promise, onFulfilled, onRejected) {
        return originalPromiseThen.call(promise, onFulfilled, onRejected);
      }
      function uponPromise(promise, onFulfilled, onRejected) {
        PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), void 0, rethrowAssertionErrorRejection);
      }
      function uponFulfillment(promise, onFulfilled) {
        uponPromise(promise, onFulfilled);
      }
      function uponRejection(promise, onRejected) {
        uponPromise(promise, void 0, onRejected);
      }
      function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {
        return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);
      }
      function setPromiseIsHandledToTrue(promise) {
        PerformPromiseThen(promise, void 0, rethrowAssertionErrorRejection);
      }
      var queueMicrotask2 = function() {
        var globalQueueMicrotask = globals && globals.queueMicrotask;
        if (typeof globalQueueMicrotask == "function")
          return globalQueueMicrotask;
        var resolvedPromise = promiseResolvedWith(void 0);
        return function(fn) {
          return PerformPromiseThen(resolvedPromise, fn);
        };
      }();
      function reflectCall(F, V, args) {
        if (typeof F != "function")
          throw new TypeError("Argument is not a function");
        return Function.prototype.apply.call(F, V, args);
      }
      function promiseCall(F, V, args) {
        try {
          return promiseResolvedWith(reflectCall(F, V, args));
        } catch (value) {
          return promiseRejectedWith(value);
        }
      }
      var QUEUE_MAX_ARRAY_SIZE = 16384, SimpleQueue = (
        /** @class */
        function() {
          function SimpleQueue2() {
            this._cursor = 0, this._size = 0, this._front = {
              _elements: [],
              _next: void 0
            }, this._back = this._front, this._cursor = 0, this._size = 0;
          }
          return Object.defineProperty(SimpleQueue2.prototype, "length", {
            get: function() {
              return this._size;
            },
            enumerable: !1,
            configurable: !0
          }), SimpleQueue2.prototype.push = function(element) {
            var oldBack = this._back, newBack = oldBack;
            oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1 && (newBack = {
              _elements: [],
              _next: void 0
            }), oldBack._elements.push(element), newBack !== oldBack && (this._back = newBack, oldBack._next = newBack), ++this._size;
          }, SimpleQueue2.prototype.shift = function() {
            var oldFront = this._front, newFront = oldFront, oldCursor = this._cursor, newCursor = oldCursor + 1, elements = oldFront._elements, element = elements[oldCursor];
            return newCursor === QUEUE_MAX_ARRAY_SIZE && (newFront = oldFront._next, newCursor = 0), --this._size, this._cursor = newCursor, oldFront !== newFront && (this._front = newFront), elements[oldCursor] = void 0, element;
          }, SimpleQueue2.prototype.forEach = function(callback) {
            for (var i13 = this._cursor, node = this._front, elements = node._elements; (i13 !== elements.length || node._next !== void 0) && !(i13 === elements.length && (node = node._next, elements = node._elements, i13 = 0, elements.length === 0)); )
              callback(elements[i13]), ++i13;
          }, SimpleQueue2.prototype.peek = function() {
            var front = this._front, cursor = this._cursor;
            return front._elements[cursor];
          }, SimpleQueue2;
        }()
      );
      function ReadableStreamReaderGenericInitialize(reader, stream) {
        reader._ownerReadableStream = stream, stream._reader = reader, stream._state === "readable" ? defaultReaderClosedPromiseInitialize(reader) : stream._state === "closed" ? defaultReaderClosedPromiseInitializeAsResolved(reader) : defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
      }
      function ReadableStreamReaderGenericCancel(reader, reason) {
        var stream = reader._ownerReadableStream;
        return ReadableStreamCancel(stream, reason);
      }
      function ReadableStreamReaderGenericRelease(reader) {
        reader._ownerReadableStream._state === "readable" ? defaultReaderClosedPromiseReject(reader, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")) : defaultReaderClosedPromiseResetToRejected(reader, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")), reader._ownerReadableStream._reader = void 0, reader._ownerReadableStream = void 0;
      }
      function readerLockException(name) {
        return new TypeError("Cannot " + name + " a stream using a released reader");
      }
      function defaultReaderClosedPromiseInitialize(reader) {
        reader._closedPromise = newPromise(function(resolve, reject) {
          reader._closedPromise_resolve = resolve, reader._closedPromise_reject = reject;
        });
      }
      function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
        defaultReaderClosedPromiseInitialize(reader), defaultReaderClosedPromiseReject(reader, reason);
      }
      function defaultReaderClosedPromiseInitializeAsResolved(reader) {
        defaultReaderClosedPromiseInitialize(reader), defaultReaderClosedPromiseResolve(reader);
      }
      function defaultReaderClosedPromiseReject(reader, reason) {
        reader._closedPromise_reject !== void 0 && (setPromiseIsHandledToTrue(reader._closedPromise), reader._closedPromise_reject(reason), reader._closedPromise_resolve = void 0, reader._closedPromise_reject = void 0);
      }
      function defaultReaderClosedPromiseResetToRejected(reader, reason) {
        defaultReaderClosedPromiseInitializeAsRejected(reader, reason);
      }
      function defaultReaderClosedPromiseResolve(reader) {
        reader._closedPromise_resolve !== void 0 && (reader._closedPromise_resolve(void 0), reader._closedPromise_resolve = void 0, reader._closedPromise_reject = void 0);
      }
      var AbortSteps = SymbolPolyfill("[[AbortSteps]]"), ErrorSteps = SymbolPolyfill("[[ErrorSteps]]"), CancelSteps = SymbolPolyfill("[[CancelSteps]]"), PullSteps = SymbolPolyfill("[[PullSteps]]"), NumberIsFinite = Number.isFinite || function(x) {
        return typeof x == "number" && isFinite(x);
      }, MathTrunc = Math.trunc || function(v) {
        return v < 0 ? Math.ceil(v) : Math.floor(v);
      };
      function isDictionary(x) {
        return typeof x == "object" || typeof x == "function";
      }
      function assertDictionary(obj, context) {
        if (obj !== void 0 && !isDictionary(obj))
          throw new TypeError(context + " is not an object.");
      }
      function assertFunction(x, context) {
        if (typeof x != "function")
          throw new TypeError(context + " is not a function.");
      }
      function isObject(x) {
        return typeof x == "object" && x !== null || typeof x == "function";
      }
      function assertObject(x, context) {
        if (!isObject(x))
          throw new TypeError(context + " is not an object.");
      }
      function assertRequiredArgument(x, position, context) {
        if (x === void 0)
          throw new TypeError("Parameter " + position + " is required in '" + context + "'.");
      }
      function assertRequiredField(x, field, context) {
        if (x === void 0)
          throw new TypeError(field + " is required in '" + context + "'.");
      }
      function convertUnrestrictedDouble(value) {
        return Number(value);
      }
      function censorNegativeZero(x) {
        return x === 0 ? 0 : x;
      }
      function integerPart(x) {
        return censorNegativeZero(MathTrunc(x));
      }
      function convertUnsignedLongLongWithEnforceRange(value, context) {
        var lowerBound = 0, upperBound = Number.MAX_SAFE_INTEGER, x = Number(value);
        if (x = censorNegativeZero(x), !NumberIsFinite(x))
          throw new TypeError(context + " is not a finite number");
        if (x = integerPart(x), x < lowerBound || x > upperBound)
          throw new TypeError(context + " is outside the accepted range of " + lowerBound + " to " + upperBound + ", inclusive");
        return !NumberIsFinite(x) || x === 0 ? 0 : x;
      }
      function assertReadableStream(x, context) {
        if (!IsReadableStream(x))
          throw new TypeError(context + " is not a ReadableStream.");
      }
      function AcquireReadableStreamDefaultReader(stream) {
        return new ReadableStreamDefaultReader(stream);
      }
      function ReadableStreamAddReadRequest(stream, readRequest) {
        stream._reader._readRequests.push(readRequest);
      }
      function ReadableStreamFulfillReadRequest(stream, chunk, done) {
        var reader = stream._reader, readRequest = reader._readRequests.shift();
        done ? readRequest._closeSteps() : readRequest._chunkSteps(chunk);
      }
      function ReadableStreamGetNumReadRequests(stream) {
        return stream._reader._readRequests.length;
      }
      function ReadableStreamHasDefaultReader(stream) {
        var reader = stream._reader;
        return !(reader === void 0 || !IsReadableStreamDefaultReader(reader));
      }
      var ReadableStreamDefaultReader = (
        /** @class */
        function() {
          function ReadableStreamDefaultReader2(stream) {
            if (assertRequiredArgument(stream, 1, "ReadableStreamDefaultReader"), assertReadableStream(stream, "First parameter"), IsReadableStreamLocked(stream))
              throw new TypeError("This stream has already been locked for exclusive reading by another reader");
            ReadableStreamReaderGenericInitialize(this, stream), this._readRequests = new SimpleQueue();
          }
          return Object.defineProperty(ReadableStreamDefaultReader2.prototype, "closed", {
            /**
             * Returns a promise that will be fulfilled when the stream becomes closed,
             * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.
             */
            get: function() {
              return IsReadableStreamDefaultReader(this) ? this._closedPromise : promiseRejectedWith(defaultReaderBrandCheckException("closed"));
            },
            enumerable: !1,
            configurable: !0
          }), ReadableStreamDefaultReader2.prototype.cancel = function(reason) {
            return reason === void 0 && (reason = void 0), IsReadableStreamDefaultReader(this) ? this._ownerReadableStream === void 0 ? promiseRejectedWith(readerLockException("cancel")) : ReadableStreamReaderGenericCancel(this, reason) : promiseRejectedWith(defaultReaderBrandCheckException("cancel"));
          }, ReadableStreamDefaultReader2.prototype.read = function() {
            if (!IsReadableStreamDefaultReader(this))
              return promiseRejectedWith(defaultReaderBrandCheckException("read"));
            if (this._ownerReadableStream === void 0)
              return promiseRejectedWith(readerLockException("read from"));
            var resolvePromise, rejectPromise, promise = newPromise(function(resolve, reject) {
              resolvePromise = resolve, rejectPromise = reject;
            }), readRequest = {
              _chunkSteps: function(chunk) {
                return resolvePromise({ value: chunk, done: !1 });
              },
              _closeSteps: function() {
                return resolvePromise({ value: void 0, done: !0 });
              },
              _errorSteps: function(e24) {
                return rejectPromise(e24);
              }
            };
            return ReadableStreamDefaultReaderRead(this, readRequest), promise;
          }, ReadableStreamDefaultReader2.prototype.releaseLock = function() {
            if (!IsReadableStreamDefaultReader(this))
              throw defaultReaderBrandCheckException("releaseLock");
            if (this._ownerReadableStream !== void 0) {
              if (this._readRequests.length > 0)
                throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
              ReadableStreamReaderGenericRelease(this);
            }
          }, ReadableStreamDefaultReader2;
        }()
      );
      Object.defineProperties(ReadableStreamDefaultReader.prototype, {
        cancel: { enumerable: !0 },
        read: { enumerable: !0 },
        releaseLock: { enumerable: !0 },
        closed: { enumerable: !0 }
      }), typeof SymbolPolyfill.toStringTag == "symbol" && Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStreamDefaultReader",
        configurable: !0
      });
      function IsReadableStreamDefaultReader(x) {
        return !typeIsObject(x) || !Object.prototype.hasOwnProperty.call(x, "_readRequests") ? !1 : x instanceof ReadableStreamDefaultReader;
      }
      function ReadableStreamDefaultReaderRead(reader, readRequest) {
        var stream = reader._ownerReadableStream;
        stream._disturbed = !0, stream._state === "closed" ? readRequest._closeSteps() : stream._state === "errored" ? readRequest._errorSteps(stream._storedError) : stream._readableStreamController[PullSteps](readRequest);
      }
      function defaultReaderBrandCheckException(name) {
        return new TypeError("ReadableStreamDefaultReader.prototype." + name + " can only be used on a ReadableStreamDefaultReader");
      }
      var _a, AsyncIteratorPrototype;
      typeof SymbolPolyfill.asyncIterator == "symbol" && (AsyncIteratorPrototype = (_a = {}, // 25.1.3.1 %AsyncIteratorPrototype% [ @@asyncIterator ] ( )
      // https://tc39.github.io/ecma262/#sec-asynciteratorprototype-asynciterator
      _a[SymbolPolyfill.asyncIterator] = function() {
        return this;
      }, _a), Object.defineProperty(AsyncIteratorPrototype, SymbolPolyfill.asyncIterator, { enumerable: !1 }));
      var ReadableStreamAsyncIteratorImpl = (
        /** @class */
        function() {
          function ReadableStreamAsyncIteratorImpl2(reader, preventCancel) {
            this._ongoingPromise = void 0, this._isFinished = !1, this._reader = reader, this._preventCancel = preventCancel;
          }
          return ReadableStreamAsyncIteratorImpl2.prototype.next = function() {
            var _this = this, nextSteps = function() {
              return _this._nextSteps();
            };
            return this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps(), this._ongoingPromise;
          }, ReadableStreamAsyncIteratorImpl2.prototype.return = function(value) {
            var _this = this, returnSteps = function() {
              return _this._returnSteps(value);
            };
            return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();
          }, ReadableStreamAsyncIteratorImpl2.prototype._nextSteps = function() {
            var _this = this;
            if (this._isFinished)
              return Promise.resolve({ value: void 0, done: !0 });
            var reader = this._reader;
            if (reader._ownerReadableStream === void 0)
              return promiseRejectedWith(readerLockException("iterate"));
            var resolvePromise, rejectPromise, promise = newPromise(function(resolve, reject) {
              resolvePromise = resolve, rejectPromise = reject;
            }), readRequest = {
              _chunkSteps: function(chunk) {
                _this._ongoingPromise = void 0, queueMicrotask2(function() {
                  return resolvePromise({ value: chunk, done: !1 });
                });
              },
              _closeSteps: function() {
                _this._ongoingPromise = void 0, _this._isFinished = !0, ReadableStreamReaderGenericRelease(reader), resolvePromise({ value: void 0, done: !0 });
              },
              _errorSteps: function(reason) {
                _this._ongoingPromise = void 0, _this._isFinished = !0, ReadableStreamReaderGenericRelease(reader), rejectPromise(reason);
              }
            };
            return ReadableStreamDefaultReaderRead(reader, readRequest), promise;
          }, ReadableStreamAsyncIteratorImpl2.prototype._returnSteps = function(value) {
            if (this._isFinished)
              return Promise.resolve({ value, done: !0 });
            this._isFinished = !0;
            var reader = this._reader;
            if (reader._ownerReadableStream === void 0)
              return promiseRejectedWith(readerLockException("finish iterating"));
            if (!this._preventCancel) {
              var result = ReadableStreamReaderGenericCancel(reader, value);
              return ReadableStreamReaderGenericRelease(reader), transformPromiseWith(result, function() {
                return { value, done: !0 };
              });
            }
            return ReadableStreamReaderGenericRelease(reader), promiseResolvedWith({ value, done: !0 });
          }, ReadableStreamAsyncIteratorImpl2;
        }()
      ), ReadableStreamAsyncIteratorPrototype = {
        next: function() {
          return IsReadableStreamAsyncIterator(this) ? this._asyncIteratorImpl.next() : promiseRejectedWith(streamAsyncIteratorBrandCheckException("next"));
        },
        return: function(value) {
          return IsReadableStreamAsyncIterator(this) ? this._asyncIteratorImpl.return(value) : promiseRejectedWith(streamAsyncIteratorBrandCheckException("return"));
        }
      };
      AsyncIteratorPrototype !== void 0 && Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);
      function AcquireReadableStreamAsyncIterator(stream, preventCancel) {
        var reader = AcquireReadableStreamDefaultReader(stream), impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel), iterator = Object.create(ReadableStreamAsyncIteratorPrototype);
        return iterator._asyncIteratorImpl = impl, iterator;
      }
      function IsReadableStreamAsyncIterator(x) {
        if (!typeIsObject(x) || !Object.prototype.hasOwnProperty.call(x, "_asyncIteratorImpl"))
          return !1;
        try {
          return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;
        } catch {
          return !1;
        }
      }
      function streamAsyncIteratorBrandCheckException(name) {
        return new TypeError("ReadableStreamAsyncIterator." + name + " can only be used on a ReadableSteamAsyncIterator");
      }
      var NumberIsNaN = Number.isNaN || function(x) {
        return x !== x;
      };
      function CreateArrayFromList(elements) {
        return elements.slice();
      }
      function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {
        new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);
      }
      function TransferArrayBuffer(O) {
        return O;
      }
      function IsDetachedBuffer(O) {
        return !1;
      }
      function ArrayBufferSlice(buffer, begin, end) {
        if (buffer.slice)
          return buffer.slice(begin, end);
        var length = end - begin, slice = new ArrayBuffer(length);
        return CopyDataBlockBytes(slice, 0, buffer, begin, length), slice;
      }
      function IsNonNegativeNumber(v) {
        return !(typeof v != "number" || NumberIsNaN(v) || v < 0);
      }
      function CloneAsUint8Array(O) {
        var buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);
        return new Uint8Array(buffer);
      }
      function DequeueValue(container) {
        var pair = container._queue.shift();
        return container._queueTotalSize -= pair.size, container._queueTotalSize < 0 && (container._queueTotalSize = 0), pair.value;
      }
      function EnqueueValueWithSize(container, value, size2) {
        if (!IsNonNegativeNumber(size2) || size2 === 1 / 0)
          throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
        container._queue.push({ value, size: size2 }), container._queueTotalSize += size2;
      }
      function PeekQueueValue(container) {
        var pair = container._queue.peek();
        return pair.value;
      }
      function ResetQueue(container) {
        container._queue = new SimpleQueue(), container._queueTotalSize = 0;
      }
      var ReadableStreamBYOBRequest = (
        /** @class */
        function() {
          function ReadableStreamBYOBRequest2() {
            throw new TypeError("Illegal constructor");
          }
          return Object.defineProperty(ReadableStreamBYOBRequest2.prototype, "view", {
            /**
             * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.
             */
            get: function() {
              if (!IsReadableStreamBYOBRequest(this))
                throw byobRequestBrandCheckException("view");
              return this._view;
            },
            enumerable: !1,
            configurable: !0
          }), ReadableStreamBYOBRequest2.prototype.respond = function(bytesWritten) {
            if (!IsReadableStreamBYOBRequest(this))
              throw byobRequestBrandCheckException("respond");
            if (assertRequiredArgument(bytesWritten, 1, "respond"), bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, "First parameter"), this._associatedReadableByteStreamController === void 0)
              throw new TypeError("This BYOB request has been invalidated");
            IsDetachedBuffer(this._view.buffer), ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);
          }, ReadableStreamBYOBRequest2.prototype.respondWithNewView = function(view) {
            if (!IsReadableStreamBYOBRequest(this))
              throw byobRequestBrandCheckException("respondWithNewView");
            if (assertRequiredArgument(view, 1, "respondWithNewView"), !ArrayBuffer.isView(view))
              throw new TypeError("You can only respond with array buffer views");
            if (this._associatedReadableByteStreamController === void 0)
              throw new TypeError("This BYOB request has been invalidated");
            IsDetachedBuffer(view.buffer), ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);
          }, ReadableStreamBYOBRequest2;
        }()
      );
      Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
        respond: { enumerable: !0 },
        respondWithNewView: { enumerable: !0 },
        view: { enumerable: !0 }
      }), typeof SymbolPolyfill.toStringTag == "symbol" && Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStreamBYOBRequest",
        configurable: !0
      });
      var ReadableByteStreamController = (
        /** @class */
        function() {
          function ReadableByteStreamController2() {
            throw new TypeError("Illegal constructor");
          }
          return Object.defineProperty(ReadableByteStreamController2.prototype, "byobRequest", {
            /**
             * Returns the current BYOB pull request, or `null` if there isn't one.
             */
            get: function() {
              if (!IsReadableByteStreamController(this))
                throw byteStreamControllerBrandCheckException("byobRequest");
              return ReadableByteStreamControllerGetBYOBRequest(this);
            },
            enumerable: !1,
            configurable: !0
          }), Object.defineProperty(ReadableByteStreamController2.prototype, "desiredSize", {
            /**
             * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
             * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.
             */
            get: function() {
              if (!IsReadableByteStreamController(this))
                throw byteStreamControllerBrandCheckException("desiredSize");
              return ReadableByteStreamControllerGetDesiredSize(this);
            },
            enumerable: !1,
            configurable: !0
          }), ReadableByteStreamController2.prototype.close = function() {
            if (!IsReadableByteStreamController(this))
              throw byteStreamControllerBrandCheckException("close");
            if (this._closeRequested)
              throw new TypeError("The stream has already been closed; do not close it again!");
            var state = this._controlledReadableByteStream._state;
            if (state !== "readable")
              throw new TypeError("The stream (in " + state + " state) is not in the readable state and cannot be closed");
            ReadableByteStreamControllerClose(this);
          }, ReadableByteStreamController2.prototype.enqueue = function(chunk) {
            if (!IsReadableByteStreamController(this))
              throw byteStreamControllerBrandCheckException("enqueue");
            if (assertRequiredArgument(chunk, 1, "enqueue"), !ArrayBuffer.isView(chunk))
              throw new TypeError("chunk must be an array buffer view");
            if (chunk.byteLength === 0)
              throw new TypeError("chunk must have non-zero byteLength");
            if (chunk.buffer.byteLength === 0)
              throw new TypeError("chunk's buffer must have non-zero byteLength");
            if (this._closeRequested)
              throw new TypeError("stream is closed or draining");
            var state = this._controlledReadableByteStream._state;
            if (state !== "readable")
              throw new TypeError("The stream (in " + state + " state) is not in the readable state and cannot be enqueued to");
            ReadableByteStreamControllerEnqueue(this, chunk);
          }, ReadableByteStreamController2.prototype.error = function(e24) {
            if (e24 === void 0 && (e24 = void 0), !IsReadableByteStreamController(this))
              throw byteStreamControllerBrandCheckException("error");
            ReadableByteStreamControllerError(this, e24);
          }, ReadableByteStreamController2.prototype[CancelSteps] = function(reason) {
            ReadableByteStreamControllerClearPendingPullIntos(this), ResetQueue(this);
            var result = this._cancelAlgorithm(reason);
            return ReadableByteStreamControllerClearAlgorithms(this), result;
          }, ReadableByteStreamController2.prototype[PullSteps] = function(readRequest) {
            var stream = this._controlledReadableByteStream;
            if (this._queueTotalSize > 0) {
              var entry2 = this._queue.shift();
              this._queueTotalSize -= entry2.byteLength, ReadableByteStreamControllerHandleQueueDrain(this);
              var view = new Uint8Array(entry2.buffer, entry2.byteOffset, entry2.byteLength);
              readRequest._chunkSteps(view);
              return;
            }
            var autoAllocateChunkSize = this._autoAllocateChunkSize;
            if (autoAllocateChunkSize !== void 0) {
              var buffer = void 0;
              try {
                buffer = new ArrayBuffer(autoAllocateChunkSize);
              } catch (bufferE) {
                readRequest._errorSteps(bufferE);
                return;
              }
              var pullIntoDescriptor = {
                buffer,
                bufferByteLength: autoAllocateChunkSize,
                byteOffset: 0,
                byteLength: autoAllocateChunkSize,
                bytesFilled: 0,
                elementSize: 1,
                viewConstructor: Uint8Array,
                readerType: "default"
              };
              this._pendingPullIntos.push(pullIntoDescriptor);
            }
            ReadableStreamAddReadRequest(stream, readRequest), ReadableByteStreamControllerCallPullIfNeeded(this);
          }, ReadableByteStreamController2;
        }()
      );
      Object.defineProperties(ReadableByteStreamController.prototype, {
        close: { enumerable: !0 },
        enqueue: { enumerable: !0 },
        error: { enumerable: !0 },
        byobRequest: { enumerable: !0 },
        desiredSize: { enumerable: !0 }
      }), typeof SymbolPolyfill.toStringTag == "symbol" && Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableByteStreamController",
        configurable: !0
      });
      function IsReadableByteStreamController(x) {
        return !typeIsObject(x) || !Object.prototype.hasOwnProperty.call(x, "_controlledReadableByteStream") ? !1 : x instanceof ReadableByteStreamController;
      }
      function IsReadableStreamBYOBRequest(x) {
        return !typeIsObject(x) || !Object.prototype.hasOwnProperty.call(x, "_associatedReadableByteStreamController") ? !1 : x instanceof ReadableStreamBYOBRequest;
      }
      function ReadableByteStreamControllerCallPullIfNeeded(controller) {
        var shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
        if (shouldPull) {
          if (controller._pulling) {
            controller._pullAgain = !0;
            return;
          }
          controller._pulling = !0;
          var pullPromise = controller._pullAlgorithm();
          uponPromise(pullPromise, function() {
            controller._pulling = !1, controller._pullAgain && (controller._pullAgain = !1, ReadableByteStreamControllerCallPullIfNeeded(controller));
          }, function(e24) {
            ReadableByteStreamControllerError(controller, e24);
          });
        }
      }
      function ReadableByteStreamControllerClearPendingPullIntos(controller) {
        ReadableByteStreamControllerInvalidateBYOBRequest(controller), controller._pendingPullIntos = new SimpleQueue();
      }
      function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {
        var done = !1;
        stream._state === "closed" && (done = !0);
        var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
        pullIntoDescriptor.readerType === "default" ? ReadableStreamFulfillReadRequest(stream, filledView, done) : ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
      }
      function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
        var bytesFilled = pullIntoDescriptor.bytesFilled, elementSize = pullIntoDescriptor.elementSize;
        return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);
      }
      function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {
        controller._queue.push({ buffer, byteOffset, byteLength }), controller._queueTotalSize += byteLength;
      }
      function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {
        var elementSize = pullIntoDescriptor.elementSize, currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize, maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled), maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy, maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize, totalBytesToCopyRemaining = maxBytesToCopy, ready = !1;
        maxAlignedBytes > currentAlignedBytes && (totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled, ready = !0);
        for (var queue = controller._queue; totalBytesToCopyRemaining > 0; ) {
          var headOfQueue = queue.peek(), bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength), destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
          CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy), headOfQueue.byteLength === bytesToCopy ? queue.shift() : (headOfQueue.byteOffset += bytesToCopy, headOfQueue.byteLength -= bytesToCopy), controller._queueTotalSize -= bytesToCopy, ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor), totalBytesToCopyRemaining -= bytesToCopy;
        }
        return ready;
      }
      function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size2, pullIntoDescriptor) {
        pullIntoDescriptor.bytesFilled += size2;
      }
      function ReadableByteStreamControllerHandleQueueDrain(controller) {
        controller._queueTotalSize === 0 && controller._closeRequested ? (ReadableByteStreamControllerClearAlgorithms(controller), ReadableStreamClose(controller._controlledReadableByteStream)) : ReadableByteStreamControllerCallPullIfNeeded(controller);
      }
      function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
        controller._byobRequest !== null && (controller._byobRequest._associatedReadableByteStreamController = void 0, controller._byobRequest._view = null, controller._byobRequest = null);
      }
      function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
        for (; controller._pendingPullIntos.length > 0; ) {
          if (controller._queueTotalSize === 0)
            return;
          var pullIntoDescriptor = controller._pendingPullIntos.peek();
          ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) && (ReadableByteStreamControllerShiftPendingPullInto(controller), ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor));
        }
      }
      function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {
        var stream = controller._controlledReadableByteStream, elementSize = 1;
        view.constructor !== DataView && (elementSize = view.constructor.BYTES_PER_ELEMENT);
        var ctor = view.constructor, buffer = view.buffer, pullIntoDescriptor = {
          buffer,
          bufferByteLength: buffer.byteLength,
          byteOffset: view.byteOffset,
          byteLength: view.byteLength,
          bytesFilled: 0,
          elementSize,
          viewConstructor: ctor,
          readerType: "byob"
        };
        if (controller._pendingPullIntos.length > 0) {
          controller._pendingPullIntos.push(pullIntoDescriptor), ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
          return;
        }
        if (stream._state === "closed") {
          var emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);
          readIntoRequest._closeSteps(emptyView);
          return;
        }
        if (controller._queueTotalSize > 0) {
          if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
            var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
            ReadableByteStreamControllerHandleQueueDrain(controller), readIntoRequest._chunkSteps(filledView);
            return;
          }
          if (controller._closeRequested) {
            var e24 = new TypeError("Insufficient bytes to fill elements in the given buffer");
            ReadableByteStreamControllerError(controller, e24), readIntoRequest._errorSteps(e24);
            return;
          }
        }
        controller._pendingPullIntos.push(pullIntoDescriptor), ReadableStreamAddReadIntoRequest(stream, readIntoRequest), ReadableByteStreamControllerCallPullIfNeeded(controller);
      }
      function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
        var stream = controller._controlledReadableByteStream;
        if (ReadableStreamHasBYOBReader(stream))
          for (; ReadableStreamGetNumReadIntoRequests(stream) > 0; ) {
            var pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);
            ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);
          }
      }
      function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {
        if (ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor), !(pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize)) {
          ReadableByteStreamControllerShiftPendingPullInto(controller);
          var remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
          if (remainderSize > 0) {
            var end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled, remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);
          }
          pullIntoDescriptor.bytesFilled -= remainderSize, ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor), ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
        }
      }
      function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
        var firstDescriptor = controller._pendingPullIntos.peek();
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        var state = controller._controlledReadableByteStream._state;
        state === "closed" ? ReadableByteStreamControllerRespondInClosedState(controller) : ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor), ReadableByteStreamControllerCallPullIfNeeded(controller);
      }
      function ReadableByteStreamControllerShiftPendingPullInto(controller) {
        var descriptor = controller._pendingPullIntos.shift();
        return descriptor;
      }
      function ReadableByteStreamControllerShouldCallPull(controller) {
        var stream = controller._controlledReadableByteStream;
        if (stream._state !== "readable" || controller._closeRequested || !controller._started)
          return !1;
        if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0 || ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0)
          return !0;
        var desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);
        return desiredSize > 0;
      }
      function ReadableByteStreamControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = void 0, controller._cancelAlgorithm = void 0;
      }
      function ReadableByteStreamControllerClose(controller) {
        var stream = controller._controlledReadableByteStream;
        if (!(controller._closeRequested || stream._state !== "readable")) {
          if (controller._queueTotalSize > 0) {
            controller._closeRequested = !0;
            return;
          }
          if (controller._pendingPullIntos.length > 0) {
            var firstPendingPullInto = controller._pendingPullIntos.peek();
            if (firstPendingPullInto.bytesFilled > 0) {
              var e24 = new TypeError("Insufficient bytes to fill elements in the given buffer");
              throw ReadableByteStreamControllerError(controller, e24), e24;
            }
          }
          ReadableByteStreamControllerClearAlgorithms(controller), ReadableStreamClose(stream);
        }
      }
      function ReadableByteStreamControllerEnqueue(controller, chunk) {
        var stream = controller._controlledReadableByteStream;
        if (!(controller._closeRequested || stream._state !== "readable")) {
          var buffer = chunk.buffer, byteOffset = chunk.byteOffset, byteLength = chunk.byteLength, transferredBuffer = buffer;
          if (controller._pendingPullIntos.length > 0) {
            var firstPendingPullInto = controller._pendingPullIntos.peek();
            IsDetachedBuffer(firstPendingPullInto.buffer), firstPendingPullInto.buffer = firstPendingPullInto.buffer;
          }
          if (ReadableByteStreamControllerInvalidateBYOBRequest(controller), ReadableStreamHasDefaultReader(stream))
            if (ReadableStreamGetNumReadRequests(stream) === 0)
              ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
            else {
              controller._pendingPullIntos.length > 0 && ReadableByteStreamControllerShiftPendingPullInto(controller);
              var transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);
              ReadableStreamFulfillReadRequest(stream, transferredView, !1);
            }
          else
            ReadableStreamHasBYOBReader(stream) ? (ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength), ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller)) : ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
          ReadableByteStreamControllerCallPullIfNeeded(controller);
        }
      }
      function ReadableByteStreamControllerError(controller, e24) {
        var stream = controller._controlledReadableByteStream;
        stream._state === "readable" && (ReadableByteStreamControllerClearPendingPullIntos(controller), ResetQueue(controller), ReadableByteStreamControllerClearAlgorithms(controller), ReadableStreamError(stream, e24));
      }
      function ReadableByteStreamControllerGetBYOBRequest(controller) {
        if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {
          var firstDescriptor = controller._pendingPullIntos.peek(), view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled), byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);
          SetUpReadableStreamBYOBRequest(byobRequest, controller, view), controller._byobRequest = byobRequest;
        }
        return controller._byobRequest;
      }
      function ReadableByteStreamControllerGetDesiredSize(controller) {
        var state = controller._controlledReadableByteStream._state;
        return state === "errored" ? null : state === "closed" ? 0 : controller._strategyHWM - controller._queueTotalSize;
      }
      function ReadableByteStreamControllerRespond(controller, bytesWritten) {
        var firstDescriptor = controller._pendingPullIntos.peek(), state = controller._controlledReadableByteStream._state;
        if (state === "closed") {
          if (bytesWritten !== 0)
            throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
        } else {
          if (bytesWritten === 0)
            throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
          if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength)
            throw new RangeError("bytesWritten out of range");
        }
        firstDescriptor.buffer = firstDescriptor.buffer, ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
      }
      function ReadableByteStreamControllerRespondWithNewView(controller, view) {
        var firstDescriptor = controller._pendingPullIntos.peek(), state = controller._controlledReadableByteStream._state;
        if (state === "closed") {
          if (view.byteLength !== 0)
            throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream");
        } else if (view.byteLength === 0)
          throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");
        if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset)
          throw new RangeError("The region specified by view does not match byobRequest");
        if (firstDescriptor.bufferByteLength !== view.buffer.byteLength)
          throw new RangeError("The buffer of view has different capacity than byobRequest");
        if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength)
          throw new RangeError("The region specified by view is larger than byobRequest");
        var viewByteLength = view.byteLength;
        firstDescriptor.buffer = view.buffer, ReadableByteStreamControllerRespondInternal(controller, viewByteLength);
      }
      function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {
        controller._controlledReadableByteStream = stream, controller._pullAgain = !1, controller._pulling = !1, controller._byobRequest = null, controller._queue = controller._queueTotalSize = void 0, ResetQueue(controller), controller._closeRequested = !1, controller._started = !1, controller._strategyHWM = highWaterMark, controller._pullAlgorithm = pullAlgorithm, controller._cancelAlgorithm = cancelAlgorithm, controller._autoAllocateChunkSize = autoAllocateChunkSize, controller._pendingPullIntos = new SimpleQueue(), stream._readableStreamController = controller;
        var startResult = startAlgorithm();
        uponPromise(promiseResolvedWith(startResult), function() {
          controller._started = !0, ReadableByteStreamControllerCallPullIfNeeded(controller);
        }, function(r25) {
          ReadableByteStreamControllerError(controller, r25);
        });
      }
      function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {
        var controller = Object.create(ReadableByteStreamController.prototype), startAlgorithm = function() {
        }, pullAlgorithm = function() {
          return promiseResolvedWith(void 0);
        }, cancelAlgorithm = function() {
          return promiseResolvedWith(void 0);
        };
        underlyingByteSource.start !== void 0 && (startAlgorithm = function() {
          return underlyingByteSource.start(controller);
        }), underlyingByteSource.pull !== void 0 && (pullAlgorithm = function() {
          return underlyingByteSource.pull(controller);
        }), underlyingByteSource.cancel !== void 0 && (cancelAlgorithm = function(reason) {
          return underlyingByteSource.cancel(reason);
        });
        var autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
        if (autoAllocateChunkSize === 0)
          throw new TypeError("autoAllocateChunkSize must be greater than 0");
        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);
      }
      function SetUpReadableStreamBYOBRequest(request, controller, view) {
        request._associatedReadableByteStreamController = controller, request._view = view;
      }
      function byobRequestBrandCheckException(name) {
        return new TypeError("ReadableStreamBYOBRequest.prototype." + name + " can only be used on a ReadableStreamBYOBRequest");
      }
      function byteStreamControllerBrandCheckException(name) {
        return new TypeError("ReadableByteStreamController.prototype." + name + " can only be used on a ReadableByteStreamController");
      }
      function AcquireReadableStreamBYOBReader(stream) {
        return new ReadableStreamBYOBReader(stream);
      }
      function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {
        stream._reader._readIntoRequests.push(readIntoRequest);
      }
      function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
        var reader = stream._reader, readIntoRequest = reader._readIntoRequests.shift();
        done ? readIntoRequest._closeSteps(chunk) : readIntoRequest._chunkSteps(chunk);
      }
      function ReadableStreamGetNumReadIntoRequests(stream) {
        return stream._reader._readIntoRequests.length;
      }
      function ReadableStreamHasBYOBReader(stream) {
        var reader = stream._reader;
        return !(reader === void 0 || !IsReadableStreamBYOBReader(reader));
      }
      var ReadableStreamBYOBReader = (
        /** @class */
        function() {
          function ReadableStreamBYOBReader2(stream) {
            if (assertRequiredArgument(stream, 1, "ReadableStreamBYOBReader"), assertReadableStream(stream, "First parameter"), IsReadableStreamLocked(stream))
              throw new TypeError("This stream has already been locked for exclusive reading by another reader");
            if (!IsReadableByteStreamController(stream._readableStreamController))
              throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
            ReadableStreamReaderGenericInitialize(this, stream), this._readIntoRequests = new SimpleQueue();
          }
          return Object.defineProperty(ReadableStreamBYOBReader2.prototype, "closed", {
            /**
             * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
             * the reader's lock is released before the stream finishes closing.
             */
            get: function() {
              return IsReadableStreamBYOBReader(this) ? this._closedPromise : promiseRejectedWith(byobReaderBrandCheckException("closed"));
            },
            enumerable: !1,
            configurable: !0
          }), ReadableStreamBYOBReader2.prototype.cancel = function(reason) {
            return reason === void 0 && (reason = void 0), IsReadableStreamBYOBReader(this) ? this._ownerReadableStream === void 0 ? promiseRejectedWith(readerLockException("cancel")) : ReadableStreamReaderGenericCancel(this, reason) : promiseRejectedWith(byobReaderBrandCheckException("cancel"));
          }, ReadableStreamBYOBReader2.prototype.read = function(view) {
            if (!IsReadableStreamBYOBReader(this))
              return promiseRejectedWith(byobReaderBrandCheckException("read"));
            if (!ArrayBuffer.isView(view))
              return promiseRejectedWith(new TypeError("view must be an array buffer view"));
            if (view.byteLength === 0)
              return promiseRejectedWith(new TypeError("view must have non-zero byteLength"));
            if (view.buffer.byteLength === 0)
              return promiseRejectedWith(new TypeError("view's buffer must have non-zero byteLength"));
            if (IsDetachedBuffer(view.buffer), this._ownerReadableStream === void 0)
              return promiseRejectedWith(readerLockException("read from"));
            var resolvePromise, rejectPromise, promise = newPromise(function(resolve, reject) {
              resolvePromise = resolve, rejectPromise = reject;
            }), readIntoRequest = {
              _chunkSteps: function(chunk) {
                return resolvePromise({ value: chunk, done: !1 });
              },
              _closeSteps: function(chunk) {
                return resolvePromise({ value: chunk, done: !0 });
              },
              _errorSteps: function(e24) {
                return rejectPromise(e24);
              }
            };
            return ReadableStreamBYOBReaderRead(this, view, readIntoRequest), promise;
          }, ReadableStreamBYOBReader2.prototype.releaseLock = function() {
            if (!IsReadableStreamBYOBReader(this))
              throw byobReaderBrandCheckException("releaseLock");
            if (this._ownerReadableStream !== void 0) {
              if (this._readIntoRequests.length > 0)
                throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
              ReadableStreamReaderGenericRelease(this);
            }
          }, ReadableStreamBYOBReader2;
        }()
      );
      Object.defineProperties(ReadableStreamBYOBReader.prototype, {
        cancel: { enumerable: !0 },
        read: { enumerable: !0 },
        releaseLock: { enumerable: !0 },
        closed: { enumerable: !0 }
      }), typeof SymbolPolyfill.toStringTag == "symbol" && Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStreamBYOBReader",
        configurable: !0
      });
      function IsReadableStreamBYOBReader(x) {
        return !typeIsObject(x) || !Object.prototype.hasOwnProperty.call(x, "_readIntoRequests") ? !1 : x instanceof ReadableStreamBYOBReader;
      }
      function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {
        var stream = reader._ownerReadableStream;
        stream._disturbed = !0, stream._state === "errored" ? readIntoRequest._errorSteps(stream._storedError) : ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);
      }
      function byobReaderBrandCheckException(name) {
        return new TypeError("ReadableStreamBYOBReader.prototype." + name + " can only be used on a ReadableStreamBYOBReader");
      }
      function ExtractHighWaterMark(strategy, defaultHWM) {
        var highWaterMark = strategy.highWaterMark;
        if (highWaterMark === void 0)
          return defaultHWM;
        if (NumberIsNaN(highWaterMark) || highWaterMark < 0)
          throw new RangeError("Invalid highWaterMark");
        return highWaterMark;
      }
      function ExtractSizeAlgorithm(strategy) {
        var size2 = strategy.size;
        return size2 || function() {
          return 1;
        };
      }
      function convertQueuingStrategy(init, context) {
        assertDictionary(init, context);
        var highWaterMark = init == null ? void 0 : init.highWaterMark, size2 = init == null ? void 0 : init.size;
        return {
          highWaterMark: highWaterMark === void 0 ? void 0 : convertUnrestrictedDouble(highWaterMark),
          size: size2 === void 0 ? void 0 : convertQueuingStrategySize(size2, context + " has member 'size' that")
        };
      }
      function convertQueuingStrategySize(fn, context) {
        return assertFunction(fn, context), function(chunk) {
          return convertUnrestrictedDouble(fn(chunk));
        };
      }
      function convertUnderlyingSink(original, context) {
        assertDictionary(original, context);
        var abort = original == null ? void 0 : original.abort, close = original == null ? void 0 : original.close, start = original == null ? void 0 : original.start, type2 = original == null ? void 0 : original.type, write = original == null ? void 0 : original.write;
        return {
          abort: abort === void 0 ? void 0 : convertUnderlyingSinkAbortCallback(abort, original, context + " has member 'abort' that"),
          close: close === void 0 ? void 0 : convertUnderlyingSinkCloseCallback(close, original, context + " has member 'close' that"),
          start: start === void 0 ? void 0 : convertUnderlyingSinkStartCallback(start, original, context + " has member 'start' that"),
          write: write === void 0 ? void 0 : convertUnderlyingSinkWriteCallback(write, original, context + " has member 'write' that"),
          type: type2
        };
      }
      function convertUnderlyingSinkAbortCallback(fn, original, context) {
        return assertFunction(fn, context), function(reason) {
          return promiseCall(fn, original, [reason]);
        };
      }
      function convertUnderlyingSinkCloseCallback(fn, original, context) {
        return assertFunction(fn, context), function() {
          return promiseCall(fn, original, []);
        };
      }
      function convertUnderlyingSinkStartCallback(fn, original, context) {
        return assertFunction(fn, context), function(controller) {
          return reflectCall(fn, original, [controller]);
        };
      }
      function convertUnderlyingSinkWriteCallback(fn, original, context) {
        return assertFunction(fn, context), function(chunk, controller) {
          return promiseCall(fn, original, [chunk, controller]);
        };
      }
      function assertWritableStream(x, context) {
        if (!IsWritableStream(x))
          throw new TypeError(context + " is not a WritableStream.");
      }
      function isAbortSignal(value) {
        if (typeof value != "object" || value === null)
          return !1;
        try {
          return typeof value.aborted == "boolean";
        } catch {
          return !1;
        }
      }
      var supportsAbortController = typeof AbortController == "function";
      function createAbortController() {
        if (supportsAbortController)
          return new AbortController();
      }
      var WritableStream = (
        /** @class */
        function() {
          function WritableStream2(rawUnderlyingSink, rawStrategy) {
            rawUnderlyingSink === void 0 && (rawUnderlyingSink = {}), rawStrategy === void 0 && (rawStrategy = {}), rawUnderlyingSink === void 0 ? rawUnderlyingSink = null : assertObject(rawUnderlyingSink, "First parameter");
            var strategy = convertQueuingStrategy(rawStrategy, "Second parameter"), underlyingSink = convertUnderlyingSink(rawUnderlyingSink, "First parameter");
            InitializeWritableStream(this);
            var type2 = underlyingSink.type;
            if (type2 !== void 0)
              throw new RangeError("Invalid type is specified");
            var sizeAlgorithm = ExtractSizeAlgorithm(strategy), highWaterMark = ExtractHighWaterMark(strategy, 1);
            SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);
          }
          return Object.defineProperty(WritableStream2.prototype, "locked", {
            /**
             * Returns whether or not the writable stream is locked to a writer.
             */
            get: function() {
              if (!IsWritableStream(this))
                throw streamBrandCheckException$2("locked");
              return IsWritableStreamLocked(this);
            },
            enumerable: !1,
            configurable: !0
          }), WritableStream2.prototype.abort = function(reason) {
            return reason === void 0 && (reason = void 0), IsWritableStream(this) ? IsWritableStreamLocked(this) ? promiseRejectedWith(new TypeError("Cannot abort a stream that already has a writer")) : WritableStreamAbort(this, reason) : promiseRejectedWith(streamBrandCheckException$2("abort"));
          }, WritableStream2.prototype.close = function() {
            return IsWritableStream(this) ? IsWritableStreamLocked(this) ? promiseRejectedWith(new TypeError("Cannot close a stream that already has a writer")) : WritableStreamCloseQueuedOrInFlight(this) ? promiseRejectedWith(new TypeError("Cannot close an already-closing stream")) : WritableStreamClose(this) : promiseRejectedWith(streamBrandCheckException$2("close"));
          }, WritableStream2.prototype.getWriter = function() {
            if (!IsWritableStream(this))
              throw streamBrandCheckException$2("getWriter");
            return AcquireWritableStreamDefaultWriter(this);
          }, WritableStream2;
        }()
      );
      Object.defineProperties(WritableStream.prototype, {
        abort: { enumerable: !0 },
        close: { enumerable: !0 },
        getWriter: { enumerable: !0 },
        locked: { enumerable: !0 }
      }), typeof SymbolPolyfill.toStringTag == "symbol" && Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {
        value: "WritableStream",
        configurable: !0
      });
      function AcquireWritableStreamDefaultWriter(stream) {
        return new WritableStreamDefaultWriter(stream);
      }
      function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
        highWaterMark === void 0 && (highWaterMark = 1), sizeAlgorithm === void 0 && (sizeAlgorithm = function() {
          return 1;
        });
        var stream = Object.create(WritableStream.prototype);
        InitializeWritableStream(stream);
        var controller = Object.create(WritableStreamDefaultController.prototype);
        return SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm), stream;
      }
      function InitializeWritableStream(stream) {
        stream._state = "writable", stream._storedError = void 0, stream._writer = void 0, stream._writableStreamController = void 0, stream._writeRequests = new SimpleQueue(), stream._inFlightWriteRequest = void 0, stream._closeRequest = void 0, stream._inFlightCloseRequest = void 0, stream._pendingAbortRequest = void 0, stream._backpressure = !1;
      }
      function IsWritableStream(x) {
        return !typeIsObject(x) || !Object.prototype.hasOwnProperty.call(x, "_writableStreamController") ? !1 : x instanceof WritableStream;
      }
      function IsWritableStreamLocked(stream) {
        return stream._writer !== void 0;
      }
      function WritableStreamAbort(stream, reason) {
        var _a2;
        if (stream._state === "closed" || stream._state === "errored")
          return promiseResolvedWith(void 0);
        stream._writableStreamController._abortReason = reason, (_a2 = stream._writableStreamController._abortController) === null || _a2 === void 0 || _a2.abort();
        var state = stream._state;
        if (state === "closed" || state === "errored")
          return promiseResolvedWith(void 0);
        if (stream._pendingAbortRequest !== void 0)
          return stream._pendingAbortRequest._promise;
        var wasAlreadyErroring = !1;
        state === "erroring" && (wasAlreadyErroring = !0, reason = void 0);
        var promise = newPromise(function(resolve, reject) {
          stream._pendingAbortRequest = {
            _promise: void 0,
            _resolve: resolve,
            _reject: reject,
            _reason: reason,
            _wasAlreadyErroring: wasAlreadyErroring
          };
        });
        return stream._pendingAbortRequest._promise = promise, wasAlreadyErroring || WritableStreamStartErroring(stream, reason), promise;
      }
      function WritableStreamClose(stream) {
        var state = stream._state;
        if (state === "closed" || state === "errored")
          return promiseRejectedWith(new TypeError("The stream (in " + state + " state) is not in the writable state and cannot be closed"));
        var promise = newPromise(function(resolve, reject) {
          var closeRequest = {
            _resolve: resolve,
            _reject: reject
          };
          stream._closeRequest = closeRequest;
        }), writer = stream._writer;
        return writer !== void 0 && stream._backpressure && state === "writable" && defaultWriterReadyPromiseResolve(writer), WritableStreamDefaultControllerClose(stream._writableStreamController), promise;
      }
      function WritableStreamAddWriteRequest(stream) {
        var promise = newPromise(function(resolve, reject) {
          var writeRequest = {
            _resolve: resolve,
            _reject: reject
          };
          stream._writeRequests.push(writeRequest);
        });
        return promise;
      }
      function WritableStreamDealWithRejection(stream, error2) {
        var state = stream._state;
        if (state === "writable") {
          WritableStreamStartErroring(stream, error2);
          return;
        }
        WritableStreamFinishErroring(stream);
      }
      function WritableStreamStartErroring(stream, reason) {
        var controller = stream._writableStreamController;
        stream._state = "erroring", stream._storedError = reason;
        var writer = stream._writer;
        writer !== void 0 && WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason), !WritableStreamHasOperationMarkedInFlight(stream) && controller._started && WritableStreamFinishErroring(stream);
      }
      function WritableStreamFinishErroring(stream) {
        stream._state = "errored", stream._writableStreamController[ErrorSteps]();
        var storedError = stream._storedError;
        if (stream._writeRequests.forEach(function(writeRequest) {
          writeRequest._reject(storedError);
        }), stream._writeRequests = new SimpleQueue(), stream._pendingAbortRequest === void 0) {
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          return;
        }
        var abortRequest = stream._pendingAbortRequest;
        if (stream._pendingAbortRequest = void 0, abortRequest._wasAlreadyErroring) {
          abortRequest._reject(storedError), WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          return;
        }
        var promise = stream._writableStreamController[AbortSteps](abortRequest._reason);
        uponPromise(promise, function() {
          abortRequest._resolve(), WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
        }, function(reason) {
          abortRequest._reject(reason), WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
        });
      }
      function WritableStreamFinishInFlightWrite(stream) {
        stream._inFlightWriteRequest._resolve(void 0), stream._inFlightWriteRequest = void 0;
      }
      function WritableStreamFinishInFlightWriteWithError(stream, error2) {
        stream._inFlightWriteRequest._reject(error2), stream._inFlightWriteRequest = void 0, WritableStreamDealWithRejection(stream, error2);
      }
      function WritableStreamFinishInFlightClose(stream) {
        stream._inFlightCloseRequest._resolve(void 0), stream._inFlightCloseRequest = void 0;
        var state = stream._state;
        state === "erroring" && (stream._storedError = void 0, stream._pendingAbortRequest !== void 0 && (stream._pendingAbortRequest._resolve(), stream._pendingAbortRequest = void 0)), stream._state = "closed";
        var writer = stream._writer;
        writer !== void 0 && defaultWriterClosedPromiseResolve(writer);
      }
      function WritableStreamFinishInFlightCloseWithError(stream, error2) {
        stream._inFlightCloseRequest._reject(error2), stream._inFlightCloseRequest = void 0, stream._pendingAbortRequest !== void 0 && (stream._pendingAbortRequest._reject(error2), stream._pendingAbortRequest = void 0), WritableStreamDealWithRejection(stream, error2);
      }
      function WritableStreamCloseQueuedOrInFlight(stream) {
        return !(stream._closeRequest === void 0 && stream._inFlightCloseRequest === void 0);
      }
      function WritableStreamHasOperationMarkedInFlight(stream) {
        return !(stream._inFlightWriteRequest === void 0 && stream._inFlightCloseRequest === void 0);
      }
      function WritableStreamMarkCloseRequestInFlight(stream) {
        stream._inFlightCloseRequest = stream._closeRequest, stream._closeRequest = void 0;
      }
      function WritableStreamMarkFirstWriteRequestInFlight(stream) {
        stream._inFlightWriteRequest = stream._writeRequests.shift();
      }
      function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
        stream._closeRequest !== void 0 && (stream._closeRequest._reject(stream._storedError), stream._closeRequest = void 0);
        var writer = stream._writer;
        writer !== void 0 && defaultWriterClosedPromiseReject(writer, stream._storedError);
      }
      function WritableStreamUpdateBackpressure(stream, backpressure) {
        var writer = stream._writer;
        writer !== void 0 && backpressure !== stream._backpressure && (backpressure ? defaultWriterReadyPromiseReset(writer) : defaultWriterReadyPromiseResolve(writer)), stream._backpressure = backpressure;
      }
      var WritableStreamDefaultWriter = (
        /** @class */
        function() {
          function WritableStreamDefaultWriter2(stream) {
            if (assertRequiredArgument(stream, 1, "WritableStreamDefaultWriter"), assertWritableStream(stream, "First parameter"), IsWritableStreamLocked(stream))
              throw new TypeError("This stream has already been locked for exclusive writing by another writer");
            this._ownerWritableStream = stream, stream._writer = this;
            var state = stream._state;
            if (state === "writable")
              !WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure ? defaultWriterReadyPromiseInitialize(this) : defaultWriterReadyPromiseInitializeAsResolved(this), defaultWriterClosedPromiseInitialize(this);
            else if (state === "erroring")
              defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError), defaultWriterClosedPromiseInitialize(this);
            else if (state === "closed")
              defaultWriterReadyPromiseInitializeAsResolved(this), defaultWriterClosedPromiseInitializeAsResolved(this);
            else {
              var storedError = stream._storedError;
              defaultWriterReadyPromiseInitializeAsRejected(this, storedError), defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
            }
          }
          return Object.defineProperty(WritableStreamDefaultWriter2.prototype, "closed", {
            /**
             * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
             * the writer’s lock is released before the stream finishes closing.
             */
            get: function() {
              return IsWritableStreamDefaultWriter(this) ? this._closedPromise : promiseRejectedWith(defaultWriterBrandCheckException("closed"));
            },
            enumerable: !1,
            configurable: !0
          }), Object.defineProperty(WritableStreamDefaultWriter2.prototype, "desiredSize", {
            /**
             * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.
             * A producer can use this information to determine the right amount of data to write.
             *
             * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort
             * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when
             * the writer’s lock is released.
             */
            get: function() {
              if (!IsWritableStreamDefaultWriter(this))
                throw defaultWriterBrandCheckException("desiredSize");
              if (this._ownerWritableStream === void 0)
                throw defaultWriterLockException("desiredSize");
              return WritableStreamDefaultWriterGetDesiredSize(this);
            },
            enumerable: !1,
            configurable: !0
          }), Object.defineProperty(WritableStreamDefaultWriter2.prototype, "ready", {
            /**
             * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions
             * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips
             * back to zero or below, the getter will return a new promise that stays pending until the next transition.
             *
             * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become
             * rejected.
             */
            get: function() {
              return IsWritableStreamDefaultWriter(this) ? this._readyPromise : promiseRejectedWith(defaultWriterBrandCheckException("ready"));
            },
            enumerable: !1,
            configurable: !0
          }), WritableStreamDefaultWriter2.prototype.abort = function(reason) {
            return reason === void 0 && (reason = void 0), IsWritableStreamDefaultWriter(this) ? this._ownerWritableStream === void 0 ? promiseRejectedWith(defaultWriterLockException("abort")) : WritableStreamDefaultWriterAbort(this, reason) : promiseRejectedWith(defaultWriterBrandCheckException("abort"));
          }, WritableStreamDefaultWriter2.prototype.close = function() {
            if (!IsWritableStreamDefaultWriter(this))
              return promiseRejectedWith(defaultWriterBrandCheckException("close"));
            var stream = this._ownerWritableStream;
            return stream === void 0 ? promiseRejectedWith(defaultWriterLockException("close")) : WritableStreamCloseQueuedOrInFlight(stream) ? promiseRejectedWith(new TypeError("Cannot close an already-closing stream")) : WritableStreamDefaultWriterClose(this);
          }, WritableStreamDefaultWriter2.prototype.releaseLock = function() {
            if (!IsWritableStreamDefaultWriter(this))
              throw defaultWriterBrandCheckException("releaseLock");
            var stream = this._ownerWritableStream;
            stream !== void 0 && WritableStreamDefaultWriterRelease(this);
          }, WritableStreamDefaultWriter2.prototype.write = function(chunk) {
            return chunk === void 0 && (chunk = void 0), IsWritableStreamDefaultWriter(this) ? this._ownerWritableStream === void 0 ? promiseRejectedWith(defaultWriterLockException("write to")) : WritableStreamDefaultWriterWrite(this, chunk) : promiseRejectedWith(defaultWriterBrandCheckException("write"));
          }, WritableStreamDefaultWriter2;
        }()
      );
      Object.defineProperties(WritableStreamDefaultWriter.prototype, {
        abort: { enumerable: !0 },
        close: { enumerable: !0 },
        releaseLock: { enumerable: !0 },
        write: { enumerable: !0 },
        closed: { enumerable: !0 },
        desiredSize: { enumerable: !0 },
        ready: { enumerable: !0 }
      }), typeof SymbolPolyfill.toStringTag == "symbol" && Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {
        value: "WritableStreamDefaultWriter",
        configurable: !0
      });
      function IsWritableStreamDefaultWriter(x) {
        return !typeIsObject(x) || !Object.prototype.hasOwnProperty.call(x, "_ownerWritableStream") ? !1 : x instanceof WritableStreamDefaultWriter;
      }
      function WritableStreamDefaultWriterAbort(writer, reason) {
        var stream = writer._ownerWritableStream;
        return WritableStreamAbort(stream, reason);
      }
      function WritableStreamDefaultWriterClose(writer) {
        var stream = writer._ownerWritableStream;
        return WritableStreamClose(stream);
      }
      function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
        var stream = writer._ownerWritableStream, state = stream._state;
        return WritableStreamCloseQueuedOrInFlight(stream) || state === "closed" ? promiseResolvedWith(void 0) : state === "errored" ? promiseRejectedWith(stream._storedError) : WritableStreamDefaultWriterClose(writer);
      }
      function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error2) {
        writer._closedPromiseState === "pending" ? defaultWriterClosedPromiseReject(writer, error2) : defaultWriterClosedPromiseResetToRejected(writer, error2);
      }
      function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error2) {
        writer._readyPromiseState === "pending" ? defaultWriterReadyPromiseReject(writer, error2) : defaultWriterReadyPromiseResetToRejected(writer, error2);
      }
      function WritableStreamDefaultWriterGetDesiredSize(writer) {
        var stream = writer._ownerWritableStream, state = stream._state;
        return state === "errored" || state === "erroring" ? null : state === "closed" ? 0 : WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);
      }
      function WritableStreamDefaultWriterRelease(writer) {
        var stream = writer._ownerWritableStream, releasedError = new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");
        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError), WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError), stream._writer = void 0, writer._ownerWritableStream = void 0;
      }
      function WritableStreamDefaultWriterWrite(writer, chunk) {
        var stream = writer._ownerWritableStream, controller = stream._writableStreamController, chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
        if (stream !== writer._ownerWritableStream)
          return promiseRejectedWith(defaultWriterLockException("write to"));
        var state = stream._state;
        if (state === "errored")
          return promiseRejectedWith(stream._storedError);
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed")
          return promiseRejectedWith(new TypeError("The stream is closing or closed and cannot be written to"));
        if (state === "erroring")
          return promiseRejectedWith(stream._storedError);
        var promise = WritableStreamAddWriteRequest(stream);
        return WritableStreamDefaultControllerWrite(controller, chunk, chunkSize), promise;
      }
      var closeSentinel = {}, WritableStreamDefaultController = (
        /** @class */
        function() {
          function WritableStreamDefaultController2() {
            throw new TypeError("Illegal constructor");
          }
          return Object.defineProperty(WritableStreamDefaultController2.prototype, "abortReason", {
            /**
             * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.
             *
             * @deprecated
             *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.
             *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.
             */
            get: function() {
              if (!IsWritableStreamDefaultController(this))
                throw defaultControllerBrandCheckException$2("abortReason");
              return this._abortReason;
            },
            enumerable: !1,
            configurable: !0
          }), Object.defineProperty(WritableStreamDefaultController2.prototype, "signal", {
            /**
             * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.
             */
            get: function() {
              if (!IsWritableStreamDefaultController(this))
                throw defaultControllerBrandCheckException$2("signal");
              if (this._abortController === void 0)
                throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
              return this._abortController.signal;
            },
            enumerable: !1,
            configurable: !0
          }), WritableStreamDefaultController2.prototype.error = function(e24) {
            if (e24 === void 0 && (e24 = void 0), !IsWritableStreamDefaultController(this))
              throw defaultControllerBrandCheckException$2("error");
            var state = this._controlledWritableStream._state;
            state === "writable" && WritableStreamDefaultControllerError(this, e24);
          }, WritableStreamDefaultController2.prototype[AbortSteps] = function(reason) {
            var result = this._abortAlgorithm(reason);
            return WritableStreamDefaultControllerClearAlgorithms(this), result;
          }, WritableStreamDefaultController2.prototype[ErrorSteps] = function() {
            ResetQueue(this);
          }, WritableStreamDefaultController2;
        }()
      );
      Object.defineProperties(WritableStreamDefaultController.prototype, {
        abortReason: { enumerable: !0 },
        signal: { enumerable: !0 },
        error: { enumerable: !0 }
      }), typeof SymbolPolyfill.toStringTag == "symbol" && Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
        value: "WritableStreamDefaultController",
        configurable: !0
      });
      function IsWritableStreamDefaultController(x) {
        return !typeIsObject(x) || !Object.prototype.hasOwnProperty.call(x, "_controlledWritableStream") ? !1 : x instanceof WritableStreamDefaultController;
      }
      function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
        controller._controlledWritableStream = stream, stream._writableStreamController = controller, controller._queue = void 0, controller._queueTotalSize = void 0, ResetQueue(controller), controller._abortReason = void 0, controller._abortController = createAbortController(), controller._started = !1, controller._strategySizeAlgorithm = sizeAlgorithm, controller._strategyHWM = highWaterMark, controller._writeAlgorithm = writeAlgorithm, controller._closeAlgorithm = closeAlgorithm, controller._abortAlgorithm = abortAlgorithm;
        var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
        WritableStreamUpdateBackpressure(stream, backpressure);
        var startResult = startAlgorithm(), startPromise = promiseResolvedWith(startResult);
        uponPromise(startPromise, function() {
          controller._started = !0, WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
        }, function(r25) {
          controller._started = !0, WritableStreamDealWithRejection(stream, r25);
        });
      }
      function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {
        var controller = Object.create(WritableStreamDefaultController.prototype), startAlgorithm = function() {
        }, writeAlgorithm = function() {
          return promiseResolvedWith(void 0);
        }, closeAlgorithm = function() {
          return promiseResolvedWith(void 0);
        }, abortAlgorithm = function() {
          return promiseResolvedWith(void 0);
        };
        underlyingSink.start !== void 0 && (startAlgorithm = function() {
          return underlyingSink.start(controller);
        }), underlyingSink.write !== void 0 && (writeAlgorithm = function(chunk) {
          return underlyingSink.write(chunk, controller);
        }), underlyingSink.close !== void 0 && (closeAlgorithm = function() {
          return underlyingSink.close();
        }), underlyingSink.abort !== void 0 && (abortAlgorithm = function(reason) {
          return underlyingSink.abort(reason);
        }), SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
      }
      function WritableStreamDefaultControllerClearAlgorithms(controller) {
        controller._writeAlgorithm = void 0, controller._closeAlgorithm = void 0, controller._abortAlgorithm = void 0, controller._strategySizeAlgorithm = void 0;
      }
      function WritableStreamDefaultControllerClose(controller) {
        EnqueueValueWithSize(controller, closeSentinel, 0), WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
      }
      function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
        try {
          return controller._strategySizeAlgorithm(chunk);
        } catch (chunkSizeE) {
          return WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE), 1;
        }
      }
      function WritableStreamDefaultControllerGetDesiredSize(controller) {
        return controller._strategyHWM - controller._queueTotalSize;
      }
      function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
        try {
          EnqueueValueWithSize(controller, chunk, chunkSize);
        } catch (enqueueE) {
          WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
          return;
        }
        var stream = controller._controlledWritableStream;
        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === "writable") {
          var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
          WritableStreamUpdateBackpressure(stream, backpressure);
        }
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
      }
      function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
        var stream = controller._controlledWritableStream;
        if (controller._started && stream._inFlightWriteRequest === void 0) {
          var state = stream._state;
          if (state === "erroring") {
            WritableStreamFinishErroring(stream);
            return;
          }
          if (controller._queue.length !== 0) {
            var value = PeekQueueValue(controller);
            value === closeSentinel ? WritableStreamDefaultControllerProcessClose(controller) : WritableStreamDefaultControllerProcessWrite(controller, value);
          }
        }
      }
      function WritableStreamDefaultControllerErrorIfNeeded(controller, error2) {
        controller._controlledWritableStream._state === "writable" && WritableStreamDefaultControllerError(controller, error2);
      }
      function WritableStreamDefaultControllerProcessClose(controller) {
        var stream = controller._controlledWritableStream;
        WritableStreamMarkCloseRequestInFlight(stream), DequeueValue(controller);
        var sinkClosePromise = controller._closeAlgorithm();
        WritableStreamDefaultControllerClearAlgorithms(controller), uponPromise(sinkClosePromise, function() {
          WritableStreamFinishInFlightClose(stream);
        }, function(reason) {
          WritableStreamFinishInFlightCloseWithError(stream, reason);
        });
      }
      function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
        var stream = controller._controlledWritableStream;
        WritableStreamMarkFirstWriteRequestInFlight(stream);
        var sinkWritePromise = controller._writeAlgorithm(chunk);
        uponPromise(sinkWritePromise, function() {
          WritableStreamFinishInFlightWrite(stream);
          var state = stream._state;
          if (DequeueValue(controller), !WritableStreamCloseQueuedOrInFlight(stream) && state === "writable") {
            var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
            WritableStreamUpdateBackpressure(stream, backpressure);
          }
          WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
        }, function(reason) {
          stream._state === "writable" && WritableStreamDefaultControllerClearAlgorithms(controller), WritableStreamFinishInFlightWriteWithError(stream, reason);
        });
      }
      function WritableStreamDefaultControllerGetBackpressure(controller) {
        var desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
        return desiredSize <= 0;
      }
      function WritableStreamDefaultControllerError(controller, error2) {
        var stream = controller._controlledWritableStream;
        WritableStreamDefaultControllerClearAlgorithms(controller), WritableStreamStartErroring(stream, error2);
      }
      function streamBrandCheckException$2(name) {
        return new TypeError("WritableStream.prototype." + name + " can only be used on a WritableStream");
      }
      function defaultControllerBrandCheckException$2(name) {
        return new TypeError("WritableStreamDefaultController.prototype." + name + " can only be used on a WritableStreamDefaultController");
      }
      function defaultWriterBrandCheckException(name) {
        return new TypeError("WritableStreamDefaultWriter.prototype." + name + " can only be used on a WritableStreamDefaultWriter");
      }
      function defaultWriterLockException(name) {
        return new TypeError("Cannot " + name + " a stream using a released writer");
      }
      function defaultWriterClosedPromiseInitialize(writer) {
        writer._closedPromise = newPromise(function(resolve, reject) {
          writer._closedPromise_resolve = resolve, writer._closedPromise_reject = reject, writer._closedPromiseState = "pending";
        });
      }
      function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
        defaultWriterClosedPromiseInitialize(writer), defaultWriterClosedPromiseReject(writer, reason);
      }
      function defaultWriterClosedPromiseInitializeAsResolved(writer) {
        defaultWriterClosedPromiseInitialize(writer), defaultWriterClosedPromiseResolve(writer);
      }
      function defaultWriterClosedPromiseReject(writer, reason) {
        writer._closedPromise_reject !== void 0 && (setPromiseIsHandledToTrue(writer._closedPromise), writer._closedPromise_reject(reason), writer._closedPromise_resolve = void 0, writer._closedPromise_reject = void 0, writer._closedPromiseState = "rejected");
      }
      function defaultWriterClosedPromiseResetToRejected(writer, reason) {
        defaultWriterClosedPromiseInitializeAsRejected(writer, reason);
      }
      function defaultWriterClosedPromiseResolve(writer) {
        writer._closedPromise_resolve !== void 0 && (writer._closedPromise_resolve(void 0), writer._closedPromise_resolve = void 0, writer._closedPromise_reject = void 0, writer._closedPromiseState = "resolved");
      }
      function defaultWriterReadyPromiseInitialize(writer) {
        writer._readyPromise = newPromise(function(resolve, reject) {
          writer._readyPromise_resolve = resolve, writer._readyPromise_reject = reject;
        }), writer._readyPromiseState = "pending";
      }
      function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
        defaultWriterReadyPromiseInitialize(writer), defaultWriterReadyPromiseReject(writer, reason);
      }
      function defaultWriterReadyPromiseInitializeAsResolved(writer) {
        defaultWriterReadyPromiseInitialize(writer), defaultWriterReadyPromiseResolve(writer);
      }
      function defaultWriterReadyPromiseReject(writer, reason) {
        writer._readyPromise_reject !== void 0 && (setPromiseIsHandledToTrue(writer._readyPromise), writer._readyPromise_reject(reason), writer._readyPromise_resolve = void 0, writer._readyPromise_reject = void 0, writer._readyPromiseState = "rejected");
      }
      function defaultWriterReadyPromiseReset(writer) {
        defaultWriterReadyPromiseInitialize(writer);
      }
      function defaultWriterReadyPromiseResetToRejected(writer, reason) {
        defaultWriterReadyPromiseInitializeAsRejected(writer, reason);
      }
      function defaultWriterReadyPromiseResolve(writer) {
        writer._readyPromise_resolve !== void 0 && (writer._readyPromise_resolve(void 0), writer._readyPromise_resolve = void 0, writer._readyPromise_reject = void 0, writer._readyPromiseState = "fulfilled");
      }
      var NativeDOMException = typeof DOMException < "u" ? DOMException : void 0;
      function isDOMExceptionConstructor(ctor) {
        if (!(typeof ctor == "function" || typeof ctor == "object"))
          return !1;
        try {
          return new ctor(), !0;
        } catch {
          return !1;
        }
      }
      function createDOMExceptionPolyfill() {
        var ctor = function(message2, name) {
          this.message = message2 || "", this.name = name || "Error", Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
        };
        return ctor.prototype = Object.create(Error.prototype), Object.defineProperty(ctor.prototype, "constructor", { value: ctor, writable: !0, configurable: !0 }), ctor;
      }
      var DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();
      function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {
        var reader = AcquireReadableStreamDefaultReader(source), writer = AcquireWritableStreamDefaultWriter(dest);
        source._disturbed = !0;
        var shuttingDown = !1, currentWrite = promiseResolvedWith(void 0);
        return newPromise(function(resolve, reject) {
          var abortAlgorithm;
          if (signal !== void 0) {
            if (abortAlgorithm = function() {
              var error2 = new DOMException$1("Aborted", "AbortError"), actions = [];
              preventAbort || actions.push(function() {
                return dest._state === "writable" ? WritableStreamAbort(dest, error2) : promiseResolvedWith(void 0);
              }), preventCancel || actions.push(function() {
                return source._state === "readable" ? ReadableStreamCancel(source, error2) : promiseResolvedWith(void 0);
              }), shutdownWithAction(function() {
                return Promise.all(actions.map(function(action) {
                  return action();
                }));
              }, !0, error2);
            }, signal.aborted) {
              abortAlgorithm();
              return;
            }
            signal.addEventListener("abort", abortAlgorithm);
          }
          function pipeLoop() {
            return newPromise(function(resolveLoop, rejectLoop) {
              function next(done) {
                done ? resolveLoop() : PerformPromiseThen(pipeStep(), next, rejectLoop);
              }
              next(!1);
            });
          }
          function pipeStep() {
            return shuttingDown ? promiseResolvedWith(!0) : PerformPromiseThen(writer._readyPromise, function() {
              return newPromise(function(resolveRead, rejectRead) {
                ReadableStreamDefaultReaderRead(reader, {
                  _chunkSteps: function(chunk) {
                    currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), void 0, noop2), resolveRead(!1);
                  },
                  _closeSteps: function() {
                    return resolveRead(!0);
                  },
                  _errorSteps: rejectRead
                });
              });
            });
          }
          if (isOrBecomesErrored(source, reader._closedPromise, function(storedError) {
            preventAbort ? shutdown(!0, storedError) : shutdownWithAction(function() {
              return WritableStreamAbort(dest, storedError);
            }, !0, storedError);
          }), isOrBecomesErrored(dest, writer._closedPromise, function(storedError) {
            preventCancel ? shutdown(!0, storedError) : shutdownWithAction(function() {
              return ReadableStreamCancel(source, storedError);
            }, !0, storedError);
          }), isOrBecomesClosed(source, reader._closedPromise, function() {
            preventClose ? shutdown() : shutdownWithAction(function() {
              return WritableStreamDefaultWriterCloseWithErrorPropagation(writer);
            });
          }), WritableStreamCloseQueuedOrInFlight(dest) || dest._state === "closed") {
            var destClosed_1 = new TypeError("the destination writable stream closed before all data could be piped to it");
            preventCancel ? shutdown(!0, destClosed_1) : shutdownWithAction(function() {
              return ReadableStreamCancel(source, destClosed_1);
            }, !0, destClosed_1);
          }
          setPromiseIsHandledToTrue(pipeLoop());
          function waitForWritesToFinish() {
            var oldCurrentWrite = currentWrite;
            return PerformPromiseThen(currentWrite, function() {
              return oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : void 0;
            });
          }
          function isOrBecomesErrored(stream, promise, action) {
            stream._state === "errored" ? action(stream._storedError) : uponRejection(promise, action);
          }
          function isOrBecomesClosed(stream, promise, action) {
            stream._state === "closed" ? action() : uponFulfillment(promise, action);
          }
          function shutdownWithAction(action, originalIsError, originalError) {
            if (shuttingDown)
              return;
            shuttingDown = !0, dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest) ? uponFulfillment(waitForWritesToFinish(), doTheRest) : doTheRest();
            function doTheRest() {
              uponPromise(action(), function() {
                return finalize(originalIsError, originalError);
              }, function(newError) {
                return finalize(!0, newError);
              });
            }
          }
          function shutdown(isError, error2) {
            shuttingDown || (shuttingDown = !0, dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest) ? uponFulfillment(waitForWritesToFinish(), function() {
              return finalize(isError, error2);
            }) : finalize(isError, error2));
          }
          function finalize(isError, error2) {
            WritableStreamDefaultWriterRelease(writer), ReadableStreamReaderGenericRelease(reader), signal !== void 0 && signal.removeEventListener("abort", abortAlgorithm), isError ? reject(error2) : resolve(void 0);
          }
        });
      }
      var ReadableStreamDefaultController = (
        /** @class */
        function() {
          function ReadableStreamDefaultController2() {
            throw new TypeError("Illegal constructor");
          }
          return Object.defineProperty(ReadableStreamDefaultController2.prototype, "desiredSize", {
            /**
             * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
             * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.
             */
            get: function() {
              if (!IsReadableStreamDefaultController(this))
                throw defaultControllerBrandCheckException$1("desiredSize");
              return ReadableStreamDefaultControllerGetDesiredSize(this);
            },
            enumerable: !1,
            configurable: !0
          }), ReadableStreamDefaultController2.prototype.close = function() {
            if (!IsReadableStreamDefaultController(this))
              throw defaultControllerBrandCheckException$1("close");
            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this))
              throw new TypeError("The stream is not in a state that permits close");
            ReadableStreamDefaultControllerClose(this);
          }, ReadableStreamDefaultController2.prototype.enqueue = function(chunk) {
            if (chunk === void 0 && (chunk = void 0), !IsReadableStreamDefaultController(this))
              throw defaultControllerBrandCheckException$1("enqueue");
            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this))
              throw new TypeError("The stream is not in a state that permits enqueue");
            return ReadableStreamDefaultControllerEnqueue(this, chunk);
          }, ReadableStreamDefaultController2.prototype.error = function(e24) {
            if (e24 === void 0 && (e24 = void 0), !IsReadableStreamDefaultController(this))
              throw defaultControllerBrandCheckException$1("error");
            ReadableStreamDefaultControllerError(this, e24);
          }, ReadableStreamDefaultController2.prototype[CancelSteps] = function(reason) {
            ResetQueue(this);
            var result = this._cancelAlgorithm(reason);
            return ReadableStreamDefaultControllerClearAlgorithms(this), result;
          }, ReadableStreamDefaultController2.prototype[PullSteps] = function(readRequest) {
            var stream = this._controlledReadableStream;
            if (this._queue.length > 0) {
              var chunk = DequeueValue(this);
              this._closeRequested && this._queue.length === 0 ? (ReadableStreamDefaultControllerClearAlgorithms(this), ReadableStreamClose(stream)) : ReadableStreamDefaultControllerCallPullIfNeeded(this), readRequest._chunkSteps(chunk);
            } else
              ReadableStreamAddReadRequest(stream, readRequest), ReadableStreamDefaultControllerCallPullIfNeeded(this);
          }, ReadableStreamDefaultController2;
        }()
      );
      Object.defineProperties(ReadableStreamDefaultController.prototype, {
        close: { enumerable: !0 },
        enqueue: { enumerable: !0 },
        error: { enumerable: !0 },
        desiredSize: { enumerable: !0 }
      }), typeof SymbolPolyfill.toStringTag == "symbol" && Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStreamDefaultController",
        configurable: !0
      });
      function IsReadableStreamDefaultController(x) {
        return !typeIsObject(x) || !Object.prototype.hasOwnProperty.call(x, "_controlledReadableStream") ? !1 : x instanceof ReadableStreamDefaultController;
      }
      function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
        var shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
        if (shouldPull) {
          if (controller._pulling) {
            controller._pullAgain = !0;
            return;
          }
          controller._pulling = !0;
          var pullPromise = controller._pullAlgorithm();
          uponPromise(pullPromise, function() {
            controller._pulling = !1, controller._pullAgain && (controller._pullAgain = !1, ReadableStreamDefaultControllerCallPullIfNeeded(controller));
          }, function(e24) {
            ReadableStreamDefaultControllerError(controller, e24);
          });
        }
      }
      function ReadableStreamDefaultControllerShouldCallPull(controller) {
        var stream = controller._controlledReadableStream;
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) || !controller._started)
          return !1;
        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0)
          return !0;
        var desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
        return desiredSize > 0;
      }
      function ReadableStreamDefaultControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = void 0, controller._cancelAlgorithm = void 0, controller._strategySizeAlgorithm = void 0;
      }
      function ReadableStreamDefaultControllerClose(controller) {
        if (ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
          var stream = controller._controlledReadableStream;
          controller._closeRequested = !0, controller._queue.length === 0 && (ReadableStreamDefaultControllerClearAlgorithms(controller), ReadableStreamClose(stream));
        }
      }
      function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
        if (ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
          var stream = controller._controlledReadableStream;
          if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0)
            ReadableStreamFulfillReadRequest(stream, chunk, !1);
          else {
            var chunkSize = void 0;
            try {
              chunkSize = controller._strategySizeAlgorithm(chunk);
            } catch (chunkSizeE) {
              throw ReadableStreamDefaultControllerError(controller, chunkSizeE), chunkSizeE;
            }
            try {
              EnqueueValueWithSize(controller, chunk, chunkSize);
            } catch (enqueueE) {
              throw ReadableStreamDefaultControllerError(controller, enqueueE), enqueueE;
            }
          }
          ReadableStreamDefaultControllerCallPullIfNeeded(controller);
        }
      }
      function ReadableStreamDefaultControllerError(controller, e24) {
        var stream = controller._controlledReadableStream;
        stream._state === "readable" && (ResetQueue(controller), ReadableStreamDefaultControllerClearAlgorithms(controller), ReadableStreamError(stream, e24));
      }
      function ReadableStreamDefaultControllerGetDesiredSize(controller) {
        var state = controller._controlledReadableStream._state;
        return state === "errored" ? null : state === "closed" ? 0 : controller._strategyHWM - controller._queueTotalSize;
      }
      function ReadableStreamDefaultControllerHasBackpressure(controller) {
        return !ReadableStreamDefaultControllerShouldCallPull(controller);
      }
      function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {
        var state = controller._controlledReadableStream._state;
        return !controller._closeRequested && state === "readable";
      }
      function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
        controller._controlledReadableStream = stream, controller._queue = void 0, controller._queueTotalSize = void 0, ResetQueue(controller), controller._started = !1, controller._closeRequested = !1, controller._pullAgain = !1, controller._pulling = !1, controller._strategySizeAlgorithm = sizeAlgorithm, controller._strategyHWM = highWaterMark, controller._pullAlgorithm = pullAlgorithm, controller._cancelAlgorithm = cancelAlgorithm, stream._readableStreamController = controller;
        var startResult = startAlgorithm();
        uponPromise(promiseResolvedWith(startResult), function() {
          controller._started = !0, ReadableStreamDefaultControllerCallPullIfNeeded(controller);
        }, function(r25) {
          ReadableStreamDefaultControllerError(controller, r25);
        });
      }
      function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {
        var controller = Object.create(ReadableStreamDefaultController.prototype), startAlgorithm = function() {
        }, pullAlgorithm = function() {
          return promiseResolvedWith(void 0);
        }, cancelAlgorithm = function() {
          return promiseResolvedWith(void 0);
        };
        underlyingSource.start !== void 0 && (startAlgorithm = function() {
          return underlyingSource.start(controller);
        }), underlyingSource.pull !== void 0 && (pullAlgorithm = function() {
          return underlyingSource.pull(controller);
        }), underlyingSource.cancel !== void 0 && (cancelAlgorithm = function(reason) {
          return underlyingSource.cancel(reason);
        }), SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
      }
      function defaultControllerBrandCheckException$1(name) {
        return new TypeError("ReadableStreamDefaultController.prototype." + name + " can only be used on a ReadableStreamDefaultController");
      }
      function ReadableStreamTee(stream, cloneForBranch2) {
        return IsReadableByteStreamController(stream._readableStreamController) ? ReadableByteStreamTee(stream) : ReadableStreamDefaultTee(stream);
      }
      function ReadableStreamDefaultTee(stream, cloneForBranch2) {
        var reader = AcquireReadableStreamDefaultReader(stream), reading = !1, readAgain = !1, canceled1 = !1, canceled2 = !1, reason1, reason2, branch1, branch2, resolveCancelPromise, cancelPromise = newPromise(function(resolve) {
          resolveCancelPromise = resolve;
        });
        function pullAlgorithm() {
          if (reading)
            return readAgain = !0, promiseResolvedWith(void 0);
          reading = !0;
          var readRequest = {
            _chunkSteps: function(chunk) {
              queueMicrotask2(function() {
                readAgain = !1;
                var chunk1 = chunk, chunk2 = chunk;
                canceled1 || ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1), canceled2 || ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2), reading = !1, readAgain && pullAlgorithm();
              });
            },
            _closeSteps: function() {
              reading = !1, canceled1 || ReadableStreamDefaultControllerClose(branch1._readableStreamController), canceled2 || ReadableStreamDefaultControllerClose(branch2._readableStreamController), (!canceled1 || !canceled2) && resolveCancelPromise(void 0);
            },
            _errorSteps: function() {
              reading = !1;
            }
          };
          return ReadableStreamDefaultReaderRead(reader, readRequest), promiseResolvedWith(void 0);
        }
        function cancel1Algorithm(reason) {
          if (canceled1 = !0, reason1 = reason, canceled2) {
            var compositeReason = CreateArrayFromList([reason1, reason2]), cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function cancel2Algorithm(reason) {
          if (canceled2 = !0, reason2 = reason, canceled1) {
            var compositeReason = CreateArrayFromList([reason1, reason2]), cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function startAlgorithm() {
        }
        return branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm), branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm), uponRejection(reader._closedPromise, function(r25) {
          ReadableStreamDefaultControllerError(branch1._readableStreamController, r25), ReadableStreamDefaultControllerError(branch2._readableStreamController, r25), (!canceled1 || !canceled2) && resolveCancelPromise(void 0);
        }), [branch1, branch2];
      }
      function ReadableByteStreamTee(stream) {
        var reader = AcquireReadableStreamDefaultReader(stream), reading = !1, readAgainForBranch1 = !1, readAgainForBranch2 = !1, canceled1 = !1, canceled2 = !1, reason1, reason2, branch1, branch2, resolveCancelPromise, cancelPromise = newPromise(function(resolve) {
          resolveCancelPromise = resolve;
        });
        function forwardReaderError(thisReader) {
          uponRejection(thisReader._closedPromise, function(r25) {
            thisReader === reader && (ReadableByteStreamControllerError(branch1._readableStreamController, r25), ReadableByteStreamControllerError(branch2._readableStreamController, r25), (!canceled1 || !canceled2) && resolveCancelPromise(void 0));
          });
        }
        function pullWithDefaultReader() {
          IsReadableStreamBYOBReader(reader) && (ReadableStreamReaderGenericRelease(reader), reader = AcquireReadableStreamDefaultReader(stream), forwardReaderError(reader));
          var readRequest = {
            _chunkSteps: function(chunk) {
              queueMicrotask2(function() {
                readAgainForBranch1 = !1, readAgainForBranch2 = !1;
                var chunk1 = chunk, chunk2 = chunk;
                if (!canceled1 && !canceled2)
                  try {
                    chunk2 = CloneAsUint8Array(chunk);
                  } catch (cloneE) {
                    ReadableByteStreamControllerError(branch1._readableStreamController, cloneE), ReadableByteStreamControllerError(branch2._readableStreamController, cloneE), resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                    return;
                  }
                canceled1 || ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1), canceled2 || ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2), reading = !1, readAgainForBranch1 ? pull1Algorithm() : readAgainForBranch2 && pull2Algorithm();
              });
            },
            _closeSteps: function() {
              reading = !1, canceled1 || ReadableByteStreamControllerClose(branch1._readableStreamController), canceled2 || ReadableByteStreamControllerClose(branch2._readableStreamController), branch1._readableStreamController._pendingPullIntos.length > 0 && ReadableByteStreamControllerRespond(branch1._readableStreamController, 0), branch2._readableStreamController._pendingPullIntos.length > 0 && ReadableByteStreamControllerRespond(branch2._readableStreamController, 0), (!canceled1 || !canceled2) && resolveCancelPromise(void 0);
            },
            _errorSteps: function() {
              reading = !1;
            }
          };
          ReadableStreamDefaultReaderRead(reader, readRequest);
        }
        function pullWithBYOBReader(view, forBranch2) {
          IsReadableStreamDefaultReader(reader) && (ReadableStreamReaderGenericRelease(reader), reader = AcquireReadableStreamBYOBReader(stream), forwardReaderError(reader));
          var byobBranch = forBranch2 ? branch2 : branch1, otherBranch = forBranch2 ? branch1 : branch2, readIntoRequest = {
            _chunkSteps: function(chunk) {
              queueMicrotask2(function() {
                readAgainForBranch1 = !1, readAgainForBranch2 = !1;
                var byobCanceled = forBranch2 ? canceled2 : canceled1, otherCanceled = forBranch2 ? canceled1 : canceled2;
                if (otherCanceled)
                  byobCanceled || ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                else {
                  var clonedChunk = void 0;
                  try {
                    clonedChunk = CloneAsUint8Array(chunk);
                  } catch (cloneE) {
                    ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE), ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE), resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                    return;
                  }
                  byobCanceled || ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk), ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);
                }
                reading = !1, readAgainForBranch1 ? pull1Algorithm() : readAgainForBranch2 && pull2Algorithm();
              });
            },
            _closeSteps: function(chunk) {
              reading = !1;
              var byobCanceled = forBranch2 ? canceled2 : canceled1, otherCanceled = forBranch2 ? canceled1 : canceled2;
              byobCanceled || ReadableByteStreamControllerClose(byobBranch._readableStreamController), otherCanceled || ReadableByteStreamControllerClose(otherBranch._readableStreamController), chunk !== void 0 && (byobCanceled || ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk), !otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0 && ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0)), (!byobCanceled || !otherCanceled) && resolveCancelPromise(void 0);
            },
            _errorSteps: function() {
              reading = !1;
            }
          };
          ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);
        }
        function pull1Algorithm() {
          if (reading)
            return readAgainForBranch1 = !0, promiseResolvedWith(void 0);
          reading = !0;
          var byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);
          return byobRequest === null ? pullWithDefaultReader() : pullWithBYOBReader(byobRequest._view, !1), promiseResolvedWith(void 0);
        }
        function pull2Algorithm() {
          if (reading)
            return readAgainForBranch2 = !0, promiseResolvedWith(void 0);
          reading = !0;
          var byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);
          return byobRequest === null ? pullWithDefaultReader() : pullWithBYOBReader(byobRequest._view, !0), promiseResolvedWith(void 0);
        }
        function cancel1Algorithm(reason) {
          if (canceled1 = !0, reason1 = reason, canceled2) {
            var compositeReason = CreateArrayFromList([reason1, reason2]), cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function cancel2Algorithm(reason) {
          if (canceled2 = !0, reason2 = reason, canceled1) {
            var compositeReason = CreateArrayFromList([reason1, reason2]), cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function startAlgorithm() {
        }
        return branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm), branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm), forwardReaderError(reader), [branch1, branch2];
      }
      function convertUnderlyingDefaultOrByteSource(source, context) {
        assertDictionary(source, context);
        var original = source, autoAllocateChunkSize = original == null ? void 0 : original.autoAllocateChunkSize, cancel = original == null ? void 0 : original.cancel, pull = original == null ? void 0 : original.pull, start = original == null ? void 0 : original.start, type2 = original == null ? void 0 : original.type;
        return {
          autoAllocateChunkSize: autoAllocateChunkSize === void 0 ? void 0 : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, context + " has member 'autoAllocateChunkSize' that"),
          cancel: cancel === void 0 ? void 0 : convertUnderlyingSourceCancelCallback(cancel, original, context + " has member 'cancel' that"),
          pull: pull === void 0 ? void 0 : convertUnderlyingSourcePullCallback(pull, original, context + " has member 'pull' that"),
          start: start === void 0 ? void 0 : convertUnderlyingSourceStartCallback(start, original, context + " has member 'start' that"),
          type: type2 === void 0 ? void 0 : convertReadableStreamType(type2, context + " has member 'type' that")
        };
      }
      function convertUnderlyingSourceCancelCallback(fn, original, context) {
        return assertFunction(fn, context), function(reason) {
          return promiseCall(fn, original, [reason]);
        };
      }
      function convertUnderlyingSourcePullCallback(fn, original, context) {
        return assertFunction(fn, context), function(controller) {
          return promiseCall(fn, original, [controller]);
        };
      }
      function convertUnderlyingSourceStartCallback(fn, original, context) {
        return assertFunction(fn, context), function(controller) {
          return reflectCall(fn, original, [controller]);
        };
      }
      function convertReadableStreamType(type2, context) {
        if (type2 = "" + type2, type2 !== "bytes")
          throw new TypeError(context + " '" + type2 + "' is not a valid enumeration value for ReadableStreamType");
        return type2;
      }
      function convertReaderOptions(options, context) {
        assertDictionary(options, context);
        var mode = options == null ? void 0 : options.mode;
        return {
          mode: mode === void 0 ? void 0 : convertReadableStreamReaderMode(mode, context + " has member 'mode' that")
        };
      }
      function convertReadableStreamReaderMode(mode, context) {
        if (mode = "" + mode, mode !== "byob")
          throw new TypeError(context + " '" + mode + "' is not a valid enumeration value for ReadableStreamReaderMode");
        return mode;
      }
      function convertIteratorOptions(options, context) {
        assertDictionary(options, context);
        var preventCancel = options == null ? void 0 : options.preventCancel;
        return { preventCancel: Boolean(preventCancel) };
      }
      function convertPipeOptions(options, context) {
        assertDictionary(options, context);
        var preventAbort = options == null ? void 0 : options.preventAbort, preventCancel = options == null ? void 0 : options.preventCancel, preventClose = options == null ? void 0 : options.preventClose, signal = options == null ? void 0 : options.signal;
        return signal !== void 0 && assertAbortSignal(signal, context + " has member 'signal' that"), {
          preventAbort: Boolean(preventAbort),
          preventCancel: Boolean(preventCancel),
          preventClose: Boolean(preventClose),
          signal
        };
      }
      function assertAbortSignal(signal, context) {
        if (!isAbortSignal(signal))
          throw new TypeError(context + " is not an AbortSignal.");
      }
      function convertReadableWritablePair(pair, context) {
        assertDictionary(pair, context);
        var readable = pair == null ? void 0 : pair.readable;
        assertRequiredField(readable, "readable", "ReadableWritablePair"), assertReadableStream(readable, context + " has member 'readable' that");
        var writable = pair == null ? void 0 : pair.writable;
        return assertRequiredField(writable, "writable", "ReadableWritablePair"), assertWritableStream(writable, context + " has member 'writable' that"), { readable, writable };
      }
      var ReadableStream2 = (
        /** @class */
        function() {
          function ReadableStream3(rawUnderlyingSource, rawStrategy) {
            rawUnderlyingSource === void 0 && (rawUnderlyingSource = {}), rawStrategy === void 0 && (rawStrategy = {}), rawUnderlyingSource === void 0 ? rawUnderlyingSource = null : assertObject(rawUnderlyingSource, "First parameter");
            var strategy = convertQueuingStrategy(rawStrategy, "Second parameter"), underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, "First parameter");
            if (InitializeReadableStream(this), underlyingSource.type === "bytes") {
              if (strategy.size !== void 0)
                throw new RangeError("The strategy for a byte stream cannot have a size function");
              var highWaterMark = ExtractHighWaterMark(strategy, 0);
              SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);
            } else {
              var sizeAlgorithm = ExtractSizeAlgorithm(strategy), highWaterMark = ExtractHighWaterMark(strategy, 1);
              SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);
            }
          }
          return Object.defineProperty(ReadableStream3.prototype, "locked", {
            /**
             * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.
             */
            get: function() {
              if (!IsReadableStream(this))
                throw streamBrandCheckException$1("locked");
              return IsReadableStreamLocked(this);
            },
            enumerable: !1,
            configurable: !0
          }), ReadableStream3.prototype.cancel = function(reason) {
            return reason === void 0 && (reason = void 0), IsReadableStream(this) ? IsReadableStreamLocked(this) ? promiseRejectedWith(new TypeError("Cannot cancel a stream that already has a reader")) : ReadableStreamCancel(this, reason) : promiseRejectedWith(streamBrandCheckException$1("cancel"));
          }, ReadableStream3.prototype.getReader = function(rawOptions) {
            if (rawOptions === void 0 && (rawOptions = void 0), !IsReadableStream(this))
              throw streamBrandCheckException$1("getReader");
            var options = convertReaderOptions(rawOptions, "First parameter");
            return options.mode === void 0 ? AcquireReadableStreamDefaultReader(this) : AcquireReadableStreamBYOBReader(this);
          }, ReadableStream3.prototype.pipeThrough = function(rawTransform, rawOptions) {
            if (rawOptions === void 0 && (rawOptions = {}), !IsReadableStream(this))
              throw streamBrandCheckException$1("pipeThrough");
            assertRequiredArgument(rawTransform, 1, "pipeThrough");
            var transform = convertReadableWritablePair(rawTransform, "First parameter"), options = convertPipeOptions(rawOptions, "Second parameter");
            if (IsReadableStreamLocked(this))
              throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
            if (IsWritableStreamLocked(transform.writable))
              throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
            var promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
            return setPromiseIsHandledToTrue(promise), transform.readable;
          }, ReadableStream3.prototype.pipeTo = function(destination, rawOptions) {
            if (rawOptions === void 0 && (rawOptions = {}), !IsReadableStream(this))
              return promiseRejectedWith(streamBrandCheckException$1("pipeTo"));
            if (destination === void 0)
              return promiseRejectedWith("Parameter 1 is required in 'pipeTo'.");
            if (!IsWritableStream(destination))
              return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));
            var options;
            try {
              options = convertPipeOptions(rawOptions, "Second parameter");
            } catch (e24) {
              return promiseRejectedWith(e24);
            }
            return IsReadableStreamLocked(this) ? promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")) : IsWritableStreamLocked(destination) ? promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")) : ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
          }, ReadableStream3.prototype.tee = function() {
            if (!IsReadableStream(this))
              throw streamBrandCheckException$1("tee");
            var branches = ReadableStreamTee(this);
            return CreateArrayFromList(branches);
          }, ReadableStream3.prototype.values = function(rawOptions) {
            if (rawOptions === void 0 && (rawOptions = void 0), !IsReadableStream(this))
              throw streamBrandCheckException$1("values");
            var options = convertIteratorOptions(rawOptions, "First parameter");
            return AcquireReadableStreamAsyncIterator(this, options.preventCancel);
          }, ReadableStream3;
        }()
      );
      Object.defineProperties(ReadableStream2.prototype, {
        cancel: { enumerable: !0 },
        getReader: { enumerable: !0 },
        pipeThrough: { enumerable: !0 },
        pipeTo: { enumerable: !0 },
        tee: { enumerable: !0 },
        values: { enumerable: !0 },
        locked: { enumerable: !0 }
      }), typeof SymbolPolyfill.toStringTag == "symbol" && Object.defineProperty(ReadableStream2.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStream",
        configurable: !0
      }), typeof SymbolPolyfill.asyncIterator == "symbol" && Object.defineProperty(ReadableStream2.prototype, SymbolPolyfill.asyncIterator, {
        value: ReadableStream2.prototype.values,
        writable: !0,
        configurable: !0
      });
      function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
        highWaterMark === void 0 && (highWaterMark = 1), sizeAlgorithm === void 0 && (sizeAlgorithm = function() {
          return 1;
        });
        var stream = Object.create(ReadableStream2.prototype);
        InitializeReadableStream(stream);
        var controller = Object.create(ReadableStreamDefaultController.prototype);
        return SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm), stream;
      }
      function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {
        var stream = Object.create(ReadableStream2.prototype);
        InitializeReadableStream(stream);
        var controller = Object.create(ReadableByteStreamController.prototype);
        return SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, void 0), stream;
      }
      function InitializeReadableStream(stream) {
        stream._state = "readable", stream._reader = void 0, stream._storedError = void 0, stream._disturbed = !1;
      }
      function IsReadableStream(x) {
        return !typeIsObject(x) || !Object.prototype.hasOwnProperty.call(x, "_readableStreamController") ? !1 : x instanceof ReadableStream2;
      }
      function IsReadableStreamLocked(stream) {
        return stream._reader !== void 0;
      }
      function ReadableStreamCancel(stream, reason) {
        if (stream._disturbed = !0, stream._state === "closed")
          return promiseResolvedWith(void 0);
        if (stream._state === "errored")
          return promiseRejectedWith(stream._storedError);
        ReadableStreamClose(stream);
        var reader = stream._reader;
        reader !== void 0 && IsReadableStreamBYOBReader(reader) && (reader._readIntoRequests.forEach(function(readIntoRequest) {
          readIntoRequest._closeSteps(void 0);
        }), reader._readIntoRequests = new SimpleQueue());
        var sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);
        return transformPromiseWith(sourceCancelPromise, noop2);
      }
      function ReadableStreamClose(stream) {
        stream._state = "closed";
        var reader = stream._reader;
        reader !== void 0 && (defaultReaderClosedPromiseResolve(reader), IsReadableStreamDefaultReader(reader) && (reader._readRequests.forEach(function(readRequest) {
          readRequest._closeSteps();
        }), reader._readRequests = new SimpleQueue()));
      }
      function ReadableStreamError(stream, e24) {
        stream._state = "errored", stream._storedError = e24;
        var reader = stream._reader;
        reader !== void 0 && (defaultReaderClosedPromiseReject(reader, e24), IsReadableStreamDefaultReader(reader) ? (reader._readRequests.forEach(function(readRequest) {
          readRequest._errorSteps(e24);
        }), reader._readRequests = new SimpleQueue()) : (reader._readIntoRequests.forEach(function(readIntoRequest) {
          readIntoRequest._errorSteps(e24);
        }), reader._readIntoRequests = new SimpleQueue()));
      }
      function streamBrandCheckException$1(name) {
        return new TypeError("ReadableStream.prototype." + name + " can only be used on a ReadableStream");
      }
      function convertQueuingStrategyInit(init, context) {
        assertDictionary(init, context);
        var highWaterMark = init == null ? void 0 : init.highWaterMark;
        return assertRequiredField(highWaterMark, "highWaterMark", "QueuingStrategyInit"), {
          highWaterMark: convertUnrestrictedDouble(highWaterMark)
        };
      }
      var byteLengthSizeFunction = function(chunk) {
        return chunk.byteLength;
      };
      try {
        Object.defineProperty(byteLengthSizeFunction, "name", {
          value: "size",
          configurable: !0
        });
      } catch {
      }
      var ByteLengthQueuingStrategy = (
        /** @class */
        function() {
          function ByteLengthQueuingStrategy2(options) {
            assertRequiredArgument(options, 1, "ByteLengthQueuingStrategy"), options = convertQueuingStrategyInit(options, "First parameter"), this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;
          }
          return Object.defineProperty(ByteLengthQueuingStrategy2.prototype, "highWaterMark", {
            /**
             * Returns the high water mark provided to the constructor.
             */
            get: function() {
              if (!IsByteLengthQueuingStrategy(this))
                throw byteLengthBrandCheckException("highWaterMark");
              return this._byteLengthQueuingStrategyHighWaterMark;
            },
            enumerable: !1,
            configurable: !0
          }), Object.defineProperty(ByteLengthQueuingStrategy2.prototype, "size", {
            /**
             * Measures the size of `chunk` by returning the value of its `byteLength` property.
             */
            get: function() {
              if (!IsByteLengthQueuingStrategy(this))
                throw byteLengthBrandCheckException("size");
              return byteLengthSizeFunction;
            },
            enumerable: !1,
            configurable: !0
          }), ByteLengthQueuingStrategy2;
        }()
      );
      Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
        highWaterMark: { enumerable: !0 },
        size: { enumerable: !0 }
      }), typeof SymbolPolyfill.toStringTag == "symbol" && Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
        value: "ByteLengthQueuingStrategy",
        configurable: !0
      });
      function byteLengthBrandCheckException(name) {
        return new TypeError("ByteLengthQueuingStrategy.prototype." + name + " can only be used on a ByteLengthQueuingStrategy");
      }
      function IsByteLengthQueuingStrategy(x) {
        return !typeIsObject(x) || !Object.prototype.hasOwnProperty.call(x, "_byteLengthQueuingStrategyHighWaterMark") ? !1 : x instanceof ByteLengthQueuingStrategy;
      }
      var countSizeFunction = function() {
        return 1;
      };
      try {
        Object.defineProperty(countSizeFunction, "name", {
          value: "size",
          configurable: !0
        });
      } catch {
      }
      var CountQueuingStrategy = (
        /** @class */
        function() {
          function CountQueuingStrategy2(options) {
            assertRequiredArgument(options, 1, "CountQueuingStrategy"), options = convertQueuingStrategyInit(options, "First parameter"), this._countQueuingStrategyHighWaterMark = options.highWaterMark;
          }
          return Object.defineProperty(CountQueuingStrategy2.prototype, "highWaterMark", {
            /**
             * Returns the high water mark provided to the constructor.
             */
            get: function() {
              if (!IsCountQueuingStrategy(this))
                throw countBrandCheckException("highWaterMark");
              return this._countQueuingStrategyHighWaterMark;
            },
            enumerable: !1,
            configurable: !0
          }), Object.defineProperty(CountQueuingStrategy2.prototype, "size", {
            /**
             * Measures the size of `chunk` by always returning 1.
             * This ensures that the total queue size is a count of the number of chunks in the queue.
             */
            get: function() {
              if (!IsCountQueuingStrategy(this))
                throw countBrandCheckException("size");
              return countSizeFunction;
            },
            enumerable: !1,
            configurable: !0
          }), CountQueuingStrategy2;
        }()
      );
      Object.defineProperties(CountQueuingStrategy.prototype, {
        highWaterMark: { enumerable: !0 },
        size: { enumerable: !0 }
      }), typeof SymbolPolyfill.toStringTag == "symbol" && Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
        value: "CountQueuingStrategy",
        configurable: !0
      });
      function countBrandCheckException(name) {
        return new TypeError("CountQueuingStrategy.prototype." + name + " can only be used on a CountQueuingStrategy");
      }
      function IsCountQueuingStrategy(x) {
        return !typeIsObject(x) || !Object.prototype.hasOwnProperty.call(x, "_countQueuingStrategyHighWaterMark") ? !1 : x instanceof CountQueuingStrategy;
      }
      function convertTransformer(original, context) {
        assertDictionary(original, context);
        var flush = original == null ? void 0 : original.flush, readableType = original == null ? void 0 : original.readableType, start = original == null ? void 0 : original.start, transform = original == null ? void 0 : original.transform, writableType = original == null ? void 0 : original.writableType;
        return {
          flush: flush === void 0 ? void 0 : convertTransformerFlushCallback(flush, original, context + " has member 'flush' that"),
          readableType,
          start: start === void 0 ? void 0 : convertTransformerStartCallback(start, original, context + " has member 'start' that"),
          transform: transform === void 0 ? void 0 : convertTransformerTransformCallback(transform, original, context + " has member 'transform' that"),
          writableType
        };
      }
      function convertTransformerFlushCallback(fn, original, context) {
        return assertFunction(fn, context), function(controller) {
          return promiseCall(fn, original, [controller]);
        };
      }
      function convertTransformerStartCallback(fn, original, context) {
        return assertFunction(fn, context), function(controller) {
          return reflectCall(fn, original, [controller]);
        };
      }
      function convertTransformerTransformCallback(fn, original, context) {
        return assertFunction(fn, context), function(chunk, controller) {
          return promiseCall(fn, original, [chunk, controller]);
        };
      }
      var TransformStream = (
        /** @class */
        function() {
          function TransformStream2(rawTransformer, rawWritableStrategy, rawReadableStrategy) {
            rawTransformer === void 0 && (rawTransformer = {}), rawWritableStrategy === void 0 && (rawWritableStrategy = {}), rawReadableStrategy === void 0 && (rawReadableStrategy = {}), rawTransformer === void 0 && (rawTransformer = null);
            var writableStrategy = convertQueuingStrategy(rawWritableStrategy, "Second parameter"), readableStrategy = convertQueuingStrategy(rawReadableStrategy, "Third parameter"), transformer = convertTransformer(rawTransformer, "First parameter");
            if (transformer.readableType !== void 0)
              throw new RangeError("Invalid readableType specified");
            if (transformer.writableType !== void 0)
              throw new RangeError("Invalid writableType specified");
            var readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0), readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy), writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1), writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy), startPromise_resolve, startPromise = newPromise(function(resolve) {
              startPromise_resolve = resolve;
            });
            InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm), SetUpTransformStreamDefaultControllerFromTransformer(this, transformer), transformer.start !== void 0 ? startPromise_resolve(transformer.start(this._transformStreamController)) : startPromise_resolve(void 0);
          }
          return Object.defineProperty(TransformStream2.prototype, "readable", {
            /**
             * The readable side of the transform stream.
             */
            get: function() {
              if (!IsTransformStream(this))
                throw streamBrandCheckException("readable");
              return this._readable;
            },
            enumerable: !1,
            configurable: !0
          }), Object.defineProperty(TransformStream2.prototype, "writable", {
            /**
             * The writable side of the transform stream.
             */
            get: function() {
              if (!IsTransformStream(this))
                throw streamBrandCheckException("writable");
              return this._writable;
            },
            enumerable: !1,
            configurable: !0
          }), TransformStream2;
        }()
      );
      Object.defineProperties(TransformStream.prototype, {
        readable: { enumerable: !0 },
        writable: { enumerable: !0 }
      }), typeof SymbolPolyfill.toStringTag == "symbol" && Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {
        value: "TransformStream",
        configurable: !0
      });
      function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {
        function startAlgorithm() {
          return startPromise;
        }
        function writeAlgorithm(chunk) {
          return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);
        }
        function abortAlgorithm(reason) {
          return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);
        }
        function closeAlgorithm() {
          return TransformStreamDefaultSinkCloseAlgorithm(stream);
        }
        stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);
        function pullAlgorithm() {
          return TransformStreamDefaultSourcePullAlgorithm(stream);
        }
        function cancelAlgorithm(reason) {
          return TransformStreamErrorWritableAndUnblockWrite(stream, reason), promiseResolvedWith(void 0);
        }
        stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm), stream._backpressure = void 0, stream._backpressureChangePromise = void 0, stream._backpressureChangePromise_resolve = void 0, TransformStreamSetBackpressure(stream, !0), stream._transformStreamController = void 0;
      }
      function IsTransformStream(x) {
        return !typeIsObject(x) || !Object.prototype.hasOwnProperty.call(x, "_transformStreamController") ? !1 : x instanceof TransformStream;
      }
      function TransformStreamError(stream, e24) {
        ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e24), TransformStreamErrorWritableAndUnblockWrite(stream, e24);
      }
      function TransformStreamErrorWritableAndUnblockWrite(stream, e24) {
        TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController), WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e24), stream._backpressure && TransformStreamSetBackpressure(stream, !1);
      }
      function TransformStreamSetBackpressure(stream, backpressure) {
        stream._backpressureChangePromise !== void 0 && stream._backpressureChangePromise_resolve(), stream._backpressureChangePromise = newPromise(function(resolve) {
          stream._backpressureChangePromise_resolve = resolve;
        }), stream._backpressure = backpressure;
      }
      var TransformStreamDefaultController = (
        /** @class */
        function() {
          function TransformStreamDefaultController2() {
            throw new TypeError("Illegal constructor");
          }
          return Object.defineProperty(TransformStreamDefaultController2.prototype, "desiredSize", {
            /**
             * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.
             */
            get: function() {
              if (!IsTransformStreamDefaultController(this))
                throw defaultControllerBrandCheckException("desiredSize");
              var readableController = this._controlledTransformStream._readable._readableStreamController;
              return ReadableStreamDefaultControllerGetDesiredSize(readableController);
            },
            enumerable: !1,
            configurable: !0
          }), TransformStreamDefaultController2.prototype.enqueue = function(chunk) {
            if (chunk === void 0 && (chunk = void 0), !IsTransformStreamDefaultController(this))
              throw defaultControllerBrandCheckException("enqueue");
            TransformStreamDefaultControllerEnqueue(this, chunk);
          }, TransformStreamDefaultController2.prototype.error = function(reason) {
            if (reason === void 0 && (reason = void 0), !IsTransformStreamDefaultController(this))
              throw defaultControllerBrandCheckException("error");
            TransformStreamDefaultControllerError(this, reason);
          }, TransformStreamDefaultController2.prototype.terminate = function() {
            if (!IsTransformStreamDefaultController(this))
              throw defaultControllerBrandCheckException("terminate");
            TransformStreamDefaultControllerTerminate(this);
          }, TransformStreamDefaultController2;
        }()
      );
      Object.defineProperties(TransformStreamDefaultController.prototype, {
        enqueue: { enumerable: !0 },
        error: { enumerable: !0 },
        terminate: { enumerable: !0 },
        desiredSize: { enumerable: !0 }
      }), typeof SymbolPolyfill.toStringTag == "symbol" && Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
        value: "TransformStreamDefaultController",
        configurable: !0
      });
      function IsTransformStreamDefaultController(x) {
        return !typeIsObject(x) || !Object.prototype.hasOwnProperty.call(x, "_controlledTransformStream") ? !1 : x instanceof TransformStreamDefaultController;
      }
      function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {
        controller._controlledTransformStream = stream, stream._transformStreamController = controller, controller._transformAlgorithm = transformAlgorithm, controller._flushAlgorithm = flushAlgorithm;
      }
      function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {
        var controller = Object.create(TransformStreamDefaultController.prototype), transformAlgorithm = function(chunk) {
          try {
            return TransformStreamDefaultControllerEnqueue(controller, chunk), promiseResolvedWith(void 0);
          } catch (transformResultE) {
            return promiseRejectedWith(transformResultE);
          }
        }, flushAlgorithm = function() {
          return promiseResolvedWith(void 0);
        };
        transformer.transform !== void 0 && (transformAlgorithm = function(chunk) {
          return transformer.transform(chunk, controller);
        }), transformer.flush !== void 0 && (flushAlgorithm = function() {
          return transformer.flush(controller);
        }), SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);
      }
      function TransformStreamDefaultControllerClearAlgorithms(controller) {
        controller._transformAlgorithm = void 0, controller._flushAlgorithm = void 0;
      }
      function TransformStreamDefaultControllerEnqueue(controller, chunk) {
        var stream = controller._controlledTransformStream, readableController = stream._readable._readableStreamController;
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController))
          throw new TypeError("Readable side is not in a state that permits enqueue");
        try {
          ReadableStreamDefaultControllerEnqueue(readableController, chunk);
        } catch (e24) {
          throw TransformStreamErrorWritableAndUnblockWrite(stream, e24), stream._readable._storedError;
        }
        var backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);
        backpressure !== stream._backpressure && TransformStreamSetBackpressure(stream, !0);
      }
      function TransformStreamDefaultControllerError(controller, e24) {
        TransformStreamError(controller._controlledTransformStream, e24);
      }
      function TransformStreamDefaultControllerPerformTransform(controller, chunk) {
        var transformPromise = controller._transformAlgorithm(chunk);
        return transformPromiseWith(transformPromise, void 0, function(r25) {
          throw TransformStreamError(controller._controlledTransformStream, r25), r25;
        });
      }
      function TransformStreamDefaultControllerTerminate(controller) {
        var stream = controller._controlledTransformStream, readableController = stream._readable._readableStreamController;
        ReadableStreamDefaultControllerClose(readableController);
        var error2 = new TypeError("TransformStream terminated");
        TransformStreamErrorWritableAndUnblockWrite(stream, error2);
      }
      function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {
        var controller = stream._transformStreamController;
        if (stream._backpressure) {
          var backpressureChangePromise = stream._backpressureChangePromise;
          return transformPromiseWith(backpressureChangePromise, function() {
            var writable = stream._writable, state = writable._state;
            if (state === "erroring")
              throw writable._storedError;
            return TransformStreamDefaultControllerPerformTransform(controller, chunk);
          });
        }
        return TransformStreamDefaultControllerPerformTransform(controller, chunk);
      }
      function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {
        return TransformStreamError(stream, reason), promiseResolvedWith(void 0);
      }
      function TransformStreamDefaultSinkCloseAlgorithm(stream) {
        var readable = stream._readable, controller = stream._transformStreamController, flushPromise = controller._flushAlgorithm();
        return TransformStreamDefaultControllerClearAlgorithms(controller), transformPromiseWith(flushPromise, function() {
          if (readable._state === "errored")
            throw readable._storedError;
          ReadableStreamDefaultControllerClose(readable._readableStreamController);
        }, function(r25) {
          throw TransformStreamError(stream, r25), readable._storedError;
        });
      }
      function TransformStreamDefaultSourcePullAlgorithm(stream) {
        return TransformStreamSetBackpressure(stream, !1), stream._backpressureChangePromise;
      }
      function defaultControllerBrandCheckException(name) {
        return new TypeError("TransformStreamDefaultController.prototype." + name + " can only be used on a TransformStreamDefaultController");
      }
      function streamBrandCheckException(name) {
        return new TypeError("TransformStream.prototype." + name + " can only be used on a TransformStream");
      }
      exports2.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy, exports2.CountQueuingStrategy = CountQueuingStrategy, exports2.ReadableByteStreamController = ReadableByteStreamController, exports2.ReadableStream = ReadableStream2, exports2.ReadableStreamBYOBReader = ReadableStreamBYOBReader, exports2.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest, exports2.ReadableStreamDefaultController = ReadableStreamDefaultController, exports2.ReadableStreamDefaultReader = ReadableStreamDefaultReader, exports2.TransformStream = TransformStream, exports2.TransformStreamDefaultController = TransformStreamDefaultController, exports2.WritableStream = WritableStream, exports2.WritableStreamDefaultController = WritableStreamDefaultController, exports2.WritableStreamDefaultWriter = WritableStreamDefaultWriter, Object.defineProperty(exports2, "__esModule", { value: !0 });
    });
  }
});

// node_modules/@remix-run/web-stream/src/stream.cjs
var require_stream = __commonJS({
  "node_modules/@remix-run/web-stream/src/stream.cjs"(exports, module2) {
    module2.exports = require_ponyfill();
  }
});

// node_modules/@remix-run/web-blob/dist/src/blob.cjs
var require_blob = __commonJS({
  "node_modules/@remix-run/web-blob/dist/src/blob.cjs"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var webEncoding = require_lib(), webStream = require_stream(), WebBlob = class Blob3 {
      /**
       * @param {BlobPart[]} [init]
       * @param {BlobPropertyBag} [options]
       */
      constructor(init = [], options = {}) {
        let parts = [], size2 = 0;
        for (let part of init)
          if (typeof part == "string") {
            let bytes = new webEncoding.TextEncoder().encode(part);
            parts.push(bytes), size2 += bytes.byteLength;
          } else if (part instanceof WebBlob)
            size2 += part.size, parts.push(...part._parts);
          else if (part instanceof ArrayBuffer)
            parts.push(new Uint8Array(part)), size2 += part.byteLength;
          else if (part instanceof Uint8Array)
            parts.push(part), size2 += part.byteLength;
          else if (ArrayBuffer.isView(part)) {
            let { buffer, byteOffset, byteLength } = part;
            parts.push(new Uint8Array(buffer, byteOffset, byteLength)), size2 += byteLength;
          } else {
            let bytes = new webEncoding.TextEncoder().encode(String(part));
            parts.push(bytes), size2 += bytes.byteLength;
          }
        this._size = size2, this._type = readType(options.type), this._parts = parts, Object.defineProperties(this, {
          _size: { enumerable: !1 },
          _type: { enumerable: !1 },
          _parts: { enumerable: !1 }
        });
      }
      /**
       * A string indicating the MIME type of the data contained in the Blob.
       * If the type is unknown, this string is empty.
       * @type {string}
       */
      get type() {
        return this._type;
      }
      /**
       * The size, in bytes, of the data contained in the Blob object.
       * @type {number}
       */
      get size() {
        return this._size;
      }
      /**
       * Returns a new Blob object containing the data in the specified range of
       * bytes of the blob on which it's called.
       * @param {number} [start=0] - An index into the Blob indicating the first
       * byte to include in the new Blob. If you specify a negative value, it's
       * treated as an offset from the end of the Blob toward the beginning. For
       * example, `-10` would be the 10th from last byte in the Blob. The default
       * value is `0`. If you specify a value for start that is larger than the
       * size of the source Blob, the returned Blob has size 0 and contains no
       * data.
       * @param {number} [end] - An index into the `Blob` indicating the first byte
       *  that will *not* be included in the new `Blob` (i.e. the byte exactly at
       * this index is not included). If you specify a negative value, it's treated
       * as an offset from the end of the Blob toward the beginning. For example,
       * `-10` would be the 10th from last byte in the `Blob`. The default value is
       * size.
       * @param {string} [type] - The content type to assign to the new Blob;
       * this will be the value of its type property. The default value is an empty
       * string.
       * @returns {Blob}
       */
      slice(start = 0, end = this.size, type2 = "") {
        let { size: size2, _parts } = this, offset2 = start < 0 ? Math.max(size2 + start, 0) : Math.min(start, size2), limit = end < 0 ? Math.max(size2 + end, 0) : Math.min(end, size2), span = Math.max(limit - offset2, 0), blob = new Blob3([], { type: type2 });
        if (span === 0)
          return blob;
        let blobSize = 0, blobParts = [];
        for (let part of _parts) {
          let { byteLength } = part;
          if (offset2 > 0 && byteLength <= offset2)
            offset2 -= byteLength, limit -= byteLength;
          else {
            let chunk = part.subarray(offset2, Math.min(byteLength, limit));
            if (blobParts.push(chunk), blobSize += chunk.byteLength, offset2 = 0, blobSize >= span)
              break;
          }
        }
        return blob._parts = blobParts, blob._size = blobSize, blob;
      }
      /**
       * Returns a promise that resolves with an ArrayBuffer containing the entire
       * contents of the Blob as binary data.
       * @returns {Promise<ArrayBuffer>}
       */
      // eslint-disable-next-line require-await
      async arrayBuffer() {
        let buffer = new ArrayBuffer(this.size), bytes = new Uint8Array(buffer), offset2 = 0;
        for (let part of this._parts)
          bytes.set(part, offset2), offset2 += part.byteLength;
        return buffer;
      }
      /**
       * Returns a promise that resolves with a USVString containing the entire
       * contents of the Blob interpreted as UTF-8 text.
       * @returns {Promise<string>}
       */
      // eslint-disable-next-line require-await
      async text() {
        let decoder = new webEncoding.TextDecoder(), text = "";
        for (let part of this._parts)
          text += decoder.decode(part);
        return text;
      }
      /**
       * @returns {BlobStream}
       */
      stream() {
        return new BlobStream(this._parts);
      }
      /**
       * @returns {string}
       */
      toString() {
        return "[object Blob]";
      }
      get [Symbol.toStringTag]() {
        return "Blob";
      }
    }, Blob2 = WebBlob, BlobStream = class extends webStream.ReadableStream {
      /**
       * @param {Uint8Array[]} chunks
       */
      constructor(chunks) {
        super(new BlobStreamController(chunks.values()), { type: "bytes" }), this._chunks = chunks;
      }
      /**
       * @param {Object} [_options]
       * @property {boolean} [_options.preventCancel]
       * @returns {AsyncIterator<Uint8Array>}
       */
      async *[Symbol.asyncIterator](_options) {
        let reader = this.getReader();
        yield* this._chunks, reader.releaseLock();
      }
    }, BlobStreamController = class {
      /**
       * @param {Iterator<Uint8Array>} chunks
       */
      constructor(chunks) {
        this.chunks = chunks;
      }
      /**
       * @param {ReadableStreamDefaultController} controller
       */
      start(controller) {
        this.work(controller), this.isWorking = !1, this.isCancelled = !1;
      }
      /**
       *
       * @param {ReadableStreamDefaultController} controller
       */
      async work(controller) {
        let { chunks } = this;
        for (this.isWorking = !0; !this.isCancelled && (controller.desiredSize || 0) > 0; ) {
          let next = null;
          try {
            next = chunks.next();
          } catch (error2) {
            controller.error(error2);
            break;
          }
          next && (!next.done && !this.isCancelled ? controller.enqueue(next.value) : controller.close());
        }
        this.isWorking = !1;
      }
      /**
       * @param {ReadableStreamDefaultController} controller
       */
      pull(controller) {
        this.isWorking || this.work(controller);
      }
      cancel() {
        this.isCancelled = !0;
      }
    }, readType = (input = "") => {
      let type2 = String(input).toLowerCase();
      return /[^\u0020-\u007E]/.test(type2) ? "" : type2;
    };
    Object.defineProperty(exports, "TextDecoder", {
      enumerable: !0,
      get: function() {
        return webEncoding.TextDecoder;
      }
    });
    Object.defineProperty(exports, "TextEncoder", {
      enumerable: !0,
      get: function() {
        return webEncoding.TextEncoder;
      }
    });
    Object.defineProperty(exports, "ReadableStream", {
      enumerable: !0,
      get: function() {
        return webStream.ReadableStream;
      }
    });
    exports.Blob = Blob2;
  }
});

// node_modules/@remix-run/web-blob/dist/src/lib.node.cjs
var require_lib_node = __commonJS({
  "node_modules/@remix-run/web-blob/dist/src/lib.node.cjs"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var webEncoding = require_lib(), webStream = require_stream(), blob = require_blob(), Blob2 = globalThis.Blob || // Disable node native blob until impractical perf issue is fixed
    // @see https://github.com/nodejs/node/issues/42108
    // NodeBlob ||
    blob.Blob;
    Object.defineProperty(exports, "TextDecoder", {
      enumerable: !0,
      get: function() {
        return webEncoding.TextDecoder;
      }
    });
    Object.defineProperty(exports, "TextEncoder", {
      enumerable: !0,
      get: function() {
        return webEncoding.TextEncoder;
      }
    });
    Object.defineProperty(exports, "ReadableStream", {
      enumerable: !0,
      get: function() {
        return webStream.ReadableStream;
      }
    });
    exports.Blob = Blob2;
  }
});

// node_modules/@remix-run/web-form-data/dist/src/form-data.cjs
var require_form_data = __commonJS({
  "node_modules/@remix-run/web-form-data/dist/src/form-data.cjs"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var FormData2 = class {
      /**
       * @param {HTMLFormElement} [form]
       */
      constructor(form) {
        if (this._entries = [], Object.defineProperty(this, "_entries", { enumerable: !1 }), isHTMLFormElement(form))
          for (let element of form.elements)
            if (isSelectElement(element))
              for (let option of element.options)
                option.selected && this.append(element.name, option.value);
            else
              isInputElement(element) && (element.checked || !["radio", "checkbox"].includes(element.type)) && element.name && this.append(element.name, element.value);
      }
      get [Symbol.toStringTag]() {
        return "FormData";
      }
      /**
       * Appends a new value onto an existing key inside a FormData object, or adds
       * the key if it does not already exist.
       *
       * The difference between `set` and `append` is that if the specified key
       * already exists, `set` will overwrite all existing values with the new one,
       * whereas `append` will append the new value onto the end of the existing
       * set of values.
       *
       * @param {string} name
       * @param {string|Blob|File} value - The name of the field whose data is
       * contained in value.
       * @param {string} [filename] - The filename reported to the server, when a
       * value is a `Blob` or a `File`. The default filename for a `Blob` objects is
       * `"blob"`. The default filename for a `File` is the it's name.
       */
      append(name, value = panic(
        new TypeError("FormData.append: requires at least 2 arguments")
      ), filename) {
        this._entries.push([name, toEntryValue(value, filename)]);
      }
      /**
       * Deletes a key and all its values from a FormData object.
       *
       * @param {string} name
       */
      delete(name = panic(new TypeError("FormData.delete: requires string argument"))) {
        let entries = this._entries, index2 = 0;
        for (; index2 < entries.length; ) {
          let [entryName] = (
            /** @type {[string, FormDataEntryValue]}*/
            entries[index2]
          );
          entryName === name ? entries.splice(index2, 1) : index2++;
        }
      }
      /**
       * Returns the first value associated with a given key from within a
       * FormData object.
       *
       * @param {string} name
       * @returns {FormDataEntryValue|null}
       */
      get(name = panic(new TypeError("FormData.get: requires string argument"))) {
        for (let [entryName, value] of this._entries)
          if (entryName === name)
            return value;
        return null;
      }
      /**
       * Returns an array of all the values associated with a given key from within
       * a FormData.
       *
       * @param {string} name
       * @returns {FormDataEntryValue[]}
       */
      getAll(name = panic(new TypeError("FormData.getAll: requires string argument"))) {
        let values = [];
        for (let [entryName, value] of this._entries)
          entryName === name && values.push(value);
        return values;
      }
      /**
       * Returns a boolean stating whether a FormData object contains a certain key.
       *
       * @param {string} name
       */
      has(name = panic(new TypeError("FormData.has: requires string argument"))) {
        for (let [entryName] of this._entries)
          if (entryName === name)
            return !0;
        return !1;
      }
      /**
       * Sets a new value for an existing key inside a FormData object, or adds the
       * key/value if it does not already exist.
       *
       * @param {string} name
       * @param {string|Blob|File} value
       * @param {string} [filename]
       */
      set(name, value = panic(new TypeError("FormData.set: requires at least 2 arguments")), filename) {
        let index2 = 0, { _entries: entries } = this, entryValue = toEntryValue(value, filename), wasSet = !1;
        for (; index2 < entries.length; ) {
          let entry2 = (
            /** @type {[string, FormDataEntryValue]}*/
            entries[index2]
          );
          entry2[0] === name ? wasSet ? entries.splice(index2, 1) : (wasSet = !0, entry2[1] = entryValue, index2++) : index2++;
        }
        wasSet || entries.push([name, entryValue]);
      }
      /**
       * Method returns an iterator allowing to go through all key/value pairs
       * contained in this object.
       */
      entries() {
        return this._entries.values();
      }
      /**
       * Returns an iterator allowing to go through all keys of the key/value pairs
       * contained in this object.
       *
       * @returns {IterableIterator<string>}
       */
      *keys() {
        for (let [name] of this._entries)
          yield name;
      }
      /**
       * Returns an iterator allowing to go through all values contained in this
       * object.
       *
       * @returns {IterableIterator<FormDataEntryValue>}
       */
      *values() {
        for (let [_, value] of this._entries)
          yield value;
      }
      [Symbol.iterator]() {
        return this._entries.values();
      }
      /**
       * @param {(value: FormDataEntryValue, key: string, parent: globalThis.FormData) => void} fn
       * @param {any} [thisArg]
       * @returns {void}
       */
      forEach(fn, thisArg) {
        for (let [key, value] of this._entries)
          fn.call(thisArg, value, key, this);
      }
    }, isHTMLFormElement = (value) => Object.prototype.toString.call(value) === "[object HTMLFormElement]", toEntryValue = (value, filename) => {
      if (isFile(value))
        return filename != null ? new BlobFile([value], filename, value) : value;
      if (isBlob(value))
        return new BlobFile([value], filename ?? "blob");
      if (filename != null && filename != "")
        throw new TypeError(
          "filename is only supported when value is Blob or File"
        );
      return `${value}`;
    }, isFile = (value) => Object.prototype.toString.call(value) === "[object File]" && typeof value.name == "string", isBlob = (value) => Object.prototype.toString.call(value) === "[object Blob]", BlobFile = class {
      /**
       * @param {[Blob]} parts
       * @param {string} name
       * @param {FilePropertyBag} [options]
       */
      constructor([blob], name, { lastModified = Date.now() } = {}) {
        this.blob = blob, this.name = name, this.lastModified = lastModified;
      }
      get webkitRelativePath() {
        return "";
      }
      get size() {
        return this.blob.size;
      }
      get type() {
        return this.blob.type;
      }
      /**
       *
       * @param {number} [start]
       * @param {number} [end]
       * @param {string} [contentType]
       */
      slice(start, end, contentType) {
        return this.blob.slice(start, end, contentType);
      }
      stream() {
        return this.blob.stream();
      }
      text() {
        return this.blob.text();
      }
      arrayBuffer() {
        return this.blob.arrayBuffer();
      }
      get [Symbol.toStringTag]() {
        return "File";
      }
    }, panic = (error2) => {
      throw error2;
    };
    function isSelectElement(element) {
      return element.tagName === "SELECT";
    }
    function isInputElement(element) {
      return element.tagName === "INPUT" || element.tagName === "TEXTAREA";
    }
    exports.FormData = FormData2;
  }
});

// node_modules/@remix-run/web-form-data/dist/src/lib.node.cjs
var require_lib_node2 = __commonJS({
  "node_modules/@remix-run/web-form-data/dist/src/lib.node.cjs"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var formData = require_form_data(), FormData2 = formData.FormData;
    exports.FormData = FormData2;
  }
});

// node_modules/@web3-storage/multipart-parser/cjs/src/utils.js
var require_utils = __commonJS({
  "node_modules/@web3-storage/multipart-parser/cjs/src/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    function stringToArray(s) {
      let utf8 = unescape(encodeURIComponent(s));
      return Uint8Array.from(utf8, (_, i13) => utf8.charCodeAt(i13));
    }
    function arrayToString(a9) {
      let utf8 = String.fromCharCode.apply(null, a9);
      return decodeURIComponent(escape(utf8));
    }
    function mergeArrays(...arrays) {
      let out = new Uint8Array(arrays.reduce((total, arr) => total + arr.length, 0)), offset2 = 0;
      for (let arr of arrays)
        out.set(arr, offset2), offset2 += arr.length;
      return out;
    }
    function arraysEqual(a9, b) {
      if (a9.length !== b.length)
        return !1;
      for (let i13 = 0; i13 < a9.length; i13++)
        if (a9[i13] !== b[i13])
          return !1;
      return !0;
    }
    exports.arrayToString = arrayToString;
    exports.arraysEqual = arraysEqual;
    exports.mergeArrays = mergeArrays;
    exports.stringToArray = stringToArray;
  }
});

// node_modules/@web3-storage/multipart-parser/cjs/src/search.js
var require_search = __commonJS({
  "node_modules/@web3-storage/multipart-parser/cjs/src/search.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var utils = require_utils();
    function coerce(a9) {
      return a9 instanceof Uint8Array ? (index2) => a9[index2] : a9;
    }
    function jsmemcmp(buf1, pos1, buf2, pos2, len) {
      let fn1 = coerce(buf1), fn2 = coerce(buf2);
      for (let i13 = 0; i13 < len; ++i13)
        if (fn1(pos1 + i13) !== fn2(pos2 + i13))
          return !1;
      return !0;
    }
    function createOccurenceTable(s) {
      let table = new Array(256).fill(s.length);
      if (s.length > 1)
        for (let i13 = 0; i13 < s.length - 1; i13++)
          table[s[i13]] = s.length - 1 - i13;
      return table;
    }
    var MATCH = Symbol("Match"), StreamSearch = class {
      constructor(needle) {
        this._lookbehind = new Uint8Array(), typeof needle == "string" ? this._needle = needle = utils.stringToArray(needle) : this._needle = needle, this._lastChar = needle[needle.length - 1], this._occ = createOccurenceTable(needle);
      }
      feed(chunk) {
        let pos = 0, tokens, allTokens = [];
        for (; pos !== chunk.length; )
          [pos, ...tokens] = this._feed(chunk, pos), allTokens.push(...tokens);
        return allTokens;
      }
      end() {
        let tail = this._lookbehind;
        return this._lookbehind = new Uint8Array(), tail;
      }
      _feed(data, bufPos) {
        let tokens = [], pos = -this._lookbehind.length;
        if (pos < 0) {
          for (; pos < 0 && pos <= data.length - this._needle.length; ) {
            let ch = this._charAt(data, pos + this._needle.length - 1);
            if (ch === this._lastChar && this._memcmp(data, pos, this._needle.length - 1))
              return pos > -this._lookbehind.length && tokens.push(this._lookbehind.slice(0, this._lookbehind.length + pos)), tokens.push(MATCH), this._lookbehind = new Uint8Array(), [
                pos + this._needle.length,
                ...tokens
              ];
            pos += this._occ[ch];
          }
          if (pos < 0)
            for (; pos < 0 && !this._memcmp(data, pos, data.length - pos); )
              pos++;
          if (pos >= 0)
            tokens.push(this._lookbehind), this._lookbehind = new Uint8Array();
          else {
            let bytesToCutOff = this._lookbehind.length + pos;
            return bytesToCutOff > 0 && (tokens.push(this._lookbehind.slice(0, bytesToCutOff)), this._lookbehind = this._lookbehind.slice(bytesToCutOff)), this._lookbehind = Uint8Array.from(new Array(this._lookbehind.length + data.length), (_, i13) => this._charAt(data, i13 - this._lookbehind.length)), [
              data.length,
              ...tokens
            ];
          }
        }
        for (pos += bufPos; pos <= data.length - this._needle.length; ) {
          let ch = data[pos + this._needle.length - 1];
          if (ch === this._lastChar && data[pos] === this._needle[0] && jsmemcmp(this._needle, 0, data, pos, this._needle.length - 1))
            return pos > bufPos && tokens.push(data.slice(bufPos, pos)), tokens.push(MATCH), [
              pos + this._needle.length,
              ...tokens
            ];
          pos += this._occ[ch];
        }
        if (pos < data.length) {
          for (; pos < data.length && (data[pos] !== this._needle[0] || !jsmemcmp(data, pos, this._needle, 0, data.length - pos)); )
            ++pos;
          pos < data.length && (this._lookbehind = data.slice(pos));
        }
        return pos > 0 && tokens.push(data.slice(bufPos, pos < data.length ? pos : data.length)), [
          data.length,
          ...tokens
        ];
      }
      _charAt(data, pos) {
        return pos < 0 ? this._lookbehind[this._lookbehind.length + pos] : data[pos];
      }
      _memcmp(data, pos, len) {
        return jsmemcmp(this._charAt.bind(this, data), pos, this._needle, 0, len);
      }
    }, ReadableStreamSearch = class {
      constructor(needle, _readableStream) {
        this._readableStream = _readableStream, this._search = new StreamSearch(needle);
      }
      async *[Symbol.asyncIterator]() {
        let reader = this._readableStream.getReader();
        try {
          for (; ; ) {
            let result = await reader.read();
            if (result.done)
              break;
            yield* this._search.feed(result.value);
          }
          let tail = this._search.end();
          tail.length && (yield tail);
        } finally {
          reader.releaseLock();
        }
      }
    }, EOQ = Symbol("End of Queue"), QueueableStreamSearch = class {
      constructor(needle) {
        this._chunksQueue = [], this._closed = !1, this._search = new StreamSearch(needle);
      }
      push(...chunks) {
        if (this._closed)
          throw new Error("cannot call push after close");
        this._chunksQueue.push(...chunks), this._notify && this._notify();
      }
      close() {
        if (this._closed)
          throw new Error("close was already called");
        this._closed = !0, this._chunksQueue.push(EOQ), this._notify && this._notify();
      }
      async *[Symbol.asyncIterator]() {
        for (; ; ) {
          let chunk;
          for (; !(chunk = this._chunksQueue.shift()); )
            await new Promise((resolve) => this._notify = resolve), this._notify = void 0;
          if (chunk === EOQ)
            break;
          yield* this._search.feed(chunk);
        }
        let tail = this._search.end();
        tail.length && (yield tail);
      }
    };
    function splitChunks(chunks, needle) {
      let search = new StreamSearch(needle), outchunks = [[]];
      for (let chunk of chunks)
        for (let token of search.feed(chunk))
          token === MATCH ? outchunks.push([]) : outchunks[outchunks.length - 1].push(token);
      let end = search.end();
      return outchunks[outchunks.length - 1].push(end), outchunks.map((chunks2) => utils.mergeArrays(...chunks2));
    }
    function split(buf, needle) {
      return splitChunks([buf], needle);
    }
    async function* chunksIterator(iter) {
      let chunks = [];
      for await (let value of iter)
        value === MATCH ? (yield chunks, chunks = []) : chunks.push(value);
      yield chunks;
    }
    async function* stringIterator(iter) {
      for await (let chunk of chunksIterator(iter))
        yield chunk.map(utils.arrayToString).join("");
    }
    async function allStrings(iter) {
      let segments = [];
      for await (let value of stringIterator(iter))
        segments.push(value);
      return segments;
    }
    async function* arrayIterator(iter) {
      for await (let chunk of chunksIterator(iter))
        yield utils.mergeArrays(...chunk);
    }
    exports.MATCH = MATCH;
    exports.QueueableStreamSearch = QueueableStreamSearch;
    exports.ReadableStreamSearch = ReadableStreamSearch;
    exports.StreamSearch = StreamSearch;
    exports.allStrings = allStrings;
    exports.arrayIterator = arrayIterator;
    exports.chunksIterator = chunksIterator;
    exports.split = split;
    exports.splitChunks = splitChunks;
    exports.stringIterator = stringIterator;
  }
});

// node_modules/@web3-storage/multipart-parser/cjs/src/index.js
var require_src2 = __commonJS({
  "node_modules/@web3-storage/multipart-parser/cjs/src/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var search = require_search(), utils = require_utils(), mergeArrays2 = Function.prototype.apply.bind(utils.mergeArrays, void 0), dash = utils.stringToArray("--"), CRLF = utils.stringToArray(`\r
`);
    function parseContentDisposition(header) {
      let parts = header.split(";").map((part) => part.trim());
      if (parts.shift() !== "form-data")
        throw new Error('malformed content-disposition header: missing "form-data" in `' + JSON.stringify(parts) + "`");
      let out = {};
      for (let part of parts) {
        let kv = part.split("=", 2);
        if (kv.length !== 2)
          throw new Error("malformed content-disposition header: key-value pair not found - " + part + " in `" + header + "`");
        let [name, value] = kv;
        if (value[0] === '"' && value[value.length - 1] === '"')
          out[name] = value.slice(1, -1).replace(/\\"/g, '"');
        else if (value[0] !== '"' && value[value.length - 1] !== '"')
          out[name] = value;
        else if (value[0] === '"' && value[value.length - 1] !== '"' || value[0] !== '"' && value[value.length - 1] === '"')
          throw new Error("malformed content-disposition header: mismatched quotations in `" + header + "`");
      }
      if (!out.name)
        throw new Error("malformed content-disposition header: missing field name in `" + header + "`");
      return out;
    }
    function parsePartHeaders(lines) {
      let entries = [], disposition = !1, line;
      for (; typeof (line = lines.shift()) < "u"; ) {
        let colon = line.indexOf(":");
        if (colon === -1)
          throw new Error("malformed multipart-form header: missing colon");
        let header = line.slice(0, colon).trim().toLowerCase(), value = line.slice(colon + 1).trim();
        switch (header) {
          case "content-disposition":
            disposition = !0, entries.push(...Object.entries(parseContentDisposition(value)));
            break;
          case "content-type":
            entries.push([
              "contentType",
              value
            ]);
        }
      }
      if (!disposition)
        throw new Error("malformed multipart-form header: missing content-disposition");
      return Object.fromEntries(entries);
    }
    async function readHeaderLines(it, needle) {
      let firstChunk = !0, lastTokenWasMatch = !1, headerLines = [[]], crlfSearch = new search.StreamSearch(CRLF);
      for (; ; ) {
        let result = await it.next();
        if (result.done)
          throw new Error("malformed multipart-form data: unexpected end of stream");
        if (firstChunk && result.value !== search.MATCH && utils.arraysEqual(result.value.slice(0, 2), dash))
          return [
            void 0,
            new Uint8Array()
          ];
        let chunk;
        if (result.value !== search.MATCH)
          chunk = result.value;
        else if (!lastTokenWasMatch)
          chunk = needle;
        else
          throw new Error("malformed multipart-form data: unexpected boundary");
        if (!chunk.length)
          continue;
        firstChunk && (firstChunk = !1);
        let tokens = crlfSearch.feed(chunk);
        for (let [i13, token] of tokens.entries()) {
          let isMatch = token === search.MATCH;
          if (!(!isMatch && !token.length)) {
            if (lastTokenWasMatch && isMatch)
              return tokens.push(crlfSearch.end()), [
                headerLines.filter((chunks) => chunks.length).map(mergeArrays2).map(utils.arrayToString),
                utils.mergeArrays(...tokens.slice(i13 + 1).map((token2) => token2 === search.MATCH ? CRLF : token2))
              ];
            (lastTokenWasMatch = isMatch) ? headerLines.push([]) : headerLines[headerLines.length - 1].push(token);
          }
        }
      }
    }
    async function* streamMultipart(body, boundary) {
      let needle = utils.mergeArrays(dash, utils.stringToArray(boundary)), it = new search.ReadableStreamSearch(needle, body)[Symbol.asyncIterator]();
      for (; ; ) {
        let result = await it.next();
        if (result.done)
          return;
        if (result.value === search.MATCH)
          break;
      }
      let crlfSearch = new search.StreamSearch(CRLF);
      for (; ; ) {
        let feedChunk = function(chunk) {
          let chunks = [];
          for (let token of crlfSearch.feed(chunk))
            trailingCRLF && chunks.push(CRLF), (trailingCRLF = token === search.MATCH) || chunks.push(token);
          return utils.mergeArrays(...chunks);
        }, [headerLines, tail] = await readHeaderLines(it, needle);
        if (!headerLines)
          return;
        async function nextToken() {
          let result = await it.next();
          if (result.done)
            throw new Error("malformed multipart-form data: unexpected end of stream");
          return result;
        }
        let trailingCRLF = !1, done = !1;
        async function nextChunk() {
          let result = await nextToken(), chunk;
          if (result.value !== search.MATCH)
            chunk = result.value;
          else if (!trailingCRLF)
            chunk = CRLF;
          else
            return done = !0, { value: crlfSearch.end() };
          return { value: feedChunk(chunk) };
        }
        let bufferedChunks = [{ value: feedChunk(tail) }];
        for (yield {
          ...parsePartHeaders(headerLines),
          data: {
            [Symbol.asyncIterator]() {
              return this;
            },
            async next() {
              for (; ; ) {
                let result = bufferedChunks.shift();
                if (!result)
                  break;
                if (result.value.length > 0)
                  return result;
              }
              for (; ; ) {
                if (done)
                  return {
                    done,
                    value: void 0
                  };
                let result = await nextChunk();
                if (result.value.length > 0)
                  return result;
              }
            }
          }
        }; !done; )
          bufferedChunks.push(await nextChunk());
      }
    }
    async function* iterateMultipart(body, boundary) {
      for await (let part of streamMultipart(body, boundary)) {
        let chunks = [];
        for await (let chunk of part.data)
          chunks.push(chunk);
        yield {
          ...part,
          data: utils.mergeArrays(...chunks)
        };
      }
    }
    exports.iterateMultipart = iterateMultipart;
    exports.streamMultipart = streamMultipart;
  }
});

// node_modules/@remix-run/web-fetch/dist/lib.node.cjs
var require_lib_node3 = __commonJS({
  "node_modules/@remix-run/web-fetch/dist/lib.node.cjs"(exports, module2) {
    "use strict";
    var http = require("http"), https = require("https"), zlib = require("zlib"), fs = require("fs"), mime = require_mrmime(), dataUriToBuffer = require_src(), Stream = require("stream"), util = require("util"), webBlob = require_lib_node(), webFormData = require_lib_node2(), crypto = require("crypto"), multipartParser = require_src2(), url = require("url"), abortController = require_abort_controller(), FetchBaseError = class extends Error {
      /**
       * @param {string} message 
       * @param {string} type 
       */
      constructor(message2, type2) {
        super(message2), Error.captureStackTrace(this, this.constructor), this.type = type2;
      }
      get name() {
        return this.constructor.name;
      }
      get [Symbol.toStringTag]() {
        return this.constructor.name;
      }
    }, FetchError = class extends FetchBaseError {
      /**
       * @param  {string} message -      Error message for human
       * @param  {string} type -        Error type for machine
       * @param  {SystemError} [systemError] - For Node.js system error
       */
      constructor(message2, type2, systemError) {
        super(message2, type2), systemError && (this.code = this.errno = systemError.code, this.erroredSysCall = systemError.syscall);
      }
    }, NAME = Symbol.toStringTag, isURLSearchParameters = (object) => typeof object == "object" && typeof object.append == "function" && typeof object.delete == "function" && typeof object.get == "function" && typeof object.getAll == "function" && typeof object.has == "function" && typeof object.set == "function" && typeof object.sort == "function" && object[NAME] === "URLSearchParams", isBlob = (object) => typeof object == "object" && typeof object.arrayBuffer == "function" && typeof object.type == "string" && typeof object.stream == "function" && typeof object.constructor == "function" && /^(Blob|File)$/.test(object[NAME]);
    function isFormData(object) {
      return typeof object == "object" && typeof object.append == "function" && typeof object.set == "function" && typeof object.get == "function" && typeof object.getAll == "function" && typeof object.delete == "function" && typeof object.keys == "function" && typeof object.values == "function" && typeof object.entries == "function" && typeof object.constructor == "function" && object[NAME] === "FormData";
    }
    var isMultipartFormDataStream = (value) => value instanceof Stream && typeof value.getBoundary == "function" && typeof value.hasKnownLength == "function" && typeof value.getLengthSync == "function", isAbortSignal = (object) => typeof object == "object" && (object[NAME] === "AbortSignal" || object[NAME] === "EventTarget"), isReadableStream = (value) => typeof value == "object" && typeof value.getReader == "function" && typeof value.cancel == "function" && typeof value.tee == "function", isIterable = (value) => value && Symbol.iterator in value, carriage = `\r
`, dashes = "-".repeat(2), carriageLength = Buffer.byteLength(carriage), getFooter = (boundary) => `${dashes}${boundary}${dashes}${carriage.repeat(2)}`;
    function getHeader(boundary, name, field) {
      let header = "";
      if (header += `${dashes}${boundary}${carriage}`, header += `Content-Disposition: form-data; name="${name}"`, isBlob(field)) {
        let { name: name2 = "blob", type: type2 } = (
          /** @type {Blob & {name?:string}} */
          field
        );
        header += `; filename="${name2}"${carriage}`, header += `Content-Type: ${type2 || "application/octet-stream"}`;
      }
      return `${header}${carriage.repeat(2)}`;
    }
    var getBoundary = () => crypto.randomBytes(8).toString("hex");
    async function* formDataIterator(form, boundary) {
      let encoder2 = new TextEncoder();
      for (let [name, value] of form)
        yield encoder2.encode(getHeader(boundary, name, value)), isBlob(value) ? yield* value.stream() : yield encoder2.encode(value), yield encoder2.encode(carriage);
      yield encoder2.encode(getFooter(boundary));
    }
    function getFormDataLength(form, boundary) {
      let length = 0;
      for (let [name, value] of form)
        length += Buffer.byteLength(getHeader(boundary, name, value)), isBlob(value) ? length += value.size : length += Buffer.byteLength(String(value)), length += carriageLength;
      return length += Buffer.byteLength(getFooter(boundary)), length;
    }
    var toFormData = async (source) => {
      let { body, headers } = source, contentType = (headers == null ? void 0 : headers.get("Content-Type")) || "";
      if (contentType.startsWith("application/x-www-form-urlencoded") && body != null) {
        let form = new webFormData.FormData(), bodyText = await source.text();
        return new URLSearchParams(bodyText).forEach((v, k) => form.append(k, v)), form;
      }
      let [type2, boundary] = contentType.split(/\s*;\s*boundary=/);
      if (type2 === "multipart/form-data" && boundary != null && body != null) {
        let form = new webFormData.FormData(), parts = multipartParser.iterateMultipart(body, boundary);
        for await (let { name, data, filename, contentType: contentType2 } of parts)
          filename ? form.append(name, new File([data], filename, { type: contentType2 })) : form.append(name, new TextDecoder().decode(data), filename);
        return form;
      } else
        throw new TypeError("Could not parse content as FormData.");
    }, encoder = new util.TextEncoder(), decoder = new util.TextDecoder(), encode = (text) => encoder.encode(text), decode = (bytes) => decoder.decode(bytes), { readableHighWaterMark } = new Stream.Readable(), INTERNALS$2 = Symbol("Body internals"), Body = class {
      /**
       * @param {BodyInit|Stream|null} body
       * @param {{size?:number}} options
       */
      constructor(body, {
        size: size2 = 0
      } = {}) {
        let state = {
          /** @type {null|ReadableStream<Uint8Array>} */
          body: null,
          /** @type {string|null} */
          type: null,
          /** @type {number|null} */
          size: null,
          /** @type {null|string} */
          boundary: null,
          disturbed: !1,
          /** @type {null|Error} */
          error: null
        };
        if (this[INTERNALS$2] = state, body === null)
          state.body = null, state.size = 0;
        else if (isURLSearchParameters(body)) {
          let bytes = encode(body.toString());
          state.body = fromBytes(bytes), state.size = bytes.byteLength, state.type = "application/x-www-form-urlencoded;charset=UTF-8";
        } else if (isBlob(body))
          state.size = body.size, state.type = body.type || null, state.body = body.stream();
        else if (body instanceof Uint8Array)
          state.body = fromBytes(body), state.size = body.byteLength;
        else if (util.types.isAnyArrayBuffer(body)) {
          let bytes = new Uint8Array(body);
          state.body = fromBytes(bytes), state.size = bytes.byteLength;
        } else if (ArrayBuffer.isView(body)) {
          let bytes = new Uint8Array(body.buffer, body.byteOffset, body.byteLength);
          state.body = fromBytes(bytes), state.size = bytes.byteLength;
        } else if (isReadableStream(body))
          state.body = body;
        else if (isFormData(body)) {
          let boundary = `NodeFetchFormDataBoundary${getBoundary()}`;
          state.type = `multipart/form-data; boundary=${boundary}`, state.size = getFormDataLength(body, boundary), state.body = fromAsyncIterable(formDataIterator(body, boundary));
        } else if (isMultipartFormDataStream(body))
          state.type = `multipart/form-data; boundary=${body.getBoundary()}`, state.size = body.hasKnownLength() ? body.getLengthSync() : null, state.body = fromStream(body);
        else if (body instanceof Stream)
          state.body = fromStream(body);
        else {
          let bytes = encode(String(body));
          state.type = "text/plain;charset=UTF-8", state.size = bytes.byteLength, state.body = fromBytes(bytes);
        }
        this.size = size2;
      }
      /** @type {Headers} */
      /* c8 ignore next 3 */
      get headers() {
        throw new TypeError("'get headers' called on an object that does not implements interface.");
      }
      get body() {
        return this[INTERNALS$2].body;
      }
      get bodyUsed() {
        return this[INTERNALS$2].disturbed;
      }
      /**
       * Decode response as ArrayBuffer
       *
       * @return {Promise<ArrayBuffer>}
       */
      async arrayBuffer() {
        let { buffer, byteOffset, byteLength } = await consumeBody(this);
        return buffer.slice(byteOffset, byteOffset + byteLength);
      }
      /**
       * Return raw response as Blob
       *
       * @return Promise
       */
      async blob() {
        let ct = this.headers && this.headers.get("content-type") || this[INTERNALS$2].body && this[INTERNALS$2].type || "", buf = await consumeBody(this);
        return new webBlob.Blob([buf], {
          type: ct
        });
      }
      /**
       * Decode response as json
       *
       * @return  Promise
       */
      async json() {
        return JSON.parse(await this.text());
      }
      /**
       * Decode response as text
       *
       * @return  Promise
       */
      async text() {
        let buffer = await consumeBody(this);
        return decode(buffer);
      }
      /**
       * @returns {Promise<FormData>}
       */
      async formData() {
        return toFormData(this);
      }
    };
    Object.defineProperties(Body.prototype, {
      body: { enumerable: !0 },
      bodyUsed: { enumerable: !0 },
      arrayBuffer: { enumerable: !0 },
      blob: { enumerable: !0 },
      json: { enumerable: !0 },
      text: { enumerable: !0 },
      formData: { enumerable: !0 }
    });
    async function consumeBody(data) {
      let state = data[INTERNALS$2];
      if (state.disturbed)
        throw new TypeError(`body used already for: ${data.url}`);
      if (state.disturbed = !0, state.error)
        throw state.error;
      let { body } = state;
      if (body === null)
        return new Uint8Array(0);
      let [buffer, chunks, limit] = data.size > 0 ? [new Uint8Array(data.size), [], data.size] : [null, [], 1 / 0], offset2 = 0, source = streamIterator(body);
      try {
        for await (let chunk of source) {
          let bytes = chunk instanceof Uint8Array ? chunk : Buffer.from(chunk);
          if (offset2 + bytes.byteLength > limit) {
            let error2 = new FetchError(`content size at ${data.url} over limit: ${limit}`, "max-size");
            throw source.throw(error2), error2;
          } else
            buffer ? buffer.set(bytes, offset2) : chunks.push(bytes);
          offset2 += bytes.byteLength;
        }
        if (buffer) {
          if (offset2 < buffer.byteLength)
            throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`, "premature-close");
          return buffer;
        } else
          return writeBytes(new Uint8Array(offset2), chunks);
      } catch (error2) {
        if (error2 instanceof FetchBaseError)
          throw error2;
        if (error2 && error2.name === "AbortError")
          throw error2;
        {
          let e24 = (
            /** @type {import('./errors/fetch-error').SystemError} */
            error2
          );
          throw new FetchError(`Invalid response body while trying to fetch ${data.url}: ${e24.message}`, "system", e24);
        }
      }
    }
    var clone = (instance) => {
      let { body } = instance;
      if (instance.bodyUsed)
        throw new Error("cannot clone body after it is used");
      if (!body)
        return null;
      let [left, right] = body.tee();
      return instance[INTERNALS$2].body = left, right;
    }, extractContentType = (source) => source[INTERNALS$2].type, getTotalBytes = (source) => source[INTERNALS$2].size, writeToStream = (dest, { body }) => {
      body === null ? dest.end() : Stream.Readable.from(streamIterator(body)).pipe(dest);
    }, StreamIterableIterator = class {
      /**
       * @param {ReadableStream<T>} stream
       */
      constructor(stream) {
        this.stream = stream, this.reader = null;
      }
      /**
       * @returns {AsyncGenerator<T, void, void>}
       */
      [Symbol.asyncIterator]() {
        return this;
      }
      getReader() {
        if (this.reader)
          return this.reader;
        let reader = this.stream.getReader();
        return this.reader = reader, reader;
      }
      /**
       * @returns {Promise<IteratorResult<T, void>>}
       */
      next() {
        return (
          /** @type {Promise<IteratorResult<T, void>>} */
          this.getReader().read()
        );
      }
      /**
       * @returns {Promise<IteratorResult<T, void>>}
       */
      async return() {
        return this.reader && await this.reader.cancel(), { done: !0, value: void 0 };
      }
      /**
       * 
       * @param {any} error 
       * @returns {Promise<IteratorResult<T, void>>}
       */
      async throw(error2) {
        return await this.getReader().cancel(error2), { done: !0, value: void 0 };
      }
    }, streamIterator = (stream) => new StreamIterableIterator(stream), writeBytes = (buffer, chunks) => {
      let offset2 = 0;
      for (let chunk of chunks)
        buffer.set(chunk, offset2), offset2 += chunk.byteLength;
      return buffer;
    }, fromBytes = (bytes) => new webBlob.ReadableStream({
      start(controller) {
        controller.enqueue(bytes), controller.close();
      }
    }), fromAsyncIterable = (content) => new webBlob.ReadableStream(new AsyncIterablePump(content)), AsyncIterablePump = class {
      /**
       * @param {AsyncIterable<Uint8Array>} source
       */
      constructor(source) {
        this.source = source[Symbol.asyncIterator]();
      }
      /**
       * @param {ReadableStreamController<Uint8Array>} controller
       */
      async pull(controller) {
        try {
          for (; controller.desiredSize || 0 > 0; ) {
            let next = await this.source.next();
            if (next.done) {
              controller.close();
              break;
            } else
              controller.enqueue(next.value);
          }
        } catch (error2) {
          controller.error(error2);
        }
      }
      /**
       * @param {any} [reason]
       */
      cancel(reason) {
        reason ? typeof this.source.throw == "function" ? this.source.throw(reason) : typeof this.source.return == "function" && this.source.return() : typeof this.source.return == "function" && this.source.return();
      }
    }, fromStream = (source) => {
      let pump = new StreamPump(source);
      return new webBlob.ReadableStream(pump, pump);
    }, StreamPump = class {
      /**
       * @param {Stream & {
       * 	readableHighWaterMark?: number
       * 	readable?:boolean,
       * 	resume?: () => void,
       * 	pause?: () => void
       * 	destroy?: (error?:Error) => void
       * }} stream
       */
      constructor(stream) {
        this.highWaterMark = stream.readableHighWaterMark || readableHighWaterMark, this.accumalatedSize = 0, this.stream = stream, this.enqueue = this.enqueue.bind(this), this.error = this.error.bind(this), this.close = this.close.bind(this);
      }
      /**
       * @param {Uint8Array} [chunk]
       */
      size(chunk) {
        return (chunk == null ? void 0 : chunk.byteLength) || 0;
      }
      /**
       * @param {ReadableStreamController<Uint8Array>} controller
       */
      start(controller) {
        this.controller = controller, this.stream.on("data", this.enqueue), this.stream.once("error", this.error), this.stream.once("end", this.close), this.stream.once("close", this.close);
      }
      pull() {
        this.resume();
      }
      /**
       * @param {any} [reason]
       */
      cancel(reason) {
        this.stream.destroy && this.stream.destroy(reason), this.stream.off("data", this.enqueue), this.stream.off("error", this.error), this.stream.off("end", this.close), this.stream.off("close", this.close);
      }
      /**
       * @param {Uint8Array|string} chunk
       */
      enqueue(chunk) {
        if (this.controller)
          try {
            let bytes = chunk instanceof Uint8Array ? chunk : Buffer.from(chunk), available = (this.controller.desiredSize || 0) - bytes.byteLength;
            this.controller.enqueue(bytes), available <= 0 && this.pause();
          } catch {
            this.controller.error(new Error("Could not create Buffer, chunk must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object")), this.cancel();
          }
      }
      pause() {
        this.stream.pause && this.stream.pause();
      }
      resume() {
        this.stream.readable && this.stream.resume && this.stream.resume();
      }
      close() {
        this.controller && (this.controller.close(), delete this.controller);
      }
      /**
       * @param {Error} error 
       */
      error(error2) {
        this.controller && (this.controller.error(error2), delete this.controller);
      }
    }, validators = (
      /** @type {{validateHeaderName?:(name:string) => any, validateHeaderValue?:(name:string, value:string) => any}} */
      http
    ), validateHeaderName = typeof validators.validateHeaderName == "function" ? validators.validateHeaderName : (
      /**
       * @param {string} name
       */
      (name) => {
        if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name)) {
          let err = new TypeError(`Header name must be a valid HTTP token [${name}]`);
          throw Object.defineProperty(err, "code", { value: "ERR_INVALID_HTTP_TOKEN" }), err;
        }
      }
    ), validateHeaderValue = typeof validators.validateHeaderValue == "function" ? validators.validateHeaderValue : (
      /**
       * @param {string} name
       * @param {string} value
       */
      (name, value) => {
        if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
          let err = new TypeError(`Invalid character in header content ["${name}"]`);
          throw Object.defineProperty(err, "code", { value: "ERR_INVALID_CHAR" }), err;
        }
      }
    ), Headers2 = class extends URLSearchParams {
      /**
       * Headers class
       *
       * @constructor
       * @param {HeadersInit} [init] - Response headers
       */
      constructor(init) {
        let result = [];
        if (init instanceof Headers2) {
          let raw = init.raw();
          for (let [name, values] of Object.entries(raw))
            result.push(...values.map((value) => [name, value]));
        } else if (init != null)
          if (isIterable(init))
            result = [...init].map((pair) => {
              if (typeof pair != "object" || util.types.isBoxedPrimitive(pair))
                throw new TypeError("Each header pair must be an iterable object");
              return [...pair];
            }).map((pair) => {
              if (pair.length !== 2)
                throw new TypeError("Each header pair must be a name/value tuple");
              return [...pair];
            });
          else if (typeof init == "object" && init !== null)
            result.push(...Object.entries(init));
          else
            throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");
        return result = result.length > 0 ? result.map(([name, value]) => (validateHeaderName(name), validateHeaderValue(name, String(value)), [String(name).toLowerCase(), String(value)])) : [], super(result), new Proxy(this, {
          get(target, p, receiver) {
            switch (p) {
              case "append":
              case "set":
                return (name, value) => (validateHeaderName(name), validateHeaderValue(name, String(value)), URLSearchParams.prototype[p].call(
                  target,
                  String(name).toLowerCase(),
                  String(value)
                ));
              case "delete":
              case "has":
              case "getAll":
                return (name) => (validateHeaderName(name), URLSearchParams.prototype[p].call(
                  target,
                  String(name).toLowerCase()
                ));
              case "keys":
                return () => (target.sort(), new Set(URLSearchParams.prototype.keys.call(target)).keys());
              default:
                return Reflect.get(target, p, receiver);
            }
          }
          /* c8 ignore next */
        });
      }
      get [Symbol.toStringTag]() {
        return this.constructor.name;
      }
      toString() {
        return Object.prototype.toString.call(this);
      }
      /**
       *
       * @param {string} name
       */
      get(name) {
        let values = this.getAll(name);
        if (values.length === 0)
          return null;
        let value = values.join(", ");
        return /^content-encoding$/i.test(name) && (value = value.toLowerCase()), value;
      }
      /**
       * @param {(value: string, key: string, parent: this) => void} callback
       * @param {any} thisArg
       * @returns {void}
       */
      forEach(callback, thisArg = void 0) {
        for (let name of this.keys())
          Reflect.apply(callback, thisArg, [this.get(name), name, this]);
      }
      /**
       * @returns {IterableIterator<string>}
       */
      *values() {
        for (let name of this.keys())
          yield (
            /** @type {string} */
            this.get(name)
          );
      }
      /**
       * @returns {IterableIterator<[string, string]>}
       */
      *entries() {
        for (let name of this.keys())
          yield [
            name,
            /** @type {string} */
            this.get(name)
          ];
      }
      [Symbol.iterator]() {
        return this.entries();
      }
      /**
       * Node-fetch non-spec method
       * returning all headers and their values as array
       * @returns {Record<string, string[]>}
       */
      raw() {
        return [...this.keys()].reduce(
          (result, key) => (result[key] = this.getAll(key), result),
          /** @type {Record<string, string[]>} */
          {}
        );
      }
      /**
       * For better console.log(headers) and also to convert Headers into Node.js Request compatible format
       */
      [Symbol.for("nodejs.util.inspect.custom")]() {
        return [...this.keys()].reduce(
          (result, key) => {
            let values = this.getAll(key);
            return key === "host" ? result[key] = values[0] : result[key] = values.length > 1 ? values : values[0], result;
          },
          /** @type {Record<string, string|string[]>} */
          {}
        );
      }
    };
    Object.defineProperties(
      Headers2.prototype,
      ["get", "entries", "forEach", "values"].reduce(
        (result, property) => (result[property] = { enumerable: !0 }, result),
        /** @type {Record<string, {enumerable:true}>} */
        {}
      )
    );
    function fromRawHeaders(headers = []) {
      return new Headers2(
        headers.reduce(
          (result, value, index2, array) => (index2 % 2 === 0 && result.push(array.slice(index2, index2 + 2)), result),
          /** @type {string[][]} */
          []
        ).filter(([name, value]) => {
          try {
            return validateHeaderName(name), validateHeaderValue(name, String(value)), !0;
          } catch {
            return !1;
          }
        })
      );
    }
    var redirectStatus = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]), isRedirect = (code) => redirectStatus.has(code), INTERNALS$1 = Symbol("Response internals"), Response3 = class extends Body {
      /**
       * @param {BodyInit|import('stream').Stream|null} [body] - Readable stream
       * @param {ResponseInit & Ext} [options] - Response options
       */
      constructor(body = null, options = {}) {
        super(body, options);
        let status = options.status || 200, headers = new Headers2(options.headers);
        if (body !== null && !headers.has("Content-Type")) {
          let contentType = extractContentType(this);
          contentType && headers.append("Content-Type", contentType);
        }
        this[INTERNALS$1] = {
          url: options.url,
          status,
          statusText: options.statusText || "",
          headers,
          counter: options.counter || 0,
          highWaterMark: options.highWaterMark
        };
      }
      /**
       * @type {ResponseType}
       */
      get type() {
        return "default";
      }
      get url() {
        return this[INTERNALS$1].url || "";
      }
      get status() {
        return this[INTERNALS$1].status;
      }
      /**
       * Convenience property representing if the request ended normally
       */
      get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
      get redirected() {
        return this[INTERNALS$1].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$1].statusText;
      }
      /**
       * @type {Headers}
       */
      get headers() {
        return this[INTERNALS$1].headers;
      }
      get highWaterMark() {
        return this[INTERNALS$1].highWaterMark;
      }
      /**
       * Clone this response
       *
       * @returns {Response}
       */
      clone() {
        return new Response3(clone(this), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          size: this.size
        });
      }
      /**
       * @param {string} url    The URL that the new response is to originate from.
       * @param {number} status An optional status code for the response (e.g., 302.)
       * @returns {Response}    A Response object.
       */
      static redirect(url2, status = 302) {
        if (!isRedirect(status))
          throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
        return new Response3(null, {
          headers: {
            location: new URL(url2).toString()
          },
          status
        });
      }
      get [Symbol.toStringTag]() {
        return "Response";
      }
    };
    Object.defineProperties(Response3.prototype, {
      url: { enumerable: !0 },
      status: { enumerable: !0 },
      ok: { enumerable: !0 },
      redirected: { enumerable: !0 },
      statusText: { enumerable: !0 },
      headers: { enumerable: !0 },
      clone: { enumerable: !0 }
    });
    var getSearch = (parsedURL) => {
      if (parsedURL.search)
        return parsedURL.search;
      let lastOffset = parsedURL.href.length - 1, hash = parsedURL.hash || (parsedURL.href[lastOffset] === "#" ? "#" : "");
      return parsedURL.href[lastOffset - hash.length] === "?" ? "?" : "";
    }, INTERNALS = Symbol("Request internals"), forbiddenMethods = /* @__PURE__ */ new Set(["CONNECT", "TRACE", "TRACK"]), normalizedMethods = /* @__PURE__ */ new Set(["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"]), isRequest = (object) => typeof object == "object" && typeof object[INTERNALS] == "object", Request2 = class extends Body {
      /**
       * @param {string|Request|URL} info  Url or Request instance
       * @param {RequestInit & RequestExtraOptions} init   Custom options
       */
      constructor(info, init = {}) {
        let parsedURL, settings;
        isRequest(info) ? (parsedURL = new URL(info.url), settings = info) : (parsedURL = new URL(info), settings = {});
        let method = init.method || settings.method || "GET";
        if (forbiddenMethods.has(method.toUpperCase()))
          throw new TypeError(`Failed to construct 'Request': '${method}' HTTP method is unsupported.`);
        normalizedMethods.has(method.toUpperCase()) && (method = method.toUpperCase());
        let inputBody = init.body != null ? init.body : isRequest(info) && info.body !== null ? clone(info) : null;
        if (inputBody != null && (method === "GET" || method === "HEAD"))
          throw new TypeError("Request with GET/HEAD method cannot have body");
        super(inputBody, {
          size: init.size || settings.size || 0
        });
        let input = settings, headers = (
          /** @type {globalThis.Headers} */
          new Headers2(init.headers || input.headers || {})
        );
        if (inputBody !== null && !headers.has("Content-Type")) {
          let contentType = extractContentType(this);
          contentType && headers.append("Content-Type", contentType);
        }
        let signal = "signal" in init ? init.signal : isRequest(input) ? input.signal : null;
        if (signal != null && !isAbortSignal(signal))
          throw new TypeError("Expected signal to be an instanceof AbortSignal or EventTarget");
        if (!signal) {
          let AbortControllerConstructor = typeof AbortController < "u" ? AbortController : abortController.AbortController;
          signal = new AbortControllerConstructor().signal;
        }
        this[INTERNALS] = {
          method,
          redirect: init.redirect || input.redirect || "follow",
          headers,
          credentials: init.credentials || "same-origin",
          parsedURL,
          signal: signal || null
        }, this.keepalive, this.follow = init.follow === void 0 ? input.follow === void 0 ? 20 : input.follow : init.follow, this.compress = init.compress === void 0 ? input.compress === void 0 ? !0 : input.compress : init.compress, this.counter = init.counter || input.counter || 0, this.agent = init.agent || input.agent, this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384, this.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || !1;
      }
      /**
       * @type {RequestCache}
       */
      get cache() {
        return "default";
      }
      /**
       * @type {RequestCredentials}
       */
      get credentials() {
        return this[INTERNALS].credentials;
      }
      /**
       * @type {RequestDestination}
       */
      get destination() {
        return "";
      }
      get integrity() {
        return "";
      }
      /** @type {RequestMode} */
      get mode() {
        return "cors";
      }
      /** @type {string} */
      get referrer() {
        return "";
      }
      /** @type {ReferrerPolicy} */
      get referrerPolicy() {
        return "";
      }
      get method() {
        return this[INTERNALS].method;
      }
      /**
       * @type {string}
       */
      get url() {
        return url.format(this[INTERNALS].parsedURL);
      }
      /**
       * @type {globalThis.Headers}
       */
      get headers() {
        return this[INTERNALS].headers;
      }
      get redirect() {
        return this[INTERNALS].redirect;
      }
      /**
       * @returns {AbortSignal}
       */
      get signal() {
        return this[INTERNALS].signal;
      }
      /**
       * Clone this request
       *
       * @return  {globalThis.Request}
       */
      clone() {
        return new Request2(this);
      }
      get [Symbol.toStringTag]() {
        return "Request";
      }
    };
    Object.defineProperties(Request2.prototype, {
      method: { enumerable: !0 },
      url: { enumerable: !0 },
      headers: { enumerable: !0 },
      redirect: { enumerable: !0 },
      clone: { enumerable: !0 },
      signal: { enumerable: !0 }
    });
    var getNodeRequestOptions = (request) => {
      let { parsedURL } = request[INTERNALS], headers = new Headers2(request[INTERNALS].headers);
      headers.has("Accept") || headers.set("Accept", "*/*");
      let contentLengthValue = null;
      if (request.body === null && /^(post|put)$/i.test(request.method) && (contentLengthValue = "0"), request.body !== null) {
        let totalBytes = getTotalBytes(request);
        typeof totalBytes == "number" && !Number.isNaN(totalBytes) && (contentLengthValue = String(totalBytes));
      }
      contentLengthValue && headers.set("Content-Length", contentLengthValue), headers.has("User-Agent") || headers.set("User-Agent", "node-fetch"), request.compress && !headers.has("Accept-Encoding") && headers.set("Accept-Encoding", "gzip,deflate,br");
      let { agent } = request;
      typeof agent == "function" && (agent = agent(parsedURL)), !headers.has("Connection") && !agent && headers.set("Connection", "close");
      let search = getSearch(parsedURL);
      return {
        path: parsedURL.pathname + search,
        pathname: parsedURL.pathname,
        hostname: parsedURL.hostname,
        protocol: parsedURL.protocol,
        port: parsedURL.port,
        hash: parsedURL.hash,
        search: parsedURL.search,
        // @ts-ignore - it does not has a query
        query: parsedURL.query,
        href: parsedURL.href,
        method: request.method,
        // @ts-ignore - not sure what this supposed to do
        headers: headers[Symbol.for("nodejs.util.inspect.custom")](),
        insecureHTTPParser: request.insecureHTTPParser,
        agent
      };
    }, AbortError = class extends FetchBaseError {
      /**
       * @param {string} message 
       * @param {string} [type]
       */
      constructor(message2, type2 = "aborted") {
        super(message2, type2);
      }
    }, supportedSchemas = /* @__PURE__ */ new Set(["data:", "http:", "https:", "file:"]);
    async function fetch2(url2, options_ = {}) {
      return new Promise((resolve, reject) => {
        let request = new Request2(url2, options_), options = getNodeRequestOptions(request);
        if (!supportedSchemas.has(options.protocol))
          throw new TypeError(`node-fetch cannot load ${url2}. URL scheme "${options.protocol.replace(/:$/, "")}" is not supported.`);
        if (options.protocol === "data:") {
          let data = dataUriToBuffer(request.url.toString()), response2 = new Response3(data, { headers: { "Content-Type": data.typeFull } });
          resolve(response2);
          return;
        }
        if (options.protocol === "file:") {
          let stream = fs.createReadStream(new URL(request.url)), type2 = mime.lookup(request.url) || "application/octet-stream", response2 = new Response3(stream, { headers: { "Content-Type": type2 } });
          resolve(response2);
          return;
        }
        let send = (options.protocol === "https:" ? https : http).request, { signal } = request, response = null, response_ = null, abort = () => {
          let error2 = new AbortError("The operation was aborted.");
          reject(error2), request.body && request.body.cancel(error2), response_ && response_.emit("error", error2);
        };
        if (signal && signal.aborted) {
          abort();
          return;
        }
        let abortAndFinalize = () => {
          abort(), finalize();
        }, request_ = send(options);
        signal && signal.addEventListener("abort", abortAndFinalize);
        let finalize = () => {
          request_.abort(), signal && signal.removeEventListener("abort", abortAndFinalize);
        };
        request_.on("error", (err) => {
          reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err)), finalize();
        }), fixResponseChunkedTransferBadEnding(request_, (err) => {
          signal && signal.aborted || response_ == null || response_.emit("error", err);
        }), parseInt(process.version.substring(1)) < 14 && request_.on("socket", (s) => {
          s.prependListener("close", (hadError) => {
            let hasDataListener = s.listenerCount("data") > 0;
            if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
              let err = Object.assign(new Error("Premature close"), {
                code: "ERR_STREAM_PREMATURE_CLOSE"
              });
              response_ == null || response_.emit("error", err);
            }
          });
        }), request_.on("response", (incoming) => {
          response_ = incoming, request_.setTimeout(0);
          let headers = fromRawHeaders(response_.rawHeaders);
          if (isRedirect(Number(response_.statusCode))) {
            let location = headers.get("Location"), locationURL = location === null ? null : new URL(location, request.url);
            switch (request.redirect) {
              case "error":
                reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect")), finalize();
                return;
              case "manual":
                locationURL !== null && headers.set("Location", locationURL.toString());
                break;
              case "follow": {
                if (locationURL === null)
                  break;
                if (request.counter >= request.follow) {
                  reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect")), finalize();
                  return;
                }
                let requestOptions = {
                  headers: new Headers2(request.headers),
                  follow: request.follow,
                  counter: request.counter + 1,
                  agent: request.agent,
                  compress: request.compress,
                  method: request.method,
                  // Note: We can not use `request.body` because send would have
                  // consumed it already.
                  body: options_.body,
                  signal,
                  size: request.size
                }, isStreamBody = requestOptions.body instanceof webBlob.ReadableStream || requestOptions.body instanceof Stream.Readable;
                if (response_.statusCode !== 303 && isStreamBody) {
                  reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect")), finalize();
                  return;
                }
                (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === "POST") && (requestOptions.method = "GET", requestOptions.body = void 0, requestOptions.headers.delete("content-length")), fetch2(new Request2(locationURL.href, requestOptions)).then(resolve, reject), finalize();
                return;
              }
              default:
                return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));
            }
          }
          signal && response_.once("end", () => {
            signal.removeEventListener("abort", abortAndFinalize);
          });
          let body = Stream.pipeline(response_, new Stream.PassThrough(), reject);
          process.version < "v12.10" && response_.on("aborted", abortAndFinalize);
          let responseOptions = {
            url: request.url,
            status: response_.statusCode,
            statusText: response_.statusMessage,
            headers,
            size: request.size,
            counter: request.counter,
            highWaterMark: request.highWaterMark
          }, codings = headers.get("Content-Encoding");
          if (!request.compress || request.method === "HEAD" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
            response = new Response3(body, responseOptions), resolve(response);
            return;
          }
          let zlibOptions = {
            flush: zlib.Z_SYNC_FLUSH,
            finishFlush: zlib.Z_SYNC_FLUSH
          };
          if (codings === "gzip" || codings === "x-gzip") {
            body = Stream.pipeline(body, zlib.createGunzip(zlibOptions), reject), response = new Response3(fromAsyncIterable(body), responseOptions), resolve(response);
            return;
          }
          if (codings === "deflate" || codings === "x-deflate") {
            Stream.pipeline(response_, new Stream.PassThrough(), reject).once("data", (chunk) => {
              (chunk[0] & 15) === 8 ? body = Stream.pipeline(body, zlib.createInflate(), reject) : body = Stream.pipeline(body, zlib.createInflateRaw(), reject), response = new Response3(fromAsyncIterable(body), responseOptions), resolve(response);
            });
            return;
          }
          if (codings === "br") {
            body = Stream.pipeline(body, zlib.createBrotliDecompress(), reject), response = new Response3(fromAsyncIterable(body), responseOptions), resolve(response);
            return;
          }
          response = new Response3(fromAsyncIterable(body), responseOptions), resolve(response);
        }), writeToStream(request_, request);
      });
    }
    function fixResponseChunkedTransferBadEnding(request, errorCallback) {
      let LAST_CHUNK = Buffer.from(`0\r
\r
`), isChunkedTransfer = !1, properLastChunkReceived = !1, previousChunk;
      request.on("response", (response) => {
        let { headers } = response;
        isChunkedTransfer = headers["transfer-encoding"] === "chunked" && !headers["content-length"];
      }), request.on("socket", (socket) => {
        let onSocketClose = () => {
          if (isChunkedTransfer && !properLastChunkReceived) {
            let error2 = Object.assign(new Error("Premature close"), {
              code: "ERR_STREAM_PREMATURE_CLOSE"
            });
            errorCallback(error2);
          }
        }, onData = (buf) => {
          properLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0, !properLastChunkReceived && previousChunk && (properLastChunkReceived = Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0), previousChunk = buf;
        };
        socket.prependListener("close", onSocketClose), socket.on("data", onData), request.on("close", () => {
          socket.removeListener("close", onSocketClose), socket.removeListener("data", onData);
        });
      });
    }
    Object.defineProperty(exports, "Blob", {
      enumerable: !0,
      get: function() {
        return webBlob.Blob;
      }
    });
    Object.defineProperty(exports, "ReadableStream", {
      enumerable: !0,
      get: function() {
        return webBlob.ReadableStream;
      }
    });
    Object.defineProperty(exports, "FormData", {
      enumerable: !0,
      get: function() {
        return webFormData.FormData;
      }
    });
    exports.Headers = Headers2;
    exports.Request = Request2;
    exports.Response = Response3;
    exports.default = fetch2;
    exports.fetch = fetch2;
    exports = module2.exports = Object.assign(fetch2, exports);
  }
});

// node_modules/@remix-run/web-file/dist/src/file.cjs
var require_file = __commonJS({
  "node_modules/@remix-run/web-file/dist/src/file.cjs"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var webBlob = require_lib_node(), File2 = class extends webBlob.Blob {
      /**
       *
       * @param {BlobPart[]} init
       * @param {string} name - A USVString representing the file name or the path
       * to the file.
       * @param {FilePropertyBag} [options]
       */
      constructor(init, name = panic(new TypeError("File constructor requires name argument")), options = {}) {
        super(init, options), this._name = name, this._lastModified = options.lastModified || Date.now();
      }
      /**
       * The name of the file referenced by the File object.
       * @type {string}
       */
      get name() {
        return this._name;
      }
      /**
       * The path the URL of the File is relative to.
       * @type {string}
       */
      get webkitRelativePath() {
        return "";
      }
      /**
       * Returns the last modified time of the file, in millisecond since the UNIX
       * epoch (January 1st, 1970 at Midnight).
       * @returns {number}
       */
      get lastModified() {
        return this._lastModified;
      }
      get [Symbol.toStringTag]() {
        return "File";
      }
    }, panic = (error2) => {
      throw error2;
    };
    exports.File = File2;
  }
});

// node_modules/@remix-run/web-file/dist/src/lib.node.cjs
var require_lib_node4 = __commonJS({
  "node_modules/@remix-run/web-file/dist/src/lib.node.cjs"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var webBlob = require_lib_node(), file = require_file(), File2 = file.File;
    Object.defineProperty(exports, "Blob", {
      enumerable: !0,
      get: function() {
        return webBlob.Blob;
      }
    });
    exports.File = File2;
  }
});

// node_modules/@remix-run/node/dist/fetch.js
var require_fetch = __commonJS({
  "node_modules/@remix-run/node/dist/fetch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var webFetch = require_lib_node3(), webFile = require_lib_node4(), NodeRequest = class extends webFetch.Request {
      constructor(info, init) {
        super(info, init);
      }
      get headers() {
        return super.headers;
      }
      clone() {
        return new NodeRequest(this);
      }
    }, NodeResponse = class extends webFetch.Response {
      get headers() {
        return super.headers;
      }
      clone() {
        return super.clone();
      }
    }, fetch2 = (info, init) => (init = {
      // Disable compression handling so people can return the result of a fetch
      // directly in the loader without messing with the Content-Encoding header.
      compress: !1,
      ...init
    }, webFetch.fetch(info, init));
    Object.defineProperty(exports, "FormData", {
      enumerable: !0,
      get: function() {
        return webFetch.FormData;
      }
    });
    Object.defineProperty(exports, "Headers", {
      enumerable: !0,
      get: function() {
        return webFetch.Headers;
      }
    });
    Object.defineProperty(exports, "Blob", {
      enumerable: !0,
      get: function() {
        return webFile.Blob;
      }
    });
    Object.defineProperty(exports, "File", {
      enumerable: !0,
      get: function() {
        return webFile.File;
      }
    });
    exports.Request = NodeRequest;
    exports.Response = NodeResponse;
    exports.fetch = fetch2;
  }
});

// node_modules/@remix-run/node/dist/base64.js
var require_base642 = __commonJS({
  "node_modules/@remix-run/node/dist/base64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    function atob2(a9) {
      return Buffer.from(a9, "base64").toString("binary");
    }
    function btoa2(b) {
      return Buffer.from(b, "binary").toString("base64");
    }
    exports.atob = atob2;
    exports.btoa = btoa2;
  }
});

// node_modules/@remix-run/node/dist/globals.js
var require_globals = __commonJS({
  "node_modules/@remix-run/node/dist/globals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var webStream = require_stream(), abortController = require_abort_controller(), base64 = require_base642(), fetch2 = require_fetch(), webFile = require_lib_node4(), webFetch = require_lib_node3();
    function installGlobals() {
      global.atob = base64.atob, global.btoa = base64.btoa, global.Blob = webFile.Blob, global.File = webFile.File, global.Headers = webFetch.Headers, global.Request = fetch2.Request, global.Response = fetch2.Response, global.fetch = fetch2.fetch, global.FormData = webFetch.FormData, global.ReadableStream = webStream.ReadableStream, global.WritableStream = webStream.WritableStream, global.AbortController = global.AbortController || abortController.AbortController;
    }
    exports.installGlobals = installGlobals;
  }
});

// node_modules/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse;
    exports.serialize = serialize;
    var decode = decodeURIComponent, encode = encodeURIComponent, fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
    function parse(str, options) {
      if (typeof str != "string")
        throw new TypeError("argument str must be a string");
      for (var obj = {}, opt = options || {}, pairs = str.split(";"), dec = opt.decode || decode, i13 = 0; i13 < pairs.length; i13++) {
        var pair = pairs[i13], index2 = pair.indexOf("=");
        if (!(index2 < 0)) {
          var key = pair.substring(0, index2).trim();
          if (obj[key] == null) {
            var val = pair.substring(index2 + 1, pair.length).trim();
            val[0] === '"' && (val = val.slice(1, -1)), obj[key] = tryDecode(val, dec);
          }
        }
      }
      return obj;
    }
    function serialize(name, val, options) {
      var opt = options || {}, enc = opt.encode || encode;
      if (typeof enc != "function")
        throw new TypeError("option encode is invalid");
      if (!fieldContentRegExp.test(name))
        throw new TypeError("argument name is invalid");
      var value = enc(val);
      if (value && !fieldContentRegExp.test(value))
        throw new TypeError("argument val is invalid");
      var str = name + "=" + value;
      if (opt.maxAge != null) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge))
          throw new TypeError("option maxAge is invalid");
        str += "; Max-Age=" + Math.floor(maxAge);
      }
      if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain))
          throw new TypeError("option domain is invalid");
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!fieldContentRegExp.test(opt.path))
          throw new TypeError("option path is invalid");
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        if (typeof opt.expires.toUTCString != "function")
          throw new TypeError("option expires is invalid");
        str += "; Expires=" + opt.expires.toUTCString();
      }
      if (opt.httpOnly && (str += "; HttpOnly"), opt.secure && (str += "; Secure"), opt.sameSite) {
        var sameSite = typeof opt.sameSite == "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case !0:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch {
        return str;
      }
    }
  }
});

// node_modules/@remix-run/server-runtime/dist/warnings.js
var require_warnings = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/warnings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var alreadyWarned = {};
    function warnOnce2(condition, message2) {
      !condition && !alreadyWarned[message2] && (alreadyWarned[message2] = !0, console.warn(message2));
    }
    exports.warnOnce = warnOnce2;
  }
});

// node_modules/@remix-run/server-runtime/dist/cookies.js
var require_cookies = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/cookies.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var cookie = require_cookie(), warnings = require_warnings(), createCookieFactory = ({
      sign,
      unsign
    }) => (name, cookieOptions = {}) => {
      let {
        secrets = [],
        ...options
      } = {
        path: "/",
        sameSite: "lax",
        ...cookieOptions
      };
      return warnOnceAboutExpiresCookie(name, options.expires), {
        get name() {
          return name;
        },
        get isSigned() {
          return secrets.length > 0;
        },
        get expires() {
          return typeof options.maxAge < "u" ? new Date(Date.now() + options.maxAge * 1e3) : options.expires;
        },
        async parse(cookieHeader, parseOptions) {
          if (!cookieHeader)
            return null;
          let cookies = cookie.parse(cookieHeader, {
            ...options,
            ...parseOptions
          });
          return name in cookies ? cookies[name] === "" ? "" : await decodeCookieValue(unsign, cookies[name], secrets) : null;
        },
        async serialize(value, serializeOptions) {
          return cookie.serialize(name, value === "" ? "" : await encodeCookieValue(sign, value, secrets), {
            ...options,
            ...serializeOptions
          });
        }
      };
    }, isCookie = (object) => object != null && typeof object.name == "string" && typeof object.isSigned == "boolean" && typeof object.parse == "function" && typeof object.serialize == "function";
    async function encodeCookieValue(sign, value, secrets) {
      let encoded = encodeData(value);
      return secrets.length > 0 && (encoded = await sign(encoded, secrets[0])), encoded;
    }
    async function decodeCookieValue(unsign, value, secrets) {
      if (secrets.length > 0) {
        for (let secret of secrets) {
          let unsignedValue = await unsign(value, secret);
          if (unsignedValue !== !1)
            return decodeData(unsignedValue);
        }
        return null;
      }
      return decodeData(value);
    }
    function encodeData(value) {
      return btoa(myUnescape(encodeURIComponent(JSON.stringify(value))));
    }
    function decodeData(value) {
      try {
        return JSON.parse(decodeURIComponent(myEscape(atob(value))));
      } catch {
        return {};
      }
    }
    function myEscape(value) {
      let str = value.toString(), result = "", index2 = 0, chr, code;
      for (; index2 < str.length; )
        chr = str.charAt(index2++), /[\w*+\-./@]/.exec(chr) ? result += chr : (code = chr.charCodeAt(0), code < 256 ? result += "%" + hex2(code, 2) : result += "%u" + hex2(code, 4).toUpperCase());
      return result;
    }
    function hex2(code, length) {
      let result = code.toString(16);
      for (; result.length < length; )
        result = "0" + result;
      return result;
    }
    function myUnescape(value) {
      let str = value.toString(), result = "", index2 = 0, chr, part;
      for (; index2 < str.length; ) {
        if (chr = str.charAt(index2++), chr === "%") {
          if (str.charAt(index2) === "u") {
            if (part = str.slice(index2 + 1, index2 + 5), /^[\da-f]{4}$/i.exec(part)) {
              result += String.fromCharCode(parseInt(part, 16)), index2 += 5;
              continue;
            }
          } else if (part = str.slice(index2, index2 + 2), /^[\da-f]{2}$/i.exec(part)) {
            result += String.fromCharCode(parseInt(part, 16)), index2 += 2;
            continue;
          }
        }
        result += chr;
      }
      return result;
    }
    function warnOnceAboutExpiresCookie(name, expires) {
      warnings.warnOnce(!expires, `The "${name}" cookie has an "expires" property set. This will cause the expires value to not be updated when the session is committed. Instead, you should set the expires value when serializing the cookie. You can use \`commitSession(session, { expires })\` if using a session storage object, or \`cookie.serialize("value", { expires })\` if you're using the cookie directly.`);
    }
    exports.createCookieFactory = createCookieFactory;
    exports.isCookie = isCookie;
  }
});

// node_modules/@remix-run/server-runtime/dist/formData.js
var require_formData = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/formData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var multipartParser = require_src2();
    function composeUploadHandlers(...handlers) {
      return async (part) => {
        for (let handler of handlers) {
          let value = await handler(part);
          if (typeof value < "u" && value !== null)
            return value;
        }
      };
    }
    async function parseMultipartFormData(request, uploadHandler) {
      let contentType = request.headers.get("Content-Type") || "", [type2, boundary] = contentType.split(/\s*;\s*boundary=/);
      if (!request.body || !boundary || type2 !== "multipart/form-data")
        throw new TypeError("Could not parse content as FormData.");
      let formData = new FormData(), parts = multipartParser.streamMultipart(request.body, boundary);
      for await (let part of parts) {
        if (part.done)
          break;
        typeof part.filename == "string" && (part.filename = part.filename.split(/[/\\]/).pop());
        let value = await uploadHandler(part);
        typeof value < "u" && value !== null && formData.append(part.name, value);
      }
      return formData;
    }
    exports.composeUploadHandlers = composeUploadHandlers;
    exports.parseMultipartFormData = parseMultipartFormData;
  }
});

// node_modules/@remix-run/router/dist/router.cjs.js
var require_router_cjs = __commonJS({
  "node_modules/@remix-run/router/dist/router.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    function _extends2() {
      return _extends2 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i13 = 1; i13 < arguments.length; i13++) {
          var source = arguments[i13];
          for (var key in source)
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
        return target;
      }, _extends2.apply(this, arguments);
    }
    exports.Action = void 0;
    (function(Action) {
      Action.Pop = "POP", Action.Push = "PUSH", Action.Replace = "REPLACE";
    })(exports.Action || (exports.Action = {}));
    var PopStateEventType = "popstate";
    function createMemoryHistory(options) {
      options === void 0 && (options = {});
      let {
        initialEntries = ["/"],
        initialIndex,
        v5Compat = !1
      } = options, entries;
      entries = initialEntries.map((entry2, index3) => createMemoryLocation(entry2, typeof entry2 == "string" ? null : entry2.state, index3 === 0 ? "default" : void 0));
      let index2 = clampIndex(initialIndex ?? entries.length - 1), action = exports.Action.Pop, listener = null;
      function clampIndex(n) {
        return Math.min(Math.max(n, 0), entries.length - 1);
      }
      function getCurrentLocation() {
        return entries[index2];
      }
      function createMemoryLocation(to, state, key) {
        state === void 0 && (state = null);
        let location = createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);
        return warning2(location.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to)), location;
      }
      function createHref(to) {
        return typeof to == "string" ? to : createPath(to);
      }
      return {
        get index() {
          return index2;
        },
        get action() {
          return action;
        },
        get location() {
          return getCurrentLocation();
        },
        createHref,
        createURL(to) {
          return new URL(createHref(to), "http://localhost");
        },
        encodeLocation(to) {
          let path = typeof to == "string" ? parsePath(to) : to;
          return {
            pathname: path.pathname || "",
            search: path.search || "",
            hash: path.hash || ""
          };
        },
        push(to, state) {
          action = exports.Action.Push;
          let nextLocation = createMemoryLocation(to, state);
          index2 += 1, entries.splice(index2, entries.length, nextLocation), v5Compat && listener && listener({
            action,
            location: nextLocation,
            delta: 1
          });
        },
        replace(to, state) {
          action = exports.Action.Replace;
          let nextLocation = createMemoryLocation(to, state);
          entries[index2] = nextLocation, v5Compat && listener && listener({
            action,
            location: nextLocation,
            delta: 0
          });
        },
        go(delta) {
          action = exports.Action.Pop;
          let nextIndex = clampIndex(index2 + delta), nextLocation = entries[nextIndex];
          index2 = nextIndex, listener && listener({
            action,
            location: nextLocation,
            delta
          });
        },
        listen(fn) {
          return listener = fn, () => {
            listener = null;
          };
        }
      };
    }
    function createBrowserHistory(options) {
      options === void 0 && (options = {});
      function createBrowserLocation(window2, globalHistory) {
        let {
          pathname,
          search,
          hash
        } = window2.location;
        return createLocation(
          "",
          {
            pathname,
            search,
            hash
          },
          // state defaults to `null` because `window.history.state` does
          globalHistory.state && globalHistory.state.usr || null,
          globalHistory.state && globalHistory.state.key || "default"
        );
      }
      function createBrowserHref(window2, to) {
        return typeof to == "string" ? to : createPath(to);
      }
      return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
    }
    function createHashHistory(options) {
      options === void 0 && (options = {});
      function createHashLocation(window2, globalHistory) {
        let {
          pathname = "/",
          search = "",
          hash = ""
        } = parsePath(window2.location.hash.substr(1));
        return createLocation(
          "",
          {
            pathname,
            search,
            hash
          },
          // state defaults to `null` because `window.history.state` does
          globalHistory.state && globalHistory.state.usr || null,
          globalHistory.state && globalHistory.state.key || "default"
        );
      }
      function createHashHref(window2, to) {
        let base = window2.document.querySelector("base"), href = "";
        if (base && base.getAttribute("href")) {
          let url = window2.location.href, hashIndex = url.indexOf("#");
          href = hashIndex === -1 ? url : url.slice(0, hashIndex);
        }
        return href + "#" + (typeof to == "string" ? to : createPath(to));
      }
      function validateHashLocation(location, to) {
        warning2(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
      }
      return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
    }
    function invariant2(value, message2) {
      if (value === !1 || value === null || typeof value > "u")
        throw new Error(message2);
    }
    function warning2(cond, message2) {
      if (!cond) {
        typeof console < "u" && console.warn(message2);
        try {
          throw new Error(message2);
        } catch {
        }
      }
    }
    function createKey() {
      return Math.random().toString(36).substr(2, 8);
    }
    function getHistoryState(location, index2) {
      return {
        usr: location.state,
        key: location.key,
        idx: index2
      };
    }
    function createLocation(current, to, state, key) {
      return state === void 0 && (state = null), _extends2({
        pathname: typeof current == "string" ? current : current.pathname,
        search: "",
        hash: ""
      }, typeof to == "string" ? parsePath(to) : to, {
        state,
        // TODO: This could be cleaned up.  push/replace should probably just take
        // full Locations now and avoid the need to run through this flow at all
        // But that's a pretty big refactor to the current test suite so going to
        // keep as is for the time being and just let any incoming keys take precedence
        key: to && to.key || key || createKey()
      });
    }
    function createPath(_ref) {
      let {
        pathname = "/",
        search = "",
        hash = ""
      } = _ref;
      return search && search !== "?" && (pathname += search.charAt(0) === "?" ? search : "?" + search), hash && hash !== "#" && (pathname += hash.charAt(0) === "#" ? hash : "#" + hash), pathname;
    }
    function parsePath(path) {
      let parsedPath = {};
      if (path) {
        let hashIndex = path.indexOf("#");
        hashIndex >= 0 && (parsedPath.hash = path.substr(hashIndex), path = path.substr(0, hashIndex));
        let searchIndex = path.indexOf("?");
        searchIndex >= 0 && (parsedPath.search = path.substr(searchIndex), path = path.substr(0, searchIndex)), path && (parsedPath.pathname = path);
      }
      return parsedPath;
    }
    function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
      options === void 0 && (options = {});
      let {
        window: window2 = document.defaultView,
        v5Compat = !1
      } = options, globalHistory = window2.history, action = exports.Action.Pop, listener = null, index2 = getIndex();
      index2 == null && (index2 = 0, globalHistory.replaceState(_extends2({}, globalHistory.state, {
        idx: index2
      }), ""));
      function getIndex() {
        return (globalHistory.state || {
          idx: null
        }).idx;
      }
      function handlePop() {
        action = exports.Action.Pop;
        let nextIndex = getIndex(), delta = nextIndex == null ? null : nextIndex - index2;
        index2 = nextIndex, listener && listener({
          action,
          location: history.location,
          delta
        });
      }
      function push(to, state) {
        action = exports.Action.Push;
        let location = createLocation(history.location, to, state);
        validateLocation && validateLocation(location, to), index2 = getIndex() + 1;
        let historyState = getHistoryState(location, index2), url = history.createHref(location);
        try {
          globalHistory.pushState(historyState, "", url);
        } catch (error2) {
          if (error2 instanceof DOMException && error2.name === "DataCloneError")
            throw error2;
          window2.location.assign(url);
        }
        v5Compat && listener && listener({
          action,
          location: history.location,
          delta: 1
        });
      }
      function replace(to, state) {
        action = exports.Action.Replace;
        let location = createLocation(history.location, to, state);
        validateLocation && validateLocation(location, to), index2 = getIndex();
        let historyState = getHistoryState(location, index2), url = history.createHref(location);
        globalHistory.replaceState(historyState, "", url), v5Compat && listener && listener({
          action,
          location: history.location,
          delta: 0
        });
      }
      function createURL(to) {
        let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href, href = typeof to == "string" ? to : createPath(to);
        return invariant2(base, "No window.location.(origin|href) available to create URL for href: " + href), new URL(href, base);
      }
      let history = {
        get action() {
          return action;
        },
        get location() {
          return getLocation(window2, globalHistory);
        },
        listen(fn) {
          if (listener)
            throw new Error("A history only accepts one active listener");
          return window2.addEventListener(PopStateEventType, handlePop), listener = fn, () => {
            window2.removeEventListener(PopStateEventType, handlePop), listener = null;
          };
        },
        createHref(to) {
          return createHref(window2, to);
        },
        createURL,
        encodeLocation(to) {
          let url = createURL(to);
          return {
            pathname: url.pathname,
            search: url.search,
            hash: url.hash
          };
        },
        push,
        replace,
        go(n) {
          return globalHistory.go(n);
        }
      };
      return history;
    }
    var ResultType;
    (function(ResultType2) {
      ResultType2.data = "data", ResultType2.deferred = "deferred", ResultType2.redirect = "redirect", ResultType2.error = "error";
    })(ResultType || (ResultType = {}));
    var immutableRouteKeys = /* @__PURE__ */ new Set(["lazy", "caseSensitive", "path", "id", "index", "children"]);
    function isIndexRoute(route) {
      return route.index === !0;
    }
    function convertRoutesToDataRoutes(routes2, mapRouteProperties, parentPath, manifest) {
      return parentPath === void 0 && (parentPath = []), manifest === void 0 && (manifest = {}), routes2.map((route, index2) => {
        let treePath = [...parentPath, index2], id3 = typeof route.id == "string" ? route.id : treePath.join("-");
        if (invariant2(route.index !== !0 || !route.children, "Cannot specify children on an index route"), invariant2(!manifest[id3], 'Found a route id collision on id "' + id3 + `".  Route id's must be globally unique within Data Router usages`), isIndexRoute(route)) {
          let indexRoute = _extends2({}, route, mapRouteProperties(route), {
            id: id3
          });
          return manifest[id3] = indexRoute, indexRoute;
        } else {
          let pathOrLayoutRoute = _extends2({}, route, mapRouteProperties(route), {
            id: id3,
            children: void 0
          });
          return manifest[id3] = pathOrLayoutRoute, route.children && (pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest)), pathOrLayoutRoute;
        }
      });
    }
    function matchRoutes(routes2, locationArg, basename) {
      basename === void 0 && (basename = "/");
      let location = typeof locationArg == "string" ? parsePath(locationArg) : locationArg, pathname = stripBasename(location.pathname || "/", basename);
      if (pathname == null)
        return null;
      let branches = flattenRoutes(routes2);
      rankRouteBranches(branches);
      let matches = null;
      for (let i13 = 0; matches == null && i13 < branches.length; ++i13)
        matches = matchRouteBranch(
          branches[i13],
          // Incoming pathnames are generally encoded from either window.location
          // or from router.navigate, but we want to match against the unencoded
          // paths in the route definitions.  Memory router locations won't be
          // encoded here but there also shouldn't be anything to decode so this
          // should be a safe operation.  This avoids needing matchRoutes to be
          // history-aware.
          safelyDecodeURI(pathname)
        );
      return matches;
    }
    function flattenRoutes(routes2, branches, parentsMeta, parentPath) {
      branches === void 0 && (branches = []), parentsMeta === void 0 && (parentsMeta = []), parentPath === void 0 && (parentPath = "");
      let flattenRoute = (route, index2, relativePath) => {
        let meta = {
          relativePath: relativePath === void 0 ? route.path || "" : relativePath,
          caseSensitive: route.caseSensitive === !0,
          childrenIndex: index2,
          route
        };
        meta.relativePath.startsWith("/") && (invariant2(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes."), meta.relativePath = meta.relativePath.slice(parentPath.length));
        let path = joinPaths([parentPath, meta.relativePath]), routesMeta = parentsMeta.concat(meta);
        route.children && route.children.length > 0 && (invariant2(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== !0,
          "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
        ), flattenRoutes(route.children, branches, routesMeta, path)), !(route.path == null && !route.index) && branches.push({
          path,
          score: computeScore(path, route.index),
          routesMeta
        });
      };
      return routes2.forEach((route, index2) => {
        var _route$path;
        if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?")))
          flattenRoute(route, index2);
        else
          for (let exploded of explodeOptionalSegments(route.path))
            flattenRoute(route, index2, exploded);
      }), branches;
    }
    function explodeOptionalSegments(path) {
      let segments = path.split("/");
      if (segments.length === 0)
        return [];
      let [first, ...rest] = segments, isOptional = first.endsWith("?"), required = first.replace(/\?$/, "");
      if (rest.length === 0)
        return isOptional ? [required, ""] : [required];
      let restExploded = explodeOptionalSegments(rest.join("/")), result = [];
      return result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/"))), isOptional && result.push(...restExploded), result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
    }
    function rankRouteBranches(branches) {
      branches.sort((a9, b) => a9.score !== b.score ? b.score - a9.score : compareIndexes(a9.routesMeta.map((meta) => meta.childrenIndex), b.routesMeta.map((meta) => meta.childrenIndex)));
    }
    var paramRe = /^:\w+$/, dynamicSegmentValue = 3, indexRouteValue = 2, emptySegmentValue = 1, staticSegmentValue = 10, splatPenalty = -2, isSplat = (s) => s === "*";
    function computeScore(path, index2) {
      let segments = path.split("/"), initialScore = segments.length;
      return segments.some(isSplat) && (initialScore += splatPenalty), index2 && (initialScore += indexRouteValue), segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
    }
    function compareIndexes(a9, b) {
      return a9.length === b.length && a9.slice(0, -1).every((n, i13) => n === b[i13]) ? (
        // If two routes are siblings, we should try to match the earlier sibling
        // first. This allows people to have fine-grained control over the matching
        // behavior by simply putting routes with identical paths in the order they
        // want them tried.
        a9[a9.length - 1] - b[b.length - 1]
      ) : (
        // Otherwise, it doesn't really make sense to rank non-siblings by index,
        // so they sort equally.
        0
      );
    }
    function matchRouteBranch(branch, pathname) {
      let {
        routesMeta
      } = branch, matchedParams = {}, matchedPathname = "/", matches = [];
      for (let i13 = 0; i13 < routesMeta.length; ++i13) {
        let meta = routesMeta[i13], end = i13 === routesMeta.length - 1, remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/", match = matchPath({
          path: meta.relativePath,
          caseSensitive: meta.caseSensitive,
          end
        }, remainingPathname);
        if (!match)
          return null;
        Object.assign(matchedParams, match.params);
        let route = meta.route;
        matches.push({
          // TODO: Can this as be avoided?
          params: matchedParams,
          pathname: joinPaths([matchedPathname, match.pathname]),
          pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
          route
        }), match.pathnameBase !== "/" && (matchedPathname = joinPaths([matchedPathname, match.pathnameBase]));
      }
      return matches;
    }
    function generatePath(originalPath, params) {
      params === void 0 && (params = {});
      let path = originalPath;
      path.endsWith("*") && path !== "*" && !path.endsWith("/*") && (warning2(!1, 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".')), path = path.replace(/\*$/, "/*"));
      let prefix2 = path.startsWith("/") ? "/" : "", segments = path.split(/\/+/).map((segment, index2, array) => {
        if (index2 === array.length - 1 && segment === "*")
          return params["*"];
        let keyMatch = segment.match(/^:(\w+)(\??)$/);
        if (keyMatch) {
          let [, key, optional] = keyMatch, param = params[key];
          return optional === "?" ? param ?? "" : (param == null && invariant2(!1, 'Missing ":' + key + '" param'), param);
        }
        return segment.replace(/\?$/g, "");
      }).filter((segment) => !!segment);
      return prefix2 + segments.join("/");
    }
    function matchPath(pattern, pathname) {
      typeof pattern == "string" && (pattern = {
        path: pattern,
        caseSensitive: !1,
        end: !0
      });
      let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end), match = pathname.match(matcher);
      if (!match)
        return null;
      let matchedPathname = match[0], pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1"), captureGroups = match.slice(1);
      return {
        params: paramNames.reduce((memo, paramName, index2) => {
          if (paramName === "*") {
            let splatValue = captureGroups[index2] || "";
            pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
          }
          return memo[paramName] = safelyDecodeURIComponent(captureGroups[index2] || "", paramName), memo;
        }, {}),
        pathname: matchedPathname,
        pathnameBase,
        pattern
      };
    }
    function compilePath(path, caseSensitive, end) {
      caseSensitive === void 0 && (caseSensitive = !1), end === void 0 && (end = !0), warning2(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
      let paramNames = [], regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/\/:(\w+)/g, (_, paramName) => (paramNames.push(paramName), "/([^\\/]+)"));
      return path.endsWith("*") ? (paramNames.push("*"), regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$") : end ? regexpSource += "\\/*$" : path !== "" && path !== "/" && (regexpSource += "(?:(?=\\/|$))"), [new RegExp(regexpSource, caseSensitive ? void 0 : "i"), paramNames];
    }
    function safelyDecodeURI(value) {
      try {
        return decodeURI(value);
      } catch (error2) {
        return warning2(!1, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error2 + ").")), value;
      }
    }
    function safelyDecodeURIComponent(value, paramName) {
      try {
        return decodeURIComponent(value);
      } catch (error2) {
        return warning2(!1, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error2 + ").")), value;
      }
    }
    function stripBasename(pathname, basename) {
      if (basename === "/")
        return pathname;
      if (!pathname.toLowerCase().startsWith(basename.toLowerCase()))
        return null;
      let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length, nextChar = pathname.charAt(startIndex);
      return nextChar && nextChar !== "/" ? null : pathname.slice(startIndex) || "/";
    }
    function resolvePath(to, fromPathname) {
      fromPathname === void 0 && (fromPathname = "/");
      let {
        pathname: toPathname,
        search = "",
        hash = ""
      } = typeof to == "string" ? parsePath(to) : to;
      return {
        pathname: toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname,
        search: normalizeSearch(search),
        hash: normalizeHash(hash)
      };
    }
    function resolvePathname(relativePath, fromPathname) {
      let segments = fromPathname.replace(/\/+$/, "").split("/");
      return relativePath.split("/").forEach((segment) => {
        segment === ".." ? segments.length > 1 && segments.pop() : segment !== "." && segments.push(segment);
      }), segments.length > 1 ? segments.join("/") : "/";
    }
    function getInvalidPathError(char, field, dest, path) {
      return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
    }
    function getPathContributingMatches(matches) {
      return matches.filter((match, index2) => index2 === 0 || match.route.path && match.route.path.length > 0);
    }
    function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
      isPathRelative === void 0 && (isPathRelative = !1);
      let to;
      typeof toArg == "string" ? to = parsePath(toArg) : (to = _extends2({}, toArg), invariant2(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to)), invariant2(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to)), invariant2(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to)));
      let isEmptyPath = toArg === "" || to.pathname === "", toPathname = isEmptyPath ? "/" : to.pathname, from;
      if (isPathRelative || toPathname == null)
        from = locationPathname;
      else {
        let routePathnameIndex = routePathnames.length - 1;
        if (toPathname.startsWith("..")) {
          let toSegments = toPathname.split("/");
          for (; toSegments[0] === ".."; )
            toSegments.shift(), routePathnameIndex -= 1;
          to.pathname = toSegments.join("/");
        }
        from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
      }
      let path = resolvePath(to, from), hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/"), hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
      return !path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash) && (path.pathname += "/"), path;
    }
    function getToPathname(to) {
      return to === "" || to.pathname === "" ? "/" : typeof to == "string" ? parsePath(to).pathname : to.pathname;
    }
    var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/"), normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/"), normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search, normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash, json = function(data, init) {
      init === void 0 && (init = {});
      let responseInit = typeof init == "number" ? {
        status: init
      } : init, headers = new Headers(responseInit.headers);
      return headers.has("Content-Type") || headers.set("Content-Type", "application/json; charset=utf-8"), new Response(JSON.stringify(data), _extends2({}, responseInit, {
        headers
      }));
    }, AbortedDeferredError = class extends Error {
    }, DeferredData = class {
      constructor(data, responseInit) {
        this.pendingKeysSet = /* @__PURE__ */ new Set(), this.subscribers = /* @__PURE__ */ new Set(), this.deferredKeys = [], invariant2(data && typeof data == "object" && !Array.isArray(data), "defer() only accepts plain objects");
        let reject;
        this.abortPromise = new Promise((_, r25) => reject = r25), this.controller = new AbortController();
        let onAbort = () => reject(new AbortedDeferredError("Deferred data aborted"));
        this.unlistenAbortSignal = () => this.controller.signal.removeEventListener("abort", onAbort), this.controller.signal.addEventListener("abort", onAbort), this.data = Object.entries(data).reduce((acc, _ref) => {
          let [key, value] = _ref;
          return Object.assign(acc, {
            [key]: this.trackPromise(key, value)
          });
        }, {}), this.done && this.unlistenAbortSignal(), this.init = responseInit;
      }
      trackPromise(key, value) {
        if (!(value instanceof Promise))
          return value;
        this.deferredKeys.push(key), this.pendingKeysSet.add(key);
        let promise = Promise.race([value, this.abortPromise]).then((data) => this.onSettle(promise, key, null, data), (error2) => this.onSettle(promise, key, error2));
        return promise.catch(() => {
        }), Object.defineProperty(promise, "_tracked", {
          get: () => !0
        }), promise;
      }
      onSettle(promise, key, error2, data) {
        return this.controller.signal.aborted && error2 instanceof AbortedDeferredError ? (this.unlistenAbortSignal(), Object.defineProperty(promise, "_error", {
          get: () => error2
        }), Promise.reject(error2)) : (this.pendingKeysSet.delete(key), this.done && this.unlistenAbortSignal(), error2 ? (Object.defineProperty(promise, "_error", {
          get: () => error2
        }), this.emit(!1, key), Promise.reject(error2)) : (Object.defineProperty(promise, "_data", {
          get: () => data
        }), this.emit(!1, key), data));
      }
      emit(aborted, settledKey) {
        this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));
      }
      subscribe(fn) {
        return this.subscribers.add(fn), () => this.subscribers.delete(fn);
      }
      cancel() {
        this.controller.abort(), this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k)), this.emit(!0);
      }
      async resolveData(signal) {
        let aborted = !1;
        if (!this.done) {
          let onAbort = () => this.cancel();
          signal.addEventListener("abort", onAbort), aborted = await new Promise((resolve) => {
            this.subscribe((aborted2) => {
              signal.removeEventListener("abort", onAbort), (aborted2 || this.done) && resolve(aborted2);
            });
          });
        }
        return aborted;
      }
      get done() {
        return this.pendingKeysSet.size === 0;
      }
      get unwrappedData() {
        return invariant2(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds"), Object.entries(this.data).reduce((acc, _ref2) => {
          let [key, value] = _ref2;
          return Object.assign(acc, {
            [key]: unwrapTrackedPromise(value)
          });
        }, {});
      }
      get pendingKeys() {
        return Array.from(this.pendingKeysSet);
      }
    };
    function isTrackedPromise(value) {
      return value instanceof Promise && value._tracked === !0;
    }
    function unwrapTrackedPromise(value) {
      if (!isTrackedPromise(value))
        return value;
      if (value._error)
        throw value._error;
      return value._data;
    }
    var defer = function(data, init) {
      init === void 0 && (init = {});
      let responseInit = typeof init == "number" ? {
        status: init
      } : init;
      return new DeferredData(data, responseInit);
    }, redirect = function(url, init) {
      init === void 0 && (init = 302);
      let responseInit = init;
      typeof responseInit == "number" ? responseInit = {
        status: responseInit
      } : typeof responseInit.status > "u" && (responseInit.status = 302);
      let headers = new Headers(responseInit.headers);
      return headers.set("Location", url), new Response(null, _extends2({}, responseInit, {
        headers
      }));
    }, ErrorResponse = class {
      constructor(status, statusText, data, internal) {
        internal === void 0 && (internal = !1), this.status = status, this.statusText = statusText || "", this.internal = internal, data instanceof Error ? (this.data = data.toString(), this.error = data) : this.data = data;
      }
    };
    function isRouteErrorResponse(error2) {
      return error2 != null && typeof error2.status == "number" && typeof error2.statusText == "string" && typeof error2.internal == "boolean" && "data" in error2;
    }
    var validMutationMethodsArr = ["post", "put", "patch", "delete"], validMutationMethods = new Set(validMutationMethodsArr), validRequestMethodsArr = ["get", ...validMutationMethodsArr], validRequestMethods = new Set(validRequestMethodsArr), redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]), redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]), IDLE_NAVIGATION = {
      state: "idle",
      location: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0
    }, IDLE_FETCHER = {
      state: "idle",
      data: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0
    }, IDLE_BLOCKER = {
      state: "unblocked",
      proceed: void 0,
      reset: void 0,
      location: void 0
    }, ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i, defaultMapRouteProperties = (route) => ({
      hasErrorBoundary: Boolean(route.hasErrorBoundary)
    });
    function createRouter(init) {
      let routerWindow = init.window ? init.window : typeof window < "u" ? window : void 0, isBrowser2 = typeof routerWindow < "u" && typeof routerWindow.document < "u" && typeof routerWindow.document.createElement < "u", isServer = !isBrowser2;
      invariant2(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
      let mapRouteProperties;
      if (init.mapRouteProperties)
        mapRouteProperties = init.mapRouteProperties;
      else if (init.detectErrorBoundary) {
        let detectErrorBoundary = init.detectErrorBoundary;
        mapRouteProperties = (route) => ({
          hasErrorBoundary: detectErrorBoundary(route)
        });
      } else
        mapRouteProperties = defaultMapRouteProperties;
      let manifest = {}, dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, void 0, manifest), inFlightDataRoutes, basename = init.basename || "/", future2 = _extends2({
        v7_normalizeFormMethod: !1,
        v7_prependBasename: !1
      }, init.future), unlistenHistory = null, subscribers = /* @__PURE__ */ new Set(), savedScrollPositions = null, getScrollRestorationKey = null, getScrollPosition = null, initialScrollRestored = init.hydrationData != null, initialMatches = matchRoutes(dataRoutes, init.history.location, basename), initialErrors = null;
      if (initialMatches == null) {
        let error2 = getInternalRouterError(404, {
          pathname: init.history.location.pathname
        }), {
          matches,
          route
        } = getShortCircuitMatches(dataRoutes);
        initialMatches = matches, initialErrors = {
          [route.id]: error2
        };
      }
      let initialized = (
        // All initialMatches need to be loaded before we're ready.  If we have lazy
        // functions around still then we'll need to run them in initialize()
        !initialMatches.some((m) => m.route.lazy) && // And we have to either have no loaders or have been provided hydrationData
        (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null)
      ), router, state = {
        historyAction: init.history.action,
        location: init.history.location,
        matches: initialMatches,
        initialized,
        navigation: IDLE_NAVIGATION,
        // Don't restore on initial updateState() if we were SSR'd
        restoreScrollPosition: init.hydrationData != null ? !1 : null,
        preventScrollReset: !1,
        revalidation: "idle",
        loaderData: init.hydrationData && init.hydrationData.loaderData || {},
        actionData: init.hydrationData && init.hydrationData.actionData || null,
        errors: init.hydrationData && init.hydrationData.errors || initialErrors,
        fetchers: /* @__PURE__ */ new Map(),
        blockers: /* @__PURE__ */ new Map()
      }, pendingAction = exports.Action.Pop, pendingPreventScrollReset = !1, pendingNavigationController, isUninterruptedRevalidation = !1, isRevalidationRequired = !1, cancelledDeferredRoutes = [], cancelledFetcherLoads = [], fetchControllers = /* @__PURE__ */ new Map(), incrementingLoadId = 0, pendingNavigationLoadId = -1, fetchReloadIds = /* @__PURE__ */ new Map(), fetchRedirectIds = /* @__PURE__ */ new Set(), fetchLoadMatches = /* @__PURE__ */ new Map(), activeDeferreds = /* @__PURE__ */ new Map(), blockerFunctions = /* @__PURE__ */ new Map(), ignoreNextHistoryUpdate = !1;
      function initialize() {
        return unlistenHistory = init.history.listen((_ref) => {
          let {
            action: historyAction,
            location,
            delta
          } = _ref;
          if (ignoreNextHistoryUpdate) {
            ignoreNextHistoryUpdate = !1;
            return;
          }
          warning2(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
          let blockerKey = shouldBlockNavigation({
            currentLocation: state.location,
            nextLocation: location,
            historyAction
          });
          if (blockerKey && delta != null) {
            ignoreNextHistoryUpdate = !0, init.history.go(delta * -1), updateBlocker(blockerKey, {
              state: "blocked",
              location,
              proceed() {
                updateBlocker(blockerKey, {
                  state: "proceeding",
                  proceed: void 0,
                  reset: void 0,
                  location
                }), init.history.go(delta);
              },
              reset() {
                deleteBlocker(blockerKey), updateState({
                  blockers: new Map(router.state.blockers)
                });
              }
            });
            return;
          }
          return startNavigation(historyAction, location);
        }), state.initialized || startNavigation(exports.Action.Pop, state.location), router;
      }
      function dispose() {
        unlistenHistory && unlistenHistory(), subscribers.clear(), pendingNavigationController && pendingNavigationController.abort(), state.fetchers.forEach((_, key) => deleteFetcher(key)), state.blockers.forEach((_, key) => deleteBlocker(key));
      }
      function subscribe(fn) {
        return subscribers.add(fn), () => subscribers.delete(fn);
      }
      function updateState(newState) {
        state = _extends2({}, state, newState), subscribers.forEach((subscriber) => subscriber(state));
      }
      function completeNavigation(location, newState) {
        var _location$state, _location$state2;
        let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== !0, actionData;
        newState.actionData ? Object.keys(newState.actionData).length > 0 ? actionData = newState.actionData : actionData = null : isActionReload ? actionData = state.actionData : actionData = null;
        let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;
        for (let [key] of blockerFunctions)
          deleteBlocker(key);
        let preventScrollReset = pendingPreventScrollReset === !0 || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== !0;
        inFlightDataRoutes && (dataRoutes = inFlightDataRoutes, inFlightDataRoutes = void 0), updateState(_extends2({}, newState, {
          // matches, errors, fetchers go through as-is
          actionData,
          loaderData,
          historyAction: pendingAction,
          location,
          initialized: !0,
          navigation: IDLE_NAVIGATION,
          revalidation: "idle",
          restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),
          preventScrollReset,
          blockers: new Map(state.blockers)
        })), isUninterruptedRevalidation || pendingAction === exports.Action.Pop || (pendingAction === exports.Action.Push ? init.history.push(location, location.state) : pendingAction === exports.Action.Replace && init.history.replace(location, location.state)), pendingAction = exports.Action.Pop, pendingPreventScrollReset = !1, isUninterruptedRevalidation = !1, isRevalidationRequired = !1, cancelledDeferredRoutes = [], cancelledFetcherLoads = [];
      }
      async function navigate(to, opts) {
        if (typeof to == "number") {
          init.history.go(to);
          return;
        }
        let normalizedPath = normalizeTo(state.location, state.matches, basename, future2.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative), {
          path,
          submission,
          error: error2
        } = normalizeNavigateOptions(future2.v7_normalizeFormMethod, !1, normalizedPath, opts), currentLocation = state.location, nextLocation = createLocation(state.location, path, opts && opts.state);
        nextLocation = _extends2({}, nextLocation, init.history.encodeLocation(nextLocation));
        let userReplace = opts && opts.replace != null ? opts.replace : void 0, historyAction = exports.Action.Push;
        userReplace === !0 ? historyAction = exports.Action.Replace : userReplace === !1 || submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search && (historyAction = exports.Action.Replace);
        let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === !0 : void 0, blockerKey = shouldBlockNavigation({
          currentLocation,
          nextLocation,
          historyAction
        });
        if (blockerKey) {
          updateBlocker(blockerKey, {
            state: "blocked",
            location: nextLocation,
            proceed() {
              updateBlocker(blockerKey, {
                state: "proceeding",
                proceed: void 0,
                reset: void 0,
                location: nextLocation
              }), navigate(to, opts);
            },
            reset() {
              deleteBlocker(blockerKey), updateState({
                blockers: new Map(state.blockers)
              });
            }
          });
          return;
        }
        return await startNavigation(historyAction, nextLocation, {
          submission,
          // Send through the formData serialization error if we have one so we can
          // render at the right error boundary after we match routes
          pendingError: error2,
          preventScrollReset,
          replace: opts && opts.replace
        });
      }
      function revalidate() {
        if (interruptActiveLoads(), updateState({
          revalidation: "loading"
        }), state.navigation.state !== "submitting") {
          if (state.navigation.state === "idle") {
            startNavigation(state.historyAction, state.location, {
              startUninterruptedRevalidation: !0
            });
            return;
          }
          startNavigation(pendingAction || state.historyAction, state.navigation.location, {
            overrideNavigation: state.navigation
          });
        }
      }
      async function startNavigation(historyAction, location, opts) {
        pendingNavigationController && pendingNavigationController.abort(), pendingNavigationController = null, pendingAction = historyAction, isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === !0, saveScrollPosition(state.location, state.matches), pendingPreventScrollReset = (opts && opts.preventScrollReset) === !0;
        let routesToUse = inFlightDataRoutes || dataRoutes, loadingNavigation = opts && opts.overrideNavigation, matches = matchRoutes(routesToUse, location, basename);
        if (!matches) {
          let error2 = getInternalRouterError(404, {
            pathname: location.pathname
          }), {
            matches: notFoundMatches,
            route
          } = getShortCircuitMatches(routesToUse);
          cancelActiveDeferreds(), completeNavigation(location, {
            matches: notFoundMatches,
            loaderData: {},
            errors: {
              [route.id]: error2
            }
          });
          return;
        }
        if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
          completeNavigation(location, {
            matches
          });
          return;
        }
        pendingNavigationController = new AbortController();
        let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission), pendingActionData, pendingError;
        if (opts && opts.pendingError)
          pendingError = {
            [findNearestBoundary(matches).route.id]: opts.pendingError
          };
        else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
          let actionOutput = await handleAction(request, location, opts.submission, matches, {
            replace: opts.replace
          });
          if (actionOutput.shortCircuited)
            return;
          pendingActionData = actionOutput.pendingActionData, pendingError = actionOutput.pendingActionError, loadingNavigation = _extends2({
            state: "loading",
            location
          }, opts.submission), request = new Request(request.url, {
            signal: request.signal
          });
        }
        let {
          shortCircuited,
          loaderData,
          errors
        } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);
        shortCircuited || (pendingNavigationController = null, completeNavigation(location, _extends2({
          matches
        }, pendingActionData ? {
          actionData: pendingActionData
        } : {}, {
          loaderData,
          errors
        })));
      }
      async function handleAction(request, location, submission, matches, opts) {
        interruptActiveLoads();
        let navigation = _extends2({
          state: "submitting",
          location
        }, submission);
        updateState({
          navigation
        });
        let result, actionMatch = getTargetMatch(matches, location);
        if (!actionMatch.route.action && !actionMatch.route.lazy)
          result = {
            type: ResultType.error,
            error: getInternalRouterError(405, {
              method: request.method,
              pathname: location.pathname,
              routeId: actionMatch.route.id
            })
          };
        else if (result = await callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename), request.signal.aborted)
          return {
            shortCircuited: !0
          };
        if (isRedirectResult(result)) {
          let replace;
          return opts && opts.replace != null ? replace = opts.replace : replace = result.location === state.location.pathname + state.location.search, await startRedirectNavigation(state, result, {
            submission,
            replace
          }), {
            shortCircuited: !0
          };
        }
        if (isErrorResult(result)) {
          let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
          return (opts && opts.replace) !== !0 && (pendingAction = exports.Action.Push), {
            // Send back an empty object we can use to clear out any prior actionData
            pendingActionData: {},
            pendingActionError: {
              [boundaryMatch.route.id]: result.error
            }
          };
        }
        if (isDeferredResult(result))
          throw getInternalRouterError(400, {
            type: "defer-action"
          });
        return {
          pendingActionData: {
            [actionMatch.route.id]: result.data
          }
        };
      }
      async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {
        let loadingNavigation = overrideNavigation;
        loadingNavigation || (loadingNavigation = _extends2({
          state: "loading",
          location,
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0
        }, submission));
        let activeSubmission = submission || fetcherSubmission ? submission || fetcherSubmission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {
          formMethod: loadingNavigation.formMethod,
          formAction: loadingNavigation.formAction,
          formData: loadingNavigation.formData,
          formEncType: loadingNavigation.formEncType
        } : void 0, routesToUse = inFlightDataRoutes || dataRoutes, [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError);
        if (cancelActiveDeferreds((routeId) => !(matches && matches.some((m) => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId)), matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
          let updatedFetchers2 = markFetchRedirectsDone();
          return completeNavigation(location, _extends2({
            matches,
            loaderData: {},
            // Commit pending error if we're short circuiting
            errors: pendingError || null
          }, pendingActionData ? {
            actionData: pendingActionData
          } : {}, updatedFetchers2 ? {
            fetchers: new Map(state.fetchers)
          } : {})), {
            shortCircuited: !0
          };
        }
        if (!isUninterruptedRevalidation) {
          revalidatingFetchers.forEach((rf) => {
            let fetcher = state.fetchers.get(rf.key), revalidatingFetcher = {
              state: "loading",
              data: fetcher && fetcher.data,
              formMethod: void 0,
              formAction: void 0,
              formEncType: void 0,
              formData: void 0,
              " _hasFetcherDoneAnything ": !0
            };
            state.fetchers.set(rf.key, revalidatingFetcher);
          });
          let actionData = pendingActionData || state.actionData;
          updateState(_extends2({
            navigation: loadingNavigation
          }, actionData ? Object.keys(actionData).length === 0 ? {
            actionData: null
          } : {
            actionData
          } : {}, revalidatingFetchers.length > 0 ? {
            fetchers: new Map(state.fetchers)
          } : {}));
        }
        pendingNavigationLoadId = ++incrementingLoadId, revalidatingFetchers.forEach((rf) => {
          rf.controller && fetchControllers.set(rf.key, rf.controller);
        });
        let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((f) => abortFetcher(f.key));
        pendingNavigationController && pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);
        let {
          results: results2,
          loaderResults,
          fetcherResults
        } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);
        if (request.signal.aborted)
          return {
            shortCircuited: !0
          };
        pendingNavigationController && pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations), revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));
        let redirect2 = findRedirect(results2);
        if (redirect2)
          return await startRedirectNavigation(state, redirect2, {
            replace
          }), {
            shortCircuited: !0
          };
        let {
          loaderData,
          errors
        } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);
        activeDeferreds.forEach((deferredData, routeId) => {
          deferredData.subscribe((aborted) => {
            (aborted || deferredData.done) && activeDeferreds.delete(routeId);
          });
        });
        let updatedFetchers = markFetchRedirectsDone(), didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId), shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
        return _extends2({
          loaderData,
          errors
        }, shouldUpdateFetchers ? {
          fetchers: new Map(state.fetchers)
        } : {});
      }
      function getFetcher(key) {
        return state.fetchers.get(key) || IDLE_FETCHER;
      }
      function fetch2(key, routeId, href, opts) {
        if (isServer)
          throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
        fetchControllers.has(key) && abortFetcher(key);
        let routesToUse = inFlightDataRoutes || dataRoutes, normalizedPath = normalizeTo(state.location, state.matches, basename, future2.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative), matches = matchRoutes(routesToUse, normalizedPath, basename);
        if (!matches) {
          setFetcherError(key, routeId, getInternalRouterError(404, {
            pathname: normalizedPath
          }));
          return;
        }
        let {
          path,
          submission
        } = normalizeNavigateOptions(future2.v7_normalizeFormMethod, !0, normalizedPath, opts), match = getTargetMatch(matches, path);
        if (pendingPreventScrollReset = (opts && opts.preventScrollReset) === !0, submission && isMutationMethod(submission.formMethod)) {
          handleFetcherAction(key, routeId, path, match, matches, submission);
          return;
        }
        fetchLoadMatches.set(key, {
          routeId,
          path
        }), handleFetcherLoader(key, routeId, path, match, matches, submission);
      }
      async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {
        if (interruptActiveLoads(), fetchLoadMatches.delete(key), !match.route.action && !match.route.lazy) {
          let error2 = getInternalRouterError(405, {
            method: submission.formMethod,
            pathname: path,
            routeId
          });
          setFetcherError(key, routeId, error2);
          return;
        }
        let existingFetcher = state.fetchers.get(key), fetcher = _extends2({
          state: "submitting"
        }, submission, {
          data: existingFetcher && existingFetcher.data,
          " _hasFetcherDoneAnything ": !0
        });
        state.fetchers.set(key, fetcher), updateState({
          fetchers: new Map(state.fetchers)
        });
        let abortController = new AbortController(), fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);
        fetchControllers.set(key, abortController);
        let actionResult = await callLoaderOrAction("action", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);
        if (fetchRequest.signal.aborted) {
          fetchControllers.get(key) === abortController && fetchControllers.delete(key);
          return;
        }
        if (isRedirectResult(actionResult)) {
          fetchControllers.delete(key), fetchRedirectIds.add(key);
          let loadingFetcher = _extends2({
            state: "loading"
          }, submission, {
            data: void 0,
            " _hasFetcherDoneAnything ": !0
          });
          return state.fetchers.set(key, loadingFetcher), updateState({
            fetchers: new Map(state.fetchers)
          }), startRedirectNavigation(state, actionResult, {
            submission,
            isFetchActionRedirect: !0
          });
        }
        if (isErrorResult(actionResult)) {
          setFetcherError(key, routeId, actionResult.error);
          return;
        }
        if (isDeferredResult(actionResult))
          throw getInternalRouterError(400, {
            type: "defer-action"
          });
        let nextLocation = state.navigation.location || state.location, revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal), routesToUse = inFlightDataRoutes || dataRoutes, matches = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;
        invariant2(matches, "Didn't find any matches after fetcher action");
        let loadId = ++incrementingLoadId;
        fetchReloadIds.set(key, loadId);
        let loadFetcher = _extends2({
          state: "loading",
          data: actionResult.data
        }, submission, {
          " _hasFetcherDoneAnything ": !0
        });
        state.fetchers.set(key, loadFetcher);
        let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(
          init.history,
          state,
          matches,
          submission,
          nextLocation,
          isRevalidationRequired,
          cancelledDeferredRoutes,
          cancelledFetcherLoads,
          fetchLoadMatches,
          routesToUse,
          basename,
          {
            [match.route.id]: actionResult.data
          },
          void 0
          // No need to send through errors since we short circuit above
        );
        revalidatingFetchers.filter((rf) => rf.key !== key).forEach((rf) => {
          let staleKey = rf.key, existingFetcher2 = state.fetchers.get(staleKey), revalidatingFetcher = {
            state: "loading",
            data: existingFetcher2 && existingFetcher2.data,
            formMethod: void 0,
            formAction: void 0,
            formEncType: void 0,
            formData: void 0,
            " _hasFetcherDoneAnything ": !0
          };
          state.fetchers.set(staleKey, revalidatingFetcher), rf.controller && fetchControllers.set(staleKey, rf.controller);
        }), updateState({
          fetchers: new Map(state.fetchers)
        });
        let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));
        abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
        let {
          results: results2,
          loaderResults,
          fetcherResults
        } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
        if (abortController.signal.aborted)
          return;
        abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations), fetchReloadIds.delete(key), fetchControllers.delete(key), revalidatingFetchers.forEach((r25) => fetchControllers.delete(r25.key));
        let redirect2 = findRedirect(results2);
        if (redirect2)
          return startRedirectNavigation(state, redirect2);
        let {
          loaderData,
          errors
        } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, void 0, revalidatingFetchers, fetcherResults, activeDeferreds);
        if (state.fetchers.has(key)) {
          let doneFetcher = {
            state: "idle",
            data: actionResult.data,
            formMethod: void 0,
            formAction: void 0,
            formEncType: void 0,
            formData: void 0,
            " _hasFetcherDoneAnything ": !0
          };
          state.fetchers.set(key, doneFetcher);
        }
        let didAbortFetchLoads = abortStaleFetchLoads(loadId);
        state.navigation.state === "loading" && loadId > pendingNavigationLoadId ? (invariant2(pendingAction, "Expected pending action"), pendingNavigationController && pendingNavigationController.abort(), completeNavigation(state.navigation.location, {
          matches,
          loaderData,
          errors,
          fetchers: new Map(state.fetchers)
        })) : (updateState(_extends2({
          errors,
          loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)
        }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {
          fetchers: new Map(state.fetchers)
        } : {})), isRevalidationRequired = !1);
      }
      async function handleFetcherLoader(key, routeId, path, match, matches, submission) {
        let existingFetcher = state.fetchers.get(key), loadingFetcher = _extends2({
          state: "loading",
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0
        }, submission, {
          data: existingFetcher && existingFetcher.data,
          " _hasFetcherDoneAnything ": !0
        });
        state.fetchers.set(key, loadingFetcher), updateState({
          fetchers: new Map(state.fetchers)
        });
        let abortController = new AbortController(), fetchRequest = createClientSideRequest(init.history, path, abortController.signal);
        fetchControllers.set(key, abortController);
        let result = await callLoaderOrAction("loader", fetchRequest, match, matches, manifest, mapRouteProperties, basename);
        if (isDeferredResult(result) && (result = await resolveDeferredData(result, fetchRequest.signal, !0) || result), fetchControllers.get(key) === abortController && fetchControllers.delete(key), fetchRequest.signal.aborted)
          return;
        if (isRedirectResult(result)) {
          fetchRedirectIds.add(key), await startRedirectNavigation(state, result);
          return;
        }
        if (isErrorResult(result)) {
          let boundaryMatch = findNearestBoundary(state.matches, routeId);
          state.fetchers.delete(key), updateState({
            fetchers: new Map(state.fetchers),
            errors: {
              [boundaryMatch.route.id]: result.error
            }
          });
          return;
        }
        invariant2(!isDeferredResult(result), "Unhandled fetcher deferred data");
        let doneFetcher = {
          state: "idle",
          data: result.data,
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0,
          " _hasFetcherDoneAnything ": !0
        };
        state.fetchers.set(key, doneFetcher), updateState({
          fetchers: new Map(state.fetchers)
        });
      }
      async function startRedirectNavigation(state2, redirect2, _temp) {
        let {
          submission,
          replace,
          isFetchActionRedirect
        } = _temp === void 0 ? {} : _temp;
        redirect2.revalidate && (isRevalidationRequired = !0);
        let redirectLocation = createLocation(
          state2.location,
          redirect2.location,
          // TODO: This can be removed once we get rid of useTransition in Remix v2
          _extends2({
            _isRedirect: !0
          }, isFetchActionRedirect ? {
            _isFetchActionRedirect: !0
          } : {})
        );
        if (invariant2(redirectLocation, "Expected a location on the redirect navigation"), ABSOLUTE_URL_REGEX.test(redirect2.location) && isBrowser2) {
          let url = init.history.createURL(redirect2.location), isDifferentBasename = stripBasename(url.pathname, basename) == null;
          if (routerWindow.location.origin !== url.origin || isDifferentBasename) {
            replace ? routerWindow.location.replace(redirect2.location) : routerWindow.location.assign(redirect2.location);
            return;
          }
        }
        pendingNavigationController = null;
        let redirectHistoryAction = replace === !0 ? exports.Action.Replace : exports.Action.Push, {
          formMethod,
          formAction,
          formEncType,
          formData
        } = state2.navigation;
        !submission && formMethod && formAction && formData && formEncType && (submission = {
          formMethod,
          formAction,
          formEncType,
          formData
        }), redirectPreserveMethodStatusCodes.has(redirect2.status) && submission && isMutationMethod(submission.formMethod) ? await startNavigation(redirectHistoryAction, redirectLocation, {
          submission: _extends2({}, submission, {
            formAction: redirect2.location
          }),
          // Preserve this flag across redirects
          preventScrollReset: pendingPreventScrollReset
        }) : isFetchActionRedirect ? await startNavigation(redirectHistoryAction, redirectLocation, {
          overrideNavigation: {
            state: "loading",
            location: redirectLocation,
            formMethod: void 0,
            formAction: void 0,
            formEncType: void 0,
            formData: void 0
          },
          fetcherSubmission: submission,
          // Preserve this flag across redirects
          preventScrollReset: pendingPreventScrollReset
        }) : await startNavigation(redirectHistoryAction, redirectLocation, {
          overrideNavigation: {
            state: "loading",
            location: redirectLocation,
            formMethod: submission ? submission.formMethod : void 0,
            formAction: submission ? submission.formAction : void 0,
            formEncType: submission ? submission.formEncType : void 0,
            formData: submission ? submission.formData : void 0
          },
          // Preserve this flag across redirects
          preventScrollReset: pendingPreventScrollReset
        });
      }
      async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {
        let results2 = await Promise.all([...matchesToLoad.map((match) => callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map((f) => f.matches && f.match && f.controller ? callLoaderOrAction("loader", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename) : {
          type: ResultType.error,
          error: getInternalRouterError(404, {
            pathname: f.path
          })
        })]), loaderResults = results2.slice(0, matchesToLoad.length), fetcherResults = results2.slice(matchesToLoad.length);
        return await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), !1, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map((f) => f.match), fetcherResults, fetchersToLoad.map((f) => f.controller ? f.controller.signal : null), !0)]), {
          results: results2,
          loaderResults,
          fetcherResults
        };
      }
      function interruptActiveLoads() {
        isRevalidationRequired = !0, cancelledDeferredRoutes.push(...cancelActiveDeferreds()), fetchLoadMatches.forEach((_, key) => {
          fetchControllers.has(key) && (cancelledFetcherLoads.push(key), abortFetcher(key));
        });
      }
      function setFetcherError(key, routeId, error2) {
        let boundaryMatch = findNearestBoundary(state.matches, routeId);
        deleteFetcher(key), updateState({
          errors: {
            [boundaryMatch.route.id]: error2
          },
          fetchers: new Map(state.fetchers)
        });
      }
      function deleteFetcher(key) {
        let fetcher = state.fetchers.get(key);
        fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key)) && abortFetcher(key), fetchLoadMatches.delete(key), fetchReloadIds.delete(key), fetchRedirectIds.delete(key), state.fetchers.delete(key);
      }
      function abortFetcher(key) {
        let controller = fetchControllers.get(key);
        invariant2(controller, "Expected fetch controller: " + key), controller.abort(), fetchControllers.delete(key);
      }
      function markFetchersDone(keys) {
        for (let key of keys) {
          let doneFetcher = {
            state: "idle",
            data: getFetcher(key).data,
            formMethod: void 0,
            formAction: void 0,
            formEncType: void 0,
            formData: void 0,
            " _hasFetcherDoneAnything ": !0
          };
          state.fetchers.set(key, doneFetcher);
        }
      }
      function markFetchRedirectsDone() {
        let doneKeys = [], updatedFetchers = !1;
        for (let key of fetchRedirectIds) {
          let fetcher = state.fetchers.get(key);
          invariant2(fetcher, "Expected fetcher: " + key), fetcher.state === "loading" && (fetchRedirectIds.delete(key), doneKeys.push(key), updatedFetchers = !0);
        }
        return markFetchersDone(doneKeys), updatedFetchers;
      }
      function abortStaleFetchLoads(landedId) {
        let yeetedKeys = [];
        for (let [key, id3] of fetchReloadIds)
          if (id3 < landedId) {
            let fetcher = state.fetchers.get(key);
            invariant2(fetcher, "Expected fetcher: " + key), fetcher.state === "loading" && (abortFetcher(key), fetchReloadIds.delete(key), yeetedKeys.push(key));
          }
        return markFetchersDone(yeetedKeys), yeetedKeys.length > 0;
      }
      function getBlocker(key, fn) {
        let blocker = state.blockers.get(key) || IDLE_BLOCKER;
        return blockerFunctions.get(key) !== fn && blockerFunctions.set(key, fn), blocker;
      }
      function deleteBlocker(key) {
        state.blockers.delete(key), blockerFunctions.delete(key);
      }
      function updateBlocker(key, newBlocker) {
        let blocker = state.blockers.get(key) || IDLE_BLOCKER;
        invariant2(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state), state.blockers.set(key, newBlocker), updateState({
          blockers: new Map(state.blockers)
        });
      }
      function shouldBlockNavigation(_ref2) {
        let {
          currentLocation,
          nextLocation,
          historyAction
        } = _ref2;
        if (blockerFunctions.size === 0)
          return;
        blockerFunctions.size > 1 && warning2(!1, "A router only supports one blocker at a time");
        let entries = Array.from(blockerFunctions.entries()), [blockerKey, blockerFunction] = entries[entries.length - 1], blocker = state.blockers.get(blockerKey);
        if (!(blocker && blocker.state === "proceeding") && blockerFunction({
          currentLocation,
          nextLocation,
          historyAction
        }))
          return blockerKey;
      }
      function cancelActiveDeferreds(predicate) {
        let cancelledRouteIds = [];
        return activeDeferreds.forEach((dfd, routeId) => {
          (!predicate || predicate(routeId)) && (dfd.cancel(), cancelledRouteIds.push(routeId), activeDeferreds.delete(routeId));
        }), cancelledRouteIds;
      }
      function enableScrollRestoration(positions, getPosition, getKey) {
        if (savedScrollPositions = positions, getScrollPosition = getPosition, getScrollRestorationKey = getKey || ((location) => location.key), !initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
          initialScrollRestored = !0;
          let y = getSavedScrollPosition(state.location, state.matches);
          y != null && updateState({
            restoreScrollPosition: y
          });
        }
        return () => {
          savedScrollPositions = null, getScrollPosition = null, getScrollRestorationKey = null;
        };
      }
      function saveScrollPosition(location, matches) {
        if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {
          let userMatches = matches.map((m) => createUseMatchesMatch(m, state.loaderData)), key = getScrollRestorationKey(location, userMatches) || location.key;
          savedScrollPositions[key] = getScrollPosition();
        }
      }
      function getSavedScrollPosition(location, matches) {
        if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {
          let userMatches = matches.map((m) => createUseMatchesMatch(m, state.loaderData)), key = getScrollRestorationKey(location, userMatches) || location.key, y = savedScrollPositions[key];
          if (typeof y == "number")
            return y;
        }
        return null;
      }
      function _internalSetRoutes(newRoutes) {
        manifest = {}, inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, void 0, manifest);
      }
      return router = {
        get basename() {
          return basename;
        },
        get state() {
          return state;
        },
        get routes() {
          return dataRoutes;
        },
        initialize,
        subscribe,
        enableScrollRestoration,
        navigate,
        fetch: fetch2,
        revalidate,
        // Passthrough to history-aware createHref used by useHref so we get proper
        // hash-aware URLs in DOM paths
        createHref: (to) => init.history.createHref(to),
        encodeLocation: (to) => init.history.encodeLocation(to),
        getFetcher,
        deleteFetcher,
        dispose,
        getBlocker,
        deleteBlocker,
        _internalFetchControllers: fetchControllers,
        _internalActiveDeferreds: activeDeferreds,
        // TODO: Remove setRoutes, it's temporary to avoid dealing with
        // updating the tree while validating the update algorithm.
        _internalSetRoutes
      }, router;
    }
    var UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");
    function createStaticHandler(routes2, opts) {
      invariant2(routes2.length > 0, "You must provide a non-empty routes array to createStaticHandler");
      let manifest = {}, basename = (opts ? opts.basename : null) || "/", mapRouteProperties;
      if (opts != null && opts.mapRouteProperties)
        mapRouteProperties = opts.mapRouteProperties;
      else if (opts != null && opts.detectErrorBoundary) {
        let detectErrorBoundary = opts.detectErrorBoundary;
        mapRouteProperties = (route) => ({
          hasErrorBoundary: detectErrorBoundary(route)
        });
      } else
        mapRouteProperties = defaultMapRouteProperties;
      let dataRoutes = convertRoutesToDataRoutes(routes2, mapRouteProperties, void 0, manifest);
      async function query(request, _temp2) {
        let {
          requestContext
        } = _temp2 === void 0 ? {} : _temp2, url = new URL(request.url), method = request.method, location = createLocation("", createPath(url), null, "default"), matches = matchRoutes(dataRoutes, location, basename);
        if (!isValidMethod(method) && method !== "HEAD") {
          let error2 = getInternalRouterError(405, {
            method
          }), {
            matches: methodNotAllowedMatches,
            route
          } = getShortCircuitMatches(dataRoutes);
          return {
            basename,
            location,
            matches: methodNotAllowedMatches,
            loaderData: {},
            actionData: null,
            errors: {
              [route.id]: error2
            },
            statusCode: error2.status,
            loaderHeaders: {},
            actionHeaders: {},
            activeDeferreds: null
          };
        } else if (!matches) {
          let error2 = getInternalRouterError(404, {
            pathname: location.pathname
          }), {
            matches: notFoundMatches,
            route
          } = getShortCircuitMatches(dataRoutes);
          return {
            basename,
            location,
            matches: notFoundMatches,
            loaderData: {},
            actionData: null,
            errors: {
              [route.id]: error2
            },
            statusCode: error2.status,
            loaderHeaders: {},
            actionHeaders: {},
            activeDeferreds: null
          };
        }
        let result = await queryImpl(request, location, matches, requestContext);
        return isResponse(result) ? result : _extends2({
          location,
          basename
        }, result);
      }
      async function queryRoute(request, _temp3) {
        let {
          routeId,
          requestContext
        } = _temp3 === void 0 ? {} : _temp3, url = new URL(request.url), method = request.method, location = createLocation("", createPath(url), null, "default"), matches = matchRoutes(dataRoutes, location, basename);
        if (!isValidMethod(method) && method !== "HEAD" && method !== "OPTIONS")
          throw getInternalRouterError(405, {
            method
          });
        if (!matches)
          throw getInternalRouterError(404, {
            pathname: location.pathname
          });
        let match = routeId ? matches.find((m) => m.route.id === routeId) : getTargetMatch(matches, location);
        if (routeId && !match)
          throw getInternalRouterError(403, {
            pathname: location.pathname,
            routeId
          });
        if (!match)
          throw getInternalRouterError(404, {
            pathname: location.pathname
          });
        let result = await queryImpl(request, location, matches, requestContext, match);
        if (isResponse(result))
          return result;
        let error2 = result.errors ? Object.values(result.errors)[0] : void 0;
        if (error2 !== void 0)
          throw error2;
        if (result.actionData)
          return Object.values(result.actionData)[0];
        if (result.loaderData) {
          var _result$activeDeferre;
          let data = Object.values(result.loaderData)[0];
          return (_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id] && (data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id]), data;
        }
      }
      async function queryImpl(request, location, matches, requestContext, routeMatch) {
        invariant2(request.signal, "query()/queryRoute() requests must contain an AbortController signal");
        try {
          if (isMutationMethod(request.method.toLowerCase()))
            return await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);
          let result = await loadRouteData(request, matches, requestContext, routeMatch);
          return isResponse(result) ? result : _extends2({}, result, {
            actionData: null,
            actionHeaders: {}
          });
        } catch (e24) {
          if (isQueryRouteResponse(e24)) {
            if (e24.type === ResultType.error && !isRedirectResponse(e24.response))
              throw e24.response;
            return e24.response;
          }
          if (isRedirectResponse(e24))
            return e24;
          throw e24;
        }
      }
      async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {
        let result;
        if (!actionMatch.route.action && !actionMatch.route.lazy) {
          let error2 = getInternalRouterError(405, {
            method: request.method,
            pathname: new URL(request.url).pathname,
            routeId: actionMatch.route.id
          });
          if (isRouteRequest)
            throw error2;
          result = {
            type: ResultType.error,
            error: error2
          };
        } else if (result = await callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename, !0, isRouteRequest, requestContext), request.signal.aborted) {
          let method = isRouteRequest ? "queryRoute" : "query";
          throw new Error(method + "() call aborted");
        }
        if (isRedirectResult(result))
          throw new Response(null, {
            status: result.status,
            headers: {
              Location: result.location
            }
          });
        if (isDeferredResult(result)) {
          let error2 = getInternalRouterError(400, {
            type: "defer-action"
          });
          if (isRouteRequest)
            throw error2;
          result = {
            type: ResultType.error,
            error: error2
          };
        }
        if (isRouteRequest) {
          if (isErrorResult(result))
            throw result.error;
          return {
            matches: [actionMatch],
            loaderData: {},
            actionData: {
              [actionMatch.route.id]: result.data
            },
            errors: null,
            // Note: statusCode + headers are unused here since queryRoute will
            // return the raw Response or value
            statusCode: 200,
            loaderHeaders: {},
            actionHeaders: {},
            activeDeferreds: null
          };
        }
        if (isErrorResult(result)) {
          let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id), context2 = await loadRouteData(request, matches, requestContext, void 0, {
            [boundaryMatch.route.id]: result.error
          });
          return _extends2({}, context2, {
            statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,
            actionData: null,
            actionHeaders: _extends2({}, result.headers ? {
              [actionMatch.route.id]: result.headers
            } : {})
          });
        }
        let loaderRequest = new Request(request.url, {
          headers: request.headers,
          redirect: request.redirect,
          signal: request.signal
        }), context = await loadRouteData(loaderRequest, matches, requestContext);
        return _extends2({}, context, result.statusCode ? {
          statusCode: result.statusCode
        } : {}, {
          actionData: {
            [actionMatch.route.id]: result.data
          },
          actionHeaders: _extends2({}, result.headers ? {
            [actionMatch.route.id]: result.headers
          } : {})
        });
      }
      async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {
        let isRouteRequest = routeMatch != null;
        if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy))
          throw getInternalRouterError(400, {
            method: request.method,
            pathname: new URL(request.url).pathname,
            routeId: routeMatch == null ? void 0 : routeMatch.route.id
          });
        let matchesToLoad = (routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0])).filter((m) => m.route.loader || m.route.lazy);
        if (matchesToLoad.length === 0)
          return {
            matches,
            // Add a null for all matched routes for proper revalidation on the client
            loaderData: matches.reduce((acc, m) => Object.assign(acc, {
              [m.route.id]: null
            }), {}),
            errors: pendingActionError || null,
            statusCode: 200,
            loaderHeaders: {},
            activeDeferreds: null
          };
        let results2 = await Promise.all([...matchesToLoad.map((match) => callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename, !0, isRouteRequest, requestContext))]);
        if (request.signal.aborted) {
          let method = isRouteRequest ? "queryRoute" : "query";
          throw new Error(method + "() call aborted");
        }
        let activeDeferreds = /* @__PURE__ */ new Map(), context = processRouteLoaderData(matches, matchesToLoad, results2, pendingActionError, activeDeferreds), executedLoaders = new Set(matchesToLoad.map((match) => match.route.id));
        return matches.forEach((match) => {
          executedLoaders.has(match.route.id) || (context.loaderData[match.route.id] = null);
        }), _extends2({}, context, {
          matches,
          activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null
        });
      }
      return {
        dataRoutes,
        query,
        queryRoute
      };
    }
    function getStaticContextFromError(routes2, context, error2) {
      return _extends2({}, context, {
        statusCode: 500,
        errors: {
          [context._deepestRenderedBoundaryId || routes2[0].id]: error2
        }
      });
    }
    function isSubmissionNavigation(opts) {
      return opts != null && "formData" in opts;
    }
    function normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {
      let contextualMatches, activeRouteMatch;
      if (fromRouteId != null && relative !== "path") {
        contextualMatches = [];
        for (let match of matches)
          if (contextualMatches.push(match), match.route.id === fromRouteId) {
            activeRouteMatch = match;
            break;
          }
      } else
        contextualMatches = matches, activeRouteMatch = matches[matches.length - 1];
      let path = resolveTo(to || ".", getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === "path");
      return to == null && (path.search = location.search, path.hash = location.hash), (to == null || to === "" || to === ".") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search) && (path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index"), prependBasename && basename !== "/" && (path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname])), createPath(path);
    }
    function normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {
      if (!opts || !isSubmissionNavigation(opts))
        return {
          path
        };
      if (opts.formMethod && !isValidMethod(opts.formMethod))
        return {
          path,
          error: getInternalRouterError(405, {
            method: opts.formMethod
          })
        };
      let submission;
      if (opts.formData) {
        let formMethod = opts.formMethod || "get";
        if (submission = {
          formMethod: normalizeFormMethod ? formMethod.toUpperCase() : formMethod.toLowerCase(),
          formAction: stripHashFromPath(path),
          formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
          formData: opts.formData
        }, isMutationMethod(submission.formMethod))
          return {
            path,
            submission
          };
      }
      let parsedPath = parsePath(path), searchParams = convertFormDataToSearchParams(opts.formData);
      return isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search) && searchParams.append("index", ""), parsedPath.search = "?" + searchParams, {
        path: createPath(parsedPath),
        submission
      };
    }
    function getLoaderMatchesUntilBoundary(matches, boundaryId) {
      let boundaryMatches = matches;
      if (boundaryId) {
        let index2 = matches.findIndex((m) => m.route.id === boundaryId);
        index2 >= 0 && (boundaryMatches = matches.slice(0, index2));
      }
      return boundaryMatches;
    }
    function getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {
      let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : void 0, currentUrl = history.createURL(state.location), nextUrl = history.createURL(location), boundaryId = pendingError ? Object.keys(pendingError)[0] : void 0, navigationMatches = getLoaderMatchesUntilBoundary(matches, boundaryId).filter((match, index2) => {
        if (match.route.lazy)
          return !0;
        if (match.route.loader == null)
          return !1;
        if (isNewLoader(state.loaderData, state.matches[index2], match) || cancelledDeferredRoutes.some((id3) => id3 === match.route.id))
          return !0;
        let currentRouteMatch = state.matches[index2], nextRouteMatch = match;
        return shouldRevalidateLoader(match, _extends2({
          currentUrl,
          currentParams: currentRouteMatch.params,
          nextUrl,
          nextParams: nextRouteMatch.params
        }, submission, {
          actionResult,
          defaultShouldRevalidate: (
            // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
            isRevalidationRequired || // Clicked the same link, resubmitted a GET form
            currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
            currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)
          )
        }));
      }), revalidatingFetchers = [];
      return fetchLoadMatches.forEach((f, key) => {
        if (!matches.some((m) => m.route.id === f.routeId))
          return;
        let fetcherMatches = matchRoutes(routesToUse, f.path, basename);
        if (!fetcherMatches) {
          revalidatingFetchers.push({
            key,
            routeId: f.routeId,
            path: f.path,
            matches: null,
            match: null,
            controller: null
          });
          return;
        }
        let fetcherMatch = getTargetMatch(fetcherMatches, f.path);
        if (cancelledFetcherLoads.includes(key)) {
          revalidatingFetchers.push({
            key,
            routeId: f.routeId,
            path: f.path,
            matches: fetcherMatches,
            match: fetcherMatch,
            controller: new AbortController()
          });
          return;
        }
        shouldRevalidateLoader(fetcherMatch, _extends2({
          currentUrl,
          currentParams: state.matches[state.matches.length - 1].params,
          nextUrl,
          nextParams: matches[matches.length - 1].params
        }, submission, {
          actionResult,
          // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
          defaultShouldRevalidate: isRevalidationRequired
        })) && revalidatingFetchers.push({
          key,
          routeId: f.routeId,
          path: f.path,
          matches: fetcherMatches,
          match: fetcherMatch,
          controller: new AbortController()
        });
      }), [navigationMatches, revalidatingFetchers];
    }
    function isNewLoader(currentLoaderData, currentMatch, match) {
      let isNew = (
        // [a] -> [a, b]
        !currentMatch || // [a, b] -> [a, c]
        match.route.id !== currentMatch.route.id
      ), isMissingData = currentLoaderData[match.route.id] === void 0;
      return isNew || isMissingData;
    }
    function isNewRouteInstance(currentMatch, match) {
      let currentPath = currentMatch.route.path;
      return (
        // param change for this match, /users/123 -> /users/456
        currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path
        // e.g. /files/images/avatar.jpg -> files/finances.xls
        currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match.params["*"]
      );
    }
    function shouldRevalidateLoader(loaderMatch, arg) {
      if (loaderMatch.route.shouldRevalidate) {
        let routeChoice = loaderMatch.route.shouldRevalidate(arg);
        if (typeof routeChoice == "boolean")
          return routeChoice;
      }
      return arg.defaultShouldRevalidate;
    }
    async function loadLazyRouteModule(route, mapRouteProperties, manifest) {
      if (!route.lazy)
        return;
      let lazyRoute = await route.lazy();
      if (!route.lazy)
        return;
      let routeToUpdate = manifest[route.id];
      invariant2(routeToUpdate, "No route found in manifest");
      let routeUpdates = {};
      for (let lazyRouteProperty in lazyRoute) {
        let isPropertyStaticallyDefined = routeToUpdate[lazyRouteProperty] !== void 0 && // This property isn't static since it should always be updated based
        // on the route updates
        lazyRouteProperty !== "hasErrorBoundary";
        warning2(!isPropertyStaticallyDefined, 'Route "' + routeToUpdate.id + '" has a static property "' + lazyRouteProperty + '" defined but its lazy function is also returning a value for this property. ' + ('The lazy route property "' + lazyRouteProperty + '" will be ignored.')), !isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty) && (routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty]);
      }
      Object.assign(routeToUpdate, routeUpdates), Object.assign(routeToUpdate, _extends2({}, mapRouteProperties(routeToUpdate), {
        lazy: void 0
      }));
    }
    async function callLoaderOrAction(type2, request, match, matches, manifest, mapRouteProperties, basename, isStaticRequest, isRouteRequest, requestContext) {
      isStaticRequest === void 0 && (isStaticRequest = !1), isRouteRequest === void 0 && (isRouteRequest = !1);
      let resultType, result, onReject, runHandler = (handler) => {
        let reject, abortPromise = new Promise((_, r25) => reject = r25);
        return onReject = () => reject(), request.signal.addEventListener("abort", onReject), Promise.race([handler({
          request,
          params: match.params,
          context: requestContext
        }), abortPromise]);
      };
      try {
        let handler = match.route[type2];
        if (match.route.lazy)
          if (handler)
            result = (await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]))[0];
          else if (await loadLazyRouteModule(match.route, mapRouteProperties, manifest), handler = match.route[type2], handler)
            result = await runHandler(handler);
          else if (type2 === "action") {
            let url = new URL(request.url), pathname = url.pathname + url.search;
            throw getInternalRouterError(405, {
              method: request.method,
              pathname,
              routeId: match.route.id
            });
          } else
            return {
              type: ResultType.data,
              data: void 0
            };
        else if (handler)
          result = await runHandler(handler);
        else {
          let url = new URL(request.url), pathname = url.pathname + url.search;
          throw getInternalRouterError(404, {
            pathname
          });
        }
        invariant2(result !== void 0, "You defined " + (type2 === "action" ? "an action" : "a loader") + " for route " + ('"' + match.route.id + "\" but didn't return anything from your `" + type2 + "` ") + "function. Please return a value or `null`.");
      } catch (e24) {
        resultType = ResultType.error, result = e24;
      } finally {
        onReject && request.signal.removeEventListener("abort", onReject);
      }
      if (isResponse(result)) {
        let status = result.status;
        if (redirectStatusCodes.has(status)) {
          let location = result.headers.get("Location");
          if (invariant2(location, "Redirects returned/thrown from loaders/actions must have a Location header"), !ABSOLUTE_URL_REGEX.test(location))
            location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, !0, location);
          else if (!isStaticRequest) {
            let currentUrl = new URL(request.url), url = location.startsWith("//") ? new URL(currentUrl.protocol + location) : new URL(location), isSameBasename = stripBasename(url.pathname, basename) != null;
            url.origin === currentUrl.origin && isSameBasename && (location = url.pathname + url.search + url.hash);
          }
          if (isStaticRequest)
            throw result.headers.set("Location", location), result;
          return {
            type: ResultType.redirect,
            status,
            location,
            revalidate: result.headers.get("X-Remix-Revalidate") !== null
          };
        }
        if (isRouteRequest)
          throw {
            type: resultType || ResultType.data,
            response: result
          };
        let data, contentType = result.headers.get("Content-Type");
        return contentType && /\bapplication\/json\b/.test(contentType) ? data = await result.json() : data = await result.text(), resultType === ResultType.error ? {
          type: resultType,
          error: new ErrorResponse(status, result.statusText, data),
          headers: result.headers
        } : {
          type: ResultType.data,
          data,
          statusCode: result.status,
          headers: result.headers
        };
      }
      if (resultType === ResultType.error)
        return {
          type: resultType,
          error: result
        };
      if (isDeferredData(result)) {
        var _result$init, _result$init2;
        return {
          type: ResultType.deferred,
          deferredData: result,
          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,
          headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)
        };
      }
      return {
        type: ResultType.data,
        data: result
      };
    }
    function createClientSideRequest(history, location, signal, submission) {
      let url = history.createURL(stripHashFromPath(location)).toString(), init = {
        signal
      };
      if (submission && isMutationMethod(submission.formMethod)) {
        let {
          formMethod,
          formEncType,
          formData
        } = submission;
        init.method = formMethod.toUpperCase(), init.body = formEncType === "application/x-www-form-urlencoded" ? convertFormDataToSearchParams(formData) : formData;
      }
      return new Request(url, init);
    }
    function convertFormDataToSearchParams(formData) {
      let searchParams = new URLSearchParams();
      for (let [key, value] of formData.entries())
        searchParams.append(key, value instanceof File ? value.name : value);
      return searchParams;
    }
    function processRouteLoaderData(matches, matchesToLoad, results2, pendingError, activeDeferreds) {
      let loaderData = {}, errors = null, statusCode, foundError = !1, loaderHeaders = {};
      return results2.forEach((result, index2) => {
        let id3 = matchesToLoad[index2].route.id;
        if (invariant2(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData"), isErrorResult(result)) {
          let boundaryMatch = findNearestBoundary(matches, id3), error2 = result.error;
          pendingError && (error2 = Object.values(pendingError)[0], pendingError = void 0), errors = errors || {}, errors[boundaryMatch.route.id] == null && (errors[boundaryMatch.route.id] = error2), loaderData[id3] = void 0, foundError || (foundError = !0, statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500), result.headers && (loaderHeaders[id3] = result.headers);
        } else
          isDeferredResult(result) ? (activeDeferreds.set(id3, result.deferredData), loaderData[id3] = result.deferredData.data) : loaderData[id3] = result.data, result.statusCode != null && result.statusCode !== 200 && !foundError && (statusCode = result.statusCode), result.headers && (loaderHeaders[id3] = result.headers);
      }), pendingError && (errors = pendingError, loaderData[Object.keys(pendingError)[0]] = void 0), {
        loaderData,
        errors,
        statusCode: statusCode || 200,
        loaderHeaders
      };
    }
    function processLoaderData(state, matches, matchesToLoad, results2, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {
      let {
        loaderData,
        errors
      } = processRouteLoaderData(matches, matchesToLoad, results2, pendingError, activeDeferreds);
      for (let index2 = 0; index2 < revalidatingFetchers.length; index2++) {
        let {
          key,
          match,
          controller
        } = revalidatingFetchers[index2];
        invariant2(fetcherResults !== void 0 && fetcherResults[index2] !== void 0, "Did not find corresponding fetcher result");
        let result = fetcherResults[index2];
        if (!(controller && controller.signal.aborted))
          if (isErrorResult(result)) {
            let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);
            errors && errors[boundaryMatch.route.id] || (errors = _extends2({}, errors, {
              [boundaryMatch.route.id]: result.error
            })), state.fetchers.delete(key);
          } else if (isRedirectResult(result))
            invariant2(!1, "Unhandled fetcher revalidation redirect");
          else if (isDeferredResult(result))
            invariant2(!1, "Unhandled fetcher deferred data");
          else {
            let doneFetcher = {
              state: "idle",
              data: result.data,
              formMethod: void 0,
              formAction: void 0,
              formEncType: void 0,
              formData: void 0,
              " _hasFetcherDoneAnything ": !0
            };
            state.fetchers.set(key, doneFetcher);
          }
      }
      return {
        loaderData,
        errors
      };
    }
    function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
      let mergedLoaderData = _extends2({}, newLoaderData);
      for (let match of matches) {
        let id3 = match.route.id;
        if (newLoaderData.hasOwnProperty(id3) ? newLoaderData[id3] !== void 0 && (mergedLoaderData[id3] = newLoaderData[id3]) : loaderData[id3] !== void 0 && match.route.loader && (mergedLoaderData[id3] = loaderData[id3]), errors && errors.hasOwnProperty(id3))
          break;
      }
      return mergedLoaderData;
    }
    function findNearestBoundary(matches, routeId) {
      return (routeId ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1) : [...matches]).reverse().find((m) => m.route.hasErrorBoundary === !0) || matches[0];
    }
    function getShortCircuitMatches(routes2) {
      let route = routes2.find((r25) => r25.index || !r25.path || r25.path === "/") || {
        id: "__shim-error-route__"
      };
      return {
        matches: [{
          params: {},
          pathname: "",
          pathnameBase: "",
          route
        }],
        route
      };
    }
    function getInternalRouterError(status, _temp4) {
      let {
        pathname,
        routeId,
        method,
        type: type2
      } = _temp4 === void 0 ? {} : _temp4, statusText = "Unknown Server Error", errorMessage = "Unknown @remix-run/router error";
      return status === 400 ? (statusText = "Bad Request", method && pathname && routeId ? errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request." : type2 === "defer-action" && (errorMessage = "defer() is not supported in actions")) : status === 403 ? (statusText = "Forbidden", errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"') : status === 404 ? (statusText = "Not Found", errorMessage = 'No route matches URL "' + pathname + '"') : status === 405 && (statusText = "Method Not Allowed", method && pathname && routeId ? errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request." : method && (errorMessage = 'Invalid request method "' + method.toUpperCase() + '"')), new ErrorResponse(status || 500, statusText, new Error(errorMessage), !0);
    }
    function findRedirect(results2) {
      for (let i13 = results2.length - 1; i13 >= 0; i13--) {
        let result = results2[i13];
        if (isRedirectResult(result))
          return result;
      }
    }
    function stripHashFromPath(path) {
      let parsedPath = typeof path == "string" ? parsePath(path) : path;
      return createPath(_extends2({}, parsedPath, {
        hash: ""
      }));
    }
    function isHashChangeOnly(a9, b) {
      return a9.pathname !== b.pathname || a9.search !== b.search ? !1 : a9.hash === "" ? b.hash !== "" : a9.hash === b.hash ? !0 : b.hash !== "";
    }
    function isDeferredResult(result) {
      return result.type === ResultType.deferred;
    }
    function isErrorResult(result) {
      return result.type === ResultType.error;
    }
    function isRedirectResult(result) {
      return (result && result.type) === ResultType.redirect;
    }
    function isDeferredData(value) {
      let deferred = value;
      return deferred && typeof deferred == "object" && typeof deferred.data == "object" && typeof deferred.subscribe == "function" && typeof deferred.cancel == "function" && typeof deferred.resolveData == "function";
    }
    function isResponse(value) {
      return value != null && typeof value.status == "number" && typeof value.statusText == "string" && typeof value.headers == "object" && typeof value.body < "u";
    }
    function isRedirectResponse(result) {
      if (!isResponse(result))
        return !1;
      let status = result.status, location = result.headers.get("Location");
      return status >= 300 && status <= 399 && location != null;
    }
    function isQueryRouteResponse(obj) {
      return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);
    }
    function isValidMethod(method) {
      return validRequestMethods.has(method.toLowerCase());
    }
    function isMutationMethod(method) {
      return validMutationMethods.has(method.toLowerCase());
    }
    async function resolveDeferredResults(currentMatches, matchesToLoad, results2, signals, isFetcher, currentLoaderData) {
      for (let index2 = 0; index2 < results2.length; index2++) {
        let result = results2[index2], match = matchesToLoad[index2];
        if (!match)
          continue;
        let currentMatch = currentMatches.find((m) => m.route.id === match.route.id), isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== void 0;
        if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {
          let signal = signals[index2];
          invariant2(signal, "Expected an AbortSignal for revalidating fetcher deferred result"), await resolveDeferredData(result, signal, isFetcher).then((result2) => {
            result2 && (results2[index2] = result2 || results2[index2]);
          });
        }
      }
    }
    async function resolveDeferredData(result, signal, unwrap) {
      if (unwrap === void 0 && (unwrap = !1), !await result.deferredData.resolveData(signal)) {
        if (unwrap)
          try {
            return {
              type: ResultType.data,
              data: result.deferredData.unwrappedData
            };
          } catch (e24) {
            return {
              type: ResultType.error,
              error: e24
            };
          }
        return {
          type: ResultType.data,
          data: result.deferredData.data
        };
      }
    }
    function hasNakedIndexQuery(search) {
      return new URLSearchParams(search).getAll("index").some((v) => v === "");
    }
    function createUseMatchesMatch(match, loaderData) {
      let {
        route,
        pathname,
        params
      } = match;
      return {
        id: route.id,
        pathname,
        params,
        data: loaderData[route.id],
        handle: route.handle
      };
    }
    function getTargetMatch(matches, location) {
      let search = typeof location == "string" ? parsePath(location).search : location.search;
      if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || ""))
        return matches[matches.length - 1];
      let pathMatches = getPathContributingMatches(matches);
      return pathMatches[pathMatches.length - 1];
    }
    exports.AbortedDeferredError = AbortedDeferredError;
    exports.ErrorResponse = ErrorResponse;
    exports.IDLE_BLOCKER = IDLE_BLOCKER;
    exports.IDLE_FETCHER = IDLE_FETCHER;
    exports.IDLE_NAVIGATION = IDLE_NAVIGATION;
    exports.UNSAFE_DEFERRED_SYMBOL = UNSAFE_DEFERRED_SYMBOL;
    exports.UNSAFE_DeferredData = DeferredData;
    exports.UNSAFE_convertRoutesToDataRoutes = convertRoutesToDataRoutes;
    exports.UNSAFE_getPathContributingMatches = getPathContributingMatches;
    exports.UNSAFE_invariant = invariant2;
    exports.UNSAFE_warning = warning2;
    exports.createBrowserHistory = createBrowserHistory;
    exports.createHashHistory = createHashHistory;
    exports.createMemoryHistory = createMemoryHistory;
    exports.createPath = createPath;
    exports.createRouter = createRouter;
    exports.createStaticHandler = createStaticHandler;
    exports.defer = defer;
    exports.generatePath = generatePath;
    exports.getStaticContextFromError = getStaticContextFromError;
    exports.getToPathname = getToPathname;
    exports.isDeferredData = isDeferredData;
    exports.isRouteErrorResponse = isRouteErrorResponse;
    exports.joinPaths = joinPaths;
    exports.json = json;
    exports.matchPath = matchPath;
    exports.matchRoutes = matchRoutes;
    exports.normalizePathname = normalizePathname;
    exports.parsePath = parsePath;
    exports.redirect = redirect;
    exports.resolvePath = resolvePath;
    exports.resolveTo = resolveTo;
    exports.stripBasename = stripBasename;
  }
});

// node_modules/@remix-run/server-runtime/dist/mode.js
var require_mode = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/mode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var ServerMode = /* @__PURE__ */ function(ServerMode2) {
      return ServerMode2.Development = "development", ServerMode2.Production = "production", ServerMode2.Test = "test", ServerMode2;
    }({});
    function isServerMode(value) {
      return value === ServerMode.Development || value === ServerMode.Production || value === ServerMode.Test;
    }
    exports.ServerMode = ServerMode;
    exports.isServerMode = isServerMode;
  }
});

// node_modules/@remix-run/server-runtime/dist/errors.js
var require_errors = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var router = require_router_cjs(), mode = require_mode();
    function sanitizeError(error2, serverMode) {
      if (error2 instanceof Error && serverMode !== mode.ServerMode.Development) {
        let sanitized = new Error("Unexpected Server Error");
        return sanitized.stack = void 0, sanitized;
      }
      return error2;
    }
    function sanitizeErrors(errors, serverMode) {
      return Object.entries(errors).reduce((acc, [routeId, error2]) => Object.assign(acc, {
        [routeId]: sanitizeError(error2, serverMode)
      }), {});
    }
    function serializeError(error2, serverMode) {
      let sanitized = sanitizeError(error2, serverMode);
      return {
        message: sanitized.message,
        stack: sanitized.stack
      };
    }
    function serializeErrors(errors, serverMode) {
      if (!errors)
        return null;
      let entries = Object.entries(errors), serialized = {};
      for (let [key, val] of entries)
        if (router.isRouteErrorResponse(val))
          serialized[key] = {
            ...val,
            __type: "RouteErrorResponse"
          };
        else if (val instanceof Error) {
          let sanitized = sanitizeError(val, serverMode);
          serialized[key] = {
            message: sanitized.message,
            stack: sanitized.stack,
            __type: "Error"
          };
        } else
          serialized[key] = val;
      return serialized;
    }
    exports.sanitizeError = sanitizeError;
    exports.sanitizeErrors = sanitizeErrors;
    exports.serializeError = serializeError;
    exports.serializeErrors = serializeErrors;
  }
});

// node_modules/@remix-run/server-runtime/dist/responses.js
var require_responses = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/responses.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var router = require_router_cjs(), errors = require_errors(), json = (data, init = {}) => router.json(data, init), defer = (data, init = {}) => router.defer(data, init), redirect = (url, init = 302) => router.redirect(url, init);
    function isDeferredData(value) {
      let deferred = value;
      return deferred && typeof deferred == "object" && typeof deferred.data == "object" && typeof deferred.subscribe == "function" && typeof deferred.cancel == "function" && typeof deferred.resolveData == "function";
    }
    function isResponse(value) {
      return value != null && typeof value.status == "number" && typeof value.statusText == "string" && typeof value.headers == "object" && typeof value.body < "u";
    }
    var redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
    function isRedirectStatusCode(statusCode) {
      return redirectStatusCodes.has(statusCode);
    }
    function isRedirectResponse(response) {
      return isRedirectStatusCode(response.status);
    }
    function isTrackedPromise(value) {
      return value != null && typeof value.then == "function" && value._tracked === !0;
    }
    var DEFERRED_VALUE_PLACEHOLDER_PREFIX = "__deferred_promise:";
    function createDeferredReadableStream(deferredData, signal, serverMode) {
      let encoder = new TextEncoder();
      return new ReadableStream({
        async start(controller) {
          let criticalData = {}, preresolvedKeys = [];
          for (let [key, value] of Object.entries(deferredData.data))
            isTrackedPromise(value) ? (criticalData[key] = `${DEFERRED_VALUE_PLACEHOLDER_PREFIX}${key}`, (typeof value._data < "u" || typeof value._error < "u") && preresolvedKeys.push(key)) : criticalData[key] = value;
          controller.enqueue(encoder.encode(JSON.stringify(criticalData) + `

`));
          for (let preresolvedKey of preresolvedKeys)
            enqueueTrackedPromise(controller, encoder, preresolvedKey, deferredData.data[preresolvedKey], serverMode);
          let unsubscribe = deferredData.subscribe((aborted, settledKey) => {
            settledKey && enqueueTrackedPromise(controller, encoder, settledKey, deferredData.data[settledKey], serverMode);
          });
          await deferredData.resolveData(signal), unsubscribe(), controller.close();
        }
      });
    }
    function enqueueTrackedPromise(controller, encoder, settledKey, promise, serverMode) {
      "_error" in promise ? controller.enqueue(encoder.encode("error:" + JSON.stringify({
        [settledKey]: promise._error instanceof Error ? errors.serializeError(promise._error, serverMode) : promise._error
      }) + `

`)) : controller.enqueue(encoder.encode("data:" + JSON.stringify({
        [settledKey]: promise._data ?? null
      }) + `

`));
    }
    exports.createDeferredReadableStream = createDeferredReadableStream;
    exports.defer = defer;
    exports.isDeferredData = isDeferredData;
    exports.isRedirectResponse = isRedirectResponse;
    exports.isRedirectStatusCode = isRedirectStatusCode;
    exports.isResponse = isResponse;
    exports.json = json;
    exports.redirect = redirect;
  }
});

// node_modules/@remix-run/server-runtime/dist/entry.js
var require_entry = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/entry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    function createEntryRouteModules(manifest) {
      return Object.keys(manifest).reduce((memo, routeId) => (memo[routeId] = manifest[routeId].module, memo), {});
    }
    exports.createEntryRouteModules = createEntryRouteModules;
  }
});

// node_modules/set-cookie-parser/lib/set-cookie.js
var require_set_cookie = __commonJS({
  "node_modules/set-cookie-parser/lib/set-cookie.js"(exports, module2) {
    "use strict";
    var defaultParseOptions = {
      decodeValues: !0,
      map: !1,
      silent: !1
    };
    function isNonEmptyString(str) {
      return typeof str == "string" && !!str.trim();
    }
    function parseString(setCookieValue, options) {
      var parts = setCookieValue.split(";").filter(isNonEmptyString), nameValuePairStr = parts.shift(), parsed = parseNameValuePair(nameValuePairStr), name = parsed.name, value = parsed.value;
      options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;
      try {
        value = options.decodeValues ? decodeURIComponent(value) : value;
      } catch (e24) {
        console.error(
          "set-cookie-parser encountered an error while decoding a cookie with value '" + value + "'. Set options.decodeValues to false to disable this feature.",
          e24
        );
      }
      var cookie = {
        name,
        value
      };
      return parts.forEach(function(part) {
        var sides2 = part.split("="), key = sides2.shift().trimLeft().toLowerCase(), value2 = sides2.join("=");
        key === "expires" ? cookie.expires = new Date(value2) : key === "max-age" ? cookie.maxAge = parseInt(value2, 10) : key === "secure" ? cookie.secure = !0 : key === "httponly" ? cookie.httpOnly = !0 : key === "samesite" ? cookie.sameSite = value2 : cookie[key] = value2;
      }), cookie;
    }
    function parseNameValuePair(nameValuePairStr) {
      var name = "", value = "", nameValueArr = nameValuePairStr.split("=");
      return nameValueArr.length > 1 ? (name = nameValueArr.shift(), value = nameValueArr.join("=")) : value = nameValuePairStr, { name, value };
    }
    function parse(input, options) {
      if (options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions, !input)
        return options.map ? {} : [];
      if (input.headers)
        if (typeof input.headers.getSetCookie == "function")
          input = input.headers.getSetCookie();
        else if (input.headers["set-cookie"])
          input = input.headers["set-cookie"];
        else {
          var sch = input.headers[Object.keys(input.headers).find(function(key) {
            return key.toLowerCase() === "set-cookie";
          })];
          !sch && input.headers.cookie && !options.silent && console.warn(
            "Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."
          ), input = sch;
        }
      if (Array.isArray(input) || (input = [input]), options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions, options.map) {
        var cookies = {};
        return input.filter(isNonEmptyString).reduce(function(cookies2, str) {
          var cookie = parseString(str, options);
          return cookies2[cookie.name] = cookie, cookies2;
        }, cookies);
      } else
        return input.filter(isNonEmptyString).map(function(str) {
          return parseString(str, options);
        });
    }
    function splitCookiesString(cookiesString) {
      if (Array.isArray(cookiesString))
        return cookiesString;
      if (typeof cookiesString != "string")
        return [];
      var cookiesStrings = [], pos = 0, start, ch, lastComma, nextStart, cookiesSeparatorFound;
      function skipWhitespace() {
        for (; pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos)); )
          pos += 1;
        return pos < cookiesString.length;
      }
      function notSpecialChar() {
        return ch = cookiesString.charAt(pos), ch !== "=" && ch !== ";" && ch !== ",";
      }
      for (; pos < cookiesString.length; ) {
        for (start = pos, cookiesSeparatorFound = !1; skipWhitespace(); )
          if (ch = cookiesString.charAt(pos), ch === ",") {
            for (lastComma = pos, pos += 1, skipWhitespace(), nextStart = pos; pos < cookiesString.length && notSpecialChar(); )
              pos += 1;
            pos < cookiesString.length && cookiesString.charAt(pos) === "=" ? (cookiesSeparatorFound = !0, pos = nextStart, cookiesStrings.push(cookiesString.substring(start, lastComma)), start = pos) : pos = lastComma + 1;
          } else
            pos += 1;
        (!cookiesSeparatorFound || pos >= cookiesString.length) && cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
      }
      return cookiesStrings;
    }
    module2.exports = parse;
    module2.exports.parse = parse;
    module2.exports.parseString = parseString;
    module2.exports.splitCookiesString = splitCookiesString;
  }
});

// node_modules/@remix-run/server-runtime/dist/headers.js
var require_headers = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var setCookieParser = require_set_cookie();
    function getDocumentHeadersRR(build, context) {
      let boundaryIdx = context.errors ? context.matches.findIndex((m) => context.errors[m.route.id]) : -1, matches = boundaryIdx >= 0 ? context.matches.slice(0, boundaryIdx + 1) : context.matches, errorHeaders;
      if (boundaryIdx >= 0) {
        let {
          actionHeaders,
          actionData,
          loaderHeaders,
          loaderData
        } = context;
        context.matches.slice(boundaryIdx).some((match) => {
          let id3 = match.route.id;
          return actionHeaders[id3] && (!actionData || actionData[id3] === void 0) ? errorHeaders = actionHeaders[id3] : loaderHeaders[id3] && loaderData[id3] === void 0 && (errorHeaders = loaderHeaders[id3]), errorHeaders != null;
        });
      }
      return matches.reduce((parentHeaders, match, idx) => {
        let {
          id: id3
        } = match.route, routeModule = build.routes[id3].module, loaderHeaders = context.loaderHeaders[id3] || new Headers(), actionHeaders = context.actionHeaders[id3] || new Headers(), includeErrorHeaders = errorHeaders != null && idx === matches.length - 1, includeErrorCookies = includeErrorHeaders && errorHeaders !== loaderHeaders && errorHeaders !== actionHeaders;
        if (routeModule.headers == null && build.future.v2_headers) {
          let headers2 = new Headers(parentHeaders);
          return includeErrorCookies && prependCookies(errorHeaders, headers2), prependCookies(actionHeaders, headers2), prependCookies(loaderHeaders, headers2), headers2;
        }
        let headers = new Headers(routeModule.headers ? typeof routeModule.headers == "function" ? routeModule.headers({
          loaderHeaders,
          parentHeaders,
          actionHeaders,
          errorHeaders: includeErrorHeaders ? errorHeaders : void 0
        }) : routeModule.headers : void 0);
        return includeErrorCookies && prependCookies(errorHeaders, headers), prependCookies(actionHeaders, headers), prependCookies(loaderHeaders, headers), prependCookies(parentHeaders, headers), headers;
      }, new Headers());
    }
    function prependCookies(parentHeaders, childHeaders) {
      let parentSetCookieString = parentHeaders.get("Set-Cookie");
      parentSetCookieString && setCookieParser.splitCookiesString(parentSetCookieString).forEach((cookie) => {
        childHeaders.append("Set-Cookie", cookie);
      });
    }
    exports.getDocumentHeadersRR = getDocumentHeadersRR;
  }
});

// node_modules/@remix-run/server-runtime/dist/invariant.js
var require_invariant = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/invariant.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    function invariant2(value, message2) {
      if (value === !1 || value === null || typeof value > "u")
        throw console.error("The following error is a bug in Remix; please open an issue! https://github.com/remix-run/remix/issues/new"), new Error(message2);
    }
    exports.default = invariant2;
  }
});

// node_modules/@remix-run/server-runtime/dist/routeMatching.js
var require_routeMatching = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/routeMatching.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var router = require_router_cjs();
    function matchServerRoutes(routes2, pathname) {
      let matches = router.matchRoutes(routes2, pathname);
      return matches ? matches.map((match) => ({
        params: match.params,
        pathname: match.pathname,
        route: match.route
      })) : null;
    }
    exports.matchServerRoutes = matchServerRoutes;
  }
});

// node_modules/@remix-run/server-runtime/dist/data.js
var require_data = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/data.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var responses = require_responses();
    async function callRouteActionRR({
      loadContext,
      action,
      params,
      request,
      routeId
    }) {
      let result = await action({
        request: stripDataParam(stripIndexParam(request)),
        context: loadContext,
        params
      });
      if (result === void 0)
        throw new Error(`You defined an action for route "${routeId}" but didn't return anything from your \`action\` function. Please return a value or \`null\`.`);
      return responses.isResponse(result) ? result : responses.json(result);
    }
    async function callRouteLoaderRR({
      loadContext,
      loader,
      params,
      request,
      routeId
    }) {
      let result = await loader({
        request: stripDataParam(stripIndexParam(request)),
        context: loadContext,
        params
      });
      if (result === void 0)
        throw new Error(`You defined a loader for route "${routeId}" but didn't return anything from your \`loader\` function. Please return a value or \`null\`.`);
      return responses.isDeferredData(result) ? result.init && responses.isRedirectStatusCode(result.init.status || 200) ? responses.redirect(new Headers(result.init.headers).get("Location"), result.init) : result : responses.isResponse(result) ? result : responses.json(result);
    }
    function stripIndexParam(request) {
      let url = new URL(request.url), indexValues = url.searchParams.getAll("index");
      url.searchParams.delete("index");
      let indexValuesToKeep = [];
      for (let indexValue of indexValues)
        indexValue && indexValuesToKeep.push(indexValue);
      for (let toKeep of indexValuesToKeep)
        url.searchParams.append("index", toKeep);
      return new Request(url.href, request);
    }
    function stripDataParam(request) {
      let url = new URL(request.url);
      return url.searchParams.delete("_data"), new Request(url.href, request);
    }
    exports.callRouteActionRR = callRouteActionRR;
    exports.callRouteLoaderRR = callRouteLoaderRR;
  }
});

// node_modules/@remix-run/server-runtime/dist/routes.js
var require_routes = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/routes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var data = require_data();
    function groupRoutesByParentId(manifest) {
      let routes2 = {};
      return Object.values(manifest).forEach((route) => {
        let parentId = route.parentId || "";
        routes2[parentId] || (routes2[parentId] = []), routes2[parentId].push(route);
      }), routes2;
    }
    function createRoutes(manifest, parentId = "", routesByParentId = groupRoutesByParentId(manifest)) {
      return (routesByParentId[parentId] || []).map((route) => ({
        ...route,
        children: createRoutes(manifest, route.id, routesByParentId)
      }));
    }
    function createStaticHandlerDataRoutes(manifest, future2, parentId = "", routesByParentId = groupRoutesByParentId(manifest)) {
      return (routesByParentId[parentId] || []).map((route) => {
        let commonRoute = {
          // Always include root due to default boundaries
          hasErrorBoundary: future2.v2_errorBoundary === !0 ? route.id === "root" || route.module.ErrorBoundary != null : route.id === "root" || route.module.CatchBoundary != null || route.module.ErrorBoundary != null,
          id: route.id,
          path: route.path,
          loader: route.module.loader ? (args) => data.callRouteLoaderRR({
            request: args.request,
            params: args.params,
            loadContext: args.context,
            loader: route.module.loader,
            routeId: route.id
          }) : void 0,
          action: route.module.action ? (args) => data.callRouteActionRR({
            request: args.request,
            params: args.params,
            loadContext: args.context,
            action: route.module.action,
            routeId: route.id
          }) : void 0,
          handle: route.module.handle
        };
        return route.index ? {
          index: !0,
          ...commonRoute
        } : {
          caseSensitive: route.caseSensitive,
          children: createStaticHandlerDataRoutes(manifest, future2, route.id, routesByParentId),
          ...commonRoute
        };
      });
    }
    exports.createRoutes = createRoutes;
    exports.createStaticHandlerDataRoutes = createStaticHandlerDataRoutes;
  }
});

// node_modules/@remix-run/server-runtime/dist/markup.js
var require_markup = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/markup.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var ESCAPE_LOOKUP = {
      "&": "\\u0026",
      ">": "\\u003e",
      "<": "\\u003c",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    }, ESCAPE_REGEX = /[&><\u2028\u2029]/g;
    function escapeHtml(html) {
      return html.replace(ESCAPE_REGEX, (match) => ESCAPE_LOOKUP[match]);
    }
    exports.escapeHtml = escapeHtml;
  }
});

// node_modules/@remix-run/server-runtime/dist/serverHandoff.js
var require_serverHandoff = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/serverHandoff.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var markup = require_markup();
    function createServerHandoffString(serverHandoff) {
      return markup.escapeHtml(JSON.stringify(serverHandoff));
    }
    exports.createServerHandoffString = createServerHandoffString;
  }
});

// node_modules/@remix-run/server-runtime/dist/server.js
var require_server = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/server.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var router = require_router_cjs(), entry2 = require_entry(), errors = require_errors(), headers = require_headers(), invariant2 = require_invariant(), mode = require_mode(), routeMatching = require_routeMatching(), routes2 = require_routes(), responses = require_responses(), serverHandoff = require_serverHandoff(), createRequestHandler = (build, mode$1) => {
      let routes$1 = routes2.createRoutes(build.routes), dataRoutes = routes2.createStaticHandlerDataRoutes(build.routes, build.future), serverMode = mode.isServerMode(mode$1) ? mode$1 : mode.ServerMode.Production, staticHandler = router.createStaticHandler(dataRoutes), errorHandler = build.entry.module.handleError || ((error2, {
        request
      }) => {
        serverMode !== mode.ServerMode.Test && !request.signal.aborted && console.error(error2);
      });
      return async function(request, loadContext = {}) {
        let url = new URL(request.url), matches = routeMatching.matchServerRoutes(routes$1, url.pathname), handleError = (error2) => errorHandler(error2, {
          context: loadContext,
          params: matches && matches.length > 0 ? matches[0].params : {},
          request
        }), response;
        if (url.searchParams.has("_data")) {
          let routeId = url.searchParams.get("_data");
          if (response = await handleDataRequestRR(serverMode, staticHandler, routeId, request, loadContext, handleError), build.entry.module.handleDataRequest) {
            let match = matches.find((match2) => match2.route.id == routeId);
            response = await build.entry.module.handleDataRequest(response, {
              context: loadContext,
              params: match ? match.params : {},
              request
            });
          }
        } else
          matches && matches[matches.length - 1].route.module.default == null ? response = await handleResourceRequestRR(serverMode, staticHandler, matches.slice(-1)[0].route.id, request, loadContext, handleError) : response = await handleDocumentRequestRR(serverMode, build, staticHandler, request, loadContext, handleError);
        return request.method === "HEAD" ? new Response(null, {
          headers: response.headers,
          status: response.status,
          statusText: response.statusText
        }) : response;
      };
    };
    async function handleDataRequestRR(serverMode, staticHandler, routeId, request, loadContext, handleError) {
      try {
        let response = await staticHandler.queryRoute(request, {
          routeId,
          requestContext: loadContext
        });
        if (responses.isRedirectResponse(response)) {
          let headers2 = new Headers(response.headers);
          return headers2.set("X-Remix-Redirect", headers2.get("Location")), headers2.set("X-Remix-Status", response.status), headers2.delete("Location"), response.headers.get("Set-Cookie") !== null && headers2.set("X-Remix-Revalidate", "yes"), new Response(null, {
            status: 204,
            headers: headers2
          });
        }
        if (router.UNSAFE_DEFERRED_SYMBOL in response) {
          let deferredData = response[router.UNSAFE_DEFERRED_SYMBOL], body = responses.createDeferredReadableStream(deferredData, request.signal, serverMode), init = deferredData.init || {}, headers2 = new Headers(init.headers);
          return headers2.set("Content-Type", "text/remix-deferred"), init.headers = headers2, new Response(body, init);
        }
        return response;
      } catch (error2) {
        if (responses.isResponse(error2))
          return error2.headers.set("X-Remix-Catch", "yes"), error2;
        if (router.isRouteErrorResponse(error2))
          return error2.error && handleError(error2.error), errorResponseToJson(error2, serverMode);
        let errorInstance = error2 instanceof Error ? error2 : new Error("Unexpected Server Error");
        return handleError(errorInstance), router.json(errors.serializeError(errorInstance, serverMode), {
          status: 500,
          headers: {
            "X-Remix-Error": "yes"
          }
        });
      }
    }
    function findParentBoundary(routes3, routeId, error2) {
      let route = routes3[routeId] || routes3.root, isCatch = router.isRouteErrorResponse(error2) && (!error2.error || error2.status === 404);
      return isCatch && route.module.CatchBoundary || !isCatch && route.module.ErrorBoundary || !route.parentId ? route.id : findParentBoundary(routes3, route.parentId, error2);
    }
    function differentiateCatchVersusErrorBoundaries(build, context) {
      if (!context.errors)
        return;
      let errors2 = {};
      for (let routeId of Object.keys(context.errors)) {
        let error2 = context.errors[routeId], handlingRouteId = findParentBoundary(build.routes, routeId, error2);
        errors2[handlingRouteId] = error2;
      }
      context.errors = errors2;
    }
    async function handleDocumentRequestRR(serverMode, build, staticHandler, request, loadContext, handleError) {
      let context;
      try {
        context = await staticHandler.query(request, {
          requestContext: loadContext
        });
      } catch (error2) {
        return handleError(error2), new Response(null, {
          status: 500
        });
      }
      if (responses.isResponse(context))
        return context;
      context.errors && (Object.values(context.errors).forEach((err) => {
        (!router.isRouteErrorResponse(err) || err.error) && handleError(err);
      }), context.errors = errors.sanitizeErrors(context.errors, serverMode)), build.future.v2_errorBoundary !== !0 && differentiateCatchVersusErrorBoundaries(build, context);
      let headers$1 = headers.getDocumentHeadersRR(build, context), entryContext = {
        manifest: build.assets,
        routeModules: entry2.createEntryRouteModules(build.routes),
        staticHandlerContext: context,
        serverHandoffString: serverHandoff.createServerHandoffString({
          state: {
            loaderData: context.loaderData,
            actionData: context.actionData,
            errors: errors.serializeErrors(context.errors, serverMode)
          },
          future: build.future,
          dev: build.dev
        }),
        future: build.future
      }, handleDocumentRequestFunction = build.entry.module.default;
      try {
        return await handleDocumentRequestFunction(request, context.statusCode, headers$1, entryContext, loadContext);
      } catch (error2) {
        handleError(error2), context = router.getStaticContextFromError(staticHandler.dataRoutes, context, error2), context.errors && (context.errors = errors.sanitizeErrors(context.errors, serverMode)), build.future.v2_errorBoundary !== !0 && differentiateCatchVersusErrorBoundaries(build, context), entryContext = {
          ...entryContext,
          staticHandlerContext: context,
          serverHandoffString: serverHandoff.createServerHandoffString({
            state: {
              loaderData: context.loaderData,
              actionData: context.actionData,
              errors: errors.serializeErrors(context.errors, serverMode)
            },
            future: build.future
          })
        };
        try {
          return await handleDocumentRequestFunction(request, context.statusCode, headers$1, entryContext, loadContext);
        } catch (error3) {
          return handleError(error3), returnLastResortErrorResponse(error3, serverMode);
        }
      }
    }
    async function handleResourceRequestRR(serverMode, staticHandler, routeId, request, loadContext, handleError) {
      try {
        let response = await staticHandler.queryRoute(request, {
          routeId,
          requestContext: loadContext
        });
        return invariant2.default(responses.isResponse(response), "Expected a Response to be returned from queryRoute"), response;
      } catch (error2) {
        return responses.isResponse(error2) ? (error2.headers.set("X-Remix-Catch", "yes"), error2) : router.isRouteErrorResponse(error2) ? (error2.error && handleError(error2.error), errorResponseToJson(error2, serverMode)) : (handleError(error2), returnLastResortErrorResponse(error2, serverMode));
      }
    }
    function errorResponseToJson(errorResponse, serverMode) {
      return router.json(errors.serializeError(errorResponse.error || new Error("Unexpected Server Error"), serverMode), {
        status: errorResponse.status,
        statusText: errorResponse.statusText,
        headers: {
          "X-Remix-Error": "yes"
        }
      });
    }
    function returnLastResortErrorResponse(error2, serverMode) {
      let message2 = "Unexpected Server Error";
      return serverMode !== mode.ServerMode.Production && (message2 += `

${String(error2)}`), new Response(message2, {
        status: 500,
        headers: {
          "Content-Type": "text/plain"
        }
      });
    }
    exports.createRequestHandler = createRequestHandler;
    exports.differentiateCatchVersusErrorBoundaries = differentiateCatchVersusErrorBoundaries;
  }
});

// node_modules/@remix-run/server-runtime/dist/sessions.js
var require_sessions = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/sessions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var cookies = require_cookies(), warnings = require_warnings();
    function flash(name) {
      return `__flash_${name}__`;
    }
    var createSession = (initialData = {}, id3 = "") => {
      let map = new Map(Object.entries(initialData));
      return {
        get id() {
          return id3;
        },
        get data() {
          return Object.fromEntries(map);
        },
        has(name) {
          return map.has(name) || map.has(flash(name));
        },
        get(name) {
          if (map.has(name))
            return map.get(name);
          let flashName = flash(name);
          if (map.has(flashName)) {
            let value = map.get(flashName);
            return map.delete(flashName), value;
          }
        },
        set(name, value) {
          map.set(name, value);
        },
        flash(name, value) {
          map.set(flash(name), value);
        },
        unset(name) {
          map.delete(name);
        }
      };
    }, isSession = (object) => object != null && typeof object.id == "string" && typeof object.data < "u" && typeof object.has == "function" && typeof object.get == "function" && typeof object.set == "function" && typeof object.flash == "function" && typeof object.unset == "function", createSessionStorageFactory = (createCookie) => ({
      cookie: cookieArg,
      createData,
      readData,
      updateData,
      deleteData
    }) => {
      let cookie = cookies.isCookie(cookieArg) ? cookieArg : createCookie((cookieArg == null ? void 0 : cookieArg.name) || "__session", cookieArg);
      return warnOnceAboutSigningSessionCookie(cookie), {
        async getSession(cookieHeader, options) {
          let id3 = cookieHeader && await cookie.parse(cookieHeader, options), data = id3 && await readData(id3);
          return createSession(data || {}, id3 || "");
        },
        async commitSession(session, options) {
          let {
            id: id3,
            data
          } = session;
          return id3 ? await updateData(id3, data, cookie.expires) : id3 = await createData(data, cookie.expires), cookie.serialize(id3, options);
        },
        async destroySession(session, options) {
          return await deleteData(session.id), cookie.serialize("", {
            ...options,
            expires: /* @__PURE__ */ new Date(0)
          });
        }
      };
    };
    function warnOnceAboutSigningSessionCookie(cookie) {
      warnings.warnOnce(cookie.isSigned, `The "${cookie.name}" cookie is not signed, but session cookies should be signed to prevent tampering on the client before they are sent back to the server. See https://remix.run/utils/cookies#signing-cookies for more information.`);
    }
    exports.createSession = createSession;
    exports.createSessionStorageFactory = createSessionStorageFactory;
    exports.isSession = isSession;
    exports.warnOnceAboutSigningSessionCookie = warnOnceAboutSigningSessionCookie;
  }
});

// node_modules/@remix-run/server-runtime/dist/sessions/cookieStorage.js
var require_cookieStorage = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/sessions/cookieStorage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var cookies = require_cookies(), sessions = require_sessions(), createCookieSessionStorageFactory = (createCookie) => ({
      cookie: cookieArg
    } = {}) => {
      let cookie = cookies.isCookie(cookieArg) ? cookieArg : createCookie((cookieArg == null ? void 0 : cookieArg.name) || "__session", cookieArg);
      return sessions.warnOnceAboutSigningSessionCookie(cookie), {
        async getSession(cookieHeader, options) {
          return sessions.createSession(cookieHeader && await cookie.parse(cookieHeader, options) || {});
        },
        async commitSession(session, options) {
          let serializedCookie = await cookie.serialize(session.data, options);
          if (serializedCookie.length > 4096)
            throw new Error("Cookie length will exceed browser maximum. Length: " + serializedCookie.length);
          return serializedCookie;
        },
        async destroySession(_session, options) {
          return cookie.serialize("", {
            ...options,
            expires: /* @__PURE__ */ new Date(0)
          });
        }
      };
    };
    exports.createCookieSessionStorageFactory = createCookieSessionStorageFactory;
  }
});

// node_modules/@remix-run/server-runtime/dist/sessions/memoryStorage.js
var require_memoryStorage = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/sessions/memoryStorage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var createMemorySessionStorageFactory = (createSessionStorage) => ({
      cookie
    } = {}) => {
      let uniqueId = 0, map = /* @__PURE__ */ new Map();
      return createSessionStorage({
        cookie,
        async createData(data, expires) {
          let id3 = (++uniqueId).toString();
          return map.set(id3, {
            data,
            expires
          }), id3;
        },
        async readData(id3) {
          if (map.has(id3)) {
            let {
              data,
              expires
            } = map.get(id3);
            if (!expires || expires > /* @__PURE__ */ new Date())
              return data;
            expires && map.delete(id3);
          }
          return null;
        },
        async updateData(id3, data, expires) {
          map.set(id3, {
            data,
            expires
          });
        },
        async deleteData(id3) {
          map.delete(id3);
        }
      });
    };
    exports.createMemorySessionStorageFactory = createMemorySessionStorageFactory;
  }
});

// node_modules/@remix-run/server-runtime/dist/upload/errors.js
var require_errors2 = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/upload/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var MaxPartSizeExceededError = class extends Error {
      constructor(field, maxBytes) {
        super(`Field "${field}" exceeded upload size of ${maxBytes} bytes.`), this.field = field, this.maxBytes = maxBytes;
      }
    };
    exports.MaxPartSizeExceededError = MaxPartSizeExceededError;
  }
});

// node_modules/@remix-run/server-runtime/dist/upload/memoryUploadHandler.js
var require_memoryUploadHandler = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/upload/memoryUploadHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var errors = require_errors2();
    function createMemoryUploadHandler({
      filter: filter2,
      maxPartSize = 3e6
    } = {}) {
      return async ({
        filename,
        contentType,
        name,
        data
      }) => {
        if (filter2 && !await filter2({
          filename,
          contentType,
          name
        }))
          return;
        let size2 = 0, chunks = [];
        for await (let chunk of data) {
          if (size2 += chunk.byteLength, size2 > maxPartSize)
            throw new errors.MaxPartSizeExceededError(name, maxPartSize);
          chunks.push(chunk);
        }
        return typeof filename == "string" ? new File(chunks, filename, {
          type: contentType
        }) : await new Blob(chunks, {
          type: contentType
        }).text();
      };
    }
    exports.createMemoryUploadHandler = createMemoryUploadHandler;
  }
});

// node_modules/@remix-run/server-runtime/dist/dev.js
var require_dev = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    function broadcastDevReady(build, origin) {
      if (origin ?? (origin = ""), !origin)
        throw Error("Dev server origin not set");
      fetch(`${origin}/ping`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          buildHash: build.assets.version
        })
      }).catch((error2) => {
        console.error(`Could not reach Remix dev server at ${origin}`);
      });
    }
    function logDevReady(build) {
      console.log(`[REMIX DEV] ${build.assets.version} ready`);
    }
    exports.broadcastDevReady = broadcastDevReady;
    exports.logDevReady = logDevReady;
  }
});

// node_modules/@remix-run/server-runtime/dist/index.js
var require_dist = __commonJS({
  "node_modules/@remix-run/server-runtime/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var cookies = require_cookies(), formData = require_formData(), responses = require_responses(), server = require_server(), sessions = require_sessions(), cookieStorage = require_cookieStorage(), memoryStorage = require_memoryStorage(), memoryUploadHandler = require_memoryUploadHandler(), errors = require_errors2(), dev = require_dev();
    exports.createCookieFactory = cookies.createCookieFactory;
    exports.isCookie = cookies.isCookie;
    exports.unstable_composeUploadHandlers = formData.composeUploadHandlers;
    exports.unstable_parseMultipartFormData = formData.parseMultipartFormData;
    exports.defer = responses.defer;
    exports.json = responses.json;
    exports.redirect = responses.redirect;
    exports.createRequestHandler = server.createRequestHandler;
    exports.createSession = sessions.createSession;
    exports.createSessionStorageFactory = sessions.createSessionStorageFactory;
    exports.isSession = sessions.isSession;
    exports.createCookieSessionStorageFactory = cookieStorage.createCookieSessionStorageFactory;
    exports.createMemorySessionStorageFactory = memoryStorage.createMemorySessionStorageFactory;
    exports.unstable_createMemoryUploadHandler = memoryUploadHandler.createMemoryUploadHandler;
    exports.MaxPartSizeExceededError = errors.MaxPartSizeExceededError;
    exports.broadcastDevReady = dev.broadcastDevReady;
    exports.logDevReady = dev.logDevReady;
  }
});

// node_modules/cookie-signature/index.js
var require_cookie_signature = __commonJS({
  "node_modules/cookie-signature/index.js"(exports) {
    var crypto = require("crypto");
    exports.sign = function(val, secret) {
      if (typeof val != "string")
        throw new TypeError("Cookie value must be provided as a string.");
      if (secret == null)
        throw new TypeError("Secret key must be provided.");
      return val + "." + crypto.createHmac("sha256", secret).update(val).digest("base64").replace(/\=+$/, "");
    };
    exports.unsign = function(input, secret) {
      if (typeof input != "string")
        throw new TypeError("Signed cookie string must be provided.");
      if (secret == null)
        throw new TypeError("Secret key must be provided.");
      var tentativeValue = input.slice(0, input.lastIndexOf(".")), expectedInput = exports.sign(tentativeValue, secret), expectedBuffer = Buffer.from(expectedInput), inputBuffer = Buffer.from(input);
      return expectedBuffer.length === inputBuffer.length && crypto.timingSafeEqual(expectedBuffer, inputBuffer) ? tentativeValue : !1;
    };
  }
});

// node_modules/@remix-run/node/dist/crypto.js
var require_crypto = __commonJS({
  "node_modules/@remix-run/node/dist/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var cookieSignature = require_cookie_signature();
    function _interopDefaultLegacy(e24) {
      return e24 && typeof e24 == "object" && "default" in e24 ? e24 : { default: e24 };
    }
    var cookieSignature__default = /* @__PURE__ */ _interopDefaultLegacy(cookieSignature), sign = async (value, secret) => cookieSignature__default.default.sign(value, secret), unsign = async (signed, secret) => cookieSignature__default.default.unsign(signed, secret);
    exports.sign = sign;
    exports.unsign = unsign;
  }
});

// node_modules/@remix-run/node/dist/implementations.js
var require_implementations = __commonJS({
  "node_modules/@remix-run/node/dist/implementations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var serverRuntime = require_dist(), crypto = require_crypto(), createCookie = serverRuntime.createCookieFactory({
      sign: crypto.sign,
      unsign: crypto.unsign
    }), createCookieSessionStorage = serverRuntime.createCookieSessionStorageFactory(createCookie), createSessionStorage = serverRuntime.createSessionStorageFactory(createCookie), createMemorySessionStorage = serverRuntime.createMemorySessionStorageFactory(createSessionStorage);
    exports.createCookie = createCookie;
    exports.createCookieSessionStorage = createCookieSessionStorage;
    exports.createMemorySessionStorage = createMemorySessionStorage;
    exports.createSessionStorage = createSessionStorage;
  }
});

// node_modules/@remix-run/node/dist/sessions/fileStorage.js
var require_fileStorage = __commonJS({
  "node_modules/@remix-run/node/dist/sessions/fileStorage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var crypto = require("crypto"), fs = require("fs"), path = require("path"), implementations = require_implementations();
    function _interopNamespace(e24) {
      if (e24 && e24.__esModule)
        return e24;
      var n = /* @__PURE__ */ Object.create(null);
      return e24 && Object.keys(e24).forEach(function(k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e24, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: !0,
            get: function() {
              return e24[k];
            }
          });
        }
      }), n.default = e24, Object.freeze(n);
    }
    var crypto__namespace = /* @__PURE__ */ _interopNamespace(crypto), path__namespace = /* @__PURE__ */ _interopNamespace(path);
    function createFileSessionStorage({
      cookie,
      dir
    }) {
      return implementations.createSessionStorage({
        cookie,
        async createData(data, expires) {
          let content = JSON.stringify({
            data,
            expires
          });
          for (; ; ) {
            let randomBytes = crypto__namespace.randomBytes(8), id3 = Buffer.from(randomBytes).toString("hex");
            try {
              let file = getFile(dir, id3);
              return await fs.promises.mkdir(path__namespace.dirname(file), {
                recursive: !0
              }), await fs.promises.writeFile(file, content, {
                encoding: "utf-8",
                flag: "wx"
              }), id3;
            } catch (error2) {
              if (error2.code !== "EEXIST")
                throw error2;
            }
          }
        },
        async readData(id3) {
          try {
            let file = getFile(dir, id3), content = JSON.parse(await fs.promises.readFile(file, "utf-8")), data = content.data, expires = typeof content.expires == "string" ? new Date(content.expires) : null;
            return !expires || expires > /* @__PURE__ */ new Date() ? data : (expires && await fs.promises.unlink(file), null);
          } catch (error2) {
            if (error2.code !== "ENOENT")
              throw error2;
            return null;
          }
        },
        async updateData(id3, data, expires) {
          let content = JSON.stringify({
            data,
            expires
          }), file = getFile(dir, id3);
          await fs.promises.mkdir(path__namespace.dirname(file), {
            recursive: !0
          }), await fs.promises.writeFile(file, content, "utf-8");
        },
        async deleteData(id3) {
          if (id3)
            try {
              await fs.promises.unlink(getFile(dir, id3));
            } catch (error2) {
              if (error2.code !== "ENOENT")
                throw error2;
            }
        }
      });
    }
    function getFile(dir, id3) {
      return path__namespace.join(dir, id3.slice(0, 4), id3.slice(4));
    }
    exports.createFileSessionStorage = createFileSessionStorage;
  }
});

// node_modules/stream-slice/index.js
var require_stream_slice = __commonJS({
  "node_modules/stream-slice/index.js"(exports) {
    var util = require("util"), Transform = require("stream").Transform;
    util.inherits(SliceStream, Transform);
    function SliceStream(start, end) {
      if (!(this instanceof SliceStream))
        return new SliceStream();
      Transform.call(this), this._start = start || 0, this._end = end || 1 / 0, this._offset = 0, this._state = 0, this._emitUp = !1, this._emitDown = !1;
    }
    SliceStream.prototype._transform = function(chunk, encoding, done) {
      if (this._offset += chunk.length, !this._emitUp && this._offset >= this._start) {
        this._emitUp = !0;
        var start = chunk.length - (this._offset - this._start);
        if (this._offset > this._end) {
          var end = chunk.length - (this._offset - this._end);
          this._emitDown = !0, this.push(chunk.slice(start, end));
        } else
          this.push(chunk.slice(start, chunk.length));
        return done();
      }
      return this._emitUp && !this._emitDown && (this._offset >= this._end ? (this._emitDown = !0, this.push(chunk.slice(0, chunk.length - (this._offset - this._end)))) : this.push(chunk)), done();
    };
    exports.slice = function(start, end) {
      return new SliceStream(start, end);
    };
  }
});

// node_modules/@remix-run/node/dist/stream.js
var require_stream2 = __commonJS({
  "node_modules/@remix-run/node/dist/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var stream = require("stream");
    async function writeReadableStreamToWritable(stream2, writable) {
      let reader = stream2.getReader();
      async function read() {
        let {
          done,
          value
        } = await reader.read();
        if (done) {
          writable.end();
          return;
        }
        writable.write(value);
        let flushable = writable;
        typeof flushable.flush == "function" && flushable.flush(), await read();
      }
      try {
        await read();
      } catch (error2) {
        throw writable.destroy(error2), error2;
      }
    }
    async function writeAsyncIterableToWritable(iterable, writable) {
      try {
        for await (let chunk of iterable)
          writable.write(chunk);
        writable.end();
      } catch (error2) {
        throw writable.destroy(error2), error2;
      }
    }
    async function readableStreamToString(stream2, encoding) {
      let reader = stream2.getReader(), chunks = [];
      async function read() {
        let {
          done,
          value
        } = await reader.read();
        done || (value && chunks.push(value), await read());
      }
      return await read(), Buffer.concat(chunks).toString(encoding);
    }
    var createReadableStreamFromReadable = (source) => {
      let pump = new StreamPump(source);
      return new ReadableStream(pump, pump);
    }, StreamPump = class {
      constructor(stream$1) {
        this.highWaterMark = stream$1.readableHighWaterMark || new stream.Stream.Readable().readableHighWaterMark, this.accumalatedSize = 0, this.stream = stream$1, this.enqueue = this.enqueue.bind(this), this.error = this.error.bind(this), this.close = this.close.bind(this);
      }
      size(chunk) {
        return (chunk == null ? void 0 : chunk.byteLength) || 0;
      }
      start(controller) {
        this.controller = controller, this.stream.on("data", this.enqueue), this.stream.once("error", this.error), this.stream.once("end", this.close), this.stream.once("close", this.close);
      }
      pull() {
        this.resume();
      }
      cancel(reason) {
        this.stream.destroy && this.stream.destroy(reason), this.stream.off("data", this.enqueue), this.stream.off("error", this.error), this.stream.off("end", this.close), this.stream.off("close", this.close);
      }
      enqueue(chunk) {
        if (this.controller)
          try {
            let bytes = chunk instanceof Uint8Array ? chunk : Buffer.from(chunk), available = (this.controller.desiredSize || 0) - bytes.byteLength;
            this.controller.enqueue(bytes), available <= 0 && this.pause();
          } catch {
            this.controller.error(new Error("Could not create Buffer, chunk must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object")), this.cancel();
          }
      }
      pause() {
        this.stream.pause && this.stream.pause();
      }
      resume() {
        this.stream.readable && this.stream.resume && this.stream.resume();
      }
      close() {
        this.controller && (this.controller.close(), delete this.controller);
      }
      error(error2) {
        this.controller && (this.controller.error(error2), delete this.controller);
      }
    };
    exports.createReadableStreamFromReadable = createReadableStreamFromReadable;
    exports.readableStreamToString = readableStreamToString;
    exports.writeAsyncIterableToWritable = writeAsyncIterableToWritable;
    exports.writeReadableStreamToWritable = writeReadableStreamToWritable;
  }
});

// node_modules/@remix-run/node/dist/upload/fileUploadHandler.js
var require_fileUploadHandler = __commonJS({
  "node_modules/@remix-run/node/dist/upload/fileUploadHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var crypto = require("crypto"), fs = require("fs"), promises = require("fs/promises"), os = require("os"), path = require("path"), stream = require("stream"), util = require("util"), serverRuntime = require_dist(), streamSlice = require_stream_slice(), stream$1 = require_stream2();
    function _interopNamespace(e24) {
      if (e24 && e24.__esModule)
        return e24;
      var n = /* @__PURE__ */ Object.create(null);
      return e24 && Object.keys(e24).forEach(function(k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e24, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: !0,
            get: function() {
              return e24[k];
            }
          });
        }
      }), n.default = e24, Object.freeze(n);
    }
    var streamSlice__namespace = /* @__PURE__ */ _interopNamespace(streamSlice), defaultFilePathResolver = ({
      filename
    }) => {
      let ext = filename ? path.extname(filename) : "";
      return "upload_" + crypto.randomBytes(4).readUInt32LE(0) + ext;
    };
    async function uniqueFile(filepath) {
      let ext = path.extname(filepath), uniqueFilepath = filepath;
      for (let i13 = 1; await promises.stat(uniqueFilepath).then(() => !0).catch(() => !1); i13++)
        uniqueFilepath = (ext ? filepath.slice(0, -ext.length) : filepath) + `-${(/* @__PURE__ */ new Date()).getTime()}${ext}`;
      return uniqueFilepath;
    }
    function createFileUploadHandler({
      directory = os.tmpdir(),
      avoidFileConflicts = !0,
      file = defaultFilePathResolver,
      filter: filter2,
      maxPartSize = 3e6
    } = {}) {
      return async ({
        name,
        filename,
        contentType,
        data
      }) => {
        if (!filename || filter2 && !await filter2({
          name,
          filename,
          contentType
        }))
          return;
        let dir = typeof directory == "string" ? directory : directory({
          name,
          filename,
          contentType
        });
        if (!dir)
          return;
        let filedir = path.resolve(dir), path$1 = typeof file == "string" ? file : file({
          name,
          filename,
          contentType
        });
        if (!path$1)
          return;
        let filepath = path.resolve(filedir, path$1);
        avoidFileConflicts && (filepath = await uniqueFile(filepath)), await promises.mkdir(path.dirname(filepath), {
          recursive: !0
        }).catch(() => {
        });
        let writeFileStream = fs.createWriteStream(filepath), size2 = 0, deleteFile = !1;
        try {
          for await (let chunk of data) {
            if (size2 += chunk.byteLength, size2 > maxPartSize)
              throw deleteFile = !0, new serverRuntime.MaxPartSizeExceededError(name, maxPartSize);
            writeFileStream.write(chunk);
          }
        } finally {
          writeFileStream.end(), await util.promisify(stream.finished)(writeFileStream), deleteFile && await promises.rm(filepath).catch(() => {
          });
        }
        return new NodeOnDiskFile(filepath, contentType);
      };
    }
    var NodeOnDiskFile = class {
      lastModified = 0;
      webkitRelativePath = "";
      constructor(filepath, type2, slicer) {
        this.filepath = filepath, this.type = type2, this.slicer = slicer, this.name = path.basename(filepath);
      }
      get size() {
        let stats = fs.statSync(this.filepath);
        if (this.slicer) {
          let slice = this.slicer.end - this.slicer.start;
          return slice < 0 ? 0 : slice > stats.size ? stats.size : slice;
        }
        return stats.size;
      }
      slice(start, end, type2) {
        var _this$slicer;
        typeof start == "number" && start < 0 && (start = this.size + start), typeof end == "number" && end < 0 && (end = this.size + end);
        let startOffset = ((_this$slicer = this.slicer) === null || _this$slicer === void 0 ? void 0 : _this$slicer.start) || 0;
        return start = startOffset + (start || 0), end = startOffset + (end || this.size), new NodeOnDiskFile(this.filepath, typeof type2 == "string" ? type2 : this.type, {
          start,
          end
        });
      }
      async arrayBuffer() {
        let stream2 = fs.createReadStream(this.filepath);
        return this.slicer && (stream2 = stream2.pipe(streamSlice__namespace.slice(this.slicer.start, this.slicer.end))), new Promise((resolve, reject) => {
          let buf = [];
          stream2.on("data", (chunk) => buf.push(chunk)), stream2.on("end", () => resolve(Buffer.concat(buf))), stream2.on("error", (err) => reject(err));
        });
      }
      stream() {
        let stream2 = fs.createReadStream(this.filepath);
        return this.slicer && (stream2 = stream2.pipe(streamSlice__namespace.slice(this.slicer.start, this.slicer.end))), stream$1.createReadableStreamFromReadable(stream2);
      }
      async text() {
        return stream$1.readableStreamToString(this.stream());
      }
      get [Symbol.toStringTag]() {
        return "File";
      }
      remove() {
        return promises.unlink(this.filepath);
      }
      getFilePath() {
        return this.filepath;
      }
    };
    exports.NodeOnDiskFile = NodeOnDiskFile;
    exports.createFileUploadHandler = createFileUploadHandler;
  }
});

// node_modules/@remix-run/node/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@remix-run/node/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var sourceMapSupport = require_source_map_support(), abortController = require_abort_controller(), fetch2 = require_fetch(), globals = require_globals(), fileStorage = require_fileStorage(), fileUploadHandler = require_fileUploadHandler(), implementations = require_implementations(), stream = require_stream2(), serverRuntime = require_dist(), webFetch = require_lib_node3();
    function _interopDefaultLegacy(e24) {
      return e24 && typeof e24 == "object" && "default" in e24 ? e24 : { default: e24 };
    }
    var sourceMapSupport__default = /* @__PURE__ */ _interopDefaultLegacy(sourceMapSupport);
    sourceMapSupport__default.default.install();
    Object.defineProperty(exports, "AbortController", {
      enumerable: !0,
      get: function() {
        return abortController.AbortController;
      }
    });
    exports.Request = fetch2.Request;
    exports.Response = fetch2.Response;
    exports.fetch = fetch2.fetch;
    exports.installGlobals = globals.installGlobals;
    exports.createFileSessionStorage = fileStorage.createFileSessionStorage;
    exports.NodeOnDiskFile = fileUploadHandler.NodeOnDiskFile;
    exports.unstable_createFileUploadHandler = fileUploadHandler.createFileUploadHandler;
    exports.createCookie = implementations.createCookie;
    exports.createCookieSessionStorage = implementations.createCookieSessionStorage;
    exports.createMemorySessionStorage = implementations.createMemorySessionStorage;
    exports.createSessionStorage = implementations.createSessionStorage;
    exports.createReadableStreamFromReadable = stream.createReadableStreamFromReadable;
    exports.readableStreamToString = stream.readableStreamToString;
    exports.writeAsyncIterableToWritable = stream.writeAsyncIterableToWritable;
    exports.writeReadableStreamToWritable = stream.writeReadableStreamToWritable;
    Object.defineProperty(exports, "MaxPartSizeExceededError", {
      enumerable: !0,
      get: function() {
        return serverRuntime.MaxPartSizeExceededError;
      }
    });
    Object.defineProperty(exports, "broadcastDevReady", {
      enumerable: !0,
      get: function() {
        return serverRuntime.broadcastDevReady;
      }
    });
    Object.defineProperty(exports, "createRequestHandler", {
      enumerable: !0,
      get: function() {
        return serverRuntime.createRequestHandler;
      }
    });
    Object.defineProperty(exports, "createSession", {
      enumerable: !0,
      get: function() {
        return serverRuntime.createSession;
      }
    });
    Object.defineProperty(exports, "defer", {
      enumerable: !0,
      get: function() {
        return serverRuntime.defer;
      }
    });
    Object.defineProperty(exports, "isCookie", {
      enumerable: !0,
      get: function() {
        return serverRuntime.isCookie;
      }
    });
    Object.defineProperty(exports, "isSession", {
      enumerable: !0,
      get: function() {
        return serverRuntime.isSession;
      }
    });
    Object.defineProperty(exports, "json", {
      enumerable: !0,
      get: function() {
        return serverRuntime.json;
      }
    });
    Object.defineProperty(exports, "logDevReady", {
      enumerable: !0,
      get: function() {
        return serverRuntime.logDevReady;
      }
    });
    Object.defineProperty(exports, "redirect", {
      enumerable: !0,
      get: function() {
        return serverRuntime.redirect;
      }
    });
    Object.defineProperty(exports, "unstable_composeUploadHandlers", {
      enumerable: !0,
      get: function() {
        return serverRuntime.unstable_composeUploadHandlers;
      }
    });
    Object.defineProperty(exports, "unstable_createMemoryUploadHandler", {
      enumerable: !0,
      get: function() {
        return serverRuntime.unstable_createMemoryUploadHandler;
      }
    });
    Object.defineProperty(exports, "unstable_parseMultipartFormData", {
      enumerable: !0,
      get: function() {
        return serverRuntime.unstable_parseMultipartFormData;
      }
    });
    Object.defineProperty(exports, "FormData", {
      enumerable: !0,
      get: function() {
        return webFetch.FormData;
      }
    });
    Object.defineProperty(exports, "Headers", {
      enumerable: !0,
      get: function() {
        return webFetch.Headers;
      }
    });
  }
});

// ../../../node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "../../../node_modules/react/cjs/react.development.js"(exports, module2) {
    "use strict";
    (function() {
      "use strict";
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var ReactVersion = "18.2.0", REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactCurrentDispatcher = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      }, ReactCurrentBatchConfig = {
        transition: null
      }, ReactCurrentActQueue = {
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: !1,
        didScheduleLegacyUpdate: !1
      }, ReactCurrentOwner = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      }, ReactDebugCurrentFrame = {}, currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
      }
      ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
      }, ReactDebugCurrentFrame.getCurrentStack = null, ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = "";
        currentExtraStackFrame && (stack += currentExtraStackFrame);
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        return impl && (stack += impl() || ""), stack;
      };
      var enableScopeAPI = !1, enableCacheElement = !1, enableTransitionTracing = !1, enableLegacyHidden = !1, enableDebugTracing = !1, ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame, ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning("warn", format, args);
        }
      }
      function error2(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey])
            return;
          error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName), didWarnStateUpdateForUnmountedComponent[warningKey] = !0;
        }
      }
      var ReactNoopUpdateQueue = {
        /**
         * Checks whether or not this composite component is mounted.
         * @param {ReactClass} publicInstance The instance we want to test.
         * @return {boolean} True if mounted, false otherwise.
         * @protected
         * @final
         */
        isMounted: function(publicInstance) {
          return !1;
        },
        /**
         * Forces an update. This should only be invoked when it is known with
         * certainty that we are **not** in a DOM transaction.
         *
         * You may want to call this when you know that some deeper aspect of the
         * component's state has changed but `setState` was not called.
         *
         * This will not invoke `shouldComponentUpdate`, but it will invoke
         * `componentWillUpdate` and `componentDidUpdate`.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        /**
         * Replaces all of the state. Always use this or `setState` to mutate state.
         * You should treat `this.state` as immutable.
         *
         * There is no guarantee that `this.state` will be immediately updated, so
         * accessing `this.state` after calling this method may return the old value.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} completeState Next state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        /**
         * Sets a subset of the state. This only exists because _pendingState is
         * internal. This provides a merging strategy that is not available to deep
         * properties which is confusing. TODO: Expose pendingState or don't use it
         * during the merge.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} partialState Next partial state to be merged with state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} Name of the calling function in the public API.
         * @internal
         */
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      }, assign = Object.assign, emptyObject = {};
      Object.freeze(emptyObject);
      function Component(props, context, updater) {
        this.props = props, this.context = context, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {}, Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState != "object" && typeof partialState != "function" && partialState != null)
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      }, Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        }, defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
            }
          });
        };
        for (var fnName in deprecatedAPIs)
          deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props, this.context = context, this.refs = emptyObject, this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent, assign(pureComponentPrototype, Component.prototype), pureComponentPrototype.isPureReactComponent = !0;
      function createRef() {
        var refObject = {
          current: null
        };
        return Object.seal(refObject), refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray(a9) {
        return isArrayImpl(a9);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type2 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type2;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type2) {
        return type2.displayName || "Context";
      }
      function getComponentNameFromType(type2) {
        if (type2 == null)
          return null;
        if (typeof type2.tag == "number" && error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type2 == "function")
          return type2.displayName || type2.name || null;
        if (typeof type2 == "string")
          return type2;
        switch (type2) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type2 == "object")
          switch (type2.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type2;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type2;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type2, type2.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type2.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type2.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type2, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED_PROPS = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config) {
        if (hasOwnProperty.call(config, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config, "key").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config.key !== void 0;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
        };
        warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: !0
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          specialPropRefWarningShown || (specialPropRefWarningShown = !0, error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
        };
        warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: !0
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref == "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref), didWarnAboutStringRefs[componentName] = !0);
        }
      }
      var ReactElement = function(type2, key, ref, self2, source, owner, props) {
        var element = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE,
          // Built-in properties that belong on the element
          type: type2,
          key,
          ref,
          props,
          // Record the component responsible for creating this element.
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
        }), Object.defineProperty(element, "_self", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: self2
        }), Object.defineProperty(element, "_source", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function createElement29(type2, config, children) {
        var propName, props = {}, key = null, ref = null, self2 = null, source = null;
        if (config != null) {
          hasValidRef(config) && (ref = config.ref, warnIfStringRefCannotBeAutoConverted(config)), hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key), self2 = config.__self === void 0 ? null : config.__self, source = config.__source === void 0 ? null : config.__source;
          for (propName in config)
            hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config[propName]);
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1)
          props.children = children;
        else if (childrenLength > 1) {
          for (var childArray = Array(childrenLength), i13 = 0; i13 < childrenLength; i13++)
            childArray[i13] = arguments[i13 + 2];
          Object.freeze && Object.freeze(childArray), props.children = childArray;
        }
        if (type2 && type2.defaultProps) {
          var defaultProps = type2.defaultProps;
          for (propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
        }
        if (key || ref) {
          var displayName = typeof type2 == "function" ? type2.displayName || type2.name || "Unknown" : type2;
          key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type2, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement5(element, config, children) {
        if (element == null)
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName, props = assign({}, element.props), key = element.key, ref = element.ref, self2 = element._self, source = element._source, owner = element._owner;
        if (config != null) {
          hasValidRef(config) && (ref = config.ref, owner = ReactCurrentOwner.current), hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key);
          var defaultProps;
          element.type && element.type.defaultProps && (defaultProps = element.type.defaultProps);
          for (propName in config)
            hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (config[propName] === void 0 && defaultProps !== void 0 ? props[propName] = defaultProps[propName] : props[propName] = config[propName]);
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1)
          props.children = children;
        else if (childrenLength > 1) {
          for (var childArray = Array(childrenLength), i13 = 0; i13 < childrenLength; i13++)
            childArray[i13] = arguments[i13 + 2];
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self2, source, owner, props);
      }
      function isValidElement(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".", SUBSEPARATOR = ":";
      function escape2(key) {
        var escapeRegex = /[=:]/g, escaperLookup = {
          "=": "=0",
          ":": "=2"
        }, escapedString = key.replace(escapeRegex, function(match) {
          return escaperLookup[match];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = !1, userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index2) {
        return typeof element == "object" && element !== null && element.key != null ? (checkKeyStringCoercion(element.key), escape2("" + element.key)) : index2.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type2 = typeof children;
        (type2 === "undefined" || type2 === "boolean") && (children = null);
        var invokeCallback = !1;
        if (children === null)
          invokeCallback = !0;
        else
          switch (type2) {
            case "string":
            case "number":
              invokeCallback = !0;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = !0;
              }
          }
        if (invokeCallback) {
          var _child = children, mappedChild = callback(_child), childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray(mappedChild)) {
            var escapedChildKey = "";
            childKey != null && (escapedChildKey = escapeUserProvidedKey(childKey) + "/"), mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
              return c;
            });
          } else
            mappedChild != null && (isValidElement(mappedChild) && (mappedChild.key && (!_child || _child.key !== mappedChild.key) && checkKeyStringCoercion(mappedChild.key), mappedChild = cloneAndReplaceKey(
              mappedChild,
              // Keep both the (mapped) and old keys if they differ, just as
              // traverseAllChildren used to do for objects as children
              escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
              (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                // eslint-disable-next-line react-internal/safe-string-coercion
                escapeUserProvidedKey("" + mappedChild.key) + "/"
              ) : "") + childKey
            )), array.push(mappedChild));
          return 1;
        }
        var child, nextName, subtreeCount = 0, nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children))
          for (var i13 = 0; i13 < children.length; i13++)
            child = children[i13], nextName = nextNamePrefix + getElementKey(child, i13), subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn == "function") {
            var iterableChildren = children;
            iteratorFn === iterableChildren.entries && (didWarnAboutMaps || warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
            for (var iterator = iteratorFn.call(iterableChildren), step2, ii = 0; !(step2 = iterator.next()).done; )
              child = step2.value, nextName = nextNamePrefix + getElementKey(child, ii++), subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          } else if (type2 === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null)
          return children;
        var result = [], count = 0;
        return mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        }), result;
      }
      function countChildren(children) {
        var n = 0;
        return mapChildren(children, function() {
          n++;
        }), n;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement(children))
          throw new Error("React.Children.only expected to receive a single React element child.");
        return children;
      }
      function createContext8(defaultValue) {
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          // As a workaround to support multiple concurrent renderers, we categorize
          // some renderers as primary and others as secondary. We only expect
          // there to be two concurrent renderers at most: React Native (primary) and
          // Fabric (secondary); React DOM (primary) and React ART (secondary).
          // Secondary renderers store their context values on separate fields.
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          // Used to track how many concurrent renderers this context currently
          // supports within in a single renderer. Such as parallel server rendering.
          _threadCount: 0,
          // These are circular
          Provider: null,
          Consumer: null,
          // Add these to use same hidden class in VM as ServerContext
          _defaultValue: null,
          _globalName: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = !1, hasWarnedAboutUsingConsumerProvider = !1, hasWarnedAboutDisplayNameOnConsumer = !1;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                return hasWarnedAboutUsingConsumerProvider || (hasWarnedAboutUsingConsumerProvider = !0, error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")), context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                return hasWarnedAboutUsingNestedContextConsumers || (hasWarnedAboutUsingNestedContextConsumers = !0, error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")), context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                hasWarnedAboutDisplayNameOnConsumer || (warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName), hasWarnedAboutDisplayNameOnConsumer = !0);
              }
            }
          }), context.Consumer = Consumer;
        }
        return context._currentRenderer = null, context._currentRenderer2 = null, context;
      }
      var Uninitialized = -1, Pending = 0, Resolved = 1, Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result, thenable = ctor();
          if (thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved, resolved._result = moduleObject2;
            }
          }, function(error3) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected, rejected._result = error3;
            }
          }), payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending, pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          return moduleObject === void 0 && error2(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`, moduleObject), "default" in moduleObject || error2(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, moduleObject), moduleObject.default;
        } else
          throw payload._result;
      }
      function lazy(ctor) {
        var payload = {
          // We use these fields to store the result.
          _status: Uninitialized,
          _result: ctor
        }, lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps, propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: !0,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), defaultProps = newDefaultProps, Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: !0
                });
              }
            },
            propTypes: {
              configurable: !0,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), propTypes = newPropTypes, Object.defineProperty(lazyType, "propTypes", {
                  enumerable: !0
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef7(render) {
        render != null && render.$$typeof === REACT_MEMO_TYPE ? error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof render != "function" ? error2("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render) : render.length !== 0 && render.length !== 2 && error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."), render != null && (render.defaultProps != null || render.propTypes != null) && error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name, !render.name && !render.displayName && (render.displayName = name);
            }
          });
        }
        return elementType;
      }
      var REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type2) {
        return !!(typeof type2 == "string" || typeof type2 == "function" || type2 === REACT_FRAGMENT_TYPE || type2 === REACT_PROFILER_TYPE || enableDebugTracing || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type2 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type2 == "object" && type2 !== null && (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type2.$$typeof === REACT_MODULE_REFERENCE || type2.getModuleId !== void 0));
      }
      function memo(type2, compare) {
        isValidElementType(type2) || error2("memo: The first argument must be a component. Instead received: %s", type2 === null ? "null" : typeof type2);
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type: type2,
          compare: compare === void 0 ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name, !type2.name && !type2.displayName && (type2.displayName = name);
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        return dispatcher === null && error2(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`), dispatcher;
      }
      function useContext8(Context) {
        var dispatcher = resolveDispatcher();
        if (Context._context !== void 0) {
          var realContext = Context._context;
          realContext.Consumer === Context ? error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?") : realContext.Provider === Context && error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context);
      }
      function useState14(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef10(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect11(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }
      function useInsertionEffect2(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
      }
      function useLayoutEffect3(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }
      function useCallback4(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo7(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }
      function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }
      function useId5() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame2 = componentFrameCache.get(fn);
          if (frame2 !== void 0)
            return frame2;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher$1.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
        if (type2 == null)
          return "";
        if (typeof type2 == "function")
          return describeNativeComponentFrame(type2, shouldConstruct(type2));
        if (typeof type2 == "string")
          return describeBuiltInComponentFrame(type2);
        switch (type2) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type2 == "object")
          switch (type2.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type2.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type2, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error2("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          setExtraStackFrame(stack);
        } else
          setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = !1;
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name)
            return `

Check the render method of \`` + name + "`.";
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
          return `

Check your code at ` + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        return elementProps != null ? getSourceInfoErrorAddendum(elementProps.__source) : "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
          parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!(!element._store || element._store.validated || element.key != null)) {
          element._store.validated = !0;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (!ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
            var childOwner = "";
            element && element._owner && element._owner !== ReactCurrentOwner.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node == "object") {
          if (isArray(node))
            for (var i13 = 0; i13 < node.length; i13++) {
              var child = node[i13];
              isValidElement(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement(node))
            node._store && (node._store.validated = !0);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step2; !(step2 = iterator.next()).done; )
                isValidElement(step2.value) && validateExplicitKey(step2.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type2 = element.type;
          if (type2 == null || typeof type2 == "string")
            return;
          var propTypes;
          if (typeof type2 == "function")
            propTypes = type2.propTypes;
          else if (typeof type2 == "object" && (type2.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          type2.$$typeof === REACT_MEMO_TYPE))
            propTypes = type2.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type2);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type2.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = !0;
            var _name = getComponentNameFromType(type2);
            error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type2.getDefaultProps == "function" && !type2.getDefaultProps.isReactClassApproved && error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i13 = 0; i13 < keys.length; i13++) {
            var key = keys[i13];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error2("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function createElementWithValidation(type2, props, children) {
        var validType = isValidElementType(type2);
        if (!validType) {
          var info = "";
          (type2 === void 0 || typeof type2 == "object" && type2 !== null && Object.keys(type2).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
          var typeString;
          type2 === null ? typeString = "null" : isArray(type2) ? typeString = "array" : type2 !== void 0 && type2.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type2.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type2, error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement29.apply(this, arguments);
        if (element == null)
          return element;
        if (validType)
          for (var i13 = 2; i13 < arguments.length; i13++)
            validateChildKeys(arguments[i13], type2);
        return type2 === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
      }
      var didWarnAboutDeprecatedCreateFactory = !1;
      function createFactoryWithValidation(type2) {
        var validatedFactory = createElementWithValidation.bind(null, type2);
        return validatedFactory.type = type2, didWarnAboutDeprecatedCreateFactory || (didWarnAboutDeprecatedCreateFactory = !0, warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")), Object.defineProperty(validatedFactory, "type", {
          enumerable: !1,
          get: function() {
            return warn("Factory.type is deprecated. Access the class directly before passing it to createFactory."), Object.defineProperty(this, "type", {
              value: type2
            }), type2;
          }
        }), validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        for (var newElement = cloneElement5.apply(this, arguments), i13 = 2; i13 < arguments.length; i13++)
          validateChildKeys(arguments[i13], newElement.type);
        return validatePropTypes(newElement), newElement;
      }
      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          scope();
        } finally {
          if (ReactCurrentBatchConfig.transition = prevTransition, prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            updatedFibersCount > 10 && warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), currentTransition._updatedFibers.clear();
          }
        }
      }
      var didWarnAboutMessageChannel = !1, enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null)
          try {
            var requireString = ("require" + Math.random()).slice(0, 7), nodeRequire = module2 && module2[requireString];
            enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
          } catch {
            enqueueTaskImpl = function(callback) {
              didWarnAboutMessageChannel === !1 && (didWarnAboutMessageChannel = !0, typeof MessageChannel > "u" && error2("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
              var channel = new MessageChannel();
              channel.port1.onmessage = callback, channel.port2.postMessage(void 0);
            };
          }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0, didWarnNoAwaitAct = !1;
      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++, ReactCurrentActQueue.current === null && (ReactCurrentActQueue.current = []);
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy, result;
          try {
            if (ReactCurrentActQueue.isBatchingLegacy = !0, result = callback(), !prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue = ReactCurrentActQueue.current;
              queue !== null && (ReactCurrentActQueue.didScheduleLegacyUpdate = !1, flushActQueue(queue));
            }
          } catch (error3) {
            throw popActScope(prevActScopeDepth), error3;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }
          if (result !== null && typeof result == "object" && typeof result.then == "function") {
            var thenableResult = result, wasAwaited = !1, thenable = {
              then: function(resolve, reject) {
                wasAwaited = !0, thenableResult.then(function(returnValue2) {
                  popActScope(prevActScopeDepth), actScopeDepth === 0 ? recursivelyFlushAsyncActWork(returnValue2, resolve, reject) : resolve(returnValue2);
                }, function(error3) {
                  popActScope(prevActScopeDepth), reject(error3);
                });
              }
            };
            return !didWarnNoAwaitAct && typeof Promise < "u" && Promise.resolve().then(function() {
            }).then(function() {
              wasAwaited || (didWarnNoAwaitAct = !0, error2("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
            }), thenable;
          } else {
            var returnValue = result;
            if (popActScope(prevActScopeDepth), actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;
              _queue !== null && (flushActQueue(_queue), ReactCurrentActQueue.current = null);
              var _thenable = {
                then: function(resolve, reject) {
                  ReactCurrentActQueue.current === null ? (ReactCurrentActQueue.current = [], recursivelyFlushAsyncActWork(returnValue, resolve, reject)) : resolve(returnValue);
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function(resolve, reject) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }
      function popActScope(prevActScopeDepth) {
        prevActScopeDepth !== actScopeDepth - 1 && error2("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "), actScopeDepth = prevActScopeDepth;
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue = ReactCurrentActQueue.current;
          if (queue !== null)
            try {
              flushActQueue(queue), enqueueTask(function() {
                queue.length === 0 ? (ReactCurrentActQueue.current = null, resolve(returnValue)) : recursivelyFlushAsyncActWork(returnValue, resolve, reject);
              });
            } catch (error3) {
              reject(error3);
            }
          else
            resolve(returnValue);
        }
      }
      var isFlushing = !1;
      function flushActQueue(queue) {
        if (!isFlushing) {
          isFlushing = !0;
          var i13 = 0;
          try {
            for (; i13 < queue.length; i13++) {
              var callback = queue[i13];
              do
                callback = callback(!0);
              while (callback !== null);
            }
            queue.length = 0;
          } catch (error3) {
            throw queue = queue.slice(i13 + 1), error3;
          } finally {
            isFlushing = !1;
          }
        }
      }
      var createElement$1 = createElementWithValidation, cloneElement$1 = cloneElementWithValidation, createFactory = createFactoryWithValidation, Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports.Children = Children, exports.Component = Component, exports.Fragment = REACT_FRAGMENT_TYPE, exports.Profiler = REACT_PROFILER_TYPE, exports.PureComponent = PureComponent, exports.StrictMode = REACT_STRICT_MODE_TYPE, exports.Suspense = REACT_SUSPENSE_TYPE, exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals, exports.cloneElement = cloneElement$1, exports.createContext = createContext8, exports.createElement = createElement$1, exports.createFactory = createFactory, exports.createRef = createRef, exports.forwardRef = forwardRef7, exports.isValidElement = isValidElement, exports.lazy = lazy, exports.memo = memo, exports.startTransition = startTransition, exports.unstable_act = act, exports.useCallback = useCallback4, exports.useContext = useContext8, exports.useDebugValue = useDebugValue, exports.useDeferredValue = useDeferredValue, exports.useEffect = useEffect11, exports.useId = useId5, exports.useImperativeHandle = useImperativeHandle, exports.useInsertionEffect = useInsertionEffect2, exports.useLayoutEffect = useLayoutEffect3, exports.useMemo = useMemo7, exports.useReducer = useReducer, exports.useRef = useRef10, exports.useState = useState14, exports.useSyncExternalStore = useSyncExternalStore, exports.useTransition = useTransition, exports.version = ReactVersion, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }
});

// ../../../node_modules/react/index.js
var require_react = __commonJS({
  "../../../node_modules/react/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_react_development();
  }
});

// ../../../node_modules/@remix-run/router/dist/router.cjs.js
var require_router_cjs2 = __commonJS({
  "../../../node_modules/@remix-run/router/dist/router.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    function _extends2() {
      return _extends2 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i13 = 1; i13 < arguments.length; i13++) {
          var source = arguments[i13];
          for (var key in source)
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
        return target;
      }, _extends2.apply(this, arguments);
    }
    exports.Action = void 0;
    (function(Action) {
      Action.Pop = "POP", Action.Push = "PUSH", Action.Replace = "REPLACE";
    })(exports.Action || (exports.Action = {}));
    var PopStateEventType = "popstate";
    function createMemoryHistory(options) {
      options === void 0 && (options = {});
      let {
        initialEntries = ["/"],
        initialIndex,
        v5Compat = !1
      } = options, entries;
      entries = initialEntries.map((entry2, index3) => createMemoryLocation(entry2, typeof entry2 == "string" ? null : entry2.state, index3 === 0 ? "default" : void 0));
      let index2 = clampIndex(initialIndex ?? entries.length - 1), action = exports.Action.Pop, listener = null;
      function clampIndex(n) {
        return Math.min(Math.max(n, 0), entries.length - 1);
      }
      function getCurrentLocation() {
        return entries[index2];
      }
      function createMemoryLocation(to, state, key) {
        state === void 0 && (state = null);
        let location = createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);
        return warning2(location.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to)), location;
      }
      function createHref(to) {
        return typeof to == "string" ? to : createPath(to);
      }
      return {
        get index() {
          return index2;
        },
        get action() {
          return action;
        },
        get location() {
          return getCurrentLocation();
        },
        createHref,
        createURL(to) {
          return new URL(createHref(to), "http://localhost");
        },
        encodeLocation(to) {
          let path = typeof to == "string" ? parsePath(to) : to;
          return {
            pathname: path.pathname || "",
            search: path.search || "",
            hash: path.hash || ""
          };
        },
        push(to, state) {
          action = exports.Action.Push;
          let nextLocation = createMemoryLocation(to, state);
          index2 += 1, entries.splice(index2, entries.length, nextLocation), v5Compat && listener && listener({
            action,
            location: nextLocation,
            delta: 1
          });
        },
        replace(to, state) {
          action = exports.Action.Replace;
          let nextLocation = createMemoryLocation(to, state);
          entries[index2] = nextLocation, v5Compat && listener && listener({
            action,
            location: nextLocation,
            delta: 0
          });
        },
        go(delta) {
          action = exports.Action.Pop;
          let nextIndex = clampIndex(index2 + delta), nextLocation = entries[nextIndex];
          index2 = nextIndex, listener && listener({
            action,
            location: nextLocation,
            delta
          });
        },
        listen(fn) {
          return listener = fn, () => {
            listener = null;
          };
        }
      };
    }
    function createBrowserHistory(options) {
      options === void 0 && (options = {});
      function createBrowserLocation(window2, globalHistory) {
        let {
          pathname,
          search,
          hash
        } = window2.location;
        return createLocation(
          "",
          {
            pathname,
            search,
            hash
          },
          // state defaults to `null` because `window.history.state` does
          globalHistory.state && globalHistory.state.usr || null,
          globalHistory.state && globalHistory.state.key || "default"
        );
      }
      function createBrowserHref(window2, to) {
        return typeof to == "string" ? to : createPath(to);
      }
      return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
    }
    function createHashHistory(options) {
      options === void 0 && (options = {});
      function createHashLocation(window2, globalHistory) {
        let {
          pathname = "/",
          search = "",
          hash = ""
        } = parsePath(window2.location.hash.substr(1));
        return createLocation(
          "",
          {
            pathname,
            search,
            hash
          },
          // state defaults to `null` because `window.history.state` does
          globalHistory.state && globalHistory.state.usr || null,
          globalHistory.state && globalHistory.state.key || "default"
        );
      }
      function createHashHref(window2, to) {
        let base = window2.document.querySelector("base"), href = "";
        if (base && base.getAttribute("href")) {
          let url = window2.location.href, hashIndex = url.indexOf("#");
          href = hashIndex === -1 ? url : url.slice(0, hashIndex);
        }
        return href + "#" + (typeof to == "string" ? to : createPath(to));
      }
      function validateHashLocation(location, to) {
        warning2(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
      }
      return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
    }
    function invariant2(value, message2) {
      if (value === !1 || value === null || typeof value > "u")
        throw new Error(message2);
    }
    function warning2(cond, message2) {
      if (!cond) {
        typeof console < "u" && console.warn(message2);
        try {
          throw new Error(message2);
        } catch {
        }
      }
    }
    function createKey() {
      return Math.random().toString(36).substr(2, 8);
    }
    function getHistoryState(location, index2) {
      return {
        usr: location.state,
        key: location.key,
        idx: index2
      };
    }
    function createLocation(current, to, state, key) {
      return state === void 0 && (state = null), _extends2({
        pathname: typeof current == "string" ? current : current.pathname,
        search: "",
        hash: ""
      }, typeof to == "string" ? parsePath(to) : to, {
        state,
        // TODO: This could be cleaned up.  push/replace should probably just take
        // full Locations now and avoid the need to run through this flow at all
        // But that's a pretty big refactor to the current test suite so going to
        // keep as is for the time being and just let any incoming keys take precedence
        key: to && to.key || key || createKey()
      });
    }
    function createPath(_ref) {
      let {
        pathname = "/",
        search = "",
        hash = ""
      } = _ref;
      return search && search !== "?" && (pathname += search.charAt(0) === "?" ? search : "?" + search), hash && hash !== "#" && (pathname += hash.charAt(0) === "#" ? hash : "#" + hash), pathname;
    }
    function parsePath(path) {
      let parsedPath = {};
      if (path) {
        let hashIndex = path.indexOf("#");
        hashIndex >= 0 && (parsedPath.hash = path.substr(hashIndex), path = path.substr(0, hashIndex));
        let searchIndex = path.indexOf("?");
        searchIndex >= 0 && (parsedPath.search = path.substr(searchIndex), path = path.substr(0, searchIndex)), path && (parsedPath.pathname = path);
      }
      return parsedPath;
    }
    function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
      options === void 0 && (options = {});
      let {
        window: window2 = document.defaultView,
        v5Compat = !1
      } = options, globalHistory = window2.history, action = exports.Action.Pop, listener = null, index2 = getIndex();
      index2 == null && (index2 = 0, globalHistory.replaceState(_extends2({}, globalHistory.state, {
        idx: index2
      }), ""));
      function getIndex() {
        return (globalHistory.state || {
          idx: null
        }).idx;
      }
      function handlePop() {
        action = exports.Action.Pop;
        let nextIndex = getIndex(), delta = nextIndex == null ? null : nextIndex - index2;
        index2 = nextIndex, listener && listener({
          action,
          location: history.location,
          delta
        });
      }
      function push(to, state) {
        action = exports.Action.Push;
        let location = createLocation(history.location, to, state);
        validateLocation && validateLocation(location, to), index2 = getIndex() + 1;
        let historyState = getHistoryState(location, index2), url = history.createHref(location);
        try {
          globalHistory.pushState(historyState, "", url);
        } catch (error2) {
          if (error2 instanceof DOMException && error2.name === "DataCloneError")
            throw error2;
          window2.location.assign(url);
        }
        v5Compat && listener && listener({
          action,
          location: history.location,
          delta: 1
        });
      }
      function replace(to, state) {
        action = exports.Action.Replace;
        let location = createLocation(history.location, to, state);
        validateLocation && validateLocation(location, to), index2 = getIndex();
        let historyState = getHistoryState(location, index2), url = history.createHref(location);
        globalHistory.replaceState(historyState, "", url), v5Compat && listener && listener({
          action,
          location: history.location,
          delta: 0
        });
      }
      function createURL(to) {
        let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href, href = typeof to == "string" ? to : createPath(to);
        return invariant2(base, "No window.location.(origin|href) available to create URL for href: " + href), new URL(href, base);
      }
      let history = {
        get action() {
          return action;
        },
        get location() {
          return getLocation(window2, globalHistory);
        },
        listen(fn) {
          if (listener)
            throw new Error("A history only accepts one active listener");
          return window2.addEventListener(PopStateEventType, handlePop), listener = fn, () => {
            window2.removeEventListener(PopStateEventType, handlePop), listener = null;
          };
        },
        createHref(to) {
          return createHref(window2, to);
        },
        createURL,
        encodeLocation(to) {
          let url = createURL(to);
          return {
            pathname: url.pathname,
            search: url.search,
            hash: url.hash
          };
        },
        push,
        replace,
        go(n) {
          return globalHistory.go(n);
        }
      };
      return history;
    }
    var ResultType;
    (function(ResultType2) {
      ResultType2.data = "data", ResultType2.deferred = "deferred", ResultType2.redirect = "redirect", ResultType2.error = "error";
    })(ResultType || (ResultType = {}));
    var immutableRouteKeys = /* @__PURE__ */ new Set(["lazy", "caseSensitive", "path", "id", "index", "children"]);
    function isIndexRoute(route) {
      return route.index === !0;
    }
    function convertRoutesToDataRoutes(routes2, mapRouteProperties, parentPath, manifest) {
      return parentPath === void 0 && (parentPath = []), manifest === void 0 && (manifest = {}), routes2.map((route, index2) => {
        let treePath = [...parentPath, index2], id3 = typeof route.id == "string" ? route.id : treePath.join("-");
        if (invariant2(route.index !== !0 || !route.children, "Cannot specify children on an index route"), invariant2(!manifest[id3], 'Found a route id collision on id "' + id3 + `".  Route id's must be globally unique within Data Router usages`), isIndexRoute(route)) {
          let indexRoute = _extends2({}, route, mapRouteProperties(route), {
            id: id3
          });
          return manifest[id3] = indexRoute, indexRoute;
        } else {
          let pathOrLayoutRoute = _extends2({}, route, mapRouteProperties(route), {
            id: id3,
            children: void 0
          });
          return manifest[id3] = pathOrLayoutRoute, route.children && (pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest)), pathOrLayoutRoute;
        }
      });
    }
    function matchRoutes(routes2, locationArg, basename) {
      basename === void 0 && (basename = "/");
      let location = typeof locationArg == "string" ? parsePath(locationArg) : locationArg, pathname = stripBasename(location.pathname || "/", basename);
      if (pathname == null)
        return null;
      let branches = flattenRoutes(routes2);
      rankRouteBranches(branches);
      let matches = null;
      for (let i13 = 0; matches == null && i13 < branches.length; ++i13)
        matches = matchRouteBranch(
          branches[i13],
          // Incoming pathnames are generally encoded from either window.location
          // or from router.navigate, but we want to match against the unencoded
          // paths in the route definitions.  Memory router locations won't be
          // encoded here but there also shouldn't be anything to decode so this
          // should be a safe operation.  This avoids needing matchRoutes to be
          // history-aware.
          safelyDecodeURI(pathname)
        );
      return matches;
    }
    function flattenRoutes(routes2, branches, parentsMeta, parentPath) {
      branches === void 0 && (branches = []), parentsMeta === void 0 && (parentsMeta = []), parentPath === void 0 && (parentPath = "");
      let flattenRoute = (route, index2, relativePath) => {
        let meta = {
          relativePath: relativePath === void 0 ? route.path || "" : relativePath,
          caseSensitive: route.caseSensitive === !0,
          childrenIndex: index2,
          route
        };
        meta.relativePath.startsWith("/") && (invariant2(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes."), meta.relativePath = meta.relativePath.slice(parentPath.length));
        let path = joinPaths([parentPath, meta.relativePath]), routesMeta = parentsMeta.concat(meta);
        route.children && route.children.length > 0 && (invariant2(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== !0,
          "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
        ), flattenRoutes(route.children, branches, routesMeta, path)), !(route.path == null && !route.index) && branches.push({
          path,
          score: computeScore(path, route.index),
          routesMeta
        });
      };
      return routes2.forEach((route, index2) => {
        var _route$path;
        if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?")))
          flattenRoute(route, index2);
        else
          for (let exploded of explodeOptionalSegments(route.path))
            flattenRoute(route, index2, exploded);
      }), branches;
    }
    function explodeOptionalSegments(path) {
      let segments = path.split("/");
      if (segments.length === 0)
        return [];
      let [first, ...rest] = segments, isOptional = first.endsWith("?"), required = first.replace(/\?$/, "");
      if (rest.length === 0)
        return isOptional ? [required, ""] : [required];
      let restExploded = explodeOptionalSegments(rest.join("/")), result = [];
      return result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/"))), isOptional && result.push(...restExploded), result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
    }
    function rankRouteBranches(branches) {
      branches.sort((a9, b) => a9.score !== b.score ? b.score - a9.score : compareIndexes(a9.routesMeta.map((meta) => meta.childrenIndex), b.routesMeta.map((meta) => meta.childrenIndex)));
    }
    var paramRe = /^:\w+$/, dynamicSegmentValue = 3, indexRouteValue = 2, emptySegmentValue = 1, staticSegmentValue = 10, splatPenalty = -2, isSplat = (s) => s === "*";
    function computeScore(path, index2) {
      let segments = path.split("/"), initialScore = segments.length;
      return segments.some(isSplat) && (initialScore += splatPenalty), index2 && (initialScore += indexRouteValue), segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
    }
    function compareIndexes(a9, b) {
      return a9.length === b.length && a9.slice(0, -1).every((n, i13) => n === b[i13]) ? (
        // If two routes are siblings, we should try to match the earlier sibling
        // first. This allows people to have fine-grained control over the matching
        // behavior by simply putting routes with identical paths in the order they
        // want them tried.
        a9[a9.length - 1] - b[b.length - 1]
      ) : (
        // Otherwise, it doesn't really make sense to rank non-siblings by index,
        // so they sort equally.
        0
      );
    }
    function matchRouteBranch(branch, pathname) {
      let {
        routesMeta
      } = branch, matchedParams = {}, matchedPathname = "/", matches = [];
      for (let i13 = 0; i13 < routesMeta.length; ++i13) {
        let meta = routesMeta[i13], end = i13 === routesMeta.length - 1, remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/", match = matchPath({
          path: meta.relativePath,
          caseSensitive: meta.caseSensitive,
          end
        }, remainingPathname);
        if (!match)
          return null;
        Object.assign(matchedParams, match.params);
        let route = meta.route;
        matches.push({
          // TODO: Can this as be avoided?
          params: matchedParams,
          pathname: joinPaths([matchedPathname, match.pathname]),
          pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
          route
        }), match.pathnameBase !== "/" && (matchedPathname = joinPaths([matchedPathname, match.pathnameBase]));
      }
      return matches;
    }
    function generatePath(originalPath, params) {
      params === void 0 && (params = {});
      let path = originalPath;
      path.endsWith("*") && path !== "*" && !path.endsWith("/*") && (warning2(!1, 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".')), path = path.replace(/\*$/, "/*"));
      let prefix2 = path.startsWith("/") ? "/" : "", stringify = (p) => p == null ? "" : typeof p == "string" ? p : String(p), segments = path.split(/\/+/).map((segment, index2, array) => {
        if (index2 === array.length - 1 && segment === "*")
          return stringify(params["*"]);
        let keyMatch = segment.match(/^:(\w+)(\??)$/);
        if (keyMatch) {
          let [, key, optional] = keyMatch, param = params[key];
          return invariant2(optional === "?" || param != null, 'Missing ":' + key + '" param'), stringify(param);
        }
        return segment.replace(/\?$/g, "");
      }).filter((segment) => !!segment);
      return prefix2 + segments.join("/");
    }
    function matchPath(pattern, pathname) {
      typeof pattern == "string" && (pattern = {
        path: pattern,
        caseSensitive: !1,
        end: !0
      });
      let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end), match = pathname.match(matcher);
      if (!match)
        return null;
      let matchedPathname = match[0], pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1"), captureGroups = match.slice(1);
      return {
        params: paramNames.reduce((memo, paramName, index2) => {
          if (paramName === "*") {
            let splatValue = captureGroups[index2] || "";
            pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
          }
          return memo[paramName] = safelyDecodeURIComponent(captureGroups[index2] || "", paramName), memo;
        }, {}),
        pathname: matchedPathname,
        pathnameBase,
        pattern
      };
    }
    function compilePath(path, caseSensitive, end) {
      caseSensitive === void 0 && (caseSensitive = !1), end === void 0 && (end = !0), warning2(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
      let paramNames = [], regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/\/:(\w+)/g, (_, paramName) => (paramNames.push(paramName), "/([^\\/]+)"));
      return path.endsWith("*") ? (paramNames.push("*"), regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$") : end ? regexpSource += "\\/*$" : path !== "" && path !== "/" && (regexpSource += "(?:(?=\\/|$))"), [new RegExp(regexpSource, caseSensitive ? void 0 : "i"), paramNames];
    }
    function safelyDecodeURI(value) {
      try {
        return decodeURI(value);
      } catch (error2) {
        return warning2(!1, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error2 + ").")), value;
      }
    }
    function safelyDecodeURIComponent(value, paramName) {
      try {
        return decodeURIComponent(value);
      } catch (error2) {
        return warning2(!1, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error2 + ").")), value;
      }
    }
    function stripBasename(pathname, basename) {
      if (basename === "/")
        return pathname;
      if (!pathname.toLowerCase().startsWith(basename.toLowerCase()))
        return null;
      let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length, nextChar = pathname.charAt(startIndex);
      return nextChar && nextChar !== "/" ? null : pathname.slice(startIndex) || "/";
    }
    function resolvePath(to, fromPathname) {
      fromPathname === void 0 && (fromPathname = "/");
      let {
        pathname: toPathname,
        search = "",
        hash = ""
      } = typeof to == "string" ? parsePath(to) : to;
      return {
        pathname: toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname,
        search: normalizeSearch(search),
        hash: normalizeHash(hash)
      };
    }
    function resolvePathname(relativePath, fromPathname) {
      let segments = fromPathname.replace(/\/+$/, "").split("/");
      return relativePath.split("/").forEach((segment) => {
        segment === ".." ? segments.length > 1 && segments.pop() : segment !== "." && segments.push(segment);
      }), segments.length > 1 ? segments.join("/") : "/";
    }
    function getInvalidPathError(char, field, dest, path) {
      return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
    }
    function getPathContributingMatches(matches) {
      return matches.filter((match, index2) => index2 === 0 || match.route.path && match.route.path.length > 0);
    }
    function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
      isPathRelative === void 0 && (isPathRelative = !1);
      let to;
      typeof toArg == "string" ? to = parsePath(toArg) : (to = _extends2({}, toArg), invariant2(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to)), invariant2(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to)), invariant2(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to)));
      let isEmptyPath = toArg === "" || to.pathname === "", toPathname = isEmptyPath ? "/" : to.pathname, from;
      if (isPathRelative || toPathname == null)
        from = locationPathname;
      else {
        let routePathnameIndex = routePathnames.length - 1;
        if (toPathname.startsWith("..")) {
          let toSegments = toPathname.split("/");
          for (; toSegments[0] === ".."; )
            toSegments.shift(), routePathnameIndex -= 1;
          to.pathname = toSegments.join("/");
        }
        from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
      }
      let path = resolvePath(to, from), hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/"), hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
      return !path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash) && (path.pathname += "/"), path;
    }
    function getToPathname(to) {
      return to === "" || to.pathname === "" ? "/" : typeof to == "string" ? parsePath(to).pathname : to.pathname;
    }
    var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/"), normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/"), normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search, normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash, json = function(data, init) {
      init === void 0 && (init = {});
      let responseInit = typeof init == "number" ? {
        status: init
      } : init, headers = new Headers(responseInit.headers);
      return headers.has("Content-Type") || headers.set("Content-Type", "application/json; charset=utf-8"), new Response(JSON.stringify(data), _extends2({}, responseInit, {
        headers
      }));
    }, AbortedDeferredError = class extends Error {
    }, DeferredData = class {
      constructor(data, responseInit) {
        this.pendingKeysSet = /* @__PURE__ */ new Set(), this.subscribers = /* @__PURE__ */ new Set(), this.deferredKeys = [], invariant2(data && typeof data == "object" && !Array.isArray(data), "defer() only accepts plain objects");
        let reject;
        this.abortPromise = new Promise((_, r25) => reject = r25), this.controller = new AbortController();
        let onAbort = () => reject(new AbortedDeferredError("Deferred data aborted"));
        this.unlistenAbortSignal = () => this.controller.signal.removeEventListener("abort", onAbort), this.controller.signal.addEventListener("abort", onAbort), this.data = Object.entries(data).reduce((acc, _ref) => {
          let [key, value] = _ref;
          return Object.assign(acc, {
            [key]: this.trackPromise(key, value)
          });
        }, {}), this.done && this.unlistenAbortSignal(), this.init = responseInit;
      }
      trackPromise(key, value) {
        if (!(value instanceof Promise))
          return value;
        this.deferredKeys.push(key), this.pendingKeysSet.add(key);
        let promise = Promise.race([value, this.abortPromise]).then((data) => this.onSettle(promise, key, null, data), (error2) => this.onSettle(promise, key, error2));
        return promise.catch(() => {
        }), Object.defineProperty(promise, "_tracked", {
          get: () => !0
        }), promise;
      }
      onSettle(promise, key, error2, data) {
        return this.controller.signal.aborted && error2 instanceof AbortedDeferredError ? (this.unlistenAbortSignal(), Object.defineProperty(promise, "_error", {
          get: () => error2
        }), Promise.reject(error2)) : (this.pendingKeysSet.delete(key), this.done && this.unlistenAbortSignal(), error2 ? (Object.defineProperty(promise, "_error", {
          get: () => error2
        }), this.emit(!1, key), Promise.reject(error2)) : (Object.defineProperty(promise, "_data", {
          get: () => data
        }), this.emit(!1, key), data));
      }
      emit(aborted, settledKey) {
        this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));
      }
      subscribe(fn) {
        return this.subscribers.add(fn), () => this.subscribers.delete(fn);
      }
      cancel() {
        this.controller.abort(), this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k)), this.emit(!0);
      }
      async resolveData(signal) {
        let aborted = !1;
        if (!this.done) {
          let onAbort = () => this.cancel();
          signal.addEventListener("abort", onAbort), aborted = await new Promise((resolve) => {
            this.subscribe((aborted2) => {
              signal.removeEventListener("abort", onAbort), (aborted2 || this.done) && resolve(aborted2);
            });
          });
        }
        return aborted;
      }
      get done() {
        return this.pendingKeysSet.size === 0;
      }
      get unwrappedData() {
        return invariant2(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds"), Object.entries(this.data).reduce((acc, _ref2) => {
          let [key, value] = _ref2;
          return Object.assign(acc, {
            [key]: unwrapTrackedPromise(value)
          });
        }, {});
      }
      get pendingKeys() {
        return Array.from(this.pendingKeysSet);
      }
    };
    function isTrackedPromise(value) {
      return value instanceof Promise && value._tracked === !0;
    }
    function unwrapTrackedPromise(value) {
      if (!isTrackedPromise(value))
        return value;
      if (value._error)
        throw value._error;
      return value._data;
    }
    var defer = function(data, init) {
      init === void 0 && (init = {});
      let responseInit = typeof init == "number" ? {
        status: init
      } : init;
      return new DeferredData(data, responseInit);
    }, redirect = function(url, init) {
      init === void 0 && (init = 302);
      let responseInit = init;
      typeof responseInit == "number" ? responseInit = {
        status: responseInit
      } : typeof responseInit.status > "u" && (responseInit.status = 302);
      let headers = new Headers(responseInit.headers);
      return headers.set("Location", url), new Response(null, _extends2({}, responseInit, {
        headers
      }));
    }, ErrorResponse = class {
      constructor(status, statusText, data, internal) {
        internal === void 0 && (internal = !1), this.status = status, this.statusText = statusText || "", this.internal = internal, data instanceof Error ? (this.data = data.toString(), this.error = data) : this.data = data;
      }
    };
    function isRouteErrorResponse(error2) {
      return error2 != null && typeof error2.status == "number" && typeof error2.statusText == "string" && typeof error2.internal == "boolean" && "data" in error2;
    }
    var validMutationMethodsArr = ["post", "put", "patch", "delete"], validMutationMethods = new Set(validMutationMethodsArr), validRequestMethodsArr = ["get", ...validMutationMethodsArr], validRequestMethods = new Set(validRequestMethodsArr), redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]), redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]), IDLE_NAVIGATION = {
      state: "idle",
      location: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0
    }, IDLE_FETCHER = {
      state: "idle",
      data: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0
    }, IDLE_BLOCKER = {
      state: "unblocked",
      proceed: void 0,
      reset: void 0,
      location: void 0
    }, ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i, defaultMapRouteProperties = (route) => ({
      hasErrorBoundary: Boolean(route.hasErrorBoundary)
    });
    function createRouter(init) {
      let routerWindow = init.window ? init.window : typeof window < "u" ? window : void 0, isBrowser2 = typeof routerWindow < "u" && typeof routerWindow.document < "u" && typeof routerWindow.document.createElement < "u", isServer = !isBrowser2;
      invariant2(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
      let mapRouteProperties;
      if (init.mapRouteProperties)
        mapRouteProperties = init.mapRouteProperties;
      else if (init.detectErrorBoundary) {
        let detectErrorBoundary = init.detectErrorBoundary;
        mapRouteProperties = (route) => ({
          hasErrorBoundary: detectErrorBoundary(route)
        });
      } else
        mapRouteProperties = defaultMapRouteProperties;
      let manifest = {}, dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, void 0, manifest), inFlightDataRoutes, basename = init.basename || "/", future2 = _extends2({
        v7_normalizeFormMethod: !1,
        v7_prependBasename: !1
      }, init.future), unlistenHistory = null, subscribers = /* @__PURE__ */ new Set(), savedScrollPositions = null, getScrollRestorationKey = null, getScrollPosition = null, initialScrollRestored = init.hydrationData != null, initialMatches = matchRoutes(dataRoutes, init.history.location, basename), initialErrors = null;
      if (initialMatches == null) {
        let error2 = getInternalRouterError(404, {
          pathname: init.history.location.pathname
        }), {
          matches,
          route
        } = getShortCircuitMatches(dataRoutes);
        initialMatches = matches, initialErrors = {
          [route.id]: error2
        };
      }
      let initialized = (
        // All initialMatches need to be loaded before we're ready.  If we have lazy
        // functions around still then we'll need to run them in initialize()
        !initialMatches.some((m) => m.route.lazy) && // And we have to either have no loaders or have been provided hydrationData
        (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null)
      ), router, state = {
        historyAction: init.history.action,
        location: init.history.location,
        matches: initialMatches,
        initialized,
        navigation: IDLE_NAVIGATION,
        // Don't restore on initial updateState() if we were SSR'd
        restoreScrollPosition: init.hydrationData != null ? !1 : null,
        preventScrollReset: !1,
        revalidation: "idle",
        loaderData: init.hydrationData && init.hydrationData.loaderData || {},
        actionData: init.hydrationData && init.hydrationData.actionData || null,
        errors: init.hydrationData && init.hydrationData.errors || initialErrors,
        fetchers: /* @__PURE__ */ new Map(),
        blockers: /* @__PURE__ */ new Map()
      }, pendingAction = exports.Action.Pop, pendingPreventScrollReset = !1, pendingNavigationController, isUninterruptedRevalidation = !1, isRevalidationRequired = !1, cancelledDeferredRoutes = [], cancelledFetcherLoads = [], fetchControllers = /* @__PURE__ */ new Map(), incrementingLoadId = 0, pendingNavigationLoadId = -1, fetchReloadIds = /* @__PURE__ */ new Map(), fetchRedirectIds = /* @__PURE__ */ new Set(), fetchLoadMatches = /* @__PURE__ */ new Map(), activeDeferreds = /* @__PURE__ */ new Map(), blockerFunctions = /* @__PURE__ */ new Map(), ignoreNextHistoryUpdate = !1;
      function initialize() {
        return unlistenHistory = init.history.listen((_ref) => {
          let {
            action: historyAction,
            location,
            delta
          } = _ref;
          if (ignoreNextHistoryUpdate) {
            ignoreNextHistoryUpdate = !1;
            return;
          }
          warning2(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
          let blockerKey = shouldBlockNavigation({
            currentLocation: state.location,
            nextLocation: location,
            historyAction
          });
          if (blockerKey && delta != null) {
            ignoreNextHistoryUpdate = !0, init.history.go(delta * -1), updateBlocker(blockerKey, {
              state: "blocked",
              location,
              proceed() {
                updateBlocker(blockerKey, {
                  state: "proceeding",
                  proceed: void 0,
                  reset: void 0,
                  location
                }), init.history.go(delta);
              },
              reset() {
                let blockers = new Map(state.blockers);
                blockers.set(blockerKey, IDLE_BLOCKER), updateState({
                  blockers
                });
              }
            });
            return;
          }
          return startNavigation(historyAction, location);
        }), state.initialized || startNavigation(exports.Action.Pop, state.location), router;
      }
      function dispose() {
        unlistenHistory && unlistenHistory(), subscribers.clear(), pendingNavigationController && pendingNavigationController.abort(), state.fetchers.forEach((_, key) => deleteFetcher(key)), state.blockers.forEach((_, key) => deleteBlocker(key));
      }
      function subscribe(fn) {
        return subscribers.add(fn), () => subscribers.delete(fn);
      }
      function updateState(newState) {
        state = _extends2({}, state, newState), subscribers.forEach((subscriber) => subscriber(state));
      }
      function completeNavigation(location, newState) {
        var _location$state, _location$state2;
        let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== !0, actionData;
        newState.actionData ? Object.keys(newState.actionData).length > 0 ? actionData = newState.actionData : actionData = null : isActionReload ? actionData = state.actionData : actionData = null;
        let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData, blockers = /* @__PURE__ */ new Map();
        blockerFunctions.clear();
        let preventScrollReset = pendingPreventScrollReset === !0 || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== !0;
        inFlightDataRoutes && (dataRoutes = inFlightDataRoutes, inFlightDataRoutes = void 0), isUninterruptedRevalidation || pendingAction === exports.Action.Pop || (pendingAction === exports.Action.Push ? init.history.push(location, location.state) : pendingAction === exports.Action.Replace && init.history.replace(location, location.state)), updateState(_extends2({}, newState, {
          // matches, errors, fetchers go through as-is
          actionData,
          loaderData,
          historyAction: pendingAction,
          location,
          initialized: !0,
          navigation: IDLE_NAVIGATION,
          revalidation: "idle",
          restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),
          preventScrollReset,
          blockers
        })), pendingAction = exports.Action.Pop, pendingPreventScrollReset = !1, isUninterruptedRevalidation = !1, isRevalidationRequired = !1, cancelledDeferredRoutes = [], cancelledFetcherLoads = [];
      }
      async function navigate(to, opts) {
        if (typeof to == "number") {
          init.history.go(to);
          return;
        }
        let normalizedPath = normalizeTo(state.location, state.matches, basename, future2.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative), {
          path,
          submission,
          error: error2
        } = normalizeNavigateOptions(future2.v7_normalizeFormMethod, !1, normalizedPath, opts), currentLocation = state.location, nextLocation = createLocation(state.location, path, opts && opts.state);
        nextLocation = _extends2({}, nextLocation, init.history.encodeLocation(nextLocation));
        let userReplace = opts && opts.replace != null ? opts.replace : void 0, historyAction = exports.Action.Push;
        userReplace === !0 ? historyAction = exports.Action.Replace : userReplace === !1 || submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search && (historyAction = exports.Action.Replace);
        let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === !0 : void 0, blockerKey = shouldBlockNavigation({
          currentLocation,
          nextLocation,
          historyAction
        });
        if (blockerKey) {
          updateBlocker(blockerKey, {
            state: "blocked",
            location: nextLocation,
            proceed() {
              updateBlocker(blockerKey, {
                state: "proceeding",
                proceed: void 0,
                reset: void 0,
                location: nextLocation
              }), navigate(to, opts);
            },
            reset() {
              let blockers = new Map(state.blockers);
              blockers.set(blockerKey, IDLE_BLOCKER), updateState({
                blockers
              });
            }
          });
          return;
        }
        return await startNavigation(historyAction, nextLocation, {
          submission,
          // Send through the formData serialization error if we have one so we can
          // render at the right error boundary after we match routes
          pendingError: error2,
          preventScrollReset,
          replace: opts && opts.replace
        });
      }
      function revalidate() {
        if (interruptActiveLoads(), updateState({
          revalidation: "loading"
        }), state.navigation.state !== "submitting") {
          if (state.navigation.state === "idle") {
            startNavigation(state.historyAction, state.location, {
              startUninterruptedRevalidation: !0
            });
            return;
          }
          startNavigation(pendingAction || state.historyAction, state.navigation.location, {
            overrideNavigation: state.navigation
          });
        }
      }
      async function startNavigation(historyAction, location, opts) {
        pendingNavigationController && pendingNavigationController.abort(), pendingNavigationController = null, pendingAction = historyAction, isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === !0, saveScrollPosition(state.location, state.matches), pendingPreventScrollReset = (opts && opts.preventScrollReset) === !0;
        let routesToUse = inFlightDataRoutes || dataRoutes, loadingNavigation = opts && opts.overrideNavigation, matches = matchRoutes(routesToUse, location, basename);
        if (!matches) {
          let error2 = getInternalRouterError(404, {
            pathname: location.pathname
          }), {
            matches: notFoundMatches,
            route
          } = getShortCircuitMatches(routesToUse);
          cancelActiveDeferreds(), completeNavigation(location, {
            matches: notFoundMatches,
            loaderData: {},
            errors: {
              [route.id]: error2
            }
          });
          return;
        }
        if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
          completeNavigation(location, {
            matches
          });
          return;
        }
        pendingNavigationController = new AbortController();
        let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission), pendingActionData, pendingError;
        if (opts && opts.pendingError)
          pendingError = {
            [findNearestBoundary(matches).route.id]: opts.pendingError
          };
        else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
          let actionOutput = await handleAction(request, location, opts.submission, matches, {
            replace: opts.replace
          });
          if (actionOutput.shortCircuited)
            return;
          pendingActionData = actionOutput.pendingActionData, pendingError = actionOutput.pendingActionError, loadingNavigation = getLoadingNavigation(location, opts.submission), request = new Request(request.url, {
            signal: request.signal
          });
        }
        let {
          shortCircuited,
          loaderData,
          errors
        } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);
        shortCircuited || (pendingNavigationController = null, completeNavigation(location, _extends2({
          matches
        }, pendingActionData ? {
          actionData: pendingActionData
        } : {}, {
          loaderData,
          errors
        })));
      }
      async function handleAction(request, location, submission, matches, opts) {
        opts === void 0 && (opts = {}), interruptActiveLoads();
        let navigation = getSubmittingNavigation(location, submission);
        updateState({
          navigation
        });
        let result, actionMatch = getTargetMatch(matches, location);
        if (!actionMatch.route.action && !actionMatch.route.lazy)
          result = {
            type: ResultType.error,
            error: getInternalRouterError(405, {
              method: request.method,
              pathname: location.pathname,
              routeId: actionMatch.route.id
            })
          };
        else if (result = await callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename), request.signal.aborted)
          return {
            shortCircuited: !0
          };
        if (isRedirectResult(result)) {
          let replace;
          return opts && opts.replace != null ? replace = opts.replace : replace = result.location === state.location.pathname + state.location.search, await startRedirectNavigation(state, result, {
            submission,
            replace
          }), {
            shortCircuited: !0
          };
        }
        if (isErrorResult(result)) {
          let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
          return (opts && opts.replace) !== !0 && (pendingAction = exports.Action.Push), {
            // Send back an empty object we can use to clear out any prior actionData
            pendingActionData: {},
            pendingActionError: {
              [boundaryMatch.route.id]: result.error
            }
          };
        }
        if (isDeferredResult(result))
          throw getInternalRouterError(400, {
            type: "defer-action"
          });
        return {
          pendingActionData: {
            [actionMatch.route.id]: result.data
          }
        };
      }
      async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {
        let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission), activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation), routesToUse = inFlightDataRoutes || dataRoutes, [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);
        if (cancelActiveDeferreds((routeId) => !(matches && matches.some((m) => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId)), matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
          let updatedFetchers2 = markFetchRedirectsDone();
          return completeNavigation(location, _extends2({
            matches,
            loaderData: {},
            // Commit pending error if we're short circuiting
            errors: pendingError || null
          }, pendingActionData ? {
            actionData: pendingActionData
          } : {}, updatedFetchers2 ? {
            fetchers: new Map(state.fetchers)
          } : {})), {
            shortCircuited: !0
          };
        }
        if (!isUninterruptedRevalidation) {
          revalidatingFetchers.forEach((rf) => {
            let fetcher = state.fetchers.get(rf.key), revalidatingFetcher = getLoadingFetcher(void 0, fetcher ? fetcher.data : void 0);
            state.fetchers.set(rf.key, revalidatingFetcher);
          });
          let actionData = pendingActionData || state.actionData;
          updateState(_extends2({
            navigation: loadingNavigation
          }, actionData ? Object.keys(actionData).length === 0 ? {
            actionData: null
          } : {
            actionData
          } : {}, revalidatingFetchers.length > 0 ? {
            fetchers: new Map(state.fetchers)
          } : {}));
        }
        pendingNavigationLoadId = ++incrementingLoadId, revalidatingFetchers.forEach((rf) => {
          fetchControllers.has(rf.key) && abortFetcher(rf.key), rf.controller && fetchControllers.set(rf.key, rf.controller);
        });
        let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((f) => abortFetcher(f.key));
        pendingNavigationController && pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);
        let {
          results: results2,
          loaderResults,
          fetcherResults
        } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);
        if (request.signal.aborted)
          return {
            shortCircuited: !0
          };
        pendingNavigationController && pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations), revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));
        let redirect2 = findRedirect(results2);
        if (redirect2)
          return await startRedirectNavigation(state, redirect2, {
            replace
          }), {
            shortCircuited: !0
          };
        let {
          loaderData,
          errors
        } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);
        activeDeferreds.forEach((deferredData, routeId) => {
          deferredData.subscribe((aborted) => {
            (aborted || deferredData.done) && activeDeferreds.delete(routeId);
          });
        });
        let updatedFetchers = markFetchRedirectsDone(), didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId), shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
        return _extends2({
          loaderData,
          errors
        }, shouldUpdateFetchers ? {
          fetchers: new Map(state.fetchers)
        } : {});
      }
      function getFetcher(key) {
        return state.fetchers.get(key) || IDLE_FETCHER;
      }
      function fetch2(key, routeId, href, opts) {
        if (isServer)
          throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
        fetchControllers.has(key) && abortFetcher(key);
        let routesToUse = inFlightDataRoutes || dataRoutes, normalizedPath = normalizeTo(state.location, state.matches, basename, future2.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative), matches = matchRoutes(routesToUse, normalizedPath, basename);
        if (!matches) {
          setFetcherError(key, routeId, getInternalRouterError(404, {
            pathname: normalizedPath
          }));
          return;
        }
        let {
          path,
          submission,
          error: error2
        } = normalizeNavigateOptions(future2.v7_normalizeFormMethod, !0, normalizedPath, opts);
        if (error2) {
          setFetcherError(key, routeId, error2);
          return;
        }
        let match = getTargetMatch(matches, path);
        if (pendingPreventScrollReset = (opts && opts.preventScrollReset) === !0, submission && isMutationMethod(submission.formMethod)) {
          handleFetcherAction(key, routeId, path, match, matches, submission);
          return;
        }
        fetchLoadMatches.set(key, {
          routeId,
          path
        }), handleFetcherLoader(key, routeId, path, match, matches, submission);
      }
      async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {
        if (interruptActiveLoads(), fetchLoadMatches.delete(key), !match.route.action && !match.route.lazy) {
          let error2 = getInternalRouterError(405, {
            method: submission.formMethod,
            pathname: path,
            routeId
          });
          setFetcherError(key, routeId, error2);
          return;
        }
        let existingFetcher = state.fetchers.get(key), fetcher = getSubmittingFetcher(submission, existingFetcher);
        state.fetchers.set(key, fetcher), updateState({
          fetchers: new Map(state.fetchers)
        });
        let abortController = new AbortController(), fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);
        fetchControllers.set(key, abortController);
        let actionResult = await callLoaderOrAction("action", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);
        if (fetchRequest.signal.aborted) {
          fetchControllers.get(key) === abortController && fetchControllers.delete(key);
          return;
        }
        if (isRedirectResult(actionResult)) {
          fetchControllers.delete(key), fetchRedirectIds.add(key);
          let loadingFetcher = getLoadingFetcher(submission);
          return state.fetchers.set(key, loadingFetcher), updateState({
            fetchers: new Map(state.fetchers)
          }), startRedirectNavigation(state, actionResult, {
            submission,
            isFetchActionRedirect: !0
          });
        }
        if (isErrorResult(actionResult)) {
          setFetcherError(key, routeId, actionResult.error);
          return;
        }
        if (isDeferredResult(actionResult))
          throw getInternalRouterError(400, {
            type: "defer-action"
          });
        let nextLocation = state.navigation.location || state.location, revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal), routesToUse = inFlightDataRoutes || dataRoutes, matches = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;
        invariant2(matches, "Didn't find any matches after fetcher action");
        let loadId = ++incrementingLoadId;
        fetchReloadIds.set(key, loadId);
        let loadFetcher = getLoadingFetcher(submission, actionResult.data);
        state.fetchers.set(key, loadFetcher);
        let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(
          init.history,
          state,
          matches,
          submission,
          nextLocation,
          isRevalidationRequired,
          cancelledDeferredRoutes,
          cancelledFetcherLoads,
          fetchLoadMatches,
          fetchRedirectIds,
          routesToUse,
          basename,
          {
            [match.route.id]: actionResult.data
          },
          void 0
          // No need to send through errors since we short circuit above
        );
        revalidatingFetchers.filter((rf) => rf.key !== key).forEach((rf) => {
          let staleKey = rf.key, existingFetcher2 = state.fetchers.get(staleKey), revalidatingFetcher = getLoadingFetcher(void 0, existingFetcher2 ? existingFetcher2.data : void 0);
          state.fetchers.set(staleKey, revalidatingFetcher), fetchControllers.has(staleKey) && abortFetcher(staleKey), rf.controller && fetchControllers.set(staleKey, rf.controller);
        }), updateState({
          fetchers: new Map(state.fetchers)
        });
        let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));
        abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
        let {
          results: results2,
          loaderResults,
          fetcherResults
        } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
        if (abortController.signal.aborted)
          return;
        abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations), fetchReloadIds.delete(key), fetchControllers.delete(key), revalidatingFetchers.forEach((r25) => fetchControllers.delete(r25.key));
        let redirect2 = findRedirect(results2);
        if (redirect2)
          return startRedirectNavigation(state, redirect2);
        let {
          loaderData,
          errors
        } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, void 0, revalidatingFetchers, fetcherResults, activeDeferreds);
        if (state.fetchers.has(key)) {
          let doneFetcher = getDoneFetcher(actionResult.data);
          state.fetchers.set(key, doneFetcher);
        }
        let didAbortFetchLoads = abortStaleFetchLoads(loadId);
        state.navigation.state === "loading" && loadId > pendingNavigationLoadId ? (invariant2(pendingAction, "Expected pending action"), pendingNavigationController && pendingNavigationController.abort(), completeNavigation(state.navigation.location, {
          matches,
          loaderData,
          errors,
          fetchers: new Map(state.fetchers)
        })) : (updateState(_extends2({
          errors,
          loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)
        }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {
          fetchers: new Map(state.fetchers)
        } : {})), isRevalidationRequired = !1);
      }
      async function handleFetcherLoader(key, routeId, path, match, matches, submission) {
        let existingFetcher = state.fetchers.get(key), loadingFetcher = getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : void 0);
        state.fetchers.set(key, loadingFetcher), updateState({
          fetchers: new Map(state.fetchers)
        });
        let abortController = new AbortController(), fetchRequest = createClientSideRequest(init.history, path, abortController.signal);
        fetchControllers.set(key, abortController);
        let result = await callLoaderOrAction("loader", fetchRequest, match, matches, manifest, mapRouteProperties, basename);
        if (isDeferredResult(result) && (result = await resolveDeferredData(result, fetchRequest.signal, !0) || result), fetchControllers.get(key) === abortController && fetchControllers.delete(key), fetchRequest.signal.aborted)
          return;
        if (isRedirectResult(result)) {
          fetchRedirectIds.add(key), await startRedirectNavigation(state, result);
          return;
        }
        if (isErrorResult(result)) {
          let boundaryMatch = findNearestBoundary(state.matches, routeId);
          state.fetchers.delete(key), updateState({
            fetchers: new Map(state.fetchers),
            errors: {
              [boundaryMatch.route.id]: result.error
            }
          });
          return;
        }
        invariant2(!isDeferredResult(result), "Unhandled fetcher deferred data");
        let doneFetcher = getDoneFetcher(result.data);
        state.fetchers.set(key, doneFetcher), updateState({
          fetchers: new Map(state.fetchers)
        });
      }
      async function startRedirectNavigation(state2, redirect2, _temp) {
        let {
          submission,
          replace,
          isFetchActionRedirect
        } = _temp === void 0 ? {} : _temp;
        redirect2.revalidate && (isRevalidationRequired = !0);
        let redirectLocation = createLocation(
          state2.location,
          redirect2.location,
          // TODO: This can be removed once we get rid of useTransition in Remix v2
          _extends2({
            _isRedirect: !0
          }, isFetchActionRedirect ? {
            _isFetchActionRedirect: !0
          } : {})
        );
        if (invariant2(redirectLocation, "Expected a location on the redirect navigation"), ABSOLUTE_URL_REGEX.test(redirect2.location) && isBrowser2) {
          let url = init.history.createURL(redirect2.location), isDifferentBasename = stripBasename(url.pathname, basename) == null;
          if (routerWindow.location.origin !== url.origin || isDifferentBasename) {
            replace ? routerWindow.location.replace(redirect2.location) : routerWindow.location.assign(redirect2.location);
            return;
          }
        }
        pendingNavigationController = null;
        let redirectHistoryAction = replace === !0 ? exports.Action.Replace : exports.Action.Push, activeSubmission = submission || getSubmissionFromNavigation(state2.navigation);
        if (redirectPreserveMethodStatusCodes.has(redirect2.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod))
          await startNavigation(redirectHistoryAction, redirectLocation, {
            submission: _extends2({}, activeSubmission, {
              formAction: redirect2.location
            }),
            // Preserve this flag across redirects
            preventScrollReset: pendingPreventScrollReset
          });
        else if (isFetchActionRedirect)
          await startNavigation(redirectHistoryAction, redirectLocation, {
            overrideNavigation: getLoadingNavigation(redirectLocation),
            fetcherSubmission: activeSubmission,
            // Preserve this flag across redirects
            preventScrollReset: pendingPreventScrollReset
          });
        else {
          let overrideNavigation = getLoadingNavigation(redirectLocation, activeSubmission);
          await startNavigation(redirectHistoryAction, redirectLocation, {
            overrideNavigation,
            // Preserve this flag across redirects
            preventScrollReset: pendingPreventScrollReset
          });
        }
      }
      async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {
        let results2 = await Promise.all([...matchesToLoad.map((match) => callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map((f) => f.matches && f.match && f.controller ? callLoaderOrAction("loader", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename) : {
          type: ResultType.error,
          error: getInternalRouterError(404, {
            pathname: f.path
          })
        })]), loaderResults = results2.slice(0, matchesToLoad.length), fetcherResults = results2.slice(matchesToLoad.length);
        return await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), !1, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map((f) => f.match), fetcherResults, fetchersToLoad.map((f) => f.controller ? f.controller.signal : null), !0)]), {
          results: results2,
          loaderResults,
          fetcherResults
        };
      }
      function interruptActiveLoads() {
        isRevalidationRequired = !0, cancelledDeferredRoutes.push(...cancelActiveDeferreds()), fetchLoadMatches.forEach((_, key) => {
          fetchControllers.has(key) && (cancelledFetcherLoads.push(key), abortFetcher(key));
        });
      }
      function setFetcherError(key, routeId, error2) {
        let boundaryMatch = findNearestBoundary(state.matches, routeId);
        deleteFetcher(key), updateState({
          errors: {
            [boundaryMatch.route.id]: error2
          },
          fetchers: new Map(state.fetchers)
        });
      }
      function deleteFetcher(key) {
        let fetcher = state.fetchers.get(key);
        fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key)) && abortFetcher(key), fetchLoadMatches.delete(key), fetchReloadIds.delete(key), fetchRedirectIds.delete(key), state.fetchers.delete(key);
      }
      function abortFetcher(key) {
        let controller = fetchControllers.get(key);
        invariant2(controller, "Expected fetch controller: " + key), controller.abort(), fetchControllers.delete(key);
      }
      function markFetchersDone(keys) {
        for (let key of keys) {
          let fetcher = getFetcher(key), doneFetcher = getDoneFetcher(fetcher.data);
          state.fetchers.set(key, doneFetcher);
        }
      }
      function markFetchRedirectsDone() {
        let doneKeys = [], updatedFetchers = !1;
        for (let key of fetchRedirectIds) {
          let fetcher = state.fetchers.get(key);
          invariant2(fetcher, "Expected fetcher: " + key), fetcher.state === "loading" && (fetchRedirectIds.delete(key), doneKeys.push(key), updatedFetchers = !0);
        }
        return markFetchersDone(doneKeys), updatedFetchers;
      }
      function abortStaleFetchLoads(landedId) {
        let yeetedKeys = [];
        for (let [key, id3] of fetchReloadIds)
          if (id3 < landedId) {
            let fetcher = state.fetchers.get(key);
            invariant2(fetcher, "Expected fetcher: " + key), fetcher.state === "loading" && (abortFetcher(key), fetchReloadIds.delete(key), yeetedKeys.push(key));
          }
        return markFetchersDone(yeetedKeys), yeetedKeys.length > 0;
      }
      function getBlocker(key, fn) {
        let blocker = state.blockers.get(key) || IDLE_BLOCKER;
        return blockerFunctions.get(key) !== fn && blockerFunctions.set(key, fn), blocker;
      }
      function deleteBlocker(key) {
        state.blockers.delete(key), blockerFunctions.delete(key);
      }
      function updateBlocker(key, newBlocker) {
        let blocker = state.blockers.get(key) || IDLE_BLOCKER;
        invariant2(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);
        let blockers = new Map(state.blockers);
        blockers.set(key, newBlocker), updateState({
          blockers
        });
      }
      function shouldBlockNavigation(_ref2) {
        let {
          currentLocation,
          nextLocation,
          historyAction
        } = _ref2;
        if (blockerFunctions.size === 0)
          return;
        blockerFunctions.size > 1 && warning2(!1, "A router only supports one blocker at a time");
        let entries = Array.from(blockerFunctions.entries()), [blockerKey, blockerFunction] = entries[entries.length - 1], blocker = state.blockers.get(blockerKey);
        if (!(blocker && blocker.state === "proceeding") && blockerFunction({
          currentLocation,
          nextLocation,
          historyAction
        }))
          return blockerKey;
      }
      function cancelActiveDeferreds(predicate) {
        let cancelledRouteIds = [];
        return activeDeferreds.forEach((dfd, routeId) => {
          (!predicate || predicate(routeId)) && (dfd.cancel(), cancelledRouteIds.push(routeId), activeDeferreds.delete(routeId));
        }), cancelledRouteIds;
      }
      function enableScrollRestoration(positions, getPosition, getKey) {
        if (savedScrollPositions = positions, getScrollPosition = getPosition, getScrollRestorationKey = getKey || null, !initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
          initialScrollRestored = !0;
          let y = getSavedScrollPosition(state.location, state.matches);
          y != null && updateState({
            restoreScrollPosition: y
          });
        }
        return () => {
          savedScrollPositions = null, getScrollPosition = null, getScrollRestorationKey = null;
        };
      }
      function getScrollKey(location, matches) {
        return getScrollRestorationKey && getScrollRestorationKey(location, matches.map((m) => createUseMatchesMatch(m, state.loaderData))) || location.key;
      }
      function saveScrollPosition(location, matches) {
        if (savedScrollPositions && getScrollPosition) {
          let key = getScrollKey(location, matches);
          savedScrollPositions[key] = getScrollPosition();
        }
      }
      function getSavedScrollPosition(location, matches) {
        if (savedScrollPositions) {
          let key = getScrollKey(location, matches), y = savedScrollPositions[key];
          if (typeof y == "number")
            return y;
        }
        return null;
      }
      function _internalSetRoutes(newRoutes) {
        manifest = {}, inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, void 0, manifest);
      }
      return router = {
        get basename() {
          return basename;
        },
        get state() {
          return state;
        },
        get routes() {
          return dataRoutes;
        },
        initialize,
        subscribe,
        enableScrollRestoration,
        navigate,
        fetch: fetch2,
        revalidate,
        // Passthrough to history-aware createHref used by useHref so we get proper
        // hash-aware URLs in DOM paths
        createHref: (to) => init.history.createHref(to),
        encodeLocation: (to) => init.history.encodeLocation(to),
        getFetcher,
        deleteFetcher,
        dispose,
        getBlocker,
        deleteBlocker,
        _internalFetchControllers: fetchControllers,
        _internalActiveDeferreds: activeDeferreds,
        // TODO: Remove setRoutes, it's temporary to avoid dealing with
        // updating the tree while validating the update algorithm.
        _internalSetRoutes
      }, router;
    }
    var UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");
    function createStaticHandler(routes2, opts) {
      invariant2(routes2.length > 0, "You must provide a non-empty routes array to createStaticHandler");
      let manifest = {}, basename = (opts ? opts.basename : null) || "/", mapRouteProperties;
      if (opts != null && opts.mapRouteProperties)
        mapRouteProperties = opts.mapRouteProperties;
      else if (opts != null && opts.detectErrorBoundary) {
        let detectErrorBoundary = opts.detectErrorBoundary;
        mapRouteProperties = (route) => ({
          hasErrorBoundary: detectErrorBoundary(route)
        });
      } else
        mapRouteProperties = defaultMapRouteProperties;
      let dataRoutes = convertRoutesToDataRoutes(routes2, mapRouteProperties, void 0, manifest);
      async function query(request, _temp2) {
        let {
          requestContext
        } = _temp2 === void 0 ? {} : _temp2, url = new URL(request.url), method = request.method, location = createLocation("", createPath(url), null, "default"), matches = matchRoutes(dataRoutes, location, basename);
        if (!isValidMethod(method) && method !== "HEAD") {
          let error2 = getInternalRouterError(405, {
            method
          }), {
            matches: methodNotAllowedMatches,
            route
          } = getShortCircuitMatches(dataRoutes);
          return {
            basename,
            location,
            matches: methodNotAllowedMatches,
            loaderData: {},
            actionData: null,
            errors: {
              [route.id]: error2
            },
            statusCode: error2.status,
            loaderHeaders: {},
            actionHeaders: {},
            activeDeferreds: null
          };
        } else if (!matches) {
          let error2 = getInternalRouterError(404, {
            pathname: location.pathname
          }), {
            matches: notFoundMatches,
            route
          } = getShortCircuitMatches(dataRoutes);
          return {
            basename,
            location,
            matches: notFoundMatches,
            loaderData: {},
            actionData: null,
            errors: {
              [route.id]: error2
            },
            statusCode: error2.status,
            loaderHeaders: {},
            actionHeaders: {},
            activeDeferreds: null
          };
        }
        let result = await queryImpl(request, location, matches, requestContext);
        return isResponse(result) ? result : _extends2({
          location,
          basename
        }, result);
      }
      async function queryRoute(request, _temp3) {
        let {
          routeId,
          requestContext
        } = _temp3 === void 0 ? {} : _temp3, url = new URL(request.url), method = request.method, location = createLocation("", createPath(url), null, "default"), matches = matchRoutes(dataRoutes, location, basename);
        if (!isValidMethod(method) && method !== "HEAD" && method !== "OPTIONS")
          throw getInternalRouterError(405, {
            method
          });
        if (!matches)
          throw getInternalRouterError(404, {
            pathname: location.pathname
          });
        let match = routeId ? matches.find((m) => m.route.id === routeId) : getTargetMatch(matches, location);
        if (routeId && !match)
          throw getInternalRouterError(403, {
            pathname: location.pathname,
            routeId
          });
        if (!match)
          throw getInternalRouterError(404, {
            pathname: location.pathname
          });
        let result = await queryImpl(request, location, matches, requestContext, match);
        if (isResponse(result))
          return result;
        let error2 = result.errors ? Object.values(result.errors)[0] : void 0;
        if (error2 !== void 0)
          throw error2;
        if (result.actionData)
          return Object.values(result.actionData)[0];
        if (result.loaderData) {
          var _result$activeDeferre;
          let data = Object.values(result.loaderData)[0];
          return (_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id] && (data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id]), data;
        }
      }
      async function queryImpl(request, location, matches, requestContext, routeMatch) {
        invariant2(request.signal, "query()/queryRoute() requests must contain an AbortController signal");
        try {
          if (isMutationMethod(request.method.toLowerCase()))
            return await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);
          let result = await loadRouteData(request, matches, requestContext, routeMatch);
          return isResponse(result) ? result : _extends2({}, result, {
            actionData: null,
            actionHeaders: {}
          });
        } catch (e24) {
          if (isQueryRouteResponse(e24)) {
            if (e24.type === ResultType.error && !isRedirectResponse(e24.response))
              throw e24.response;
            return e24.response;
          }
          if (isRedirectResponse(e24))
            return e24;
          throw e24;
        }
      }
      async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {
        let result;
        if (!actionMatch.route.action && !actionMatch.route.lazy) {
          let error2 = getInternalRouterError(405, {
            method: request.method,
            pathname: new URL(request.url).pathname,
            routeId: actionMatch.route.id
          });
          if (isRouteRequest)
            throw error2;
          result = {
            type: ResultType.error,
            error: error2
          };
        } else if (result = await callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename, {
          isStaticRequest: !0,
          isRouteRequest,
          requestContext
        }), request.signal.aborted) {
          let method = isRouteRequest ? "queryRoute" : "query";
          throw new Error(method + "() call aborted");
        }
        if (isRedirectResult(result))
          throw new Response(null, {
            status: result.status,
            headers: {
              Location: result.location
            }
          });
        if (isDeferredResult(result)) {
          let error2 = getInternalRouterError(400, {
            type: "defer-action"
          });
          if (isRouteRequest)
            throw error2;
          result = {
            type: ResultType.error,
            error: error2
          };
        }
        if (isRouteRequest) {
          if (isErrorResult(result))
            throw result.error;
          return {
            matches: [actionMatch],
            loaderData: {},
            actionData: {
              [actionMatch.route.id]: result.data
            },
            errors: null,
            // Note: statusCode + headers are unused here since queryRoute will
            // return the raw Response or value
            statusCode: 200,
            loaderHeaders: {},
            actionHeaders: {},
            activeDeferreds: null
          };
        }
        if (isErrorResult(result)) {
          let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id), context2 = await loadRouteData(request, matches, requestContext, void 0, {
            [boundaryMatch.route.id]: result.error
          });
          return _extends2({}, context2, {
            statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,
            actionData: null,
            actionHeaders: _extends2({}, result.headers ? {
              [actionMatch.route.id]: result.headers
            } : {})
          });
        }
        let loaderRequest = new Request(request.url, {
          headers: request.headers,
          redirect: request.redirect,
          signal: request.signal
        }), context = await loadRouteData(loaderRequest, matches, requestContext);
        return _extends2({}, context, result.statusCode ? {
          statusCode: result.statusCode
        } : {}, {
          actionData: {
            [actionMatch.route.id]: result.data
          },
          actionHeaders: _extends2({}, result.headers ? {
            [actionMatch.route.id]: result.headers
          } : {})
        });
      }
      async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {
        let isRouteRequest = routeMatch != null;
        if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy))
          throw getInternalRouterError(400, {
            method: request.method,
            pathname: new URL(request.url).pathname,
            routeId: routeMatch == null ? void 0 : routeMatch.route.id
          });
        let matchesToLoad = (routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0])).filter((m) => m.route.loader || m.route.lazy);
        if (matchesToLoad.length === 0)
          return {
            matches,
            // Add a null for all matched routes for proper revalidation on the client
            loaderData: matches.reduce((acc, m) => Object.assign(acc, {
              [m.route.id]: null
            }), {}),
            errors: pendingActionError || null,
            statusCode: 200,
            loaderHeaders: {},
            activeDeferreds: null
          };
        let results2 = await Promise.all([...matchesToLoad.map((match) => callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename, {
          isStaticRequest: !0,
          isRouteRequest,
          requestContext
        }))]);
        if (request.signal.aborted) {
          let method = isRouteRequest ? "queryRoute" : "query";
          throw new Error(method + "() call aborted");
        }
        let activeDeferreds = /* @__PURE__ */ new Map(), context = processRouteLoaderData(matches, matchesToLoad, results2, pendingActionError, activeDeferreds), executedLoaders = new Set(matchesToLoad.map((match) => match.route.id));
        return matches.forEach((match) => {
          executedLoaders.has(match.route.id) || (context.loaderData[match.route.id] = null);
        }), _extends2({}, context, {
          matches,
          activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null
        });
      }
      return {
        dataRoutes,
        query,
        queryRoute
      };
    }
    function getStaticContextFromError(routes2, context, error2) {
      return _extends2({}, context, {
        statusCode: 500,
        errors: {
          [context._deepestRenderedBoundaryId || routes2[0].id]: error2
        }
      });
    }
    function isSubmissionNavigation(opts) {
      return opts != null && ("formData" in opts && opts.formData != null || "body" in opts && opts.body !== void 0);
    }
    function normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {
      let contextualMatches, activeRouteMatch;
      if (fromRouteId != null && relative !== "path") {
        contextualMatches = [];
        for (let match of matches)
          if (contextualMatches.push(match), match.route.id === fromRouteId) {
            activeRouteMatch = match;
            break;
          }
      } else
        contextualMatches = matches, activeRouteMatch = matches[matches.length - 1];
      let path = resolveTo(to || ".", getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === "path");
      return to == null && (path.search = location.search, path.hash = location.hash), (to == null || to === "" || to === ".") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search) && (path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index"), prependBasename && basename !== "/" && (path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname])), createPath(path);
    }
    function normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {
      if (!opts || !isSubmissionNavigation(opts))
        return {
          path
        };
      if (opts.formMethod && !isValidMethod(opts.formMethod))
        return {
          path,
          error: getInternalRouterError(405, {
            method: opts.formMethod
          })
        };
      let getInvalidBodyError = () => ({
        path,
        error: getInternalRouterError(400, {
          type: "invalid-body"
        })
      }), rawFormMethod = opts.formMethod || "get", formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase(), formAction = stripHashFromPath(path);
      if (opts.body !== void 0) {
        if (opts.formEncType === "text/plain") {
          if (!isMutationMethod(formMethod))
            return getInvalidBodyError();
          let text = typeof opts.body == "string" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? (
            // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data
            Array.from(opts.body.entries()).reduce((acc, _ref3) => {
              let [name, value] = _ref3;
              return "" + acc + name + "=" + value + `
`;
            }, "")
          ) : String(opts.body);
          return {
            path,
            submission: {
              formMethod,
              formAction,
              formEncType: opts.formEncType,
              formData: void 0,
              json: void 0,
              text
            }
          };
        } else if (opts.formEncType === "application/json") {
          if (!isMutationMethod(formMethod))
            return getInvalidBodyError();
          try {
            let json2 = typeof opts.body == "string" ? JSON.parse(opts.body) : opts.body;
            return {
              path,
              submission: {
                formMethod,
                formAction,
                formEncType: opts.formEncType,
                formData: void 0,
                json: json2,
                text: void 0
              }
            };
          } catch {
            return getInvalidBodyError();
          }
        }
      }
      invariant2(typeof FormData == "function", "FormData is not available in this environment");
      let searchParams, formData;
      if (opts.formData)
        searchParams = convertFormDataToSearchParams(opts.formData), formData = opts.formData;
      else if (opts.body instanceof FormData)
        searchParams = convertFormDataToSearchParams(opts.body), formData = opts.body;
      else if (opts.body instanceof URLSearchParams)
        searchParams = opts.body, formData = convertSearchParamsToFormData(searchParams);
      else if (opts.body == null)
        searchParams = new URLSearchParams(), formData = new FormData();
      else
        try {
          searchParams = new URLSearchParams(opts.body), formData = convertSearchParamsToFormData(searchParams);
        } catch {
          return getInvalidBodyError();
        }
      let submission = {
        formMethod,
        formAction,
        formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
        formData,
        json: void 0,
        text: void 0
      };
      if (isMutationMethod(submission.formMethod))
        return {
          path,
          submission
        };
      let parsedPath = parsePath(path);
      return isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search) && searchParams.append("index", ""), parsedPath.search = "?" + searchParams, {
        path: createPath(parsedPath),
        submission
      };
    }
    function getLoaderMatchesUntilBoundary(matches, boundaryId) {
      let boundaryMatches = matches;
      if (boundaryId) {
        let index2 = matches.findIndex((m) => m.route.id === boundaryId);
        index2 >= 0 && (boundaryMatches = matches.slice(0, index2));
      }
      return boundaryMatches;
    }
    function getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {
      let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : void 0, currentUrl = history.createURL(state.location), nextUrl = history.createURL(location), boundaryId = pendingError ? Object.keys(pendingError)[0] : void 0, navigationMatches = getLoaderMatchesUntilBoundary(matches, boundaryId).filter((match, index2) => {
        if (match.route.lazy)
          return !0;
        if (match.route.loader == null)
          return !1;
        if (isNewLoader(state.loaderData, state.matches[index2], match) || cancelledDeferredRoutes.some((id3) => id3 === match.route.id))
          return !0;
        let currentRouteMatch = state.matches[index2], nextRouteMatch = match;
        return shouldRevalidateLoader(match, _extends2({
          currentUrl,
          currentParams: currentRouteMatch.params,
          nextUrl,
          nextParams: nextRouteMatch.params
        }, submission, {
          actionResult,
          defaultShouldRevalidate: (
            // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
            isRevalidationRequired || // Clicked the same link, resubmitted a GET form
            currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
            currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)
          )
        }));
      }), revalidatingFetchers = [];
      return fetchLoadMatches.forEach((f, key) => {
        if (!matches.some((m) => m.route.id === f.routeId))
          return;
        let fetcherMatches = matchRoutes(routesToUse, f.path, basename);
        if (!fetcherMatches) {
          revalidatingFetchers.push({
            key,
            routeId: f.routeId,
            path: f.path,
            matches: null,
            match: null,
            controller: null
          });
          return;
        }
        let fetcher = state.fetchers.get(key), isPerformingInitialLoad = fetcher && fetcher.state !== "idle" && fetcher.data === void 0 && // If a fetcher.load redirected then it'll be "loading" without any data
        // so ensure we're not processing the redirect from this fetcher
        !fetchRedirectIds.has(key), fetcherMatch = getTargetMatch(fetcherMatches, f.path);
        (cancelledFetcherLoads.includes(key) || isPerformingInitialLoad || shouldRevalidateLoader(fetcherMatch, _extends2({
          currentUrl,
          currentParams: state.matches[state.matches.length - 1].params,
          nextUrl,
          nextParams: matches[matches.length - 1].params
        }, submission, {
          actionResult,
          defaultShouldRevalidate: isRevalidationRequired
        }))) && revalidatingFetchers.push({
          key,
          routeId: f.routeId,
          path: f.path,
          matches: fetcherMatches,
          match: fetcherMatch,
          controller: new AbortController()
        });
      }), [navigationMatches, revalidatingFetchers];
    }
    function isNewLoader(currentLoaderData, currentMatch, match) {
      let isNew = (
        // [a] -> [a, b]
        !currentMatch || // [a, b] -> [a, c]
        match.route.id !== currentMatch.route.id
      ), isMissingData = currentLoaderData[match.route.id] === void 0;
      return isNew || isMissingData;
    }
    function isNewRouteInstance(currentMatch, match) {
      let currentPath = currentMatch.route.path;
      return (
        // param change for this match, /users/123 -> /users/456
        currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path
        // e.g. /files/images/avatar.jpg -> files/finances.xls
        currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match.params["*"]
      );
    }
    function shouldRevalidateLoader(loaderMatch, arg) {
      if (loaderMatch.route.shouldRevalidate) {
        let routeChoice = loaderMatch.route.shouldRevalidate(arg);
        if (typeof routeChoice == "boolean")
          return routeChoice;
      }
      return arg.defaultShouldRevalidate;
    }
    async function loadLazyRouteModule(route, mapRouteProperties, manifest) {
      if (!route.lazy)
        return;
      let lazyRoute = await route.lazy();
      if (!route.lazy)
        return;
      let routeToUpdate = manifest[route.id];
      invariant2(routeToUpdate, "No route found in manifest");
      let routeUpdates = {};
      for (let lazyRouteProperty in lazyRoute) {
        let isPropertyStaticallyDefined = routeToUpdate[lazyRouteProperty] !== void 0 && // This property isn't static since it should always be updated based
        // on the route updates
        lazyRouteProperty !== "hasErrorBoundary";
        warning2(!isPropertyStaticallyDefined, 'Route "' + routeToUpdate.id + '" has a static property "' + lazyRouteProperty + '" defined but its lazy function is also returning a value for this property. ' + ('The lazy route property "' + lazyRouteProperty + '" will be ignored.')), !isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty) && (routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty]);
      }
      Object.assign(routeToUpdate, routeUpdates), Object.assign(routeToUpdate, _extends2({}, mapRouteProperties(routeToUpdate), {
        lazy: void 0
      }));
    }
    async function callLoaderOrAction(type2, request, match, matches, manifest, mapRouteProperties, basename, opts) {
      opts === void 0 && (opts = {});
      let resultType, result, onReject, runHandler = (handler) => {
        let reject, abortPromise = new Promise((_, r25) => reject = r25);
        return onReject = () => reject(), request.signal.addEventListener("abort", onReject), Promise.race([handler({
          request,
          params: match.params,
          context: opts.requestContext
        }), abortPromise]);
      };
      try {
        let handler = match.route[type2];
        if (match.route.lazy)
          if (handler)
            result = (await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]))[0];
          else if (await loadLazyRouteModule(match.route, mapRouteProperties, manifest), handler = match.route[type2], handler)
            result = await runHandler(handler);
          else if (type2 === "action") {
            let url = new URL(request.url), pathname = url.pathname + url.search;
            throw getInternalRouterError(405, {
              method: request.method,
              pathname,
              routeId: match.route.id
            });
          } else
            return {
              type: ResultType.data,
              data: void 0
            };
        else if (handler)
          result = await runHandler(handler);
        else {
          let url = new URL(request.url), pathname = url.pathname + url.search;
          throw getInternalRouterError(404, {
            pathname
          });
        }
        invariant2(result !== void 0, "You defined " + (type2 === "action" ? "an action" : "a loader") + " for route " + ('"' + match.route.id + "\" but didn't return anything from your `" + type2 + "` ") + "function. Please return a value or `null`.");
      } catch (e24) {
        resultType = ResultType.error, result = e24;
      } finally {
        onReject && request.signal.removeEventListener("abort", onReject);
      }
      if (isResponse(result)) {
        let status = result.status;
        if (redirectStatusCodes.has(status)) {
          let location = result.headers.get("Location");
          if (invariant2(location, "Redirects returned/thrown from loaders/actions must have a Location header"), !ABSOLUTE_URL_REGEX.test(location))
            location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, !0, location);
          else if (!opts.isStaticRequest) {
            let currentUrl = new URL(request.url), url = location.startsWith("//") ? new URL(currentUrl.protocol + location) : new URL(location), isSameBasename = stripBasename(url.pathname, basename) != null;
            url.origin === currentUrl.origin && isSameBasename && (location = url.pathname + url.search + url.hash);
          }
          if (opts.isStaticRequest)
            throw result.headers.set("Location", location), result;
          return {
            type: ResultType.redirect,
            status,
            location,
            revalidate: result.headers.get("X-Remix-Revalidate") !== null
          };
        }
        if (opts.isRouteRequest)
          throw {
            type: resultType || ResultType.data,
            response: result
          };
        let data, contentType = result.headers.get("Content-Type");
        return contentType && /\bapplication\/json\b/.test(contentType) ? data = await result.json() : data = await result.text(), resultType === ResultType.error ? {
          type: resultType,
          error: new ErrorResponse(status, result.statusText, data),
          headers: result.headers
        } : {
          type: ResultType.data,
          data,
          statusCode: result.status,
          headers: result.headers
        };
      }
      if (resultType === ResultType.error)
        return {
          type: resultType,
          error: result
        };
      if (isDeferredData(result)) {
        var _result$init, _result$init2;
        return {
          type: ResultType.deferred,
          deferredData: result,
          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,
          headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)
        };
      }
      return {
        type: ResultType.data,
        data: result
      };
    }
    function createClientSideRequest(history, location, signal, submission) {
      let url = history.createURL(stripHashFromPath(location)).toString(), init = {
        signal
      };
      if (submission && isMutationMethod(submission.formMethod)) {
        let {
          formMethod,
          formEncType
        } = submission;
        init.method = formMethod.toUpperCase(), formEncType === "application/json" ? (init.headers = new Headers({
          "Content-Type": formEncType
        }), init.body = JSON.stringify(submission.json)) : formEncType === "text/plain" ? init.body = submission.text : formEncType === "application/x-www-form-urlencoded" && submission.formData ? init.body = convertFormDataToSearchParams(submission.formData) : init.body = submission.formData;
      }
      return new Request(url, init);
    }
    function convertFormDataToSearchParams(formData) {
      let searchParams = new URLSearchParams();
      for (let [key, value] of formData.entries())
        searchParams.append(key, typeof value == "string" ? value : value.name);
      return searchParams;
    }
    function convertSearchParamsToFormData(searchParams) {
      let formData = new FormData();
      for (let [key, value] of searchParams.entries())
        formData.append(key, value);
      return formData;
    }
    function processRouteLoaderData(matches, matchesToLoad, results2, pendingError, activeDeferreds) {
      let loaderData = {}, errors = null, statusCode, foundError = !1, loaderHeaders = {};
      return results2.forEach((result, index2) => {
        let id3 = matchesToLoad[index2].route.id;
        if (invariant2(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData"), isErrorResult(result)) {
          let boundaryMatch = findNearestBoundary(matches, id3), error2 = result.error;
          pendingError && (error2 = Object.values(pendingError)[0], pendingError = void 0), errors = errors || {}, errors[boundaryMatch.route.id] == null && (errors[boundaryMatch.route.id] = error2), loaderData[id3] = void 0, foundError || (foundError = !0, statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500), result.headers && (loaderHeaders[id3] = result.headers);
        } else
          isDeferredResult(result) ? (activeDeferreds.set(id3, result.deferredData), loaderData[id3] = result.deferredData.data) : loaderData[id3] = result.data, result.statusCode != null && result.statusCode !== 200 && !foundError && (statusCode = result.statusCode), result.headers && (loaderHeaders[id3] = result.headers);
      }), pendingError && (errors = pendingError, loaderData[Object.keys(pendingError)[0]] = void 0), {
        loaderData,
        errors,
        statusCode: statusCode || 200,
        loaderHeaders
      };
    }
    function processLoaderData(state, matches, matchesToLoad, results2, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {
      let {
        loaderData,
        errors
      } = processRouteLoaderData(matches, matchesToLoad, results2, pendingError, activeDeferreds);
      for (let index2 = 0; index2 < revalidatingFetchers.length; index2++) {
        let {
          key,
          match,
          controller
        } = revalidatingFetchers[index2];
        invariant2(fetcherResults !== void 0 && fetcherResults[index2] !== void 0, "Did not find corresponding fetcher result");
        let result = fetcherResults[index2];
        if (!(controller && controller.signal.aborted))
          if (isErrorResult(result)) {
            let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);
            errors && errors[boundaryMatch.route.id] || (errors = _extends2({}, errors, {
              [boundaryMatch.route.id]: result.error
            })), state.fetchers.delete(key);
          } else if (isRedirectResult(result))
            invariant2(!1, "Unhandled fetcher revalidation redirect");
          else if (isDeferredResult(result))
            invariant2(!1, "Unhandled fetcher deferred data");
          else {
            let doneFetcher = getDoneFetcher(result.data);
            state.fetchers.set(key, doneFetcher);
          }
      }
      return {
        loaderData,
        errors
      };
    }
    function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
      let mergedLoaderData = _extends2({}, newLoaderData);
      for (let match of matches) {
        let id3 = match.route.id;
        if (newLoaderData.hasOwnProperty(id3) ? newLoaderData[id3] !== void 0 && (mergedLoaderData[id3] = newLoaderData[id3]) : loaderData[id3] !== void 0 && match.route.loader && (mergedLoaderData[id3] = loaderData[id3]), errors && errors.hasOwnProperty(id3))
          break;
      }
      return mergedLoaderData;
    }
    function findNearestBoundary(matches, routeId) {
      return (routeId ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1) : [...matches]).reverse().find((m) => m.route.hasErrorBoundary === !0) || matches[0];
    }
    function getShortCircuitMatches(routes2) {
      let route = routes2.find((r25) => r25.index || !r25.path || r25.path === "/") || {
        id: "__shim-error-route__"
      };
      return {
        matches: [{
          params: {},
          pathname: "",
          pathnameBase: "",
          route
        }],
        route
      };
    }
    function getInternalRouterError(status, _temp4) {
      let {
        pathname,
        routeId,
        method,
        type: type2
      } = _temp4 === void 0 ? {} : _temp4, statusText = "Unknown Server Error", errorMessage = "Unknown @remix-run/router error";
      return status === 400 ? (statusText = "Bad Request", method && pathname && routeId ? errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request." : type2 === "defer-action" ? errorMessage = "defer() is not supported in actions" : type2 === "invalid-body" && (errorMessage = "Unable to encode submission body")) : status === 403 ? (statusText = "Forbidden", errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"') : status === 404 ? (statusText = "Not Found", errorMessage = 'No route matches URL "' + pathname + '"') : status === 405 && (statusText = "Method Not Allowed", method && pathname && routeId ? errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request." : method && (errorMessage = 'Invalid request method "' + method.toUpperCase() + '"')), new ErrorResponse(status || 500, statusText, new Error(errorMessage), !0);
    }
    function findRedirect(results2) {
      for (let i13 = results2.length - 1; i13 >= 0; i13--) {
        let result = results2[i13];
        if (isRedirectResult(result))
          return result;
      }
    }
    function stripHashFromPath(path) {
      let parsedPath = typeof path == "string" ? parsePath(path) : path;
      return createPath(_extends2({}, parsedPath, {
        hash: ""
      }));
    }
    function isHashChangeOnly(a9, b) {
      return a9.pathname !== b.pathname || a9.search !== b.search ? !1 : a9.hash === "" ? b.hash !== "" : a9.hash === b.hash ? !0 : b.hash !== "";
    }
    function isDeferredResult(result) {
      return result.type === ResultType.deferred;
    }
    function isErrorResult(result) {
      return result.type === ResultType.error;
    }
    function isRedirectResult(result) {
      return (result && result.type) === ResultType.redirect;
    }
    function isDeferredData(value) {
      let deferred = value;
      return deferred && typeof deferred == "object" && typeof deferred.data == "object" && typeof deferred.subscribe == "function" && typeof deferred.cancel == "function" && typeof deferred.resolveData == "function";
    }
    function isResponse(value) {
      return value != null && typeof value.status == "number" && typeof value.statusText == "string" && typeof value.headers == "object" && typeof value.body < "u";
    }
    function isRedirectResponse(result) {
      if (!isResponse(result))
        return !1;
      let status = result.status, location = result.headers.get("Location");
      return status >= 300 && status <= 399 && location != null;
    }
    function isQueryRouteResponse(obj) {
      return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);
    }
    function isValidMethod(method) {
      return validRequestMethods.has(method.toLowerCase());
    }
    function isMutationMethod(method) {
      return validMutationMethods.has(method.toLowerCase());
    }
    async function resolveDeferredResults(currentMatches, matchesToLoad, results2, signals, isFetcher, currentLoaderData) {
      for (let index2 = 0; index2 < results2.length; index2++) {
        let result = results2[index2], match = matchesToLoad[index2];
        if (!match)
          continue;
        let currentMatch = currentMatches.find((m) => m.route.id === match.route.id), isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== void 0;
        if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {
          let signal = signals[index2];
          invariant2(signal, "Expected an AbortSignal for revalidating fetcher deferred result"), await resolveDeferredData(result, signal, isFetcher).then((result2) => {
            result2 && (results2[index2] = result2 || results2[index2]);
          });
        }
      }
    }
    async function resolveDeferredData(result, signal, unwrap) {
      if (unwrap === void 0 && (unwrap = !1), !await result.deferredData.resolveData(signal)) {
        if (unwrap)
          try {
            return {
              type: ResultType.data,
              data: result.deferredData.unwrappedData
            };
          } catch (e24) {
            return {
              type: ResultType.error,
              error: e24
            };
          }
        return {
          type: ResultType.data,
          data: result.deferredData.data
        };
      }
    }
    function hasNakedIndexQuery(search) {
      return new URLSearchParams(search).getAll("index").some((v) => v === "");
    }
    function createUseMatchesMatch(match, loaderData) {
      let {
        route,
        pathname,
        params
      } = match;
      return {
        id: route.id,
        pathname,
        params,
        data: loaderData[route.id],
        handle: route.handle
      };
    }
    function getTargetMatch(matches, location) {
      let search = typeof location == "string" ? parsePath(location).search : location.search;
      if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || ""))
        return matches[matches.length - 1];
      let pathMatches = getPathContributingMatches(matches);
      return pathMatches[pathMatches.length - 1];
    }
    function getSubmissionFromNavigation(navigation) {
      let {
        formMethod,
        formAction,
        formEncType,
        text,
        formData,
        json: json2
      } = navigation;
      if (!(!formMethod || !formAction || !formEncType)) {
        if (text != null)
          return {
            formMethod,
            formAction,
            formEncType,
            formData: void 0,
            json: void 0,
            text
          };
        if (formData != null)
          return {
            formMethod,
            formAction,
            formEncType,
            formData,
            json: void 0,
            text: void 0
          };
        if (json2 !== void 0)
          return {
            formMethod,
            formAction,
            formEncType,
            formData: void 0,
            json: json2,
            text: void 0
          };
      }
    }
    function getLoadingNavigation(location, submission) {
      return submission ? {
        state: "loading",
        location,
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text
      } : {
        state: "loading",
        location,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        json: void 0,
        text: void 0
      };
    }
    function getSubmittingNavigation(location, submission) {
      return {
        state: "submitting",
        location,
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text
      };
    }
    function getLoadingFetcher(submission, data) {
      return submission ? {
        state: "loading",
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text,
        data,
        " _hasFetcherDoneAnything ": !0
      } : {
        state: "loading",
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        json: void 0,
        text: void 0,
        data,
        " _hasFetcherDoneAnything ": !0
      };
    }
    function getSubmittingFetcher(submission, existingFetcher) {
      return {
        state: "submitting",
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text,
        data: existingFetcher ? existingFetcher.data : void 0,
        " _hasFetcherDoneAnything ": !0
      };
    }
    function getDoneFetcher(data) {
      return {
        state: "idle",
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        json: void 0,
        text: void 0,
        data,
        " _hasFetcherDoneAnything ": !0
      };
    }
    exports.AbortedDeferredError = AbortedDeferredError;
    exports.ErrorResponse = ErrorResponse;
    exports.IDLE_BLOCKER = IDLE_BLOCKER;
    exports.IDLE_FETCHER = IDLE_FETCHER;
    exports.IDLE_NAVIGATION = IDLE_NAVIGATION;
    exports.UNSAFE_DEFERRED_SYMBOL = UNSAFE_DEFERRED_SYMBOL;
    exports.UNSAFE_DeferredData = DeferredData;
    exports.UNSAFE_convertRoutesToDataRoutes = convertRoutesToDataRoutes;
    exports.UNSAFE_getPathContributingMatches = getPathContributingMatches;
    exports.UNSAFE_invariant = invariant2;
    exports.UNSAFE_warning = warning2;
    exports.createBrowserHistory = createBrowserHistory;
    exports.createHashHistory = createHashHistory;
    exports.createMemoryHistory = createMemoryHistory;
    exports.createPath = createPath;
    exports.createRouter = createRouter;
    exports.createStaticHandler = createStaticHandler;
    exports.defer = defer;
    exports.generatePath = generatePath;
    exports.getStaticContextFromError = getStaticContextFromError;
    exports.getToPathname = getToPathname;
    exports.isDeferredData = isDeferredData;
    exports.isRouteErrorResponse = isRouteErrorResponse;
    exports.joinPaths = joinPaths;
    exports.json = json;
    exports.matchPath = matchPath;
    exports.matchRoutes = matchRoutes;
    exports.normalizePathname = normalizePathname;
    exports.parsePath = parsePath;
    exports.redirect = redirect;
    exports.resolvePath = resolvePath;
    exports.resolveTo = resolveTo;
    exports.stripBasename = stripBasename;
  }
});

// ../../../node_modules/react-router/dist/umd/react-router.development.js
var require_react_router_development = __commonJS({
  "../../../node_modules/react-router/dist/umd/react-router.development.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports == "object" && typeof module2 < "u" ? factory(exports, require_react(), require_router_cjs2()) : typeof define == "function" && define.amd ? define(["exports", "react", "@remix-run/router"], factory) : (global2 = typeof globalThis < "u" ? globalThis : global2 || self, factory(global2.ReactRouter = {}, global2.React, global2.RemixRouter));
    })(exports, function(exports2, React12, router) {
      "use strict";
      function _interopNamespace(e24) {
        if (e24 && e24.__esModule)
          return e24;
        var n = /* @__PURE__ */ Object.create(null);
        return e24 && Object.keys(e24).forEach(function(k) {
          if (k !== "default") {
            var d = Object.getOwnPropertyDescriptor(e24, k);
            Object.defineProperty(n, k, d.get ? d : {
              enumerable: !0,
              get: function() {
                return e24[k];
              }
            });
          }
        }), n.default = e24, Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespace(React12);
      function _extends2() {
        return _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i13 = 1; i13 < arguments.length; i13++) {
            var source = arguments[i13];
            for (var key in source)
              Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
          }
          return target;
        }, _extends2.apply(this, arguments);
      }
      let DataRouterContext = /* @__PURE__ */ React__namespace.createContext(null);
      DataRouterContext.displayName = "DataRouter";
      let DataRouterStateContext = /* @__PURE__ */ React__namespace.createContext(null);
      DataRouterStateContext.displayName = "DataRouterState";
      let AwaitContext = /* @__PURE__ */ React__namespace.createContext(null);
      AwaitContext.displayName = "Await";
      let NavigationContext = /* @__PURE__ */ React__namespace.createContext(null);
      NavigationContext.displayName = "Navigation";
      let LocationContext = /* @__PURE__ */ React__namespace.createContext(null);
      LocationContext.displayName = "Location";
      let RouteContext = /* @__PURE__ */ React__namespace.createContext({
        outlet: null,
        matches: [],
        isDataRoute: !1
      });
      RouteContext.displayName = "Route";
      let RouteErrorContext = /* @__PURE__ */ React__namespace.createContext(null);
      RouteErrorContext.displayName = "RouteError";
      function useHref(to, _temp) {
        let {
          relative
        } = _temp === void 0 ? {} : _temp;
        useInRouterContext() || router.UNSAFE_invariant(
          !1,
          // TODO: This error is probably because they somehow have 2 versions of the
          // router loaded. We can help them understand how to avoid that.
          "useHref() may be used only in the context of a <Router> component."
        );
        let {
          basename,
          navigator: navigator2
        } = React__namespace.useContext(NavigationContext), {
          hash,
          pathname,
          search
        } = useResolvedPath(to, {
          relative
        }), joinedPathname = pathname;
        return basename !== "/" && (joinedPathname = pathname === "/" ? basename : router.joinPaths([basename, pathname])), navigator2.createHref({
          pathname: joinedPathname,
          search,
          hash
        });
      }
      function useInRouterContext() {
        return React__namespace.useContext(LocationContext) != null;
      }
      function useLocation3() {
        return useInRouterContext() || router.UNSAFE_invariant(
          !1,
          // TODO: This error is probably because they somehow have 2 versions of the
          // router loaded. We can help them understand how to avoid that.
          "useLocation() may be used only in the context of a <Router> component."
        ), React__namespace.useContext(LocationContext).location;
      }
      function useNavigationType() {
        return React__namespace.useContext(LocationContext).navigationType;
      }
      function useMatch3(pattern) {
        useInRouterContext() || router.UNSAFE_invariant(
          !1,
          // TODO: This error is probably because they somehow have 2 versions of the
          // router loaded. We can help them understand how to avoid that.
          "useMatch() may be used only in the context of a <Router> component."
        );
        let {
          pathname
        } = useLocation3();
        return React__namespace.useMemo(() => router.matchPath(pattern, pathname), [pathname, pattern]);
      }
      let navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
      function useIsomorphicLayoutEffect2(cb) {
        React__namespace.useContext(NavigationContext).static || React__namespace.useLayoutEffect(cb);
      }
      function useNavigate2() {
        let {
          isDataRoute
        } = React__namespace.useContext(RouteContext);
        return isDataRoute ? useNavigateStable() : useNavigateUnstable();
      }
      function useNavigateUnstable() {
        useInRouterContext() || router.UNSAFE_invariant(
          !1,
          // TODO: This error is probably because they somehow have 2 versions of the
          // router loaded. We can help them understand how to avoid that.
          "useNavigate() may be used only in the context of a <Router> component."
        );
        let dataRouterContext = React__namespace.useContext(DataRouterContext), {
          basename,
          navigator: navigator2
        } = React__namespace.useContext(NavigationContext), {
          matches
        } = React__namespace.useContext(RouteContext), {
          pathname: locationPathname
        } = useLocation3(), routePathnamesJson = JSON.stringify(router.UNSAFE_getPathContributingMatches(matches).map((match) => match.pathnameBase)), activeRef = React__namespace.useRef(!1);
        return useIsomorphicLayoutEffect2(() => {
          activeRef.current = !0;
        }), React__namespace.useCallback(function(to, options) {
          if (options === void 0 && (options = {}), router.UNSAFE_warning(activeRef.current, navigateEffectWarning), !activeRef.current)
            return;
          if (typeof to == "number") {
            navigator2.go(to);
            return;
          }
          let path = router.resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
          dataRouterContext == null && basename !== "/" && (path.pathname = path.pathname === "/" ? basename : router.joinPaths([basename, path.pathname])), (options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
        }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
      }
      let OutletContext = /* @__PURE__ */ React__namespace.createContext(null);
      function useOutletContext() {
        return React__namespace.useContext(OutletContext);
      }
      function useOutlet(context) {
        let outlet = React__namespace.useContext(RouteContext).outlet;
        return outlet && /* @__PURE__ */ React__namespace.createElement(OutletContext.Provider, {
          value: context
        }, outlet);
      }
      function useParams() {
        let {
          matches
        } = React__namespace.useContext(RouteContext), routeMatch = matches[matches.length - 1];
        return routeMatch ? routeMatch.params : {};
      }
      function useResolvedPath(to, _temp2) {
        let {
          relative
        } = _temp2 === void 0 ? {} : _temp2, {
          matches
        } = React__namespace.useContext(RouteContext), {
          pathname: locationPathname
        } = useLocation3(), routePathnamesJson = JSON.stringify(router.UNSAFE_getPathContributingMatches(matches).map((match) => match.pathnameBase));
        return React__namespace.useMemo(() => router.resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
      }
      function useRoutes(routes2, locationArg) {
        return useRoutesImpl(routes2, locationArg);
      }
      function useRoutesImpl(routes2, locationArg, dataRouterState) {
        useInRouterContext() || router.UNSAFE_invariant(
          !1,
          // TODO: This error is probably because they somehow have 2 versions of the
          // router loaded. We can help them understand how to avoid that.
          "useRoutes() may be used only in the context of a <Router> component."
        );
        let {
          navigator: navigator2
        } = React__namespace.useContext(NavigationContext), {
          matches: parentMatches
        } = React__namespace.useContext(RouteContext), routeMatch = parentMatches[parentMatches.length - 1], parentParams = routeMatch ? routeMatch.params : {}, parentPathname = routeMatch ? routeMatch.pathname : "/", parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/", parentRoute = routeMatch && routeMatch.route;
        {
          let parentPath = parentRoute && parentRoute.path || "";
          warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
        }
        let locationFromContext = useLocation3(), location;
        if (locationArg) {
          var _parsedLocationArg$pa;
          let parsedLocationArg = typeof locationArg == "string" ? router.parsePath(locationArg) : locationArg;
          parentPathnameBase === "/" || (_parsedLocationArg$pa = parsedLocationArg.pathname) != null && _parsedLocationArg$pa.startsWith(parentPathnameBase) || router.UNSAFE_invariant(!1, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')), location = parsedLocationArg;
        } else
          location = locationFromContext;
        let pathname = location.pathname || "/", remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/", matches = router.matchRoutes(routes2, {
          pathname: remainingPathname
        });
        router.UNSAFE_warning(parentRoute || matches != null, 'No routes matched location "' + location.pathname + location.search + location.hash + '" '), router.UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0, 'Matched leaf route at location "' + location.pathname + location.search + location.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.');
        let renderedMatches = _renderMatches(matches && matches.map((match) => Object.assign({}, match, {
          params: Object.assign({}, parentParams, match.params),
          pathname: router.joinPaths([
            parentPathnameBase,
            // Re-encode pathnames that were decoded inside matchRoutes
            navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
          ]),
          pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : router.joinPaths([
            parentPathnameBase,
            // Re-encode pathnames that were decoded inside matchRoutes
            navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
          ])
        })), parentMatches, dataRouterState);
        return locationArg && renderedMatches ? /* @__PURE__ */ React__namespace.createElement(LocationContext.Provider, {
          value: {
            location: _extends2({
              pathname: "/",
              search: "",
              hash: "",
              state: null,
              key: "default"
            }, location),
            navigationType: router.Action.Pop
          }
        }, renderedMatches) : renderedMatches;
      }
      function DefaultErrorComponent() {
        let error2 = useRouteError(), message2 = router.isRouteErrorResponse(error2) ? error2.status + " " + error2.statusText : error2 instanceof Error ? error2.message : JSON.stringify(error2), stack = error2 instanceof Error ? error2.stack : null, lightgrey = "rgba(200,200,200, 0.5)", preStyles = {
          padding: "0.5rem",
          backgroundColor: lightgrey
        }, codeStyles = {
          padding: "2px 4px",
          backgroundColor: lightgrey
        }, devInfo = null;
        return console.error("Error handled by React Router default ErrorBoundary:", error2), devInfo = /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React__namespace.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React__namespace.createElement("code", {
          style: codeStyles
        }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React__namespace.createElement("code", {
          style: codeStyles
        }, "errorElement"), " prop on your route.")), /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React__namespace.createElement("h3", {
          style: {
            fontStyle: "italic"
          }
        }, message2), stack ? /* @__PURE__ */ React__namespace.createElement("pre", {
          style: preStyles
        }, stack) : null, devInfo);
      }
      let defaultErrorElement = /* @__PURE__ */ React__namespace.createElement(DefaultErrorComponent, null);
      class RenderErrorBoundary extends React__namespace.Component {
        constructor(props) {
          super(props), this.state = {
            location: props.location,
            revalidation: props.revalidation,
            error: props.error
          };
        }
        static getDerivedStateFromError(error2) {
          return {
            error: error2
          };
        }
        static getDerivedStateFromProps(props, state) {
          return state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle" ? {
            error: props.error,
            location: props.location,
            revalidation: props.revalidation
          } : {
            error: props.error || state.error,
            location: state.location,
            revalidation: props.revalidation || state.revalidation
          };
        }
        componentDidCatch(error2, errorInfo) {
          console.error("React Router caught the following error during render", error2, errorInfo);
        }
        render() {
          return this.state.error ? /* @__PURE__ */ React__namespace.createElement(RouteContext.Provider, {
            value: this.props.routeContext
          }, /* @__PURE__ */ React__namespace.createElement(RouteErrorContext.Provider, {
            value: this.state.error,
            children: this.props.component
          })) : this.props.children;
        }
      }
      function RenderedRoute(_ref) {
        let {
          routeContext,
          match,
          children
        } = _ref, dataRouterContext = React__namespace.useContext(DataRouterContext);
        return dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary) && (dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id), /* @__PURE__ */ React__namespace.createElement(RouteContext.Provider, {
          value: routeContext
        }, children);
      }
      function _renderMatches(matches, parentMatches, dataRouterState) {
        var _dataRouterState2;
        if (parentMatches === void 0 && (parentMatches = []), dataRouterState === void 0 && (dataRouterState = null), matches == null) {
          var _dataRouterState;
          if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors)
            matches = dataRouterState.matches;
          else
            return null;
        }
        let renderedMatches = matches, errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
        if (errors != null) {
          let errorIndex = renderedMatches.findIndex((m) => m.route.id && (errors == null ? void 0 : errors[m.route.id]));
          errorIndex >= 0 || router.UNSAFE_invariant(!1, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")), renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
        }
        return renderedMatches.reduceRight((outlet, match, index2) => {
          let error2 = match.route.id ? errors == null ? void 0 : errors[match.route.id] : null, errorElement = null;
          dataRouterState && (errorElement = match.route.errorElement || defaultErrorElement);
          let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1)), getChildren = () => {
            let children;
            return error2 ? children = errorElement : match.route.Component ? children = /* @__PURE__ */ React__namespace.createElement(match.route.Component, null) : match.route.element ? children = match.route.element : children = outlet, /* @__PURE__ */ React__namespace.createElement(RenderedRoute, {
              match,
              routeContext: {
                outlet,
                matches: matches2,
                isDataRoute: dataRouterState != null
              },
              children
            });
          };
          return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index2 === 0) ? /* @__PURE__ */ React__namespace.createElement(RenderErrorBoundary, {
            location: dataRouterState.location,
            revalidation: dataRouterState.revalidation,
            component: errorElement,
            error: error2,
            children: getChildren(),
            routeContext: {
              outlet: null,
              matches: matches2,
              isDataRoute: !0
            }
          }) : getChildren();
        }, null);
      }
      var DataRouterHook;
      (function(DataRouterHook2) {
        DataRouterHook2.UseBlocker = "useBlocker", DataRouterHook2.UseRevalidator = "useRevalidator", DataRouterHook2.UseNavigateStable = "useNavigate";
      })(DataRouterHook || (DataRouterHook = {}));
      var DataRouterStateHook;
      (function(DataRouterStateHook2) {
        DataRouterStateHook2.UseBlocker = "useBlocker", DataRouterStateHook2.UseLoaderData = "useLoaderData", DataRouterStateHook2.UseActionData = "useActionData", DataRouterStateHook2.UseRouteError = "useRouteError", DataRouterStateHook2.UseNavigation = "useNavigation", DataRouterStateHook2.UseRouteLoaderData = "useRouteLoaderData", DataRouterStateHook2.UseMatches = "useMatches", DataRouterStateHook2.UseRevalidator = "useRevalidator", DataRouterStateHook2.UseNavigateStable = "useNavigate", DataRouterStateHook2.UseRouteId = "useRouteId";
      })(DataRouterStateHook || (DataRouterStateHook = {}));
      function getDataRouterConsoleError(hookName) {
        return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
      }
      function useDataRouterContext(hookName) {
        let ctx = React__namespace.useContext(DataRouterContext);
        return ctx || router.UNSAFE_invariant(!1, getDataRouterConsoleError(hookName)), ctx;
      }
      function useDataRouterState(hookName) {
        let state = React__namespace.useContext(DataRouterStateContext);
        return state || router.UNSAFE_invariant(!1, getDataRouterConsoleError(hookName)), state;
      }
      function useRouteContext(hookName) {
        let route = React__namespace.useContext(RouteContext);
        return route || router.UNSAFE_invariant(!1, getDataRouterConsoleError(hookName)), route;
      }
      function useCurrentRouteId(hookName) {
        let route = useRouteContext(hookName), thisRoute = route.matches[route.matches.length - 1];
        return thisRoute.route.id || router.UNSAFE_invariant(!1, hookName + ' can only be used on routes that contain a unique "id"'), thisRoute.route.id;
      }
      function useRouteId() {
        return useCurrentRouteId(DataRouterStateHook.UseRouteId);
      }
      function useNavigation() {
        return useDataRouterState(DataRouterStateHook.UseNavigation).navigation;
      }
      function useRevalidator() {
        let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator), state = useDataRouterState(DataRouterStateHook.UseRevalidator);
        return {
          revalidate: dataRouterContext.router.revalidate,
          state: state.revalidation
        };
      }
      function useMatches() {
        let {
          matches,
          loaderData
        } = useDataRouterState(DataRouterStateHook.UseMatches);
        return React__namespace.useMemo(() => matches.map((match) => {
          let {
            pathname,
            params
          } = match;
          return {
            id: match.route.id,
            pathname,
            params,
            data: loaderData[match.route.id],
            handle: match.route.handle
          };
        }), [matches, loaderData]);
      }
      function useLoaderData() {
        let state = useDataRouterState(DataRouterStateHook.UseLoaderData), routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);
        if (state.errors && state.errors[routeId] != null) {
          console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");
          return;
        }
        return state.loaderData[routeId];
      }
      function useRouteLoaderData(routeId) {
        return useDataRouterState(DataRouterStateHook.UseRouteLoaderData).loaderData[routeId];
      }
      function useActionData() {
        let state = useDataRouterState(DataRouterStateHook.UseActionData);
        return React__namespace.useContext(RouteContext) || router.UNSAFE_invariant(!1, "useActionData must be used inside a RouteContext"), Object.values((state == null ? void 0 : state.actionData) || {})[0];
      }
      function useRouteError() {
        var _state$errors;
        let error2 = React__namespace.useContext(RouteErrorContext), state = useDataRouterState(DataRouterStateHook.UseRouteError), routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
        return error2 || ((_state$errors = state.errors) == null ? void 0 : _state$errors[routeId]);
      }
      function useAsyncValue() {
        let value = React__namespace.useContext(AwaitContext);
        return value == null ? void 0 : value._data;
      }
      function useAsyncError() {
        let value = React__namespace.useContext(AwaitContext);
        return value == null ? void 0 : value._error;
      }
      let blockerId = 0;
      function useBlocker(shouldBlock) {
        let {
          router: router$1,
          basename
        } = useDataRouterContext(DataRouterHook.UseBlocker), state = useDataRouterState(DataRouterStateHook.UseBlocker), [blockerKey, setBlockerKey] = React__namespace.useState(""), [blocker, setBlocker] = React__namespace.useState(router.IDLE_BLOCKER), blockerFunction = React__namespace.useCallback((arg) => {
          if (typeof shouldBlock != "function")
            return !!shouldBlock;
          if (basename === "/")
            return shouldBlock(arg);
          let {
            currentLocation,
            nextLocation,
            historyAction
          } = arg;
          return shouldBlock({
            currentLocation: _extends2({}, currentLocation, {
              pathname: router.stripBasename(currentLocation.pathname, basename) || currentLocation.pathname
            }),
            nextLocation: _extends2({}, nextLocation, {
              pathname: router.stripBasename(nextLocation.pathname, basename) || nextLocation.pathname
            }),
            historyAction
          });
        }, [basename, shouldBlock]);
        return React__namespace.useEffect(() => {
          let key = String(++blockerId);
          return setBlocker(router$1.getBlocker(key, blockerFunction)), setBlockerKey(key), () => router$1.deleteBlocker(key);
        }, [router$1, setBlocker, setBlockerKey, blockerFunction]), blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : blocker;
      }
      function useNavigateStable() {
        let {
          router: router$1
        } = useDataRouterContext(DataRouterHook.UseNavigateStable), id3 = useCurrentRouteId(DataRouterStateHook.UseNavigateStable), activeRef = React__namespace.useRef(!1);
        return useIsomorphicLayoutEffect2(() => {
          activeRef.current = !0;
        }), React__namespace.useCallback(function(to, options) {
          options === void 0 && (options = {}), router.UNSAFE_warning(activeRef.current, navigateEffectWarning), activeRef.current && (typeof to == "number" ? router$1.navigate(to) : router$1.navigate(to, _extends2({
            fromRouteId: id3
          }, options)));
        }, [router$1, id3]);
      }
      let alreadyWarned = {};
      function warningOnce(key, cond, message2) {
        !cond && !alreadyWarned[key] && (alreadyWarned[key] = !0, router.UNSAFE_warning(!1, message2));
      }
      let startTransitionImpl = React__namespace["startTransition"];
      function RouterProvider(_ref) {
        let {
          fallbackElement,
          router: router2,
          future: future2
        } = _ref, [state, setStateImpl] = React__namespace.useState(router2.state), {
          v7_startTransition
        } = future2 || {}, setState = React__namespace.useCallback((newState) => {
          v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
        }, [setStateImpl, v7_startTransition]);
        React__namespace.useLayoutEffect(() => router2.subscribe(setState), [router2, setState]);
        let navigator2 = React__namespace.useMemo(() => ({
          createHref: router2.createHref,
          encodeLocation: router2.encodeLocation,
          go: (n) => router2.navigate(n),
          push: (to, state2, opts) => router2.navigate(to, {
            state: state2,
            preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
          }),
          replace: (to, state2, opts) => router2.navigate(to, {
            replace: !0,
            state: state2,
            preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
          })
        }), [router2]), basename = router2.basename || "/", dataRouterContext = React__namespace.useMemo(() => ({
          router: router2,
          navigator: navigator2,
          static: !1,
          basename
        }), [router2, navigator2, basename]);
        return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(DataRouterContext.Provider, {
          value: dataRouterContext
        }, /* @__PURE__ */ React__namespace.createElement(DataRouterStateContext.Provider, {
          value: state
        }, /* @__PURE__ */ React__namespace.createElement(Router, {
          basename,
          location: state.location,
          navigationType: state.historyAction,
          navigator: navigator2
        }, state.initialized ? /* @__PURE__ */ React__namespace.createElement(DataRoutes, {
          routes: router2.routes,
          state
        }) : fallbackElement))), null);
      }
      function DataRoutes(_ref2) {
        let {
          routes: routes2,
          state
        } = _ref2;
        return useRoutesImpl(routes2, void 0, state);
      }
      function MemoryRouter(_ref3) {
        let {
          basename,
          children,
          initialEntries,
          initialIndex,
          future: future2
        } = _ref3, historyRef = React__namespace.useRef();
        historyRef.current == null && (historyRef.current = router.createMemoryHistory({
          initialEntries,
          initialIndex,
          v5Compat: !0
        }));
        let history = historyRef.current, [state, setStateImpl] = React__namespace.useState({
          action: history.action,
          location: history.location
        }), {
          v7_startTransition
        } = future2 || {}, setState = React__namespace.useCallback((newState) => {
          v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
        }, [setStateImpl, v7_startTransition]);
        return React__namespace.useLayoutEffect(() => history.listen(setState), [history, setState]), /* @__PURE__ */ React__namespace.createElement(Router, {
          basename,
          children,
          location: state.location,
          navigationType: state.action,
          navigator: history
        });
      }
      function Navigate(_ref4) {
        let {
          to,
          replace,
          state,
          relative
        } = _ref4;
        useInRouterContext() || router.UNSAFE_invariant(
          !1,
          // TODO: This error is probably because they somehow have 2 versions of
          // the router loaded. We can help them understand how to avoid that.
          "<Navigate> may be used only in the context of a <Router> component."
        ), router.UNSAFE_warning(!React__namespace.useContext(NavigationContext).static, "<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.");
        let {
          matches
        } = React__namespace.useContext(RouteContext), {
          pathname: locationPathname
        } = useLocation3(), navigate = useNavigate2(), path = router.resolveTo(to, router.UNSAFE_getPathContributingMatches(matches).map((match) => match.pathnameBase), locationPathname, relative === "path"), jsonPath = JSON.stringify(path);
        return React__namespace.useEffect(() => navigate(JSON.parse(jsonPath), {
          replace,
          state,
          relative
        }), [navigate, jsonPath, relative, replace, state]), null;
      }
      function Outlet5(props) {
        return useOutlet(props.context);
      }
      function Route(_props) {
        router.UNSAFE_invariant(!1, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.");
      }
      function Router(_ref5) {
        let {
          basename: basenameProp = "/",
          children = null,
          location: locationProp,
          navigationType = router.Action.Pop,
          navigator: navigator2,
          static: staticProp = !1
        } = _ref5;
        useInRouterContext() && router.UNSAFE_invariant(!1, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");
        let basename = basenameProp.replace(/^\/*/, "/"), navigationContext = React__namespace.useMemo(() => ({
          basename,
          navigator: navigator2,
          static: staticProp
        }), [basename, navigator2, staticProp]);
        typeof locationProp == "string" && (locationProp = router.parsePath(locationProp));
        let {
          pathname = "/",
          search = "",
          hash = "",
          state = null,
          key = "default"
        } = locationProp, locationContext = React__namespace.useMemo(() => {
          let trailingPathname = router.stripBasename(pathname, basename);
          return trailingPathname == null ? null : {
            location: {
              pathname: trailingPathname,
              search,
              hash,
              state,
              key
            },
            navigationType
          };
        }, [basename, pathname, search, hash, state, key, navigationType]);
        return router.UNSAFE_warning(locationContext != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything."), locationContext == null ? null : /* @__PURE__ */ React__namespace.createElement(NavigationContext.Provider, {
          value: navigationContext
        }, /* @__PURE__ */ React__namespace.createElement(LocationContext.Provider, {
          children,
          value: locationContext
        }));
      }
      function Routes(_ref6) {
        let {
          children,
          location
        } = _ref6;
        return useRoutes(createRoutesFromChildren(children), location);
      }
      function Await(_ref7) {
        let {
          children,
          errorElement,
          resolve
        } = _ref7;
        return /* @__PURE__ */ React__namespace.createElement(AwaitErrorBoundary, {
          resolve,
          errorElement
        }, /* @__PURE__ */ React__namespace.createElement(ResolveAwait, null, children));
      }
      var AwaitRenderStatus;
      (function(AwaitRenderStatus2) {
        AwaitRenderStatus2[AwaitRenderStatus2.pending = 0] = "pending", AwaitRenderStatus2[AwaitRenderStatus2.success = 1] = "success", AwaitRenderStatus2[AwaitRenderStatus2.error = 2] = "error";
      })(AwaitRenderStatus || (AwaitRenderStatus = {}));
      let neverSettledPromise = new Promise(() => {
      });
      class AwaitErrorBoundary extends React__namespace.Component {
        constructor(props) {
          super(props), this.state = {
            error: null
          };
        }
        static getDerivedStateFromError(error2) {
          return {
            error: error2
          };
        }
        componentDidCatch(error2, errorInfo) {
          console.error("<Await> caught the following error during render", error2, errorInfo);
        }
        render() {
          let {
            children,
            errorElement,
            resolve
          } = this.props, promise = null, status = AwaitRenderStatus.pending;
          if (!(resolve instanceof Promise))
            status = AwaitRenderStatus.success, promise = Promise.resolve(), Object.defineProperty(promise, "_tracked", {
              get: () => !0
            }), Object.defineProperty(promise, "_data", {
              get: () => resolve
            });
          else if (this.state.error) {
            status = AwaitRenderStatus.error;
            let renderError = this.state.error;
            promise = Promise.reject().catch(() => {
            }), Object.defineProperty(promise, "_tracked", {
              get: () => !0
            }), Object.defineProperty(promise, "_error", {
              get: () => renderError
            });
          } else
            resolve._tracked ? (promise = resolve, status = promise._error !== void 0 ? AwaitRenderStatus.error : promise._data !== void 0 ? AwaitRenderStatus.success : AwaitRenderStatus.pending) : (status = AwaitRenderStatus.pending, Object.defineProperty(resolve, "_tracked", {
              get: () => !0
            }), promise = resolve.then((data) => Object.defineProperty(resolve, "_data", {
              get: () => data
            }), (error2) => Object.defineProperty(resolve, "_error", {
              get: () => error2
            })));
          if (status === AwaitRenderStatus.error && promise._error instanceof router.AbortedDeferredError)
            throw neverSettledPromise;
          if (status === AwaitRenderStatus.error && !errorElement)
            throw promise._error;
          if (status === AwaitRenderStatus.error)
            return /* @__PURE__ */ React__namespace.createElement(AwaitContext.Provider, {
              value: promise,
              children: errorElement
            });
          if (status === AwaitRenderStatus.success)
            return /* @__PURE__ */ React__namespace.createElement(AwaitContext.Provider, {
              value: promise,
              children
            });
          throw promise;
        }
      }
      function ResolveAwait(_ref8) {
        let {
          children
        } = _ref8, data = useAsyncValue(), toRender = typeof children == "function" ? children(data) : children;
        return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, toRender);
      }
      function createRoutesFromChildren(children, parentPath) {
        parentPath === void 0 && (parentPath = []);
        let routes2 = [];
        return React__namespace.Children.forEach(children, (element, index2) => {
          if (!/* @__PURE__ */ React__namespace.isValidElement(element))
            return;
          let treePath = [...parentPath, index2];
          if (element.type === React__namespace.Fragment) {
            routes2.push.apply(routes2, createRoutesFromChildren(element.props.children, treePath));
            return;
          }
          element.type !== Route && router.UNSAFE_invariant(!1, "[" + (typeof element.type == "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>"), !element.props.index || !element.props.children || router.UNSAFE_invariant(!1, "An index route cannot have child routes.");
          let route = {
            id: element.props.id || treePath.join("-"),
            caseSensitive: element.props.caseSensitive,
            element: element.props.element,
            Component: element.props.Component,
            index: element.props.index,
            path: element.props.path,
            loader: element.props.loader,
            action: element.props.action,
            errorElement: element.props.errorElement,
            ErrorBoundary: element.props.ErrorBoundary,
            hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
            shouldRevalidate: element.props.shouldRevalidate,
            handle: element.props.handle,
            lazy: element.props.lazy
          };
          element.props.children && (route.children = createRoutesFromChildren(element.props.children, treePath)), routes2.push(route);
        }), routes2;
      }
      function renderMatches(matches) {
        return _renderMatches(matches);
      }
      function mapRouteProperties(route) {
        let updates = {
          // Note: this check also occurs in createRoutesFromChildren so update
          // there if you change this -- please and thank you!
          hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null
        };
        return route.Component && (route.element && router.UNSAFE_warning(!1, "You should not include both `Component` and `element` on your route - `Component` will be used."), Object.assign(updates, {
          element: /* @__PURE__ */ React__namespace.createElement(route.Component),
          Component: void 0
        })), route.ErrorBoundary && (route.errorElement && router.UNSAFE_warning(!1, "You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used."), Object.assign(updates, {
          errorElement: /* @__PURE__ */ React__namespace.createElement(route.ErrorBoundary),
          ErrorBoundary: void 0
        })), updates;
      }
      function createMemoryRouter(routes2, opts) {
        return router.createRouter({
          basename: opts == null ? void 0 : opts.basename,
          future: _extends2({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: !0
          }),
          history: router.createMemoryHistory({
            initialEntries: opts == null ? void 0 : opts.initialEntries,
            initialIndex: opts == null ? void 0 : opts.initialIndex
          }),
          hydrationData: opts == null ? void 0 : opts.hydrationData,
          routes: routes2,
          mapRouteProperties
        }).initialize();
      }
      Object.defineProperty(exports2, "AbortedDeferredError", {
        enumerable: !0,
        get: function() {
          return router.AbortedDeferredError;
        }
      }), Object.defineProperty(exports2, "NavigationType", {
        enumerable: !0,
        get: function() {
          return router.Action;
        }
      }), Object.defineProperty(exports2, "createPath", {
        enumerable: !0,
        get: function() {
          return router.createPath;
        }
      }), Object.defineProperty(exports2, "defer", {
        enumerable: !0,
        get: function() {
          return router.defer;
        }
      }), Object.defineProperty(exports2, "generatePath", {
        enumerable: !0,
        get: function() {
          return router.generatePath;
        }
      }), Object.defineProperty(exports2, "isRouteErrorResponse", {
        enumerable: !0,
        get: function() {
          return router.isRouteErrorResponse;
        }
      }), Object.defineProperty(exports2, "json", {
        enumerable: !0,
        get: function() {
          return router.json;
        }
      }), Object.defineProperty(exports2, "matchPath", {
        enumerable: !0,
        get: function() {
          return router.matchPath;
        }
      }), Object.defineProperty(exports2, "matchRoutes", {
        enumerable: !0,
        get: function() {
          return router.matchRoutes;
        }
      }), Object.defineProperty(exports2, "parsePath", {
        enumerable: !0,
        get: function() {
          return router.parsePath;
        }
      }), Object.defineProperty(exports2, "redirect", {
        enumerable: !0,
        get: function() {
          return router.redirect;
        }
      }), Object.defineProperty(exports2, "resolvePath", {
        enumerable: !0,
        get: function() {
          return router.resolvePath;
        }
      }), exports2.Await = Await, exports2.MemoryRouter = MemoryRouter, exports2.Navigate = Navigate, exports2.Outlet = Outlet5, exports2.Route = Route, exports2.Router = Router, exports2.RouterProvider = RouterProvider, exports2.Routes = Routes, exports2.UNSAFE_DataRouterContext = DataRouterContext, exports2.UNSAFE_DataRouterStateContext = DataRouterStateContext, exports2.UNSAFE_LocationContext = LocationContext, exports2.UNSAFE_NavigationContext = NavigationContext, exports2.UNSAFE_RouteContext = RouteContext, exports2.UNSAFE_mapRouteProperties = mapRouteProperties, exports2.UNSAFE_useRouteId = useRouteId, exports2.UNSAFE_useRoutesImpl = useRoutesImpl, exports2.createMemoryRouter = createMemoryRouter, exports2.createRoutesFromChildren = createRoutesFromChildren, exports2.createRoutesFromElements = createRoutesFromChildren, exports2.renderMatches = renderMatches, exports2.unstable_useBlocker = useBlocker, exports2.useActionData = useActionData, exports2.useAsyncError = useAsyncError, exports2.useAsyncValue = useAsyncValue, exports2.useHref = useHref, exports2.useInRouterContext = useInRouterContext, exports2.useLoaderData = useLoaderData, exports2.useLocation = useLocation3, exports2.useMatch = useMatch3, exports2.useMatches = useMatches, exports2.useNavigate = useNavigate2, exports2.useNavigation = useNavigation, exports2.useNavigationType = useNavigationType, exports2.useOutlet = useOutlet, exports2.useOutletContext = useOutletContext, exports2.useParams = useParams, exports2.useResolvedPath = useResolvedPath, exports2.useRevalidator = useRevalidator, exports2.useRouteError = useRouteError, exports2.useRouteLoaderData = useRouteLoaderData, exports2.useRoutes = useRoutes, Object.defineProperty(exports2, "__esModule", { value: !0 });
    });
  }
});

// ../../../node_modules/react-router/dist/main.js
var require_main = __commonJS({
  "../../../node_modules/react-router/dist/main.js"(exports, module2) {
    "use strict";
    module2.exports = require_react_router_development();
  }
});

// ../../../node_modules/react-router-dom/dist/umd/react-router-dom.development.js
var require_react_router_dom_development = __commonJS({
  "../../../node_modules/react-router-dom/dist/umd/react-router-dom.development.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports == "object" && typeof module2 < "u" ? factory(exports, require_react(), require_main(), require_router_cjs2()) : typeof define == "function" && define.amd ? define(["exports", "react", "react-router", "@remix-run/router"], factory) : (global2 = typeof globalThis < "u" ? globalThis : global2 || self, factory(global2.ReactRouterDOM = {}, global2.React, global2.ReactRouter, global2.RemixRouter));
    })(exports, function(exports2, React12, reactRouter, router) {
      "use strict";
      function _interopNamespace(e24) {
        if (e24 && e24.__esModule)
          return e24;
        var n = /* @__PURE__ */ Object.create(null);
        return e24 && Object.keys(e24).forEach(function(k) {
          if (k !== "default") {
            var d = Object.getOwnPropertyDescriptor(e24, k);
            Object.defineProperty(n, k, d.get ? d : {
              enumerable: !0,
              get: function() {
                return e24[k];
              }
            });
          }
        }), n.default = e24, Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespace(React12);
      function _extends2() {
        return _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i13 = 1; i13 < arguments.length; i13++) {
            var source = arguments[i13];
            for (var key in source)
              Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
          }
          return target;
        }, _extends2.apply(this, arguments);
      }
      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null)
          return {};
        var target = {}, sourceKeys = Object.keys(source), key, i13;
        for (i13 = 0; i13 < sourceKeys.length; i13++)
          key = sourceKeys[i13], !(excluded.indexOf(key) >= 0) && (target[key] = source[key]);
        return target;
      }
      let defaultMethod = "get", defaultEncType = "application/x-www-form-urlencoded";
      function isHtmlElement(object) {
        return object != null && typeof object.tagName == "string";
      }
      function isButtonElement(object) {
        return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
      }
      function isFormElement(object) {
        return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
      }
      function isInputElement(object) {
        return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
      }
      function isModifiedEvent(event) {
        return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
      }
      function shouldProcessLinkClick(event, target) {
        return event.button === 0 && // Ignore everything but left clicks
        (!target || target === "_self") && // Let browser handle "target=_blank" etc.
        !isModifiedEvent(event);
      }
      function createSearchParams(init) {
        return init === void 0 && (init = ""), new URLSearchParams(typeof init == "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {
          let value = init[key];
          return memo.concat(Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]);
        }, []));
      }
      function getSearchParamsForLocation(locationSearch, defaultSearchParams) {
        let searchParams = createSearchParams(locationSearch);
        if (defaultSearchParams)
          for (let key of defaultSearchParams.keys())
            searchParams.has(key) || defaultSearchParams.getAll(key).forEach((value) => {
              searchParams.append(key, value);
            });
        return searchParams;
      }
      let _formDataSupportsSubmitter = null;
      function isFormDataSubmitterSupported() {
        if (_formDataSupportsSubmitter === null)
          try {
            new FormData(
              document.createElement("form"),
              // @ts-expect-error if FormData supports the submitter parameter, this will throw
              0
            ), _formDataSupportsSubmitter = !1;
          } catch {
            _formDataSupportsSubmitter = !0;
          }
        return _formDataSupportsSubmitter;
      }
      let supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
      function getFormEncType(encType) {
        return encType != null && !supportedFormEncTypes.has(encType) ? (router.UNSAFE_warning(!1, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"')), null) : encType;
      }
      function getFormSubmissionInfo(target, basename) {
        let method, action, encType, formData, body;
        if (isFormElement(target)) {
          let attr = target.getAttribute("action");
          action = attr ? router.stripBasename(attr, basename) : null, method = target.getAttribute("method") || defaultMethod, encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType, formData = new FormData(target);
        } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
          let form = target.form;
          if (form == null)
            throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
          let attr = target.getAttribute("formaction") || form.getAttribute("action");
          if (action = attr ? router.stripBasename(attr, basename) : null, method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod, encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType, formData = new FormData(form, target), !isFormDataSubmitterSupported()) {
            let {
              name,
              type: type2,
              value
            } = target;
            if (type2 === "image") {
              let prefix2 = name ? name + "." : "";
              formData.append(prefix2 + "x", "0"), formData.append(prefix2 + "y", "0");
            } else
              name && formData.append(name, value);
          }
        } else {
          if (isHtmlElement(target))
            throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
          method = defaultMethod, action = null, encType = defaultEncType, body = target;
        }
        return formData && encType === "text/plain" && (body = formData, formData = void 0), {
          action,
          method: method.toLowerCase(),
          encType,
          formData,
          body
        };
      }
      let _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset"], _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "children"], _excluded3 = ["reloadDocument", "replace", "method", "action", "onSubmit", "submit", "relative", "preventScrollReset"];
      function createBrowserRouter(routes2, opts) {
        return router.createRouter({
          basename: opts == null ? void 0 : opts.basename,
          future: _extends2({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: !0
          }),
          history: router.createBrowserHistory({
            window: opts == null ? void 0 : opts.window
          }),
          hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
          routes: routes2,
          mapRouteProperties: reactRouter.UNSAFE_mapRouteProperties
        }).initialize();
      }
      function createHashRouter(routes2, opts) {
        return router.createRouter({
          basename: opts == null ? void 0 : opts.basename,
          future: _extends2({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: !0
          }),
          history: router.createHashHistory({
            window: opts == null ? void 0 : opts.window
          }),
          hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
          routes: routes2,
          mapRouteProperties: reactRouter.UNSAFE_mapRouteProperties
        }).initialize();
      }
      function parseHydrationData() {
        var _window;
        let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
        return state && state.errors && (state = _extends2({}, state, {
          errors: deserializeErrors(state.errors)
        })), state;
      }
      function deserializeErrors(errors) {
        if (!errors)
          return null;
        let entries = Object.entries(errors), serialized = {};
        for (let [key, val] of entries)
          if (val && val.__type === "RouteErrorResponse")
            serialized[key] = new router.ErrorResponse(val.status, val.statusText, val.data, val.internal === !0);
          else if (val && val.__type === "Error") {
            let error2 = new Error(val.message);
            error2.stack = "", serialized[key] = error2;
          } else
            serialized[key] = val;
        return serialized;
      }
      let startTransitionImpl = React__namespace["startTransition"];
      function BrowserRouter(_ref) {
        let {
          basename,
          children,
          future: future2,
          window: window2
        } = _ref, historyRef = React__namespace.useRef();
        historyRef.current == null && (historyRef.current = router.createBrowserHistory({
          window: window2,
          v5Compat: !0
        }));
        let history = historyRef.current, [state, setStateImpl] = React__namespace.useState({
          action: history.action,
          location: history.location
        }), {
          v7_startTransition
        } = future2 || {}, setState = React__namespace.useCallback((newState) => {
          v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
        }, [setStateImpl, v7_startTransition]);
        return React__namespace.useLayoutEffect(() => history.listen(setState), [history, setState]), /* @__PURE__ */ React__namespace.createElement(reactRouter.Router, {
          basename,
          children,
          location: state.location,
          navigationType: state.action,
          navigator: history
        });
      }
      function HashRouter(_ref2) {
        let {
          basename,
          children,
          future: future2,
          window: window2
        } = _ref2, historyRef = React__namespace.useRef();
        historyRef.current == null && (historyRef.current = router.createHashHistory({
          window: window2,
          v5Compat: !0
        }));
        let history = historyRef.current, [state, setStateImpl] = React__namespace.useState({
          action: history.action,
          location: history.location
        }), {
          v7_startTransition
        } = future2 || {}, setState = React__namespace.useCallback((newState) => {
          v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
        }, [setStateImpl, v7_startTransition]);
        return React__namespace.useLayoutEffect(() => history.listen(setState), [history, setState]), /* @__PURE__ */ React__namespace.createElement(reactRouter.Router, {
          basename,
          children,
          location: state.location,
          navigationType: state.action,
          navigator: history
        });
      }
      function HistoryRouter(_ref3) {
        let {
          basename,
          children,
          future: future2,
          history
        } = _ref3, [state, setStateImpl] = React__namespace.useState({
          action: history.action,
          location: history.location
        }), {
          v7_startTransition
        } = future2 || {}, setState = React__namespace.useCallback((newState) => {
          v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
        }, [setStateImpl, v7_startTransition]);
        return React__namespace.useLayoutEffect(() => history.listen(setState), [history, setState]), /* @__PURE__ */ React__namespace.createElement(reactRouter.Router, {
          basename,
          children,
          location: state.location,
          navigationType: state.action,
          navigator: history
        });
      }
      HistoryRouter.displayName = "unstable_HistoryRouter";
      let isBrowser2 = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i, Link5 = /* @__PURE__ */ React__namespace.forwardRef(function(_ref4, ref) {
        let {
          onClick,
          relative,
          reloadDocument,
          replace,
          state,
          target,
          to,
          preventScrollReset
        } = _ref4, rest = _objectWithoutPropertiesLoose(_ref4, _excluded), {
          basename
        } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext), absoluteHref, isExternal = !1;
        if (typeof to == "string" && ABSOLUTE_URL_REGEX.test(to) && (absoluteHref = to, isBrowser2))
          try {
            let currentUrl = new URL(window.location.href), targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to), path = router.stripBasename(targetUrl.pathname, basename);
            targetUrl.origin === currentUrl.origin && path != null ? to = path + targetUrl.search + targetUrl.hash : isExternal = !0;
          } catch {
            router.UNSAFE_warning(!1, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.');
          }
        let href = reactRouter.useHref(to, {
          relative
        }), internalOnClick = useLinkClickHandler(to, {
          replace,
          state,
          target,
          preventScrollReset,
          relative
        });
        function handleClick(event) {
          onClick && onClick(event), event.defaultPrevented || internalOnClick(event);
        }
        return (
          // eslint-disable-next-line jsx-a11y/anchor-has-content
          /* @__PURE__ */ React__namespace.createElement("a", _extends2({}, rest, {
            href: absoluteHref || href,
            onClick: isExternal || reloadDocument ? onClick : handleClick,
            ref,
            target
          }))
        );
      });
      Link5.displayName = "Link";
      let NavLink = /* @__PURE__ */ React__namespace.forwardRef(function(_ref5, ref) {
        let {
          "aria-current": ariaCurrentProp = "page",
          caseSensitive = !1,
          className: classNameProp = "",
          end = !1,
          style: styleProp,
          to,
          children
        } = _ref5, rest = _objectWithoutPropertiesLoose(_ref5, _excluded2), path = reactRouter.useResolvedPath(to, {
          relative: rest.relative
        }), location = reactRouter.useLocation(), routerState = React__namespace.useContext(reactRouter.UNSAFE_DataRouterStateContext), {
          navigator: navigator2
        } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext), toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname, locationPathname = location.pathname, nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
        caseSensitive || (locationPathname = locationPathname.toLowerCase(), nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null, toPathname = toPathname.toLowerCase());
        let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === "/", isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/"), ariaCurrent = isActive ? ariaCurrentProp : void 0, className2;
        typeof classNameProp == "function" ? className2 = classNameProp({
          isActive,
          isPending
        }) : className2 = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null].filter(Boolean).join(" ");
        let style = typeof styleProp == "function" ? styleProp({
          isActive,
          isPending
        }) : styleProp;
        return /* @__PURE__ */ React__namespace.createElement(Link5, _extends2({}, rest, {
          "aria-current": ariaCurrent,
          className: className2,
          ref,
          style,
          to
        }), typeof children == "function" ? children({
          isActive,
          isPending
        }) : children);
      });
      NavLink.displayName = "NavLink";
      let Form = /* @__PURE__ */ React__namespace.forwardRef((props, ref) => {
        let submit = useSubmit();
        return /* @__PURE__ */ React__namespace.createElement(FormImpl, _extends2({}, props, {
          submit,
          ref
        }));
      });
      Form.displayName = "Form";
      let FormImpl = /* @__PURE__ */ React__namespace.forwardRef((_ref6, forwardedRef) => {
        let {
          reloadDocument,
          replace,
          method = defaultMethod,
          action,
          onSubmit,
          submit,
          relative,
          preventScrollReset
        } = _ref6, props = _objectWithoutPropertiesLoose(_ref6, _excluded3), formMethod = method.toLowerCase() === "get" ? "get" : "post", formAction = useFormAction(action, {
          relative
        }), submitHandler = (event) => {
          if (onSubmit && onSubmit(event), event.defaultPrevented)
            return;
          event.preventDefault();
          let submitter = event.nativeEvent.submitter, submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
          submit(submitter || event.currentTarget, {
            method: submitMethod,
            replace,
            relative,
            preventScrollReset
          });
        };
        return /* @__PURE__ */ React__namespace.createElement("form", _extends2({
          ref: forwardedRef,
          method: formMethod,
          action: formAction,
          onSubmit: reloadDocument ? onSubmit : submitHandler
        }, props));
      });
      FormImpl.displayName = "FormImpl";
      function ScrollRestoration(_ref7) {
        let {
          getKey,
          storageKey
        } = _ref7;
        return useScrollRestoration({
          getKey,
          storageKey
        }), null;
      }
      ScrollRestoration.displayName = "ScrollRestoration";
      var DataRouterHook;
      (function(DataRouterHook2) {
        DataRouterHook2.UseScrollRestoration = "useScrollRestoration", DataRouterHook2.UseSubmit = "useSubmit", DataRouterHook2.UseSubmitFetcher = "useSubmitFetcher", DataRouterHook2.UseFetcher = "useFetcher";
      })(DataRouterHook || (DataRouterHook = {}));
      var DataRouterStateHook;
      (function(DataRouterStateHook2) {
        DataRouterStateHook2.UseFetchers = "useFetchers", DataRouterStateHook2.UseScrollRestoration = "useScrollRestoration";
      })(DataRouterStateHook || (DataRouterStateHook = {}));
      function getDataRouterConsoleError(hookName) {
        return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
      }
      function useDataRouterContext(hookName) {
        let ctx = React__namespace.useContext(reactRouter.UNSAFE_DataRouterContext);
        return ctx || router.UNSAFE_invariant(!1, getDataRouterConsoleError(hookName)), ctx;
      }
      function useDataRouterState(hookName) {
        let state = React__namespace.useContext(reactRouter.UNSAFE_DataRouterStateContext);
        return state || router.UNSAFE_invariant(!1, getDataRouterConsoleError(hookName)), state;
      }
      function useLinkClickHandler(to, _temp) {
        let {
          target,
          replace: replaceProp,
          state,
          preventScrollReset,
          relative
        } = _temp === void 0 ? {} : _temp, navigate = reactRouter.useNavigate(), location = reactRouter.useLocation(), path = reactRouter.useResolvedPath(to, {
          relative
        });
        return React__namespace.useCallback((event) => {
          if (shouldProcessLinkClick(event, target)) {
            event.preventDefault();
            let replace = replaceProp !== void 0 ? replaceProp : reactRouter.createPath(location) === reactRouter.createPath(path);
            navigate(to, {
              replace,
              state,
              preventScrollReset,
              relative
            });
          }
        }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative]);
      }
      function useSearchParams4(defaultInit) {
        router.UNSAFE_warning(typeof URLSearchParams < "u", "You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params\n\nIf you're unsure how to load polyfills, we recommend you check out https://polyfill.io/v3/ which provides some recommendations about how to load polyfills only for users that need them, instead of for every user.");
        let defaultSearchParamsRef = React__namespace.useRef(createSearchParams(defaultInit)), hasSetSearchParamsRef = React__namespace.useRef(!1), location = reactRouter.useLocation(), searchParams = React__namespace.useMemo(() => (
          // Only merge in the defaults if we haven't yet called setSearchParams.
          // Once we call that we want those to take precedence, otherwise you can't
          // remove a param with setSearchParams({}) if it has an initial value
          getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current)
        ), [location.search]), navigate = reactRouter.useNavigate(), setSearchParams = React__namespace.useCallback((nextInit, navigateOptions) => {
          let newSearchParams = createSearchParams(typeof nextInit == "function" ? nextInit(searchParams) : nextInit);
          hasSetSearchParamsRef.current = !0, navigate("?" + newSearchParams, navigateOptions);
        }, [navigate, searchParams]);
        return [searchParams, setSearchParams];
      }
      function validateClientSideSubmission() {
        if (typeof document > "u")
          throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
      }
      function useSubmit() {
        let {
          router: router2
        } = useDataRouterContext(DataRouterHook.UseSubmit), {
          basename
        } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext), currentRouteId = reactRouter.UNSAFE_useRouteId();
        return React__namespace.useCallback(function(target, options) {
          options === void 0 && (options = {}), validateClientSideSubmission();
          let {
            action,
            method,
            encType,
            formData,
            body
          } = getFormSubmissionInfo(target, basename);
          router2.navigate(options.action || action, {
            preventScrollReset: options.preventScrollReset,
            formData,
            body,
            formMethod: options.method || method,
            formEncType: options.encType || encType,
            replace: options.replace,
            fromRouteId: currentRouteId
          });
        }, [router2, basename, currentRouteId]);
      }
      function useSubmitFetcher(fetcherKey, fetcherRouteId) {
        let {
          router: router$1
        } = useDataRouterContext(DataRouterHook.UseSubmitFetcher), {
          basename
        } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext);
        return React__namespace.useCallback(function(target, options) {
          options === void 0 && (options = {}), validateClientSideSubmission();
          let {
            action,
            method,
            encType,
            formData,
            body
          } = getFormSubmissionInfo(target, basename);
          fetcherRouteId == null && router.UNSAFE_invariant(!1, "No routeId available for useFetcher()"), router$1.fetch(fetcherKey, fetcherRouteId, options.action || action, {
            preventScrollReset: options.preventScrollReset,
            formData,
            body,
            formMethod: options.method || method,
            formEncType: options.encType || encType
          });
        }, [router$1, basename, fetcherKey, fetcherRouteId]);
      }
      function useFormAction(action, _temp2) {
        let {
          relative
        } = _temp2 === void 0 ? {} : _temp2, {
          basename
        } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext), routeContext = React__namespace.useContext(reactRouter.UNSAFE_RouteContext);
        routeContext || router.UNSAFE_invariant(!1, "useFormAction must be used inside a RouteContext");
        let [match] = routeContext.matches.slice(-1), path = _extends2({}, reactRouter.useResolvedPath(action || ".", {
          relative
        })), location = reactRouter.useLocation();
        if (action == null && (path.search = location.search, path.hash = location.hash, match.route.index)) {
          let params = new URLSearchParams(path.search);
          params.delete("index"), path.search = params.toString() ? "?" + params.toString() : "";
        }
        return (!action || action === ".") && match.route.index && (path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index"), basename !== "/" && (path.pathname = path.pathname === "/" ? basename : router.joinPaths([basename, path.pathname])), reactRouter.createPath(path);
      }
      function createFetcherForm(fetcherKey, routeId) {
        let FetcherForm = /* @__PURE__ */ React__namespace.forwardRef((props, ref) => {
          let submit = useSubmitFetcher(fetcherKey, routeId);
          return /* @__PURE__ */ React__namespace.createElement(FormImpl, _extends2({}, props, {
            ref,
            submit
          }));
        });
        return FetcherForm.displayName = "fetcher.Form", FetcherForm;
      }
      let fetcherId = 0;
      function useFetcher() {
        var _route$matches;
        let {
          router: router$1
        } = useDataRouterContext(DataRouterHook.UseFetcher), route = React__namespace.useContext(reactRouter.UNSAFE_RouteContext);
        route || router.UNSAFE_invariant(!1, "useFetcher must be used inside a RouteContext");
        let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;
        routeId == null && router.UNSAFE_invariant(!1, 'useFetcher can only be used on routes that contain a unique "id"');
        let [fetcherKey] = React__namespace.useState(() => String(++fetcherId)), [Form2] = React__namespace.useState(() => (routeId || router.UNSAFE_invariant(!1, "No routeId available for fetcher.Form()"), createFetcherForm(fetcherKey, routeId))), [load] = React__namespace.useState(() => (href) => {
          router$1 || router.UNSAFE_invariant(!1, "No router available for fetcher.load()"), routeId || router.UNSAFE_invariant(!1, "No routeId available for fetcher.load()"), router$1.fetch(fetcherKey, routeId, href);
        }), submit = useSubmitFetcher(fetcherKey, routeId), fetcher = router$1.getFetcher(fetcherKey), fetcherWithComponents = React__namespace.useMemo(() => _extends2({
          Form: Form2,
          submit,
          load
        }, fetcher), [fetcher, Form2, submit, load]);
        return React__namespace.useEffect(() => () => {
          if (!router$1) {
            console.warn("No router available to clean up from useFetcher()");
            return;
          }
          router$1.deleteFetcher(fetcherKey);
        }, [router$1, fetcherKey]), fetcherWithComponents;
      }
      function useFetchers() {
        return [...useDataRouterState(DataRouterStateHook.UseFetchers).fetchers.values()];
      }
      let SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions", savedScrollPositions = {};
      function useScrollRestoration(_temp3) {
        let {
          getKey,
          storageKey
        } = _temp3 === void 0 ? {} : _temp3, {
          router: router$1
        } = useDataRouterContext(DataRouterHook.UseScrollRestoration), {
          restoreScrollPosition,
          preventScrollReset
        } = useDataRouterState(DataRouterStateHook.UseScrollRestoration), {
          basename
        } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext), location = reactRouter.useLocation(), matches = reactRouter.useMatches(), navigation = reactRouter.useNavigation();
        React__namespace.useEffect(() => (window.history.scrollRestoration = "manual", () => {
          window.history.scrollRestoration = "auto";
        }), []), usePageHide(React__namespace.useCallback(() => {
          if (navigation.state === "idle") {
            let key = (getKey ? getKey(location, matches) : null) || location.key;
            savedScrollPositions[key] = window.scrollY;
          }
          sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions)), window.history.scrollRestoration = "auto";
        }, [storageKey, getKey, navigation.state, location, matches])), typeof document < "u" && (React__namespace.useLayoutEffect(() => {
          try {
            let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
            sessionPositions && (savedScrollPositions = JSON.parse(sessionPositions));
          } catch {
          }
        }, [storageKey]), React__namespace.useLayoutEffect(() => {
          let getKeyWithoutBasename = getKey && basename !== "/" ? (location2, matches2) => getKey(
            // Strip the basename to match useLocation()
            _extends2({}, location2, {
              pathname: router.stripBasename(location2.pathname, basename) || location2.pathname
            }),
            matches2
          ) : getKey, disableScrollRestoration = router$1 == null ? void 0 : router$1.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
          return () => disableScrollRestoration && disableScrollRestoration();
        }, [router$1, basename, getKey]), React__namespace.useLayoutEffect(() => {
          if (restoreScrollPosition !== !1) {
            if (typeof restoreScrollPosition == "number") {
              window.scrollTo(0, restoreScrollPosition);
              return;
            }
            if (location.hash) {
              let el = document.getElementById(location.hash.slice(1));
              if (el) {
                el.scrollIntoView();
                return;
              }
            }
            preventScrollReset !== !0 && window.scrollTo(0, 0);
          }
        }, [location, restoreScrollPosition, preventScrollReset]));
      }
      function useBeforeUnload(callback, options) {
        let {
          capture
        } = options || {};
        React__namespace.useEffect(() => {
          let opts = capture != null ? {
            capture
          } : void 0;
          return window.addEventListener("beforeunload", callback, opts), () => {
            window.removeEventListener("beforeunload", callback, opts);
          };
        }, [callback, capture]);
      }
      function usePageHide(callback, options) {
        let {
          capture
        } = options || {};
        React__namespace.useEffect(() => {
          let opts = capture != null ? {
            capture
          } : void 0;
          return window.addEventListener("pagehide", callback, opts), () => {
            window.removeEventListener("pagehide", callback, opts);
          };
        }, [callback, capture]);
      }
      function usePrompt(_ref8) {
        let {
          when,
          message: message2
        } = _ref8, blocker = reactRouter.unstable_useBlocker(when);
        React__namespace.useEffect(() => {
          blocker.state === "blocked" && !when && blocker.reset();
        }, [blocker, when]), React__namespace.useEffect(() => {
          blocker.state === "blocked" && (window.confirm(message2) ? setTimeout(blocker.proceed, 0) : blocker.reset());
        }, [blocker, message2]);
      }
      Object.defineProperty(exports2, "AbortedDeferredError", {
        enumerable: !0,
        get: function() {
          return reactRouter.AbortedDeferredError;
        }
      }), Object.defineProperty(exports2, "Await", {
        enumerable: !0,
        get: function() {
          return reactRouter.Await;
        }
      }), Object.defineProperty(exports2, "MemoryRouter", {
        enumerable: !0,
        get: function() {
          return reactRouter.MemoryRouter;
        }
      }), Object.defineProperty(exports2, "Navigate", {
        enumerable: !0,
        get: function() {
          return reactRouter.Navigate;
        }
      }), Object.defineProperty(exports2, "NavigationType", {
        enumerable: !0,
        get: function() {
          return reactRouter.NavigationType;
        }
      }), Object.defineProperty(exports2, "Outlet", {
        enumerable: !0,
        get: function() {
          return reactRouter.Outlet;
        }
      }), Object.defineProperty(exports2, "Route", {
        enumerable: !0,
        get: function() {
          return reactRouter.Route;
        }
      }), Object.defineProperty(exports2, "Router", {
        enumerable: !0,
        get: function() {
          return reactRouter.Router;
        }
      }), Object.defineProperty(exports2, "RouterProvider", {
        enumerable: !0,
        get: function() {
          return reactRouter.RouterProvider;
        }
      }), Object.defineProperty(exports2, "Routes", {
        enumerable: !0,
        get: function() {
          return reactRouter.Routes;
        }
      }), Object.defineProperty(exports2, "UNSAFE_DataRouterContext", {
        enumerable: !0,
        get: function() {
          return reactRouter.UNSAFE_DataRouterContext;
        }
      }), Object.defineProperty(exports2, "UNSAFE_DataRouterStateContext", {
        enumerable: !0,
        get: function() {
          return reactRouter.UNSAFE_DataRouterStateContext;
        }
      }), Object.defineProperty(exports2, "UNSAFE_LocationContext", {
        enumerable: !0,
        get: function() {
          return reactRouter.UNSAFE_LocationContext;
        }
      }), Object.defineProperty(exports2, "UNSAFE_NavigationContext", {
        enumerable: !0,
        get: function() {
          return reactRouter.UNSAFE_NavigationContext;
        }
      }), Object.defineProperty(exports2, "UNSAFE_RouteContext", {
        enumerable: !0,
        get: function() {
          return reactRouter.UNSAFE_RouteContext;
        }
      }), Object.defineProperty(exports2, "UNSAFE_useRouteId", {
        enumerable: !0,
        get: function() {
          return reactRouter.UNSAFE_useRouteId;
        }
      }), Object.defineProperty(exports2, "createMemoryRouter", {
        enumerable: !0,
        get: function() {
          return reactRouter.createMemoryRouter;
        }
      }), Object.defineProperty(exports2, "createPath", {
        enumerable: !0,
        get: function() {
          return reactRouter.createPath;
        }
      }), Object.defineProperty(exports2, "createRoutesFromChildren", {
        enumerable: !0,
        get: function() {
          return reactRouter.createRoutesFromChildren;
        }
      }), Object.defineProperty(exports2, "createRoutesFromElements", {
        enumerable: !0,
        get: function() {
          return reactRouter.createRoutesFromElements;
        }
      }), Object.defineProperty(exports2, "defer", {
        enumerable: !0,
        get: function() {
          return reactRouter.defer;
        }
      }), Object.defineProperty(exports2, "generatePath", {
        enumerable: !0,
        get: function() {
          return reactRouter.generatePath;
        }
      }), Object.defineProperty(exports2, "isRouteErrorResponse", {
        enumerable: !0,
        get: function() {
          return reactRouter.isRouteErrorResponse;
        }
      }), Object.defineProperty(exports2, "json", {
        enumerable: !0,
        get: function() {
          return reactRouter.json;
        }
      }), Object.defineProperty(exports2, "matchPath", {
        enumerable: !0,
        get: function() {
          return reactRouter.matchPath;
        }
      }), Object.defineProperty(exports2, "matchRoutes", {
        enumerable: !0,
        get: function() {
          return reactRouter.matchRoutes;
        }
      }), Object.defineProperty(exports2, "parsePath", {
        enumerable: !0,
        get: function() {
          return reactRouter.parsePath;
        }
      }), Object.defineProperty(exports2, "redirect", {
        enumerable: !0,
        get: function() {
          return reactRouter.redirect;
        }
      }), Object.defineProperty(exports2, "renderMatches", {
        enumerable: !0,
        get: function() {
          return reactRouter.renderMatches;
        }
      }), Object.defineProperty(exports2, "resolvePath", {
        enumerable: !0,
        get: function() {
          return reactRouter.resolvePath;
        }
      }), Object.defineProperty(exports2, "unstable_useBlocker", {
        enumerable: !0,
        get: function() {
          return reactRouter.unstable_useBlocker;
        }
      }), Object.defineProperty(exports2, "useActionData", {
        enumerable: !0,
        get: function() {
          return reactRouter.useActionData;
        }
      }), Object.defineProperty(exports2, "useAsyncError", {
        enumerable: !0,
        get: function() {
          return reactRouter.useAsyncError;
        }
      }), Object.defineProperty(exports2, "useAsyncValue", {
        enumerable: !0,
        get: function() {
          return reactRouter.useAsyncValue;
        }
      }), Object.defineProperty(exports2, "useHref", {
        enumerable: !0,
        get: function() {
          return reactRouter.useHref;
        }
      }), Object.defineProperty(exports2, "useInRouterContext", {
        enumerable: !0,
        get: function() {
          return reactRouter.useInRouterContext;
        }
      }), Object.defineProperty(exports2, "useLoaderData", {
        enumerable: !0,
        get: function() {
          return reactRouter.useLoaderData;
        }
      }), Object.defineProperty(exports2, "useLocation", {
        enumerable: !0,
        get: function() {
          return reactRouter.useLocation;
        }
      }), Object.defineProperty(exports2, "useMatch", {
        enumerable: !0,
        get: function() {
          return reactRouter.useMatch;
        }
      }), Object.defineProperty(exports2, "useMatches", {
        enumerable: !0,
        get: function() {
          return reactRouter.useMatches;
        }
      }), Object.defineProperty(exports2, "useNavigate", {
        enumerable: !0,
        get: function() {
          return reactRouter.useNavigate;
        }
      }), Object.defineProperty(exports2, "useNavigation", {
        enumerable: !0,
        get: function() {
          return reactRouter.useNavigation;
        }
      }), Object.defineProperty(exports2, "useNavigationType", {
        enumerable: !0,
        get: function() {
          return reactRouter.useNavigationType;
        }
      }), Object.defineProperty(exports2, "useOutlet", {
        enumerable: !0,
        get: function() {
          return reactRouter.useOutlet;
        }
      }), Object.defineProperty(exports2, "useOutletContext", {
        enumerable: !0,
        get: function() {
          return reactRouter.useOutletContext;
        }
      }), Object.defineProperty(exports2, "useParams", {
        enumerable: !0,
        get: function() {
          return reactRouter.useParams;
        }
      }), Object.defineProperty(exports2, "useResolvedPath", {
        enumerable: !0,
        get: function() {
          return reactRouter.useResolvedPath;
        }
      }), Object.defineProperty(exports2, "useRevalidator", {
        enumerable: !0,
        get: function() {
          return reactRouter.useRevalidator;
        }
      }), Object.defineProperty(exports2, "useRouteError", {
        enumerable: !0,
        get: function() {
          return reactRouter.useRouteError;
        }
      }), Object.defineProperty(exports2, "useRouteLoaderData", {
        enumerable: !0,
        get: function() {
          return reactRouter.useRouteLoaderData;
        }
      }), Object.defineProperty(exports2, "useRoutes", {
        enumerable: !0,
        get: function() {
          return reactRouter.useRoutes;
        }
      }), exports2.BrowserRouter = BrowserRouter, exports2.Form = Form, exports2.HashRouter = HashRouter, exports2.Link = Link5, exports2.NavLink = NavLink, exports2.ScrollRestoration = ScrollRestoration, exports2.UNSAFE_useScrollRestoration = useScrollRestoration, exports2.createBrowserRouter = createBrowserRouter, exports2.createHashRouter = createHashRouter, exports2.createSearchParams = createSearchParams, exports2.unstable_HistoryRouter = HistoryRouter, exports2.unstable_usePrompt = usePrompt, exports2.useBeforeUnload = useBeforeUnload, exports2.useFetcher = useFetcher, exports2.useFetchers = useFetchers, exports2.useFormAction = useFormAction, exports2.useLinkClickHandler = useLinkClickHandler, exports2.useSearchParams = useSearchParams4, exports2.useSubmit = useSubmit, Object.defineProperty(exports2, "__esModule", { value: !0 });
    });
  }
});

// ../../../node_modules/react-router-dom/dist/main.js
var require_main2 = __commonJS({
  "../../../node_modules/react-router-dom/dist/main.js"(exports, module2) {
    "use strict";
    module2.exports = require_react_router_dom_development();
  }
});

// ../../../node_modules/@remix-run/react/dist/_virtual/_rollupPluginBabelHelpers.js
var require_rollupPluginBabelHelpers = __commonJS({
  "../../../node_modules/@remix-run/react/dist/_virtual/_rollupPluginBabelHelpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    function _extends2() {
      return _extends2 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i13 = 1; i13 < arguments.length; i13++) {
          var source = arguments[i13];
          for (var key in source)
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
        return target;
      }, _extends2.apply(this, arguments);
    }
    exports.extends = _extends2;
  }
});

// ../../../node_modules/@remix-run/react/dist/errorBoundaries.js
var require_errorBoundaries = __commonJS({
  "../../../node_modules/@remix-run/react/dist/errorBoundaries.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var React12 = require_react(), reactRouterDom = require_main2();
    function _interopDefaultLegacy(e24) {
      return e24 && typeof e24 == "object" && "default" in e24 ? e24 : { default: e24 };
    }
    var React__default2 = /* @__PURE__ */ _interopDefaultLegacy(React12), RemixErrorBoundary = class extends React__default2.default.Component {
      constructor(props) {
        super(props), this.state = {
          error: props.error || null,
          location: props.location
        };
      }
      static getDerivedStateFromError(error2) {
        return {
          error: error2
        };
      }
      static getDerivedStateFromProps(props, state) {
        return state.location !== props.location ? {
          error: props.error || null,
          location: props.location
        } : {
          error: props.error || state.error,
          location: state.location
        };
      }
      render() {
        return this.state.error ? /* @__PURE__ */ React__default2.default.createElement(this.props.component, {
          error: this.state.error
        }) : this.props.children;
      }
    };
    function RemixRootDefaultErrorBoundary({
      error: error2
    }) {
      return React__default2.default.useEffect(() => {
        console.error(error2);
      }, [error2]), /* @__PURE__ */ React__default2.default.createElement("html", {
        lang: "en"
      }, /* @__PURE__ */ React__default2.default.createElement("head", null, /* @__PURE__ */ React__default2.default.createElement("meta", {
        charSet: "utf-8"
      }), /* @__PURE__ */ React__default2.default.createElement("meta", {
        name: "viewport",
        content: "width=device-width, initial-scale=1, viewport-fit=cover"
      }), /* @__PURE__ */ React__default2.default.createElement("title", null, "Application Error!")), /* @__PURE__ */ React__default2.default.createElement("body", null, /* @__PURE__ */ React__default2.default.createElement("main", {
        style: {
          fontFamily: "system-ui, sans-serif",
          padding: "2rem"
        }
      }, /* @__PURE__ */ React__default2.default.createElement("h1", {
        style: {
          fontSize: "24px"
        }
      }, "Application Error"), error2.stack ? /* @__PURE__ */ React__default2.default.createElement("pre", {
        style: {
          padding: "2rem",
          background: "hsla(10, 50%, 50%, 0.1)",
          color: "red",
          overflow: "auto"
        }
      }, error2.stack) : null), /* @__PURE__ */ React__default2.default.createElement("script", {
        dangerouslySetInnerHTML: {
          __html: `
              console.log(
                "\u{1F4BF} Hey developer\u{1F44B}. You can provide a way better UX than this when your app throws errors. Check out https://remix.run/guides/errors for more information."
              );
            `
        }
      })));
    }
    function V2_RemixRootDefaultErrorBoundary() {
      let error2 = reactRouterDom.useRouteError();
      if (reactRouterDom.isRouteErrorResponse(error2))
        return /* @__PURE__ */ React__default2.default.createElement(RemixRootDefaultCatchBoundaryImpl, {
          caught: error2
        });
      if (error2 instanceof Error)
        return /* @__PURE__ */ React__default2.default.createElement(RemixRootDefaultErrorBoundary, {
          error: error2
        });
      {
        let errorString = error2 == null ? "Unknown Error" : typeof error2 == "object" && "toString" in error2 ? error2.toString() : JSON.stringify(error2);
        return /* @__PURE__ */ React__default2.default.createElement(RemixRootDefaultErrorBoundary, {
          error: new Error(errorString)
        });
      }
    }
    var RemixCatchContext = /* @__PURE__ */ React__default2.default.createContext(void 0);
    function useCatch() {
      return React12.useContext(RemixCatchContext);
    }
    function RemixCatchBoundary({
      catch: catchVal,
      component: Component,
      children
    }) {
      return catchVal ? /* @__PURE__ */ React__default2.default.createElement(RemixCatchContext.Provider, {
        value: catchVal
      }, /* @__PURE__ */ React__default2.default.createElement(Component, null)) : /* @__PURE__ */ React__default2.default.createElement(React__default2.default.Fragment, null, children);
    }
    function RemixRootDefaultCatchBoundary() {
      let caught = useCatch();
      return /* @__PURE__ */ React__default2.default.createElement(RemixRootDefaultCatchBoundaryImpl, {
        caught
      });
    }
    function RemixRootDefaultCatchBoundaryImpl({
      caught
    }) {
      return /* @__PURE__ */ React__default2.default.createElement("html", {
        lang: "en"
      }, /* @__PURE__ */ React__default2.default.createElement("head", null, /* @__PURE__ */ React__default2.default.createElement("meta", {
        charSet: "utf-8"
      }), /* @__PURE__ */ React__default2.default.createElement("meta", {
        name: "viewport",
        content: "width=device-width, initial-scale=1, viewport-fit=cover"
      }), /* @__PURE__ */ React__default2.default.createElement("title", null, "Unhandled Thrown Response!")), /* @__PURE__ */ React__default2.default.createElement("body", null, /* @__PURE__ */ React__default2.default.createElement("h1", {
        style: {
          fontFamily: "system-ui, sans-serif",
          padding: "2rem"
        }
      }, caught.status, " ", caught.statusText), /* @__PURE__ */ React__default2.default.createElement("script", {
        dangerouslySetInnerHTML: {
          __html: `
              console.log(
                "\u{1F4BF} Hey developer\u{1F44B}. You can provide a way better UX than this when your app throws 404s (and other responses). Check out https://remix.run/guides/not-found for more information."
              );
            `
        }
      })));
    }
    exports.RemixCatchBoundary = RemixCatchBoundary;
    exports.RemixErrorBoundary = RemixErrorBoundary;
    exports.RemixRootDefaultCatchBoundary = RemixRootDefaultCatchBoundary;
    exports.RemixRootDefaultErrorBoundary = RemixRootDefaultErrorBoundary;
    exports.V2_RemixRootDefaultErrorBoundary = V2_RemixRootDefaultErrorBoundary;
    exports.useCatch = useCatch;
  }
});

// ../../../node_modules/@remix-run/react/dist/invariant.js
var require_invariant2 = __commonJS({
  "../../../node_modules/@remix-run/react/dist/invariant.js"(exports, module2) {
    "use strict";
    function invariant2(value, message2) {
      if (value === !1 || value === null || typeof value > "u")
        throw new Error(message2);
    }
    module2.exports = invariant2;
  }
});

// ../../../node_modules/@remix-run/react/dist/routeModules.js
var require_routeModules = __commonJS({
  "../../../node_modules/@remix-run/react/dist/routeModules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    function _interopNamespace(e24) {
      if (e24 && e24.__esModule)
        return e24;
      var n = /* @__PURE__ */ Object.create(null);
      return e24 && Object.keys(e24).forEach(function(k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e24, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: !0,
            get: function() {
              return e24[k];
            }
          });
        }
      }), n.default = e24, Object.freeze(n);
    }
    async function loadRouteModule(route, routeModulesCache) {
      if (route.id in routeModulesCache)
        return routeModulesCache[route.id];
      try {
        let routeModule = await function(t17) {
          return Promise.resolve().then(function() {
            return /* @__PURE__ */ _interopNamespace(require(t17));
          });
        }(
          /* webpackIgnore: true */
          route.module
        );
        return routeModulesCache[route.id] = routeModule, routeModule;
      } catch {
        return window.location.reload(), new Promise(() => {
        });
      }
    }
    exports.loadRouteModule = loadRouteModule;
  }
});

// ../../../node_modules/@remix-run/react/dist/links.js
var require_links = __commonJS({
  "../../../node_modules/@remix-run/react/dist/links.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var reactRouterDom = require_main2(), routeModules = require_routeModules();
    function getLinksForMatches(matches, routeModules2, manifest) {
      let descriptors = matches.map((match) => {
        var _module$links;
        let module3 = routeModules2[match.route.id];
        return ((_module$links = module3.links) === null || _module$links === void 0 ? void 0 : _module$links.call(module3)) || [];
      }).flat(1), preloads = getCurrentPageModulePreloadHrefs(matches, manifest);
      return dedupe(descriptors, preloads);
    }
    async function prefetchStyleLinks(routeModule) {
      if (!routeModule.links)
        return;
      let descriptors = routeModule.links();
      if (!descriptors)
        return;
      let styleLinks = [];
      for (let descriptor of descriptors)
        !isPageLinkDescriptor(descriptor) && descriptor.rel === "stylesheet" && styleLinks.push({
          ...descriptor,
          rel: "preload",
          as: "style"
        });
      let matchingLinks = styleLinks.filter((link) => !link.media || window.matchMedia(link.media).matches);
      await Promise.all(matchingLinks.map(prefetchStyleLink));
    }
    async function prefetchStyleLink(descriptor) {
      return new Promise((resolve) => {
        let link = document.createElement("link");
        Object.assign(link, descriptor);
        function removeLink() {
          document.head.contains(link) && document.head.removeChild(link);
        }
        link.onload = () => {
          removeLink(), resolve();
        }, link.onerror = () => {
          removeLink(), resolve();
        }, document.head.appendChild(link);
      });
    }
    function isPageLinkDescriptor(object) {
      return object != null && typeof object.page == "string";
    }
    function isHtmlLinkDescriptor(object) {
      return object == null ? !1 : object.href == null ? object.rel === "preload" && (typeof object.imageSrcSet == "string" || typeof object.imagesrcset == "string") && (typeof object.imageSizes == "string" || typeof object.imagesizes == "string") : typeof object.rel == "string" && typeof object.href == "string";
    }
    async function getStylesheetPrefetchLinks(matches, manifest, routeModules$1) {
      return (await Promise.all(matches.map(async (match) => {
        let mod = await routeModules.loadRouteModule(manifest.routes[match.route.id], routeModules$1);
        return mod.links ? mod.links() : [];
      }))).flat(1).filter(isHtmlLinkDescriptor).filter((link) => link.rel === "stylesheet" || link.rel === "preload").map((link) => link.rel === "preload" ? {
        ...link,
        rel: "prefetch"
      } : {
        ...link,
        rel: "prefetch",
        as: "style"
      });
    }
    function getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode) {
      let path = parsePathPatch(page), isNew = (match, index2) => currentMatches[index2] ? match.route.id !== currentMatches[index2].route.id : !0, matchPathChanged = (match, index2) => {
        var _currentMatches$index;
        return (
          // param change, /users/123 -> /users/456
          currentMatches[index2].pathname !== match.pathname || // splat param changed, which is not present in match.path
          // e.g. /files/images/avatar.jpg -> files/finances.xls
          ((_currentMatches$index = currentMatches[index2].route.path) === null || _currentMatches$index === void 0 ? void 0 : _currentMatches$index.endsWith("*")) && currentMatches[index2].params["*"] !== match.params["*"]
        );
      };
      return mode === "data" && location.search !== path.search ? (
        // this is really similar to stuff in transition.ts, maybe somebody smarter
        // than me (or in less of a hurry) can share some of it. You're the best.
        nextMatches.filter((match, index2) => {
          if (!manifest.routes[match.route.id].hasLoader)
            return !1;
          if (isNew(match, index2) || matchPathChanged(match, index2))
            return !0;
          if (match.route.shouldRevalidate) {
            var _currentMatches$;
            let routeChoice = match.route.shouldRevalidate({
              currentUrl: new URL(location.pathname + location.search + location.hash, window.origin),
              currentParams: ((_currentMatches$ = currentMatches[0]) === null || _currentMatches$ === void 0 ? void 0 : _currentMatches$.params) || {},
              nextUrl: new URL(page, window.origin),
              nextParams: match.params,
              defaultShouldRevalidate: !0
            });
            if (typeof routeChoice == "boolean")
              return routeChoice;
          }
          return !0;
        })
      ) : nextMatches.filter((match, index2) => {
        let manifestRoute = manifest.routes[match.route.id];
        return (mode === "assets" || manifestRoute.hasLoader) && (isNew(match, index2) || matchPathChanged(match, index2));
      });
    }
    function getDataLinkHrefs(page, matches, manifest) {
      let path = parsePathPatch(page);
      return dedupeHrefs(matches.filter((match) => manifest.routes[match.route.id].hasLoader).map((match) => {
        let {
          pathname,
          search
        } = path, searchParams = new URLSearchParams(search);
        return searchParams.set("_data", match.route.id), `${pathname}?${searchParams}`;
      }));
    }
    function getModuleLinkHrefs(matches, manifestPatch) {
      return dedupeHrefs(matches.map((match) => {
        let route = manifestPatch.routes[match.route.id], hrefs = [route.module];
        return route.imports && (hrefs = hrefs.concat(route.imports)), hrefs;
      }).flat(1));
    }
    function getCurrentPageModulePreloadHrefs(matches, manifest) {
      return dedupeHrefs(matches.map((match) => {
        let route = manifest.routes[match.route.id], hrefs = [route.module];
        return route.imports && (hrefs = hrefs.concat(route.imports)), hrefs;
      }).flat(1));
    }
    function dedupeHrefs(hrefs) {
      return [...new Set(hrefs)];
    }
    function dedupe(descriptors, preloads) {
      let set = /* @__PURE__ */ new Set(), preloadsSet = new Set(preloads);
      return descriptors.reduce((deduped, descriptor) => {
        if (!isPageLinkDescriptor(descriptor) && descriptor.as === "script" && descriptor.href && preloadsSet.has(descriptor.href))
          return deduped;
        let str = JSON.stringify(descriptor);
        return set.has(str) || (set.add(str), deduped.push(descriptor)), deduped;
      }, []);
    }
    function parsePathPatch(href) {
      let path = reactRouterDom.parsePath(href);
      return path.search === void 0 && (path.search = ""), path;
    }
    exports.dedupe = dedupe;
    exports.getDataLinkHrefs = getDataLinkHrefs;
    exports.getLinksForMatches = getLinksForMatches;
    exports.getModuleLinkHrefs = getModuleLinkHrefs;
    exports.getNewMatchesForLinks = getNewMatchesForLinks;
    exports.getStylesheetPrefetchLinks = getStylesheetPrefetchLinks;
    exports.isHtmlLinkDescriptor = isHtmlLinkDescriptor;
    exports.isPageLinkDescriptor = isPageLinkDescriptor;
    exports.prefetchStyleLinks = prefetchStyleLinks;
  }
});

// ../../../node_modules/@remix-run/react/dist/markup.js
var require_markup2 = __commonJS({
  "../../../node_modules/@remix-run/react/dist/markup.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var ESCAPE_LOOKUP = {
      "&": "\\u0026",
      ">": "\\u003e",
      "<": "\\u003c",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    }, ESCAPE_REGEX = /[&><\u2028\u2029]/g;
    function escapeHtml(html) {
      return html.replace(ESCAPE_REGEX, (match) => ESCAPE_LOOKUP[match]);
    }
    function createHtml(html) {
      return {
        __html: html
      };
    }
    exports.createHtml = createHtml;
    exports.escapeHtml = escapeHtml;
  }
});

// ../../../node_modules/@remix-run/react/dist/transition.js
var require_transition = __commonJS({
  "../../../node_modules/@remix-run/react/dist/transition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var IDLE_TRANSITION = {
      state: "idle",
      submission: void 0,
      location: void 0,
      type: "idle"
    }, IDLE_FETCHER = {
      state: "idle",
      type: "init",
      data: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0,
      submission: void 0
    };
    exports.IDLE_FETCHER = IDLE_FETCHER;
    exports.IDLE_TRANSITION = IDLE_TRANSITION;
  }
});

// ../../../node_modules/@remix-run/react/dist/warnings.js
var require_warnings2 = __commonJS({
  "../../../node_modules/@remix-run/react/dist/warnings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var alreadyWarned = {};
    function logDeprecationOnce(message2, key = message2) {
      alreadyWarned[key] || (alreadyWarned[key] = !0, console.warn(message2));
    }
    exports.logDeprecationOnce = logDeprecationOnce;
  }
});

// ../../../node_modules/@remix-run/react/dist/components.js
var require_components = __commonJS({
  "../../../node_modules/@remix-run/react/dist/components.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var _rollupPluginBabelHelpers = require_rollupPluginBabelHelpers(), React12 = require_react(), reactRouterDom = require_main2(), errorBoundaries = require_errorBoundaries(), invariant2 = require_invariant2(), links2 = require_links(), markup = require_markup2(), transition = require_transition(), warnings = require_warnings2();
    function _interopNamespace(e24) {
      if (e24 && e24.__esModule)
        return e24;
      var n = /* @__PURE__ */ Object.create(null);
      return e24 && Object.keys(e24).forEach(function(k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e24, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: !0,
            get: function() {
              return e24[k];
            }
          });
        }
      }), n.default = e24, Object.freeze(n);
    }
    var React__namespace = /* @__PURE__ */ _interopNamespace(React12);
    function useDataRouterContext() {
      let context = React__namespace.useContext(reactRouterDom.UNSAFE_DataRouterContext);
      return invariant2(context, "You must render this element inside a <DataRouterContext.Provider> element"), context;
    }
    function useDataRouterStateContext() {
      let context = React__namespace.useContext(reactRouterDom.UNSAFE_DataRouterStateContext);
      return invariant2(context, "You must render this element inside a <DataRouterStateContext.Provider> element"), context;
    }
    var RemixContext = /* @__PURE__ */ React__namespace.createContext(void 0);
    RemixContext.displayName = "Remix";
    function useRemixContext() {
      let context = React__namespace.useContext(RemixContext);
      return invariant2(context, "You must render this element inside a <Remix> element"), context;
    }
    function RemixRoute({
      id: id3
    }) {
      let {
        routeModules,
        future: future2
      } = useRemixContext();
      invariant2(routeModules, `Cannot initialize 'routeModules'. This normally occurs when you have server code in your client modules.
Check this link for more details:
https://remix.run/pages/gotchas#server-code-in-client-bundles`);
      let {
        default: Component,
        ErrorBoundary,
        CatchBoundary
      } = routeModules[id3];
      return !Component && (ErrorBoundary || !future2.v2_errorBoundary && CatchBoundary) && (Component = reactRouterDom.Outlet), invariant2(Component, `Route "${id3}" has no component! Please go add a \`default\` export in the route module file.
If you were trying to navigate or submit to a resource route, use \`<a>\` instead of \`<Link>\` or \`<Form reloadDocument>\`.`), /* @__PURE__ */ React__namespace.createElement(Component, null);
    }
    function RemixRouteError({
      id: id3
    }) {
      let {
        future: future2,
        routeModules
      } = useRemixContext();
      invariant2(routeModules, `Cannot initialize 'routeModules'. This normally occurs when you have server code in your client modules.
Check this link for more details:
https://remix.run/pages/gotchas#server-code-in-client-bundles`);
      let error2 = reactRouterDom.useRouteError(), {
        CatchBoundary,
        ErrorBoundary
      } = routeModules[id3];
      if (future2.v2_errorBoundary) {
        if (id3 === "root" && (ErrorBoundary || (ErrorBoundary = errorBoundaries.V2_RemixRootDefaultErrorBoundary)), ErrorBoundary)
          return /* @__PURE__ */ React__namespace.createElement(ErrorBoundary, null);
        throw error2;
      }
      if (id3 === "root" && (CatchBoundary || (CatchBoundary = errorBoundaries.RemixRootDefaultCatchBoundary), ErrorBoundary || (ErrorBoundary = errorBoundaries.RemixRootDefaultErrorBoundary)), reactRouterDom.isRouteErrorResponse(error2)) {
        let tError = error2;
        if (tError != null && tError.error && tError.status !== 404 && ErrorBoundary)
          return /* @__PURE__ */ React__namespace.createElement(ErrorBoundary, {
            error: tError.error
          });
        if (CatchBoundary)
          return /* @__PURE__ */ React__namespace.createElement(errorBoundaries.RemixCatchBoundary, {
            catch: error2,
            component: CatchBoundary
          });
      }
      if (error2 instanceof Error && ErrorBoundary)
        return /* @__PURE__ */ React__namespace.createElement(ErrorBoundary, {
          error: error2
        });
      throw error2;
    }
    function usePrefetchBehavior(prefetch, theirElementProps) {
      let [maybePrefetch, setMaybePrefetch] = React__namespace.useState(!1), [shouldPrefetch, setShouldPrefetch] = React__namespace.useState(!1), {
        onFocus,
        onBlur,
        onMouseEnter,
        onMouseLeave,
        onTouchStart
      } = theirElementProps, ref = React__namespace.useRef(null);
      React__namespace.useEffect(() => {
        if (prefetch === "render" && setShouldPrefetch(!0), prefetch === "viewport") {
          let callback = (entries) => {
            entries.forEach((entry2) => {
              setShouldPrefetch(entry2.isIntersecting);
            });
          }, observer = new IntersectionObserver(callback, {
            threshold: 0.5
          });
          return ref.current && observer.observe(ref.current), () => {
            observer.disconnect();
          };
        }
      }, [prefetch]);
      let setIntent = () => {
        prefetch === "intent" && setMaybePrefetch(!0);
      }, cancelIntent = () => {
        prefetch === "intent" && (setMaybePrefetch(!1), setShouldPrefetch(!1));
      };
      return React__namespace.useEffect(() => {
        if (maybePrefetch) {
          let id3 = setTimeout(() => {
            setShouldPrefetch(!0);
          }, 100);
          return () => {
            clearTimeout(id3);
          };
        }
      }, [maybePrefetch]), [shouldPrefetch, ref, {
        onFocus: composeEventHandlers(onFocus, setIntent),
        onBlur: composeEventHandlers(onBlur, cancelIntent),
        onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),
        onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),
        onTouchStart: composeEventHandlers(onTouchStart, setIntent)
      }];
    }
    var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i, NavLink = /* @__PURE__ */ React__namespace.forwardRef(({
      to,
      prefetch = "none",
      ...props
    }, forwardedRef) => {
      let isAbsolute = typeof to == "string" && ABSOLUTE_URL_REGEX.test(to), href = reactRouterDom.useHref(to), [shouldPrefetch, ref, prefetchHandlers] = usePrefetchBehavior(prefetch, props);
      return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.NavLink, _rollupPluginBabelHelpers.extends({}, props, prefetchHandlers, {
        ref: mergeRefs(forwardedRef, ref),
        to
      })), shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React__namespace.createElement(PrefetchPageLinks, {
        page: href
      }) : null);
    });
    NavLink.displayName = "NavLink";
    var Link5 = /* @__PURE__ */ React__namespace.forwardRef(({
      to,
      prefetch = "none",
      ...props
    }, forwardedRef) => {
      let isAbsolute = typeof to == "string" && ABSOLUTE_URL_REGEX.test(to), href = reactRouterDom.useHref(to), [shouldPrefetch, ref, prefetchHandlers] = usePrefetchBehavior(prefetch, props);
      return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.Link, _rollupPluginBabelHelpers.extends({}, props, prefetchHandlers, {
        ref: mergeRefs(forwardedRef, ref),
        to
      })), shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React__namespace.createElement(PrefetchPageLinks, {
        page: href
      }) : null);
    });
    Link5.displayName = "Link";
    function composeEventHandlers(theirHandler, ourHandler) {
      return (event) => {
        theirHandler && theirHandler(event), event.defaultPrevented || ourHandler(event);
      };
    }
    var linksWarning = "\u26A0\uFE0F REMIX FUTURE CHANGE: The behavior of links `imagesizes` and `imagesrcset` will be changing in v2. Only the React camel case versions will be valid. Please change to `imageSizes` and `imageSrcSet`. For instructions on making this change see https://remix.run/docs/en/v1.15.0/pages/v2#links-imagesizes-and-imagesrcset", useTransitionWarning = "\u26A0\uFE0F REMIX FUTURE CHANGE: `useTransition` will be removed in v2 in favor of `useNavigation`. You can prepare for this change at your convenience by updating to `useNavigation`. For instructions on making this change see https://remix.run/docs/en/v1.15.0/pages/v2#usetransition", fetcherTypeWarning = "\u26A0\uFE0F REMIX FUTURE CHANGE: `fetcher.type` will be removed in v2. Please use `fetcher.state`, `fetcher.formData`, and `fetcher.data` to achieve the same UX. For instructions on making this change see https://remix.run/docs/en/v1.15.0/pages/v2#usefetcher", fetcherSubmissionWarning = "\u26A0\uFE0F REMIX FUTURE CHANGE : `fetcher.submission` will be removed in v2. The submission fields are now part of the fetcher object itself (`fetcher.formData`). For instructions on making this change see https://remix.run/docs/en/v1.15.0/pages/v2#usefetcher";
    function Links4() {
      let {
        manifest,
        routeModules
      } = useRemixContext(), {
        errors,
        matches: routerMatches
      } = useDataRouterStateContext(), matches = errors ? routerMatches.slice(0, routerMatches.findIndex((m) => errors[m.route.id]) + 1) : routerMatches, links$1 = React__namespace.useMemo(() => links2.getLinksForMatches(matches, routeModules, manifest), [matches, routeModules, manifest]);
      return React__namespace.useEffect(() => {
        links$1.some((link) => "imagesizes" in link || "imagesrcset" in link) && warnings.logDeprecationOnce(linksWarning);
      }, [links$1]), /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, links$1.map((link) => {
        if (links2.isPageLinkDescriptor(link))
          return /* @__PURE__ */ React__namespace.createElement(PrefetchPageLinks, _rollupPluginBabelHelpers.extends({
            key: link.page
          }, link));
        let imageSrcSet = null;
        return "useId" in React__namespace ? (link.imagesrcset && (link.imageSrcSet = imageSrcSet = link.imagesrcset, delete link.imagesrcset), link.imagesizes && (link.imageSizes = link.imagesizes, delete link.imagesizes)) : (link.imageSrcSet && (link.imagesrcset = imageSrcSet = link.imageSrcSet, delete link.imageSrcSet), link.imageSizes && (link.imagesizes = link.imageSizes, delete link.imageSizes)), /* @__PURE__ */ React__namespace.createElement("link", _rollupPluginBabelHelpers.extends({
          key: link.rel + (link.href || "") + (imageSrcSet || "")
        }, link));
      }));
    }
    function PrefetchPageLinks({
      page,
      ...dataLinkProps
    }) {
      let {
        router
      } = useDataRouterContext(), matches = React__namespace.useMemo(() => reactRouterDom.matchRoutes(router.routes, page), [router.routes, page]);
      return matches ? /* @__PURE__ */ React__namespace.createElement(PrefetchPageLinksImpl, _rollupPluginBabelHelpers.extends({
        page,
        matches
      }, dataLinkProps)) : (console.warn(`Tried to prefetch ${page} but no routes matched.`), null);
    }
    function usePrefetchedStylesheets(matches) {
      let {
        manifest,
        routeModules
      } = useRemixContext(), [styleLinks, setStyleLinks] = React__namespace.useState([]);
      return React__namespace.useEffect(() => {
        let interrupted = !1;
        return links2.getStylesheetPrefetchLinks(matches, manifest, routeModules).then((links3) => {
          interrupted || setStyleLinks(links3);
        }), () => {
          interrupted = !0;
        };
      }, [matches, manifest, routeModules]), styleLinks;
    }
    function PrefetchPageLinksImpl({
      page,
      matches: nextMatches,
      ...linkProps
    }) {
      let location = reactRouterDom.useLocation(), {
        manifest
      } = useRemixContext(), {
        matches
      } = useDataRouterStateContext(), newMatchesForData = React__namespace.useMemo(() => links2.getNewMatchesForLinks(page, nextMatches, matches, manifest, location, "data"), [page, nextMatches, matches, manifest, location]), newMatchesForAssets = React__namespace.useMemo(() => links2.getNewMatchesForLinks(page, nextMatches, matches, manifest, location, "assets"), [page, nextMatches, matches, manifest, location]), dataHrefs = React__namespace.useMemo(() => links2.getDataLinkHrefs(page, newMatchesForData, manifest), [newMatchesForData, page, manifest]), moduleHrefs = React__namespace.useMemo(() => links2.getModuleLinkHrefs(newMatchesForAssets, manifest), [newMatchesForAssets, manifest]), styleLinks = usePrefetchedStylesheets(newMatchesForAssets);
      return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, dataHrefs.map((href) => /* @__PURE__ */ React__namespace.createElement("link", _rollupPluginBabelHelpers.extends({
        key: href,
        rel: "prefetch",
        as: "fetch",
        href
      }, linkProps))), moduleHrefs.map((href) => /* @__PURE__ */ React__namespace.createElement("link", _rollupPluginBabelHelpers.extends({
        key: href,
        rel: "modulepreload",
        href
      }, linkProps))), styleLinks.map((link) => (
        // these don't spread `linkProps` because they are full link descriptors
        // already with their own props
        /* @__PURE__ */ React__namespace.createElement("link", _rollupPluginBabelHelpers.extends({
          key: link.href
        }, link))
      )));
    }
    function V1Meta() {
      let {
        routeModules
      } = useRemixContext(), {
        errors,
        matches: routerMatches,
        loaderData
      } = useDataRouterStateContext(), location = reactRouterDom.useLocation(), matches = errors ? routerMatches.slice(0, routerMatches.findIndex((m) => errors[m.route.id]) + 1) : routerMatches, meta = {}, parentsData = {};
      for (let match of matches) {
        let routeId = match.route.id, data = loaderData[routeId], params = match.params, routeModule = routeModules[routeId];
        if (routeModule.meta) {
          let routeMeta = typeof routeModule.meta == "function" ? routeModule.meta({
            data,
            parentsData,
            params,
            location
          }) : routeModule.meta;
          if (routeMeta && Array.isArray(routeMeta))
            throw new Error(
              "The route at " + match.route.path + " returns an array. This is only supported with the `v2_meta` future flag in the Remix config. Either set the flag to `true` or update the route's meta function to return an object.\n\nTo reference the v1 meta function API, see https://remix.run/route/meta"
              // TODO: Add link to the docs once they are written
              // + "\n\nTo reference future flags and the v2 meta API, see https://remix.run/file-conventions/remix-config#future-v2-meta."
            );
          Object.assign(meta, routeMeta);
        }
        parentsData[routeId] = data;
      }
      return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, Object.entries(meta).map(([name, value]) => {
        if (!value)
          return null;
        if (["charset", "charSet"].includes(name))
          return /* @__PURE__ */ React__namespace.createElement("meta", {
            key: "charSet",
            charSet: value
          });
        if (name === "title")
          return /* @__PURE__ */ React__namespace.createElement("title", {
            key: "title"
          }, String(value));
        let isOpenGraphTag = /^(og|music|video|article|book|profile|fb):.+$/.test(name);
        return [value].flat().map((content) => isOpenGraphTag ? /* @__PURE__ */ React__namespace.createElement("meta", {
          property: name,
          content,
          key: name + content
        }) : typeof content == "string" ? /* @__PURE__ */ React__namespace.createElement("meta", {
          name,
          content,
          key: name + content
        }) : /* @__PURE__ */ React__namespace.createElement("meta", _rollupPluginBabelHelpers.extends({
          key: name + JSON.stringify(content)
        }, content)));
      }));
    }
    function V2Meta() {
      let {
        routeModules
      } = useRemixContext(), {
        errors,
        matches: routerMatches,
        loaderData
      } = useDataRouterStateContext(), location = reactRouterDom.useLocation(), _matches = errors ? routerMatches.slice(0, routerMatches.findIndex((m) => errors[m.route.id]) + 1) : routerMatches, meta = [], leafMeta = null, matches = [];
      for (let i13 = 0; i13 < _matches.length; i13++) {
        let _match = _matches[i13], routeId = _match.route.id, data = loaderData[routeId], params = _match.params, routeModule = routeModules[routeId], routeMeta = [], match = {
          id: routeId,
          data,
          meta: [],
          params: _match.params,
          pathname: _match.pathname,
          handle: _match.route.handle,
          // TODO: Remove in v2. Only leaving it for now because we used it in
          // examples and there's no reason to crash someone's build for one line.
          // They'll get a TS error from the type updates anyway.
          // @ts-expect-error
          get route() {
            return console.warn("The meta function in " + _match.route.path + " accesses the `route` property on `matches`. This is deprecated and will be removed in Remix version 2. See"), _match.route;
          }
        };
        if (matches[i13] = match, routeModule != null && routeModule.meta ? routeMeta = typeof routeModule.meta == "function" ? routeModule.meta({
          data,
          params,
          location,
          matches
        }) : Array.isArray(routeModule.meta) ? [...routeModule.meta] : routeModule.meta : leafMeta && (routeMeta = [...leafMeta]), routeMeta = routeMeta || [], !Array.isArray(routeMeta))
          throw new Error("The `v2_meta` API is enabled in the Remix config, but the route at " + _match.route.path + ` returns an invalid value. In v2, all route meta functions must return an array of meta objects.

To reference the v1 meta function API, see https://remix.run/route/meta`);
        match.meta = routeMeta, matches[i13] = match, meta = [...routeMeta], leafMeta = meta;
      }
      return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, meta.flat().map((metaProps) => {
        if (!metaProps)
          return null;
        if ("tagName" in metaProps) {
          let tagName = metaProps.tagName;
          if (delete metaProps.tagName, !isValidMetaTag(tagName))
            return console.warn(`A meta object uses an invalid tagName: ${tagName}. Expected either 'link' or 'meta'`), null;
          let Comp = tagName;
          return /* @__PURE__ */ React__namespace.createElement(Comp, _rollupPluginBabelHelpers.extends({
            key: JSON.stringify(metaProps)
          }, metaProps));
        }
        if ("title" in metaProps)
          return /* @__PURE__ */ React__namespace.createElement("title", {
            key: "title"
          }, String(metaProps.title));
        if ("charset" in metaProps && (metaProps.charSet ?? (metaProps.charSet = metaProps.charset), delete metaProps.charset), "charSet" in metaProps && metaProps.charSet != null)
          return typeof metaProps.charSet == "string" ? /* @__PURE__ */ React__namespace.createElement("meta", {
            key: "charSet",
            charSet: metaProps.charSet
          }) : null;
        if ("script:ld+json" in metaProps) {
          let json = null;
          try {
            json = JSON.stringify(metaProps["script:ld+json"]);
          } catch {
          }
          return json != null && /* @__PURE__ */ React__namespace.createElement("script", {
            key: "script:ld+json",
            type: "application/ld+json",
            dangerouslySetInnerHTML: {
              __html: JSON.stringify(metaProps["script:ld+json"])
            }
          });
        }
        return /* @__PURE__ */ React__namespace.createElement("meta", _rollupPluginBabelHelpers.extends({
          key: JSON.stringify(metaProps)
        }, metaProps));
      }));
    }
    function isValidMetaTag(tagName) {
      return typeof tagName == "string" && /^(meta|link)$/.test(tagName);
    }
    function Meta() {
      let {
        future: future2
      } = useRemixContext();
      return future2 != null && future2.v2_meta ? /* @__PURE__ */ React__namespace.createElement(V2Meta, null) : /* @__PURE__ */ React__namespace.createElement(V1Meta, null);
    }
    function Await(props) {
      return /* @__PURE__ */ React__namespace.createElement(reactRouterDom.Await, props);
    }
    var isHydrated = !1;
    function Scripts2(props) {
      let {
        manifest,
        serverHandoffString,
        abortDelay
      } = useRemixContext(), {
        router,
        static: isStatic,
        staticContext
      } = useDataRouterContext(), {
        matches
      } = useDataRouterStateContext(), navigation = reactRouterDom.useNavigation();
      React__namespace.useEffect(() => {
        isHydrated = !0;
      }, []);
      let deferredScripts = [], initialScripts = React__namespace.useMemo(() => {
        var _manifest$hmr;
        let contextScript = staticContext ? `window.__remixContext = ${serverHandoffString};` : " ", activeDeferreds = staticContext == null ? void 0 : staticContext.activeDeferreds;
        contextScript += activeDeferreds ? ["__remixContext.p = function(v,e,p,x) {", "  if (typeof e !== 'undefined') {", `    x=new Error(e.message);
    x.stack=e.stack;`, "    p=Promise.reject(x);", "  } else {", "    p=Promise.resolve(v);", "  }", "  return p;", "};", "__remixContext.n = function(i,k) {", "  __remixContext.t = __remixContext.t || {};", "  __remixContext.t[i] = __remixContext.t[i] || {};", "  let p = new Promise((r, e) => {__remixContext.t[i][k] = {r:(v)=>{r(v);},e:(v)=>{e(v);}};});", typeof abortDelay == "number" ? `setTimeout(() => {if(typeof p._error !== "undefined" || typeof p._data !== "undefined"){return;} __remixContext.t[i][k].e(new Error("Server timeout."))}, ${abortDelay});` : "", "  return p;", "};", "__remixContext.r = function(i,k,v,e,p,x) {", "  p = __remixContext.t[i][k];", "  if (typeof e !== 'undefined') {", `    x=new Error(e.message);
    x.stack=e.stack;`, "    p.e(x);", "  } else {", "    p.r(v);", "  }", "};"].join(`
`) + Object.entries(activeDeferreds).map(([routeId, deferredData]) => {
          let pendingKeys = new Set(deferredData.pendingKeys), promiseKeyValues = deferredData.deferredKeys.map((key) => {
            if (pendingKeys.has(key))
              return deferredScripts.push(/* @__PURE__ */ React__namespace.createElement(DeferredHydrationScript, {
                key: `${routeId} | ${key}`,
                deferredData,
                routeId,
                dataKey: key,
                scriptProps: props
              })), `${JSON.stringify(key)}:__remixContext.n(${JSON.stringify(routeId)}, ${JSON.stringify(key)})`;
            {
              let trackedPromise = deferredData.data[key];
              if (typeof trackedPromise._error < "u") {
                let toSerialize = {
                  message: trackedPromise._error.message,
                  stack: trackedPromise._error.stack
                };
                return `${JSON.stringify(key)}:__remixContext.p(!1, ${markup.escapeHtml(JSON.stringify(toSerialize))})`;
              } else {
                if (typeof trackedPromise._data > "u")
                  throw new Error(`The deferred data for ${key} was not resolved, did you forget to return data from a deferred promise?`);
                return `${JSON.stringify(key)}:__remixContext.p(${markup.escapeHtml(JSON.stringify(trackedPromise._data))})`;
              }
            }
          }).join(`,
`);
          return `Object.assign(__remixContext.state.loaderData[${JSON.stringify(routeId)}], {${promiseKeyValues}});`;
        }).join(`
`) + (deferredScripts.length > 0 ? `__remixContext.a=${deferredScripts.length};` : "") : "";
        let routeModulesScript = isStatic ? `${(_manifest$hmr = manifest.hmr) !== null && _manifest$hmr !== void 0 && _manifest$hmr.runtime ? `import ${JSON.stringify(manifest.hmr.runtime)};` : ""}import ${JSON.stringify(manifest.url)};
${matches.map((match, index2) => `import * as route${index2} from ${JSON.stringify(manifest.routes[match.route.id].module)};`).join(`
`)}
window.__remixRouteModules = {${matches.map((match, index2) => `${JSON.stringify(match.route.id)}:route${index2}`).join(",")}};

import(${JSON.stringify(manifest.entry.module)});` : " ";
        return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("script", _rollupPluginBabelHelpers.extends({}, props, {
          suppressHydrationWarning: !0,
          dangerouslySetInnerHTML: markup.createHtml(contextScript),
          type: void 0
        })), /* @__PURE__ */ React__namespace.createElement("script", _rollupPluginBabelHelpers.extends({}, props, {
          suppressHydrationWarning: !0,
          dangerouslySetInnerHTML: markup.createHtml(routeModulesScript),
          type: "module",
          async: !0
        })));
      }, []);
      if (!isStatic && typeof __remixContext == "object" && __remixContext.a)
        for (let i13 = 0; i13 < __remixContext.a; i13++)
          deferredScripts.push(/* @__PURE__ */ React__namespace.createElement(DeferredHydrationScript, {
            key: i13,
            scriptProps: props
          }));
      let nextMatches = React__namespace.useMemo(() => {
        if (navigation.location) {
          let matches2 = reactRouterDom.matchRoutes(router.routes, navigation.location);
          return invariant2(matches2, `No routes match path "${navigation.location.pathname}"`), matches2;
        }
        return [];
      }, [navigation.location, router.routes]), routePreloads = matches.concat(nextMatches).map((match) => {
        let route = manifest.routes[match.route.id];
        return (route.imports || []).concat([route.module]);
      }).flat(1), preloads = isHydrated ? [] : manifest.entry.imports.concat(routePreloads);
      return isHydrated ? null : /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("link", {
        rel: "modulepreload",
        href: manifest.entry.module,
        crossOrigin: props.crossOrigin
      }), dedupe(preloads).map((path) => /* @__PURE__ */ React__namespace.createElement("link", {
        key: path,
        rel: "modulepreload",
        href: path,
        crossOrigin: props.crossOrigin
      })), initialScripts, deferredScripts);
    }
    function DeferredHydrationScript({
      dataKey,
      deferredData,
      routeId,
      scriptProps
    }) {
      return typeof document > "u" && deferredData && dataKey && routeId && invariant2(deferredData.pendingKeys.includes(dataKey), `Deferred data for route ${routeId} with key ${dataKey} was not pending but tried to render a script for it.`), /* @__PURE__ */ React__namespace.createElement(React__namespace.Suspense, {
        fallback: (
          // This makes absolutely no sense. The server renders null as a fallback,
          // but when hydrating, we need to render a script tag to avoid a hydration issue.
          // To reproduce a hydration mismatch, just render null as a fallback.
          typeof document > "u" && deferredData && dataKey && routeId ? null : /* @__PURE__ */ React__namespace.createElement("script", _rollupPluginBabelHelpers.extends({}, scriptProps, {
            async: !0,
            suppressHydrationWarning: !0,
            dangerouslySetInnerHTML: {
              __html: " "
            }
          }))
        )
      }, typeof document > "u" && deferredData && dataKey && routeId ? /* @__PURE__ */ React__namespace.createElement(Await, {
        resolve: deferredData.data[dataKey],
        errorElement: /* @__PURE__ */ React__namespace.createElement(ErrorDeferredHydrationScript, {
          dataKey,
          routeId,
          scriptProps
        }),
        children: (data) => /* @__PURE__ */ React__namespace.createElement("script", _rollupPluginBabelHelpers.extends({}, scriptProps, {
          async: !0,
          suppressHydrationWarning: !0,
          dangerouslySetInnerHTML: {
            __html: `__remixContext.r(${JSON.stringify(routeId)}, ${JSON.stringify(dataKey)}, ${markup.escapeHtml(JSON.stringify(data))});`
          }
        }))
      }) : /* @__PURE__ */ React__namespace.createElement("script", _rollupPluginBabelHelpers.extends({}, scriptProps, {
        async: !0,
        suppressHydrationWarning: !0,
        dangerouslySetInnerHTML: {
          __html: " "
        }
      })));
    }
    function ErrorDeferredHydrationScript({
      dataKey,
      routeId,
      scriptProps
    }) {
      let error2 = reactRouterDom.useAsyncError(), toSerialize = {
        message: error2.message,
        stack: error2.stack
      };
      return /* @__PURE__ */ React__namespace.createElement("script", _rollupPluginBabelHelpers.extends({}, scriptProps, {
        suppressHydrationWarning: !0,
        dangerouslySetInnerHTML: {
          __html: `__remixContext.r(${JSON.stringify(routeId)}, ${JSON.stringify(dataKey)}, !1, ${markup.escapeHtml(JSON.stringify(toSerialize))});`
        }
      }));
    }
    function dedupe(array) {
      return [...new Set(array)];
    }
    function useMatches() {
      let {
        routeModules
      } = useRemixContext(), matches = reactRouterDom.useMatches();
      return React__namespace.useMemo(() => matches.map((match) => ({
        id: match.id,
        pathname: match.pathname,
        params: match.params,
        data: match.data,
        // Need to grab handle here since we don't have it at client-side route
        // creation time
        handle: routeModules[match.id].handle
      })), [matches, routeModules]);
    }
    function useLoaderData() {
      return reactRouterDom.useLoaderData();
    }
    function useActionData() {
      return reactRouterDom.useActionData();
    }
    function useTransition() {
      let navigation = reactRouterDom.useNavigation();
      return React__namespace.useEffect(() => {
        warnings.logDeprecationOnce(useTransitionWarning);
      }, []), React__namespace.useMemo(() => convertNavigationToTransition(navigation), [navigation]);
    }
    function convertNavigationToTransition(navigation) {
      let {
        location,
        state,
        formMethod,
        formAction,
        formEncType,
        formData
      } = navigation;
      if (!location)
        return transition.IDLE_TRANSITION;
      let isActionSubmission = formMethod != null && ["POST", "PUT", "PATCH", "DELETE"].includes(formMethod.toUpperCase());
      if (state === "submitting" && formMethod && formAction && formEncType && formData) {
        if (isActionSubmission)
          return {
            location,
            state,
            submission: {
              method: formMethod.toUpperCase(),
              action: formAction,
              encType: formEncType,
              formData,
              key: ""
            },
            type: "actionSubmission"
          };
        invariant2(!1, "Encountered an unexpected navigation scenario in useTransition()");
      }
      if (state === "loading") {
        let {
          _isRedirect,
          _isFetchActionRedirect
        } = location.state || {};
        if (formMethod && formAction && formEncType && formData) {
          if (_isRedirect)
            return isActionSubmission ? {
              location,
              state,
              submission: {
                method: formMethod.toUpperCase(),
                action: formAction,
                encType: formEncType,
                formData,
                key: ""
              },
              type: "actionRedirect"
            } : {
              location,
              state,
              submission: {
                method: formMethod.toUpperCase(),
                action: formAction,
                encType: formEncType,
                formData,
                key: ""
              },
              type: "loaderSubmissionRedirect"
            };
          if (isActionSubmission)
            return {
              location,
              state,
              submission: {
                method: formMethod.toUpperCase(),
                action: formAction,
                encType: formEncType,
                formData,
                key: ""
              },
              type: "actionReload"
            };
          {
            let url = new URL(formAction, window.location.origin);
            return url.search = new URLSearchParams(formData.entries()).toString(), {
              location,
              state: "submitting",
              submission: {
                method: formMethod.toUpperCase(),
                action: url.pathname + url.search,
                encType: formEncType,
                formData,
                key: ""
              },
              type: "loaderSubmission"
            };
          }
        } else if (_isRedirect)
          return _isFetchActionRedirect ? {
            location,
            state,
            submission: void 0,
            type: "fetchActionRedirect"
          } : {
            location,
            state,
            submission: void 0,
            type: "normalRedirect"
          };
      }
      return {
        location,
        state: "loading",
        submission: void 0,
        type: "normalLoad"
      };
    }
    function useFetchers() {
      return reactRouterDom.useFetchers().map((f) => {
        let fetcher = convertRouterFetcherToRemixFetcher({
          state: f.state,
          data: f.data,
          formMethod: f.formMethod,
          formAction: f.formAction,
          formEncType: f.formEncType,
          formData: f.formData,
          json: f.json,
          text: f.text,
          " _hasFetcherDoneAnything ": f[" _hasFetcherDoneAnything "]
        });
        return addFetcherDeprecationWarnings(fetcher), fetcher;
      });
    }
    function useFetcher() {
      let fetcherRR = reactRouterDom.useFetcher();
      return React__namespace.useMemo(() => {
        let fetcherWithComponents = {
          ...convertRouterFetcherToRemixFetcher({
            state: fetcherRR.state,
            data: fetcherRR.data,
            formMethod: fetcherRR.formMethod,
            formAction: fetcherRR.formAction,
            formEncType: fetcherRR.formEncType,
            formData: fetcherRR.formData,
            json: fetcherRR.json,
            text: fetcherRR.text,
            " _hasFetcherDoneAnything ": fetcherRR[" _hasFetcherDoneAnything "]
          }),
          load: fetcherRR.load,
          submit: fetcherRR.submit,
          Form: fetcherRR.Form
        };
        return addFetcherDeprecationWarnings(fetcherWithComponents), fetcherWithComponents;
      }, [fetcherRR]);
    }
    function addFetcherDeprecationWarnings(fetcher) {
      let type2 = fetcher.type;
      Object.defineProperty(fetcher, "type", {
        get() {
          return warnings.logDeprecationOnce(fetcherTypeWarning), type2;
        },
        set(value) {
          type2 = value;
        },
        // These settings should make this behave like a normal object `type` field
        configurable: !0,
        enumerable: !0
      });
      let submission = fetcher.submission;
      Object.defineProperty(fetcher, "submission", {
        get() {
          return warnings.logDeprecationOnce(fetcherSubmissionWarning), submission;
        },
        set(value) {
          submission = value;
        },
        // These settings should make this behave like a normal object `type` field
        configurable: !0,
        enumerable: !0
      });
    }
    function convertRouterFetcherToRemixFetcher(fetcherRR) {
      let {
        state,
        formMethod,
        formAction,
        formEncType,
        formData,
        json,
        text,
        data
      } = fetcherRR, isActionSubmission = formMethod != null && ["POST", "PUT", "PATCH", "DELETE"].includes(formMethod.toUpperCase());
      if (state === "idle")
        return fetcherRR[" _hasFetcherDoneAnything "] === !0 ? {
          state: "idle",
          type: "done",
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0,
          json: void 0,
          text: void 0,
          submission: void 0,
          data
        } : transition.IDLE_FETCHER;
      if (state === "submitting" && formMethod && formAction && formEncType && (formData || json !== void 0 || text !== void 0)) {
        if (isActionSubmission)
          return {
            state,
            type: "actionSubmission",
            formMethod: formMethod.toUpperCase(),
            formAction,
            formEncType,
            formData,
            json,
            text,
            // @ts-expect-error formData/json/text are mutually exclusive in the type,
            // so TS can't be sure these meet that criteria, but as a straight
            // assignment from the RR fetcher we know they will
            submission: {
              method: formMethod.toUpperCase(),
              action: formAction,
              encType: formEncType,
              formData,
              json,
              text,
              key: ""
            },
            data
          };
        invariant2(!1, "Encountered an unexpected fetcher scenario in useFetcher()");
      }
      if (state === "loading" && formMethod && formAction && formEncType) {
        if (isActionSubmission)
          return data ? {
            state,
            type: "actionReload",
            formMethod: formMethod.toUpperCase(),
            formAction,
            formEncType,
            formData,
            json,
            text,
            // @ts-expect-error formData/json/text are mutually exclusive in the type,
            // so TS can't be sure these meet that criteria, but as a straight
            // assignment from the RR fetcher we know they will
            submission: {
              method: formMethod.toUpperCase(),
              action: formAction,
              encType: formEncType,
              formData,
              json,
              text,
              key: ""
            },
            data
          } : {
            state,
            type: "actionRedirect",
            formMethod: formMethod.toUpperCase(),
            formAction,
            formEncType,
            formData,
            json,
            text,
            // @ts-expect-error formData/json/text are mutually exclusive in the type,
            // so TS can't be sure these meet that criteria, but as a straight
            // assignment from the RR fetcher we know they will
            submission: {
              method: formMethod.toUpperCase(),
              action: formAction,
              encType: formEncType,
              formData,
              json,
              text,
              key: ""
            },
            data: void 0
          };
        {
          let url = new URL(formAction, window.location.origin);
          return formData && (url.search = new URLSearchParams(formData.entries()).toString()), {
            state: "submitting",
            type: "loaderSubmission",
            formMethod: formMethod.toUpperCase(),
            formAction,
            formEncType,
            formData,
            json,
            text,
            // @ts-expect-error formData/json/text are mutually exclusive in the type,
            // so TS can't be sure these meet that criteria, but as a straight
            // assignment from the RR fetcher we know they will
            submission: {
              method: formMethod.toUpperCase(),
              action: url.pathname + url.search,
              encType: formEncType,
              formData,
              json,
              text,
              key: ""
            },
            data
          };
        }
      }
      return {
        state: "loading",
        type: "normalLoad",
        formMethod: void 0,
        formAction: void 0,
        formData: void 0,
        json: void 0,
        text: void 0,
        formEncType: void 0,
        submission: void 0,
        data
      };
    }
    var LiveReload4 = function({
      // TODO: remove REMIX_DEV_SERVER_WS_PORT in v2
      port,
      timeoutMs = 1e3,
      nonce = void 0
    }) {
      let js = String.raw;
      return /* @__PURE__ */ React__namespace.createElement("script", {
        nonce,
        suppressHydrationWarning: !0,
        dangerouslySetInnerHTML: {
          __html: js`
                function remixLiveReloadConnect(config) {
                  let protocol = location.protocol === "https:" ? "wss:" : "ws:";
                  let host = location.hostname;
                  let port = ${port} || (window.__remixContext && window.__remixContext.dev && window.__remixContext.dev.port) || ${Number(8002)};
                  let socketPath = protocol + "//" + host + ":" + port + "/socket";
                  let ws = new WebSocket(socketPath);
                  ws.onmessage = async (message) => {
                    let event = JSON.parse(message.data);
                    if (event.type === "LOG") {
                      console.log(event.message);
                    }
                    if (event.type === "RELOAD") {
                      console.log("💿 Reloading window ...");
                      window.location.reload();
                    }
                    if (event.type === "HMR") {
                      if (!window.__hmr__ || !window.__hmr__.contexts) {
                        console.log("💿 [HMR] No HMR context, reloading window ...");
                        window.location.reload();
                        return;
                      }
                      if (!event.updates || !event.updates.length) return;
                      let updateAccepted = false;
                      let needsRevalidation = new Set();
                      for (let update of event.updates) {
                        console.log("[HMR] " + update.reason + " [" + update.id +"]")
                        if (update.revalidate) {
                          needsRevalidation.add(update.routeId);
                          console.log("[HMR] Revalidating [" + update.routeId + "]");
                        }
                        let imported = await import(update.url +  '?t=' + event.assetsManifest.hmr.timestamp);
                        if (window.__hmr__.contexts[update.id]) {
                          let accepted = window.__hmr__.contexts[update.id].emit(
                            imported
                          );
                          if (accepted) {
                            console.log("[HMR] Updated accepted by", update.id);
                            updateAccepted = true;
                          }
                        }
                      }
                      if (event.assetsManifest && window.__hmr__.contexts["remix:manifest"]) {
                        let accepted = window.__hmr__.contexts["remix:manifest"].emit(
                          { needsRevalidation, assetsManifest: event.assetsManifest }
                        );
                        if (accepted) {
                          console.log("[HMR] Updated accepted by", "remix:manifest");
                          updateAccepted = true;
                        }
                      }
                      if (!updateAccepted) {
                        console.log("[HMR] Updated rejected, reloading...");
                        window.location.reload();
                      }
                    }
                  };
                  ws.onopen = () => {
                    if (config && typeof config.onOpen === "function") {
                      config.onOpen();
                    }
                  };
                  ws.onclose = (event) => {
                    if (event.code === 1006) {
                      console.log("Remix dev asset server web socket closed. Reconnecting...");
                      setTimeout(
                        () =>
                          remixLiveReloadConnect({
                            onOpen: () => window.location.reload(),
                          }),
                      ${String(timeoutMs)}
                      );
                    }
                  };
                  ws.onerror = (error) => {
                    console.log("Remix dev asset server web socket error:");
                    console.error(error);
                  };
                }
                remixLiveReloadConnect();
              `
        }
      });
    };
    function mergeRefs(...refs) {
      return (value) => {
        refs.forEach((ref) => {
          typeof ref == "function" ? ref(value) : ref != null && (ref.current = value);
        });
      };
    }
    exports.Await = Await;
    exports.Link = Link5;
    exports.Links = Links4;
    exports.LiveReload = LiveReload4;
    exports.Meta = Meta;
    exports.NavLink = NavLink;
    exports.PrefetchPageLinks = PrefetchPageLinks;
    exports.RemixContext = RemixContext;
    exports.RemixRoute = RemixRoute;
    exports.RemixRouteError = RemixRouteError;
    exports.Scripts = Scripts2;
    exports.composeEventHandlers = composeEventHandlers;
    exports.useActionData = useActionData;
    exports.useFetcher = useFetcher;
    exports.useFetchers = useFetchers;
    exports.useLoaderData = useLoaderData;
    exports.useMatches = useMatches;
    exports.useTransition = useTransition;
  }
});

// ../../../node_modules/@remix-run/react/dist/errors.js
var require_errors3 = __commonJS({
  "../../../node_modules/@remix-run/react/dist/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var router = require_router_cjs2();
    function deserializeErrors(errors) {
      if (!errors)
        return null;
      let entries = Object.entries(errors), serialized = {};
      for (let [key, val] of entries)
        if (val && val.__type === "RouteErrorResponse")
          serialized[key] = new router.ErrorResponse(val.status, val.statusText, val.data, val.internal === !0);
        else if (val && val.__type === "Error") {
          let error2 = new Error(val.message);
          error2.stack = val.stack, serialized[key] = error2;
        } else
          serialized[key] = val;
      return serialized;
    }
    exports.deserializeErrors = deserializeErrors;
  }
});

// ../../../node_modules/@remix-run/react/dist/data.js
var require_data2 = __commonJS({
  "../../../node_modules/@remix-run/react/dist/data.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var router = require_router_cjs2();
    function isCatchResponse(response) {
      return response.headers.get("X-Remix-Catch") != null;
    }
    function isErrorResponse(response) {
      return response.headers.get("X-Remix-Error") != null;
    }
    function isRedirectResponse(response) {
      return response.headers.get("X-Remix-Redirect") != null;
    }
    function isDeferredResponse(response) {
      var _response$headers$get;
      return !!((_response$headers$get = response.headers.get("Content-Type")) !== null && _response$headers$get !== void 0 && _response$headers$get.match(/text\/remix-deferred/));
    }
    async function fetchData(request, routeId, retry = 0) {
      let url = new URL(request.url);
      url.searchParams.set("_data", routeId);
      let init = {
        signal: request.signal
      };
      if (request.method !== "GET") {
        init.method = request.method;
        let contentType = request.headers.get("Content-Type");
        contentType && /\bapplication\/json\b/.test(contentType) ? (init.headers = {
          "Content-Type": contentType
        }, init.body = JSON.stringify(await request.json())) : contentType && /\btext\/plain\b/.test(contentType) ? (init.headers = {
          "Content-Type": contentType
        }, init.body = await request.text()) : contentType && /\bapplication\/x-www-form-urlencoded\b/.test(contentType) ? init.body = new URLSearchParams(await request.text()) : init.body = await request.formData();
      }
      retry > 0 && await new Promise((resolve) => setTimeout(resolve, 5 ** retry * 10));
      let revalidation = window.__remixRevalidation, response = await fetch(url.href, init).catch((error2) => {
        if (typeof revalidation == "number" && revalidation === window.__remixRevalidation && (error2 == null ? void 0 : error2.name) === "TypeError" && retry < 3)
          return fetchData(request, routeId, retry + 1);
        throw error2;
      });
      if (isErrorResponse(response)) {
        let data = await response.json(), error2 = new Error(data.message);
        return error2.stack = data.stack, error2;
      }
      return response;
    }
    var DEFERRED_VALUE_PLACEHOLDER_PREFIX = "__deferred_promise:";
    async function parseDeferredReadableStream(stream) {
      if (!stream)
        throw new Error("parseDeferredReadableStream requires stream argument");
      let deferredData, deferredResolvers = {};
      try {
        let sectionReader = readStreamSections(stream), initialSection = (await sectionReader.next()).value;
        if (!initialSection)
          throw new Error("no critical data");
        let criticalData = JSON.parse(initialSection);
        if (typeof criticalData == "object" && criticalData !== null)
          for (let [eventKey, value] of Object.entries(criticalData))
            typeof value != "string" || !value.startsWith(DEFERRED_VALUE_PLACEHOLDER_PREFIX) || (deferredData = deferredData || {}, deferredData[eventKey] = new Promise((resolve, reject) => {
              deferredResolvers[eventKey] = {
                resolve: (value2) => {
                  resolve(value2), delete deferredResolvers[eventKey];
                },
                reject: (error2) => {
                  reject(error2), delete deferredResolvers[eventKey];
                }
              };
            }));
        return (async () => {
          try {
            for await (let section of sectionReader) {
              let [event, ...sectionDataStrings] = section.split(":"), sectionDataString = sectionDataStrings.join(":"), data = JSON.parse(sectionDataString);
              if (event === "data")
                for (let [key, value] of Object.entries(data))
                  deferredResolvers[key] && deferredResolvers[key].resolve(value);
              else if (event === "error")
                for (let [key, value] of Object.entries(data)) {
                  let err = new Error(value.message);
                  err.stack = value.stack, deferredResolvers[key] && deferredResolvers[key].reject(err);
                }
            }
            for (let [key, resolver] of Object.entries(deferredResolvers))
              resolver.reject(new router.AbortedDeferredError(`Deferred ${key} will never be resolved`));
          } catch (error2) {
            for (let resolver of Object.values(deferredResolvers))
              resolver.reject(error2);
          }
        })(), new router.UNSAFE_DeferredData({
          ...criticalData,
          ...deferredData
        });
      } catch (error2) {
        for (let resolver of Object.values(deferredResolvers))
          resolver.reject(error2);
        throw error2;
      }
    }
    async function* readStreamSections(stream) {
      let reader = stream.getReader(), buffer = [], sections = [], closed = !1, encoder = new TextEncoder(), decoder = new TextDecoder(), readStreamSection = async () => {
        if (sections.length > 0)
          return sections.shift();
        for (; !closed && sections.length === 0; ) {
          let chunk = await reader.read();
          if (chunk.done) {
            closed = !0;
            break;
          }
          buffer.push(chunk.value);
          try {
            let splitSections = decoder.decode(mergeArrays(...buffer)).split(`

`);
            if (splitSections.length >= 2 && (sections.push(...splitSections.slice(0, -1)), buffer = [encoder.encode(splitSections.slice(-1).join(`

`))]), sections.length > 0)
              break;
          } catch {
            continue;
          }
        }
        return sections.length > 0 || buffer.length > 0 && (sections = decoder.decode(mergeArrays(...buffer)).split(`

`).filter((s) => s), buffer = []), sections.shift();
      }, section = await readStreamSection();
      for (; section; )
        yield section, section = await readStreamSection();
    }
    function mergeArrays(...arrays) {
      let out = new Uint8Array(arrays.reduce((total, arr) => total + arr.length, 0)), offset2 = 0;
      for (let arr of arrays)
        out.set(arr, offset2), offset2 += arr.length;
      return out;
    }
    exports.fetchData = fetchData;
    exports.isCatchResponse = isCatchResponse;
    exports.isDeferredResponse = isDeferredResponse;
    exports.isErrorResponse = isErrorResponse;
    exports.isRedirectResponse = isRedirectResponse;
    exports.parseDeferredReadableStream = parseDeferredReadableStream;
  }
});

// ../../../node_modules/@remix-run/react/dist/routes.js
var require_routes2 = __commonJS({
  "../../../node_modules/@remix-run/react/dist/routes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var React12 = require_react(), reactRouterDom = require_main2(), routeModules = require_routeModules(), data = require_data2(), links2 = require_links(), invariant2 = require_invariant2(), components = require_components();
    function _interopNamespace(e24) {
      if (e24 && e24.__esModule)
        return e24;
      var n = /* @__PURE__ */ Object.create(null);
      return e24 && Object.keys(e24).forEach(function(k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e24, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: !0,
            get: function() {
              return e24[k];
            }
          });
        }
      }), n.default = e24, Object.freeze(n);
    }
    var React__namespace = /* @__PURE__ */ _interopNamespace(React12);
    function groupRoutesByParentId(manifest) {
      let routes2 = {};
      return Object.values(manifest).forEach((route) => {
        let parentId = route.parentId || "";
        routes2[parentId] || (routes2[parentId] = []), routes2[parentId].push(route);
      }), routes2;
    }
    function createServerRoutes(manifest, routeModules2, future2, parentId = "", routesByParentId = groupRoutesByParentId(manifest)) {
      return (routesByParentId[parentId] || []).map((route) => {
        let hasErrorBoundary = future2.v2_errorBoundary === !0 ? route.id === "root" || route.hasErrorBoundary : route.id === "root" || route.hasCatchBoundary || route.hasErrorBoundary, dataRoute = {
          caseSensitive: route.caseSensitive,
          element: /* @__PURE__ */ React__namespace.createElement(components.RemixRoute, {
            id: route.id
          }),
          errorElement: hasErrorBoundary ? /* @__PURE__ */ React__namespace.createElement(components.RemixRouteError, {
            id: route.id
          }) : void 0,
          id: route.id,
          index: route.index,
          path: route.path,
          handle: routeModules2[route.id].handle
          // Note: we don't need loader/action/shouldRevalidate on these routes
          // since they're for a static render
        }, children = createServerRoutes(manifest, routeModules2, future2, route.id, routesByParentId);
        return children.length > 0 && (dataRoute.children = children), dataRoute;
      });
    }
    function createClientRoutes(manifest, routeModulesCache, future2, parentId = "", routesByParentId = groupRoutesByParentId(manifest), needsRevalidation) {
      return (routesByParentId[parentId] || []).map((route) => {
        let hasErrorBoundary = future2.v2_errorBoundary === !0 ? route.id === "root" || route.hasErrorBoundary : route.id === "root" || route.hasCatchBoundary || route.hasErrorBoundary, dataRoute = {
          caseSensitive: route.caseSensitive,
          element: /* @__PURE__ */ React__namespace.createElement(components.RemixRoute, {
            id: route.id
          }),
          errorElement: hasErrorBoundary ? /* @__PURE__ */ React__namespace.createElement(components.RemixRouteError, {
            id: route.id
          }) : void 0,
          id: route.id,
          index: route.index,
          path: route.path,
          // handle gets added in via useMatches since we aren't guaranteed to
          // have the route module available here
          handle: void 0,
          loader: createDataFunction(route, routeModulesCache, !1),
          action: createDataFunction(route, routeModulesCache, !0),
          shouldRevalidate: createShouldRevalidate(route, routeModulesCache, needsRevalidation)
        }, children = createClientRoutes(manifest, routeModulesCache, future2, route.id, routesByParentId, needsRevalidation);
        return children.length > 0 && (dataRoute.children = children), dataRoute;
      });
    }
    function createShouldRevalidate(route, routeModules2, needsRevalidation) {
      let handledRevalidation = !1;
      return function(arg) {
        let module3 = routeModules2[route.id];
        return invariant2(module3, `Expected route module to be loaded for ${route.id}`), needsRevalidation !== void 0 && !handledRevalidation ? (handledRevalidation = !0, needsRevalidation.has(route.id)) : module3.shouldRevalidate ? module3.shouldRevalidate(arg) : arg.defaultShouldRevalidate;
      };
    }
    async function loadRouteModuleWithBlockingLinks(route, routeModules$1) {
      let routeModule = await routeModules.loadRouteModule(route, routeModules$1);
      return await links2.prefetchStyleLinks(routeModule), routeModule;
    }
    function createDataFunction(route, routeModules2, isAction) {
      return async ({
        request
      }) => {
        let routeModulePromise = loadRouteModuleWithBlockingLinks(route, routeModules2);
        try {
          if (isAction && !route.hasAction) {
            let msg = `Route "${route.id}" does not have an action, but you are trying to submit to it. To fix this, please add an \`action\` function to the route`;
            throw console.error(msg), new Error(msg);
          } else if (!isAction && !route.hasLoader)
            return null;
          let result = await data.fetchData(request, route.id);
          if (result instanceof Error)
            throw result;
          if (data.isRedirectResponse(result))
            throw getRedirect(result);
          if (data.isCatchResponse(result))
            throw result;
          return data.isDeferredResponse(result) && result.body ? await data.parseDeferredReadableStream(result.body) : result;
        } finally {
          await routeModulePromise;
        }
      };
    }
    function getRedirect(response) {
      let status = parseInt(response.headers.get("X-Remix-Status"), 10) || 302, url = response.headers.get("X-Remix-Redirect"), headers = {}, revalidate = response.headers.get("X-Remix-Revalidate");
      return revalidate && (headers["X-Remix-Revalidate"] = revalidate), reactRouterDom.redirect(url, {
        status,
        headers
      });
    }
    exports.createClientRoutes = createClientRoutes;
    exports.createServerRoutes = createServerRoutes;
  }
});

// ../../../node_modules/@remix-run/react/dist/browser.js
var require_browser = __commonJS({
  "../../../node_modules/@remix-run/react/dist/browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var React12 = require_react(), reactRouterDom = require_main2(), components = require_components(), errorBoundaries = require_errorBoundaries(), errors = require_errors3(), routes2 = require_routes2();
    function _interopNamespace(e24) {
      if (e24 && e24.__esModule)
        return e24;
      var n = /* @__PURE__ */ Object.create(null);
      return e24 && Object.keys(e24).forEach(function(k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e24, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: !0,
            get: function() {
              return e24[k];
            }
          });
        }
      }), n.default = e24, Object.freeze(n);
    }
    var React__namespace = /* @__PURE__ */ _interopNamespace(React12), router;
    function RemixBrowser(_props) {
      if (!router) {
        let routes$1 = routes2.createClientRoutes(window.__remixManifest.routes, window.__remixRouteModules, window.__remixContext.future), hydrationData = window.__remixContext.state;
        hydrationData && hydrationData.errors && (hydrationData = {
          ...hydrationData,
          errors: errors.deserializeErrors(hydrationData.errors)
        }), router = reactRouterDom.createBrowserRouter(routes$1, {
          hydrationData,
          future: {
            // Pass through the Remix future flag to avoid a v1 breaking change in
            // useNavigation() - users can control the casing via the flag in v1.
            // useFetcher still always uppercases in the back-compat layer in v1.
            // In v2 we can just always pass true here and remove the back-compat
            // layer
            v7_normalizeFormMethod: window.__remixContext.future.v2_normalizeFormMethod
          }
        });
        let initialUrl = window.__remixContext.url, hydratedUrl = window.location.pathname + window.location.search;
        if (initialUrl !== hydratedUrl) {
          let errorMsg = `Initial URL (${initialUrl}) does not match URL at time of hydration (${hydratedUrl}), reloading page...`;
          console.error(errorMsg), window.location.reload();
        }
      }
      let [location, setLocation] = React__namespace.useState(router.state.location);
      return React__namespace.useLayoutEffect(() => router.subscribe((newState) => {
        newState.location !== location && setLocation(newState.location);
      }), [location]), /* @__PURE__ */ React__namespace.createElement(components.RemixContext.Provider, {
        value: {
          manifest: window.__remixManifest,
          routeModules: window.__remixRouteModules,
          future: window.__remixContext.future
        }
      }, /* @__PURE__ */ React__namespace.createElement(errorBoundaries.RemixErrorBoundary, {
        location,
        component: errorBoundaries.RemixRootDefaultErrorBoundary
      }, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.RouterProvider, {
        router,
        fallbackElement: null,
        future: {
          v7_startTransition: !0
        }
      })));
    }
    exports.RemixBrowser = RemixBrowser;
  }
});

// ../../../node_modules/@remix-run/react/dist/scroll-restoration.js
var require_scroll_restoration = __commonJS({
  "../../../node_modules/@remix-run/react/dist/scroll-restoration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var _rollupPluginBabelHelpers = require_rollupPluginBabelHelpers(), React12 = require_react(), reactRouterDom = require_main2(), components = require_components();
    function _interopNamespace(e24) {
      if (e24 && e24.__esModule)
        return e24;
      var n = /* @__PURE__ */ Object.create(null);
      return e24 && Object.keys(e24).forEach(function(k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e24, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: !0,
            get: function() {
              return e24[k];
            }
          });
        }
      }), n.default = e24, Object.freeze(n);
    }
    var React__namespace = /* @__PURE__ */ _interopNamespace(React12), STORAGE_KEY = "positions";
    function ScrollRestoration({
      getKey,
      ...props
    }) {
      let location = reactRouterDom.useLocation(), matches = components.useMatches();
      reactRouterDom.UNSAFE_useScrollRestoration({
        getKey,
        storageKey: STORAGE_KEY
      });
      let key = React__namespace.useMemo(
        () => {
          if (!getKey)
            return null;
          let userKey = getKey(location, matches);
          return userKey !== location.key ? userKey : null;
        },
        // Nah, we only need this the first time for the SSR render
        // eslint-disable-next-line react-hooks/exhaustive-deps
        []
      ), restoreScroll = ((STORAGE_KEY2, restoreKey) => {
        if (!window.history.state || !window.history.state.key) {
          let key2 = Math.random().toString(32).slice(2);
          window.history.replaceState({
            key: key2
          }, "");
        }
        try {
          let storedY = JSON.parse(sessionStorage.getItem(STORAGE_KEY2) || "{}")[restoreKey || window.history.state.key];
          typeof storedY == "number" && window.scrollTo(0, storedY);
        } catch (error2) {
          console.error(error2), sessionStorage.removeItem(STORAGE_KEY2);
        }
      }).toString();
      return /* @__PURE__ */ React__namespace.createElement("script", _rollupPluginBabelHelpers.extends({}, props, {
        suppressHydrationWarning: !0,
        dangerouslySetInnerHTML: {
          __html: `(${restoreScroll})(${JSON.stringify(STORAGE_KEY)}, ${JSON.stringify(key)})`
        }
      }));
    }
    exports.ScrollRestoration = ScrollRestoration;
  }
});

// ../../../node_modules/react-router-dom/server.js
var require_server2 = __commonJS({
  "../../../node_modules/react-router-dom/server.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var React12 = require_react(), router = require_router_cjs2(), reactRouter = require_main(), reactRouterDom = require_main2();
    function _interopNamespace(e24) {
      if (e24 && e24.__esModule)
        return e24;
      var n = /* @__PURE__ */ Object.create(null);
      return e24 && Object.keys(e24).forEach(function(k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e24, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: !0,
            get: function() {
              return e24[k];
            }
          });
        }
      }), n.default = e24, Object.freeze(n);
    }
    var React__namespace = /* @__PURE__ */ _interopNamespace(React12);
    function StaticRouter({
      basename,
      children,
      location: locationProp = "/"
    }) {
      typeof locationProp == "string" && (locationProp = reactRouterDom.parsePath(locationProp));
      let action = router.Action.Pop, location = {
        pathname: locationProp.pathname || "/",
        search: locationProp.search || "",
        hash: locationProp.hash || "",
        state: locationProp.state || null,
        key: locationProp.key || "default"
      }, staticNavigator = getStatelessNavigator();
      return /* @__PURE__ */ React__namespace.createElement(reactRouterDom.Router, {
        basename,
        children,
        location,
        navigationType: action,
        navigator: staticNavigator,
        static: !0
      });
    }
    function StaticRouterProvider({
      context,
      router: router$1,
      hydrate = !0,
      nonce
    }) {
      router$1 && context || router.UNSAFE_invariant(!1, "You must provide `router` and `context` to <StaticRouterProvider>");
      let dataRouterContext = {
        router: router$1,
        navigator: getStatelessNavigator(),
        static: !0,
        staticContext: context,
        basename: context.basename || "/"
      }, hydrateScript = "";
      if (hydrate !== !1) {
        let data = {
          loaderData: context.loaderData,
          actionData: context.actionData,
          errors: serializeErrors(context.errors)
        };
        hydrateScript = `window.__staticRouterHydrationData = JSON.parse(${htmlEscape(JSON.stringify(JSON.stringify(data)))});`;
      }
      let {
        state
      } = dataRouterContext.router;
      return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.UNSAFE_DataRouterContext.Provider, {
        value: dataRouterContext
      }, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.UNSAFE_DataRouterStateContext.Provider, {
        value: state
      }, /* @__PURE__ */ React__namespace.createElement(reactRouterDom.Router, {
        basename: dataRouterContext.basename,
        location: state.location,
        navigationType: state.historyAction,
        navigator: dataRouterContext.navigator,
        static: dataRouterContext.static
      }, /* @__PURE__ */ React__namespace.createElement(DataRoutes, {
        routes: router$1.routes,
        state
      })))), hydrateScript ? /* @__PURE__ */ React__namespace.createElement("script", {
        suppressHydrationWarning: !0,
        nonce,
        dangerouslySetInnerHTML: {
          __html: hydrateScript
        }
      }) : null);
    }
    function DataRoutes({
      routes: routes2,
      state
    }) {
      return reactRouter.UNSAFE_useRoutesImpl(routes2, void 0, state);
    }
    function serializeErrors(errors) {
      if (!errors)
        return null;
      let entries = Object.entries(errors), serialized = {};
      for (let [key, val] of entries)
        router.isRouteErrorResponse(val) ? serialized[key] = {
          ...val,
          __type: "RouteErrorResponse"
        } : val instanceof Error ? serialized[key] = {
          message: val.message,
          __type: "Error"
        } : serialized[key] = val;
      return serialized;
    }
    function getStatelessNavigator() {
      return {
        createHref,
        encodeLocation,
        push(to) {
          throw new Error(`You cannot use navigator.push() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${JSON.stringify(to)})\` somewhere in your app.`);
        },
        replace(to) {
          throw new Error(`You cannot use navigator.replace() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${JSON.stringify(to)}, { replace: true })\` somewhere in your app.`);
        },
        go(delta) {
          throw new Error(`You cannot use navigator.go() on the server because it is a stateless environment. This error was probably triggered when you did a \`navigate(${delta})\` somewhere in your app.`);
        },
        back() {
          throw new Error("You cannot use navigator.back() on the server because it is a stateless environment.");
        },
        forward() {
          throw new Error("You cannot use navigator.forward() on the server because it is a stateless environment.");
        }
      };
    }
    function createStaticHandler(routes2, opts) {
      return router.createStaticHandler(routes2, {
        ...opts,
        mapRouteProperties: reactRouter.UNSAFE_mapRouteProperties
      });
    }
    function createStaticRouter(routes2, context) {
      let manifest = {}, dataRoutes = router.UNSAFE_convertRoutesToDataRoutes(routes2, reactRouter.UNSAFE_mapRouteProperties, void 0, manifest), matches = context.matches.map((match) => {
        let route = manifest[match.route.id] || match.route;
        return {
          ...match,
          route
        };
      }), msg = (method) => `You cannot use router.${method}() on the server because it is a stateless environment`;
      return {
        get basename() {
          return context.basename;
        },
        get state() {
          return {
            historyAction: router.Action.Pop,
            location: context.location,
            matches,
            loaderData: context.loaderData,
            actionData: context.actionData,
            errors: context.errors,
            initialized: !0,
            navigation: router.IDLE_NAVIGATION,
            restoreScrollPosition: null,
            preventScrollReset: !1,
            revalidation: "idle",
            fetchers: /* @__PURE__ */ new Map(),
            blockers: /* @__PURE__ */ new Map()
          };
        },
        get routes() {
          return dataRoutes;
        },
        initialize() {
          throw msg("initialize");
        },
        subscribe() {
          throw msg("subscribe");
        },
        enableScrollRestoration() {
          throw msg("enableScrollRestoration");
        },
        navigate() {
          throw msg("navigate");
        },
        fetch() {
          throw msg("fetch");
        },
        revalidate() {
          throw msg("revalidate");
        },
        createHref,
        encodeLocation,
        getFetcher() {
          return router.IDLE_FETCHER;
        },
        deleteFetcher() {
          throw msg("deleteFetcher");
        },
        dispose() {
          throw msg("dispose");
        },
        getBlocker() {
          return router.IDLE_BLOCKER;
        },
        deleteBlocker() {
          throw msg("deleteBlocker");
        },
        _internalFetchControllers: /* @__PURE__ */ new Map(),
        _internalActiveDeferreds: /* @__PURE__ */ new Map(),
        _internalSetRoutes() {
          throw msg("_internalSetRoutes");
        }
      };
    }
    function createHref(to) {
      return typeof to == "string" ? to : reactRouterDom.createPath(to);
    }
    function encodeLocation(to) {
      let path = typeof to == "string" ? reactRouterDom.parsePath(to) : to;
      return {
        pathname: path.pathname || "",
        search: path.search || "",
        hash: path.hash || ""
      };
    }
    var ESCAPE_LOOKUP = {
      "&": "\\u0026",
      ">": "\\u003e",
      "<": "\\u003c",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    }, ESCAPE_REGEX = /[&><\u2028\u2029]/g;
    function htmlEscape(str) {
      return str.replace(ESCAPE_REGEX, (match) => ESCAPE_LOOKUP[match]);
    }
    exports.StaticRouter = StaticRouter;
    exports.StaticRouterProvider = StaticRouterProvider;
    exports.createStaticHandler = createStaticHandler;
    exports.createStaticRouter = createStaticRouter;
  }
});

// ../../../node_modules/@remix-run/react/dist/server.js
var require_server3 = __commonJS({
  "../../../node_modules/@remix-run/react/dist/server.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var React12 = require_react(), server = require_server2(), components = require_components(), errorBoundaries = require_errorBoundaries(), routes2 = require_routes2();
    function _interopNamespace(e24) {
      if (e24 && e24.__esModule)
        return e24;
      var n = /* @__PURE__ */ Object.create(null);
      return e24 && Object.keys(e24).forEach(function(k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e24, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: !0,
            get: function() {
              return e24[k];
            }
          });
        }
      }), n.default = e24, Object.freeze(n);
    }
    var React__namespace = /* @__PURE__ */ _interopNamespace(React12);
    function RemixServer2({
      context,
      url,
      abortDelay
    }) {
      typeof url == "string" && (url = new URL(url));
      let {
        manifest,
        routeModules,
        serverHandoffString
      } = context, routes$1 = routes2.createServerRoutes(manifest.routes, routeModules, context.future), router = server.createStaticRouter(routes$1, context.staticHandlerContext);
      return /* @__PURE__ */ React__namespace.createElement(components.RemixContext.Provider, {
        value: {
          manifest,
          routeModules,
          serverHandoffString,
          future: context.future,
          abortDelay
        }
      }, /* @__PURE__ */ React__namespace.createElement(errorBoundaries.RemixErrorBoundary, {
        location: router.state.location,
        component: errorBoundaries.RemixRootDefaultErrorBoundary
      }, /* @__PURE__ */ React__namespace.createElement(server.StaticRouterProvider, {
        router,
        context: context.staticHandlerContext,
        hydrate: !1
      })));
    }
    exports.RemixServer = RemixServer2;
  }
});

// ../../../node_modules/@remix-run/react/dist/index.js
var require_dist3 = __commonJS({
  "../../../node_modules/@remix-run/react/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var browser = require_browser(), reactRouterDom = require_main2(), components = require_components(), errorBoundaries = require_errorBoundaries(), scrollRestoration = require_scroll_restoration(), server = require_server3();
    exports.RemixBrowser = browser.RemixBrowser;
    Object.defineProperty(exports, "Form", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.Form;
      }
    });
    Object.defineProperty(exports, "Outlet", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.Outlet;
      }
    });
    Object.defineProperty(exports, "isRouteErrorResponse", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.isRouteErrorResponse;
      }
    });
    Object.defineProperty(exports, "unstable_useBlocker", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.unstable_useBlocker;
      }
    });
    Object.defineProperty(exports, "unstable_usePrompt", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.unstable_usePrompt;
      }
    });
    Object.defineProperty(exports, "useAsyncError", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useAsyncError;
      }
    });
    Object.defineProperty(exports, "useAsyncValue", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useAsyncValue;
      }
    });
    Object.defineProperty(exports, "useBeforeUnload", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useBeforeUnload;
      }
    });
    Object.defineProperty(exports, "useFormAction", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useFormAction;
      }
    });
    Object.defineProperty(exports, "useHref", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useHref;
      }
    });
    Object.defineProperty(exports, "useLocation", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useLocation;
      }
    });
    Object.defineProperty(exports, "useMatch", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useMatch;
      }
    });
    Object.defineProperty(exports, "useNavigate", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useNavigate;
      }
    });
    Object.defineProperty(exports, "useNavigation", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useNavigation;
      }
    });
    Object.defineProperty(exports, "useNavigationType", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useNavigationType;
      }
    });
    Object.defineProperty(exports, "useOutlet", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useOutlet;
      }
    });
    Object.defineProperty(exports, "useOutletContext", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useOutletContext;
      }
    });
    Object.defineProperty(exports, "useParams", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useParams;
      }
    });
    Object.defineProperty(exports, "useResolvedPath", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useResolvedPath;
      }
    });
    Object.defineProperty(exports, "useRevalidator", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useRevalidator;
      }
    });
    Object.defineProperty(exports, "useRouteError", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useRouteError;
      }
    });
    Object.defineProperty(exports, "useRouteLoaderData", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useRouteLoaderData;
      }
    });
    Object.defineProperty(exports, "useSearchParams", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useSearchParams;
      }
    });
    Object.defineProperty(exports, "useSubmit", {
      enumerable: !0,
      get: function() {
        return reactRouterDom.useSubmit;
      }
    });
    exports.Await = components.Await;
    exports.Link = components.Link;
    exports.Links = components.Links;
    exports.LiveReload = components.LiveReload;
    exports.Meta = components.Meta;
    exports.NavLink = components.NavLink;
    exports.PrefetchPageLinks = components.PrefetchPageLinks;
    exports.Scripts = components.Scripts;
    exports.UNSAFE_RemixContext = components.RemixContext;
    exports.useActionData = components.useActionData;
    exports.useFetcher = components.useFetcher;
    exports.useFetchers = components.useFetchers;
    exports.useLoaderData = components.useLoaderData;
    exports.useMatches = components.useMatches;
    exports.useTransition = components.useTransition;
    exports.useCatch = errorBoundaries.useCatch;
    exports.ScrollRestoration = scrollRestoration.ScrollRestoration;
    exports.RemixServer = server.RemixServer;
  }
});

// ../../../node_modules/react-dom/cjs/react-dom-server-legacy.node.development.js
var require_react_dom_server_legacy_node_development = __commonJS({
  "../../../node_modules/react-dom/cjs/react-dom-server-legacy.node.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React12 = require_react(), stream = require("stream"), ReactVersion = "18.2.0", ReactSharedInternals = React12.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning("warn", format, args);
        }
      }
      function error2(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      function scheduleWork(callback) {
        callback();
      }
      function beginWriting(destination) {
      }
      function writeChunk(destination, chunk) {
        writeChunkAndReturn(destination, chunk);
      }
      function writeChunkAndReturn(destination, chunk) {
        return destination.push(chunk);
      }
      function completeWriting(destination) {
      }
      function close(destination) {
        destination.push(null);
      }
      function stringToChunk(content) {
        return content;
      }
      function stringToPrecomputedChunk(content) {
        return content;
      }
      function closeWithError(destination, error3) {
        destination.destroy(error3);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type2 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type2;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error2("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error2("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value))
          return error2("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? !0 : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? !1 : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = !0, !0) : (illegalAttributeNameCache[attributeName] = !0, error2("Invalid attribute name: `%s`", attributeName), !1);
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED)
          return !1;
        switch (typeof value) {
          case "function":
          case "symbol":
            return !0;
          case "boolean": {
            if (isCustomComponentTag)
              return !1;
            if (propertyInfo !== null)
              return !propertyInfo.acceptsBooleans;
            var prefix3 = name.toLowerCase().slice(0, 5);
            return prefix3 !== "data-" && prefix3 !== "aria-";
          }
          default:
            return !1;
        }
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type2, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type2 === BOOLEANISH_STRING || type2 === BOOLEAN || type2 === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type2, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
      }
      var properties = {}, reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        // TODO: This prevents the assignment of defaultValue to regular
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "allowFullScreen",
        "async",
        // Note: there is a special case that prevents it from being written to the DOM
        // on the client side because the browsers are inconsistent. Instead we call focus().
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        // Microdata
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !1,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "checked",
        // Note: `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`. We have special logic for handling this.
        "multiple",
        "muted",
        "selected"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !0,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "capture",
        "download"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "cols",
        "rows",
        "size",
        "span"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          !1,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g, capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/1999/xlink",
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "xml:base",
        "xml:lang",
        "xml:space"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          !1,
          // sanitizeURL
          !1
        );
      }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        !1,
        // mustUseProperty
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        !0,
        // sanitizeURL
        !1
      ), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !0,
          // sanitizeURL
          !0
        );
      });
      var isUnitlessNumber = {
        animationIterationCount: !0,
        aspectRatio: !0,
        borderImageOutset: !0,
        borderImageSlice: !0,
        borderImageWidth: !0,
        boxFlex: !0,
        boxFlexGroup: !0,
        boxOrdinalGroup: !0,
        columnCount: !0,
        columns: !0,
        flex: !0,
        flexGrow: !0,
        flexPositive: !0,
        flexShrink: !0,
        flexNegative: !0,
        flexOrder: !0,
        gridArea: !0,
        gridRow: !0,
        gridRowEnd: !0,
        gridRowSpan: !0,
        gridRowStart: !0,
        gridColumn: !0,
        gridColumnEnd: !0,
        gridColumnSpan: !0,
        gridColumnStart: !0,
        fontWeight: !0,
        lineClamp: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        tabSize: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0,
        // SVG-related properties
        fillOpacity: !0,
        floodOpacity: !0,
        stopOpacity: !0,
        strokeDasharray: !0,
        strokeDashoffset: !0,
        strokeMiterlimit: !0,
        strokeOpacity: !0,
        strokeWidth: !0
      };
      function prefixKey(prefix3, key) {
        return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      var hasReadOnlyValue = {
        button: !0,
        checkbox: !0,
        image: !0,
        hidden: !0,
        radio: !0,
        reset: !0,
        submit: !0
      };
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1)
          return typeof props.is == "string";
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return !1;
          default:
            return !0;
        }
      }
      var ariaProperties = {
        "aria-current": 0,
        // state
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        // state
        "aria-hidden": 0,
        // state
        "aria-invalid": 0,
        // state
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        // Widget Attributes
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        // Live Region Attributes
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        // Drag-and-Drop Attributes
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        // Relationship Attributes
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return !0;
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null)
              return error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = !0, !0;
            if (name !== correctName)
              return error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = !0, !0;
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null)
              return warnedProperties[name] = !0, !1;
            if (name !== standardName)
              return error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = !0, !0;
          }
        }
        return !0;
      }
      function warnInvalidARIAProps(type2, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type2, key);
            isValid || invalidProps.push(key);
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          invalidProps.length === 1 ? error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type2) : invalidProps.length > 1 && error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type2);
        }
      }
      function validateProperties(type2, props) {
        isCustomComponent(type2, props) || warnInvalidARIAProps(type2, props);
      }
      var didWarnValueNull = !1;
      function validateProperties$1(type2, props) {
        {
          if (type2 !== "input" && type2 !== "textarea" && type2 !== "select")
            return;
          props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = !0, type2 === "select" && props.multiple ? error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type2) : error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type2));
        }
      }
      var possibleStandardNames = {
        // HTML
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        // SVG
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return !0;
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
            return error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = !0, !0;
          if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name))
              return !0;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null)
              return error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = !0, !0;
            if (EVENT_NAME_REGEX.test(name))
              return error2("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = !0, !0;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = !0, !0;
          if (rARIA$1.test(name) || rARIACamel$1.test(name))
            return !0;
          if (lowerCasedName === "innerhtml")
            return error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "aria")
            return error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
            return error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = !0, !0;
          if (typeof value == "number" && isNaN(value))
            return error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = !0, !0;
          var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name)
              return error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = !0, !0;
          } else if (!isReserved && name !== lowerCasedName)
            return error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = !0, !0;
          return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (value ? error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name), warnedProperties$1[name] = !0, !0) : isReserved ? !0 : shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (warnedProperties$1[name] = !0, !1) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = !0), !0);
        };
      }
      var warnUnknownProperties = function(type2, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type2, key, props[key], eventRegistry);
            isValid || unknownProps.push(key);
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          unknownProps.length === 1 ? error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type2) : unknownProps.length > 1 && error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type2);
        }
      };
      function validateProperties$2(type2, props, eventRegistry) {
        isCustomComponent(type2, props) || warnUnknownProperties(type2, props, eventRegistry);
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }, warnHyphenatedStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error2(
            "Unsupported style property %s. Did you mean %s?",
            name,
            // As Andi Smith suggests
            // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
            // is converted to lowercase `ms`.
            camelize(name.replace(msPattern, "ms-"))
          ));
        }, warnBadVendoredStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1)));
        }, warnStyleValueWithSemicolon = function(name, value) {
          warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, "")));
        }, warnStyleValueIsNaN = function(name, value) {
          warnedForNaNValue || (warnedForNaNValue = !0, error2("`NaN` is an invalid value for the `%s` css style property.", name));
        }, warnStyleValueIsInfinity = function(name, value) {
          warnedForInfinityValue || (warnedForInfinityValue = !0, error2("`Infinity` is an invalid value for the `%s` css style property.", name));
        };
        warnValidStyle = function(name, value) {
          name.indexOf("-") > -1 ? warnHyphenatedStyleName(name) : badVendoredStyleNamePattern.test(name) ? warnBadVendoredStyleName(name) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name, value) : isFinite(value) || warnStyleValueIsInfinity(name, value));
        };
      }
      var warnValidStyle$1 = warnValidStyle, matchHtmlRegExp = /["'&<>]/;
      function escapeHtml(string) {
        checkHtmlStringCoercion(string);
        var str = "" + string, match = matchHtmlRegExp.exec(str);
        if (!match)
          return str;
        var escape2, html = "", index2, lastIndex = 0;
        for (index2 = match.index; index2 < str.length; index2++) {
          switch (str.charCodeAt(index2)) {
            case 34:
              escape2 = "&quot;";
              break;
            case 38:
              escape2 = "&amp;";
              break;
            case 39:
              escape2 = "&#x27;";
              break;
            case 60:
              escape2 = "&lt;";
              break;
            case 62:
              escape2 = "&gt;";
              break;
            default:
              continue;
          }
          lastIndex !== index2 && (html += str.substring(lastIndex, index2)), lastIndex = index2 + 1, html += escape2;
        }
        return lastIndex !== index2 ? html + str.substring(lastIndex, index2) : html;
      }
      function escapeTextForBrowser(text) {
        return typeof text == "boolean" || typeof text == "number" ? "" + text : escapeHtml(text);
      }
      var uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
      }
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = !1;
      function sanitizeURL(url) {
        !didWarn && isJavaScriptProtocol.test(url) && (didWarn = !0, error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
      }
      var isArrayImpl = Array.isArray;
      function isArray(a9) {
        return isArrayImpl(a9);
      }
      var startInlineScript = "<script>", endInlineScript = "</script>", startScriptSrc = '<script src="', startModuleSrc = '<script type="module" src="', endAsyncScript = '" async=""></script>';
      function escapeBootstrapScriptContent(scriptText) {
        return checkHtmlStringCoercion(scriptText), ("" + scriptText).replace(scriptRegex, scriptReplacer);
      }
      var scriptRegex = /(<\/|<)(s)(cript)/gi, scriptReplacer = function(match, prefix3, s, suffix2) {
        return "" + prefix3 + (s === "s" ? "\\u0073" : "\\u0053") + suffix2;
      };
      function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
        var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix, inlineScriptWithNonce = nonce === void 0 ? startInlineScript : '<script nonce="' + escapeTextForBrowser(nonce) + '">', bootstrapChunks = [];
        if (bootstrapScriptContent !== void 0 && bootstrapChunks.push(inlineScriptWithNonce, escapeBootstrapScriptContent(bootstrapScriptContent), endInlineScript), bootstrapScripts !== void 0)
          for (var i13 = 0; i13 < bootstrapScripts.length; i13++)
            bootstrapChunks.push(startScriptSrc, escapeTextForBrowser(bootstrapScripts[i13]), endAsyncScript);
        if (bootstrapModules !== void 0)
          for (var _i = 0; _i < bootstrapModules.length; _i++)
            bootstrapChunks.push(startModuleSrc, escapeTextForBrowser(bootstrapModules[_i]), endAsyncScript);
        return {
          bootstrapChunks,
          startInlineScript: inlineScriptWithNonce,
          placeholderPrefix: idPrefix + "P:",
          segmentPrefix: idPrefix + "S:",
          boundaryPrefix: idPrefix + "B:",
          idPrefix,
          nextSuspenseID: 0,
          sentCompleteSegmentFunction: !1,
          sentCompleteBoundaryFunction: !1,
          sentClientRenderFunction: !1
        };
      }
      var ROOT_HTML_MODE = 0, HTML_MODE = 1, SVG_MODE = 2, MATHML_MODE = 3, HTML_TABLE_MODE = 4, HTML_TABLE_BODY_MODE = 5, HTML_TABLE_ROW_MODE = 6, HTML_COLGROUP_MODE = 7;
      function createFormatContext(insertionMode, selectedValue) {
        return {
          insertionMode,
          selectedValue
        };
      }
      function getChildFormatContext(parentContext, type2, props) {
        switch (type2) {
          case "select":
            return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
          case "svg":
            return createFormatContext(SVG_MODE, null);
          case "math":
            return createFormatContext(MATHML_MODE, null);
          case "foreignObject":
            return createFormatContext(HTML_MODE, null);
          case "table":
            return createFormatContext(HTML_TABLE_MODE, null);
          case "thead":
          case "tbody":
          case "tfoot":
            return createFormatContext(HTML_TABLE_BODY_MODE, null);
          case "colgroup":
            return createFormatContext(HTML_COLGROUP_MODE, null);
          case "tr":
            return createFormatContext(HTML_TABLE_ROW_MODE, null);
        }
        return parentContext.insertionMode >= HTML_TABLE_MODE || parentContext.insertionMode === ROOT_HTML_MODE ? createFormatContext(HTML_MODE, null) : parentContext;
      }
      var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
      function assignSuspenseBoundaryID(responseState) {
        var generatedID = responseState.nextSuspenseID++;
        return responseState.boundaryPrefix + generatedID.toString(16);
      }
      function makeId(responseState, treeId, localId) {
        var idPrefix = responseState.idPrefix, id3 = ":" + idPrefix + "R" + treeId;
        return localId > 0 && (id3 += "H" + localId.toString(32)), id3 + ":";
      }
      function encodeHTMLTextNode(text) {
        return escapeTextForBrowser(text);
      }
      var textSeparator = "<!-- -->";
      function pushTextInstance(target, text, responseState, textEmbedded) {
        return text === "" ? textEmbedded : (textEmbedded && target.push(textSeparator), target.push(encodeHTMLTextNode(text)), !0);
      }
      function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
        lastPushedText && textEmbedded && target.push(textSeparator);
      }
      var styleNameCache = /* @__PURE__ */ new Map();
      function processStyleName(styleName) {
        var chunk = styleNameCache.get(styleName);
        if (chunk !== void 0)
          return chunk;
        var result = escapeTextForBrowser(hyphenateStyleName(styleName));
        return styleNameCache.set(styleName, result), result;
      }
      var styleAttributeStart = ' style="', styleAssign = ":", styleSeparator = ";";
      function pushStyle(target, responseState, style) {
        if (typeof style != "object")
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        var isFirst = !0;
        for (var styleName in style)
          if (hasOwnProperty.call(style, styleName)) {
            var styleValue = style[styleName];
            if (!(styleValue == null || typeof styleValue == "boolean" || styleValue === "")) {
              var nameChunk = void 0, valueChunk = void 0, isCustomProperty = styleName.indexOf("--") === 0;
              isCustomProperty ? (nameChunk = escapeTextForBrowser(styleName), checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = escapeTextForBrowser(("" + styleValue).trim())) : (warnValidStyle$1(styleName, styleValue), nameChunk = processStyleName(styleName), typeof styleValue == "number" ? styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName) ? valueChunk = styleValue + "px" : valueChunk = "" + styleValue : (checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = escapeTextForBrowser(("" + styleValue).trim()))), isFirst ? (isFirst = !1, target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk)) : target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
        isFirst || target.push(attributeEnd);
      }
      var attributeSeparator = " ", attributeAssign = '="', attributeEnd = '"', attributeEmptyString = '=""';
      function pushAttribute(target, responseState, name, value) {
        switch (name) {
          case "style": {
            pushStyle(target, responseState, value);
            return;
          }
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
            return;
        }
        if (
          // shouldIgnoreAttribute
          // We have already filtered out null/undefined and reserved words.
          !(name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N"))
        ) {
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean":
                if (!propertyInfo.acceptsBooleans)
                  return;
            }
            var attributeName = propertyInfo.attributeName, attributeNameChunk = attributeName;
            switch (propertyInfo.type) {
              case BOOLEAN:
                value && target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                return;
              case OVERLOADED_BOOLEAN:
                value === !0 ? target.push(attributeSeparator, attributeNameChunk, attributeEmptyString) : value === !1 || target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                return;
              case NUMERIC:
                isNaN(value) || target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                break;
              case POSITIVE_NUMERIC:
                !isNaN(value) && value >= 1 && target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                break;
              default:
                propertyInfo.sanitizeURL && (checkAttributeStringCoercion(value, attributeName), value = "" + value, sanitizeURL(value)), target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix3 = name.toLowerCase().slice(0, 5);
                if (prefix3 !== "data-" && prefix3 !== "aria-")
                  return;
              }
            }
            target.push(attributeSeparator, name, attributeAssign, escapeTextForBrowser(value), attributeEnd);
          }
        }
      }
      var endOfStartTag = ">", endOfStartTagSelfClosing = "/>";
      function pushInnerHTML(target, innerHTML, children) {
        if (innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (checkHtmlStringCoercion(html), target.push("" + html));
        }
      }
      var didWarnDefaultInputValue = !1, didWarnDefaultChecked = !1, didWarnDefaultSelectValue = !1, didWarnDefaultTextareaValue = !1, didWarnInvalidOptionChildren = !1, didWarnInvalidOptionInnerHTML = !1, didWarnSelectedSetOnOption = !1;
      function checkSelectProp(props, propName) {
        {
          var value = props[propName];
          if (value != null) {
            var array = isArray(value);
            props.multiple && !array ? error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName) : !props.multiple && array && error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
          }
        }
      }
      function pushStartSelect(target, props, responseState) {
        checkControlledValueProps("select", props), checkSelectProp(props, "value"), checkSelectProp(props, "defaultValue"), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue && (error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultSelectValue = !0), target.push(startChunkForTag("select"));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "defaultValue":
              case "value":
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function flattenOptionChildren(children) {
        var content = "";
        return React12.Children.forEach(children, function(child) {
          child != null && (content += child, !didWarnInvalidOptionChildren && typeof child != "string" && typeof child != "number" && (didWarnInvalidOptionChildren = !0, error2("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
        }), content;
      }
      var selectedMarkerAttribute = ' selected=""';
      function pushStartOption(target, props, responseState, formatContext) {
        var selectedValue = formatContext.selectedValue;
        target.push(startChunkForTag("option"));
        var children = null, value = null, selected = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "selected":
                selected = propValue, didWarnSelectedSetOnOption || (error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = !0);
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "value":
                value = propValue;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (selectedValue != null) {
          var stringValue;
          if (value !== null ? (checkAttributeStringCoercion(value, "value"), stringValue = "" + value) : (innerHTML !== null && (didWarnInvalidOptionInnerHTML || (didWarnInvalidOptionInnerHTML = !0, error2("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."))), stringValue = flattenOptionChildren(children)), isArray(selectedValue))
            for (var i13 = 0; i13 < selectedValue.length; i13++) {
              checkAttributeStringCoercion(selectedValue[i13], "value");
              var v = "" + selectedValue[i13];
              if (v === stringValue) {
                target.push(selectedMarkerAttribute);
                break;
              }
            }
          else
            checkAttributeStringCoercion(selectedValue, "select.value"), "" + selectedValue === stringValue && target.push(selectedMarkerAttribute);
        } else
          selected && target.push(selectedMarkerAttribute);
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function pushInput(target, props, responseState) {
        checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked && (error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultChecked = !0), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue && (error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultInputValue = !0), target.push(startChunkForTag("input"));
        var value = null, defaultValue = null, checked = null, defaultChecked = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              case "defaultChecked":
                defaultChecked = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "checked":
                checked = propValue;
                break;
              case "value":
                value = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return checked !== null ? pushAttribute(target, responseState, "checked", checked) : defaultChecked !== null && pushAttribute(target, responseState, "checked", defaultChecked), value !== null ? pushAttribute(target, responseState, "value", value) : defaultValue !== null && pushAttribute(target, responseState, "value", defaultValue), target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartTextArea(target, props, responseState) {
        checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue && (error2("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultTextareaValue = !0), target.push(startChunkForTag("textarea"));
        var value = null, defaultValue = null, children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "value":
                value = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (value === null && defaultValue !== null && (value = defaultValue), target.push(endOfStartTag), children != null) {
          if (error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>."), value != null)
            throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
          if (isArray(children)) {
            if (children.length > 1)
              throw new Error("<textarea> can only have at most one child.");
            checkHtmlStringCoercion(children[0]), value = "" + children[0];
          }
          checkHtmlStringCoercion(children), value = "" + children;
        }
        return typeof value == "string" && value[0] === `
` && target.push(leadingNewline), value !== null && (checkAttributeStringCoercion(value, "value"), target.push(encodeHTMLTextNode("" + value))), null;
      }
      function pushSelfClosing(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartMenuItem(target, props, responseState) {
        target.push(startChunkForTag("menuitem"));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), null;
      }
      function pushStartTitle(target, props, responseState) {
        target.push(startChunkForTag("title"));
        var children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        target.push(endOfStartTag);
        {
          var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
          Array.isArray(children) && children.length > 1 ? error2("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && child.$$typeof != null ? error2("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && typeof child != "string" && typeof child != "number" && error2("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
        }
        return children;
      }
      function pushStartGenericElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), typeof children == "string" ? (target.push(encodeHTMLTextNode(children)), null) : children;
      }
      function pushStartCustomElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "style":
                pushStyle(target, responseState, propValue);
                break;
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                break;
              default:
                isAttributeNameSafe(propKey) && typeof propValue != "function" && typeof propValue != "symbol" && target.push(attributeSeparator, propKey, attributeAssign, escapeTextForBrowser(propValue), attributeEnd);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      var leadingNewline = `
`;
      function pushStartPreformattedElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (target.push(endOfStartTag), innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (typeof html == "string" && html.length > 0 && html[0] === `
` ? target.push(leadingNewline, html) : (checkHtmlStringCoercion(html), target.push("" + html)));
        }
        return typeof children == "string" && children[0] === `
` && target.push(leadingNewline), children;
      }
      var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/, validatedTagCache = /* @__PURE__ */ new Map();
      function startChunkForTag(tag) {
        var tagStartChunk = validatedTagCache.get(tag);
        if (tagStartChunk === void 0) {
          if (!VALID_TAG_REGEX.test(tag))
            throw new Error("Invalid tag: " + tag);
          tagStartChunk = "<" + tag, validatedTagCache.set(tag, tagStartChunk);
        }
        return tagStartChunk;
      }
      var DOCTYPE = "<!DOCTYPE html>";
      function pushStartInstance(target, type2, props, responseState, formatContext) {
        switch (validateProperties(type2, props), validateProperties$1(type2, props), validateProperties$2(type2, props, null), !props.suppressContentEditableWarning && props.contentEditable && props.children != null && error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE && type2.indexOf("-") === -1 && typeof props.is != "string" && type2.toLowerCase() !== type2 && error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type2), type2) {
          case "select":
            return pushStartSelect(target, props, responseState);
          case "option":
            return pushStartOption(target, props, responseState, formatContext);
          case "textarea":
            return pushStartTextArea(target, props, responseState);
          case "input":
            return pushInput(target, props, responseState);
          case "menuitem":
            return pushStartMenuItem(target, props, responseState);
          case "title":
            return pushStartTitle(target, props, responseState);
          case "listing":
          case "pre":
            return pushStartPreformattedElement(target, props, type2, responseState);
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            return pushSelfClosing(target, props, type2, responseState);
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return pushStartGenericElement(target, props, type2, responseState);
          case "html":
            return formatContext.insertionMode === ROOT_HTML_MODE && target.push(DOCTYPE), pushStartGenericElement(target, props, type2, responseState);
          default:
            return type2.indexOf("-") === -1 && typeof props.is != "string" ? pushStartGenericElement(target, props, type2, responseState) : pushStartCustomElement(target, props, type2, responseState);
        }
      }
      var endTag1 = "</", endTag2 = ">";
      function pushEndInstance(target, type2, props) {
        switch (type2) {
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "input":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            break;
          default:
            target.push(endTag1, type2, endTag2);
        }
      }
      function writeCompletedRoot(destination, responseState) {
        for (var bootstrapChunks = responseState.bootstrapChunks, i13 = 0; i13 < bootstrapChunks.length - 1; i13++)
          writeChunk(destination, bootstrapChunks[i13]);
        return i13 < bootstrapChunks.length ? writeChunkAndReturn(destination, bootstrapChunks[i13]) : !0;
      }
      var placeholder1 = '<template id="', placeholder2 = '"></template>';
      function writePlaceholder(destination, responseState, id3) {
        writeChunk(destination, placeholder1), writeChunk(destination, responseState.placeholderPrefix);
        var formattedID = id3.toString(16);
        return writeChunk(destination, formattedID), writeChunkAndReturn(destination, placeholder2);
      }
      var startCompletedSuspenseBoundary = "<!--$-->", startPendingSuspenseBoundary1 = '<!--$?--><template id="', startPendingSuspenseBoundary2 = '"></template>', startClientRenderedSuspenseBoundary = "<!--$!-->", endSuspenseBoundary = "<!--/$-->", clientRenderedSuspenseBoundaryError1 = "<template", clientRenderedSuspenseBoundaryErrorAttrInterstitial = '"', clientRenderedSuspenseBoundaryError1A = ' data-dgst="', clientRenderedSuspenseBoundaryError1B = ' data-msg="', clientRenderedSuspenseBoundaryError1C = ' data-stck="', clientRenderedSuspenseBoundaryError2 = "></template>";
      function writeStartCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
      }
      function writeStartPendingSuspenseBoundary(destination, responseState, id3) {
        if (writeChunk(destination, startPendingSuspenseBoundary1), id3 === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, id3), writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
      }
      function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
        var result;
        return result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary), writeChunk(destination, clientRenderedSuspenseBoundaryError1), errorDigest && (writeChunk(destination, clientRenderedSuspenseBoundaryError1A), writeChunk(destination, escapeTextForBrowser(errorDigest)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorMesssage && (writeChunk(destination, clientRenderedSuspenseBoundaryError1B), writeChunk(destination, escapeTextForBrowser(errorMesssage)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorComponentStack && (writeChunk(destination, clientRenderedSuspenseBoundaryError1C), writeChunk(destination, escapeTextForBrowser(errorComponentStack)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2), result;
      }
      function writeEndCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndPendingSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      var startSegmentHTML = '<div hidden id="', startSegmentHTML2 = '">', endSegmentHTML = "</div>", startSegmentSVG = '<svg aria-hidden="true" style="display:none" id="', startSegmentSVG2 = '">', endSegmentSVG = "</svg>", startSegmentMathML = '<math aria-hidden="true" style="display:none" id="', startSegmentMathML2 = '">', endSegmentMathML = "</math>", startSegmentTable = '<table hidden id="', startSegmentTable2 = '">', endSegmentTable = "</table>", startSegmentTableBody = '<table hidden><tbody id="', startSegmentTableBody2 = '">', endSegmentTableBody = "</tbody></table>", startSegmentTableRow = '<table hidden><tr id="', startSegmentTableRow2 = '">', endSegmentTableRow = "</tr></table>", startSegmentColGroup = '<table hidden><colgroup id="', startSegmentColGroup2 = '">', endSegmentColGroup = "</colgroup></table>";
      function writeStartSegment(destination, responseState, formatContext, id3) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunk(destination, startSegmentHTML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id3.toString(16)), writeChunkAndReturn(destination, startSegmentHTML2);
          case SVG_MODE:
            return writeChunk(destination, startSegmentSVG), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id3.toString(16)), writeChunkAndReturn(destination, startSegmentSVG2);
          case MATHML_MODE:
            return writeChunk(destination, startSegmentMathML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id3.toString(16)), writeChunkAndReturn(destination, startSegmentMathML2);
          case HTML_TABLE_MODE:
            return writeChunk(destination, startSegmentTable), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id3.toString(16)), writeChunkAndReturn(destination, startSegmentTable2);
          case HTML_TABLE_BODY_MODE:
            return writeChunk(destination, startSegmentTableBody), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id3.toString(16)), writeChunkAndReturn(destination, startSegmentTableBody2);
          case HTML_TABLE_ROW_MODE:
            return writeChunk(destination, startSegmentTableRow), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id3.toString(16)), writeChunkAndReturn(destination, startSegmentTableRow2);
          case HTML_COLGROUP_MODE:
            return writeChunk(destination, startSegmentColGroup), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id3.toString(16)), writeChunkAndReturn(destination, startSegmentColGroup2);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      function writeEndSegment(destination, formatContext) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunkAndReturn(destination, endSegmentHTML);
          case SVG_MODE:
            return writeChunkAndReturn(destination, endSegmentSVG);
          case MATHML_MODE:
            return writeChunkAndReturn(destination, endSegmentMathML);
          case HTML_TABLE_MODE:
            return writeChunkAndReturn(destination, endSegmentTable);
          case HTML_TABLE_BODY_MODE:
            return writeChunkAndReturn(destination, endSegmentTableBody);
          case HTML_TABLE_ROW_MODE:
            return writeChunkAndReturn(destination, endSegmentTableRow);
          case HTML_COLGROUP_MODE:
            return writeChunkAndReturn(destination, endSegmentColGroup);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}", completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}', clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}', completeSegmentScript1Full = completeSegmentFunction + ';$RS("', completeSegmentScript1Partial = '$RS("', completeSegmentScript2 = '","', completeSegmentScript3 = '")</script>';
      function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
        writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteSegmentFunction ? writeChunk(destination, completeSegmentScript1Partial) : (responseState.sentCompleteSegmentFunction = !0, writeChunk(destination, completeSegmentScript1Full)), writeChunk(destination, responseState.segmentPrefix);
        var formattedID = contentSegmentID.toString(16);
        return writeChunk(destination, formattedID), writeChunk(destination, completeSegmentScript2), writeChunk(destination, responseState.placeholderPrefix), writeChunk(destination, formattedID), writeChunkAndReturn(destination, completeSegmentScript3);
      }
      var completeBoundaryScript1Full = completeBoundaryFunction + ';$RC("', completeBoundaryScript1Partial = '$RC("', completeBoundaryScript2 = '","', completeBoundaryScript3 = '")</script>';
      function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteBoundaryFunction ? writeChunk(destination, completeBoundaryScript1Partial) : (responseState.sentCompleteBoundaryFunction = !0, writeChunk(destination, completeBoundaryScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        var formattedContentID = contentSegmentID.toString(16);
        return writeChunk(destination, boundaryID), writeChunk(destination, completeBoundaryScript2), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, formattedContentID), writeChunkAndReturn(destination, completeBoundaryScript3);
      }
      var clientRenderScript1Full = clientRenderFunction + ';$RX("', clientRenderScript1Partial = '$RX("', clientRenderScript1A = '"', clientRenderScript2 = ")</script>", clientRenderErrorScriptArgInterstitial = ",";
      function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentClientRenderFunction ? writeChunk(destination, clientRenderScript1Partial) : (responseState.sentClientRenderFunction = !0, writeChunk(destination, clientRenderScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, boundaryID), writeChunk(destination, clientRenderScript1A), (errorDigest || errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorDigest || ""))), (errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorMessage || ""))), errorComponentStack && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorComponentStack))), writeChunkAndReturn(destination, clientRenderScript2);
      }
      var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
      function escapeJSStringsForInstructionScripts(input) {
        var escaped = JSON.stringify(input);
        return escaped.replace(regexForJSStringsInScripts, function(match) {
          switch (match) {
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
          }
        });
      }
      function createResponseState$1(generateStaticMarkup, identifierPrefix) {
        var responseState = createResponseState(identifierPrefix, void 0);
        return {
          // Keep this in sync with ReactDOMServerFormatConfig
          bootstrapChunks: responseState.bootstrapChunks,
          startInlineScript: responseState.startInlineScript,
          placeholderPrefix: responseState.placeholderPrefix,
          segmentPrefix: responseState.segmentPrefix,
          boundaryPrefix: responseState.boundaryPrefix,
          idPrefix: responseState.idPrefix,
          nextSuspenseID: responseState.nextSuspenseID,
          sentCompleteSegmentFunction: responseState.sentCompleteSegmentFunction,
          sentCompleteBoundaryFunction: responseState.sentCompleteBoundaryFunction,
          sentClientRenderFunction: responseState.sentClientRenderFunction,
          // This is an extra field for the legacy renderer
          generateStaticMarkup
        };
      }
      function createRootFormatContext() {
        return {
          insertionMode: HTML_MODE,
          // We skip the root mode because we don't want to emit the DOCTYPE in legacy mode.
          selectedValue: null
        };
      }
      function pushTextInstance$1(target, text, responseState, textEmbedded) {
        return responseState.generateStaticMarkup ? (target.push(escapeTextForBrowser(text)), !1) : pushTextInstance(target, text, responseState, textEmbedded);
      }
      function pushSegmentFinale$1(target, responseState, lastPushedText, textEmbedded) {
        if (!responseState.generateStaticMarkup)
          return pushSegmentFinale(target, responseState, lastPushedText, textEmbedded);
      }
      function writeStartCompletedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? !0 : writeStartCompletedSuspenseBoundary(destination);
      }
      function writeStartClientRenderedSuspenseBoundary$1(destination, responseState, errorDigest, errorMessage, errorComponentStack) {
        return responseState.generateStaticMarkup ? !0 : writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMessage, errorComponentStack);
      }
      function writeEndCompletedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? !0 : writeEndCompletedSuspenseBoundary(destination);
      }
      function writeEndClientRenderedSuspenseBoundary$1(destination, responseState) {
        return responseState.generateStaticMarkup ? !0 : writeEndClientRenderedSuspenseBoundary(destination);
      }
      var assign = Object.assign, REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type2) {
        return type2.displayName || "Context";
      }
      function getComponentNameFromType(type2) {
        if (type2 == null)
          return null;
        if (typeof type2.tag == "number" && error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type2 == "function")
          return type2.displayName || type2.name || null;
        if (typeof type2 == "string")
          return type2;
        switch (type2) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type2 == "object")
          switch (type2.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type2;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type2;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type2, type2.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type2.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type2.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type2, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame2 = componentFrameCache.get(fn);
          if (frame2 !== void 0)
            return frame2;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, !0);
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
        if (type2 == null)
          return "";
        if (typeof type2 == "function")
          return describeNativeComponentFrame(type2, shouldConstruct(type2));
        if (typeof type2 == "string")
          return describeBuiltInComponentFrame(type2);
        switch (type2) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type2 == "object")
          switch (type2.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type2.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type2, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error2("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var warnedAboutMissingGetChildContext;
      warnedAboutMissingGetChildContext = {};
      var emptyContextObject = {};
      Object.freeze(emptyContextObject);
      function getMaskedContext(type2, unmaskedContext) {
        {
          var contextTypes = type2.contextTypes;
          if (!contextTypes)
            return emptyContextObject;
          var context = {};
          for (var key in contextTypes)
            context[key] = unmaskedContext[key];
          {
            var name = getComponentNameFromType(type2) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          return context;
        }
      }
      function processChildContext(instance, type2, parentContext, childContextTypes) {
        {
          if (typeof instance.getChildContext != "function") {
            {
              var componentName = getComponentNameFromType(type2) || "Unknown";
              warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = !0, error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext)
            if (!(contextKey in childContextTypes))
              throw new Error((getComponentNameFromType(type2) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          {
            var name = getComponentNameFromType(type2) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      var rendererSigil;
      rendererSigil = {};
      var rootContextSnapshot = null, currentActiveSnapshot = null;
      function popNode(prev) {
        prev.context._currentValue2 = prev.parentValue;
      }
      function pushNode(next) {
        next.context._currentValue2 = next.value;
      }
      function popToNearestCommonAncestor(prev, next) {
        if (prev !== next) {
          popNode(prev);
          var parentPrev = prev.parent, parentNext = next.parent;
          if (parentPrev === null) {
            if (parentNext !== null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
          } else {
            if (parentNext === null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
            popToNearestCommonAncestor(parentPrev, parentNext);
          }
          pushNode(next);
        }
      }
      function popAllPrevious(prev) {
        popNode(prev);
        var parentPrev = prev.parent;
        parentPrev !== null && popAllPrevious(parentPrev);
      }
      function pushAllNext(next) {
        var parentNext = next.parent;
        parentNext !== null && pushAllNext(parentNext), pushNode(next);
      }
      function popPreviousToCommonLevel(prev, next) {
        popNode(prev);
        var parentPrev = prev.parent;
        if (parentPrev === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        parentPrev.depth === next.depth ? popToNearestCommonAncestor(parentPrev, next) : popPreviousToCommonLevel(parentPrev, next);
      }
      function popNextToCommonLevel(prev, next) {
        var parentNext = next.parent;
        if (parentNext === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        prev.depth === parentNext.depth ? popToNearestCommonAncestor(prev, parentNext) : popNextToCommonLevel(prev, parentNext), pushNode(next);
      }
      function switchContext(newSnapshot) {
        var prev = currentActiveSnapshot, next = newSnapshot;
        prev !== next && (prev === null ? pushAllNext(next) : next === null ? popAllPrevious(prev) : prev.depth === next.depth ? popToNearestCommonAncestor(prev, next) : prev.depth > next.depth ? popPreviousToCommonLevel(prev, next) : popNextToCommonLevel(prev, next), currentActiveSnapshot = next);
      }
      function pushProvider(context, nextValue) {
        var prevValue;
        prevValue = context._currentValue2, context._currentValue2 = nextValue, context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil && error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer2 = rendererSigil;
        var prevNode = currentActiveSnapshot, newNode = {
          parent: prevNode,
          depth: prevNode === null ? 0 : prevNode.depth + 1,
          context,
          parentValue: prevValue,
          value: nextValue
        };
        return currentActiveSnapshot = newNode, newNode;
      }
      function popProvider(context) {
        var prevSnapshot = currentActiveSnapshot;
        if (prevSnapshot === null)
          throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
        prevSnapshot.context !== context && error2("The parent context is not the expected context. This is probably a bug in React.");
        {
          var _value = prevSnapshot.parentValue;
          _value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED ? prevSnapshot.context._currentValue2 = prevSnapshot.context._defaultValue : prevSnapshot.context._currentValue2 = _value, context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil && error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer2 = rendererSigil;
        }
        return currentActiveSnapshot = prevSnapshot.parent;
      }
      function getActiveContext() {
        return currentActiveSnapshot;
      }
      function readContext(context) {
        var value = context._currentValue2;
        return value;
      }
      function get(key) {
        return key._reactInternals;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var didWarnAboutNoopUpdateForComponent = {}, didWarnAboutDeprecatedWillMount = {}, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType;
      {
        didWarnAboutUninitializedState = /* @__PURE__ */ new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set(), didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set(), didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set(), didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set(), didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (!(callback === null || typeof callback == "function")) {
            var key = callerName + "_" + callback;
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
          }
        }, warnOnUndefinedDerivedState = function(type2, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type2) || "Component";
            didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
          }
        };
      }
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnAboutNoopUpdateForComponent[warningKey])
            return;
          error2(`%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.

Please check the code for the %s component.`, callerName, callerName, componentName), didWarnAboutNoopUpdateForComponent[warningKey] = !0;
        }
      }
      var classComponentUpdater = {
        isMounted: function(inst) {
          return !1;
        },
        enqueueSetState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "setState") : (internals.queue.push(payload), callback != null && warnOnInvalidCallback(callback, "setState"));
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.replace = !0, internals.queue = [payload], callback != null && warnOnInvalidCallback(callback, "setState");
        },
        enqueueForceUpdate: function(inst, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "forceUpdate") : callback != null && warnOnInvalidCallback(callback, "setState");
        }
      };
      function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var newState = partialState == null ? prevState : assign({}, prevState, partialState);
        return newState;
      }
      function constructClassInstance(ctor, props, maskedLegacyContext) {
        var context = emptyContextObject, contextType = ctor.contextType;
        if ("contextType" in ctor) {
          var isValid = (
            // Allow null for conditional declaration
            contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
          );
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
        typeof contextType == "object" && contextType !== null ? context = readContext(contextType) : context = maskedLegacyContext;
        var instance = new ctor(props, context);
        {
          if (typeof ctor.getDerivedStateFromProps == "function" && (instance.state === null || instance.state === void 0)) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
          }
          if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
            var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
            if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0 ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error2(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
            }
          }
        }
        return instance;
      }
      function checkClassInstance(instance, ctor, newProps) {
        {
          var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
          renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name), instance.propTypes && error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name), instance.contextType && error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name), instance.contextTypes && error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name)), typeof instance.componentShouldUpdate == "function" && error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate < "u" && error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name), typeof instance.componentDidReceiveProps == "function" && error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name), typeof instance.componentWillRecieveProps == "function" && error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          var hasMutatedProps = instance.props !== newProps;
          instance.props !== void 0 && hasMutatedProps && error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name), instance.defaultProps && error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor))), typeof instance.getDerivedStateFromProps == "function" && error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof instance.getDerivedStateFromError == "function" && error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof ctor.getSnapshotBeforeUpdate == "function" && error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          var _state = instance.state;
          _state && (typeof _state != "object" || isArray(_state)) && error2("%s.state: must be set to an object or null", name), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
      function callComponentWillMount(type2, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount == "function") {
          if (instance.componentWillMount.__suppressDeprecationWarning !== !0) {
            var componentName = getComponentNameFromType(type2) || "Unknown";
            didWarnAboutDeprecatedWillMount[componentName] || (warn(
              // keep this warning in sync with ReactStrictModeWarning.js
              `componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.

Please update the following components: %s`,
              componentName
            ), didWarnAboutDeprecatedWillMount[componentName] = !0);
          }
          instance.componentWillMount();
        }
        typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type2) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
      }
      function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
        if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
          var oldQueue = internalInstance.queue, oldReplace = internalInstance.replace;
          if (internalInstance.queue = null, internalInstance.replace = !1, oldReplace && oldQueue.length === 1)
            inst.state = oldQueue[0];
          else {
            for (var nextState = oldReplace ? oldQueue[0] : inst.state, dontMutate = !0, i13 = oldReplace ? 1 : 0; i13 < oldQueue.length; i13++) {
              var partial = oldQueue[i13], partialState = typeof partial == "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
              partialState != null && (dontMutate ? (dontMutate = !1, nextState = assign({}, nextState, partialState)) : assign(nextState, partialState));
            }
            inst.state = nextState;
          }
        } else
          internalInstance.queue = null;
      }
      function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
        checkClassInstance(instance, ctor, newProps);
        var initialState = instance.state !== void 0 ? instance.state : null;
        instance.updater = classComponentUpdater, instance.props = newProps, instance.state = initialState;
        var internalInstance = {
          queue: [],
          replace: !1
        };
        set(instance, internalInstance);
        var contextType = ctor.contextType;
        if (typeof contextType == "object" && contextType !== null ? instance.context = readContext(contextType) : instance.context = maskedLegacyContext, instance.state === newProps) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        typeof getDerivedStateFromProps == "function" && (instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps)), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(ctor, instance), processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext));
      }
      var emptyTreeContext = {
        id: 1,
        overflow: ""
      };
      function getTreeId(context) {
        var overflow = context.overflow, idWithLeadingBit = context.id, id3 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id3.toString(32) + overflow;
      }
      function pushTreeContext(baseContext, totalChildren, index2) {
        var baseIdWithLeadingBit = baseContext.id, baseOverflow = baseContext.overflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index2 + 1, length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id3 = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
          return {
            id: 1 << restOfLength | id3,
            overflow
          };
        } else {
          var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
          return {
            id: 1 << length | _id,
            overflow: _overflow
          };
        }
      }
      function getBitLength(number2) {
        return 32 - clz32(number2);
      }
      function getLeadingBit(id3) {
        return 1 << getBitLength(id3) - 1;
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x) {
        var asUint = x >>> 0;
        return asUint === 0 ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs = typeof Object.is == "function" ? Object.is : is, currentlyRenderingComponent = null, currentlyRenderingTask = null, firstWorkInProgressHook = null, workInProgressHook = null, isReRender = !1, didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, renderPhaseUpdates = null, numberOfReRenders = 0, RE_RENDER_LIMIT = 25, isInHookUserCodeInDev = !1, currentHookNameInDev;
      function resolveCurrentlyRenderingComponent() {
        if (currentlyRenderingComponent === null)
          throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
        return isInHookUserCodeInDev && error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks"), currentlyRenderingComponent;
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (prevDeps === null)
          return error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
        nextDeps.length !== prevDeps.length && error2(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
        for (var i13 = 0; i13 < prevDeps.length && i13 < nextDeps.length; i13++)
          if (!objectIs(nextDeps[i13], prevDeps[i13]))
            return !1;
        return !0;
      }
      function createHook() {
        if (numberOfReRenders > 0)
          throw new Error("Rendered more hooks than during the previous render");
        return {
          memoizedState: null,
          queue: null,
          next: null
        };
      }
      function createWorkInProgressHook() {
        return workInProgressHook === null ? firstWorkInProgressHook === null ? (isReRender = !1, firstWorkInProgressHook = workInProgressHook = createHook()) : (isReRender = !0, workInProgressHook = firstWorkInProgressHook) : workInProgressHook.next === null ? (isReRender = !1, workInProgressHook = workInProgressHook.next = createHook()) : (isReRender = !0, workInProgressHook = workInProgressHook.next), workInProgressHook;
      }
      function prepareToUseHooks(task, componentIdentity) {
        currentlyRenderingComponent = componentIdentity, currentlyRenderingTask = task, isInHookUserCodeInDev = !1, localIdCounter = 0;
      }
      function finishHooks(Component, props, children, refOrContext) {
        for (; didScheduleRenderPhaseUpdate; )
          didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, numberOfReRenders += 1, workInProgressHook = null, children = Component(props, refOrContext);
        return resetHooksState(), children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        return didRenderIdHook;
      }
      function resetHooksState() {
        isInHookUserCodeInDev = !1, currentlyRenderingComponent = null, currentlyRenderingTask = null, didScheduleRenderPhaseUpdate = !1, firstWorkInProgressHook = null, numberOfReRenders = 0, renderPhaseUpdates = null, workInProgressHook = null;
      }
      function readContext$1(context) {
        return isInHookUserCodeInDev && error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."), readContext(context);
      }
      function useContext8(context) {
        return currentHookNameInDev = "useContext", resolveCurrentlyRenderingComponent(), readContext(context);
      }
      function basicStateReducer(state, action) {
        return typeof action == "function" ? action(state) : action;
      }
      function useState14(initialState) {
        return currentHookNameInDev = "useState", useReducer(
          basicStateReducer,
          // useReducer has a special case to support lazy useState initializers
          initialState
        );
      }
      function useReducer(reducer, initialArg, init) {
        if (reducer !== basicStateReducer && (currentHookNameInDev = "useReducer"), currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook(), isReRender) {
          var queue = workInProgressHook.queue, dispatch = queue.dispatch;
          if (renderPhaseUpdates !== null) {
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate !== void 0) {
              renderPhaseUpdates.delete(queue);
              var newState = workInProgressHook.memoizedState, update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                isInHookUserCodeInDev = !0, newState = reducer(newState, action), isInHookUserCodeInDev = !1, update = update.next;
              } while (update !== null);
              return workInProgressHook.memoizedState = newState, [newState, dispatch];
            }
          }
          return [workInProgressHook.memoizedState, dispatch];
        } else {
          isInHookUserCodeInDev = !0;
          var initialState;
          reducer === basicStateReducer ? initialState = typeof initialArg == "function" ? initialArg() : initialArg : initialState = init !== void 0 ? init(initialArg) : initialArg, isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = initialState;
          var _queue = workInProgressHook.queue = {
            last: null,
            dispatch: null
          }, _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
          return [workInProgressHook.memoizedState, _dispatch];
        }
      }
      function useMemo7(nextCreate, deps) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        if (workInProgressHook !== null) {
          var prevState = workInProgressHook.memoizedState;
          if (prevState !== null && nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps))
              return prevState[0];
          }
        }
        isInHookUserCodeInDev = !0;
        var nextValue = nextCreate();
        return isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function useRef10(initialValue) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var previousRef = workInProgressHook.memoizedState;
        if (previousRef === null) {
          var ref = {
            current: initialValue
          };
          return Object.seal(ref), workInProgressHook.memoizedState = ref, ref;
        } else
          return previousRef;
      }
      function useLayoutEffect3(create, inputs) {
        currentHookNameInDev = "useLayoutEffect", error2("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
      }
      function dispatchAction(componentIdentity, queue, action) {
        if (numberOfReRenders >= RE_RENDER_LIMIT)
          throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        if (componentIdentity === currentlyRenderingComponent) {
          didScheduleRenderPhaseUpdate = !0;
          var update = {
            action,
            next: null
          };
          renderPhaseUpdates === null && (renderPhaseUpdates = /* @__PURE__ */ new Map());
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
          if (firstRenderPhaseUpdate === void 0)
            renderPhaseUpdates.set(queue, update);
          else {
            for (var lastRenderPhaseUpdate = firstRenderPhaseUpdate; lastRenderPhaseUpdate.next !== null; )
              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            lastRenderPhaseUpdate.next = update;
          }
        }
      }
      function useCallback4(callback, deps) {
        return useMemo7(function() {
          return callback;
        }, deps);
      }
      function useMutableSource(source, getSnapshot, subscribe) {
        return resolveCurrentlyRenderingComponent(), getSnapshot(source._source);
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        if (getServerSnapshot === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        return getServerSnapshot();
      }
      function useDeferredValue(value) {
        return resolveCurrentlyRenderingComponent(), value;
      }
      function unsupportedStartTransition() {
        throw new Error("startTransition cannot be called during server rendering.");
      }
      function useTransition() {
        return resolveCurrentlyRenderingComponent(), [!1, unsupportedStartTransition];
      }
      function useId5() {
        var task = currentlyRenderingTask, treeId = getTreeId(task.treeContext), responseState = currentResponseState;
        if (responseState === null)
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
        var localId = localIdCounter++;
        return makeId(responseState, treeId, localId);
      }
      function noop2() {
      }
      var Dispatcher = {
        readContext: readContext$1,
        useContext: useContext8,
        useMemo: useMemo7,
        useReducer,
        useRef: useRef10,
        useState: useState14,
        useInsertionEffect: noop2,
        useLayoutEffect: useLayoutEffect3,
        useCallback: useCallback4,
        // useImperativeHandle is not run in the server environment
        useImperativeHandle: noop2,
        // Effects are not run in the server environment.
        useEffect: noop2,
        // Debugging effect
        useDebugValue: noop2,
        useDeferredValue,
        useTransition,
        useId: useId5,
        // Subscriptions are not setup in a server environment.
        useMutableSource,
        useSyncExternalStore
      }, currentResponseState = null;
      function setCurrentResponseState(responseState) {
        currentResponseState = responseState;
      }
      function getStackByComponentStackNode(componentStack) {
        try {
          var info = "", node = componentStack;
          do {
            switch (node.tag) {
              case 0:
                info += describeBuiltInComponentFrame(node.type, null, null);
                break;
              case 1:
                info += describeFunctionComponentFrame(node.type, null, null);
                break;
              case 2:
                info += describeClassComponentFrame(node.type, null, null);
                break;
            }
            node = node.parent;
          } while (node);
          return info;
        } catch (x) {
          return `
Error generating stack: ` + x.message + `
` + x.stack;
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame, PENDING = 0, COMPLETED = 1, FLUSHED = 2, ABORTED = 3, ERRORED = 4, OPEN = 0, CLOSING = 1, CLOSED = 2, DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
      function defaultErrorHandler(error3) {
        return console.error(error3), null;
      }
      function noop$1() {
      }
      function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError2, onAllReady, onShellReady, onShellError, onFatalError) {
        var pingedTasks = [], abortSet = /* @__PURE__ */ new Set(), request = {
          destination: null,
          responseState,
          progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
          status: OPEN,
          fatalError: null,
          nextSegmentId: 0,
          allPendingTasks: 0,
          pendingRootTasks: 0,
          completedRootSegment: null,
          abortableTasks: abortSet,
          pingedTasks,
          clientRenderedBoundaries: [],
          completedBoundaries: [],
          partialBoundaries: [],
          onError: onError2 === void 0 ? defaultErrorHandler : onError2,
          onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
          onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
          onShellError: onShellError === void 0 ? noop$1 : onShellError,
          onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
        }, rootSegment = createPendingSegment(
          request,
          0,
          null,
          rootFormatContext,
          // Root segments are never embedded in Text on either edge
          !1,
          !1
        );
        rootSegment.parentFlushed = !0;
        var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
        return pingedTasks.push(rootTask), request;
      }
      function pingTask(request, task) {
        var pingedTasks = request.pingedTasks;
        pingedTasks.push(task), pingedTasks.length === 1 && scheduleWork(function() {
          return performWork(request);
        });
      }
      function createSuspenseBoundary(request, fallbackAbortableTasks) {
        return {
          id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
          rootSegmentID: -1,
          parentFlushed: !1,
          pendingTasks: 0,
          forceClientRender: !1,
          completedSegments: [],
          byteSize: 0,
          fallbackAbortableTasks,
          errorDigest: null
        };
      }
      function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
        request.allPendingTasks++, blockedBoundary === null ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
        var task = {
          node,
          ping: function() {
            return pingTask(request, task);
          },
          blockedBoundary,
          blockedSegment,
          abortSet,
          legacyContext,
          context,
          treeContext
        };
        return task.componentStack = null, abortSet.add(task), task;
      }
      function createPendingSegment(request, index2, boundary, formatContext, lastPushedText, textEmbedded) {
        return {
          status: PENDING,
          id: -1,
          // lazily assigned later
          index: index2,
          parentFlushed: !1,
          chunks: [],
          children: [],
          formatContext,
          boundary,
          lastPushedText,
          textEmbedded
        };
      }
      var currentTaskInDEV = null;
      function getCurrentStackInDEV() {
        return currentTaskInDEV === null || currentTaskInDEV.componentStack === null ? "" : getStackByComponentStackNode(currentTaskInDEV.componentStack);
      }
      function pushBuiltInComponentStackInDEV(task, type2) {
        task.componentStack = {
          tag: 0,
          parent: task.componentStack,
          type: type2
        };
      }
      function pushFunctionComponentStackInDEV(task, type2) {
        task.componentStack = {
          tag: 1,
          parent: task.componentStack,
          type: type2
        };
      }
      function pushClassComponentStackInDEV(task, type2) {
        task.componentStack = {
          tag: 2,
          parent: task.componentStack,
          type: type2
        };
      }
      function popComponentStackInDEV(task) {
        task.componentStack === null ? error2("Unexpectedly popped too many stack frames. This is a bug in React.") : task.componentStack = task.componentStack.parent;
      }
      var lastBoundaryErrorComponentStackDev = null;
      function captureBoundaryErrorDetailsDev(boundary, error3) {
        {
          var errorMessage;
          typeof error3 == "string" ? errorMessage = error3 : error3 && typeof error3.message == "string" ? errorMessage = error3.message : errorMessage = String(error3);
          var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
          lastBoundaryErrorComponentStackDev = null, boundary.errorMessage = errorMessage, boundary.errorComponentStack = errorComponentStack;
        }
      }
      function logRecoverableError(request, error3) {
        var errorDigest = request.onError(error3);
        if (errorDigest != null && typeof errorDigest != "string")
          throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
        return errorDigest;
      }
      function fatalError(request, error3) {
        var onShellError = request.onShellError;
        onShellError(error3);
        var onFatalError = request.onFatalError;
        onFatalError(error3), request.destination !== null ? (request.status = CLOSED, closeWithError(request.destination, error3)) : (request.status = CLOSING, request.fatalError = error3);
      }
      function renderSuspenseBoundary(request, task, props) {
        pushBuiltInComponentStackInDEV(task, "Suspense");
        var parentBoundary = task.blockedBoundary, parentSegment = task.blockedSegment, fallback = props.fallback, content = props.children, fallbackAbortSet = /* @__PURE__ */ new Set(), newBoundary = createSuspenseBoundary(request, fallbackAbortSet), insertionIndex = parentSegment.chunks.length, boundarySegment = createPendingSegment(
          request,
          insertionIndex,
          newBoundary,
          parentSegment.formatContext,
          // boundaries never require text embedding at their edges because comment nodes bound them
          !1,
          !1
        );
        parentSegment.children.push(boundarySegment), parentSegment.lastPushedText = !1;
        var contentRootSegment = createPendingSegment(
          request,
          0,
          null,
          parentSegment.formatContext,
          // boundaries never require text embedding at their edges because comment nodes bound them
          !1,
          !1
        );
        contentRootSegment.parentFlushed = !0, task.blockedBoundary = newBoundary, task.blockedSegment = contentRootSegment;
        try {
          if (renderNode(request, task, content), pushSegmentFinale$1(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded), contentRootSegment.status = COMPLETED, queueCompletedSegment(newBoundary, contentRootSegment), newBoundary.pendingTasks === 0) {
            popComponentStackInDEV(task);
            return;
          }
        } catch (error3) {
          contentRootSegment.status = ERRORED, newBoundary.forceClientRender = !0, newBoundary.errorDigest = logRecoverableError(request, error3), captureBoundaryErrorDetailsDev(newBoundary, error3);
        } finally {
          task.blockedBoundary = parentBoundary, task.blockedSegment = parentSegment;
        }
        var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
        suspendedFallbackTask.componentStack = task.componentStack, request.pingedTasks.push(suspendedFallbackTask), popComponentStackInDEV(task);
      }
      function renderHostElement(request, task, type2, props) {
        pushBuiltInComponentStackInDEV(task, type2);
        var segment = task.blockedSegment, children = pushStartInstance(segment.chunks, type2, props, request.responseState, segment.formatContext);
        segment.lastPushedText = !1;
        var prevContext = segment.formatContext;
        segment.formatContext = getChildFormatContext(prevContext, type2, props), renderNode(request, task, children), segment.formatContext = prevContext, pushEndInstance(segment.chunks, type2), segment.lastPushedText = !1, popComponentStackInDEV(task);
      }
      function shouldConstruct$1(Component) {
        return Component.prototype && Component.prototype.isReactComponent;
      }
      function renderWithHooks(request, task, Component, props, secondArg) {
        var componentIdentity = {};
        prepareToUseHooks(task, componentIdentity);
        var result = Component(props, secondArg);
        return finishHooks(Component, props, result, secondArg);
      }
      function finishClassComponent(request, task, instance, Component, props) {
        var nextChildren = instance.render();
        instance.props !== props && (didWarnAboutReassigningProps || error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component"), didWarnAboutReassigningProps = !0);
        {
          var childContextTypes = Component.childContextTypes;
          if (childContextTypes != null) {
            var previousContext = task.legacyContext, mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
            task.legacyContext = mergedContext, renderNodeDestructive(request, task, nextChildren), task.legacyContext = previousContext;
            return;
          }
        }
        renderNodeDestructive(request, task, nextChildren);
      }
      function renderClassComponent(request, task, Component, props) {
        pushClassComponentStackInDEV(task, Component);
        var maskedContext = getMaskedContext(Component, task.legacyContext), instance = constructClassInstance(Component, props, maskedContext);
        mountClassInstance(instance, Component, props, maskedContext), finishClassComponent(request, task, instance, Component, props), popComponentStackInDEV(task);
      }
      var didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutReassigningProps = !1, didWarnAboutGenerators = !1, didWarnAboutMaps = !1, hasWarnedAboutUsingContextAsConsumer = !1;
      function renderIndeterminateComponent(request, task, Component, props) {
        var legacyContext;
        if (legacyContext = getMaskedContext(Component, task.legacyContext), pushFunctionComponentStackInDEV(task, Component), Component.prototype && typeof Component.prototype.render == "function") {
          var componentName = getComponentNameFromType(Component) || "Unknown";
          didWarnAboutBadClass[componentName] || (error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = !0);
        }
        var value = renderWithHooks(request, task, Component, props, legacyContext), hasId = checkDidRenderIdHook();
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component) || "Unknown";
          didWarnAboutModulePatternComponent[_componentName] || (error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = !0);
        }
        if (
          // Run these checks in production only if the flag is off.
          // Eventually we'll delete this branch altogether.
          typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0
        ) {
          {
            var _componentName2 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName2] || (error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = !0);
          }
          mountClassInstance(value, Component, props, legacyContext), finishClassComponent(request, task, value, Component, props);
        } else if (validateFunctionComponentInDev(Component), hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index2 = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index2);
          try {
            renderNodeDestructive(request, task, value);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, value);
        popComponentStackInDEV(task);
      }
      function validateFunctionComponentInDev(Component) {
        {
          if (Component && Component.childContextTypes && error2("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component"), typeof Component.getDerivedStateFromProps == "function") {
            var _componentName3 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = !0);
          }
          if (typeof Component.contextType == "object" && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error2("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = !0);
          }
        }
      }
      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = assign({}, baseProps), defaultProps = Component.defaultProps;
          for (var propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          return props;
        }
        return baseProps;
      }
      function renderForwardRef(request, task, type2, props, ref) {
        pushFunctionComponentStackInDEV(task, type2.render);
        var children = renderWithHooks(request, task, type2.render, props, ref), hasId = checkDidRenderIdHook();
        if (hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index2 = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index2);
          try {
            renderNodeDestructive(request, task, children);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, children);
        popComponentStackInDEV(task);
      }
      function renderMemo(request, task, type2, props, ref) {
        var innerType = type2.type, resolvedProps = resolveDefaultProps(innerType, props);
        renderElement(request, task, innerType, resolvedProps, ref);
      }
      function renderContextConsumer(request, task, context, props) {
        context._context === void 0 ? context !== context.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = !0, error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context = context._context;
        var render = props.children;
        typeof render != "function" && error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        var newValue = readContext(context), newChildren = render(newValue);
        renderNodeDestructive(request, task, newChildren);
      }
      function renderContextProvider(request, task, type2, props) {
        var context = type2._context, value = props.value, children = props.children, prevSnapshot;
        prevSnapshot = task.context, task.context = pushProvider(context, value), renderNodeDestructive(request, task, children), task.context = popProvider(context), prevSnapshot !== task.context && error2("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
      }
      function renderLazyComponent(request, task, lazyComponent, props, ref) {
        pushBuiltInComponentStackInDEV(task, "Lazy");
        var payload = lazyComponent._payload, init = lazyComponent._init, Component = init(payload), resolvedProps = resolveDefaultProps(Component, props);
        renderElement(request, task, Component, resolvedProps, ref), popComponentStackInDEV(task);
      }
      function renderElement(request, task, type2, props, ref) {
        if (typeof type2 == "function")
          if (shouldConstruct$1(type2)) {
            renderClassComponent(request, task, type2, props);
            return;
          } else {
            renderIndeterminateComponent(request, task, type2, props);
            return;
          }
        if (typeof type2 == "string") {
          renderHostElement(request, task, type2, props);
          return;
        }
        switch (type2) {
          case REACT_LEGACY_HIDDEN_TYPE:
          case REACT_DEBUG_TRACING_MODE_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_FRAGMENT_TYPE: {
            renderNodeDestructive(request, task, props.children);
            return;
          }
          case REACT_SUSPENSE_LIST_TYPE: {
            pushBuiltInComponentStackInDEV(task, "SuspenseList"), renderNodeDestructive(request, task, props.children), popComponentStackInDEV(task);
            return;
          }
          case REACT_SCOPE_TYPE:
            throw new Error("ReactDOMServer does not yet support scope components.");
          case REACT_SUSPENSE_TYPE: {
            renderSuspenseBoundary(request, task, props);
            return;
          }
        }
        if (typeof type2 == "object" && type2 !== null)
          switch (type2.$$typeof) {
            case REACT_FORWARD_REF_TYPE: {
              renderForwardRef(request, task, type2, props, ref);
              return;
            }
            case REACT_MEMO_TYPE: {
              renderMemo(request, task, type2, props, ref);
              return;
            }
            case REACT_PROVIDER_TYPE: {
              renderContextProvider(request, task, type2, props);
              return;
            }
            case REACT_CONTEXT_TYPE: {
              renderContextConsumer(request, task, type2, props);
              return;
            }
            case REACT_LAZY_TYPE: {
              renderLazyComponent(request, task, type2, props);
              return;
            }
          }
        var info = "";
        throw (type2 === void 0 || typeof type2 == "object" && type2 !== null && Object.keys(type2).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."), new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type2 == null ? type2 : typeof type2) + "." + info));
      }
      function validateIterable(iterable, iteratorFn) {
        typeof Symbol == "function" && // $FlowFixMe Flow doesn't know about toStringTag
        iterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = !0), iterable.entries === iteratorFn && (didWarnAboutMaps || error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
      }
      function renderNodeDestructive(request, task, node) {
        try {
          return renderNodeDestructiveImpl(request, task, node);
        } catch (x) {
          throw typeof x == "object" && x !== null && typeof x.then == "function" || (lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV()), x;
        }
      }
      function renderNodeDestructiveImpl(request, task, node) {
        if (task.node = node, typeof node == "object" && node !== null) {
          switch (node.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var element = node, type2 = element.type, props = element.props, ref = element.ref;
              renderElement(request, task, type2, props, ref);
              return;
            }
            case REACT_PORTAL_TYPE:
              throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
            case REACT_LAZY_TYPE: {
              var lazyNode = node, payload = lazyNode._payload, init = lazyNode._init, resolvedNode;
              try {
                resolvedNode = init(payload);
              } catch (x) {
                throw typeof x == "object" && x !== null && typeof x.then == "function" && pushBuiltInComponentStackInDEV(task, "Lazy"), x;
              }
              renderNodeDestructive(request, task, resolvedNode);
              return;
            }
          }
          if (isArray(node)) {
            renderChildrenArray(request, task, node);
            return;
          }
          var iteratorFn = getIteratorFn(node);
          if (iteratorFn) {
            validateIterable(node, iteratorFn);
            var iterator = iteratorFn.call(node);
            if (iterator) {
              var step2 = iterator.next();
              if (!step2.done) {
                var children = [];
                do
                  children.push(step2.value), step2 = iterator.next();
                while (!step2.done);
                renderChildrenArray(request, task, children);
                return;
              }
              return;
            }
          }
          var childString = Object.prototype.toString.call(node);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        if (typeof node == "string") {
          var segment = task.blockedSegment;
          segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
          return;
        }
        if (typeof node == "number") {
          var _segment = task.blockedSegment;
          _segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
          return;
        }
        typeof node == "function" && error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
      function renderChildrenArray(request, task, children) {
        for (var totalChildren = children.length, i13 = 0; i13 < totalChildren; i13++) {
          var prevTreeContext = task.treeContext;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i13);
          try {
            renderNode(request, task, children[i13]);
          } finally {
            task.treeContext = prevTreeContext;
          }
        }
      }
      function spawnNewSuspendedTask(request, task, x) {
        var segment = task.blockedSegment, insertionIndex = segment.chunks.length, newSegment = createPendingSegment(
          request,
          insertionIndex,
          null,
          segment.formatContext,
          // Adopt the parent segment's leading text embed
          segment.lastPushedText,
          // Assume we are text embedded at the trailing edge
          !0
        );
        segment.children.push(newSegment), segment.lastPushedText = !1;
        var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
        task.componentStack !== null && (newTask.componentStack = task.componentStack.parent);
        var ping = newTask.ping;
        x.then(ping, ping);
      }
      function renderNode(request, task, node) {
        var previousFormatContext = task.blockedSegment.formatContext, previousLegacyContext = task.legacyContext, previousContext = task.context, previousComponentStack = null;
        previousComponentStack = task.componentStack;
        try {
          return renderNodeDestructive(request, task, node);
        } catch (x) {
          if (resetHooksState(), typeof x == "object" && x !== null && typeof x.then == "function") {
            spawnNewSuspendedTask(request, task, x), task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack;
            return;
          } else
            throw task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack, x;
        }
      }
      function erroredTask(request, boundary, segment, error3) {
        var errorDigest = logRecoverableError(request, error3);
        if (boundary === null ? fatalError(request, error3) : (boundary.pendingTasks--, boundary.forceClientRender || (boundary.forceClientRender = !0, boundary.errorDigest = errorDigest, captureBoundaryErrorDetailsDev(boundary, error3), boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary))), request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function abortTaskSoft(task) {
        var request = this, boundary = task.blockedBoundary, segment = task.blockedSegment;
        segment.status = ABORTED, finishedTask(request, boundary, segment);
      }
      function abortTask(task, request, reason) {
        var boundary = task.blockedBoundary, segment = task.blockedSegment;
        if (segment.status = ABORTED, boundary === null)
          request.allPendingTasks--, request.status !== CLOSED && (request.status = CLOSED, request.destination !== null && close(request.destination));
        else {
          if (boundary.pendingTasks--, !boundary.forceClientRender) {
            boundary.forceClientRender = !0;
            var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
            boundary.errorDigest = request.onError(_error);
            {
              var errorPrefix = "The server did not finish this Suspense boundary: ";
              _error && typeof _error.message == "string" ? _error = errorPrefix + _error.message : _error = errorPrefix + String(_error);
              var previousTaskInDev = currentTaskInDEV;
              currentTaskInDEV = task;
              try {
                captureBoundaryErrorDetailsDev(boundary, _error);
              } finally {
                currentTaskInDEV = previousTaskInDev;
              }
            }
            boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary);
          }
          if (boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
            return abortTask(fallbackTask, request, reason);
          }), boundary.fallbackAbortableTasks.clear(), request.allPendingTasks--, request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
      }
      function queueCompletedSegment(boundary, segment) {
        if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
          var childSegment = segment.children[0];
          childSegment.id = segment.id, childSegment.parentFlushed = !0, childSegment.status === COMPLETED && queueCompletedSegment(boundary, childSegment);
        } else {
          var completedSegments = boundary.completedSegments;
          completedSegments.push(segment);
        }
      }
      function finishedTask(request, boundary, segment) {
        if (boundary === null) {
          if (segment.parentFlushed) {
            if (request.completedRootSegment !== null)
              throw new Error("There can only be one root segment. This is a bug in React.");
            request.completedRootSegment = segment;
          }
          if (request.pendingRootTasks--, request.pendingRootTasks === 0) {
            request.onShellError = noop$1;
            var onShellReady = request.onShellReady;
            onShellReady();
          }
        } else if (boundary.pendingTasks--, !boundary.forceClientRender) {
          if (boundary.pendingTasks === 0)
            segment.parentFlushed && segment.status === COMPLETED && queueCompletedSegment(boundary, segment), boundary.parentFlushed && request.completedBoundaries.push(boundary), boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request), boundary.fallbackAbortableTasks.clear();
          else if (segment.parentFlushed && segment.status === COMPLETED) {
            queueCompletedSegment(boundary, segment);
            var completedSegments = boundary.completedSegments;
            completedSegments.length === 1 && boundary.parentFlushed && request.partialBoundaries.push(boundary);
          }
        }
        if (request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function retryTask(request, task) {
        var segment = task.blockedSegment;
        if (segment.status === PENDING) {
          switchContext(task.context);
          var prevTaskInDEV = null;
          prevTaskInDEV = currentTaskInDEV, currentTaskInDEV = task;
          try {
            renderNodeDestructive(request, task, task.node), pushSegmentFinale$1(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded), task.abortSet.delete(task), segment.status = COMPLETED, finishedTask(request, task.blockedBoundary, segment);
          } catch (x) {
            if (resetHooksState(), typeof x == "object" && x !== null && typeof x.then == "function") {
              var ping = task.ping;
              x.then(ping, ping);
            } else
              task.abortSet.delete(task), segment.status = ERRORED, erroredTask(request, task.blockedBoundary, segment, x);
          } finally {
            currentTaskInDEV = prevTaskInDEV;
          }
        }
      }
      function performWork(request) {
        if (request.status !== CLOSED) {
          var prevContext = getActiveContext(), prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack, ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks, i13;
            for (i13 = 0; i13 < pingedTasks.length; i13++) {
              var task = pingedTasks[i13];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i13), request.destination !== null && flushCompletedQueues(request, request.destination);
          } catch (error3) {
            logRecoverableError(request, error3), fatalError(request, error3);
          } finally {
            setCurrentResponseState(prevResponseState), ReactCurrentDispatcher$1.current = prevDispatcher, ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl, prevDispatcher === Dispatcher && switchContext(prevContext);
          }
        }
      }
      function flushSubtree(request, destination, segment) {
        switch (segment.parentFlushed = !0, segment.status) {
          case PENDING: {
            var segmentID = segment.id = request.nextSegmentId++;
            return segment.lastPushedText = !1, segment.textEmbedded = !1, writePlaceholder(destination, request.responseState, segmentID);
          }
          case COMPLETED: {
            segment.status = FLUSHED;
            for (var r25 = !0, chunks = segment.chunks, chunkIdx = 0, children = segment.children, childIdx = 0; childIdx < children.length; childIdx++) {
              for (var nextChild = children[childIdx]; chunkIdx < nextChild.index; chunkIdx++)
                writeChunk(destination, chunks[chunkIdx]);
              r25 = flushSegment(request, destination, nextChild);
            }
            for (; chunkIdx < chunks.length - 1; chunkIdx++)
              writeChunk(destination, chunks[chunkIdx]);
            return chunkIdx < chunks.length && (r25 = writeChunkAndReturn(destination, chunks[chunkIdx])), r25;
          }
          default:
            throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
        }
      }
      function flushSegment(request, destination, segment) {
        var boundary = segment.boundary;
        if (boundary === null)
          return flushSubtree(request, destination, segment);
        if (boundary.parentFlushed = !0, boundary.forceClientRender)
          return writeStartClientRenderedSuspenseBoundary$1(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack), flushSubtree(request, destination, segment), writeEndClientRenderedSuspenseBoundary$1(destination, request.responseState);
        if (boundary.pendingTasks > 0) {
          boundary.rootSegmentID = request.nextSegmentId++, boundary.completedSegments.length > 0 && request.partialBoundaries.push(boundary);
          var id3 = boundary.id = assignSuspenseBoundaryID(request.responseState);
          return writeStartPendingSuspenseBoundary(destination, request.responseState, id3), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
        } else {
          if (boundary.byteSize > request.progressiveChunkSize)
            return boundary.rootSegmentID = request.nextSegmentId++, request.completedBoundaries.push(boundary), writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
          writeStartCompletedSuspenseBoundary$1(destination, request.responseState);
          var completedSegments = boundary.completedSegments;
          if (completedSegments.length !== 1)
            throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
          var contentSegment = completedSegments[0];
          return flushSegment(request, destination, contentSegment), writeEndCompletedSuspenseBoundary$1(destination, request.responseState);
        }
      }
      function flushClientRenderedBoundary(request, destination, boundary) {
        return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
      }
      function flushSegmentContainer(request, destination, segment) {
        return writeStartSegment(destination, request.responseState, segment.formatContext, segment.id), flushSegment(request, destination, segment), writeEndSegment(destination, segment.formatContext);
      }
      function flushCompletedBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i13 = 0; i13 < completedSegments.length; i13++) {
          var segment = completedSegments[i13];
          flushPartiallyCompletedSegment(request, destination, boundary, segment);
        }
        return completedSegments.length = 0, writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
      }
      function flushPartialBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i13 = 0; i13 < completedSegments.length; i13++) {
          var segment = completedSegments[i13];
          if (!flushPartiallyCompletedSegment(request, destination, boundary, segment))
            return i13++, completedSegments.splice(0, i13), !1;
        }
        return completedSegments.splice(0, i13), !0;
      }
      function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
        if (segment.status === FLUSHED)
          return !0;
        var segmentID = segment.id;
        if (segmentID === -1) {
          var rootSegmentID = segment.id = boundary.rootSegmentID;
          if (rootSegmentID === -1)
            throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
          return flushSegmentContainer(request, destination, segment);
        } else
          return flushSegmentContainer(request, destination, segment), writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
      }
      function flushCompletedQueues(request, destination) {
        try {
          var completedRootSegment = request.completedRootSegment;
          completedRootSegment !== null && request.pendingRootTasks === 0 && (flushSegment(request, destination, completedRootSegment), request.completedRootSegment = null, writeCompletedRoot(destination, request.responseState));
          var clientRenderedBoundaries = request.clientRenderedBoundaries, i13;
          for (i13 = 0; i13 < clientRenderedBoundaries.length; i13++) {
            var boundary = clientRenderedBoundaries[i13];
            if (!flushClientRenderedBoundary(request, destination, boundary)) {
              request.destination = null, i13++, clientRenderedBoundaries.splice(0, i13);
              return;
            }
          }
          clientRenderedBoundaries.splice(0, i13);
          var completedBoundaries = request.completedBoundaries;
          for (i13 = 0; i13 < completedBoundaries.length; i13++) {
            var _boundary = completedBoundaries[i13];
            if (!flushCompletedBoundary(request, destination, _boundary)) {
              request.destination = null, i13++, completedBoundaries.splice(0, i13);
              return;
            }
          }
          completedBoundaries.splice(0, i13);
          var partialBoundaries = request.partialBoundaries;
          for (i13 = 0; i13 < partialBoundaries.length; i13++) {
            var _boundary2 = partialBoundaries[i13];
            if (!flushPartialBoundary(request, destination, _boundary2)) {
              request.destination = null, i13++, partialBoundaries.splice(0, i13);
              return;
            }
          }
          partialBoundaries.splice(0, i13);
          var largeBoundaries = request.completedBoundaries;
          for (i13 = 0; i13 < largeBoundaries.length; i13++) {
            var _boundary3 = largeBoundaries[i13];
            if (!flushCompletedBoundary(request, destination, _boundary3)) {
              request.destination = null, i13++, largeBoundaries.splice(0, i13);
              return;
            }
          }
          largeBoundaries.splice(0, i13);
        } finally {
          request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 && (request.abortableTasks.size !== 0 && error2("There was still abortable task at the root when we closed. This is a bug in React."), close(destination));
        }
      }
      function startWork(request) {
        scheduleWork(function() {
          return performWork(request);
        });
      }
      function startFlowing(request, destination) {
        if (request.status === CLOSING) {
          request.status = CLOSED, closeWithError(destination, request.fatalError);
          return;
        }
        if (request.status !== CLOSED && request.destination === null) {
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error3) {
            logRecoverableError(request, error3), fatalError(request, error3);
          }
        }
      }
      function abort(request, reason) {
        try {
          var abortableTasks = request.abortableTasks;
          abortableTasks.forEach(function(task) {
            return abortTask(task, request, reason);
          }), abortableTasks.clear(), request.destination !== null && flushCompletedQueues(request, request.destination);
        } catch (error3) {
          logRecoverableError(request, error3), fatalError(request, error3);
        }
      }
      function onError() {
      }
      function renderToStringImpl(children, options, generateStaticMarkup, abortReason) {
        var didFatal = !1, fatalError2 = null, result = "", destination = {
          push: function(chunk) {
            return chunk !== null && (result += chunk), !0;
          },
          destroy: function(error3) {
            didFatal = !0, fatalError2 = error3;
          }
        }, readyToStream = !1;
        function onShellReady() {
          readyToStream = !0;
        }
        var request = createRequest(children, createResponseState$1(generateStaticMarkup, options ? options.identifierPrefix : void 0), createRootFormatContext(), 1 / 0, onError, void 0, onShellReady, void 0, void 0);
        if (startWork(request), abort(request, abortReason), startFlowing(request, destination), didFatal)
          throw fatalError2;
        if (!readyToStream)
          throw new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
        return result;
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype), subClass.prototype.constructor = subClass, subClass.__proto__ = superClass;
      }
      var ReactMarkupReadableStream = /* @__PURE__ */ function(_Readable) {
        _inheritsLoose(ReactMarkupReadableStream2, _Readable);
        function ReactMarkupReadableStream2() {
          var _this;
          return _this = _Readable.call(this, {}) || this, _this.request = null, _this.startedFlowing = !1, _this;
        }
        var _proto = ReactMarkupReadableStream2.prototype;
        return _proto._destroy = function(err, callback) {
          abort(this.request), callback(err);
        }, _proto._read = function(size2) {
          this.startedFlowing && startFlowing(this.request, this);
        }, ReactMarkupReadableStream2;
      }(stream.Readable);
      function onError$1() {
      }
      function renderToNodeStreamImpl(children, options, generateStaticMarkup) {
        function onAllReady() {
          destination.startedFlowing = !0, startFlowing(request, destination);
        }
        var destination = new ReactMarkupReadableStream(), request = createRequest(children, createResponseState$1(!1, options ? options.identifierPrefix : void 0), createRootFormatContext(), 1 / 0, onError$1, onAllReady, void 0, void 0);
        return destination.request = request, startWork(request), destination;
      }
      function renderToNodeStream(children, options) {
        return error2("renderToNodeStream is deprecated. Use renderToPipeableStream instead."), renderToNodeStreamImpl(children, options);
      }
      function renderToStaticNodeStream(children, options) {
        return renderToNodeStreamImpl(children, options);
      }
      function renderToString(children, options) {
        return renderToStringImpl(children, options, !1, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server');
      }
      function renderToStaticMarkup(children, options) {
        return renderToStringImpl(children, options, !0, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server');
      }
      exports.renderToNodeStream = renderToNodeStream, exports.renderToStaticMarkup = renderToStaticMarkup, exports.renderToStaticNodeStream = renderToStaticNodeStream, exports.renderToString = renderToString, exports.version = ReactVersion;
    })();
  }
});

// ../../../node_modules/react-dom/cjs/react-dom-server.node.development.js
var require_react_dom_server_node_development = __commonJS({
  "../../../node_modules/react-dom/cjs/react-dom-server.node.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React12 = require_react(), util = require("util"), ReactVersion = "18.2.0", ReactSharedInternals = React12.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function warn(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning("warn", format, args);
        }
      }
      function error2(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      function scheduleWork(callback) {
        setImmediate(callback);
      }
      function flushBuffered(destination) {
        typeof destination.flush == "function" && destination.flush();
      }
      var VIEW_SIZE = 2048, currentView = null, writtenBytes = 0, destinationHasCapacity = !0;
      function beginWriting(destination) {
        currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0, destinationHasCapacity = !0;
      }
      function writeStringChunk(destination, stringChunk) {
        if (stringChunk.length !== 0) {
          if (stringChunk.length * 3 > VIEW_SIZE) {
            writtenBytes > 0 && (writeToDestination(destination, currentView.subarray(0, writtenBytes)), currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0), writeToDestination(destination, textEncoder.encode(stringChunk));
            return;
          }
          var target = currentView;
          writtenBytes > 0 && (target = currentView.subarray(writtenBytes));
          var _textEncoder$encodeIn = textEncoder.encodeInto(stringChunk, target), read = _textEncoder$encodeIn.read, written = _textEncoder$encodeIn.written;
          writtenBytes += written, read < stringChunk.length && (writeToDestination(destination, currentView), currentView = new Uint8Array(VIEW_SIZE), writtenBytes = textEncoder.encodeInto(stringChunk.slice(read), currentView).written), writtenBytes === VIEW_SIZE && (writeToDestination(destination, currentView), currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0);
        }
      }
      function writeViewChunk(destination, chunk) {
        if (chunk.byteLength !== 0) {
          if (chunk.byteLength > VIEW_SIZE) {
            writtenBytes > 0 && (writeToDestination(destination, currentView.subarray(0, writtenBytes)), currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0), writeToDestination(destination, chunk);
            return;
          }
          var bytesToWrite = chunk, allowableBytes = currentView.length - writtenBytes;
          allowableBytes < bytesToWrite.byteLength && (allowableBytes === 0 ? writeToDestination(destination, currentView) : (currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes), writtenBytes += allowableBytes, writeToDestination(destination, currentView), bytesToWrite = bytesToWrite.subarray(allowableBytes)), currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0), currentView.set(bytesToWrite, writtenBytes), writtenBytes += bytesToWrite.byteLength, writtenBytes === VIEW_SIZE && (writeToDestination(destination, currentView), currentView = new Uint8Array(VIEW_SIZE), writtenBytes = 0);
        }
      }
      function writeChunk(destination, chunk) {
        typeof chunk == "string" ? writeStringChunk(destination, chunk) : writeViewChunk(destination, chunk);
      }
      function writeToDestination(destination, view) {
        var currentHasCapacity = destination.write(view);
        destinationHasCapacity = destinationHasCapacity && currentHasCapacity;
      }
      function writeChunkAndReturn(destination, chunk) {
        return writeChunk(destination, chunk), destinationHasCapacity;
      }
      function completeWriting(destination) {
        currentView && writtenBytes > 0 && destination.write(currentView.subarray(0, writtenBytes)), currentView = null, writtenBytes = 0, destinationHasCapacity = !0;
      }
      function close(destination) {
        destination.end();
      }
      var textEncoder = new util.TextEncoder();
      function stringToChunk(content) {
        return content;
      }
      function stringToPrecomputedChunk(content) {
        return textEncoder.encode(content);
      }
      function closeWithError(destination, error3) {
        destination.destroy(error3);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type2 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type2;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error2("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error2("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value))
          return error2("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? !0 : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? !1 : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = !0, !0) : (illegalAttributeNameCache[attributeName] = !0, error2("Invalid attribute name: `%s`", attributeName), !1);
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED)
          return !1;
        switch (typeof value) {
          case "function":
          case "symbol":
            return !0;
          case "boolean": {
            if (isCustomComponentTag)
              return !1;
            if (propertyInfo !== null)
              return !propertyInfo.acceptsBooleans;
            var prefix3 = name.toLowerCase().slice(0, 5);
            return prefix3 !== "data-" && prefix3 !== "aria-";
          }
          default:
            return !1;
        }
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type2, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type2 === BOOLEANISH_STRING || type2 === BOOLEAN || type2 === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type2, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
      }
      var properties = {}, reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        // TODO: This prevents the assignment of defaultValue to regular
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "allowFullScreen",
        "async",
        // Note: there is a special case that prevents it from being written to the DOM
        // on the client side because the browsers are inconsistent. Instead we call focus().
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        // Microdata
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !1,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "checked",
        // Note: `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`. We have special logic for handling this.
        "multiple",
        "muted",
        "selected"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !0,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "capture",
        "download"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "cols",
        "rows",
        "size",
        "span"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          !1,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g, capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/1999/xlink",
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "xml:base",
        "xml:lang",
        "xml:space"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          !1,
          // sanitizeURL
          !1
        );
      }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        !1,
        // mustUseProperty
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        !0,
        // sanitizeURL
        !1
      ), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !0,
          // sanitizeURL
          !0
        );
      });
      var isUnitlessNumber = {
        animationIterationCount: !0,
        aspectRatio: !0,
        borderImageOutset: !0,
        borderImageSlice: !0,
        borderImageWidth: !0,
        boxFlex: !0,
        boxFlexGroup: !0,
        boxOrdinalGroup: !0,
        columnCount: !0,
        columns: !0,
        flex: !0,
        flexGrow: !0,
        flexPositive: !0,
        flexShrink: !0,
        flexNegative: !0,
        flexOrder: !0,
        gridArea: !0,
        gridRow: !0,
        gridRowEnd: !0,
        gridRowSpan: !0,
        gridRowStart: !0,
        gridColumn: !0,
        gridColumnEnd: !0,
        gridColumnSpan: !0,
        gridColumnStart: !0,
        fontWeight: !0,
        lineClamp: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        tabSize: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0,
        // SVG-related properties
        fillOpacity: !0,
        floodOpacity: !0,
        stopOpacity: !0,
        strokeDasharray: !0,
        strokeDashoffset: !0,
        strokeMiterlimit: !0,
        strokeOpacity: !0,
        strokeWidth: !0
      };
      function prefixKey(prefix3, key) {
        return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      var hasReadOnlyValue = {
        button: !0,
        checkbox: !0,
        image: !0,
        hidden: !0,
        radio: !0,
        reset: !0,
        submit: !0
      };
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1)
          return typeof props.is == "string";
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return !1;
          default:
            return !0;
        }
      }
      var ariaProperties = {
        "aria-current": 0,
        // state
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        // state
        "aria-hidden": 0,
        // state
        "aria-invalid": 0,
        // state
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        // Widget Attributes
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        // Live Region Attributes
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        // Drag-and-Drop Attributes
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        // Relationship Attributes
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return !0;
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null)
              return error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = !0, !0;
            if (name !== correctName)
              return error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = !0, !0;
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null)
              return warnedProperties[name] = !0, !1;
            if (name !== standardName)
              return error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = !0, !0;
          }
        }
        return !0;
      }
      function warnInvalidARIAProps(type2, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type2, key);
            isValid || invalidProps.push(key);
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          invalidProps.length === 1 ? error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type2) : invalidProps.length > 1 && error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type2);
        }
      }
      function validateProperties(type2, props) {
        isCustomComponent(type2, props) || warnInvalidARIAProps(type2, props);
      }
      var didWarnValueNull = !1;
      function validateProperties$1(type2, props) {
        {
          if (type2 !== "input" && type2 !== "textarea" && type2 !== "select")
            return;
          props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = !0, type2 === "select" && props.multiple ? error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type2) : error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type2));
        }
      }
      var possibleStandardNames = {
        // HTML
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        // SVG
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return !0;
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
            return error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = !0, !0;
          if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name))
              return !0;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null)
              return error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = !0, !0;
            if (EVENT_NAME_REGEX.test(name))
              return error2("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = !0, !0;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = !0, !0;
          if (rARIA$1.test(name) || rARIACamel$1.test(name))
            return !0;
          if (lowerCasedName === "innerhtml")
            return error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "aria")
            return error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
            return error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = !0, !0;
          if (typeof value == "number" && isNaN(value))
            return error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = !0, !0;
          var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name)
              return error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = !0, !0;
          } else if (!isReserved && name !== lowerCasedName)
            return error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = !0, !0;
          return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (value ? error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name), warnedProperties$1[name] = !0, !0) : isReserved ? !0 : shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (warnedProperties$1[name] = !0, !1) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = !0), !0);
        };
      }
      var warnUnknownProperties = function(type2, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type2, key, props[key], eventRegistry);
            isValid || unknownProps.push(key);
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          unknownProps.length === 1 ? error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type2) : unknownProps.length > 1 && error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type2);
        }
      };
      function validateProperties$2(type2, props, eventRegistry) {
        isCustomComponent(type2, props) || warnUnknownProperties(type2, props, eventRegistry);
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }, warnHyphenatedStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error2(
            "Unsupported style property %s. Did you mean %s?",
            name,
            // As Andi Smith suggests
            // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
            // is converted to lowercase `ms`.
            camelize(name.replace(msPattern, "ms-"))
          ));
        }, warnBadVendoredStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1)));
        }, warnStyleValueWithSemicolon = function(name, value) {
          warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, "")));
        }, warnStyleValueIsNaN = function(name, value) {
          warnedForNaNValue || (warnedForNaNValue = !0, error2("`NaN` is an invalid value for the `%s` css style property.", name));
        }, warnStyleValueIsInfinity = function(name, value) {
          warnedForInfinityValue || (warnedForInfinityValue = !0, error2("`Infinity` is an invalid value for the `%s` css style property.", name));
        };
        warnValidStyle = function(name, value) {
          name.indexOf("-") > -1 ? warnHyphenatedStyleName(name) : badVendoredStyleNamePattern.test(name) ? warnBadVendoredStyleName(name) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name, value) : isFinite(value) || warnStyleValueIsInfinity(name, value));
        };
      }
      var warnValidStyle$1 = warnValidStyle, matchHtmlRegExp = /["'&<>]/;
      function escapeHtml(string) {
        checkHtmlStringCoercion(string);
        var str = "" + string, match = matchHtmlRegExp.exec(str);
        if (!match)
          return str;
        var escape2, html = "", index2, lastIndex = 0;
        for (index2 = match.index; index2 < str.length; index2++) {
          switch (str.charCodeAt(index2)) {
            case 34:
              escape2 = "&quot;";
              break;
            case 38:
              escape2 = "&amp;";
              break;
            case 39:
              escape2 = "&#x27;";
              break;
            case 60:
              escape2 = "&lt;";
              break;
            case 62:
              escape2 = "&gt;";
              break;
            default:
              continue;
          }
          lastIndex !== index2 && (html += str.substring(lastIndex, index2)), lastIndex = index2 + 1, html += escape2;
        }
        return lastIndex !== index2 ? html + str.substring(lastIndex, index2) : html;
      }
      function escapeTextForBrowser(text) {
        return typeof text == "boolean" || typeof text == "number" ? "" + text : escapeHtml(text);
      }
      var uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
      }
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = !1;
      function sanitizeURL(url) {
        !didWarn && isJavaScriptProtocol.test(url) && (didWarn = !0, error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
      }
      var isArrayImpl = Array.isArray;
      function isArray(a9) {
        return isArrayImpl(a9);
      }
      var startInlineScript = stringToPrecomputedChunk("<script>"), endInlineScript = stringToPrecomputedChunk("</script>"), startScriptSrc = stringToPrecomputedChunk('<script src="'), startModuleSrc = stringToPrecomputedChunk('<script type="module" src="'), endAsyncScript = stringToPrecomputedChunk('" async=""></script>');
      function escapeBootstrapScriptContent(scriptText) {
        return checkHtmlStringCoercion(scriptText), ("" + scriptText).replace(scriptRegex, scriptReplacer);
      }
      var scriptRegex = /(<\/|<)(s)(cript)/gi, scriptReplacer = function(match, prefix3, s, suffix2) {
        return "" + prefix3 + (s === "s" ? "\\u0073" : "\\u0053") + suffix2;
      };
      function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
        var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix, inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">'), bootstrapChunks = [];
        if (bootstrapScriptContent !== void 0 && bootstrapChunks.push(inlineScriptWithNonce, escapeBootstrapScriptContent(bootstrapScriptContent), endInlineScript), bootstrapScripts !== void 0)
          for (var i13 = 0; i13 < bootstrapScripts.length; i13++)
            bootstrapChunks.push(startScriptSrc, escapeTextForBrowser(bootstrapScripts[i13]), endAsyncScript);
        if (bootstrapModules !== void 0)
          for (var _i = 0; _i < bootstrapModules.length; _i++)
            bootstrapChunks.push(startModuleSrc, escapeTextForBrowser(bootstrapModules[_i]), endAsyncScript);
        return {
          bootstrapChunks,
          startInlineScript: inlineScriptWithNonce,
          placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
          segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
          boundaryPrefix: idPrefix + "B:",
          idPrefix,
          nextSuspenseID: 0,
          sentCompleteSegmentFunction: !1,
          sentCompleteBoundaryFunction: !1,
          sentClientRenderFunction: !1
        };
      }
      var ROOT_HTML_MODE = 0, HTML_MODE = 1, SVG_MODE = 2, MATHML_MODE = 3, HTML_TABLE_MODE = 4, HTML_TABLE_BODY_MODE = 5, HTML_TABLE_ROW_MODE = 6, HTML_COLGROUP_MODE = 7;
      function createFormatContext(insertionMode, selectedValue) {
        return {
          insertionMode,
          selectedValue
        };
      }
      function createRootFormatContext(namespaceURI) {
        var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
        return createFormatContext(insertionMode, null);
      }
      function getChildFormatContext(parentContext, type2, props) {
        switch (type2) {
          case "select":
            return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
          case "svg":
            return createFormatContext(SVG_MODE, null);
          case "math":
            return createFormatContext(MATHML_MODE, null);
          case "foreignObject":
            return createFormatContext(HTML_MODE, null);
          case "table":
            return createFormatContext(HTML_TABLE_MODE, null);
          case "thead":
          case "tbody":
          case "tfoot":
            return createFormatContext(HTML_TABLE_BODY_MODE, null);
          case "colgroup":
            return createFormatContext(HTML_COLGROUP_MODE, null);
          case "tr":
            return createFormatContext(HTML_TABLE_ROW_MODE, null);
        }
        return parentContext.insertionMode >= HTML_TABLE_MODE || parentContext.insertionMode === ROOT_HTML_MODE ? createFormatContext(HTML_MODE, null) : parentContext;
      }
      var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
      function assignSuspenseBoundaryID(responseState) {
        var generatedID = responseState.nextSuspenseID++;
        return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
      }
      function makeId(responseState, treeId, localId) {
        var idPrefix = responseState.idPrefix, id3 = ":" + idPrefix + "R" + treeId;
        return localId > 0 && (id3 += "H" + localId.toString(32)), id3 + ":";
      }
      function encodeHTMLTextNode(text) {
        return escapeTextForBrowser(text);
      }
      var textSeparator = stringToPrecomputedChunk("<!-- -->");
      function pushTextInstance(target, text, responseState, textEmbedded) {
        return text === "" ? textEmbedded : (textEmbedded && target.push(textSeparator), target.push(encodeHTMLTextNode(text)), !0);
      }
      function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
        lastPushedText && textEmbedded && target.push(textSeparator);
      }
      var styleNameCache = /* @__PURE__ */ new Map();
      function processStyleName(styleName) {
        var chunk = styleNameCache.get(styleName);
        if (chunk !== void 0)
          return chunk;
        var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
        return styleNameCache.set(styleName, result), result;
      }
      var styleAttributeStart = stringToPrecomputedChunk(' style="'), styleAssign = stringToPrecomputedChunk(":"), styleSeparator = stringToPrecomputedChunk(";");
      function pushStyle(target, responseState, style) {
        if (typeof style != "object")
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        var isFirst = !0;
        for (var styleName in style)
          if (hasOwnProperty.call(style, styleName)) {
            var styleValue = style[styleName];
            if (!(styleValue == null || typeof styleValue == "boolean" || styleValue === "")) {
              var nameChunk = void 0, valueChunk = void 0, isCustomProperty = styleName.indexOf("--") === 0;
              isCustomProperty ? (nameChunk = escapeTextForBrowser(styleName), checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = escapeTextForBrowser(("" + styleValue).trim())) : (warnValidStyle$1(styleName, styleValue), nameChunk = processStyleName(styleName), typeof styleValue == "number" ? styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName) ? valueChunk = styleValue + "px" : valueChunk = "" + styleValue : (checkCSSPropertyStringCoercion(styleValue, styleName), valueChunk = escapeTextForBrowser(("" + styleValue).trim()))), isFirst ? (isFirst = !1, target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk)) : target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
        isFirst || target.push(attributeEnd);
      }
      var attributeSeparator = stringToPrecomputedChunk(" "), attributeAssign = stringToPrecomputedChunk('="'), attributeEnd = stringToPrecomputedChunk('"'), attributeEmptyString = stringToPrecomputedChunk('=""');
      function pushAttribute(target, responseState, name, value) {
        switch (name) {
          case "style": {
            pushStyle(target, responseState, value);
            return;
          }
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
            return;
        }
        if (
          // shouldIgnoreAttribute
          // We have already filtered out null/undefined and reserved words.
          !(name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N"))
        ) {
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean":
                if (!propertyInfo.acceptsBooleans)
                  return;
            }
            var attributeName = propertyInfo.attributeName, attributeNameChunk = attributeName;
            switch (propertyInfo.type) {
              case BOOLEAN:
                value && target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                return;
              case OVERLOADED_BOOLEAN:
                value === !0 ? target.push(attributeSeparator, attributeNameChunk, attributeEmptyString) : value === !1 || target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                return;
              case NUMERIC:
                isNaN(value) || target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                break;
              case POSITIVE_NUMERIC:
                !isNaN(value) && value >= 1 && target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
                break;
              default:
                propertyInfo.sanitizeURL && (checkAttributeStringCoercion(value, attributeName), value = "" + value, sanitizeURL(value)), target.push(attributeSeparator, attributeNameChunk, attributeAssign, escapeTextForBrowser(value), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix3 = name.toLowerCase().slice(0, 5);
                if (prefix3 !== "data-" && prefix3 !== "aria-")
                  return;
              }
            }
            target.push(attributeSeparator, name, attributeAssign, escapeTextForBrowser(value), attributeEnd);
          }
        }
      }
      var endOfStartTag = stringToPrecomputedChunk(">"), endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
      function pushInnerHTML(target, innerHTML, children) {
        if (innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (checkHtmlStringCoercion(html), target.push("" + html));
        }
      }
      var didWarnDefaultInputValue = !1, didWarnDefaultChecked = !1, didWarnDefaultSelectValue = !1, didWarnDefaultTextareaValue = !1, didWarnInvalidOptionChildren = !1, didWarnInvalidOptionInnerHTML = !1, didWarnSelectedSetOnOption = !1;
      function checkSelectProp(props, propName) {
        {
          var value = props[propName];
          if (value != null) {
            var array = isArray(value);
            props.multiple && !array ? error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName) : !props.multiple && array && error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
          }
        }
      }
      function pushStartSelect(target, props, responseState) {
        checkControlledValueProps("select", props), checkSelectProp(props, "value"), checkSelectProp(props, "defaultValue"), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue && (error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultSelectValue = !0), target.push(startChunkForTag("select"));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "defaultValue":
              case "value":
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function flattenOptionChildren(children) {
        var content = "";
        return React12.Children.forEach(children, function(child) {
          child != null && (content += child, !didWarnInvalidOptionChildren && typeof child != "string" && typeof child != "number" && (didWarnInvalidOptionChildren = !0, error2("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
        }), content;
      }
      var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
      function pushStartOption(target, props, responseState, formatContext) {
        var selectedValue = formatContext.selectedValue;
        target.push(startChunkForTag("option"));
        var children = null, value = null, selected = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "selected":
                selected = propValue, didWarnSelectedSetOnOption || (error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = !0);
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "value":
                value = propValue;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (selectedValue != null) {
          var stringValue;
          if (value !== null ? (checkAttributeStringCoercion(value, "value"), stringValue = "" + value) : (innerHTML !== null && (didWarnInvalidOptionInnerHTML || (didWarnInvalidOptionInnerHTML = !0, error2("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected."))), stringValue = flattenOptionChildren(children)), isArray(selectedValue))
            for (var i13 = 0; i13 < selectedValue.length; i13++) {
              checkAttributeStringCoercion(selectedValue[i13], "value");
              var v = "" + selectedValue[i13];
              if (v === stringValue) {
                target.push(selectedMarkerAttribute);
                break;
              }
            }
          else
            checkAttributeStringCoercion(selectedValue, "select.value"), "" + selectedValue === stringValue && target.push(selectedMarkerAttribute);
        } else
          selected && target.push(selectedMarkerAttribute);
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      function pushInput(target, props, responseState) {
        checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked && (error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultChecked = !0), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue && (error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultInputValue = !0), target.push(startChunkForTag("input"));
        var value = null, defaultValue = null, checked = null, defaultChecked = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              case "defaultChecked":
                defaultChecked = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "checked":
                checked = propValue;
                break;
              case "value":
                value = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return checked !== null ? pushAttribute(target, responseState, "checked", checked) : defaultChecked !== null && pushAttribute(target, responseState, "checked", defaultChecked), value !== null ? pushAttribute(target, responseState, "value", value) : defaultValue !== null && pushAttribute(target, responseState, "value", defaultValue), target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartTextArea(target, props, responseState) {
        checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue && (error2("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultTextareaValue = !0), target.push(startChunkForTag("textarea"));
        var value = null, defaultValue = null, children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "value":
                value = propValue;
                break;
              case "defaultValue":
                defaultValue = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (value === null && defaultValue !== null && (value = defaultValue), target.push(endOfStartTag), children != null) {
          if (error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>."), value != null)
            throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
          if (isArray(children)) {
            if (children.length > 1)
              throw new Error("<textarea> can only have at most one child.");
            checkHtmlStringCoercion(children[0]), value = "" + children[0];
          }
          checkHtmlStringCoercion(children), value = "" + children;
        }
        return typeof value == "string" && value[0] === `
` && target.push(leadingNewline), value !== null && (checkAttributeStringCoercion(value, "value"), target.push(encodeHTMLTextNode("" + value))), null;
      }
      function pushSelfClosing(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTagSelfClosing), null;
      }
      function pushStartMenuItem(target, props, responseState) {
        target.push(startChunkForTag("menuitem"));
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), null;
      }
      function pushStartTitle(target, props, responseState) {
        target.push(startChunkForTag("title"));
        var children = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        target.push(endOfStartTag);
        {
          var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
          Array.isArray(children) && children.length > 1 ? error2("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && child.$$typeof != null ? error2("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : child != null && typeof child != "string" && typeof child != "number" && error2("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
        }
        return children;
      }
      function pushStartGenericElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), typeof children == "string" ? (target.push(encodeHTMLTextNode(children)), null) : children;
      }
      function pushStartCustomElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              case "style":
                pushStyle(target, responseState, propValue);
                break;
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                break;
              default:
                isAttributeNameSafe(propKey) && typeof propValue != "function" && typeof propValue != "symbol" && target.push(attributeSeparator, propKey, attributeAssign, escapeTextForBrowser(propValue), attributeEnd);
                break;
            }
          }
        return target.push(endOfStartTag), pushInnerHTML(target, innerHTML, children), children;
      }
      var leadingNewline = stringToPrecomputedChunk(`
`);
      function pushStartPreformattedElement(target, props, tag, responseState) {
        target.push(startChunkForTag(tag));
        var children = null, innerHTML = null;
        for (var propKey in props)
          if (hasOwnProperty.call(props, propKey)) {
            var propValue = props[propKey];
            if (propValue == null)
              continue;
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
                break;
            }
          }
        if (target.push(endOfStartTag), innerHTML != null) {
          if (children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          if (typeof innerHTML != "object" || !("__html" in innerHTML))
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          var html = innerHTML.__html;
          html != null && (typeof html == "string" && html.length > 0 && html[0] === `
` ? target.push(leadingNewline, html) : (checkHtmlStringCoercion(html), target.push("" + html)));
        }
        return typeof children == "string" && children[0] === `
` && target.push(leadingNewline), children;
      }
      var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/, validatedTagCache = /* @__PURE__ */ new Map();
      function startChunkForTag(tag) {
        var tagStartChunk = validatedTagCache.get(tag);
        if (tagStartChunk === void 0) {
          if (!VALID_TAG_REGEX.test(tag))
            throw new Error("Invalid tag: " + tag);
          tagStartChunk = stringToPrecomputedChunk("<" + tag), validatedTagCache.set(tag, tagStartChunk);
        }
        return tagStartChunk;
      }
      var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
      function pushStartInstance(target, type2, props, responseState, formatContext) {
        switch (validateProperties(type2, props), validateProperties$1(type2, props), validateProperties$2(type2, props, null), !props.suppressContentEditableWarning && props.contentEditable && props.children != null && error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE && type2.indexOf("-") === -1 && typeof props.is != "string" && type2.toLowerCase() !== type2 && error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type2), type2) {
          case "select":
            return pushStartSelect(target, props, responseState);
          case "option":
            return pushStartOption(target, props, responseState, formatContext);
          case "textarea":
            return pushStartTextArea(target, props, responseState);
          case "input":
            return pushInput(target, props, responseState);
          case "menuitem":
            return pushStartMenuItem(target, props, responseState);
          case "title":
            return pushStartTitle(target, props, responseState);
          case "listing":
          case "pre":
            return pushStartPreformattedElement(target, props, type2, responseState);
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            return pushSelfClosing(target, props, type2, responseState);
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return pushStartGenericElement(target, props, type2, responseState);
          case "html":
            return formatContext.insertionMode === ROOT_HTML_MODE && target.push(DOCTYPE), pushStartGenericElement(target, props, type2, responseState);
          default:
            return type2.indexOf("-") === -1 && typeof props.is != "string" ? pushStartGenericElement(target, props, type2, responseState) : pushStartCustomElement(target, props, type2, responseState);
        }
      }
      var endTag1 = stringToPrecomputedChunk("</"), endTag2 = stringToPrecomputedChunk(">");
      function pushEndInstance(target, type2, props) {
        switch (type2) {
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "input":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            break;
          default:
            target.push(endTag1, type2, endTag2);
        }
      }
      function writeCompletedRoot(destination, responseState) {
        for (var bootstrapChunks = responseState.bootstrapChunks, i13 = 0; i13 < bootstrapChunks.length - 1; i13++)
          writeChunk(destination, bootstrapChunks[i13]);
        return i13 < bootstrapChunks.length ? writeChunkAndReturn(destination, bootstrapChunks[i13]) : !0;
      }
      var placeholder1 = stringToPrecomputedChunk('<template id="'), placeholder2 = stringToPrecomputedChunk('"></template>');
      function writePlaceholder(destination, responseState, id3) {
        writeChunk(destination, placeholder1), writeChunk(destination, responseState.placeholderPrefix);
        var formattedID = id3.toString(16);
        return writeChunk(destination, formattedID), writeChunkAndReturn(destination, placeholder2);
      }
      var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->"), startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="'), startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>'), startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->"), endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->"), clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template"), clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"'), clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="'), clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="'), clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="'), clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
      function writeStartCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
      }
      function writeStartPendingSuspenseBoundary(destination, responseState, id3) {
        if (writeChunk(destination, startPendingSuspenseBoundary1), id3 === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, id3), writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
      }
      function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
        var result;
        return result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary), writeChunk(destination, clientRenderedSuspenseBoundaryError1), errorDigest && (writeChunk(destination, clientRenderedSuspenseBoundaryError1A), writeChunk(destination, escapeTextForBrowser(errorDigest)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorMesssage && (writeChunk(destination, clientRenderedSuspenseBoundaryError1B), writeChunk(destination, escapeTextForBrowser(errorMesssage)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), errorComponentStack && (writeChunk(destination, clientRenderedSuspenseBoundaryError1C), writeChunk(destination, escapeTextForBrowser(errorComponentStack)), writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial)), result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2), result;
      }
      function writeEndCompletedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndPendingSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
        return writeChunkAndReturn(destination, endSuspenseBoundary);
      }
      var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="'), startSegmentHTML2 = stringToPrecomputedChunk('">'), endSegmentHTML = stringToPrecomputedChunk("</div>"), startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="'), startSegmentSVG2 = stringToPrecomputedChunk('">'), endSegmentSVG = stringToPrecomputedChunk("</svg>"), startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="'), startSegmentMathML2 = stringToPrecomputedChunk('">'), endSegmentMathML = stringToPrecomputedChunk("</math>"), startSegmentTable = stringToPrecomputedChunk('<table hidden id="'), startSegmentTable2 = stringToPrecomputedChunk('">'), endSegmentTable = stringToPrecomputedChunk("</table>"), startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="'), startSegmentTableBody2 = stringToPrecomputedChunk('">'), endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>"), startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="'), startSegmentTableRow2 = stringToPrecomputedChunk('">'), endSegmentTableRow = stringToPrecomputedChunk("</tr></table>"), startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="'), startSegmentColGroup2 = stringToPrecomputedChunk('">'), endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
      function writeStartSegment(destination, responseState, formatContext, id3) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunk(destination, startSegmentHTML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id3.toString(16)), writeChunkAndReturn(destination, startSegmentHTML2);
          case SVG_MODE:
            return writeChunk(destination, startSegmentSVG), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id3.toString(16)), writeChunkAndReturn(destination, startSegmentSVG2);
          case MATHML_MODE:
            return writeChunk(destination, startSegmentMathML), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id3.toString(16)), writeChunkAndReturn(destination, startSegmentMathML2);
          case HTML_TABLE_MODE:
            return writeChunk(destination, startSegmentTable), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id3.toString(16)), writeChunkAndReturn(destination, startSegmentTable2);
          case HTML_TABLE_BODY_MODE:
            return writeChunk(destination, startSegmentTableBody), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id3.toString(16)), writeChunkAndReturn(destination, startSegmentTableBody2);
          case HTML_TABLE_ROW_MODE:
            return writeChunk(destination, startSegmentTableRow), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id3.toString(16)), writeChunkAndReturn(destination, startSegmentTableRow2);
          case HTML_COLGROUP_MODE:
            return writeChunk(destination, startSegmentColGroup), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, id3.toString(16)), writeChunkAndReturn(destination, startSegmentColGroup2);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      function writeEndSegment(destination, formatContext) {
        switch (formatContext.insertionMode) {
          case ROOT_HTML_MODE:
          case HTML_MODE:
            return writeChunkAndReturn(destination, endSegmentHTML);
          case SVG_MODE:
            return writeChunkAndReturn(destination, endSegmentSVG);
          case MATHML_MODE:
            return writeChunkAndReturn(destination, endSegmentMathML);
          case HTML_TABLE_MODE:
            return writeChunkAndReturn(destination, endSegmentTable);
          case HTML_TABLE_BODY_MODE:
            return writeChunkAndReturn(destination, endSegmentTableBody);
          case HTML_TABLE_ROW_MODE:
            return writeChunkAndReturn(destination, endSegmentTableRow);
          case HTML_COLGROUP_MODE:
            return writeChunkAndReturn(destination, endSegmentColGroup);
          default:
            throw new Error("Unknown insertion mode. This is a bug in React.");
        }
      }
      var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}", completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}', clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}', completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("'), completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("'), completeSegmentScript2 = stringToPrecomputedChunk('","'), completeSegmentScript3 = stringToPrecomputedChunk('")</script>');
      function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
        writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteSegmentFunction ? writeChunk(destination, completeSegmentScript1Partial) : (responseState.sentCompleteSegmentFunction = !0, writeChunk(destination, completeSegmentScript1Full)), writeChunk(destination, responseState.segmentPrefix);
        var formattedID = contentSegmentID.toString(16);
        return writeChunk(destination, formattedID), writeChunk(destination, completeSegmentScript2), writeChunk(destination, responseState.placeholderPrefix), writeChunk(destination, formattedID), writeChunkAndReturn(destination, completeSegmentScript3);
      }
      var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("'), completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("'), completeBoundaryScript2 = stringToPrecomputedChunk('","'), completeBoundaryScript3 = stringToPrecomputedChunk('")</script>');
      function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentCompleteBoundaryFunction ? writeChunk(destination, completeBoundaryScript1Partial) : (responseState.sentCompleteBoundaryFunction = !0, writeChunk(destination, completeBoundaryScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        var formattedContentID = contentSegmentID.toString(16);
        return writeChunk(destination, boundaryID), writeChunk(destination, completeBoundaryScript2), writeChunk(destination, responseState.segmentPrefix), writeChunk(destination, formattedContentID), writeChunkAndReturn(destination, completeBoundaryScript3);
      }
      var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("'), clientRenderScript1Partial = stringToPrecomputedChunk('$RX("'), clientRenderScript1A = stringToPrecomputedChunk('"'), clientRenderScript2 = stringToPrecomputedChunk(")</script>"), clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
      function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
        if (writeChunk(destination, responseState.startInlineScript), responseState.sentClientRenderFunction ? writeChunk(destination, clientRenderScript1Partial) : (responseState.sentClientRenderFunction = !0, writeChunk(destination, clientRenderScript1Full)), boundaryID === null)
          throw new Error("An ID must have been assigned before we can complete the boundary.");
        return writeChunk(destination, boundaryID), writeChunk(destination, clientRenderScript1A), (errorDigest || errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorDigest || ""))), (errorMessage || errorComponentStack) && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorMessage || ""))), errorComponentStack && (writeChunk(destination, clientRenderErrorScriptArgInterstitial), writeChunk(destination, escapeJSStringsForInstructionScripts(errorComponentStack))), writeChunkAndReturn(destination, clientRenderScript2);
      }
      var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
      function escapeJSStringsForInstructionScripts(input) {
        var escaped = JSON.stringify(input);
        return escaped.replace(regexForJSStringsInScripts, function(match) {
          switch (match) {
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
          }
        });
      }
      var assign = Object.assign, REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type2) {
        return type2.displayName || "Context";
      }
      function getComponentNameFromType(type2) {
        if (type2 == null)
          return null;
        if (typeof type2.tag == "number" && error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type2 == "function")
          return type2.displayName || type2.name || null;
        if (typeof type2 == "string")
          return type2;
        switch (type2) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type2 == "object")
          switch (type2.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type2;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type2;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type2, type2.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type2.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type2.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type2, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame2 = componentFrameCache.get(fn);
          if (frame2 !== void 0)
            return frame2;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, !0);
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
        if (type2 == null)
          return "";
        if (typeof type2 == "function")
          return describeNativeComponentFrame(type2, shouldConstruct(type2));
        if (typeof type2 == "string")
          return describeBuiltInComponentFrame(type2);
        switch (type2) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type2 == "object")
          switch (type2.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type2.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type2, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error2("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var warnedAboutMissingGetChildContext;
      warnedAboutMissingGetChildContext = {};
      var emptyContextObject = {};
      Object.freeze(emptyContextObject);
      function getMaskedContext(type2, unmaskedContext) {
        {
          var contextTypes = type2.contextTypes;
          if (!contextTypes)
            return emptyContextObject;
          var context = {};
          for (var key in contextTypes)
            context[key] = unmaskedContext[key];
          {
            var name = getComponentNameFromType(type2) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          return context;
        }
      }
      function processChildContext(instance, type2, parentContext, childContextTypes) {
        {
          if (typeof instance.getChildContext != "function") {
            {
              var componentName = getComponentNameFromType(type2) || "Unknown";
              warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = !0, error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext)
            if (!(contextKey in childContextTypes))
              throw new Error((getComponentNameFromType(type2) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          {
            var name = getComponentNameFromType(type2) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      var rendererSigil;
      rendererSigil = {};
      var rootContextSnapshot = null, currentActiveSnapshot = null;
      function popNode(prev) {
        prev.context._currentValue = prev.parentValue;
      }
      function pushNode(next) {
        next.context._currentValue = next.value;
      }
      function popToNearestCommonAncestor(prev, next) {
        if (prev !== next) {
          popNode(prev);
          var parentPrev = prev.parent, parentNext = next.parent;
          if (parentPrev === null) {
            if (parentNext !== null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
          } else {
            if (parentNext === null)
              throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
            popToNearestCommonAncestor(parentPrev, parentNext);
          }
          pushNode(next);
        }
      }
      function popAllPrevious(prev) {
        popNode(prev);
        var parentPrev = prev.parent;
        parentPrev !== null && popAllPrevious(parentPrev);
      }
      function pushAllNext(next) {
        var parentNext = next.parent;
        parentNext !== null && pushAllNext(parentNext), pushNode(next);
      }
      function popPreviousToCommonLevel(prev, next) {
        popNode(prev);
        var parentPrev = prev.parent;
        if (parentPrev === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        parentPrev.depth === next.depth ? popToNearestCommonAncestor(parentPrev, next) : popPreviousToCommonLevel(parentPrev, next);
      }
      function popNextToCommonLevel(prev, next) {
        var parentNext = next.parent;
        if (parentNext === null)
          throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
        prev.depth === parentNext.depth ? popToNearestCommonAncestor(prev, parentNext) : popNextToCommonLevel(prev, parentNext), pushNode(next);
      }
      function switchContext(newSnapshot) {
        var prev = currentActiveSnapshot, next = newSnapshot;
        prev !== next && (prev === null ? pushAllNext(next) : next === null ? popAllPrevious(prev) : prev.depth === next.depth ? popToNearestCommonAncestor(prev, next) : prev.depth > next.depth ? popPreviousToCommonLevel(prev, next) : popNextToCommonLevel(prev, next), currentActiveSnapshot = next);
      }
      function pushProvider(context, nextValue) {
        var prevValue;
        prevValue = context._currentValue, context._currentValue = nextValue, context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil && error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer = rendererSigil;
        var prevNode = currentActiveSnapshot, newNode = {
          parent: prevNode,
          depth: prevNode === null ? 0 : prevNode.depth + 1,
          context,
          parentValue: prevValue,
          value: nextValue
        };
        return currentActiveSnapshot = newNode, newNode;
      }
      function popProvider(context) {
        var prevSnapshot = currentActiveSnapshot;
        if (prevSnapshot === null)
          throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
        prevSnapshot.context !== context && error2("The parent context is not the expected context. This is probably a bug in React.");
        {
          var value = prevSnapshot.parentValue;
          value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED ? prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue : prevSnapshot.context._currentValue = value, context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil && error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer = rendererSigil;
        }
        return currentActiveSnapshot = prevSnapshot.parent;
      }
      function getActiveContext() {
        return currentActiveSnapshot;
      }
      function readContext(context) {
        var value = context._currentValue;
        return value;
      }
      function get(key) {
        return key._reactInternals;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var didWarnAboutNoopUpdateForComponent = {}, didWarnAboutDeprecatedWillMount = {}, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType;
      {
        didWarnAboutUninitializedState = /* @__PURE__ */ new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set(), didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set(), didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set(), didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set(), didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (!(callback === null || typeof callback == "function")) {
            var key = callerName + "_" + callback;
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
          }
        }, warnOnUndefinedDerivedState = function(type2, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type2) || "Component";
            didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
          }
        };
      }
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor, componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass", warningKey = componentName + "." + callerName;
          if (didWarnAboutNoopUpdateForComponent[warningKey])
            return;
          error2(`%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.

Please check the code for the %s component.`, callerName, callerName, componentName), didWarnAboutNoopUpdateForComponent[warningKey] = !0;
        }
      }
      var classComponentUpdater = {
        isMounted: function(inst) {
          return !1;
        },
        enqueueSetState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "setState") : (internals.queue.push(payload), callback != null && warnOnInvalidCallback(callback, "setState"));
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var internals = get(inst);
          internals.replace = !0, internals.queue = [payload], callback != null && warnOnInvalidCallback(callback, "setState");
        },
        enqueueForceUpdate: function(inst, callback) {
          var internals = get(inst);
          internals.queue === null ? warnNoop(inst, "forceUpdate") : callback != null && warnOnInvalidCallback(callback, "setState");
        }
      };
      function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var newState = partialState == null ? prevState : assign({}, prevState, partialState);
        return newState;
      }
      function constructClassInstance(ctor, props, maskedLegacyContext) {
        var context = emptyContextObject, contextType = ctor.contextType;
        if ("contextType" in ctor) {
          var isValid = (
            // Allow null for conditional declaration
            contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
          );
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
        typeof contextType == "object" && contextType !== null ? context = readContext(contextType) : context = maskedLegacyContext;
        var instance = new ctor(props, context);
        {
          if (typeof ctor.getDerivedStateFromProps == "function" && (instance.state === null || instance.state === void 0)) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
          }
          if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
            var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
            if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0 ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error2(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
            }
          }
        }
        return instance;
      }
      function checkClassInstance(instance, ctor, newProps) {
        {
          var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
          renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name), instance.propTypes && error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name), instance.contextType && error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name), instance.contextTypes && error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name)), typeof instance.componentShouldUpdate == "function" && error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate < "u" && error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name), typeof instance.componentDidReceiveProps == "function" && error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name), typeof instance.componentWillRecieveProps == "function" && error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          var hasMutatedProps = instance.props !== newProps;
          instance.props !== void 0 && hasMutatedProps && error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name), instance.defaultProps && error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor))), typeof instance.getDerivedStateFromProps == "function" && error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof instance.getDerivedStateFromError == "function" && error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof ctor.getSnapshotBeforeUpdate == "function" && error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          var _state = instance.state;
          _state && (typeof _state != "object" || isArray(_state)) && error2("%s.state: must be set to an object or null", name), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
      function callComponentWillMount(type2, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount == "function") {
          if (instance.componentWillMount.__suppressDeprecationWarning !== !0) {
            var componentName = getComponentNameFromType(type2) || "Unknown";
            didWarnAboutDeprecatedWillMount[componentName] || (warn(
              // keep this warning in sync with ReactStrictModeWarning.js
              `componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.

Please update the following components: %s`,
              componentName
            ), didWarnAboutDeprecatedWillMount[componentName] = !0);
          }
          instance.componentWillMount();
        }
        typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type2) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
      }
      function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
        if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
          var oldQueue = internalInstance.queue, oldReplace = internalInstance.replace;
          if (internalInstance.queue = null, internalInstance.replace = !1, oldReplace && oldQueue.length === 1)
            inst.state = oldQueue[0];
          else {
            for (var nextState = oldReplace ? oldQueue[0] : inst.state, dontMutate = !0, i13 = oldReplace ? 1 : 0; i13 < oldQueue.length; i13++) {
              var partial = oldQueue[i13], partialState = typeof partial == "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
              partialState != null && (dontMutate ? (dontMutate = !1, nextState = assign({}, nextState, partialState)) : assign(nextState, partialState));
            }
            inst.state = nextState;
          }
        } else
          internalInstance.queue = null;
      }
      function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
        checkClassInstance(instance, ctor, newProps);
        var initialState = instance.state !== void 0 ? instance.state : null;
        instance.updater = classComponentUpdater, instance.props = newProps, instance.state = initialState;
        var internalInstance = {
          queue: [],
          replace: !1
        };
        set(instance, internalInstance);
        var contextType = ctor.contextType;
        if (typeof contextType == "object" && contextType !== null ? instance.context = readContext(contextType) : instance.context = maskedLegacyContext, instance.state === newProps) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        typeof getDerivedStateFromProps == "function" && (instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps)), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(ctor, instance), processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext));
      }
      var emptyTreeContext = {
        id: 1,
        overflow: ""
      };
      function getTreeId(context) {
        var overflow = context.overflow, idWithLeadingBit = context.id, id3 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id3.toString(32) + overflow;
      }
      function pushTreeContext(baseContext, totalChildren, index2) {
        var baseIdWithLeadingBit = baseContext.id, baseOverflow = baseContext.overflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index2 + 1, length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id3 = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
          return {
            id: 1 << restOfLength | id3,
            overflow
          };
        } else {
          var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
          return {
            id: 1 << length | _id,
            overflow: _overflow
          };
        }
      }
      function getBitLength(number2) {
        return 32 - clz32(number2);
      }
      function getLeadingBit(id3) {
        return 1 << getBitLength(id3) - 1;
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x) {
        var asUint = x >>> 0;
        return asUint === 0 ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs = typeof Object.is == "function" ? Object.is : is, currentlyRenderingComponent = null, currentlyRenderingTask = null, firstWorkInProgressHook = null, workInProgressHook = null, isReRender = !1, didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, renderPhaseUpdates = null, numberOfReRenders = 0, RE_RENDER_LIMIT = 25, isInHookUserCodeInDev = !1, currentHookNameInDev;
      function resolveCurrentlyRenderingComponent() {
        if (currentlyRenderingComponent === null)
          throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
        return isInHookUserCodeInDev && error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks"), currentlyRenderingComponent;
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (prevDeps === null)
          return error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
        nextDeps.length !== prevDeps.length && error2(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
        for (var i13 = 0; i13 < prevDeps.length && i13 < nextDeps.length; i13++)
          if (!objectIs(nextDeps[i13], prevDeps[i13]))
            return !1;
        return !0;
      }
      function createHook() {
        if (numberOfReRenders > 0)
          throw new Error("Rendered more hooks than during the previous render");
        return {
          memoizedState: null,
          queue: null,
          next: null
        };
      }
      function createWorkInProgressHook() {
        return workInProgressHook === null ? firstWorkInProgressHook === null ? (isReRender = !1, firstWorkInProgressHook = workInProgressHook = createHook()) : (isReRender = !0, workInProgressHook = firstWorkInProgressHook) : workInProgressHook.next === null ? (isReRender = !1, workInProgressHook = workInProgressHook.next = createHook()) : (isReRender = !0, workInProgressHook = workInProgressHook.next), workInProgressHook;
      }
      function prepareToUseHooks(task, componentIdentity) {
        currentlyRenderingComponent = componentIdentity, currentlyRenderingTask = task, isInHookUserCodeInDev = !1, localIdCounter = 0;
      }
      function finishHooks(Component, props, children, refOrContext) {
        for (; didScheduleRenderPhaseUpdate; )
          didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, numberOfReRenders += 1, workInProgressHook = null, children = Component(props, refOrContext);
        return resetHooksState(), children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        return didRenderIdHook;
      }
      function resetHooksState() {
        isInHookUserCodeInDev = !1, currentlyRenderingComponent = null, currentlyRenderingTask = null, didScheduleRenderPhaseUpdate = !1, firstWorkInProgressHook = null, numberOfReRenders = 0, renderPhaseUpdates = null, workInProgressHook = null;
      }
      function readContext$1(context) {
        return isInHookUserCodeInDev && error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."), readContext(context);
      }
      function useContext8(context) {
        return currentHookNameInDev = "useContext", resolveCurrentlyRenderingComponent(), readContext(context);
      }
      function basicStateReducer(state, action) {
        return typeof action == "function" ? action(state) : action;
      }
      function useState14(initialState) {
        return currentHookNameInDev = "useState", useReducer(
          basicStateReducer,
          // useReducer has a special case to support lazy useState initializers
          initialState
        );
      }
      function useReducer(reducer, initialArg, init) {
        if (reducer !== basicStateReducer && (currentHookNameInDev = "useReducer"), currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook(), isReRender) {
          var queue = workInProgressHook.queue, dispatch = queue.dispatch;
          if (renderPhaseUpdates !== null) {
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate !== void 0) {
              renderPhaseUpdates.delete(queue);
              var newState = workInProgressHook.memoizedState, update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                isInHookUserCodeInDev = !0, newState = reducer(newState, action), isInHookUserCodeInDev = !1, update = update.next;
              } while (update !== null);
              return workInProgressHook.memoizedState = newState, [newState, dispatch];
            }
          }
          return [workInProgressHook.memoizedState, dispatch];
        } else {
          isInHookUserCodeInDev = !0;
          var initialState;
          reducer === basicStateReducer ? initialState = typeof initialArg == "function" ? initialArg() : initialArg : initialState = init !== void 0 ? init(initialArg) : initialArg, isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = initialState;
          var _queue = workInProgressHook.queue = {
            last: null,
            dispatch: null
          }, _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
          return [workInProgressHook.memoizedState, _dispatch];
        }
      }
      function useMemo7(nextCreate, deps) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var nextDeps = deps === void 0 ? null : deps;
        if (workInProgressHook !== null) {
          var prevState = workInProgressHook.memoizedState;
          if (prevState !== null && nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps))
              return prevState[0];
          }
        }
        isInHookUserCodeInDev = !0;
        var nextValue = nextCreate();
        return isInHookUserCodeInDev = !1, workInProgressHook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function useRef10(initialValue) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent(), workInProgressHook = createWorkInProgressHook();
        var previousRef = workInProgressHook.memoizedState;
        if (previousRef === null) {
          var ref = {
            current: initialValue
          };
          return Object.seal(ref), workInProgressHook.memoizedState = ref, ref;
        } else
          return previousRef;
      }
      function useLayoutEffect3(create, inputs) {
        currentHookNameInDev = "useLayoutEffect", error2("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
      }
      function dispatchAction(componentIdentity, queue, action) {
        if (numberOfReRenders >= RE_RENDER_LIMIT)
          throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        if (componentIdentity === currentlyRenderingComponent) {
          didScheduleRenderPhaseUpdate = !0;
          var update = {
            action,
            next: null
          };
          renderPhaseUpdates === null && (renderPhaseUpdates = /* @__PURE__ */ new Map());
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
          if (firstRenderPhaseUpdate === void 0)
            renderPhaseUpdates.set(queue, update);
          else {
            for (var lastRenderPhaseUpdate = firstRenderPhaseUpdate; lastRenderPhaseUpdate.next !== null; )
              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            lastRenderPhaseUpdate.next = update;
          }
        }
      }
      function useCallback4(callback, deps) {
        return useMemo7(function() {
          return callback;
        }, deps);
      }
      function useMutableSource(source, getSnapshot, subscribe) {
        return resolveCurrentlyRenderingComponent(), getSnapshot(source._source);
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        if (getServerSnapshot === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        return getServerSnapshot();
      }
      function useDeferredValue(value) {
        return resolveCurrentlyRenderingComponent(), value;
      }
      function unsupportedStartTransition() {
        throw new Error("startTransition cannot be called during server rendering.");
      }
      function useTransition() {
        return resolveCurrentlyRenderingComponent(), [!1, unsupportedStartTransition];
      }
      function useId5() {
        var task = currentlyRenderingTask, treeId = getTreeId(task.treeContext), responseState = currentResponseState;
        if (responseState === null)
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
        var localId = localIdCounter++;
        return makeId(responseState, treeId, localId);
      }
      function noop2() {
      }
      var Dispatcher = {
        readContext: readContext$1,
        useContext: useContext8,
        useMemo: useMemo7,
        useReducer,
        useRef: useRef10,
        useState: useState14,
        useInsertionEffect: noop2,
        useLayoutEffect: useLayoutEffect3,
        useCallback: useCallback4,
        // useImperativeHandle is not run in the server environment
        useImperativeHandle: noop2,
        // Effects are not run in the server environment.
        useEffect: noop2,
        // Debugging effect
        useDebugValue: noop2,
        useDeferredValue,
        useTransition,
        useId: useId5,
        // Subscriptions are not setup in a server environment.
        useMutableSource,
        useSyncExternalStore
      }, currentResponseState = null;
      function setCurrentResponseState(responseState) {
        currentResponseState = responseState;
      }
      function getStackByComponentStackNode(componentStack) {
        try {
          var info = "", node = componentStack;
          do {
            switch (node.tag) {
              case 0:
                info += describeBuiltInComponentFrame(node.type, null, null);
                break;
              case 1:
                info += describeFunctionComponentFrame(node.type, null, null);
                break;
              case 2:
                info += describeClassComponentFrame(node.type, null, null);
                break;
            }
            node = node.parent;
          } while (node);
          return info;
        } catch (x) {
          return `
Error generating stack: ` + x.message + `
` + x.stack;
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame, PENDING = 0, COMPLETED = 1, FLUSHED = 2, ABORTED = 3, ERRORED = 4, OPEN = 0, CLOSING = 1, CLOSED = 2, DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
      function defaultErrorHandler(error3) {
        return console.error(error3), null;
      }
      function noop$1() {
      }
      function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError) {
        var pingedTasks = [], abortSet = /* @__PURE__ */ new Set(), request = {
          destination: null,
          responseState,
          progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
          status: OPEN,
          fatalError: null,
          nextSegmentId: 0,
          allPendingTasks: 0,
          pendingRootTasks: 0,
          completedRootSegment: null,
          abortableTasks: abortSet,
          pingedTasks,
          clientRenderedBoundaries: [],
          completedBoundaries: [],
          partialBoundaries: [],
          onError: onError === void 0 ? defaultErrorHandler : onError,
          onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
          onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
          onShellError: onShellError === void 0 ? noop$1 : onShellError,
          onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
        }, rootSegment = createPendingSegment(
          request,
          0,
          null,
          rootFormatContext,
          // Root segments are never embedded in Text on either edge
          !1,
          !1
        );
        rootSegment.parentFlushed = !0;
        var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
        return pingedTasks.push(rootTask), request;
      }
      function pingTask(request, task) {
        var pingedTasks = request.pingedTasks;
        pingedTasks.push(task), pingedTasks.length === 1 && scheduleWork(function() {
          return performWork(request);
        });
      }
      function createSuspenseBoundary(request, fallbackAbortableTasks) {
        return {
          id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
          rootSegmentID: -1,
          parentFlushed: !1,
          pendingTasks: 0,
          forceClientRender: !1,
          completedSegments: [],
          byteSize: 0,
          fallbackAbortableTasks,
          errorDigest: null
        };
      }
      function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
        request.allPendingTasks++, blockedBoundary === null ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
        var task = {
          node,
          ping: function() {
            return pingTask(request, task);
          },
          blockedBoundary,
          blockedSegment,
          abortSet,
          legacyContext,
          context,
          treeContext
        };
        return task.componentStack = null, abortSet.add(task), task;
      }
      function createPendingSegment(request, index2, boundary, formatContext, lastPushedText, textEmbedded) {
        return {
          status: PENDING,
          id: -1,
          // lazily assigned later
          index: index2,
          parentFlushed: !1,
          chunks: [],
          children: [],
          formatContext,
          boundary,
          lastPushedText,
          textEmbedded
        };
      }
      var currentTaskInDEV = null;
      function getCurrentStackInDEV() {
        return currentTaskInDEV === null || currentTaskInDEV.componentStack === null ? "" : getStackByComponentStackNode(currentTaskInDEV.componentStack);
      }
      function pushBuiltInComponentStackInDEV(task, type2) {
        task.componentStack = {
          tag: 0,
          parent: task.componentStack,
          type: type2
        };
      }
      function pushFunctionComponentStackInDEV(task, type2) {
        task.componentStack = {
          tag: 1,
          parent: task.componentStack,
          type: type2
        };
      }
      function pushClassComponentStackInDEV(task, type2) {
        task.componentStack = {
          tag: 2,
          parent: task.componentStack,
          type: type2
        };
      }
      function popComponentStackInDEV(task) {
        task.componentStack === null ? error2("Unexpectedly popped too many stack frames. This is a bug in React.") : task.componentStack = task.componentStack.parent;
      }
      var lastBoundaryErrorComponentStackDev = null;
      function captureBoundaryErrorDetailsDev(boundary, error3) {
        {
          var errorMessage;
          typeof error3 == "string" ? errorMessage = error3 : error3 && typeof error3.message == "string" ? errorMessage = error3.message : errorMessage = String(error3);
          var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
          lastBoundaryErrorComponentStackDev = null, boundary.errorMessage = errorMessage, boundary.errorComponentStack = errorComponentStack;
        }
      }
      function logRecoverableError(request, error3) {
        var errorDigest = request.onError(error3);
        if (errorDigest != null && typeof errorDigest != "string")
          throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
        return errorDigest;
      }
      function fatalError(request, error3) {
        var onShellError = request.onShellError;
        onShellError(error3);
        var onFatalError = request.onFatalError;
        onFatalError(error3), request.destination !== null ? (request.status = CLOSED, closeWithError(request.destination, error3)) : (request.status = CLOSING, request.fatalError = error3);
      }
      function renderSuspenseBoundary(request, task, props) {
        pushBuiltInComponentStackInDEV(task, "Suspense");
        var parentBoundary = task.blockedBoundary, parentSegment = task.blockedSegment, fallback = props.fallback, content = props.children, fallbackAbortSet = /* @__PURE__ */ new Set(), newBoundary = createSuspenseBoundary(request, fallbackAbortSet), insertionIndex = parentSegment.chunks.length, boundarySegment = createPendingSegment(
          request,
          insertionIndex,
          newBoundary,
          parentSegment.formatContext,
          // boundaries never require text embedding at their edges because comment nodes bound them
          !1,
          !1
        );
        parentSegment.children.push(boundarySegment), parentSegment.lastPushedText = !1;
        var contentRootSegment = createPendingSegment(
          request,
          0,
          null,
          parentSegment.formatContext,
          // boundaries never require text embedding at their edges because comment nodes bound them
          !1,
          !1
        );
        contentRootSegment.parentFlushed = !0, task.blockedBoundary = newBoundary, task.blockedSegment = contentRootSegment;
        try {
          if (renderNode(request, task, content), pushSegmentFinale(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded), contentRootSegment.status = COMPLETED, queueCompletedSegment(newBoundary, contentRootSegment), newBoundary.pendingTasks === 0) {
            popComponentStackInDEV(task);
            return;
          }
        } catch (error3) {
          contentRootSegment.status = ERRORED, newBoundary.forceClientRender = !0, newBoundary.errorDigest = logRecoverableError(request, error3), captureBoundaryErrorDetailsDev(newBoundary, error3);
        } finally {
          task.blockedBoundary = parentBoundary, task.blockedSegment = parentSegment;
        }
        var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
        suspendedFallbackTask.componentStack = task.componentStack, request.pingedTasks.push(suspendedFallbackTask), popComponentStackInDEV(task);
      }
      function renderHostElement(request, task, type2, props) {
        pushBuiltInComponentStackInDEV(task, type2);
        var segment = task.blockedSegment, children = pushStartInstance(segment.chunks, type2, props, request.responseState, segment.formatContext);
        segment.lastPushedText = !1;
        var prevContext = segment.formatContext;
        segment.formatContext = getChildFormatContext(prevContext, type2, props), renderNode(request, task, children), segment.formatContext = prevContext, pushEndInstance(segment.chunks, type2), segment.lastPushedText = !1, popComponentStackInDEV(task);
      }
      function shouldConstruct$1(Component) {
        return Component.prototype && Component.prototype.isReactComponent;
      }
      function renderWithHooks(request, task, Component, props, secondArg) {
        var componentIdentity = {};
        prepareToUseHooks(task, componentIdentity);
        var result = Component(props, secondArg);
        return finishHooks(Component, props, result, secondArg);
      }
      function finishClassComponent(request, task, instance, Component, props) {
        var nextChildren = instance.render();
        instance.props !== props && (didWarnAboutReassigningProps || error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component"), didWarnAboutReassigningProps = !0);
        {
          var childContextTypes = Component.childContextTypes;
          if (childContextTypes != null) {
            var previousContext = task.legacyContext, mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
            task.legacyContext = mergedContext, renderNodeDestructive(request, task, nextChildren), task.legacyContext = previousContext;
            return;
          }
        }
        renderNodeDestructive(request, task, nextChildren);
      }
      function renderClassComponent(request, task, Component, props) {
        pushClassComponentStackInDEV(task, Component);
        var maskedContext = getMaskedContext(Component, task.legacyContext), instance = constructClassInstance(Component, props, maskedContext);
        mountClassInstance(instance, Component, props, maskedContext), finishClassComponent(request, task, instance, Component, props), popComponentStackInDEV(task);
      }
      var didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutReassigningProps = !1, didWarnAboutGenerators = !1, didWarnAboutMaps = !1, hasWarnedAboutUsingContextAsConsumer = !1;
      function renderIndeterminateComponent(request, task, Component, props) {
        var legacyContext;
        if (legacyContext = getMaskedContext(Component, task.legacyContext), pushFunctionComponentStackInDEV(task, Component), Component.prototype && typeof Component.prototype.render == "function") {
          var componentName = getComponentNameFromType(Component) || "Unknown";
          didWarnAboutBadClass[componentName] || (error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = !0);
        }
        var value = renderWithHooks(request, task, Component, props, legacyContext), hasId = checkDidRenderIdHook();
        if (typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component) || "Unknown";
          didWarnAboutModulePatternComponent[_componentName] || (error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = !0);
        }
        if (
          // Run these checks in production only if the flag is off.
          // Eventually we'll delete this branch altogether.
          typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0
        ) {
          {
            var _componentName2 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName2] || (error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = !0);
          }
          mountClassInstance(value, Component, props, legacyContext), finishClassComponent(request, task, value, Component, props);
        } else if (validateFunctionComponentInDev(Component), hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index2 = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index2);
          try {
            renderNodeDestructive(request, task, value);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, value);
        popComponentStackInDEV(task);
      }
      function validateFunctionComponentInDev(Component) {
        {
          if (Component && Component.childContextTypes && error2("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component"), typeof Component.getDerivedStateFromProps == "function") {
            var _componentName3 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = !0);
          }
          if (typeof Component.contextType == "object" && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error2("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = !0);
          }
        }
      }
      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = assign({}, baseProps), defaultProps = Component.defaultProps;
          for (var propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          return props;
        }
        return baseProps;
      }
      function renderForwardRef(request, task, type2, props, ref) {
        pushFunctionComponentStackInDEV(task, type2.render);
        var children = renderWithHooks(request, task, type2.render, props, ref), hasId = checkDidRenderIdHook();
        if (hasId) {
          var prevTreeContext = task.treeContext, totalChildren = 1, index2 = 0;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index2);
          try {
            renderNodeDestructive(request, task, children);
          } finally {
            task.treeContext = prevTreeContext;
          }
        } else
          renderNodeDestructive(request, task, children);
        popComponentStackInDEV(task);
      }
      function renderMemo(request, task, type2, props, ref) {
        var innerType = type2.type, resolvedProps = resolveDefaultProps(innerType, props);
        renderElement(request, task, innerType, resolvedProps, ref);
      }
      function renderContextConsumer(request, task, context, props) {
        context._context === void 0 ? context !== context.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = !0, error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context = context._context;
        var render = props.children;
        typeof render != "function" && error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        var newValue = readContext(context), newChildren = render(newValue);
        renderNodeDestructive(request, task, newChildren);
      }
      function renderContextProvider(request, task, type2, props) {
        var context = type2._context, value = props.value, children = props.children, prevSnapshot;
        prevSnapshot = task.context, task.context = pushProvider(context, value), renderNodeDestructive(request, task, children), task.context = popProvider(context), prevSnapshot !== task.context && error2("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
      }
      function renderLazyComponent(request, task, lazyComponent, props, ref) {
        pushBuiltInComponentStackInDEV(task, "Lazy");
        var payload = lazyComponent._payload, init = lazyComponent._init, Component = init(payload), resolvedProps = resolveDefaultProps(Component, props);
        renderElement(request, task, Component, resolvedProps, ref), popComponentStackInDEV(task);
      }
      function renderElement(request, task, type2, props, ref) {
        if (typeof type2 == "function")
          if (shouldConstruct$1(type2)) {
            renderClassComponent(request, task, type2, props);
            return;
          } else {
            renderIndeterminateComponent(request, task, type2, props);
            return;
          }
        if (typeof type2 == "string") {
          renderHostElement(request, task, type2, props);
          return;
        }
        switch (type2) {
          case REACT_LEGACY_HIDDEN_TYPE:
          case REACT_DEBUG_TRACING_MODE_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_FRAGMENT_TYPE: {
            renderNodeDestructive(request, task, props.children);
            return;
          }
          case REACT_SUSPENSE_LIST_TYPE: {
            pushBuiltInComponentStackInDEV(task, "SuspenseList"), renderNodeDestructive(request, task, props.children), popComponentStackInDEV(task);
            return;
          }
          case REACT_SCOPE_TYPE:
            throw new Error("ReactDOMServer does not yet support scope components.");
          case REACT_SUSPENSE_TYPE: {
            renderSuspenseBoundary(request, task, props);
            return;
          }
        }
        if (typeof type2 == "object" && type2 !== null)
          switch (type2.$$typeof) {
            case REACT_FORWARD_REF_TYPE: {
              renderForwardRef(request, task, type2, props, ref);
              return;
            }
            case REACT_MEMO_TYPE: {
              renderMemo(request, task, type2, props, ref);
              return;
            }
            case REACT_PROVIDER_TYPE: {
              renderContextProvider(request, task, type2, props);
              return;
            }
            case REACT_CONTEXT_TYPE: {
              renderContextConsumer(request, task, type2, props);
              return;
            }
            case REACT_LAZY_TYPE: {
              renderLazyComponent(request, task, type2, props);
              return;
            }
          }
        var info = "";
        throw (type2 === void 0 || typeof type2 == "object" && type2 !== null && Object.keys(type2).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."), new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type2 == null ? type2 : typeof type2) + "." + info));
      }
      function validateIterable(iterable, iteratorFn) {
        typeof Symbol == "function" && // $FlowFixMe Flow doesn't know about toStringTag
        iterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = !0), iterable.entries === iteratorFn && (didWarnAboutMaps || error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
      }
      function renderNodeDestructive(request, task, node) {
        try {
          return renderNodeDestructiveImpl(request, task, node);
        } catch (x) {
          throw typeof x == "object" && x !== null && typeof x.then == "function" || (lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV()), x;
        }
      }
      function renderNodeDestructiveImpl(request, task, node) {
        if (task.node = node, typeof node == "object" && node !== null) {
          switch (node.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var element = node, type2 = element.type, props = element.props, ref = element.ref;
              renderElement(request, task, type2, props, ref);
              return;
            }
            case REACT_PORTAL_TYPE:
              throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
            case REACT_LAZY_TYPE: {
              var lazyNode = node, payload = lazyNode._payload, init = lazyNode._init, resolvedNode;
              try {
                resolvedNode = init(payload);
              } catch (x) {
                throw typeof x == "object" && x !== null && typeof x.then == "function" && pushBuiltInComponentStackInDEV(task, "Lazy"), x;
              }
              renderNodeDestructive(request, task, resolvedNode);
              return;
            }
          }
          if (isArray(node)) {
            renderChildrenArray(request, task, node);
            return;
          }
          var iteratorFn = getIteratorFn(node);
          if (iteratorFn) {
            validateIterable(node, iteratorFn);
            var iterator = iteratorFn.call(node);
            if (iterator) {
              var step2 = iterator.next();
              if (!step2.done) {
                var children = [];
                do
                  children.push(step2.value), step2 = iterator.next();
                while (!step2.done);
                renderChildrenArray(request, task, children);
                return;
              }
              return;
            }
          }
          var childString = Object.prototype.toString.call(node);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        if (typeof node == "string") {
          var segment = task.blockedSegment;
          segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
          return;
        }
        if (typeof node == "number") {
          var _segment = task.blockedSegment;
          _segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
          return;
        }
        typeof node == "function" && error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
      function renderChildrenArray(request, task, children) {
        for (var totalChildren = children.length, i13 = 0; i13 < totalChildren; i13++) {
          var prevTreeContext = task.treeContext;
          task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i13);
          try {
            renderNode(request, task, children[i13]);
          } finally {
            task.treeContext = prevTreeContext;
          }
        }
      }
      function spawnNewSuspendedTask(request, task, x) {
        var segment = task.blockedSegment, insertionIndex = segment.chunks.length, newSegment = createPendingSegment(
          request,
          insertionIndex,
          null,
          segment.formatContext,
          // Adopt the parent segment's leading text embed
          segment.lastPushedText,
          // Assume we are text embedded at the trailing edge
          !0
        );
        segment.children.push(newSegment), segment.lastPushedText = !1;
        var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
        task.componentStack !== null && (newTask.componentStack = task.componentStack.parent);
        var ping = newTask.ping;
        x.then(ping, ping);
      }
      function renderNode(request, task, node) {
        var previousFormatContext = task.blockedSegment.formatContext, previousLegacyContext = task.legacyContext, previousContext = task.context, previousComponentStack = null;
        previousComponentStack = task.componentStack;
        try {
          return renderNodeDestructive(request, task, node);
        } catch (x) {
          if (resetHooksState(), typeof x == "object" && x !== null && typeof x.then == "function") {
            spawnNewSuspendedTask(request, task, x), task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack;
            return;
          } else
            throw task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack, x;
        }
      }
      function erroredTask(request, boundary, segment, error3) {
        var errorDigest = logRecoverableError(request, error3);
        if (boundary === null ? fatalError(request, error3) : (boundary.pendingTasks--, boundary.forceClientRender || (boundary.forceClientRender = !0, boundary.errorDigest = errorDigest, captureBoundaryErrorDetailsDev(boundary, error3), boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary))), request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function abortTaskSoft(task) {
        var request = this, boundary = task.blockedBoundary, segment = task.blockedSegment;
        segment.status = ABORTED, finishedTask(request, boundary, segment);
      }
      function abortTask(task, request, reason) {
        var boundary = task.blockedBoundary, segment = task.blockedSegment;
        if (segment.status = ABORTED, boundary === null)
          request.allPendingTasks--, request.status !== CLOSED && (request.status = CLOSED, request.destination !== null && close(request.destination));
        else {
          if (boundary.pendingTasks--, !boundary.forceClientRender) {
            boundary.forceClientRender = !0;
            var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
            boundary.errorDigest = request.onError(_error);
            {
              var errorPrefix = "The server did not finish this Suspense boundary: ";
              _error && typeof _error.message == "string" ? _error = errorPrefix + _error.message : _error = errorPrefix + String(_error);
              var previousTaskInDev = currentTaskInDEV;
              currentTaskInDEV = task;
              try {
                captureBoundaryErrorDetailsDev(boundary, _error);
              } finally {
                currentTaskInDEV = previousTaskInDev;
              }
            }
            boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary);
          }
          if (boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
            return abortTask(fallbackTask, request, reason);
          }), boundary.fallbackAbortableTasks.clear(), request.allPendingTasks--, request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
      }
      function queueCompletedSegment(boundary, segment) {
        if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
          var childSegment = segment.children[0];
          childSegment.id = segment.id, childSegment.parentFlushed = !0, childSegment.status === COMPLETED && queueCompletedSegment(boundary, childSegment);
        } else {
          var completedSegments = boundary.completedSegments;
          completedSegments.push(segment);
        }
      }
      function finishedTask(request, boundary, segment) {
        if (boundary === null) {
          if (segment.parentFlushed) {
            if (request.completedRootSegment !== null)
              throw new Error("There can only be one root segment. This is a bug in React.");
            request.completedRootSegment = segment;
          }
          if (request.pendingRootTasks--, request.pendingRootTasks === 0) {
            request.onShellError = noop$1;
            var onShellReady = request.onShellReady;
            onShellReady();
          }
        } else if (boundary.pendingTasks--, !boundary.forceClientRender) {
          if (boundary.pendingTasks === 0)
            segment.parentFlushed && segment.status === COMPLETED && queueCompletedSegment(boundary, segment), boundary.parentFlushed && request.completedBoundaries.push(boundary), boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request), boundary.fallbackAbortableTasks.clear();
          else if (segment.parentFlushed && segment.status === COMPLETED) {
            queueCompletedSegment(boundary, segment);
            var completedSegments = boundary.completedSegments;
            completedSegments.length === 1 && boundary.parentFlushed && request.partialBoundaries.push(boundary);
          }
        }
        if (request.allPendingTasks--, request.allPendingTasks === 0) {
          var onAllReady = request.onAllReady;
          onAllReady();
        }
      }
      function retryTask(request, task) {
        var segment = task.blockedSegment;
        if (segment.status === PENDING) {
          switchContext(task.context);
          var prevTaskInDEV = null;
          prevTaskInDEV = currentTaskInDEV, currentTaskInDEV = task;
          try {
            renderNodeDestructive(request, task, task.node), pushSegmentFinale(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded), task.abortSet.delete(task), segment.status = COMPLETED, finishedTask(request, task.blockedBoundary, segment);
          } catch (x) {
            if (resetHooksState(), typeof x == "object" && x !== null && typeof x.then == "function") {
              var ping = task.ping;
              x.then(ping, ping);
            } else
              task.abortSet.delete(task), segment.status = ERRORED, erroredTask(request, task.blockedBoundary, segment, x);
          } finally {
            currentTaskInDEV = prevTaskInDEV;
          }
        }
      }
      function performWork(request) {
        if (request.status !== CLOSED) {
          var prevContext = getActiveContext(), prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack, ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks, i13;
            for (i13 = 0; i13 < pingedTasks.length; i13++) {
              var task = pingedTasks[i13];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i13), request.destination !== null && flushCompletedQueues(request, request.destination);
          } catch (error3) {
            logRecoverableError(request, error3), fatalError(request, error3);
          } finally {
            setCurrentResponseState(prevResponseState), ReactCurrentDispatcher$1.current = prevDispatcher, ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl, prevDispatcher === Dispatcher && switchContext(prevContext);
          }
        }
      }
      function flushSubtree(request, destination, segment) {
        switch (segment.parentFlushed = !0, segment.status) {
          case PENDING: {
            var segmentID = segment.id = request.nextSegmentId++;
            return segment.lastPushedText = !1, segment.textEmbedded = !1, writePlaceholder(destination, request.responseState, segmentID);
          }
          case COMPLETED: {
            segment.status = FLUSHED;
            for (var r25 = !0, chunks = segment.chunks, chunkIdx = 0, children = segment.children, childIdx = 0; childIdx < children.length; childIdx++) {
              for (var nextChild = children[childIdx]; chunkIdx < nextChild.index; chunkIdx++)
                writeChunk(destination, chunks[chunkIdx]);
              r25 = flushSegment(request, destination, nextChild);
            }
            for (; chunkIdx < chunks.length - 1; chunkIdx++)
              writeChunk(destination, chunks[chunkIdx]);
            return chunkIdx < chunks.length && (r25 = writeChunkAndReturn(destination, chunks[chunkIdx])), r25;
          }
          default:
            throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
        }
      }
      function flushSegment(request, destination, segment) {
        var boundary = segment.boundary;
        if (boundary === null)
          return flushSubtree(request, destination, segment);
        if (boundary.parentFlushed = !0, boundary.forceClientRender)
          return writeStartClientRenderedSuspenseBoundary(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack), flushSubtree(request, destination, segment), writeEndClientRenderedSuspenseBoundary(destination, request.responseState);
        if (boundary.pendingTasks > 0) {
          boundary.rootSegmentID = request.nextSegmentId++, boundary.completedSegments.length > 0 && request.partialBoundaries.push(boundary);
          var id3 = boundary.id = assignSuspenseBoundaryID(request.responseState);
          return writeStartPendingSuspenseBoundary(destination, request.responseState, id3), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
        } else {
          if (boundary.byteSize > request.progressiveChunkSize)
            return boundary.rootSegmentID = request.nextSegmentId++, request.completedBoundaries.push(boundary), writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id), flushSubtree(request, destination, segment), writeEndPendingSuspenseBoundary(destination, request.responseState);
          writeStartCompletedSuspenseBoundary(destination, request.responseState);
          var completedSegments = boundary.completedSegments;
          if (completedSegments.length !== 1)
            throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
          var contentSegment = completedSegments[0];
          return flushSegment(request, destination, contentSegment), writeEndCompletedSuspenseBoundary(destination, request.responseState);
        }
      }
      function flushClientRenderedBoundary(request, destination, boundary) {
        return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
      }
      function flushSegmentContainer(request, destination, segment) {
        return writeStartSegment(destination, request.responseState, segment.formatContext, segment.id), flushSegment(request, destination, segment), writeEndSegment(destination, segment.formatContext);
      }
      function flushCompletedBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i13 = 0; i13 < completedSegments.length; i13++) {
          var segment = completedSegments[i13];
          flushPartiallyCompletedSegment(request, destination, boundary, segment);
        }
        return completedSegments.length = 0, writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
      }
      function flushPartialBoundary(request, destination, boundary) {
        for (var completedSegments = boundary.completedSegments, i13 = 0; i13 < completedSegments.length; i13++) {
          var segment = completedSegments[i13];
          if (!flushPartiallyCompletedSegment(request, destination, boundary, segment))
            return i13++, completedSegments.splice(0, i13), !1;
        }
        return completedSegments.splice(0, i13), !0;
      }
      function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
        if (segment.status === FLUSHED)
          return !0;
        var segmentID = segment.id;
        if (segmentID === -1) {
          var rootSegmentID = segment.id = boundary.rootSegmentID;
          if (rootSegmentID === -1)
            throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
          return flushSegmentContainer(request, destination, segment);
        } else
          return flushSegmentContainer(request, destination, segment), writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
      }
      function flushCompletedQueues(request, destination) {
        beginWriting();
        try {
          var completedRootSegment = request.completedRootSegment;
          completedRootSegment !== null && request.pendingRootTasks === 0 && (flushSegment(request, destination, completedRootSegment), request.completedRootSegment = null, writeCompletedRoot(destination, request.responseState));
          var clientRenderedBoundaries = request.clientRenderedBoundaries, i13;
          for (i13 = 0; i13 < clientRenderedBoundaries.length; i13++) {
            var boundary = clientRenderedBoundaries[i13];
            if (!flushClientRenderedBoundary(request, destination, boundary)) {
              request.destination = null, i13++, clientRenderedBoundaries.splice(0, i13);
              return;
            }
          }
          clientRenderedBoundaries.splice(0, i13);
          var completedBoundaries = request.completedBoundaries;
          for (i13 = 0; i13 < completedBoundaries.length; i13++) {
            var _boundary = completedBoundaries[i13];
            if (!flushCompletedBoundary(request, destination, _boundary)) {
              request.destination = null, i13++, completedBoundaries.splice(0, i13);
              return;
            }
          }
          completedBoundaries.splice(0, i13), completeWriting(destination), beginWriting(destination);
          var partialBoundaries = request.partialBoundaries;
          for (i13 = 0; i13 < partialBoundaries.length; i13++) {
            var _boundary2 = partialBoundaries[i13];
            if (!flushPartialBoundary(request, destination, _boundary2)) {
              request.destination = null, i13++, partialBoundaries.splice(0, i13);
              return;
            }
          }
          partialBoundaries.splice(0, i13);
          var largeBoundaries = request.completedBoundaries;
          for (i13 = 0; i13 < largeBoundaries.length; i13++) {
            var _boundary3 = largeBoundaries[i13];
            if (!flushCompletedBoundary(request, destination, _boundary3)) {
              request.destination = null, i13++, largeBoundaries.splice(0, i13);
              return;
            }
          }
          largeBoundaries.splice(0, i13);
        } finally {
          completeWriting(destination), flushBuffered(destination), request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 && (request.abortableTasks.size !== 0 && error2("There was still abortable task at the root when we closed. This is a bug in React."), close(destination));
        }
      }
      function startWork(request) {
        scheduleWork(function() {
          return performWork(request);
        });
      }
      function startFlowing(request, destination) {
        if (request.status === CLOSING) {
          request.status = CLOSED, closeWithError(destination, request.fatalError);
          return;
        }
        if (request.status !== CLOSED && request.destination === null) {
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error3) {
            logRecoverableError(request, error3), fatalError(request, error3);
          }
        }
      }
      function abort(request, reason) {
        try {
          var abortableTasks = request.abortableTasks;
          abortableTasks.forEach(function(task) {
            return abortTask(task, request, reason);
          }), abortableTasks.clear(), request.destination !== null && flushCompletedQueues(request, request.destination);
        } catch (error3) {
          logRecoverableError(request, error3), fatalError(request, error3);
        }
      }
      function createDrainHandler(destination, request) {
        return function() {
          return startFlowing(request, destination);
        };
      }
      function createAbortHandler(request, reason) {
        return function() {
          return abort(request, reason);
        };
      }
      function createRequestImpl(children, options) {
        return createRequest(children, createResponseState(options ? options.identifierPrefix : void 0, options ? options.nonce : void 0, options ? options.bootstrapScriptContent : void 0, options ? options.bootstrapScripts : void 0, options ? options.bootstrapModules : void 0), createRootFormatContext(options ? options.namespaceURI : void 0), options ? options.progressiveChunkSize : void 0, options ? options.onError : void 0, options ? options.onAllReady : void 0, options ? options.onShellReady : void 0, options ? options.onShellError : void 0, void 0);
      }
      function renderToPipeableStream2(children, options) {
        var request = createRequestImpl(children, options), hasStartedFlowing = !1;
        return startWork(request), {
          pipe: function(destination) {
            if (hasStartedFlowing)
              throw new Error("React currently only supports piping to one writable stream.");
            return hasStartedFlowing = !0, startFlowing(request, destination), destination.on("drain", createDrainHandler(destination, request)), destination.on("error", createAbortHandler(
              request,
              // eslint-disable-next-line react-internal/prod-error-codes
              new Error("The destination stream errored while writing data.")
            )), destination.on("close", createAbortHandler(
              request,
              // eslint-disable-next-line react-internal/prod-error-codes
              new Error("The destination stream closed early.")
            )), destination;
          },
          abort: function(reason) {
            abort(request, reason);
          }
        };
      }
      exports.renderToPipeableStream = renderToPipeableStream2, exports.version = ReactVersion;
    })();
  }
});

// ../../../node_modules/react-dom/server.node.js
var require_server_node = __commonJS({
  "../../../node_modules/react-dom/server.node.js"(exports) {
    "use strict";
    var l10, s;
    l10 = require_react_dom_server_legacy_node_development(), s = require_react_dom_server_node_development();
    exports.version = l10.version;
    exports.renderToString = l10.renderToString;
    exports.renderToStaticMarkup = l10.renderToStaticMarkup;
    exports.renderToNodeStream = l10.renderToNodeStream;
    exports.renderToStaticNodeStream = l10.renderToStaticNodeStream;
    exports.renderToPipeableStream = s.renderToPipeableStream;
  }
});

// ../../../node_modules/react/cjs/react-jsx-dev-runtime.development.js
var require_react_jsx_dev_runtime_development = __commonJS({
  "../../../node_modules/react/cjs/react-jsx-dev-runtime.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var React12 = require_react(), REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var ReactSharedInternals = React12.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error2(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = !1, enableCacheElement = !1, enableTransitionTracing = !1, enableLegacyHidden = !1, enableDebugTracing = !1, REACT_MODULE_REFERENCE;
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      function isValidElementType(type2) {
        return !!(typeof type2 == "string" || typeof type2 == "function" || type2 === REACT_FRAGMENT_TYPE || type2 === REACT_PROFILER_TYPE || enableDebugTracing || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type2 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing || typeof type2 == "object" && type2 !== null && (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type2.$$typeof === REACT_MODULE_REFERENCE || type2.getModuleId !== void 0));
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type2) {
        return type2.displayName || "Context";
      }
      function getComponentNameFromType(type2) {
        if (type2 == null)
          return null;
        if (typeof type2.tag == "number" && error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type2 == "function")
          return type2.displayName || type2.name || null;
        if (typeof type2 == "string")
          return type2;
        switch (type2) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type2 == "object")
          switch (type2.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type2;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type2;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type2, type2.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type2.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type2.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type2, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame2 = componentFrameCache.get(fn);
          if (frame2 !== void 0)
            return frame2;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
        if (type2 == null)
          return "";
        if (typeof type2 == "function")
          return describeNativeComponentFrame(type2, shouldConstruct(type2));
        if (typeof type2 == "string")
          return describeBuiltInComponentFrame(type2);
        switch (type2) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type2 == "object")
          switch (type2.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type2.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type2, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty, loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error2("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a9) {
        return isArrayImpl(a9);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type2 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type2;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner, RESERVED_PROPS = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      didWarnAboutStringRefs = {};
      function hasValidRef(config) {
        if (hasOwnProperty.call(config, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config, "key").get;
          if (getter && getter.isReactWarning)
            return !1;
        }
        return config.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config, self2) {
        if (typeof config.ref == "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          didWarnAboutStringRefs[componentName] || (error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref), didWarnAboutStringRefs[componentName] = !0);
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingKey.isReactWarning = !0, Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            specialPropRefWarningShown || (specialPropRefWarningShown = !0, error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName));
          };
          warnAboutAccessingRef.isReactWarning = !0, Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: !0
          });
        }
      }
      var ReactElement = function(type2, key, ref, self2, source, owner, props) {
        var element = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE,
          // Built-in properties that belong on the element
          type: type2,
          key,
          ref,
          props,
          // Record the component responsible for creating this element.
          _owner: owner
        };
        return element._store = {}, Object.defineProperty(element._store, "validated", {
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
        }), Object.defineProperty(element, "_self", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: self2
        }), Object.defineProperty(element, "_source", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: source
        }), Object.freeze && (Object.freeze(element.props), Object.freeze(element)), element;
      };
      function jsxDEV38(type2, config, maybeKey, source, self2) {
        {
          var propName, props = {}, key = null, ref = null;
          maybeKey !== void 0 && (checkKeyStringCoercion(maybeKey), key = "" + maybeKey), hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key), hasValidRef(config) && (ref = config.ref, warnIfStringRefCannotBeAutoConverted(config, self2));
          for (propName in config)
            hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName) && (props[propName] = config[propName]);
          if (type2 && type2.defaultProps) {
            var defaultProps = type2.defaultProps;
            for (propName in defaultProps)
              props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          }
          if (key || ref) {
            var displayName = typeof type2 == "function" ? type2.displayName || type2.name || "Unknown" : type2;
            key && defineKeyPropWarningGetter(props, displayName), ref && defineRefPropWarningGetter(props, displayName);
          }
          return ReactElement(type2, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      var propTypesMisspellWarningShown;
      propTypesMisspellWarningShown = !1;
      function isValidElement(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name)
              return `

Check the render method of \`` + name + "`.";
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, ""), lineNumber = source.lineNumber;
            return `

Check your code at ` + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType == "string" ? parentType : parentType.displayName || parentType.name;
            parentName && (info = `

Check the top-level render call using <` + parentName + ">.");
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null)
            return;
          element._store.validated = !0;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo])
            return;
          ownerHasKeyUseWarning[currentComponentErrorInfo] = !0;
          var childOwner = "";
          element && element._owner && element._owner !== ReactCurrentOwner$1.current && (childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + "."), setCurrentlyValidatingElement$1(element), error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner), setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        {
          if (typeof node != "object")
            return;
          if (isArray(node))
            for (var i13 = 0; i13 < node.length; i13++) {
              var child = node[i13];
              isValidElement(child) && validateExplicitKey(child, parentType);
            }
          else if (isValidElement(node))
            node._store && (node._store.validated = !0);
          else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn == "function" && iteratorFn !== node.entries)
              for (var iterator = iteratorFn.call(node), step2; !(step2 = iterator.next()).done; )
                isValidElement(step2.value) && validateExplicitKey(step2.value, parentType);
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type2 = element.type;
          if (type2 == null || typeof type2 == "string")
            return;
          var propTypes;
          if (typeof type2 == "function")
            propTypes = type2.propTypes;
          else if (typeof type2 == "object" && (type2.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          type2.$$typeof === REACT_MEMO_TYPE))
            propTypes = type2.propTypes;
          else
            return;
          if (propTypes) {
            var name = getComponentNameFromType(type2);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type2.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = !0;
            var _name = getComponentNameFromType(type2);
            error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          typeof type2.getDefaultProps == "function" && !type2.getDefaultProps.isReactClassApproved && error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function validateFragmentProps(fragment) {
        {
          for (var keys = Object.keys(fragment.props), i13 = 0; i13 < keys.length; i13++) {
            var key = keys[i13];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment), error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key), setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          fragment.ref !== null && (setCurrentlyValidatingElement$1(fragment), error2("Invalid attribute `ref` supplied to `React.Fragment`."), setCurrentlyValidatingElement$1(null));
        }
      }
      function jsxWithValidation(type2, props, key, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type2);
          if (!validType) {
            var info = "";
            (type2 === void 0 || typeof type2 == "object" && type2 !== null && Object.keys(type2).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
            var sourceInfo = getSourceInfoErrorAddendum(source);
            sourceInfo ? info += sourceInfo : info += getDeclarationErrorAddendum();
            var typeString;
            type2 === null ? typeString = "null" : isArray(type2) ? typeString = "array" : type2 !== void 0 && type2.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type2.type) || "Unknown") + " />", info = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type2, error2("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV38(type2, props, key, source, self2);
          if (element == null)
            return element;
          if (validType) {
            var children = props.children;
            if (children !== void 0)
              if (isStaticChildren)
                if (isArray(children)) {
                  for (var i13 = 0; i13 < children.length; i13++)
                    validateChildKeys(children[i13], type2);
                  Object.freeze && Object.freeze(children);
                } else
                  error2("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              else
                validateChildKeys(children, type2);
          }
          return type2 === REACT_FRAGMENT_TYPE ? validateFragmentProps(element) : validatePropTypes(element), element;
        }
      }
      var jsxDEV$1 = jsxWithValidation;
      exports.Fragment = REACT_FRAGMENT_TYPE, exports.jsxDEV = jsxDEV$1;
    })();
  }
});

// ../../../node_modules/react/jsx-dev-runtime.js
var require_jsx_dev_runtime = __commonJS({
  "../../../node_modules/react/jsx-dev-runtime.js"(exports, module2) {
    "use strict";
    module2.exports = require_react_jsx_dev_runtime_development();
  }
});

// ../../../node_modules/clsx/dist/clsx.js
var require_clsx = __commonJS({
  "../../../node_modules/clsx/dist/clsx.js"(exports, module2) {
    function e24(r26) {
      var o3, t17, f = "";
      if (typeof r26 == "string" || typeof r26 == "number")
        f += r26;
      else if (typeof r26 == "object")
        if (Array.isArray(r26))
          for (o3 = 0; o3 < r26.length; o3++)
            r26[o3] && (t17 = e24(r26[o3])) && (f && (f += " "), f += t17);
        else
          for (o3 in r26)
            r26[o3] && (f && (f += " "), f += o3);
      return f;
    }
    function r25() {
      for (var r26, o3, t17 = 0, f = ""; t17 < arguments.length; )
        (r26 = arguments[t17++]) && (o3 = e24(r26)) && (f && (f += " "), f += o3);
      return f;
    }
    module2.exports = r25, module2.exports.clsx = r25;
  }
});

// ../../../node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "../../../node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var enableSchedulerDebugging = !1, enableProfiling = !1, frameYieldMs = 5;
      function push(heap, node) {
        var index2 = heap.length;
        heap.push(node), siftUp(heap, node, index2);
      }
      function peek(heap) {
        return heap.length === 0 ? null : heap[0];
      }
      function pop(heap) {
        if (heap.length === 0)
          return null;
        var first = heap[0], last = heap.pop();
        return last !== first && (heap[0] = last, siftDown(heap, last, 0)), first;
      }
      function siftUp(heap, node, i13) {
        for (var index2 = i13; index2 > 0; ) {
          var parentIndex = index2 - 1 >>> 1, parent = heap[parentIndex];
          if (compare(parent, node) > 0)
            heap[parentIndex] = node, heap[index2] = parent, index2 = parentIndex;
          else
            return;
        }
      }
      function siftDown(heap, node, i13) {
        for (var index2 = i13, length = heap.length, halfLength = length >>> 1; index2 < halfLength; ) {
          var leftIndex = (index2 + 1) * 2 - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
          if (compare(left, node) < 0)
            rightIndex < length && compare(right, left) < 0 ? (heap[index2] = right, heap[rightIndex] = node, index2 = rightIndex) : (heap[index2] = left, heap[leftIndex] = node, index2 = leftIndex);
          else if (rightIndex < length && compare(right, node) < 0)
            heap[index2] = right, heap[rightIndex] = node, index2 = rightIndex;
          else
            return;
        }
      }
      function compare(a9, b) {
        var diff = a9.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a9.id - b.id;
      }
      var ImmediatePriority = 1, UserBlockingPriority = 2, NormalPriority = 3, LowPriority = 4, IdlePriority = 5;
      function markTaskErrored(task, ms) {
      }
      var hasPerformanceNow = typeof performance == "object" && typeof performance.now == "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date, initialTime = localDate.now();
        exports.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var maxSigned31BitInt = 1073741823, IMMEDIATE_PRIORITY_TIMEOUT = -1, USER_BLOCKING_PRIORITY_TIMEOUT = 250, NORMAL_PRIORITY_TIMEOUT = 5e3, LOW_PRIORITY_TIMEOUT = 1e4, IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt, taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = NormalPriority, isPerformingWork = !1, isHostCallbackScheduled = !1, isHostTimeoutScheduled = !1, localSetTimeout = typeof setTimeout == "function" ? setTimeout : null, localClearTimeout = typeof clearTimeout == "function" ? clearTimeout : null, localSetImmediate = typeof setImmediate < "u" ? setImmediate : null, isInputPending = typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
      function advanceTimers(currentTime) {
        for (var timer = peek(timerQueue); timer !== null; ) {
          if (timer.callback === null)
            pop(timerQueue);
          else if (timer.startTime <= currentTime)
            pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
          else
            return;
          timer = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        if (isHostTimeoutScheduled = !1, advanceTimers(currentTime), !isHostCallbackScheduled)
          if (peek(taskQueue) !== null)
            isHostCallbackScheduled = !0, requestHostCallback(flushWork);
          else {
            var firstTimer = peek(timerQueue);
            firstTimer !== null && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        isHostCallbackScheduled = !1, isHostTimeoutScheduled && (isHostTimeoutScheduled = !1, cancelHostTimeout()), isPerformingWork = !0;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          if (enableProfiling)
            try {
              return workLoop(hasTimeRemaining, initialTime2);
            } catch (error2) {
              if (currentTask !== null) {
                var currentTime = exports.unstable_now();
                currentTask.isQueued = !1;
              }
              throw error2;
            }
          else
            return workLoop(hasTimeRemaining, initialTime2);
        } finally {
          currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = !1;
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        for (advanceTimers(currentTime), currentTask = peek(taskQueue); currentTask !== null && !enableSchedulerDebugging && !(currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())); ) {
          var callback = currentTask.callback;
          if (typeof callback == "function") {
            currentTask.callback = null, currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime, continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now(), typeof continuationCallback == "function" ? currentTask.callback = continuationCallback : currentTask === peek(taskQueue) && pop(taskQueue), advanceTimers(currentTime);
          } else
            pop(taskQueue);
          currentTask = peek(taskQueue);
        }
        if (currentTask !== null)
          return !0;
        var firstTimer = peek(timerQueue);
        return firstTimer !== null && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime), !1;
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now(), startTime2;
        if (typeof options == "object" && options !== null) {
          var delay2 = options.delay;
          typeof delay2 == "number" && delay2 > 0 ? startTime2 = currentTime + delay2 : startTime2 = currentTime;
        } else
          startTime2 = currentTime;
        var timeout;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime2 + timeout, newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: startTime2,
          expirationTime,
          sortIndex: -1
        };
        return startTime2 > currentTime ? (newTask.sortIndex = startTime2, push(timerQueue, newTask), peek(taskQueue) === null && newTask === peek(timerQueue) && (isHostTimeoutScheduled ? cancelHostTimeout() : isHostTimeoutScheduled = !0, requestHostTimeout(handleTimeout, startTime2 - currentTime))) : (newTask.sortIndex = expirationTime, push(taskQueue, newTask), !isHostCallbackScheduled && !isPerformingWork && (isHostCallbackScheduled = !0, requestHostCallback(flushWork))), newTask;
      }
      function unstable_pauseExecution() {
      }
      function unstable_continueExecution() {
        !isHostCallbackScheduled && !isPerformingWork && (isHostCallbackScheduled = !0, requestHostCallback(flushWork));
      }
      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }
      function unstable_cancelCallback(task) {
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var isMessageLoopRunning = !1, scheduledHostCallback = null, taskTimeoutID = -1, frameInterval = frameYieldMs, startTime = -1;
      function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        return !(timeElapsed < frameInterval);
      }
      function requestPaint() {
      }
      function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
          console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        fps > 0 ? frameInterval = Math.floor(1e3 / fps) : frameInterval = frameYieldMs;
      }
      var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
          var currentTime = exports.unstable_now();
          startTime = currentTime;
          var hasTimeRemaining = !0, hasMoreWork = !0;
          try {
            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          } finally {
            hasMoreWork ? schedulePerformWorkUntilDeadline() : (isMessageLoopRunning = !1, scheduledHostCallback = null);
          }
        } else
          isMessageLoopRunning = !1;
      }, schedulePerformWorkUntilDeadline;
      if (typeof localSetImmediate == "function")
        schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      else if (typeof MessageChannel < "u") {
        var channel = new MessageChannel(), port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline, schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      function requestHostCallback(callback) {
        scheduledHostCallback = callback, isMessageLoopRunning || (isMessageLoopRunning = !0, schedulePerformWorkUntilDeadline());
      }
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports.unstable_now());
        }, ms);
      }
      function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID), taskTimeoutID = -1;
      }
      var unstable_requestPaint = requestPaint, unstable_Profiling = null;
      exports.unstable_IdlePriority = IdlePriority, exports.unstable_ImmediatePriority = ImmediatePriority, exports.unstable_LowPriority = LowPriority, exports.unstable_NormalPriority = NormalPriority, exports.unstable_Profiling = unstable_Profiling, exports.unstable_UserBlockingPriority = UserBlockingPriority, exports.unstable_cancelCallback = unstable_cancelCallback, exports.unstable_continueExecution = unstable_continueExecution, exports.unstable_forceFrameRate = forceFrameRate, exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel, exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode, exports.unstable_next = unstable_next, exports.unstable_pauseExecution = unstable_pauseExecution, exports.unstable_requestPaint = unstable_requestPaint, exports.unstable_runWithPriority = unstable_runWithPriority, exports.unstable_scheduleCallback = unstable_scheduleCallback, exports.unstable_shouldYield = shouldYieldToHost, exports.unstable_wrapCallback = unstable_wrapCallback, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }
});

// ../../../node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "../../../node_modules/scheduler/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_scheduler_development();
  }
});

// ../../../node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "../../../node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var React12 = require_react(), Scheduler = require_scheduler(), ReactSharedInternals = React12.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, suppressWarning = !1;
      function setSuppressWarning(newSuppressWarning) {
        suppressWarning = newSuppressWarning;
      }
      function warn(format) {
        if (!suppressWarning) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)
            args[_key - 1] = arguments[_key];
          printWarning("warn", format, args);
        }
      }
      function error2(format) {
        if (!suppressWarning) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)
            args[_key2 - 1] = arguments[_key2];
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame, stack = ReactDebugCurrentFrame2.getStackAddendum();
          stack !== "" && (format += "%s", args = args.concat([stack]));
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format), Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var FunctionComponent = 0, ClassComponent = 1, IndeterminateComponent = 2, HostRoot = 3, HostPortal = 4, HostComponent = 5, HostText = 6, Fragment9 = 7, Mode = 8, ContextConsumer = 9, ContextProvider = 10, ForwardRef = 11, Profiler = 12, SuspenseComponent = 13, MemoComponent = 14, SimpleMemoComponent = 15, LazyComponent = 16, IncompleteClassComponent = 17, DehydratedFragment = 18, SuspenseListComponent = 19, ScopeComponent = 21, OffscreenComponent = 22, LegacyHiddenComponent = 23, CacheComponent = 24, TracingMarkerComponent = 25, enableClientRenderFallbackOnTextMismatch = !0, enableNewReconciler = !1, enableLazyContextPropagation = !1, enableLegacyHidden = !1, enableSuspenseAvoidThisFallback = !1, disableCommentsAsDOMContainers = !0, enableCustomElementPropertySupport = !1, warnAboutStringRefs = !1, enableSchedulingProfiler = !0, enableProfilerTimer = !0, enableProfilerCommitHooks = !0, allNativeEvents = /* @__PURE__ */ new Set(), registrationNameDependencies = {}, possibleRegistrationNames = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies), registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        registrationNameDependencies[registrationName] && error2("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName), registrationNameDependencies[registrationName] = dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName, registrationName === "onDoubleClick" && (possibleRegistrationNames.ondblclick = registrationName);
        }
        for (var i13 = 0; i13 < dependencies.length; i13++)
          allNativeEvents.add(dependencies[i13]);
      }
      var canUseDOM = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", hasOwnProperty = Object.prototype.hasOwnProperty;
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol == "function" && Symbol.toStringTag, type2 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type2;
        }
      }
      function willCoercionThrow(value) {
        try {
          return testStringCoercion(value), !1;
        } catch {
          return !0;
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value))
          return error2("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), testStringCoercion(value);
      }
      function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value))
          return error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      function checkPropStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error2("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value))
          return error2("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), testStringCoercion(value);
      }
      function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value))
          return error2("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      function checkFormFieldValueStringCoercion(value) {
        if (willCoercionThrow(value))
          return error2("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value)), testStringCoercion(value);
      }
      var RESERVED = 0, STRING = 1, BOOLEANISH_STRING = 2, BOOLEAN = 3, OVERLOADED_BOOLEAN = 4, NUMERIC = 5, POSITIVE_NUMERIC = 6, ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        return hasOwnProperty.call(validatedAttributeNameCache, attributeName) ? !0 : hasOwnProperty.call(illegalAttributeNameCache, attributeName) ? !1 : VALID_ATTRIBUTE_NAME_REGEX.test(attributeName) ? (validatedAttributeNameCache[attributeName] = !0, !0) : (illegalAttributeNameCache[attributeName] = !0, error2("Invalid attribute name: `%s`", attributeName), !1);
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        return propertyInfo !== null ? propertyInfo.type === RESERVED : isCustomComponentTag ? !1 : name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N");
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED)
          return !1;
        switch (typeof value) {
          case "function":
          case "symbol":
            return !0;
          case "boolean": {
            if (isCustomComponentTag)
              return !1;
            if (propertyInfo !== null)
              return !propertyInfo.acceptsBooleans;
            var prefix3 = name.toLowerCase().slice(0, 5);
            return prefix3 !== "data-" && prefix3 !== "aria-";
          }
          default:
            return !1;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value > "u" || shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag))
          return !0;
        if (isCustomComponentTag)
          return !1;
        if (propertyInfo !== null)
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === !1;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        return !1;
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type2, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type2 === BOOLEANISH_STRING || type2 === BOOLEAN || type2 === OVERLOADED_BOOLEAN, this.attributeName = attributeName, this.attributeNamespace = attributeNamespace, this.mustUseProperty = mustUseProperty, this.propertyName = name, this.type = type2, this.sanitizeURL = sanitizeURL2, this.removeEmptyString = removeEmptyString;
      }
      var properties = {}, reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        // TODO: This prevents the assignment of defaultValue to regular
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "allowFullScreen",
        "async",
        // Note: there is a special case that prevents it from being written to the DOM
        // on the client side because the browsers are inconsistent. Instead we call focus().
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        // Microdata
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !1,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "checked",
        // Note: `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`. We have special logic for handling this.
        "multiple",
        "muted",
        "selected"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          !0,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "capture",
        "download"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "cols",
        "rows",
        "size",
        "span"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          !1,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          !1,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g, capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/1999/xlink",
          !1,
          // sanitizeURL
          !1
        );
      }), [
        "xml:base",
        "xml:lang",
        "xml:space"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          !1,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          !1,
          // sanitizeURL
          !1
        );
      }), ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !1,
          // sanitizeURL
          !1
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        !1,
        // mustUseProperty
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        !0,
        // sanitizeURL
        !1
      ), ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          !1,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          !0,
          // sanitizeURL
          !0
        );
      });
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i, didWarn = !1;
      function sanitizeURL(url) {
        !didWarn && isJavaScriptProtocol.test(url) && (didWarn = !0, error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
      }
      function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          return node[propertyName];
        } else {
          checkAttributeStringCoercion(expected, name), propertyInfo.sanitizeURL && sanitizeURL("" + expected);
          var attributeName = propertyInfo.attributeName, stringValue = null;
          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node.hasAttribute(attributeName)) {
              var value = node.getAttribute(attributeName);
              return value === "" ? !0 : shouldRemoveAttribute(name, expected, propertyInfo, !1) ? value : value === "" + expected ? expected : value;
            }
          } else if (node.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, !1))
              return node.getAttribute(attributeName);
            if (propertyInfo.type === BOOLEAN)
              return expected;
            stringValue = node.getAttribute(attributeName);
          }
          return shouldRemoveAttribute(name, expected, propertyInfo, !1) ? stringValue === null ? expected : stringValue : stringValue === "" + expected ? expected : stringValue;
        }
      }
      function getValueForAttribute(node, name, expected, isCustomComponentTag) {
        {
          if (!isAttributeNameSafe(name))
            return;
          if (!node.hasAttribute(name))
            return expected === void 0 ? void 0 : null;
          var value = node.getAttribute(name);
          return checkAttributeStringCoercion(expected, name), value === "" + expected ? expected : value;
        }
      }
      function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (!shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) && (value = null), isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              value === null ? node.removeAttribute(_attributeName) : (checkAttributeStringCoercion(value, name), node.setAttribute(_attributeName, "" + value));
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type2 = propertyInfo.type;
              node[propertyName] = type2 === BOOLEAN ? !1 : "";
            } else
              node[propertyName] = value;
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null)
            node.removeAttribute(attributeName);
          else {
            var _type = propertyInfo.type, attributeValue;
            _type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === !0 ? attributeValue = "" : (checkAttributeStringCoercion(value, attributeName), attributeValue = "" + value, propertyInfo.sanitizeURL && sanitizeURL(attributeValue.toString())), attributeNamespace ? node.setAttributeNS(attributeNamespace, attributeName, attributeValue) : node.setAttribute(attributeName, attributeValue);
          }
        }
      }
      var REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_CACHE_TYPE = Symbol.for("react.cache"), REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable != "object")
          return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        return typeof maybeIterator == "function" ? maybeIterator : null;
      }
      var assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = !0;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log, prevInfo = console.info, prevWarn = console.warn, prevError = console.error, prevGroup = console.group, prevGroupCollapsed = console.groupCollapsed, prevGroupEnd = console.groupEnd;
            var props = {
              configurable: !0,
              enumerable: !0,
              value: disabledLog,
              writable: !0
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          if (disabledDepth--, disabledDepth === 0) {
            var props = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          disabledDepth < 0 && error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0)
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match && match[1] || "";
            }
          return `
` + prefix2 + name;
        }
      }
      var reentry = !1, componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap == "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry)
          return "";
        {
          var frame2 = componentFrameCache.get(fn);
          if (frame2 !== void 0)
            return frame2;
        }
        var control;
        reentry = !0;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current, ReactCurrentDispatcher.current = null, disableLogs();
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            if (Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack == "string") {
            for (var sampleLines = sample.stack.split(`
`), controlLines = control.stack.split(`
`), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]; )
              c--;
            for (; s >= 1 && c >= 0; s--, c--)
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1)
                  do
                    if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      return fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName)), typeof fn == "function" && componentFrameCache.set(fn, _frame), _frame;
                    }
                  while (s >= 1 && c >= 0);
                break;
              }
          }
        } finally {
          reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "", syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        return typeof fn == "function" && componentFrameCache.set(fn, syntheticFrame), syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, !0);
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, !1);
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
        if (type2 == null)
          return "";
        if (typeof type2 == "function")
          return describeNativeComponentFrame(type2, shouldConstruct(type2));
        if (typeof type2 == "string")
          return describeBuiltInComponentFrame(type2);
        switch (type2) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type2 == "object")
          switch (type2.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type2.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type2, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch {
              }
            }
          }
        return "";
      }
      function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null, source = fiber._debugSource;
        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type);
          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy");
          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense");
          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList");
          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type);
          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render);
          case ClassComponent:
            return describeClassComponentFrame(fiber.type);
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "", node = workInProgress2;
          do
            info += describeFiber(node), node = node.return;
          while (node);
          return info;
        } catch (x) {
          return `
Error generating stack: ` + x.message + `
` + x.stack;
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName)
          return displayName;
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type2) {
        return type2.displayName || "Context";
      }
      function getComponentNameFromType(type2) {
        if (type2 == null)
          return null;
        if (typeof type2.tag == "number" && error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof type2 == "function")
          return type2.displayName || type2.name || null;
        if (typeof type2 == "string")
          return type2;
        switch (type2) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type2 == "object")
          switch (type2.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type2;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type2;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type2, type2.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type2.displayName || null;
              return outerName !== null ? outerName : getComponentNameFromType(type2.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type2, payload = lazyComponent._payload, init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName$1(type2) {
        return type2.displayName || "Context";
      }
      function getComponentNameFromFiber(fiber) {
        var tag = fiber.tag, type2 = fiber.type;
        switch (tag) {
          case CacheComponent:
            return "Cache";
          case ContextConsumer:
            var context = type2;
            return getContextName$1(context) + ".Consumer";
          case ContextProvider:
            var provider = type2;
            return getContextName$1(provider._context) + ".Provider";
          case DehydratedFragment:
            return "DehydratedFragment";
          case ForwardRef:
            return getWrappedName$1(type2, type2.render, "ForwardRef");
          case Fragment9:
            return "Fragment";
          case HostComponent:
            return type2;
          case HostPortal:
            return "Portal";
          case HostRoot:
            return "Root";
          case HostText:
            return "Text";
          case LazyComponent:
            return getComponentNameFromType(type2);
          case Mode:
            return type2 === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
          case OffscreenComponent:
            return "Offscreen";
          case Profiler:
            return "Profiler";
          case ScopeComponent:
            return "Scope";
          case SuspenseComponent:
            return "Suspense";
          case SuspenseListComponent:
            return "SuspenseList";
          case TracingMarkerComponent:
            return "TracingMarker";
          case ClassComponent:
          case FunctionComponent:
          case IncompleteClassComponent:
          case IndeterminateComponent:
          case MemoComponent:
          case SimpleMemoComponent:
            if (typeof type2 == "function")
              return type2.displayName || type2.name || null;
            if (typeof type2 == "string")
              return type2;
            break;
        }
        return null;
      }
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame, current = null, isRendering = !1;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null)
            return null;
          var owner = current._debugOwner;
          if (owner !== null && typeof owner < "u")
            return getComponentNameFromFiber(owner);
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        return current === null ? "" : getStackByFiberInDevAndProd(current);
      }
      function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null, current = null, isRendering = !1;
      }
      function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev, current = fiber, isRendering = !1;
      }
      function getCurrentFiber() {
        return current;
      }
      function setIsRendering(rendering) {
        isRendering = rendering;
      }
      function toString(value) {
        return "" + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            return checkFormFieldValueStringCoercion(value), value;
          default:
            return "";
        }
      }
      var hasReadOnlyValue = {
        button: !0,
        checkbox: !0,
        image: !0,
        hidden: !0,
        radio: !0,
        reset: !0,
        submit: !0
      };
      function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."), props.onChange || props.readOnly || props.disabled || props.checked == null || error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      }
      function isCheckable(elem) {
        var type2 = elem.type, nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type2 === "checkbox" || type2 === "radio");
      }
      function getTracker(node) {
        return node._valueTracker;
      }
      function detachTracker(node) {
        node._valueTracker = null;
      }
      function getValueFromNode(node) {
        var value = "";
        return node && (isCheckable(node) ? value = node.checked ? "true" : "false" : value = node.value), value;
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        checkFormFieldValueStringCoercion(node[valueField]);
        var currentValue = "" + node[valueField];
        if (!(node.hasOwnProperty(valueField) || typeof descriptor > "u" || typeof descriptor.get != "function" || typeof descriptor.set != "function")) {
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: !0,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              checkFormFieldValueStringCoercion(value), currentValue = "" + value, set2.call(this, value);
            }
          }), Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              checkFormFieldValueStringCoercion(value), currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node), delete node[valueField];
            }
          };
          return tracker;
        }
      }
      function track(node) {
        getTracker(node) || (node._valueTracker = trackValueOnNode(node));
      }
      function updateValueIfChanged(node) {
        if (!node)
          return !1;
        var tracker = getTracker(node);
        if (!tracker)
          return !0;
        var lastValue = tracker.getValue(), nextValue = getValueFromNode(node);
        return nextValue !== lastValue ? (tracker.setValue(nextValue), !0) : !1;
      }
      function getActiveElement(doc) {
        if (doc = doc || (typeof document < "u" ? document : void 0), typeof doc > "u")
          return null;
        try {
          return doc.activeElement || doc.body;
        } catch {
          return doc.body;
        }
      }
      var didWarnValueDefaultValue = !1, didWarnCheckedDefaultChecked = !1, didWarnControlledToUncontrolled = !1, didWarnUncontrolledToControlled = !1;
      function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
      }
      function getHostProps(element, props) {
        var node = element, checked = props.checked, hostProps = assign({}, props, {
          defaultChecked: void 0,
          defaultValue: void 0,
          value: void 0,
          checked: checked ?? node._wrapperState.initialChecked
        });
        return hostProps;
      }
      function initWrapperState(element, props) {
        checkControlledValueProps("input", props), props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked && (error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnCheckedDefaultChecked = !0), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue && (error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnValueDefaultValue = !0);
        var node = element, defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
          controlled: isControlled(props)
        };
      }
      function updateChecked(element, props) {
        var node = element, checked = props.checked;
        checked != null && setValueForProperty(node, "checked", checked, !1);
      }
      function updateWrapper(element, props) {
        var node = element;
        {
          var controlled = isControlled(props);
          !node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled && (error2("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), didWarnUncontrolledToControlled = !0), node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled && (error2("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), didWarnControlledToUncontrolled = !0);
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value), type2 = props.type;
        if (value != null)
          type2 === "number" ? (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
          // eslint-disable-next-line
          node.value != value) && (node.value = toString(value)) : node.value !== toString(value) && (node.value = toString(value));
        else if (type2 === "submit" || type2 === "reset") {
          node.removeAttribute("value");
          return;
        }
        props.hasOwnProperty("value") ? setDefaultValue(node, props.type, value) : props.hasOwnProperty("defaultValue") && setDefaultValue(node, props.type, getToStringValue(props.defaultValue)), props.checked == null && props.defaultChecked != null && (node.defaultChecked = !!props.defaultChecked);
      }
      function postMountWrapper(element, props, isHydrating2) {
        var node = element;
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
          var type2 = props.type, isButton = type2 === "submit" || type2 === "reset";
          if (isButton && (props.value === void 0 || props.value === null))
            return;
          var initialValue = toString(node._wrapperState.initialValue);
          isHydrating2 || initialValue !== node.value && (node.value = initialValue), node.defaultValue = initialValue;
        }
        var name = node.name;
        name !== "" && (node.name = ""), node.defaultChecked = !node.defaultChecked, node.defaultChecked = !!node._wrapperState.initialChecked, name !== "" && (node.name = name);
      }
      function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props), updateNamedCousins(node, props);
      }
      function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
          for (var queryRoot = rootNode; queryRoot.parentNode; )
            queryRoot = queryRoot.parentNode;
          checkAttributeStringCoercion(name, "name");
          for (var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]'), i13 = 0; i13 < group.length; i13++) {
            var otherNode = group[i13];
            if (!(otherNode === rootNode || otherNode.form !== rootNode.form)) {
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps)
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              updateValueIfChanged(otherNode), updateWrapper(otherNode, otherProps);
            }
          }
        }
      }
      function setDefaultValue(node, type2, value) {
        // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
        (type2 !== "number" || getActiveElement(node.ownerDocument) !== node) && (value == null ? node.defaultValue = toString(node._wrapperState.initialValue) : node.defaultValue !== toString(value) && (node.defaultValue = toString(value)));
      }
      var didWarnSelectedSetOnOption = !1, didWarnInvalidChild = !1, didWarnInvalidInnerHTML = !1;
      function validateProps(element, props) {
        props.value == null && (typeof props.children == "object" && props.children !== null ? React12.Children.forEach(props.children, function(child) {
          child != null && (typeof child == "string" || typeof child == "number" || didWarnInvalidChild || (didWarnInvalidChild = !0, error2("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")));
        }) : props.dangerouslySetInnerHTML != null && (didWarnInvalidInnerHTML || (didWarnInvalidInnerHTML = !0, error2("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.")))), props.selected != null && !didWarnSelectedSetOnOption && (error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = !0);
      }
      function postMountWrapper$1(element, props) {
        props.value != null && element.setAttribute("value", toString(getToStringValue(props.value)));
      }
      var isArrayImpl = Array.isArray;
      function isArray(a9) {
        return isArrayImpl(a9);
      }
      var didWarnValueDefaultValue$1;
      didWarnValueDefaultValue$1 = !1;
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        return ownerName ? `

Check the render method of \`` + ownerName + "`." : "";
      }
      var valuePropNames = ["value", "defaultValue"];
      function checkSelectPropTypes(props) {
        {
          checkControlledValueProps("select", props);
          for (var i13 = 0; i13 < valuePropNames.length; i13++) {
            var propName = valuePropNames[i13];
            if (props[propName] != null) {
              var propNameIsArray = isArray(props[propName]);
              props.multiple && !propNameIsArray ? error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum()) : !props.multiple && propNameIsArray && error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
      }
      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options2 = node.options;
        if (multiple) {
          for (var selectedValues = propValue, selectedValue = {}, i13 = 0; i13 < selectedValues.length; i13++)
            selectedValue["$" + selectedValues[i13]] = !0;
          for (var _i = 0; _i < options2.length; _i++) {
            var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
            options2[_i].selected !== selected && (options2[_i].selected = selected), selected && setDefaultSelected && (options2[_i].defaultSelected = !0);
          }
        } else {
          for (var _selectedValue = toString(getToStringValue(propValue)), defaultSelected = null, _i2 = 0; _i2 < options2.length; _i2++) {
            if (options2[_i2].value === _selectedValue) {
              options2[_i2].selected = !0, setDefaultSelected && (options2[_i2].defaultSelected = !0);
              return;
            }
            defaultSelected === null && !options2[_i2].disabled && (defaultSelected = options2[_i2]);
          }
          defaultSelected !== null && (defaultSelected.selected = !0);
        }
      }
      function getHostProps$1(element, props) {
        return assign({}, props, {
          value: void 0
        });
      }
      function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props), node._wrapperState = {
          wasMultiple: !!props.multiple
        }, props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1 && (error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnValueDefaultValue$1 = !0);
      }
      function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        value != null ? updateOptions(node, !!props.multiple, value, !1) : props.defaultValue != null && updateOptions(node, !!props.multiple, props.defaultValue, !0);
      }
      function postUpdateWrapper(element, props) {
        var node = element, wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        value != null ? updateOptions(node, !!props.multiple, value, !1) : wasMultiple !== !!props.multiple && (props.defaultValue != null ? updateOptions(node, !!props.multiple, props.defaultValue, !0) : updateOptions(node, !!props.multiple, props.multiple ? [] : "", !1));
      }
      function restoreControlledState$1(element, props) {
        var node = element, value = props.value;
        value != null && updateOptions(node, !!props.multiple, value, !1);
      }
      var didWarnValDefaultVal = !1;
      function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null)
          throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
        var hostProps = assign({}, props, {
          value: void 0,
          defaultValue: void 0,
          children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
      }
      function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps("textarea", props), props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal && (error2("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component"), didWarnValDefaultVal = !0);
        var initialValue = props.value;
        if (initialValue == null) {
          var children = props.children, defaultValue = props.defaultValue;
          if (children != null) {
            error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            {
              if (defaultValue != null)
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              if (isArray(children)) {
                if (children.length > 1)
                  throw new Error("<textarea> can only have at most one child.");
                children = children[0];
              }
              defaultValue = children;
            }
          }
          defaultValue == null && (defaultValue = ""), initialValue = defaultValue;
        }
        node._wrapperState = {
          initialValue: getToStringValue(initialValue)
        };
      }
      function updateWrapper$1(element, props) {
        var node = element, value = getToStringValue(props.value), defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
          var newValue = toString(value);
          newValue !== node.value && (node.value = newValue), props.defaultValue == null && node.defaultValue !== newValue && (node.defaultValue = newValue);
        }
        defaultValue != null && (node.defaultValue = toString(defaultValue));
      }
      function postMountWrapper$3(element, props) {
        var node = element, textContent = node.textContent;
        textContent === node._wrapperState.initialValue && textContent !== "" && textContent !== null && (node.value = textContent);
      }
      function restoreControlledState$2(element, props) {
        updateWrapper$1(element, props);
      }
      var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml", MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      function getIntrinsicNamespace(type2) {
        switch (type2) {
          case "svg":
            return SVG_NAMESPACE;
          case "math":
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE;
        }
      }
      function getChildNamespace(parentNamespace, type2) {
        return parentNamespace == null || parentNamespace === HTML_NAMESPACE ? getIntrinsicNamespace(type2) : parentNamespace === SVG_NAMESPACE && type2 === "foreignObject" ? HTML_NAMESPACE : parentNamespace;
      }
      var createMicrosoftUnsafeLocalFunction = function(func) {
        return typeof MSApp < "u" && MSApp.execUnsafeLocalFunction ? function(arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function() {
            return func(arg0, arg1, arg2, arg3);
          });
        } : func;
      }, reusableSVGContainer, setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE && !("innerHTML" in node)) {
          reusableSVGContainer = reusableSVGContainer || document.createElement("div"), reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
          for (var svgNode = reusableSVGContainer.firstChild; node.firstChild; )
            node.removeChild(node.firstChild);
          for (; svgNode.firstChild; )
            node.appendChild(svgNode.firstChild);
          return;
        }
        node.innerHTML = html;
      }), ELEMENT_NODE = 1, TEXT_NODE = 3, COMMENT_NODE = 8, DOCUMENT_NODE = 9, DOCUMENT_FRAGMENT_NODE = 11, setTextContent = function(node, text) {
        if (text) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node.textContent = text;
      }, shorthandToLonghand = {
        animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
        background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
        borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
        borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
        borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
        borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
        borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
        borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
        borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
        borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
        fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
        gap: ["columnGap", "rowGap"],
        grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
        wordWrap: ["overflowWrap"]
      }, isUnitlessNumber = {
        animationIterationCount: !0,
        aspectRatio: !0,
        borderImageOutset: !0,
        borderImageSlice: !0,
        borderImageWidth: !0,
        boxFlex: !0,
        boxFlexGroup: !0,
        boxOrdinalGroup: !0,
        columnCount: !0,
        columns: !0,
        flex: !0,
        flexGrow: !0,
        flexPositive: !0,
        flexShrink: !0,
        flexNegative: !0,
        flexOrder: !0,
        gridArea: !0,
        gridRow: !0,
        gridRowEnd: !0,
        gridRowSpan: !0,
        gridRowStart: !0,
        gridColumn: !0,
        gridColumnEnd: !0,
        gridColumnSpan: !0,
        gridColumnStart: !0,
        fontWeight: !0,
        lineClamp: !0,
        lineHeight: !0,
        opacity: !0,
        order: !0,
        orphans: !0,
        tabSize: !0,
        widows: !0,
        zIndex: !0,
        zoom: !0,
        // SVG-related properties
        fillOpacity: !0,
        floodOpacity: !0,
        stopOpacity: !0,
        strokeDasharray: !0,
        strokeDashoffset: !0,
        strokeMiterlimit: !0,
        strokeOpacity: !0,
        strokeWidth: !0
      };
      function prefixKey(prefix3, key) {
        return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix3) {
          isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue(name, value, isCustomProperty) {
        var isEmpty = value == null || typeof value == "boolean" || value === "";
        return isEmpty ? "" : !isCustomProperty && typeof value == "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) ? value + "px" : (checkCSSPropertyStringCoercion(value, name), ("" + value).trim());
      }
      var uppercasePattern = /([A-Z])/g, msPattern = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern$1 = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }, warnHyphenatedStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error2(
            "Unsupported style property %s. Did you mean %s?",
            name,
            // As Andi Smith suggests
            // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
            // is converted to lowercase `ms`.
            camelize(name.replace(msPattern$1, "ms-"))
          ));
        }, warnBadVendoredStyleName = function(name) {
          warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1)));
        }, warnStyleValueWithSemicolon = function(name, value) {
          warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, "")));
        }, warnStyleValueIsNaN = function(name, value) {
          warnedForNaNValue || (warnedForNaNValue = !0, error2("`NaN` is an invalid value for the `%s` css style property.", name));
        }, warnStyleValueIsInfinity = function(name, value) {
          warnedForInfinityValue || (warnedForInfinityValue = !0, error2("`Infinity` is an invalid value for the `%s` css style property.", name));
        };
        warnValidStyle = function(name, value) {
          name.indexOf("-") > -1 ? warnHyphenatedStyleName(name) : badVendoredStyleNamePattern.test(name) ? warnBadVendoredStyleName(name) : badStyleValueWithSemicolonPattern.test(value) && warnStyleValueWithSemicolon(name, value), typeof value == "number" && (isNaN(value) ? warnStyleValueIsNaN(name, value) : isFinite(value) || warnStyleValueIsInfinity(name, value));
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      function createDangerousStringForStyles(styles) {
        {
          var serialized = "", delimiter = "";
          for (var styleName in styles)
            if (styles.hasOwnProperty(styleName)) {
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":", serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty), delimiter = ";";
              }
            }
          return serialized || null;
        }
      }
      function setValueForStyles(node, styles) {
        var style2 = node.style;
        for (var styleName in styles)
          if (styles.hasOwnProperty(styleName)) {
            var isCustomProperty = styleName.indexOf("--") === 0;
            isCustomProperty || warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            styleName === "float" && (styleName = "cssFloat"), isCustomProperty ? style2.setProperty(styleName, styleValue) : style2[styleName] = styleValue;
          }
      }
      function isValueEmpty(value) {
        return value == null || typeof value == "boolean" || value === "";
      }
      function expandShorthandMap(styles) {
        var expanded = {};
        for (var key in styles)
          for (var longhands = shorthandToLonghand[key] || [key], i13 = 0; i13 < longhands.length; i13++)
            expanded[longhands[i13]] = key;
        return expanded;
      }
      function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        {
          if (!nextStyles)
            return;
          var expandedUpdates = expandShorthandMap(styleUpdates), expandedStyles = expandShorthandMap(nextStyles), warnedAbout = {};
          for (var key in expandedUpdates) {
            var originalKey = expandedUpdates[key], correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + "," + correctOriginalKey;
              if (warnedAbout[warningKey])
                continue;
              warnedAbout[warningKey] = !0, error2("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
          }
        }
      }
      var omittedCloseTags = {
        area: !0,
        base: !0,
        br: !0,
        col: !0,
        embed: !0,
        hr: !0,
        img: !0,
        input: !0,
        keygen: !0,
        link: !0,
        meta: !0,
        param: !0,
        source: !0,
        track: !0,
        wbr: !0
        // NOTE: menuitem's close tag should be omitted, but that causes problems.
      }, voidElementTags = assign({
        menuitem: !0
      }, omittedCloseTags), HTML = "__html";
      function assertValidProps(tag, props) {
        if (props) {
          if (voidElementTags[tag] && (props.children != null || props.dangerouslySetInnerHTML != null))
            throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null)
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (typeof props.dangerouslySetInnerHTML != "object" || !(HTML in props.dangerouslySetInnerHTML))
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          }
          if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null && error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), props.style != null && typeof props.style != "object")
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        }
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1)
          return typeof props.is == "string";
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return !1;
          default:
            return !0;
        }
      }
      var possibleStandardNames = {
        // HTML
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        // SVG
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      }, ariaProperties = {
        "aria-current": 0,
        // state
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        // state
        "aria-hidden": 0,
        // state
        "aria-invalid": 0,
        // state
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        // Widget Attributes
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        // Live Region Attributes
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        // Drag-and-Drop Attributes
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        // Relationship Attributes
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      }, warnedProperties = {}, rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name])
            return !0;
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase(), correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null)
              return error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = !0, !0;
            if (name !== correctName)
              return error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName), warnedProperties[name] = !0, !0;
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase(), standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null)
              return warnedProperties[name] = !0, !1;
            if (name !== standardName)
              return error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName), warnedProperties[name] = !0, !0;
          }
        }
        return !0;
      }
      function warnInvalidARIAProps(type2, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type2, key);
            isValid || invalidProps.push(key);
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          invalidProps.length === 1 ? error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type2) : invalidProps.length > 1 && error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type2);
        }
      }
      function validateProperties(type2, props) {
        isCustomComponent(type2, props) || warnInvalidARIAProps(type2, props);
      }
      var didWarnValueNull = !1;
      function validateProperties$1(type2, props) {
        {
          if (type2 !== "input" && type2 !== "textarea" && type2 !== "select")
            return;
          props != null && props.value === null && !didWarnValueNull && (didWarnValueNull = !0, type2 === "select" && props.multiple ? error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type2) : error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type2));
        }
      }
      var validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"), rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name])
            return !0;
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout")
            return error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = !0, !0;
          if (eventRegistry != null) {
            var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies2.hasOwnProperty(name))
              return !0;
            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
            if (registrationName != null)
              return error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName), warnedProperties$1[name] = !0, !0;
            if (EVENT_NAME_REGEX.test(name))
              return error2("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = !0, !0;
          } else if (EVENT_NAME_REGEX.test(name))
            return INVALID_EVENT_NAME_REGEX.test(name) && error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = !0, !0;
          if (rARIA$1.test(name) || rARIACamel$1.test(name))
            return !0;
          if (lowerCasedName === "innerhtml")
            return error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "aria")
            return error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = !0, !0;
          if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value != "string")
            return error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = !0, !0;
          if (typeof value == "number" && isNaN(value))
            return error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = !0, !0;
          var propertyInfo = getPropertyInfo(name), isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name)
              return error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName), warnedProperties$1[name] = !0, !0;
          } else if (!isReserved && name !== lowerCasedName)
            return error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties$1[name] = !0, !0;
          return typeof value == "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (value ? error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name), warnedProperties$1[name] = !0, !0) : isReserved ? !0 : shouldRemoveAttributeWithWarning(name, value, propertyInfo, !1) ? (warnedProperties$1[name] = !0, !1) : ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN && (error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = !0), !0);
        };
      }
      var warnUnknownProperties = function(type2, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type2, key, props[key], eventRegistry);
            isValid || unknownProps.push(key);
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          unknownProps.length === 1 ? error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type2) : unknownProps.length > 1 && error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type2);
        }
      };
      function validateProperties$2(type2, props, eventRegistry) {
        isCustomComponent(type2, props) || warnUnknownProperties(type2, props, eventRegistry);
      }
      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1, IS_NON_DELEGATED = 1 << 1, IS_CAPTURE_PHASE = 1 << 2, SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE, currentReplayingEvent = null;
      function setReplayingEvent(event) {
        currentReplayingEvent !== null && error2("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."), currentReplayingEvent = event;
      }
      function resetReplayingEvent() {
        currentReplayingEvent === null && error2("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."), currentReplayingEvent = null;
      }
      function isReplayingEvent(event) {
        return event === currentReplayingEvent;
      }
      function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        return target.correspondingUseElement && (target = target.correspondingUseElement), target.nodeType === TEXT_NODE ? target.parentNode : target;
      }
      var restoreImpl = null, restoreTarget = null, restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (internalInstance) {
          if (typeof restoreImpl != "function")
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
      }
      function setRestoreImplementation(impl) {
        restoreImpl = impl;
      }
      function enqueueStateRestore(target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (restoreTarget) {
          var target = restoreTarget, queuedTargets = restoreQueue;
          if (restoreTarget = null, restoreQueue = null, restoreStateOfTarget(target), queuedTargets)
            for (var i13 = 0; i13 < queuedTargets.length; i13++)
              restoreStateOfTarget(queuedTargets[i13]);
        }
      }
      var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
      }, flushSyncImpl = function() {
      }, isInsideEventHandler = !1;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        controlledComponentsHavePendingUpdates && (flushSyncImpl(), restoreStateIfNeeded());
      }
      function batchedUpdates(fn, a9, b) {
        if (isInsideEventHandler)
          return fn(a9, b);
        isInsideEventHandler = !0;
        try {
          return batchedUpdatesImpl(fn, a9, b);
        } finally {
          isInsideEventHandler = !1, finishEventHandler();
        }
      }
      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl, flushSyncImpl = _flushSyncImpl;
      }
      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }
      function shouldPreventMouseEvent(name, type2, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type2));
          default:
            return !1;
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null)
          return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null)
          return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props))
          return null;
        if (listener && typeof listener != "function")
          throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
      }
      var passiveBrowserEventsSupported = !1;
      if (canUseDOM)
        try {
          var options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = !0;
            }
          }), window.addEventListener("test", options, options), window.removeEventListener("test", options, options);
        } catch {
          passiveBrowserEventsSupported = !1;
        }
      function invokeGuardedCallbackProd(name, func, context, a9, b, c, d, e24, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context, funcArgs);
        } catch (error3) {
          this.onError(error3);
        }
      }
      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      if (typeof window < "u" && typeof window.dispatchEvent == "function" && typeof document < "u" && typeof document.createEvent == "function") {
        var fakeNode = document.createElement("react");
        invokeGuardedCallbackImpl = function(name, func, context, a9, b, c, d, e24, f) {
          if (typeof document > "u" || document === null)
            throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
          var evt = document.createEvent("Event"), didCall = !1, didError = !0, windowEvent = window.event, windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
          function restoreAfterDispatch() {
            fakeNode.removeEventListener(evtType, callCallback2, !1), typeof window.event < "u" && window.hasOwnProperty("event") && (window.event = windowEvent);
          }
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          function callCallback2() {
            didCall = !0, restoreAfterDispatch(), func.apply(context, funcArgs), didError = !1;
          }
          var error3, didSetError = !1, isCrossOriginError = !1;
          function handleWindowError(event) {
            if (error3 = event.error, didSetError = !0, error3 === null && event.colno === 0 && event.lineno === 0 && (isCrossOriginError = !0), event.defaultPrevented && error3 != null && typeof error3 == "object")
              try {
                error3._suppressLogging = !0;
              } catch {
              }
          }
          var evtType = "react-" + (name || "invokeguardedcallback");
          if (window.addEventListener("error", handleWindowError), fakeNode.addEventListener(evtType, callCallback2, !1), evt.initEvent(evtType, !1, !1), fakeNode.dispatchEvent(evt), windowEventDescriptor && Object.defineProperty(window, "event", windowEventDescriptor), didCall && didError && (didSetError ? isCrossOriginError && (error3 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")) : error3 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`), this.onError(error3)), window.removeEventListener("error", handleWindowError), !didCall)
            return restoreAfterDispatch(), invokeGuardedCallbackProd.apply(this, arguments);
        };
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl, hasError = !1, caughtError = null, hasRethrowError = !1, rethrowError = null, reporter = {
        onError: function(error3) {
          hasError = !0, caughtError = error3;
        }
      };
      function invokeGuardedCallback(name, func, context, a9, b, c, d, e24, f) {
        hasError = !1, caughtError = null, invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a9, b, c, d, e24, f) {
        if (invokeGuardedCallback.apply(this, arguments), hasError) {
          var error3 = clearCaughtError();
          hasRethrowError || (hasRethrowError = !0, rethrowError = error3);
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error3 = rethrowError;
          throw hasRethrowError = !1, rethrowError = null, error3;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error3 = caughtError;
          return hasError = !1, caughtError = null, error3;
        } else
          throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      }
      function get(key) {
        return key._reactInternals;
      }
      function has(key) {
        return key._reactInternals !== void 0;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var NoFlags = (
        /*                      */
        0
      ), PerformedWork = (
        /*                */
        1
      ), Placement = (
        /*                    */
        2
      ), Update = (
        /*                       */
        4
      ), ChildDeletion = (
        /*                */
        16
      ), ContentReset = (
        /*                 */
        32
      ), Callback = (
        /*                     */
        64
      ), DidCapture = (
        /*                   */
        128
      ), ForceClientRender = (
        /*            */
        256
      ), Ref = (
        /*                          */
        512
      ), Snapshot = (
        /*                     */
        1024
      ), Passive = (
        /*                      */
        2048
      ), Hydrating = (
        /*                    */
        4096
      ), Visibility = (
        /*                   */
        8192
      ), StoreConsistency = (
        /*             */
        16384
      ), LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency, HostEffectMask = (
        /*               */
        32767
      ), Incomplete = (
        /*                   */
        32768
      ), ShouldCapture = (
        /*                */
        65536
      ), ForceUpdateForLegacySuspense = (
        /* */
        131072
      ), Forked = (
        /*                       */
        1048576
      ), RefStatic = (
        /*                    */
        2097152
      ), LayoutStatic = (
        /*                 */
        4194304
      ), PassiveStatic = (
        /*                */
        8388608
      ), MountLayoutDev = (
        /*               */
        16777216
      ), MountPassiveDev = (
        /*              */
        33554432
      ), BeforeMutationMask = (
        // TODO: Remove Update flag from before mutation phase by re-landing Visibility
        // flag logic (see #20043)
        Update | Snapshot | 0
      ), MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility, LayoutMask = Update | Callback | Ref | Visibility, PassiveMask = Passive | ChildDeletion, StaticMask = LayoutStatic | PassiveStatic | RefStatic, ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node = fiber, nearestMounted = fiber;
        if (fiber.alternate)
          for (; node.return; )
            node = node.return;
        else {
          var nextNode = node;
          do
            node = nextNode, (node.flags & (Placement | Hydrating)) !== NoFlags && (nearestMounted = node.return), nextNode = node.return;
          while (nextNode);
        }
        return node.tag === HostRoot ? nearestMounted : null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current2 = fiber.alternate;
            current2 !== null && (suspenseState = current2.memoizedState);
          }
          if (suspenseState !== null)
            return suspenseState.dehydrated;
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component2) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner, instance = ownerFiber.stateNode;
            instance._warnedAboutRefsInRender || error2("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component"), instance._warnedAboutRefsInRender = !0;
          }
        }
        var fiber = get(component2);
        return fiber ? getNearestMountedFiber(fiber) === fiber : !1;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber)
          throw new Error("Unable to find node on an unmounted component.");
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (nearestMounted === null)
            throw new Error("Unable to find node on an unmounted component.");
          return nearestMounted !== fiber ? null : fiber;
        }
        for (var a9 = fiber, b = alternate; ; ) {
          var parentA = a9.return;
          if (parentA === null)
            break;
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a9 = b = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            for (var child = parentA.child; child; ) {
              if (child === a9)
                return assertIsMounted(parentA), fiber;
              if (child === b)
                return assertIsMounted(parentA), alternate;
              child = child.sibling;
            }
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a9.return !== b.return)
            a9 = parentA, b = parentB;
          else {
            for (var didFindChild = !1, _child = parentA.child; _child; ) {
              if (_child === a9) {
                didFindChild = !0, a9 = parentA, b = parentB;
                break;
              }
              if (_child === b) {
                didFindChild = !0, b = parentA, a9 = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              for (_child = parentB.child; _child; ) {
                if (_child === a9) {
                  didFindChild = !0, a9 = parentB, b = parentA;
                  break;
                }
                if (_child === b) {
                  didFindChild = !0, b = parentB, a9 = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild)
                throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
            }
          }
          if (a9.alternate !== b)
            throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (a9.tag !== HostRoot)
          throw new Error("Unable to find node on an unmounted component.");
        return a9.stateNode.current === a9 ? fiber : alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
      }
      function findCurrentHostFiberImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText)
          return node;
        for (var child = node.child; child !== null; ) {
          var match = findCurrentHostFiberImpl(child);
          if (match !== null)
            return match;
          child = child.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
      }
      function findCurrentHostFiberWithNoPortalsImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText)
          return node;
        for (var child = node.child; child !== null; ) {
          if (child.tag !== HostPortal) {
            var match = findCurrentHostFiberWithNoPortalsImpl(child);
            if (match !== null)
              return match;
          }
          child = child.sibling;
        }
        return null;
      }
      var scheduleCallback = Scheduler.unstable_scheduleCallback, cancelCallback = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority = Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, unstable_yieldValue = Scheduler.unstable_yieldValue, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null, injectedProfilingHooks = null, hasLoggedError = !1, isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
          return !1;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled)
          return !0;
        if (!hook.supportsFiber)
          return error2("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"), !0;
        try {
          enableSchedulingProfiler && (internals = assign({}, internals, {
            getLaneLabelMap,
            injectProfilingHooks
          })), rendererID = hook.inject(internals), injectedHook = hook;
        } catch (err) {
          error2("React instrumentation encountered an error: %s.", err);
        }
        return !!hook.checkDCE;
      }
      function onScheduleRoot(root2, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot == "function")
          try {
            injectedHook.onScheduleFiberRoot(rendererID, root2, children);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error2("React instrumentation encountered an error: %s", err));
          }
      }
      function onCommitRoot(root2, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot == "function")
          try {
            var didError = (root2.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
              var schedulerPriority;
              switch (eventPriority) {
                case DiscreteEventPriority:
                  schedulerPriority = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriority = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriority = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriority = IdlePriority;
                  break;
                default:
                  schedulerPriority = NormalPriority;
                  break;
              }
              injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
            } else
              injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error2("React instrumentation encountered an error: %s", err));
          }
      }
      function onPostCommitRoot(root2) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot == "function")
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root2);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error2("React instrumentation encountered an error: %s", err));
          }
      }
      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount == "function")
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error2("React instrumentation encountered an error: %s", err));
          }
      }
      function setIsStrictModeForDevtools(newIsStrictMode) {
        if (typeof unstable_yieldValue == "function" && (unstable_setDisableYieldValue(newIsStrictMode), setSuppressWarning(newIsStrictMode)), injectedHook && typeof injectedHook.setStrictMode == "function")
          try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
          } catch (err) {
            hasLoggedError || (hasLoggedError = !0, error2("React instrumentation encountered an error: %s", err));
          }
      }
      function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
      }
      function getLaneLabelMap() {
        {
          for (var map = /* @__PURE__ */ new Map(), lane = 1, index3 = 0; index3 < TotalLanes; index3++) {
            var label2 = getLabelForLane(lane);
            map.set(lane, label2), lane *= 2;
          }
          return map;
        }
      }
      function markCommitStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted == "function" && injectedProfilingHooks.markCommitStarted(lanes);
      }
      function markCommitStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped == "function" && injectedProfilingHooks.markCommitStopped();
      }
      function markComponentRenderStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted == "function" && injectedProfilingHooks.markComponentRenderStarted(fiber);
      }
      function markComponentRenderStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped == "function" && injectedProfilingHooks.markComponentRenderStopped();
      }
      function markComponentPassiveEffectMountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted == "function" && injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
      }
      function markComponentPassiveEffectMountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped == "function" && injectedProfilingHooks.markComponentPassiveEffectMountStopped();
      }
      function markComponentPassiveEffectUnmountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted == "function" && injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
      }
      function markComponentPassiveEffectUnmountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped == "function" && injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
      }
      function markComponentLayoutEffectMountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted == "function" && injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
      }
      function markComponentLayoutEffectMountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped == "function" && injectedProfilingHooks.markComponentLayoutEffectMountStopped();
      }
      function markComponentLayoutEffectUnmountStarted(fiber) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted == "function" && injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
      }
      function markComponentLayoutEffectUnmountStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped == "function" && injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
      }
      function markComponentErrored(fiber, thrownValue, lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored == "function" && injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
      }
      function markComponentSuspended(fiber, wakeable, lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended == "function" && injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
      }
      function markLayoutEffectsStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted == "function" && injectedProfilingHooks.markLayoutEffectsStarted(lanes);
      }
      function markLayoutEffectsStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped == "function" && injectedProfilingHooks.markLayoutEffectsStopped();
      }
      function markPassiveEffectsStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted == "function" && injectedProfilingHooks.markPassiveEffectsStarted(lanes);
      }
      function markPassiveEffectsStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped == "function" && injectedProfilingHooks.markPassiveEffectsStopped();
      }
      function markRenderStarted(lanes) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted == "function" && injectedProfilingHooks.markRenderStarted(lanes);
      }
      function markRenderYielded() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded == "function" && injectedProfilingHooks.markRenderYielded();
      }
      function markRenderStopped() {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped == "function" && injectedProfilingHooks.markRenderStopped();
      }
      function markRenderScheduled(lane) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled == "function" && injectedProfilingHooks.markRenderScheduled(lane);
      }
      function markForceUpdateScheduled(fiber, lane) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled == "function" && injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
      }
      function markStateUpdateScheduled(fiber, lane) {
        injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled == "function" && injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
      }
      var NoMode = (
        /*                         */
        0
      ), ConcurrentMode = (
        /*                 */
        1
      ), ProfileMode = (
        /*                    */
        2
      ), StrictLegacyMode = (
        /*               */
        8
      ), StrictEffectsMode = (
        /*              */
        16
      ), clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2;
      function clz32Fallback(x) {
        var asUint = x >>> 0;
        return asUint === 0 ? 32 : 31 - (log(asUint) / LN2 | 0) | 0;
      }
      var TotalLanes = 31, NoLanes = (
        /*                        */
        0
      ), NoLane = (
        /*                          */
        0
      ), SyncLane = (
        /*                        */
        1
      ), InputContinuousHydrationLane = (
        /*    */
        2
      ), InputContinuousLane = (
        /*             */
        4
      ), DefaultHydrationLane = (
        /*            */
        8
      ), DefaultLane = (
        /*                     */
        16
      ), TransitionHydrationLane = (
        /*                */
        32
      ), TransitionLanes = (
        /*                       */
        4194240
      ), TransitionLane1 = (
        /*                        */
        64
      ), TransitionLane2 = (
        /*                        */
        128
      ), TransitionLane3 = (
        /*                        */
        256
      ), TransitionLane4 = (
        /*                        */
        512
      ), TransitionLane5 = (
        /*                        */
        1024
      ), TransitionLane6 = (
        /*                        */
        2048
      ), TransitionLane7 = (
        /*                        */
        4096
      ), TransitionLane8 = (
        /*                        */
        8192
      ), TransitionLane9 = (
        /*                        */
        16384
      ), TransitionLane10 = (
        /*                       */
        32768
      ), TransitionLane11 = (
        /*                       */
        65536
      ), TransitionLane12 = (
        /*                       */
        131072
      ), TransitionLane13 = (
        /*                       */
        262144
      ), TransitionLane14 = (
        /*                       */
        524288
      ), TransitionLane15 = (
        /*                       */
        1048576
      ), TransitionLane16 = (
        /*                       */
        2097152
      ), RetryLanes = (
        /*                            */
        130023424
      ), RetryLane1 = (
        /*                             */
        4194304
      ), RetryLane2 = (
        /*                             */
        8388608
      ), RetryLane3 = (
        /*                             */
        16777216
      ), RetryLane4 = (
        /*                             */
        33554432
      ), RetryLane5 = (
        /*                             */
        67108864
      ), SomeRetryLane = RetryLane1, SelectiveHydrationLane = (
        /*          */
        134217728
      ), NonIdleLanes = (
        /*                          */
        268435455
      ), IdleHydrationLane = (
        /*               */
        268435456
      ), IdleLane = (
        /*                        */
        536870912
      ), OffscreenLane = (
        /*                   */
        1073741824
      );
      function getLabelForLane(lane) {
        {
          if (lane & SyncLane)
            return "Sync";
          if (lane & InputContinuousHydrationLane)
            return "InputContinuousHydration";
          if (lane & InputContinuousLane)
            return "InputContinuous";
          if (lane & DefaultHydrationLane)
            return "DefaultHydration";
          if (lane & DefaultLane)
            return "Default";
          if (lane & TransitionHydrationLane)
            return "TransitionHydration";
          if (lane & TransitionLanes)
            return "Transition";
          if (lane & RetryLanes)
            return "Retry";
          if (lane & SelectiveHydrationLane)
            return "SelectiveHydration";
          if (lane & IdleHydrationLane)
            return "IdleHydration";
          if (lane & IdleLane)
            return "Idle";
          if (lane & OffscreenLane)
            return "Offscreen";
        }
      }
      var NoTimestamp = -1, nextTransitionLane = TransitionLane1, nextRetryLane = RetryLane1;
      function getHighestPriorityLanes(lanes) {
        switch (getHighestPriorityLane(lanes)) {
          case SyncLane:
            return SyncLane;
          case InputContinuousHydrationLane:
            return InputContinuousHydrationLane;
          case InputContinuousLane:
            return InputContinuousLane;
          case DefaultHydrationLane:
            return DefaultHydrationLane;
          case DefaultLane:
            return DefaultLane;
          case TransitionHydrationLane:
            return TransitionHydrationLane;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return lanes & TransitionLanes;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return lanes & RetryLanes;
          case SelectiveHydrationLane:
            return SelectiveHydrationLane;
          case IdleHydrationLane:
            return IdleHydrationLane;
          case IdleLane:
            return IdleLane;
          case OffscreenLane:
            return OffscreenLane;
          default:
            return error2("Should have found matching lanes. This is a bug in React."), lanes;
        }
      }
      function getNextLanes(root2, wipLanes) {
        var pendingLanes = root2.pendingLanes;
        if (pendingLanes === NoLanes)
          return NoLanes;
        var nextLanes = NoLanes, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
          if (nonIdleUnblockedLanes !== NoLanes)
            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
          else {
            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
            nonIdlePingedLanes !== NoLanes && (nextLanes = getHighestPriorityLanes(nonIdlePingedLanes));
          }
        } else {
          var unblockedLanes = pendingLanes & ~suspendedLanes;
          unblockedLanes !== NoLanes ? nextLanes = getHighestPriorityLanes(unblockedLanes) : pingedLanes !== NoLanes && (nextLanes = getHighestPriorityLanes(pingedLanes));
        }
        if (nextLanes === NoLanes)
          return NoLanes;
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
        // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
          var nextLane = getHighestPriorityLane(nextLanes), wipLane = getHighestPriorityLane(wipLanes);
          if (
            // Tests whether the next lane is equal or lower priority than the wip
            // one. This works because the bits decrease in priority as you go left.
            nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
            // only difference between default updates and transition updates is that
            // default updates do not support refresh transitions.
            nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
          )
            return wipLanes;
        }
        (nextLanes & InputContinuousLane) !== NoLanes && (nextLanes |= pendingLanes & DefaultLane);
        var entangledLanes = root2.entangledLanes;
        if (entangledLanes !== NoLanes)
          for (var entanglements = root2.entanglements, lanes = nextLanes & entangledLanes; lanes > 0; ) {
            var index3 = pickArbitraryLaneIndex(lanes), lane = 1 << index3;
            nextLanes |= entanglements[index3], lanes &= ~lane;
          }
        return nextLanes;
      }
      function getMostRecentEventTime(root2, lanes) {
        for (var eventTimes = root2.eventTimes, mostRecentEventTime = NoTimestamp; lanes > 0; ) {
          var index3 = pickArbitraryLaneIndex(lanes), lane = 1 << index3, eventTime = eventTimes[index3];
          eventTime > mostRecentEventTime && (mostRecentEventTime = eventTime), lanes &= ~lane;
        }
        return mostRecentEventTime;
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case SyncLane:
          case InputContinuousHydrationLane:
          case InputContinuousLane:
            return currentTime + 250;
          case DefaultHydrationLane:
          case DefaultLane:
          case TransitionHydrationLane:
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return currentTime + 5e3;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return NoTimestamp;
          case SelectiveHydrationLane:
          case IdleHydrationLane:
          case IdleLane:
          case OffscreenLane:
            return NoTimestamp;
          default:
            return error2("Should have found matching lanes. This is a bug in React."), NoTimestamp;
        }
      }
      function markStarvedLanesAsExpired(root2, currentTime) {
        for (var pendingLanes = root2.pendingLanes, suspendedLanes = root2.suspendedLanes, pingedLanes = root2.pingedLanes, expirationTimes = root2.expirationTimes, lanes = pendingLanes; lanes > 0; ) {
          var index3 = pickArbitraryLaneIndex(lanes), lane = 1 << index3, expirationTime = expirationTimes[index3];
          expirationTime === NoTimestamp ? ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) && (expirationTimes[index3] = computeExpirationTime(lane, currentTime)) : expirationTime <= currentTime && (root2.expiredLanes |= lane), lanes &= ~lane;
        }
      }
      function getHighestPriorityPendingLanes(root2) {
        return getHighestPriorityLanes(root2.pendingLanes);
      }
      function getLanesToRetrySynchronouslyOnError(root2) {
        var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
        return everythingButOffscreen !== NoLanes ? everythingButOffscreen : everythingButOffscreen & OffscreenLane ? OffscreenLane : NoLanes;
      }
      function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }
      function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }
      function includesBlockingLane(root2, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
      }
      function includesExpiredLane(root2, lanes) {
        return (lanes & root2.expiredLanes) !== NoLanes;
      }
      function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        return nextTransitionLane <<= 1, (nextTransitionLane & TransitionLanes) === NoLanes && (nextTransitionLane = TransitionLane1), lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        return nextRetryLane <<= 1, (nextRetryLane & RetryLanes) === NoLanes && (nextRetryLane = RetryLane1), lane;
      }
      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }
      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }
      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }
      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }
      function includesSomeLane(a9, b) {
        return (a9 & b) !== NoLanes;
      }
      function isSubsetOfLanes(set2, subset) {
        return (set2 & subset) === subset;
      }
      function mergeLanes(a9, b) {
        return a9 | b;
      }
      function removeLanes(set2, subset) {
        return set2 & ~subset;
      }
      function intersectLanes(a9, b) {
        return a9 & b;
      }
      function laneToLanes(lane) {
        return lane;
      }
      function higherPriorityLane(a9, b) {
        return a9 !== NoLane && a9 < b ? a9 : b;
      }
      function createLaneMap(initial) {
        for (var laneMap = [], i13 = 0; i13 < TotalLanes; i13++)
          laneMap.push(initial);
        return laneMap;
      }
      function markRootUpdated(root2, updateLane, eventTime) {
        root2.pendingLanes |= updateLane, updateLane !== IdleLane && (root2.suspendedLanes = NoLanes, root2.pingedLanes = NoLanes);
        var eventTimes = root2.eventTimes, index3 = laneToIndex(updateLane);
        eventTimes[index3] = eventTime;
      }
      function markRootSuspended(root2, suspendedLanes) {
        root2.suspendedLanes |= suspendedLanes, root2.pingedLanes &= ~suspendedLanes;
        for (var expirationTimes = root2.expirationTimes, lanes = suspendedLanes; lanes > 0; ) {
          var index3 = pickArbitraryLaneIndex(lanes), lane = 1 << index3;
          expirationTimes[index3] = NoTimestamp, lanes &= ~lane;
        }
      }
      function markRootPinged(root2, pingedLanes, eventTime) {
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
      }
      function markRootFinished(root2, remainingLanes) {
        var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
        root2.pendingLanes = remainingLanes, root2.suspendedLanes = NoLanes, root2.pingedLanes = NoLanes, root2.expiredLanes &= remainingLanes, root2.mutableReadLanes &= remainingLanes, root2.entangledLanes &= remainingLanes;
        for (var entanglements = root2.entanglements, eventTimes = root2.eventTimes, expirationTimes = root2.expirationTimes, lanes = noLongerPendingLanes; lanes > 0; ) {
          var index3 = pickArbitraryLaneIndex(lanes), lane = 1 << index3;
          entanglements[index3] = NoLanes, eventTimes[index3] = NoTimestamp, expirationTimes[index3] = NoTimestamp, lanes &= ~lane;
        }
      }
      function markRootEntangled(root2, entangledLanes) {
        for (var rootEntangledLanes = root2.entangledLanes |= entangledLanes, entanglements = root2.entanglements, lanes = rootEntangledLanes; lanes; ) {
          var index3 = pickArbitraryLaneIndex(lanes), lane = 1 << index3;
          // Is this one of the newly entangled lanes?
          lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
          entanglements[index3] & entangledLanes && (entanglements[index3] |= entangledLanes), lanes &= ~lane;
        }
      }
      function getBumpedLaneForHydration(root2, renderLanes2) {
        var renderLane = getHighestPriorityLane(renderLanes2), lane;
        switch (renderLane) {
          case InputContinuousLane:
            lane = InputContinuousHydrationLane;
            break;
          case DefaultLane:
            lane = DefaultHydrationLane;
            break;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            lane = TransitionHydrationLane;
            break;
          case IdleLane:
            lane = IdleHydrationLane;
            break;
          default:
            lane = NoLane;
            break;
        }
        return (lane & (root2.suspendedLanes | renderLanes2)) !== NoLane ? NoLane : lane;
      }
      function addFiberToLanesMap(root2, fiber, lanes) {
        if (isDevToolsPresent)
          for (var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap; lanes > 0; ) {
            var index3 = laneToIndex(lanes), lane = 1 << index3, updaters = pendingUpdatersLaneMap[index3];
            updaters.add(fiber), lanes &= ~lane;
          }
      }
      function movePendingFibersToMemoized(root2, lanes) {
        if (isDevToolsPresent)
          for (var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap, memoizedUpdaters = root2.memoizedUpdaters; lanes > 0; ) {
            var index3 = laneToIndex(lanes), lane = 1 << index3, updaters = pendingUpdatersLaneMap[index3];
            updaters.size > 0 && (updaters.forEach(function(fiber) {
              var alternate = fiber.alternate;
              (alternate === null || !memoizedUpdaters.has(alternate)) && memoizedUpdaters.add(fiber);
            }), updaters.clear()), lanes &= ~lane;
          }
      }
      function getTransitionsForLanes(root2, lanes) {
        return null;
      }
      var DiscreteEventPriority = SyncLane, ContinuousEventPriority = InputContinuousLane, DefaultEventPriority = DefaultLane, IdleEventPriority = IdleLane, currentUpdatePriority = NoLane;
      function getCurrentUpdatePriority() {
        return currentUpdatePriority;
      }
      function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
      }
      function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
          return currentUpdatePriority = priority, fn();
        } finally {
          currentUpdatePriority = previousPriority;
        }
      }
      function higherEventPriority(a9, b) {
        return a9 !== 0 && a9 < b ? a9 : b;
      }
      function lowerEventPriority(a9, b) {
        return a9 === 0 || a9 > b ? a9 : b;
      }
      function isHigherEventPriority(a9, b) {
        return a9 !== 0 && a9 < b;
      }
      function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        return isHigherEventPriority(DiscreteEventPriority, lane) ? isHigherEventPriority(ContinuousEventPriority, lane) ? includesNonIdleWork(lane) ? DefaultEventPriority : IdleEventPriority : ContinuousEventPriority : DiscreteEventPriority;
      }
      function isRootDehydrated(root2) {
        var currentState = root2.current.memoizedState;
        return currentState.isDehydrated;
      }
      var _attemptSynchronousHydration;
      function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
      }
      function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
      }
      var attemptContinuousHydration;
      function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
      }
      var attemptHydrationAtCurrentPriority;
      function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
      }
      var getCurrentUpdatePriority$1;
      function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
      }
      var attemptHydrationAtPriority;
      function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
      }
      var hasScheduledReplayAttempt = !1, queuedDiscreteEvents = [], queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = /* @__PURE__ */ new Map(), queuedPointerCaptures = /* @__PURE__ */ new Map(), queuedExplicitHydrationTargets = [], discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        // Intentionally camelCase
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
      ];
      function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
          blockedOn,
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetContainers: [targetContainer]
        };
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout": {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
          case "gotpointercapture":
          case "lostpointercapture": {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn !== null) {
            var _fiber2 = getInstanceFromNode(blockedOn);
            _fiber2 !== null && attemptContinuousHydration(_fiber2);
          }
          return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        return targetContainer !== null && targetContainers.indexOf(targetContainer) === -1 && targetContainers.push(targetContainer), existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin": {
            var focusEvent = nativeEvent;
            return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent), !0;
          }
          case "dragenter": {
            var dragEvent = nativeEvent;
            return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent), !0;
          }
          case "mouseover": {
            var mouseEvent = nativeEvent;
            return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent), !0;
          }
          case "pointerover": {
            var pointerEvent = nativeEvent, pointerId = pointerEvent.pointerId;
            return queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent)), !0;
          }
          case "gotpointercapture": {
            var _pointerEvent = nativeEvent, _pointerId2 = _pointerEvent.pointerId;
            return queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent)), !0;
          }
        }
        return !1;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted !== null) {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                queuedTarget.blockedOn = instance, attemptHydrationAtPriority(queuedTarget.priority, function() {
                  attemptHydrationAtCurrentPriority(nearestMounted);
                });
                return;
              }
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                return;
              }
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function queueExplicitHydrationTarget(target) {
        for (var updatePriority = getCurrentUpdatePriority$1(), queuedTarget = {
          blockedOn: null,
          target,
          priority: updatePriority
        }, i13 = 0; i13 < queuedExplicitHydrationTargets.length && isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i13].priority); i13++)
          ;
        queuedExplicitHydrationTargets.splice(i13, 0, queuedTarget), i13 === 0 && attemptExplicitHydrationTarget(queuedTarget);
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null)
          return !1;
        for (var targetContainers = queuedEvent.targetContainers; targetContainers.length > 0; ) {
          var targetContainer = targetContainers[0], nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
          if (nextBlockedOn === null) {
            var nativeEvent = queuedEvent.nativeEvent, nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
            setReplayingEvent(nativeEventClone), nativeEvent.target.dispatchEvent(nativeEventClone), resetReplayingEvent();
          } else {
            var _fiber3 = getInstanceFromNode(nextBlockedOn);
            return _fiber3 !== null && attemptContinuousHydration(_fiber3), queuedEvent.blockedOn = nextBlockedOn, !1;
          }
          targetContainers.shift();
        }
        return !0;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = !1, queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null), queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null), queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null), queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap), queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = !0, Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents)));
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
          for (var i13 = 1; i13 < queuedDiscreteEvents.length; i13++) {
            var queuedEvent = queuedDiscreteEvents[i13];
            queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null);
          }
        }
        queuedFocus !== null && scheduleCallbackIfUnblocked(queuedFocus, unblocked), queuedDrag !== null && scheduleCallbackIfUnblocked(queuedDrag, unblocked), queuedMouse !== null && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent2) {
          return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
        };
        queuedPointers.forEach(unblock), queuedPointerCaptures.forEach(unblock);
        for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
          var queuedTarget = queuedExplicitHydrationTargets[_i];
          queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
        }
        for (; queuedExplicitHydrationTargets.length > 0; ) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0];
          if (nextExplicitTarget.blockedOn !== null)
            break;
          attemptExplicitHydrationTarget(nextExplicitTarget), nextExplicitTarget.blockedOn === null && queuedExplicitHydrationTargets.shift();
        }
      }
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig, _enabled = !0;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName), listenerWrapper;
        switch (eventPriority) {
          case DiscreteEventPriority:
            listenerWrapper = dispatchDiscreteEvent;
            break;
          case ContinuousEventPriority:
            listenerWrapper = dispatchContinuousEvent;
            break;
          case DefaultEventPriority:
          default:
            listenerWrapper = dispatchEvent;
            break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(DiscreteEventPriority), dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(ContinuousEventPriority), dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        _enabled && dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      }
      function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer), clearIfContinuousEvent(domEventName, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
          nativeEvent.stopPropagation();
          return;
        }
        if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
          for (; blockedOn !== null; ) {
            var fiber = getInstanceFromNode(blockedOn);
            fiber !== null && attemptSynchronousHydration(fiber);
            var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (nextBlockedOn === null && dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer), nextBlockedOn === blockedOn)
              break;
            blockedOn = nextBlockedOn;
          }
          blockedOn !== null && nativeEvent.stopPropagation();
          return;
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
      var return_targetInst = null;
      function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent), targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null)
            targetInst = null;
          else {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null)
                return instance;
              targetInst = null;
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2))
                return getContainerFromFiber(nearestMounted);
              targetInst = null;
            } else
              nearestMounted !== targetInst && (targetInst = null);
          }
        }
        return return_targetInst = targetInst, null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return DiscreteEventPriority;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return ContinuousEventPriority;
          case "message": {
            var schedulerPriority = getCurrentPriorityLevel();
            switch (schedulerPriority) {
              case ImmediatePriority:
                return DiscreteEventPriority;
              case UserBlockingPriority:
                return ContinuousEventPriority;
              case NormalPriority:
              case LowPriority:
                return DefaultEventPriority;
              case IdlePriority:
                return IdleEventPriority;
              default:
                return DefaultEventPriority;
            }
          }
          default:
            return DefaultEventPriority;
        }
      }
      function addEventBubbleListener(target, eventType, listener) {
        return target.addEventListener(eventType, listener, !1), listener;
      }
      function addEventCaptureListener(target, eventType, listener) {
        return target.addEventListener(eventType, listener, !0), listener;
      }
      function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        return target.addEventListener(eventType, listener, {
          capture: !0,
          passive
        }), listener;
      }
      function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        return target.addEventListener(eventType, listener, {
          passive
        }), listener;
      }
      var root = null, startText = null, fallbackText = null;
      function initialize(nativeEventTarget) {
        return root = nativeEventTarget, startText = getText(), !0;
      }
      function reset() {
        root = null, startText = null, fallbackText = null;
      }
      function getData() {
        if (fallbackText)
          return fallbackText;
        var start, startValue = startText, startLength = startValue.length, end, endValue = getText(), endLength = endValue.length;
        for (start = 0; start < startLength && startValue[start] === endValue[start]; start++)
          ;
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++)
          ;
        var sliceTail = end > 1 ? 1 - end : void 0;
        return fallbackText = endValue.slice(start, sliceTail), fallbackText;
      }
      function getText() {
        return "value" in root ? root.value : root.textContent;
      }
      function getEventCharCode(nativeEvent) {
        var charCode, keyCode = nativeEvent.keyCode;
        return "charCode" in nativeEvent ? (charCode = nativeEvent.charCode, charCode === 0 && keyCode === 13 && (charCode = 13)) : charCode = keyCode, charCode === 10 && (charCode = 13), charCode >= 32 || charCode === 13 ? charCode : 0;
      }
      function functionThatReturnsTrue() {
        return !0;
      }
      function functionThatReturnsFalse() {
        return !1;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName, this._targetInst = targetInst, this.type = reactEventType, this.nativeEvent = nativeEvent, this.target = nativeEventTarget, this.currentTarget = null;
          for (var _propName in Interface)
            if (Interface.hasOwnProperty(_propName)) {
              var normalize = Interface[_propName];
              normalize ? this[_propName] = normalize(nativeEvent) : this[_propName] = nativeEvent[_propName];
            }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === !1;
          return defaultPrevented ? this.isDefaultPrevented = functionThatReturnsTrue : this.isDefaultPrevented = functionThatReturnsFalse, this.isPropagationStopped = functionThatReturnsFalse, this;
        }
        return assign(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = !0;
            var event = this.nativeEvent;
            event && (event.preventDefault ? event.preventDefault() : typeof event.returnValue != "unknown" && (event.returnValue = !1), this.isDefaultPrevented = functionThatReturnsTrue);
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            event && (event.stopPropagation ? event.stopPropagation() : typeof event.cancelBubble != "unknown" && (event.cancelBubble = !0), this.isPropagationStopped = functionThatReturnsTrue);
          },
          /**
           * We release all dispatched `SyntheticEvent`s after each event loop, adding
           * them back into the pool. This allows a way to hold onto a reference that
           * won't be added back into the pool.
           */
          persist: function() {
          },
          /**
           * Checks if this event should be released back into the pool.
           *
           * @return {boolean} True if this should not be released, false otherwise.
           */
          isPersistent: functionThatReturnsTrue
        }), SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      }, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
      }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent;
      function updateMouseMovementPolyfillState(event) {
        event !== lastMouseEvent && (lastMouseEvent && event.type === "mousemove" ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : (lastMovementX = 0, lastMovementY = 0), lastMouseEvent = event);
      }
      var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          return event.relatedTarget === void 0 ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
        },
        movementX: function(event) {
          return "movementX" in event ? event.movementX : (updateMouseMovementPolyfillState(event), lastMovementX);
        },
        movementY: function(event) {
          return "movementY" in event ? event.movementY : lastMovementY;
        }
      }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
      }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
      }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign({}, EventInterface, {
        data: 0
      }), SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface), SyntheticInputEvent = SyntheticCompositionEvent, normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      }, translateToKey = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key !== "Unidentified")
            return key;
        }
        if (nativeEvent.type === "keypress") {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        return nativeEvent.type === "keydown" || nativeEvent.type === "keyup" ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
      }
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this, nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState)
          return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : !1;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
          return event.type === "keypress" ? getEventCharCode(event) : 0;
        },
        keyCode: function(event) {
          return event.type === "keydown" || event.type === "keyup" ? event.keyCode : 0;
        },
        which: function(event) {
          return event.type === "keypress" ? getEventCharCode(event) : event.type === "keydown" || event.type === "keyup" ? event.keyCode : 0;
        }
      }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : (
            // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
            "wheelDeltaX" in event ? -event.wheelDeltaX : 0
          );
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : (
            // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
            "wheelDeltaY" in event ? -event.wheelDeltaY : (
              // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
              "wheelDelta" in event ? -event.wheelDelta : 0
            )
          );
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
      }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), END_KEYCODES = [9, 13, 27, 32], START_KEYCODE = 229, canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
      canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
      var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11), SPACEBAR_CODE = 32, SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]), registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]), registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      }
      var hasSpaceKeypress = !1;
      function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
        !(nativeEvent.ctrlKey && nativeEvent.altKey);
      }
      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case "compositionstart":
            return "onCompositionStart";
          case "compositionend":
            return "onCompositionEnd";
          case "compositionupdate":
            return "onCompositionUpdate";
        }
      }
      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return !0;
          default:
            return !1;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        return typeof detail == "object" && "data" in detail ? detail.data : null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
      }
      var isComposing = !1;
      function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType, fallbackData;
        if (canUseCompositionEvent ? eventType = getCompositionEventType(domEventName) : isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : isFallbackCompositionStart(domEventName, nativeEvent) && (eventType = "onCompositionStart"), !eventType)
          return null;
        useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) && (!isComposing && eventType === "onCompositionStart" ? isComposing = initialize(nativeEventTarget) : eventType === "onCompositionEnd" && isComposing && (fallbackData = getData()));
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
          var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
          if (dispatchQueue.push({
            event,
            listeners
          }), fallbackData)
            event.data = fallbackData;
          else {
            var customData = getDataFromCustomEvent(nativeEvent);
            customData !== null && (event.data = customData);
          }
        }
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            var which = nativeEvent.which;
            return which !== SPACEBAR_CODE ? null : (hasSpaceKeypress = !0, SPACEBAR_CHAR);
          case "textInput":
            var chars = nativeEvent.data;
            return chars === SPACEBAR_CHAR && hasSpaceKeypress ? null : chars;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
          if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
            var chars = getData();
            return reset(), isComposing = !1, chars;
          }
          return null;
        }
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1)
                return nativeEvent.char;
              if (nativeEvent.which)
                return String.fromCharCode(nativeEvent.which);
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent ? chars = getNativeBeforeInputChars(domEventName, nativeEvent) : chars = getFallbackBeforeInputChars(domEventName, nativeEvent), !chars)
          return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
          var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          }), event.data = chars;
        }
      }
      function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
      var supportedInputTypes = {
        color: !0,
        date: !0,
        datetime: !0,
        "datetime-local": !0,
        email: !0,
        month: !0,
        number: !0,
        password: !0,
        range: !0,
        search: !0,
        tel: !0,
        text: !0,
        time: !0,
        url: !0,
        week: !0
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "input" ? !!supportedInputTypes[elem.type] : nodeName === "textarea";
      }
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM)
          return !1;
        var eventName = "on" + eventNameSuffix, isSupported = eventName in document;
        if (!isSupported) {
          var element = document.createElement("div");
          element.setAttribute(eventName, "return;"), isSupported = typeof element[eventName] == "function";
        }
        return isSupported;
      }
      function registerEvents$1() {
        registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      var activeElement = null, activeElementInst = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)), batchedUpdates(runEventInBatch, dispatchQueue);
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode))
          return targetInst;
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change")
          return targetInst;
      }
      var isInputEventSupported = !1;
      canUseDOM && (isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9));
      function startWatchingForValueChange(target, targetInst) {
        activeElement = target, activeElementInst = targetInst, activeElement.attachEvent("onpropertychange", handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        activeElement && (activeElement.detachEvent("onpropertychange", handlePropertyChange), activeElement = null, activeElementInst = null);
      }
      function handlePropertyChange(nativeEvent) {
        nativeEvent.propertyName === "value" && getInstIfValueChanged(activeElementInst) && manualDispatchChangeEvent(nativeEvent);
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        domEventName === "focusin" ? (stopWatchingForValueChange(), startWatchingForValueChange(target, targetInst)) : domEventName === "focusout" && stopWatchingForValueChange();
      }
      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown")
          return getInstIfValueChanged(activeElementInst);
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click")
          return getInstIfValueChanged(targetInst);
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change")
          return getInstIfValueChanged(targetInst);
      }
      function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        !state || !state.controlled || node.type !== "number" || setDefaultValue(node, "number", node.value);
      }
      function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window, getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode) ? getTargetInstFunc = getTargetInstForChangeEvent : isTextInputElement(targetNode) ? isInputEventSupported ? getTargetInstFunc = getTargetInstForInputOrChangeEvent : (getTargetInstFunc = getTargetInstForInputEventPolyfill, handleEventFunc = handleEventsForInputEventPolyfill) : shouldUseClickEvent(targetNode) && (getTargetInstFunc = getTargetInstForClickEvent), getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst);
          if (inst) {
            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
            return;
          }
        }
        handleEventFunc && handleEventFunc(domEventName, targetNode, targetInst), domEventName === "focusout" && handleControlledInputBlur(targetNode);
      }
      function registerEvents$2() {
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]), registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]), registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]), registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      }
      function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover", isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
          if (related && (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)))
            return;
        }
        if (!(!isOutEvent && !isOverEvent)) {
          var win;
          if (nativeEventTarget.window === nativeEventTarget)
            win = nativeEventTarget;
          else {
            var doc = nativeEventTarget.ownerDocument;
            doc ? win = doc.defaultView || doc.parentWindow : win = window;
          }
          var from, to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            if (from = targetInst, to = _related ? getClosestInstanceFromNode(_related) : null, to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) && (to = null);
            }
          } else
            from = null, to = targetInst;
          if (from !== to) {
            var SyntheticEventCtor = SyntheticMouseEvent, leaveEventType = "onMouseLeave", enterEventType = "onMouseEnter", eventTypePrefix = "mouse";
            (domEventName === "pointerout" || domEventName === "pointerover") && (SyntheticEventCtor = SyntheticPointerEvent, leaveEventType = "onPointerLeave", enterEventType = "onPointerEnter", eventTypePrefix = "pointer");
            var fromNode = from == null ? win : getNodeFromInstance(from), toNode = to == null ? win : getNodeFromInstance(to), leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode, leave.relatedTarget = toNode;
            var enter = null, nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode, enterEvent.relatedTarget = fromNode, enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
        }
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs = typeof Object.is == "function" ? Object.is : is;
      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB))
          return !0;
        if (typeof objA != "object" || objA === null || typeof objB != "object" || objB === null)
          return !1;
        var keysA = Object.keys(objA), keysB = Object.keys(objB);
        if (keysA.length !== keysB.length)
          return !1;
        for (var i13 = 0; i13 < keysA.length; i13++) {
          var currentKey = keysA[i13];
          if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
            return !1;
        }
        return !0;
      }
      function getLeafNode(node) {
        for (; node && node.firstChild; )
          node = node.firstChild;
        return node;
      }
      function getSiblingNode(node) {
        for (; node; ) {
          if (node.nextSibling)
            return node.nextSibling;
          node = node.parentNode;
        }
      }
      function getNodeForCharacterOffset(root2, offset2) {
        for (var node = getLeafNode(root2), nodeStart = 0, nodeEnd = 0; node; ) {
          if (node.nodeType === TEXT_NODE) {
            if (nodeEnd = nodeStart + node.textContent.length, nodeStart <= offset2 && nodeEnd >= offset2)
              return {
                node,
                offset: offset2 - nodeStart
              };
            nodeStart = nodeEnd;
          }
          node = getLeafNode(getSiblingNode(node));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument, win = ownerDocument && ownerDocument.defaultView || window, selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0)
          return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
        try {
          anchorNode.nodeType, focusNode.nodeType;
        } catch {
          return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = outerNode, parentNode = null;
        outer:
          for (; ; ) {
            for (var next = null; node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE) && (start = length + anchorOffset), node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE) && (end = length + focusOffset), node.nodeType === TEXT_NODE && (length += node.nodeValue.length), (next = node.firstChild) !== null; )
              parentNode = node, node = next;
            for (; ; ) {
              if (node === outerNode)
                break outer;
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset && (start = length), parentNode === focusNode && ++indexWithinFocus === focusOffset && (end = length), (next = node.nextSibling) !== null)
                break;
              node = parentNode, parentNode = node.parentNode;
            }
            node = next;
          }
        return start === -1 || end === -1 ? null : {
          start,
          end
        };
      }
      function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document, win = doc && doc.defaultView || window;
        if (win.getSelection) {
          var selection = win.getSelection(), length = node.textContent.length, start = Math.min(offsets.start, length), end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start, start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start), endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset)
              return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset), selection.removeAllRanges(), start > end ? (selection.addRange(range), selection.extend(endMarker.node, endMarker.offset)) : (range.setEnd(endMarker.node, endMarker.offset), selection.addRange(range));
          }
        }
      }
      function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        return !outerNode || !innerNode ? !1 : outerNode === innerNode ? !0 : isTextNode(outerNode) ? !1 : isTextNode(innerNode) ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : !1;
      }
      function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
      }
      function isSameOriginFrame(iframe) {
        try {
          return typeof iframe.contentWindow.location.href == "string";
        } catch {
          return !1;
        }
      }
      function getActiveElementDeep() {
        for (var win = window, element = getActiveElement(); element instanceof win.HTMLIFrameElement; ) {
          if (isSameOriginFrame(element))
            win = element.contentWindow;
          else
            return element;
          element = getActiveElement(win.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep(), priorFocusedElem = priorSelectionInformation.focusedElem, priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem) && setSelection(priorFocusedElem, priorSelectionRange);
          for (var ancestors = [], ancestor = priorFocusedElem; ancestor = ancestor.parentNode; )
            ancestor.nodeType === ELEMENT_NODE && ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          typeof priorFocusedElem.focus == "function" && priorFocusedElem.focus();
          for (var i13 = 0; i13 < ancestors.length; i13++) {
            var info = ancestors[i13];
            info.element.scrollLeft = info.left, info.element.scrollTop = info.top;
          }
        }
      }
      function getSelection(input) {
        var selection;
        return "selectionStart" in input ? selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        } : selection = getOffsets(input), selection || {
          start: 0,
          end: 0
        };
      }
      function setSelection(input, offsets) {
        var start = offsets.start, end = offsets.end;
        end === void 0 && (end = start), "selectionStart" in input ? (input.selectionStart = start, input.selectionEnd = Math.min(end, input.value.length)) : setOffsets(input, offsets);
      }
      var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
      function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
      }
      var activeElement$1 = null, activeElementInst$1 = null, lastSelection = null, mouseDown = !1;
      function getSelection$1(node) {
        if ("selectionStart" in node && hasSelectionCapabilities(node))
          return {
            start: node.selectionStart,
            end: node.selectionEnd
          };
        var win = node.ownerDocument && node.ownerDocument.defaultView || window, selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (!(mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc))) {
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              }), event.target = activeElement$1;
            }
          }
        }
      }
      function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            (isTextInputElement(targetNode) || targetNode.contentEditable === "true") && (activeElement$1 = targetNode, activeElementInst$1 = targetInst, lastSelection = null);
            break;
          case "focusout":
            activeElement$1 = null, activeElementInst$1 = null, lastSelection = null;
            break;
          case "mousedown":
            mouseDown = !0;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = !1, constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent)
              break;
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {};
        return prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase(), prefixes2["Webkit" + styleProp] = "webkit" + eventName, prefixes2["Moz" + styleProp] = "moz" + eventName, prefixes2;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      }, prefixedEventNames = {}, style = {};
      canUseDOM && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName])
          return prefixedEventNames[eventName];
        if (!vendorPrefixes[eventName])
          return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap)
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
            return prefixedEventNames[eventName] = prefixMap[styleProp];
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = /* @__PURE__ */ new Map(), simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName), registerTwoPhaseEvent(reactName, [domEventName]);
      }
      function registerSimpleEvents() {
        for (var i13 = 0; i13 < simpleEventPluginEvents.length; i13++) {
          var eventName = simpleEventPluginEvents[i13], domEventName = eventName.toLowerCase(), capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
          registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd"), registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration"), registerSimpleEvent(ANIMATION_START, "onAnimationStart"), registerSimpleEvent("dblclick", "onDoubleClick"), registerSimpleEvent("focusin", "onFocus"), registerSimpleEvent("focusout", "onBlur"), registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      }
      function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName !== void 0) {
          var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0)
                return;
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus", SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur", SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2)
                return;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
            // nonDelegatedEvents list in DOMPluginEventSystem.
            // Then we can remove this special list.
            // This is a breaking change that can wait until React 18.
            domEventName === "scroll", _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
      }
      registerSimpleEvents(), registerEvents$2(), registerEvents$1(), registerEvents$3(), registerEvents();
      function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        shouldProcessPolyfillPlugins && (extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget), extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget));
      }
      var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"], nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
      function executeDispatch(event, listener, currentTarget) {
        var type2 = event.type || "unknown-event";
        event.currentTarget = currentTarget, invokeGuardedCallbackAndCatchFirstError(type2, listener, void 0, event), event.currentTarget = null;
      }
      function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase)
          for (var i13 = dispatchListeners.length - 1; i13 >= 0; i13--) {
            var _dispatchListeners$i = dispatchListeners[i13], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped())
              return;
            executeDispatch(event, listener, currentTarget), previousInstance = instance;
          }
        else
          for (var _i = 0; _i < dispatchListeners.length; _i++) {
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped())
              return;
            executeDispatch(event, _listener, _currentTarget), previousInstance = _instance;
          }
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        for (var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0, i13 = 0; i13 < dispatchQueue.length; i13++) {
          var _dispatchQueue$i = dispatchQueue[i13], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
          processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
        }
        rethrowCaughtError();
      }
      function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags), processDispatchQueue(dispatchQueue, eventSystemFlags);
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        nonDelegatedEvents.has(domEventName) || error2('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        var isCapturePhaseListener = !1, listenerSet = getEventListenerSet(targetElement), listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        listenerSet.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener), listenerSet.add(listenerSetKey));
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener && error2('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        var eventSystemFlags = 0;
        isCapturePhaseListener && (eventSystemFlags |= IS_CAPTURE_PHASE), addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = !0, allNativeEvents.forEach(function(domEventName) {
            domEventName !== "selectionchange" && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, !1, rootContainerElement), listenToNativeEvent(domEventName, !0, rootContainerElement));
          });
          var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          ownerDocument !== null && (ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = !0, listenToNativeEvent("selectionchange", !1, ownerDocument)));
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags), isPassiveListener = void 0;
        passiveBrowserEventsSupported && (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") && (isPassiveListener = !0), targetContainer = targetContainer;
        var unsubscribeListener;
        isCapturePhaseListener ? isPassiveListener !== void 0 ? unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener) : unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener) : isPassiveListener !== void 0 ? unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener) : unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
      }
      function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if (!(eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) && !(eventSystemFlags & IS_NON_DELEGATED)) {
          var targetContainerNode = targetContainer;
          if (targetInst !== null) {
            var node = targetInst;
            mainLoop:
              for (; ; ) {
                if (node === null)
                  return;
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode))
                    break;
                  if (nodeTag === HostPortal)
                    for (var grandNode = node.return; grandNode !== null; ) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode))
                          return;
                      }
                      grandNode = grandNode.return;
                    }
                  for (; container !== null; ) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null)
                      return;
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
          }
        }
        batchedUpdates(function() {
          return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        for (var captureName = reactName !== null ? reactName + "Capture" : null, reactEventName = inCapturePhase ? captureName : reactName, listeners = [], instance = targetFiber, lastHostComponent = null; instance !== null; ) {
          var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
          if (tag === HostComponent && stateNode !== null && (lastHostComponent = stateNode, reactEventName !== null)) {
            var listener = getListener(instance, reactEventName);
            listener != null && listeners.push(createDispatchListener(instance, listener, lastHostComponent));
          }
          if (accumulateTargetOnly)
            break;
          instance = instance.return;
        }
        return listeners;
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        for (var captureName = reactName + "Capture", listeners = [], instance = targetFiber; instance !== null; ) {
          var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode, captureListener = getListener(instance, captureName);
            captureListener != null && listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            var bubbleListener = getListener(instance, reactName);
            bubbleListener != null && listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
          }
          instance = instance.return;
        }
        return listeners;
      }
      function getParent(inst) {
        if (inst === null)
          return null;
        do
          inst = inst.return;
        while (inst && inst.tag !== HostComponent);
        return inst || null;
      }
      function getLowestCommonAncestor(instA, instB) {
        for (var nodeA = instA, nodeB = instB, depthA = 0, tempA = nodeA; tempA; tempA = getParent(tempA))
          depthA++;
        for (var depthB = 0, tempB = nodeB; tempB; tempB = getParent(tempB))
          depthB++;
        for (; depthA - depthB > 0; )
          nodeA = getParent(nodeA), depthA--;
        for (; depthB - depthA > 0; )
          nodeB = getParent(nodeB), depthB--;
        for (var depth = depthA; depth--; ) {
          if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate)
            return nodeA;
          nodeA = getParent(nodeA), nodeB = getParent(nodeB);
        }
        return null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        for (var registrationName = event._reactName, listeners = [], instance = target; instance !== null && instance !== common; ) {
          var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
          if (alternate !== null && alternate === common)
            break;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            if (inCapturePhase) {
              var captureListener = getListener(instance, registrationName);
              captureListener != null && listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance, registrationName);
              bubbleListener != null && listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
          instance = instance.return;
        }
        listeners.length !== 0 && dispatchQueue.push({
          event,
          listeners
        });
      }
      function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        from !== null && accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, !1), to !== null && enterEvent !== null && accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, !0);
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
      }
      var didWarnInvalidHydration = !1, DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML", SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", AUTOFOCUS = "autoFocus", CHILDREN = "children", STYLE = "style", HTML$1 = "__html", warnedUnknownTags, validatePropertiesInDevelopment, warnForPropDifference, warnForExtraAttributes, warnForInvalidEventListener, canDiffStyleForHydrationWarning, normalizeHTML;
      warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: !0,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: !0
      }, validatePropertiesInDevelopment = function(type2, props) {
        validateProperties(type2, props), validateProperties$1(type2, props), validateProperties$2(type2, props, {
          registrationNameDependencies,
          possibleRegistrationNames
        });
      }, canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode, warnForPropDifference = function(propName, serverValue, clientValue) {
        if (!didWarnInvalidHydration) {
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          normalizedServerValue !== normalizedClientValue && (didWarnInvalidHydration = !0, error2("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue)));
        }
      }, warnForExtraAttributes = function(attributeNames) {
        if (!didWarnInvalidHydration) {
          didWarnInvalidHydration = !0;
          var names = [];
          attributeNames.forEach(function(name) {
            names.push(name);
          }), error2("Extra attributes from the server: %s", names);
        }
      }, warnForInvalidEventListener = function(registrationName, listener) {
        listener === !1 ? error2("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName) : error2("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
      }, normalizeHTML = function(parent, html) {
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        return testElement.innerHTML = html, testElement.innerHTML;
      };
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      function normalizeMarkupForTextOrAttribute(markup) {
        checkHtmlStringCoercion(markup);
        var markupString = typeof markup == "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, `
`).replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText), normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText !== normalizedClientText && (shouldWarnDev && (didWarnInvalidHydration || (didWarnInvalidHydration = !0, error2('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText))), isConcurrentMode && enableClientRenderFallbackOnTextMismatch))
          throw new Error("Text content does not match server-rendered HTML.");
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function noop2() {
      }
      function trapClickOnNonInteractiveElement(node) {
        node.onclick = noop2;
      }
      function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps)
          if (nextProps.hasOwnProperty(propKey)) {
            var nextProp = nextProps[propKey];
            if (propKey === STYLE)
              nextProp && Object.freeze(nextProp), setValueForStyles(domElement, nextProp);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              nextHtml != null && setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN)
              if (typeof nextProp == "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                canSetTextContent && setTextContent(domElement, nextProp);
              } else
                typeof nextProp == "number" && setTextContent(domElement, "" + nextProp);
            else
              propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === AUTOFOCUS || (registrationNameDependencies.hasOwnProperty(propKey) ? nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement)) : nextProp != null && setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag));
          }
      }
      function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for (var i13 = 0; i13 < updatePayload.length; i13 += 2) {
          var propKey = updatePayload[i13], propValue = updatePayload[i13 + 1];
          propKey === STYLE ? setValueForStyles(domElement, propValue) : propKey === DANGEROUSLY_SET_INNER_HTML ? setInnerHTML(domElement, propValue) : propKey === CHILDREN ? setTextContent(domElement, propValue) : setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
      function createElement29(type2, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag, ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement), domElement, namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE && (namespaceURI = getIntrinsicNamespace(type2)), namespaceURI === HTML_NAMESPACE) {
          if (isCustomComponentTag = isCustomComponent(type2, props), !isCustomComponentTag && type2 !== type2.toLowerCase() && error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type2), type2 === "script") {
            var div = ownerDocument.createElement("div");
            div.innerHTML = "<script></script>";
            var firstChild = div.firstChild;
            domElement = div.removeChild(firstChild);
          } else if (typeof props.is == "string")
            domElement = ownerDocument.createElement(type2, {
              is: props.is
            });
          else if (domElement = ownerDocument.createElement(type2), type2 === "select") {
            var node = domElement;
            props.multiple ? node.multiple = !0 : props.size && (node.size = props.size);
          }
        } else
          domElement = ownerDocument.createElementNS(namespaceURI, type2);
        return namespaceURI === HTML_NAMESPACE && !isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type2) && (warnedUnknownTags[type2] = !0, error2("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type2)), domElement;
      }
      function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
      }
      function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement), listenToNonDelegatedEvent("close", domElement), props = rawProps;
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement), props = rawProps;
            break;
          case "video":
          case "audio":
            for (var i13 = 0; i13 < mediaEventTypes.length; i13++)
              listenToNonDelegatedEvent(mediaEventTypes[i13], domElement);
            props = rawProps;
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement), props = rawProps;
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement), props = rawProps;
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement), props = rawProps;
            break;
          case "input":
            initWrapperState(domElement, rawProps), props = getHostProps(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps), props = rawProps;
            break;
          case "select":
            initWrapperState$1(domElement, rawProps), props = getHostProps$1(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps), props = getHostProps$2(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          default:
            props = rawProps;
        }
        switch (assertValidProps(tag, props), setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag), tag) {
          case "input":
            track(domElement), postMountWrapper(domElement, rawProps, !1);
            break;
          case "textarea":
            track(domElement), postMountWrapper$3(domElement);
            break;
          case "option":
            postMountWrapper$1(domElement, rawProps);
            break;
          case "select":
            postMountWrapper$2(domElement, rawProps);
            break;
          default:
            typeof props.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
            break;
        }
      }
      function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null, lastProps, nextProps;
        switch (tag) {
          case "input":
            lastProps = getHostProps(domElement, lastRawProps), nextProps = getHostProps(domElement, nextRawProps), updatePayload = [];
            break;
          case "select":
            lastProps = getHostProps$1(domElement, lastRawProps), nextProps = getHostProps$1(domElement, nextRawProps), updatePayload = [];
            break;
          case "textarea":
            lastProps = getHostProps$2(domElement, lastRawProps), nextProps = getHostProps$2(domElement, nextRawProps), updatePayload = [];
            break;
          default:
            lastProps = lastRawProps, nextProps = nextRawProps, typeof lastProps.onClick != "function" && typeof nextProps.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
            break;
        }
        assertValidProps(tag, nextProps);
        var propKey, styleName, styleUpdates = null;
        for (propKey in lastProps)
          if (!(nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null))
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle)
                lastStyle.hasOwnProperty(styleName) && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = "");
            } else
              propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN || propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === AUTOFOCUS || (registrationNameDependencies.hasOwnProperty(propKey) ? updatePayload || (updatePayload = []) : (updatePayload = updatePayload || []).push(propKey, null));
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey], lastProp = lastProps != null ? lastProps[propKey] : void 0;
          if (!(!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null))
            if (propKey === STYLE)
              if (nextProp && Object.freeze(nextProp), lastProp) {
                for (styleName in lastProp)
                  lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName)) && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = "");
                for (styleName in nextProp)
                  nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName] && (styleUpdates || (styleUpdates = {}), styleUpdates[styleName] = nextProp[styleName]);
              } else
                styleUpdates || (updatePayload || (updatePayload = []), updatePayload.push(propKey, styleUpdates)), styleUpdates = nextProp;
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0, lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              nextHtml != null && lastHtml !== nextHtml && (updatePayload = updatePayload || []).push(propKey, nextHtml);
            } else
              propKey === CHILDREN ? (typeof nextProp == "string" || typeof nextProp == "number") && (updatePayload = updatePayload || []).push(propKey, "" + nextProp) : propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || (registrationNameDependencies.hasOwnProperty(propKey) ? (nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement)), !updatePayload && lastProp !== nextProp && (updatePayload = [])) : (updatePayload = updatePayload || []).push(propKey, nextProp));
        }
        return styleUpdates && (validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]), (updatePayload = updatePayload || []).push(STYLE, styleUpdates)), updatePayload;
      }
      function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null && updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps), isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        switch (updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag), tag) {
          case "input":
            updateWrapper(domElement, nextRawProps);
            break;
          case "textarea":
            updateWrapper$1(domElement, nextRawProps);
            break;
          case "select":
            postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          return possibleStandardNames.hasOwnProperty(lowerCasedName) && possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag, extraAttributeNames;
        switch (isCustomComponentTag = isCustomComponent(tag, rawProps), validatePropertiesInDevelopment(tag, rawProps), tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement), listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (var i13 = 0; i13 < mediaEventTypes.length; i13++)
              listenToNonDelegatedEvent(mediaEventTypes[i13], domElement);
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "input":
            initWrapperState(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps), listenToNonDelegatedEvent("invalid", domElement);
            break;
        }
        assertValidProps(tag, rawProps);
        {
          extraAttributeNames = /* @__PURE__ */ new Set();
          for (var attributes = domElement.attributes, _i = 0; _i < attributes.length; _i++) {
            var name = attributes[_i].name.toLowerCase();
            switch (name) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributeNames.add(attributes[_i].name);
            }
          }
        }
        var updatePayload = null;
        for (var propKey in rawProps)
          if (rawProps.hasOwnProperty(propKey)) {
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN)
              typeof nextProp == "string" ? domElement.textContent !== nextProp && (rawProps[SUPPRESS_HYDRATION_WARNING] !== !0 && checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev), updatePayload = [CHILDREN, nextProp]) : typeof nextProp == "number" && domElement.textContent !== "" + nextProp && (rawProps[SUPPRESS_HYDRATION_WARNING] !== !0 && checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev), updatePayload = [CHILDREN, "" + nextProp]);
            else if (registrationNameDependencies.hasOwnProperty(propKey))
              nextProp != null && (typeof nextProp != "function" && warnForInvalidEventListener(propKey, nextProp), propKey === "onScroll" && listenToNonDelegatedEvent("scroll", domElement));
            else if (shouldWarnDev && // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag == "boolean") {
              var serverValue = void 0, propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] !== !0) {
                if (!(propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")) {
                  if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML, nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                    if (nextHtml != null) {
                      var expectedHTML = normalizeHTML(domElement, nextHtml);
                      expectedHTML !== serverHTML && warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  } else if (propKey === STYLE) {
                    if (extraAttributeNames.delete(propKey), canDiffStyleForHydrationWarning) {
                      var expectedStyle = createDangerousStringForStyles(nextProp);
                      serverValue = domElement.getAttribute("style"), expectedStyle !== serverValue && warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  } else if (isCustomComponentTag && !enableCustomElementPropertySupport)
                    extraAttributeNames.delete(propKey.toLowerCase()), serverValue = getValueForAttribute(domElement, propKey, nextProp), nextProp !== serverValue && warnForPropDifference(propKey, serverValue, nextProp);
                  else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = !1;
                    if (propertyInfo !== null)
                      extraAttributeNames.delete(propertyInfo.attributeName), serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    else {
                      var ownNamespace = parentNamespace;
                      if (ownNamespace === HTML_NAMESPACE && (ownNamespace = getIntrinsicNamespace(tag)), ownNamespace === HTML_NAMESPACE)
                        extraAttributeNames.delete(propKey.toLowerCase());
                      else {
                        var standardName = getPossibleStandardName(propKey);
                        standardName !== null && standardName !== propKey && (isMismatchDueToBadCasing = !0, extraAttributeNames.delete(standardName)), extraAttributeNames.delete(propKey);
                      }
                      serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    var dontWarnCustomElement = enableCustomElementPropertySupport;
                    !dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing && warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
          }
        switch (shouldWarnDev && // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== !0 && warnForExtraAttributes(extraAttributeNames), tag) {
          case "input":
            track(domElement), postMountWrapper(domElement, rawProps, !0);
            break;
          case "textarea":
            track(domElement), postMountWrapper$3(domElement);
            break;
          case "select":
          case "option":
            break;
          default:
            typeof rawProps.onClick == "function" && trapClickOnNonInteractiveElement(domElement);
            break;
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
      }
      function warnForDeletedHydratableElement(parentNode, child) {
        {
          if (didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = !0, error2("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
      }
      function warnForDeletedHydratableText(parentNode, child) {
        {
          if (didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = !0, error2('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
          if (didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = !0, error2("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedText(parentNode, text) {
        {
          if (text === "" || didWarnInvalidHydration)
            return;
          didWarnInvalidHydration = !0, error2('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
        }
      }
      function restoreControlledState$3(domElement, tag, props) {
        switch (tag) {
          case "input":
            restoreControlledState(domElement, props);
            return;
          case "textarea":
            restoreControlledState$2(domElement, props);
            return;
          case "select":
            restoreControlledState$1(domElement, props);
            return;
        }
      }
      var validateDOMNesting = function() {
      }, updatedAncestorInfo = function() {
      };
      {
        var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"], inScopeTags = [
          "applet",
          "caption",
          "html",
          "table",
          "td",
          "th",
          "marquee",
          "object",
          "template",
          // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
          // TODO: Distinguish by namespace here -- for <title>, including it here
          // errs on the side of fewer warnings
          "foreignObject",
          "desc",
          "title"
        ], buttonScopeTags = inScopeTags.concat(["button"]), impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"], emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null
        };
        updatedAncestorInfo = function(oldInfo, tag) {
          var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo), info = {
            tag
          };
          return inScopeTags.indexOf(tag) !== -1 && (ancestorInfo.aTagInScope = null, ancestorInfo.buttonTagInScope = null, ancestorInfo.nobrTagInScope = null), buttonScopeTags.indexOf(tag) !== -1 && (ancestorInfo.pTagInButtonScope = null), specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p" && (ancestorInfo.listItemTagAutoclosing = null, ancestorInfo.dlItemTagAutoclosing = null), ancestorInfo.current = info, tag === "form" && (ancestorInfo.formTag = info), tag === "a" && (ancestorInfo.aTagInScope = info), tag === "button" && (ancestorInfo.buttonTagInScope = info), tag === "nobr" && (ancestorInfo.nobrTagInScope = info), tag === "p" && (ancestorInfo.pTagInButtonScope = info), tag === "li" && (ancestorInfo.listItemTagAutoclosing = info), (tag === "dd" || tag === "dt") && (ancestorInfo.dlItemTagAutoclosing = info), ancestorInfo;
        };
        var isTagValidWithParent = function(tag, parentTag) {
          switch (parentTag) {
            case "select":
              return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
              return tag === "option" || tag === "#text";
            case "option":
              return tag === "#text";
            case "tr":
              return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            case "tbody":
            case "thead":
            case "tfoot":
              return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            case "colgroup":
              return tag === "col" || tag === "template";
            case "table":
              return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            case "head":
              return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            case "html":
              return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
              return tag === "frame";
            case "#document":
              return tag === "html";
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
              return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return parentTag == null;
          }
          return !0;
        }, findInvalidAncestorForTag = function(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        }, didWarn$1 = {};
        validateDOMNesting = function(childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.current, parentTag = parentInfo && parentInfo.tag;
          childText != null && (childTag != null && error2("validateDOMNesting: when childText is passed, childTag should be null"), childTag = "#text");
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo, invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo), invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (invalidParentOrAncestor) {
            var ancestorTag = invalidParentOrAncestor.tag, warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (!didWarn$1[warnKey]) {
              didWarn$1[warnKey] = !0;
              var tagDisplayName = childTag, whitespaceInfo = "";
              if (childTag === "#text" ? /\S/.test(childText) ? tagDisplayName = "Text nodes" : (tagDisplayName = "Whitespace text nodes", whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.") : tagDisplayName = "<" + childTag + ">", invalidParent) {
                var info = "";
                ancestorTag === "table" && childTag === "tr" && (info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), error2("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else
                error2("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          }
        };
      }
      var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning", SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_FALLBACK_START_DATA = "$!", STYLE$1 = "style", eventsEnabled = null, selectionInformation = null;
      function getRootHostContext(rootContainerInstance) {
        var type2, namespace, nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type2 = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
            var root2 = rootContainerInstance.documentElement;
            namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
            break;
          }
          default: {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance, ownNamespace = container.namespaceURI || null;
            type2 = container.tagName, namespace = getChildNamespace(ownNamespace, type2);
            break;
          }
        }
        {
          var validatedTag = type2.toLowerCase(), ancestorInfo = updatedAncestorInfo(null, validatedTag);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getChildHostContext(parentHostContext, type2, rootContainerInstance) {
        {
          var parentHostContextDev = parentHostContext, namespace = getChildNamespace(parentHostContextDev.namespace, type2), ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type2);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getPublicInstance(instance) {
        return instance;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled(), selectionInformation = getSelectionInformation();
        var activeInstance = null;
        return setEnabled(!1), activeInstance;
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation), setEnabled(eventsEnabled), eventsEnabled = null, selectionInformation = null;
      }
      function createInstance(type2, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          if (validateDOMNesting(type2, null, hostContextDev.ancestorInfo), typeof props.children == "string" || typeof props.children == "number") {
            var string = "" + props.children, ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type2);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement29(type2, props, rootContainerInstance, parentNamespace);
        return precacheFiberNode(internalInstanceHandle, domElement), updateFiberProps(domElement, props), domElement;
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function finalizeInitialChildren(domElement, type2, props, rootContainerInstance, hostContext) {
        switch (setInitialProperties(domElement, type2, props, rootContainerInstance), type2) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!props.autoFocus;
          case "img":
            return !0;
          default:
            return !1;
        }
      }
      function prepareUpdate(domElement, type2, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (typeof newProps.children != typeof oldProps.children && (typeof newProps.children == "string" || typeof newProps.children == "number")) {
            var string = "" + newProps.children, ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type2);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type2, oldProps, newProps);
      }
      function shouldSetTextContent(type2, props) {
        return type2 === "textarea" || type2 === "noscript" || typeof props.children == "string" || typeof props.children == "number" || typeof props.dangerouslySetInnerHTML == "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
      }
      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text, rootContainerInstance);
        return precacheFiberNode(internalInstanceHandle, textNode), textNode;
      }
      function getCurrentEventPriority() {
        var currentEvent = window.event;
        return currentEvent === void 0 ? DefaultEventPriority : getEventPriority(currentEvent.type);
      }
      var scheduleTimeout = typeof setTimeout == "function" ? setTimeout : void 0, cancelTimeout = typeof clearTimeout == "function" ? clearTimeout : void 0, noTimeout = -1, localPromise = typeof Promise == "function" ? Promise : void 0, scheduleMicrotask = typeof queueMicrotask == "function" ? queueMicrotask : typeof localPromise < "u" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout;
      function handleErrorInNextTick(error3) {
        setTimeout(function() {
          throw error3;
        });
      }
      function commitMount(domElement, type2, newProps, internalInstanceHandle) {
        switch (type2) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            newProps.autoFocus && domElement.focus();
            return;
          case "img": {
            newProps.src && (domElement.src = newProps.src);
            return;
          }
        }
      }
      function commitUpdate(domElement, updatePayload, type2, oldProps, newProps, internalInstanceHandle) {
        updateProperties(domElement, updatePayload, type2, oldProps, newProps), updateFiberProps(domElement, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function appendChildToContainer(container, child) {
        var parentNode;
        container.nodeType === COMMENT_NODE ? (parentNode = container.parentNode, parentNode.insertBefore(child, container)) : (parentNode = container, parentNode.appendChild(child));
        var reactRootContainer = container._reactRootContainer;
        reactRootContainer == null && parentNode.onclick === null && trapClickOnNonInteractiveElement(parentNode);
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      }
      function insertInContainerBefore(container, child, beforeChild) {
        container.nodeType === COMMENT_NODE ? container.parentNode.insertBefore(child, beforeChild) : container.insertBefore(child, beforeChild);
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container, child) {
        container.nodeType === COMMENT_NODE ? container.parentNode.removeChild(child) : container.removeChild(child);
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance, depth = 0;
        do {
          var nextNode = node.nextSibling;
          if (parentInstance.removeChild(node), nextNode && nextNode.nodeType === COMMENT_NODE) {
            var data = nextNode.data;
            if (data === SUSPENSE_END_DATA)
              if (depth === 0) {
                parentInstance.removeChild(nextNode), retryIfBlockedOn(suspenseInstance);
                return;
              } else
                depth--;
            else
              (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) && depth++;
          }
          node = nextNode;
        } while (node);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        container.nodeType === COMMENT_NODE ? clearSuspenseBoundary(container.parentNode, suspenseInstance) : container.nodeType === ELEMENT_NODE && clearSuspenseBoundary(container, suspenseInstance), retryIfBlockedOn(container);
      }
      function hideInstance(instance) {
        instance = instance;
        var style2 = instance.style;
        typeof style2.setProperty == "function" ? style2.setProperty("display", "none", "important") : style2.display = "none";
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE$1], display = styleProp != null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue("display", display);
      }
      function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
      }
      function clearContainer(container) {
        container.nodeType === ELEMENT_NODE ? container.textContent = "" : container.nodeType === DOCUMENT_NODE && container.documentElement && container.removeChild(container.documentElement);
      }
      function canHydrateInstance(instance, type2, props) {
        return instance.nodeType !== ELEMENT_NODE || type2.toLowerCase() !== instance.nodeName.toLowerCase() ? null : instance;
      }
      function canHydrateTextInstance(instance, text) {
        return text === "" || instance.nodeType !== TEXT_NODE ? null : instance;
      }
      function canHydrateSuspenseInstance(instance) {
        return instance.nodeType !== COMMENT_NODE ? null : instance;
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset = instance.nextSibling && instance.nextSibling.dataset, digest, message2, stack;
        return dataset && (digest = dataset.dgst, message2 = dataset.msg, stack = dataset.stck), {
          message: message2,
          digest,
          stack
        };
      }
      function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
      }
      function getNextHydratable(node) {
        for (; node != null; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE)
            break;
          if (nodeType === COMMENT_NODE) {
            var nodeData = node.data;
            if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA)
              break;
            if (nodeData === SUSPENSE_END_DATA)
              return null;
          }
        }
        return node;
      }
      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
      }
      function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
      }
      function hydrateInstance(instance, type2, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance), updateFiberProps(instance, props);
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type2, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
      }
      function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
      }
      function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        for (var node = suspenseInstance.nextSibling, depth = 0; node; ) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0)
                return getNextHydratableSibling(node);
              depth--;
            } else
              (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) && depth++;
          }
          node = node.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        for (var node = targetInstance.previousSibling, depth = 0; node; ) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              if (depth === 0)
                return node;
              depth--;
            } else
              data === SUSPENSE_END_DATA && depth++;
          }
          node = node.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "head" && parentType !== "body";
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = !0;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0) {
          var shouldWarnDev = !0;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
      }
      function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        instance.nodeType === ELEMENT_NODE ? warnForDeletedHydratableElement(parentContainer, instance) : instance.nodeType === COMMENT_NODE || warnForDeletedHydratableText(parentContainer, instance);
      }
      function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        {
          var parentNode = parentInstance.parentNode;
          parentNode !== null && (instance.nodeType === ELEMENT_NODE ? warnForDeletedHydratableElement(parentNode, instance) : instance.nodeType === COMMENT_NODE || warnForDeletedHydratableText(parentNode, instance));
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0) && (instance.nodeType === ELEMENT_NODE ? warnForDeletedHydratableElement(parentInstance, instance) : instance.nodeType === COMMENT_NODE || warnForDeletedHydratableText(parentInstance, instance));
      }
      function didNotFindHydratableInstanceWithinContainer(parentContainer, type2, props) {
        warnForInsertedHydratedElement(parentContainer, type2);
      }
      function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
      }
      function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type2, props) {
        {
          var parentNode = parentInstance.parentNode;
          parentNode !== null && warnForInsertedHydratedElement(parentNode, type2);
        }
      }
      function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        {
          var parentNode = parentInstance.parentNode;
          parentNode !== null && warnForInsertedHydratedText(parentNode, text);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type2, props, isConcurrentMode) {
        (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0) && warnForInsertedHydratedElement(parentInstance, type2);
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== !0) && warnForInsertedHydratedText(parentInstance, text);
      }
      function errorHydratingContainer(parentContainer) {
        error2("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
      }
      function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
      }
      var randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey;
      function detachDeletedInstance(node) {
        delete node[internalInstanceKey], delete node[internalPropsKey], delete node[internalEventHandlersKey], delete node[internalEventHandlerListenersKey], delete node[internalEventHandlesSetKey];
      }
      function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
      }
      function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
      }
      function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst)
          return targetInst;
        for (var parentNode = targetNode.parentNode; parentNode; ) {
          if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey], targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || alternate !== null && alternate.child !== null)
              for (var suspenseInstance = getParentSuspenseInstance(targetNode); suspenseInstance !== null; ) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst)
                  return targetSuspenseInst;
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            return targetInst;
          }
          targetNode = parentNode, parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        return inst && (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) ? inst : null;
      }
      function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText)
          return inst.stateNode;
        throw new Error("getNodeFromInstance: Invalid argument.");
      }
      function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
      }
      function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
      }
      function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        return elementListenerSet === void 0 && (elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set()), elementListenerSet;
      }
      var loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        if (element) {
          var owner = element._owner, stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs)
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] != "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw err.name = "Invariant Violation", err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              error$1 && !(error$1 instanceof Error) && (setCurrentlyValidatingElement(element), error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null)), error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error2("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
            }
        }
      }
      var valueStack = [], fiberStack;
      fiberStack = [];
      var index2 = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }
      function pop(cursor, fiber) {
        if (index2 < 0) {
          error2("Unexpected pop.");
          return;
        }
        fiber !== fiberStack[index2] && error2("Unexpected Fiber popped."), cursor.current = valueStack[index2], valueStack[index2] = null, fiberStack[index2] = null, index2--;
      }
      function push(cursor, value, fiber) {
        index2++, valueStack[index2] = cursor.current, fiberStack[index2] = fiber, cursor.current = value;
      }
      var warnedAboutMissingGetChildContext;
      warnedAboutMissingGetChildContext = {};
      var emptyContextObject = {};
      Object.freeze(emptyContextObject);
      var contextStackCursor = createCursor(emptyContextObject), didPerformWorkStackCursor = createCursor(!1), previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
        return didPushOwnContextIfProvider && isContextProvider(Component) ? previousContext : contextStackCursor.current;
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress2.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        {
          var type2 = workInProgress2.type, contextTypes = type2.contextTypes;
          if (!contextTypes)
            return emptyContextObject;
          var instance = workInProgress2.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext)
            return instance.__reactInternalMemoizedMaskedChildContext;
          var context = {};
          for (var key in contextTypes)
            context[key] = unmaskedContext[key];
          {
            var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          return instance && cacheContext(workInProgress2, unmaskedContext, context), context;
        }
      }
      function hasContextChanged() {
        return didPerformWorkStackCursor.current;
      }
      function isContextProvider(type2) {
        {
          var childContextTypes = type2.childContextTypes;
          return childContextTypes != null;
        }
      }
      function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber);
      }
      function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber);
      }
      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (contextStackCursor.current !== emptyContextObject)
            throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          push(contextStackCursor, context, fiber), push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type2, parentContext) {
        {
          var instance = fiber.stateNode, childContextTypes = type2.childContextTypes;
          if (typeof instance.getChildContext != "function") {
            {
              var componentName = getComponentNameFromFiber(fiber) || "Unknown";
              warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = !0, error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName));
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext)
            if (!(contextKey in childContextTypes))
              throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          {
            var name = getComponentNameFromFiber(fiber) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        {
          var instance = workInProgress2.stateNode, memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          return previousContext = contextStackCursor.current, push(contextStackCursor, memoizedMergedChildContext, workInProgress2), push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2), !0;
        }
      }
      function invalidateContextProvider(workInProgress2, type2, didChange) {
        {
          var instance = workInProgress2.stateNode;
          if (!instance)
            throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type2, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext, pop(didPerformWorkStackCursor, workInProgress2), pop(contextStackCursor, workInProgress2), push(contextStackCursor, mergedContext, workInProgress2), push(didPerformWorkStackCursor, didChange, workInProgress2);
          } else
            pop(didPerformWorkStackCursor, workInProgress2), push(didPerformWorkStackCursor, didChange, workInProgress2);
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent)
            throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          var node = fiber;
          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;
              case ClassComponent: {
                var Component = node.type;
                if (isContextProvider(Component))
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                break;
              }
            }
            node = node.return;
          } while (node !== null);
          throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var LegacyRoot = 0, ConcurrentRoot = 1, syncQueue = null, includesLegacySyncCallbacks = !1, isFlushingSyncQueue = !1;
      function scheduleSyncCallback(callback) {
        syncQueue === null ? syncQueue = [callback] : syncQueue.push(callback);
      }
      function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = !0, scheduleSyncCallback(callback);
      }
      function flushSyncCallbacksOnlyInLegacyMode() {
        includesLegacySyncCallbacks && flushSyncCallbacks();
      }
      function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = !0;
          var i13 = 0, previousUpdatePriority = getCurrentUpdatePriority();
          try {
            var isSync = !0, queue = syncQueue;
            for (setCurrentUpdatePriority(DiscreteEventPriority); i13 < queue.length; i13++) {
              var callback = queue[i13];
              do
                callback = callback(isSync);
              while (callback !== null);
            }
            syncQueue = null, includesLegacySyncCallbacks = !1;
          } catch (error3) {
            throw syncQueue !== null && (syncQueue = syncQueue.slice(i13 + 1)), scheduleCallback(ImmediatePriority, flushSyncCallbacks), error3;
          } finally {
            setCurrentUpdatePriority(previousUpdatePriority), isFlushingSyncQueue = !1;
          }
        }
        return null;
      }
      var forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "";
      function isForkedChild(workInProgress2) {
        return warnIfNotHydrating(), (workInProgress2.flags & Forked) !== NoFlags;
      }
      function getForksAtLevel(workInProgress2) {
        return warnIfNotHydrating(), treeForkCount;
      }
      function getTreeId() {
        var overflow = treeContextOverflow, idWithLeadingBit = treeContextId, id3 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id3.toString(32) + overflow;
      }
      function pushTreeFork(workInProgress2, totalChildren) {
        warnIfNotHydrating(), forkStack[forkStackIndex++] = treeForkCount, forkStack[forkStackIndex++] = treeForkProvider, treeForkProvider = workInProgress2, treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index3) {
        warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId, baseOverflow = treeContextOverflow, baseLength = getBitLength(baseIdWithLeadingBit) - 1, baseId = baseIdWithLeadingBit & ~(1 << baseLength), slot = index3 + 1, length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5, newOverflowBits = (1 << numberOfOverflowBits) - 1, newOverflow = (baseId & newOverflowBits).toString(32), restOfBaseId = baseId >> numberOfOverflowBits, restOfBaseLength = baseLength - numberOfOverflowBits, restOfLength = getBitLength(totalChildren) + restOfBaseLength, restOfNewBits = slot << restOfBaseLength, id3 = restOfNewBits | restOfBaseId, overflow = newOverflow + baseOverflow;
          treeContextId = 1 << restOfLength | id3, treeContextOverflow = overflow;
        } else {
          var newBits = slot << baseLength, _id = newBits | baseId, _overflow = baseOverflow;
          treeContextId = 1 << length | _id, treeContextOverflow = _overflow;
        }
      }
      function pushMaterializedTreeId(workInProgress2) {
        warnIfNotHydrating();
        var returnFiber = workInProgress2.return;
        if (returnFiber !== null) {
          var numberOfForks = 1, slotIndex = 0;
          pushTreeFork(workInProgress2, numberOfForks), pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      function getBitLength(number2) {
        return 32 - clz32(number2);
      }
      function getLeadingBit(id3) {
        return 1 << getBitLength(id3) - 1;
      }
      function popTreeContext(workInProgress2) {
        for (; workInProgress2 === treeForkProvider; )
          treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
        for (; workInProgress2 === treeContextProvider; )
          treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
      }
      function getSuspendedTreeContext() {
        return warnIfNotHydrating(), treeContextProvider !== null ? {
          id: treeContextId,
          overflow: treeContextOverflow
        } : null;
      }
      function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
        warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = suspendedContext.id, treeContextOverflow = suspendedContext.overflow, treeContextProvider = workInProgress2;
      }
      function warnIfNotHydrating() {
        getIsHydrating() || error2("Expected to be hydrating. This is a bug in React. Please file an issue.");
      }
      var hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1, didSuspendOrErrorDEV = !1, hydrationErrors = null;
      function warnIfHydrating() {
        isHydrating && error2("We should not be hydrating here. This is a bug in React. Please file a bug.");
      }
      function markDidThrowWhileHydratingDEV() {
        didSuspendOrErrorDEV = !0;
      }
      function didSuspendOrErrorWhileHydratingDEV() {
        return didSuspendOrErrorDEV;
      }
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        return nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance), hydrationParentFiber = fiber, isHydrating = !0, hydrationErrors = null, didSuspendOrErrorDEV = !1, !0;
      }
      function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        return nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance), hydrationParentFiber = fiber, isHydrating = !0, hydrationErrors = null, didSuspendOrErrorDEV = !1, treeContext !== null && restoreSuspendedTreeContext(fiber, treeContext), !0;
      }
      function warnUnhydratedInstance(returnFiber, instance) {
        switch (returnFiber.tag) {
          case HostRoot: {
            didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
            break;
          }
          case HostComponent: {
            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
            didNotHydrateInstance(
              returnFiber.type,
              returnFiber.memoizedProps,
              returnFiber.stateNode,
              instance,
              // TODO: Delete this argument when we remove the legacy root API.
              isConcurrentMode
            );
            break;
          }
          case SuspenseComponent: {
            var suspenseState = returnFiber.memoizedState;
            suspenseState.dehydrated !== null && didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
            break;
          }
        }
      }
      function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance, childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        deletions === null ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= ChildDeletion) : deletions.push(childToDelete);
      }
      function warnNonhydratedInstance(returnFiber, fiber) {
        {
          if (didSuspendOrErrorDEV)
            return;
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type2 = fiber.type, props = fiber.pendingProps;
                  didNotFindHydratableInstanceWithinContainer(parentContainer, type2);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type, parentProps = returnFiber.memoizedProps, parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent: {
                  var _type = fiber.type, _props = fiber.pendingProps, isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    _type,
                    _props,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case HostText: {
                  var _text = fiber.pendingProps, _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    _text,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode
                  );
                  break;
                }
              }
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState, _parentInstance = suspenseState.dehydrated;
              if (_parentInstance !== null)
                switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type, _props2 = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
              break;
            }
            default:
              return;
          }
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement, warnNonhydratedInstance(returnFiber, fiber);
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type2 = fiber.type, props = fiber.pendingProps, instance = canHydrateInstance(nextInstance, type2);
            return instance !== null ? (fiber.stateNode = instance, hydrationParentFiber = fiber, nextHydratableInstance = getFirstHydratableChild(instance), !0) : !1;
          }
          case HostText: {
            var text = fiber.pendingProps, textInstance = canHydrateTextInstance(nextInstance, text);
            return textInstance !== null ? (fiber.stateNode = textInstance, hydrationParentFiber = fiber, nextHydratableInstance = null, !0) : !1;
          }
          case SuspenseComponent: {
            var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
            if (suspenseInstance !== null) {
              var suspenseState = {
                dehydrated: suspenseInstance,
                treeContext: getSuspendedTreeContext(),
                retryLane: OffscreenLane
              };
              fiber.memoizedState = suspenseState;
              var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
              return dehydratedFragment.return = fiber, fiber.child = dehydratedFragment, hydrationParentFiber = fiber, nextHydratableInstance = null, !0;
            }
            return !1;
          }
          default:
            return !1;
        }
      }
      function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
      }
      function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (isHydrating) {
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            shouldClientRenderOnMismatch(fiber) && (warnNonhydratedInstance(hydrationParentFiber, fiber), throwOnHydrationMismatch()), insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            shouldClientRenderOnMismatch(fiber) && (warnNonhydratedInstance(hydrationParentFiber, fiber), throwOnHydrationMismatch()), nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode, shouldWarnIfMismatchDev = !didSuspendOrErrorDEV, updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
        return fiber.updateQueue = updatePayload, updatePayload !== null;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode, textContent = fiber.memoizedProps, shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null)
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo, isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedContainerTextInstance(
                  parentContainer,
                  textInstance,
                  textContent,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type, parentProps = returnFiber.memoizedProps, parentInstance = returnFiber.stateNode, _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedTextInstance(
                  parentType,
                  parentProps,
                  parentInstance,
                  textInstance,
                  textContent,
                  // TODO: Delete this argument when we remove the legacy root API.
                  _isConcurrentMode2
                );
                break;
              }
            }
        }
        return shouldUpdate;
      }
      function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState, suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance)
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        hydrateSuspenseInstance(suspenseInstance, fiber);
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState, suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance)
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        for (var parent = fiber.return; parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent; )
          parent = parent.return;
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber)
          return !1;
        if (!isHydrating)
          return popToNextHostParent(fiber), isHydrating = !0, !1;
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
          var nextInstance = nextHydratableInstance;
          if (nextInstance)
            if (shouldClientRenderOnMismatch(fiber))
              warnIfUnhydratedTailNodes(fiber), throwOnHydrationMismatch();
            else
              for (; nextInstance; )
                deleteHydratableInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
        }
        return popToNextHostParent(fiber), fiber.tag === SuspenseComponent ? nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber) : nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null, !0;
      }
      function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
      }
      function warnIfUnhydratedTailNodes(fiber) {
        for (var nextInstance = nextHydratableInstance; nextInstance; )
          warnUnhydratedInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
      }
      function resetHydrationState() {
        hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1, didSuspendOrErrorDEV = !1;
      }
      function upgradeHydrationErrorsToRecoverable() {
        hydrationErrors !== null && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null);
      }
      function getIsHydrating() {
        return isHydrating;
      }
      function queueHydrationError(error3) {
        hydrationErrors === null ? hydrationErrors = [error3] : hydrationErrors.push(error3);
      }
      var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig, NoTransition = null;
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
      }
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      };
      {
        var findStrictRoot = function(fiber) {
          for (var maybeStrictRoot = null, node = fiber; node !== null; )
            node.mode & StrictLegacyMode && (maybeStrictRoot = node), node = node.return;
          return maybeStrictRoot;
        }, setToSortedString = function(set2) {
          var array = [];
          return set2.forEach(function(value) {
            array.push(value);
          }), array.sort().join(", ");
        }, pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          didWarnAboutUnsafeLifecycles.has(fiber.type) || (typeof instance.componentWillMount == "function" && // Don't warn about react-lifecycles-compat polyfilled components.
          instance.componentWillMount.__suppressDeprecationWarning !== !0 && pendingComponentWillMountWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount == "function" && pendingUNSAFE_ComponentWillMountWarnings.push(fiber), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 && pendingComponentWillReceivePropsWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps == "function" && pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 && pendingComponentWillUpdateWarnings.push(fiber), fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate == "function" && pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
        }, ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          pendingComponentWillMountWarnings.length > 0 && (pendingComponentWillMountWarnings.forEach(function(fiber) {
            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillMountWarnings = []);
          var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
          pendingUNSAFE_ComponentWillMountWarnings.length > 0 && (pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillMountWarnings = []);
          var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          pendingComponentWillReceivePropsWarnings.length > 0 && (pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillReceivePropsWarnings = []);
          var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
          pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0 && (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillReceivePropsWarnings = []);
          var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          pendingComponentWillUpdateWarnings.length > 0 && (pendingComponentWillUpdateWarnings.forEach(function(fiber) {
            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingComponentWillUpdateWarnings = []);
          var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0 && (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutUnsafeLifecycles.add(fiber.type);
          }), pendingUNSAFE_ComponentWillUpdateWarnings = []), UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error2(`Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`, sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error2(`Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state

Please update the following components: %s`, _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error2(`Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`, _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn(`componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn(`componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn(`componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = /* @__PURE__ */ new Map(), didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            error2("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (!didWarnAboutLegacyContext.has(fiber.type)) {
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext == "function") && (warningsForRoot === void 0 && (warningsForRoot = [], pendingLegacyContextWarning.set(strictRoot, warningsForRoot)), warningsForRoot.push(fiber));
          }
        }, ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length !== 0) {
              var firstFiber = fiberArray[0], uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component"), didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber), error2(`Legacy context API has been detected within a strict-mode tree.

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://reactjs.org/link/legacy-context`, sortedNames);
              } finally {
                resetCurrentFiber();
              }
            }
          });
        }, ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], pendingLegacyContextWarning = /* @__PURE__ */ new Map();
        };
      }
      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = assign({}, baseProps), defaultProps = Component.defaultProps;
          for (var propName in defaultProps)
            props[propName] === void 0 && (props[propName] = defaultProps[propName]);
          return props;
        }
        return baseProps;
      }
      var valueCursor = createCursor(null), rendererSigil;
      rendererSigil = {};
      var currentlyRenderingFiber = null, lastContextDependency = null, lastFullyObservedContext = null, isDisallowedContextReadInDEV = !1;
      function resetContextDependencies() {
        currentlyRenderingFiber = null, lastContextDependency = null, lastFullyObservedContext = null, isDisallowedContextReadInDEV = !1;
      }
      function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = !0;
      }
      function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = !1;
      }
      function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue, providerFiber), context._currentValue = nextValue, context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil && error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), context._currentRenderer = rendererSigil;
      }
      function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber), context._currentValue = currentValue;
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        for (var node = parent; node !== null; ) {
          var alternate = node.alternate;
          if (isSubsetOfLanes(node.childLanes, renderLanes2) ? alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2) && (alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2)) : (node.childLanes = mergeLanes(node.childLanes, renderLanes2), alternate !== null && (alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2))), node === propagationRoot)
            break;
          node = node.return;
        }
        node !== propagationRoot && error2("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
      }
      function propagateContextChange(workInProgress2, context, renderLanes2) {
        propagateContextChange_eager(workInProgress2, context, renderLanes2);
      }
      function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
        var fiber = workInProgress2.child;
        for (fiber !== null && (fiber.return = workInProgress2); fiber !== null; ) {
          var nextFiber = void 0, list2 = fiber.dependencies;
          if (list2 !== null) {
            nextFiber = fiber.child;
            for (var dependency = list2.firstContext; dependency !== null; ) {
              if (dependency.context === context) {
                if (fiber.tag === ClassComponent) {
                  var lane = pickArbitraryLane(renderLanes2), update = createUpdate(NoTimestamp, lane);
                  update.tag = ForceUpdate;
                  var updateQueue = fiber.updateQueue;
                  if (updateQueue !== null) {
                    var sharedQueue = updateQueue.shared, pending = sharedQueue.pending;
                    pending === null ? update.next = update : (update.next = pending.next, pending.next = update), sharedQueue.pending = update;
                  }
                }
                fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                var alternate = fiber.alternate;
                alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, renderLanes2)), scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2), list2.lanes = mergeLanes(list2.lanes, renderLanes2);
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider)
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          else if (fiber.tag === DehydratedFragment) {
            var parentSuspense = fiber.return;
            if (parentSuspense === null)
              throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
            var _alternate = parentSuspense.alternate;
            _alternate !== null && (_alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2)), scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2), nextFiber = fiber.sibling;
          } else
            nextFiber = fiber.child;
          if (nextFiber !== null)
            nextFiber.return = fiber;
          else
            for (nextFiber = fiber; nextFiber !== null; ) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return, nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2, lastContextDependency = null, lastFullyObservedContext = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          var firstContext = dependencies.firstContext;
          firstContext !== null && (includesSomeLane(dependencies.lanes, renderLanes2) && markWorkInProgressReceivedUpdate(), dependencies.firstContext = null);
        }
      }
      function readContext(context) {
        isDisallowedContextReadInDEV && error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        var value = context._currentValue;
        if (lastFullyObservedContext !== context) {
          var contextItem = {
            context,
            memoizedValue: value,
            next: null
          };
          if (lastContextDependency === null) {
            if (currentlyRenderingFiber === null)
              throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            lastContextDependency = contextItem, currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem
            };
          } else
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return value;
      }
      var concurrentQueues = null;
      function pushConcurrentUpdateQueue(queue) {
        concurrentQueues === null ? concurrentQueues = [queue] : concurrentQueues.push(queue);
      }
      function finishQueueingConcurrentUpdates() {
        if (concurrentQueues !== null) {
          for (var i13 = 0; i13 < concurrentQueues.length; i13++) {
            var queue = concurrentQueues[i13], lastInterleavedUpdate = queue.interleaved;
            if (lastInterleavedUpdate !== null) {
              queue.interleaved = null;
              var firstInterleavedUpdate = lastInterleavedUpdate.next, lastPendingUpdate = queue.pending;
              if (lastPendingUpdate !== null) {
                var firstPendingUpdate = lastPendingUpdate.next;
                lastPendingUpdate.next = firstInterleavedUpdate, lastInterleavedUpdate.next = firstPendingUpdate;
              }
              queue.pending = lastInterleavedUpdate;
            }
          }
          concurrentQueues = null;
        }
      }
      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        return interleaved === null ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update), queue.interleaved = update, markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        interleaved === null ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update), queue.interleaved = update;
      }
      function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        return interleaved === null ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update), queue.interleaved = update, markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, lane)), alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        for (var node = sourceFiber, parent = sourceFiber.return; parent !== null; )
          parent.childLanes = mergeLanes(parent.childLanes, lane), alternate = parent.alternate, alternate !== null ? alternate.childLanes = mergeLanes(alternate.childLanes, lane) : (parent.flags & (Placement | Hydrating)) !== NoFlags && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber), node = parent, parent = parent.return;
        if (node.tag === HostRoot) {
          var root2 = node.stateNode;
          return root2;
        } else
          return null;
      }
      var UpdateState = 0, ReplaceState = 1, ForceUpdate = 2, CaptureUpdate = 3, hasForceUpdate = !1, didWarnUpdateInsideUpdate, currentlyProcessingQueue;
      didWarnUpdateInsideUpdate = !1, currentlyProcessingQueue = null;
      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null,
            interleaved: null,
            lanes: NoLanes
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        var queue = workInProgress2.updateQueue, currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = clone;
        }
      }
      function createUpdate(eventTime, lane) {
        var update = {
          eventTime,
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null)
          return null;
        var sharedQueue = updateQueue.shared;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate && (error2("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."), didWarnUpdateInsideUpdate = !0), isUnsafeClassRenderPhaseUpdate()) {
          var pending = sharedQueue.pending;
          return pending === null ? update.next = update : (update.next = pending.next, pending.next = update), sharedQueue.pending = update, unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else
          return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
      }
      function entangleTransitions(root2, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue !== null) {
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes, markRootEntangled(root2, newQueueLanes);
          }
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue, current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var newFirst = null, newLast = null, firstBaseUpdate = queue.firstBaseUpdate;
            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;
              do {
                var clone = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLast === null ? newFirst = newLast = clone : (newLast.next = clone, newLast = clone), update = update.next;
              } while (update !== null);
              newLast === null ? newFirst = newLast = capturedUpdate : (newLast.next = capturedUpdate, newLast = capturedUpdate);
            } else
              newFirst = newLast = capturedUpdate;
            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            }, workInProgress2.updateQueue = queue;
            return;
          }
        }
        var lastBaseUpdate = queue.lastBaseUpdate;
        lastBaseUpdate === null ? queue.firstBaseUpdate = capturedUpdate : lastBaseUpdate.next = capturedUpdate, queue.lastBaseUpdate = capturedUpdate;
      }
      function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload == "function") {
              enterDisallowedContextReadInDEV();
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(!0);
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(!1);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate:
            workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
          case UpdateState: {
            var _payload = update.payload, partialState;
            if (typeof _payload == "function") {
              enterDisallowedContextReadInDEV(), partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(!0);
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(!1);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else
              partialState = _payload;
            return partialState == null ? prevState : assign({}, prevState, partialState);
          }
          case ForceUpdate:
            return hasForceUpdate = !0, prevState;
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
        var queue = workInProgress2.updateQueue;
        hasForceUpdate = !1, currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null, lastBaseUpdate === null ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate, lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue, currentLastBaseUpdate = currentQueue.lastBaseUpdate;
            currentLastBaseUpdate !== lastBaseUpdate && (currentLastBaseUpdate === null ? currentQueue.firstBaseUpdate = firstPendingUpdate : currentLastBaseUpdate.next = firstPendingUpdate, currentQueue.lastBaseUpdate = lastPendingUpdate);
          }
        }
        if (firstBaseUpdate !== null) {
          var newState = queue.baseState, newLanes = NoLanes, newBaseState = null, newFirstBaseUpdate = null, newLastBaseUpdate = null, update = firstBaseUpdate;
          do {
            var updateLane = update.lane, updateEventTime = update.eventTime;
            if (isSubsetOfLanes(renderLanes2, updateLane)) {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  // This update is going to be committed so we never want uncommit
                  // it. Using NoLane works because 0 is a subset of all bitmasks, so
                  // this will never be skipped by the check above.
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }
              newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
              var callback = update.callback;
              if (callback !== null && // If the update was already committed, we should not queue its
              // callback again.
              update.lane !== NoLane) {
                workInProgress2.flags |= Callback;
                var effects = queue.effects;
                effects === null ? queue.effects = [update] : effects.push(update);
              }
            } else {
              var clone = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              newLastBaseUpdate === null ? (newFirstBaseUpdate = newLastBaseUpdate = clone, newBaseState = newState) : newLastBaseUpdate = newLastBaseUpdate.next = clone, newLanes = mergeLanes(newLanes, updateLane);
            }
            if (update = update.next, update === null) {
              if (pendingQueue = queue.shared.pending, pendingQueue === null)
                break;
              var _lastPendingUpdate = pendingQueue, _firstPendingUpdate = _lastPendingUpdate.next;
              _lastPendingUpdate.next = null, update = _firstPendingUpdate, queue.lastBaseUpdate = _lastPendingUpdate, queue.shared.pending = null;
            }
          } while (!0);
          newLastBaseUpdate === null && (newBaseState = newState), queue.baseState = newBaseState, queue.firstBaseUpdate = newFirstBaseUpdate, queue.lastBaseUpdate = newLastBaseUpdate;
          var lastInterleaved = queue.shared.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do
              newLanes = mergeLanes(newLanes, interleaved.lane), interleaved = interleaved.next;
            while (interleaved !== lastInterleaved);
          } else
            firstBaseUpdate === null && (queue.shared.lanes = NoLanes);
          markSkippedUpdateLanes(newLanes), workInProgress2.lanes = newLanes, workInProgress2.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
      }
      function callCallback(callback, context) {
        if (typeof callback != "function")
          throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        callback.call(context);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = !1;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        if (finishedQueue.effects = null, effects !== null)
          for (var i13 = 0; i13 < effects.length; i13++) {
            var effect = effects[i13], callback = effect.callback;
            callback !== null && (effect.callback = null, callCallback(callback, instance));
          }
      }
      var fakeInternalInstance = {}, emptyRefsObject = new React12.Component().refs, didWarnAboutStateAssignmentForComponent, didWarnAboutUninitializedState, didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate, didWarnAboutLegacyLifecyclesAndDerivedState, didWarnAboutUndefinedDerivedState, warnOnUndefinedDerivedState, warnOnInvalidCallback, didWarnAboutDirectlyAssigningPropsToState, didWarnAboutContextTypeAndContextTypes, didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set(), didWarnAboutUninitializedState = /* @__PURE__ */ new Set(), didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set(), didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set(), didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set(), didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set(), didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set(), didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
        var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        warnOnInvalidCallback = function(callback, callerName) {
          if (!(callback === null || typeof callback == "function")) {
            var key = callerName + "_" + callback;
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
          }
        }, warnOnUndefinedDerivedState = function(type2, partialState) {
          if (partialState === void 0) {
            var componentName = getComponentNameFromType(type2) || "Component";
            didWarnAboutUndefinedDerivedState.has(componentName) || (didWarnAboutUndefinedDerivedState.add(componentName), error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName));
          }
        }, Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: !1,
          value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
          }
        }), Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState, partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState == null ? prevState : assign({}, prevState, partialState);
        if (workInProgress2.memoizedState = memoizedState, workInProgress2.lanes === NoLanes) {
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
          update.payload = payload, callback != null && (warnOnInvalidCallback(callback, "setState"), update.callback = callback);
          var root2 = enqueueUpdate(fiber, update, lane);
          root2 !== null && (scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane)), markStateUpdateScheduled(fiber, lane);
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
          update.tag = ReplaceState, update.payload = payload, callback != null && (warnOnInvalidCallback(callback, "replaceState"), update.callback = callback);
          var root2 = enqueueUpdate(fiber, update, lane);
          root2 !== null && (scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane)), markStateUpdateScheduled(fiber, lane);
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get(inst), eventTime = requestEventTime(), lane = requestUpdateLane(fiber), update = createUpdate(eventTime, lane);
          update.tag = ForceUpdate, callback != null && (warnOnInvalidCallback(callback, "forceUpdate"), update.callback = callback);
          var root2 = enqueueUpdate(fiber, update, lane);
          root2 !== null && (scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitions(root2, fiber, lane)), markForceUpdateScheduled(fiber, lane);
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if (typeof instance.shouldComponentUpdate == "function") {
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(!0);
              try {
                shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                setIsStrictModeForDevtools(!1);
              }
            }
            shouldUpdate === void 0 && error2("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
          }
          return shouldUpdate;
        }
        return ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance = workInProgress2.stateNode;
        {
          var name = getComponentNameFromType(ctor) || "Component", renderPresent = instance.render;
          renderPresent || (ctor.prototype && typeof ctor.prototype.render == "function" ? error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name)), instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state && error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name), instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name), instance.propTypes && error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name), instance.contextType && error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name), instance.contextTypes && error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name), ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name)), typeof instance.componentShouldUpdate == "function" && error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name), ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate < "u" && error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component"), typeof instance.componentDidUnmount == "function" && error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name), typeof instance.componentDidReceiveProps == "function" && error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name), typeof instance.componentWillRecieveProps == "function" && error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name), typeof instance.UNSAFE_componentWillRecieveProps == "function" && error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          var hasMutatedProps = instance.props !== newProps;
          instance.props !== void 0 && hasMutatedProps && error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name), instance.defaultProps && error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name), typeof instance.getSnapshotBeforeUpdate == "function" && typeof instance.componentDidUpdate != "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) && (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor))), typeof instance.getDerivedStateFromProps == "function" && error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof instance.getDerivedStateFromError == "function" && error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name), typeof ctor.getSnapshotBeforeUpdate == "function" && error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          var _state = instance.state;
          _state && (typeof _state != "object" || isArray(_state)) && error2("%s.state: must be set to an object or null", name), typeof instance.getChildContext == "function" && typeof ctor.childContextTypes != "object" && error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
      function adoptClassInstance(workInProgress2, instance) {
        instance.updater = classComponentUpdater, workInProgress2.stateNode = instance, set(instance, workInProgress2), instance._reactInternalInstance = fakeInternalInstance;
      }
      function constructClassInstance(workInProgress2, ctor, props) {
        var isLegacyContextConsumer = !1, unmaskedContext = emptyContextObject, context = emptyContextObject, contextType = ctor.contextType;
        if ("contextType" in ctor) {
          var isValid = (
            // Allow null for conditional declaration
            contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
          );
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            contextType === void 0 ? addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType != "object" ? addendum = " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? addendum = " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? addendum = " Did you accidentally pass the Context.Consumer instead?" : addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.", error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
        if (typeof contextType == "object" && contextType !== null)
          context = readContext(contextType);
        else {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes != null, context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context);
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(!0);
          try {
            instance = new ctor(props, context);
          } finally {
            setIsStrictModeForDevtools(!1);
          }
        }
        var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
        adoptClassInstance(workInProgress2, instance);
        {
          if (typeof ctor.getDerivedStateFromProps == "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutUninitializedState.has(componentName) || (didWarnAboutUninitializedState.add(componentName), error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName));
          }
          if (typeof ctor.getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function") {
            var foundWillMountName = null, foundWillReceivePropsName = null, foundWillUpdateName = null;
            if (typeof instance.componentWillMount == "function" && instance.componentWillMount.__suppressDeprecationWarning !== !0 ? foundWillMountName = "componentWillMount" : typeof instance.UNSAFE_componentWillMount == "function" && (foundWillMountName = "UNSAFE_componentWillMount"), typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof instance.UNSAFE_componentWillReceiveProps == "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps"), typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== !0 ? foundWillUpdateName = "componentWillUpdate" : typeof instance.UNSAFE_componentWillUpdate == "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate"), foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component", newApiName = typeof ctor.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error2(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : ""));
            }
          }
        }
        return isLegacyContextConsumer && cacheContext(workInProgress2, unmaskedContext, context), instance;
      }
      function callComponentWillMount(workInProgress2, instance) {
        var oldState = instance.state;
        typeof instance.componentWillMount == "function" && instance.componentWillMount(), typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount(), oldState !== instance.state && (error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps == "function" && instance.componentWillReceiveProps(newProps, nextContext), typeof instance.UNSAFE_componentWillReceiveProps == "function" && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext), instance.state !== oldState) {
          {
            var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
            didWarnAboutStateAssignmentForComponent.has(componentName) || (didWarnAboutStateAssignmentForComponent.add(componentName), error2("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName));
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        checkClassInstance(workInProgress2, ctor, newProps);
        var instance = workInProgress2.stateNode;
        instance.props = newProps, instance.state = workInProgress2.memoizedState, instance.refs = emptyRefsObject, initializeUpdateQueue(workInProgress2);
        var contextType = ctor.contextType;
        if (typeof contextType == "object" && contextType !== null)
          instance.context = readContext(contextType);
        else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
          instance.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            didWarnAboutDirectlyAssigningPropsToState.has(componentName) || (didWarnAboutDirectlyAssigningPropsToState.add(componentName), error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName));
          }
          workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance), ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
        }
        instance.state = workInProgress2.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), instance.state = workInProgress2.memoizedState), typeof ctor.getDerivedStateFromProps != "function" && typeof instance.getSnapshotBeforeUpdate != "function" && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (callComponentWillMount(workInProgress2, instance), processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), instance.state = workInProgress2.memoizedState), typeof instance.componentDidMount == "function") {
          var fiberFlags = Update;
          fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), workInProgress2.flags |= fiberFlags;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode, oldProps = workInProgress2.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context, contextType = ctor.contextType, nextContext = emptyContextObject;
        if (typeof contextType == "object" && contextType !== null)
          nextContext = readContext(contextType);
        else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps, hasNewLifecycles = typeof getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function";
        !hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps == "function" || typeof instance.componentWillReceiveProps == "function") && (oldProps !== newProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext), resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState, newState = instance.state = oldState;
        if (processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), newState = workInProgress2.memoizedState, oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount == "function") {
            var fiberFlags = Update;
            fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), workInProgress2.flags |= fiberFlags;
          }
          return !1;
        }
        typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), newState = workInProgress2.memoizedState);
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount == "function" || typeof instance.componentWillMount == "function") && (typeof instance.componentWillMount == "function" && instance.componentWillMount(), typeof instance.UNSAFE_componentWillMount == "function" && instance.UNSAFE_componentWillMount()), typeof instance.componentDidMount == "function") {
            var _fiberFlags = Update;
            _fiberFlags |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (_fiberFlags |= MountLayoutDev), workInProgress2.flags |= _fiberFlags;
          }
        } else {
          if (typeof instance.componentDidMount == "function") {
            var _fiberFlags2 = Update;
            _fiberFlags2 |= LayoutStatic, (workInProgress2.mode & StrictEffectsMode) !== NoMode && (_fiberFlags2 |= MountLayoutDev), workInProgress2.flags |= _fiberFlags2;
          }
          workInProgress2.memoizedProps = newProps, workInProgress2.memoizedState = newState;
        }
        return instance.props = newProps, instance.state = newState, instance.context = nextContext, shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        cloneUpdateQueue(current2, workInProgress2);
        var unresolvedOldProps = workInProgress2.memoizedProps, oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress2.pendingProps, oldContext = instance.context, contextType = ctor.contextType, nextContext = emptyContextObject;
        if (typeof contextType == "object" && contextType !== null)
          nextContext = readContext(contextType);
        else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, !0);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps, hasNewLifecycles = typeof getDerivedStateFromProps == "function" || typeof instance.getSnapshotBeforeUpdate == "function";
        !hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps == "function" || typeof instance.componentWillReceiveProps == "function") && (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) && callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext), resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState, newState = instance.state = oldState;
        if (processUpdateQueue(workInProgress2, newProps, instance, renderLanes2), newState = workInProgress2.memoizedState, unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation)
          return typeof instance.componentDidUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Snapshot), !1;
        typeof getDerivedStateFromProps == "function" && (applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps), newState = workInProgress2.memoizedState);
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
        // both before and after `shouldComponentUpdate` has been called. Not ideal,
        // but I'm loath to refactor this function. This only happens for memoized
        // components so it's not that common.
        enableLazyContextPropagation;
        return shouldUpdate ? (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate == "function" || typeof instance.componentWillUpdate == "function") && (typeof instance.componentWillUpdate == "function" && instance.componentWillUpdate(newProps, newState, nextContext), typeof instance.UNSAFE_componentWillUpdate == "function" && instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext)), typeof instance.componentDidUpdate == "function" && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (workInProgress2.flags |= Snapshot)) : (typeof instance.componentDidUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Update), typeof instance.getSnapshotBeforeUpdate == "function" && (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) && (workInProgress2.flags |= Snapshot), workInProgress2.memoizedProps = newProps, workInProgress2.memoizedState = newState), instance.props = newProps, instance.state = newState, instance.context = nextContext, shouldUpdate;
      }
      var didWarnAboutMaps, didWarnAboutGenerators, didWarnAboutStringRefs, ownerHasKeyUseWarning, ownerHasFunctionTypeWarning, warnForMissingKey = function(child, returnFiber) {
      };
      didWarnAboutMaps = !1, didWarnAboutGenerators = !1, didWarnAboutStringRefs = {}, ownerHasKeyUseWarning = {}, ownerHasFunctionTypeWarning = {}, warnForMissingKey = function(child, returnFiber) {
        if (!(child === null || typeof child != "object") && !(!child._store || child._store.validated || child.key != null)) {
          if (typeof child._store != "object")
            throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          child._store.validated = !0;
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          ownerHasKeyUseWarning[componentName] || (ownerHasKeyUseWarning[componentName] = !0, error2('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'));
        }
      };
      function coerceRef(returnFiber, current2, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef != "function" && typeof mixedRef != "object") {
          if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
          // because these cannot be automatically converted to an arrow function
          // using a codemod. Therefore, we don't have to warn about string refs again.
          !(element._owner && element._self && element._owner.stateNode !== element._self)) {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            didWarnAboutStringRefs[componentName] || (error2('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef), didWarnAboutStringRefs[componentName] = !0);
          }
          if (element._owner) {
            var owner = element._owner, inst;
            if (owner) {
              var ownerFiber = owner;
              if (ownerFiber.tag !== ClassComponent)
                throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
              inst = ownerFiber.stateNode;
            }
            if (!inst)
              throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            var resolvedInst = inst;
            checkPropStringCoercion(mixedRef, "ref");
            var stringRef = "" + mixedRef;
            if (current2 !== null && current2.ref !== null && typeof current2.ref == "function" && current2.ref._stringRef === stringRef)
              return current2.ref;
            var ref = function(value) {
              var refs = resolvedInst.refs;
              refs === emptyRefsObject && (refs = resolvedInst.refs = {}), value === null ? delete refs[stringRef] : refs[stringRef] = value;
            };
            return ref._stringRef = stringRef, ref;
          } else {
            if (typeof mixedRef != "string")
              throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            if (!element._owner)
              throw new Error("Element ref was specified as a string (" + mixedRef + `) but no owner was set. This could happen for one of the following reasons:
1. You may be adding a ref to a function component
2. You may be adding a ref to a component that was not created inside a component's render method
3. You have multiple copies of React loaded
See https://reactjs.org/link/refs-must-have-owner for more information.`);
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
      }
      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasFunctionTypeWarning[componentName])
            return;
          ownerHasFunctionTypeWarning[componentName] = !0, error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
        }
      }
      function resolveLazy(lazyType) {
        var payload = lazyType._payload, init = lazyType._init;
        return init(payload);
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (shouldTrackSideEffects) {
            var deletions = returnFiber.deletions;
            deletions === null ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= ChildDeletion) : deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects)
            return null;
          for (var childToDelete = currentFirstChild; childToDelete !== null; )
            deleteChild(returnFiber, childToDelete), childToDelete = childToDelete.sibling;
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          for (var existingChildren = /* @__PURE__ */ new Map(), existingChild = currentFirstChild; existingChild !== null; )
            existingChild.key !== null ? existingChildren.set(existingChild.key, existingChild) : existingChildren.set(existingChild.index, existingChild), existingChild = existingChild.sibling;
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          return clone.index = 0, clone.sibling = null, clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          if (newFiber.index = newIndex, !shouldTrackSideEffects)
            return newFiber.flags |= Forked, lastPlacedIndex;
          var current2 = newFiber.alternate;
          if (current2 !== null) {
            var oldIndex = current2.index;
            return oldIndex < lastPlacedIndex ? (newFiber.flags |= Placement, lastPlacedIndex) : oldIndex;
          } else
            return newFiber.flags |= Placement, lastPlacedIndex;
        }
        function placeSingleChild(newFiber) {
          return shouldTrackSideEffects && newFiber.alternate === null && (newFiber.flags |= Placement), newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (current2 === null || current2.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            return created.return = returnFiber, created;
          } else {
            var existing = useFiber(current2, textContent);
            return existing.return = returnFiber, existing;
          }
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE)
            return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
          if (current2 !== null && (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
          isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
          // We need to do this after the Hot Reloading check above,
          // because hot reloading has different semantics than prod because
          // it doesn't resuspend. So we can't let the call below suspend.
          typeof elementType == "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type)) {
            var existing = useFiber(current2, element.props);
            return existing.ref = coerceRef(returnFiber, current2, element), existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
          }
          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          return created.ref = coerceRef(returnFiber, current2, element), created.return = returnFiber, created;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            return created.return = returnFiber, created;
          } else {
            var existing = useFiber(current2, portal.children || []);
            return existing.return = returnFiber, existing;
          }
        }
        function updateFragment2(returnFiber, current2, fragment, lanes, key) {
          if (current2 === null || current2.tag !== Fragment9) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
            return created.return = returnFiber, created;
          } else {
            var existing = useFiber(current2, fragment);
            return existing.return = returnFiber, existing;
          }
        }
        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild == "string" && newChild !== "" || typeof newChild == "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            return created.return = returnFiber, created;
          }
          if (typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                return _created.ref = coerceRef(returnFiber, null, newChild), _created.return = returnFiber, _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                return _created2.return = returnFiber, _created2;
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload, init = newChild._init;
                return createChild(returnFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
              return _created3.return = returnFiber, _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild == "string" && newChild !== "" || typeof newChild == "number")
            return key !== null ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          if (typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
              case REACT_PORTAL_TYPE:
                return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload, init = newChild._init;
                return updateSlot(returnFiber, oldFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild))
              return key !== null ? null : updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild == "string" && newChild !== "" || typeof newChild == "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }
          if (typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
              case REACT_LAZY_TYPE:
                var payload = newChild._payload, init = newChild._init;
                return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "function" && warnOnFunctionType(returnFiber), null;
        }
        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child != "object" || child === null)
              return knownKeys;
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key = child.key;
                if (typeof key != "string")
                  break;
                if (knownKeys === null) {
                  knownKeys = /* @__PURE__ */ new Set(), knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                error2("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                break;
              case REACT_LAZY_TYPE:
                var payload = child._payload, init = child._init;
                warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          for (var knownKeys = null, i13 = 0; i13 < newChildren.length; i13++) {
            var child = newChildren[i13];
            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
          }
          for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (newFiber === null) {
              oldFiber === null && (oldFiber = nextOldFiber);
              break;
            }
            shouldTrackSideEffects && oldFiber && newFiber.alternate === null && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            if (deleteRemainingChildren(returnFiber, oldFiber), getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
              _newFiber !== null && (lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber : previousNewFiber.sibling = _newFiber, previousNewFiber = _newFiber);
            }
            if (getIsHydrating()) {
              var _numberOfForks = newIdx;
              pushTreeFork(returnFiber, _numberOfForks);
            }
            return resultingFirstChild;
          }
          for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
            _newFiber2 !== null && (shouldTrackSideEffects && _newFiber2.alternate !== null && existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key), lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber2 : previousNewFiber.sibling = _newFiber2, previousNewFiber = _newFiber2);
          }
          if (shouldTrackSideEffects && existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          }), getIsHydrating()) {
            var _numberOfForks2 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks2);
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (typeof iteratorFn != "function")
            throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          {
            typeof Symbol == "function" && // $FlowFixMe Flow doesn't know about toStringTag
            newChildrenIterable[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = !0), newChildrenIterable.entries === iteratorFn && (didWarnAboutMaps || error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren)
              for (var knownKeys = null, _step = _newChildren.next(); !_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (newChildren == null)
            throw new Error("An iterable object provided no iterator.");
          for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null, step2 = newChildren.next(); oldFiber !== null && !step2.done; newIdx++, step2 = newChildren.next()) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step2.value, lanes);
            if (newFiber === null) {
              oldFiber === null && (oldFiber = nextOldFiber);
              break;
            }
            shouldTrackSideEffects && oldFiber && newFiber.alternate === null && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
          }
          if (step2.done) {
            if (deleteRemainingChildren(returnFiber, oldFiber), getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (; !step2.done; newIdx++, step2 = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step2.value, lanes);
              _newFiber3 !== null && (lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber3 : previousNewFiber.sibling = _newFiber3, previousNewFiber = _newFiber3);
            }
            if (getIsHydrating()) {
              var _numberOfForks3 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks3);
            }
            return resultingFirstChild;
          }
          for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); !step2.done; newIdx++, step2 = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step2.value, lanes);
            _newFiber4 !== null && (shouldTrackSideEffects && _newFiber4.alternate !== null && existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key), lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx), previousNewFiber === null ? resultingFirstChild = _newFiber4 : previousNewFiber.sibling = _newFiber4, previousNewFiber = _newFiber4);
          }
          if (shouldTrackSideEffects && existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          }), getIsHydrating()) {
            var _numberOfForks4 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks4);
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            return existing.return = returnFiber, existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          return created.return = returnFiber, created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          for (var key = element.key, child = currentFirstChild; child !== null; ) {
            if (child.key === key) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                if (child.tag === Fragment9) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.props.children);
                  return existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
                }
              } else if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType == "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var _existing = useFiber(child, element.props);
                return _existing.ref = coerceRef(returnFiber, child, element), _existing.return = returnFiber, _existing._debugSource = element._source, _existing._debugOwner = element._owner, _existing;
              }
              deleteRemainingChildren(returnFiber, child);
              break;
            } else
              deleteChild(returnFiber, child);
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            return created.return = returnFiber, created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
            return _created4.ref = coerceRef(returnFiber, currentFirstChild, element), _created4.return = returnFiber, _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          for (var key = portal.key, child = currentFirstChild; child !== null; ) {
            if (child.key === key)
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                return existing.return = returnFiber, existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            else
              deleteChild(returnFiber, child);
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          return created.return = returnFiber, created;
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild == "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment && (newChild = newChild.props.children), typeof newChild == "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_LAZY_TYPE:
                var payload = newChild._payload, init = newChild._init;
                return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
            }
            if (isArray(newChild))
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild))
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return typeof newChild == "string" && newChild !== "" || typeof newChild == "number" ? placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes)) : (typeof newChild == "function" && warnOnFunctionType(returnFiber), deleteRemainingChildren(returnFiber, currentFirstChild));
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = ChildReconciler(!0), mountChildFibers = ChildReconciler(!1);
      function cloneChildFibers(current2, workInProgress2) {
        if (current2 !== null && workInProgress2.child !== current2.child)
          throw new Error("Resuming work not yet implemented.");
        if (workInProgress2.child !== null) {
          var currentChild = workInProgress2.child, newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          for (workInProgress2.child = newChild, newChild.return = workInProgress2; currentChild.sibling !== null; )
            currentChild = currentChild.sibling, newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps), newChild.return = workInProgress2;
          newChild.sibling = null;
        }
      }
      function resetChildFibers(workInProgress2, lanes) {
        for (var child = workInProgress2.child; child !== null; )
          resetWorkInProgress(child, lanes), child = child.sibling;
      }
      var NO_CONTEXT = {}, contextStackCursor$1 = createCursor(NO_CONTEXT), contextFiberStackCursor = createCursor(NO_CONTEXT), rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c) {
        if (c === NO_CONTEXT)
          throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber), push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber), push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber), pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }
      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current), context = requiredContext(contextStackCursor$1.current), nextContext = getChildHostContext(context, fiber.type);
        context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
      }
      function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
      }
      var DefaultSuspenseContext = 0, SubtreeSuspenseContextMask = 1, InvisibleParentSuspenseContext = 1, ForceSuspenseFallback = 2, suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
        var nextState = workInProgress2.memoizedState;
        if (nextState !== null)
          return nextState.dehydrated !== null;
        var props = workInProgress2.memoizedProps;
        return !0;
      }
      function findFirstSuspended(row) {
        for (var node = row; node !== null; ) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated))
                return node;
            }
          } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
          // keep track of whether it suspended or not.
          node.memoizedProps.revealOrder !== void 0) {
            var didSuspend = (node.flags & DidCapture) !== NoFlags;
            if (didSuspend)
              return node;
          } else if (node.child !== null) {
            node.child.return = node, node = node.child;
            continue;
          }
          if (node === row)
            return null;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === row)
              return null;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
        return null;
      }
      var NoFlags$1 = (
        /*   */
        0
      ), HasEffect = (
        /* */
        1
      ), Insertion = (
        /*  */
        2
      ), Layout = (
        /*    */
        4
      ), Passive$1 = (
        /*   */
        8
      ), workInProgressSources = [];
      function resetWorkInProgressVersions() {
        for (var i13 = 0; i13 < workInProgressSources.length; i13++) {
          var mutableSource = workInProgressSources[i13];
          mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
      }
      function registerMutableSourceForHydration(root2, mutableSource) {
        var getVersion = mutableSource._getVersion, version = getVersion(mutableSource._source);
        root2.mutableSourceEagerHydrationData == null ? root2.mutableSourceEagerHydrationData = [mutableSource, version] : root2.mutableSourceEagerHydrationData.push(mutableSource, version);
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig, didWarnAboutMismatchedHooksForComponent, didWarnUncachedGetSnapshot;
      didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
      var renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, localIdCounter = 0, globalClientIdCounter = 0, RE_RENDER_LIMIT = 25, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = !1;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          hookTypesDev === null ? hookTypesDev = [hookName] : hookTypesDev.push(hookName);
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          hookTypesDev !== null && (hookTypesUpdateIndexDev++, hookTypesDev[hookTypesUpdateIndexDev] !== hookName && warnOnHookMismatchInDev(hookName));
        }
      }
      function checkDepsAreArrayDev(deps) {
        deps != null && !isArray(deps) && error2("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName) && (didWarnAboutMismatchedHooksForComponent.add(componentName), hookTypesDev !== null)) {
            for (var table = "", secondColumnStart = 30, i13 = 0; i13 <= hookTypesUpdateIndexDev; i13++) {
              for (var oldHookName = hookTypesDev[i13], newHookName = i13 === hookTypesUpdateIndexDev ? currentHookName : oldHookName, row = i13 + 1 + ". " + oldHookName; row.length < secondColumnStart; )
                row += " ";
              row += newHookName + `
`, table += row;
            }
            error2(`React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, componentName, table);
          }
        }
      }
      function throwInvalidHookError() {
        throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies)
          return !1;
        if (prevDeps === null)
          return error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
        nextDeps.length !== prevDeps.length && error2(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
        for (var i13 = 0; i13 < prevDeps.length && i13 < nextDeps.length; i13++)
          if (!objectIs(nextDeps[i13], prevDeps[i13]))
            return !1;
        return !0;
      }
      function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes, currentlyRenderingFiber$1 = workInProgress2, hookTypesDev = current2 !== null ? current2._debugHookTypes : null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.lanes = NoLanes, current2 !== null && current2.memoizedState !== null ? ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV : hookTypesDev !== null ? ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV : ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg);
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;
          do {
            if (didScheduleRenderPhaseUpdateDuringThisPass = !1, localIdCounter = 0, numberOfReRenders >= RE_RENDER_LIMIT)
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            numberOfReRenders += 1, ignorePreviousDependencies = !1, currentHook = null, workInProgressHook = null, workInProgress2.updateQueue = null, hookTypesUpdateIndexDev = -1, ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV, children = Component(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher, workInProgress2._debugHookTypes = hookTypesDev;
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        if (renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
        // and creates false positives. To make this work in legacy mode, we'd
        // need to mark fibers that commit in an incomplete state, somehow. For
        // now I'll disable the warning that most of the bugs that would trigger
        // it are either exclusive to concurrent mode or exist in both.
        (current2.mode & ConcurrentMode) !== NoMode && error2("Internal React error: Expected static flag was missing. Please notify the React team."), didScheduleRenderPhaseUpdate = !1, didRenderTooFewHooks)
          throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        return localIdCounter = 0, didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue, (workInProgress2.mode & StrictEffectsMode) !== NoMode ? workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update) : workInProgress2.flags &= ~(Passive | Update), current2.lanes = removeLanes(current2.lanes, lanes);
      }
      function resetHooksAfterThrow() {
        if (ReactCurrentDispatcher$1.current = ContextOnlyDispatcher, didScheduleRenderPhaseUpdate) {
          for (var hook = currentlyRenderingFiber$1.memoizedState; hook !== null; ) {
            var queue = hook.queue;
            queue !== null && (queue.pending = null), hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = !1;
        }
        renderLanes = NoLanes, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, currentHookNameInDev = null, isUpdatingOpaqueValueInRenderPhase = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, localIdCounter = 0;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        return workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook, workInProgressHook;
      }
      function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          current2 !== null ? nextCurrentHook = current2.memoizedState : nextCurrentHook = null;
        } else
          nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null ? nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState : nextWorkInProgressHook = workInProgressHook.next, nextWorkInProgressHook !== null)
          workInProgressHook = nextWorkInProgressHook, nextWorkInProgressHook = workInProgressHook.next, currentHook = nextCurrentHook;
        else {
          if (nextCurrentHook === null)
            throw new Error("Rendered more hooks than during the previous render.");
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook : workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null,
          stores: null
        };
      }
      function basicStateReducer(state, action) {
        return typeof action == "function" ? action(state) : action;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook(), initialState;
        init !== void 0 ? initialState = init(initialArg) : initialState = initialArg, hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook(), queue = hook.queue;
        if (queue === null)
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current2 = currentHook, baseQueue = current2.baseQueue, pendingQueue = queue.pending;
        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next, pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst, pendingQueue.next = baseFirst;
          }
          current2.baseQueue !== baseQueue && error2("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."), current2.baseQueue = baseQueue = pendingQueue, queue.pending = null;
        }
        if (baseQueue !== null) {
          var first = baseQueue.next, newState = current2.baseState, newBaseState = null, newBaseQueueFirst = null, newBaseQueueLast = null, update = first;
          do {
            var updateLane = update.lane;
            if (isSubsetOfLanes(renderLanes, updateLane)) {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  // This update is going to be committed so we never want uncommit
                  // it. Using NoLane works because 0 is a subset of all bitmasks, so
                  // this will never be skipped by the check above.
                  lane: NoLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }
              if (update.hasEagerState)
                newState = update.eagerState;
              else {
                var action = update.action;
                newState = reducer(newState, action);
              }
            } else {
              var clone = {
                lane: updateLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              newBaseQueueLast === null ? (newBaseQueueFirst = newBaseQueueLast = clone, newBaseState = newState) : newBaseQueueLast = newBaseQueueLast.next = clone, currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane), markSkippedUpdateLanes(updateLane);
            }
            update = update.next;
          } while (update !== null && update !== first);
          newBaseQueueLast === null ? newBaseState = newState : newBaseQueueLast.next = newBaseQueueFirst, objectIs(newState, hook.memoizedState) || markWorkInProgressReceivedUpdate(), hook.memoizedState = newState, hook.baseState = newBaseState, hook.baseQueue = newBaseQueueLast, queue.lastRenderedState = newState;
        }
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            var interleavedLane = interleaved.lane;
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane), markSkippedUpdateLanes(interleavedLane), interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else
          baseQueue === null && (queue.lanes = NoLanes);
        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }
      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook(), queue = hook.queue;
        if (queue === null)
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next, update = firstRenderPhaseUpdate;
          do {
            var action = update.action;
            newState = reducer(newState, action), update = update.next;
          } while (update !== firstRenderPhaseUpdate);
          objectIs(newState, hook.memoizedState) || markWorkInProgressReceivedUpdate(), hook.memoizedState = newState, hook.baseQueue === null && (hook.baseState = newState), queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function mountMutableSource(source, getSnapshot, subscribe) {
      }
      function updateMutableSource(source, getSnapshot, subscribe) {
      }
      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = mountWorkInProgressHook(), nextSnapshot, isHydrating2 = getIsHydrating();
        if (isHydrating2) {
          if (getServerSnapshot === void 0)
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          nextSnapshot = getServerSnapshot(), didWarnUncachedGetSnapshot || nextSnapshot !== getServerSnapshot() && (error2("The result of getServerSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0);
        } else {
          if (nextSnapshot = getSnapshot(), !didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            objectIs(nextSnapshot, cachedSnapshot) || (error2("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0);
          }
          var root2 = getWorkInProgressRoot();
          if (root2 === null)
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          includesBlockingLane(root2, renderLanes) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot
        };
        return hook.queue = inst, mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]), fiber.flags |= Passive, pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null), nextSnapshot;
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = updateWorkInProgressHook(), nextSnapshot = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
          var cachedSnapshot = getSnapshot();
          objectIs(nextSnapshot, cachedSnapshot) || (error2("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0);
        }
        var prevSnapshot = hook.memoizedState, snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        snapshotChanged && (hook.memoizedState = nextSnapshot, markWorkInProgressReceivedUpdate());
        var inst = hook.queue;
        if (updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]), inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
        // checking whether we scheduled a subscription effect above.
        workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
          fiber.flags |= Passive, pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          var root2 = getWorkInProgressRoot();
          if (root2 === null)
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          includesBlockingLane(root2, renderLanes) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        return nextSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
          getSnapshot,
          value: renderedSnapshot
        }, componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null)
          componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = componentUpdateQueue, componentUpdateQueue.stores = [check];
        else {
          var stores = componentUpdateQueue.stores;
          stores === null ? componentUpdateQueue.stores = [check] : stores.push(check);
        }
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot, inst.getSnapshot = getSnapshot, checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
      }
      function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
          checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
        };
        return subscribe(handleStoreChange);
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot, prevValue = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(prevValue, nextValue);
        } catch {
          return !0;
        }
      }
      function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
      }
      function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        typeof initialState == "function" && (initialState = initialState()), hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }
      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }
      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag,
          create,
          destroy,
          deps,
          // Circular
          next: null
        }, componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null)
          componentUpdateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = componentUpdateQueue, componentUpdateQueue.lastEffect = effect.next = effect;
        else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null)
            componentUpdateQueue.lastEffect = effect.next = effect;
          else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect, effect.next = firstEffect, componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        {
          var _ref2 = {
            current: initialValue
          };
          return hook.memoizedState = _ref2, _ref2;
        }
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
      }
      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, destroy = void 0;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          if (destroy = prevEffect.destroy, nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
              return;
            }
          }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
      }
      function mountEffect(create, deps) {
        return (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode ? mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps) : mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
      }
      function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
      }
      function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion, create, deps);
      }
      function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion, create, deps);
      }
      function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        return fiberFlags |= LayoutStatic, (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), mountEffectImpl(fiberFlags, Layout, create, deps);
      }
      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
      }
      function imperativeHandleEffect(create, ref) {
        if (typeof ref == "function") {
          var refCallback = ref, _inst = create();
          return refCallback(_inst), function() {
            refCallback(null);
          };
        } else if (ref != null) {
          var refObject = ref;
          refObject.hasOwnProperty("current") || error2("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
          var _inst2 = create();
          return refObject.current = _inst2, function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create, deps) {
        typeof create != "function" && error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        var effectDeps = deps != null ? deps.concat([ref]) : null, fiberFlags = Update;
        return fiberFlags |= LayoutStatic, (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= MountLayoutDev), mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create, deps) {
        typeof create != "function" && error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        var effectDeps = deps != null ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {
      }
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps;
        return hook.memoizedState = [callback, nextDeps], callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, prevState = hook.memoizedState;
        if (prevState !== null && nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps))
            return prevState[0];
        }
        return hook.memoizedState = [callback, nextDeps], callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, nextValue = nextCreate();
        return hook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook(), nextDeps = deps === void 0 ? null : deps, prevState = hook.memoizedState;
        if (prevState !== null && nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps))
            return prevState[0];
        }
        var nextValue = nextCreate();
        return hook.memoizedState = [nextValue, nextDeps], nextValue;
      }
      function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        return hook.memoizedState = value, value;
      }
      function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook(), resolvedCurrentHook = currentHook, prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null)
          return hook.memoizedState = value, value;
        var prevValue = currentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
          if (!objectIs(value, prevValue)) {
            var deferredLane = claimNextTransitionLane();
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane), markSkippedUpdateLanes(deferredLane), hook.baseState = !0;
          }
          return prevValue;
        } else
          return hook.baseState && (hook.baseState = !1, markWorkInProgressReceivedUpdate()), hook.memoizedState = value, value;
      }
      function startTransition(setPending, callback, options2) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority)), setPending(!0);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
        try {
          setPending(!1), callback();
        } finally {
          if (setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$2.transition = prevTransition, prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            updatedFibersCount > 10 && warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), currentTransition._updatedFibers.clear();
          }
        }
      }
      function mountTransition() {
        var _mountState = mountState(!1), isPending = _mountState[0], setPending = _mountState[1], start = startTransition.bind(null, setPending), hook = mountWorkInProgressHook();
        return hook.memoizedState = start, [isPending, start];
      }
      function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0], hook = updateWorkInProgressHook(), start = hook.memoizedState;
        return [isPending, start];
      }
      function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0], hook = updateWorkInProgressHook(), start = hook.memoizedState;
        return [isPending, start];
      }
      var isUpdatingOpaqueValueInRenderPhase = !1;
      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
      }
      function mountId() {
        var hook = mountWorkInProgressHook(), root2 = getWorkInProgressRoot(), identifierPrefix = root2.identifierPrefix, id3;
        if (getIsHydrating()) {
          var treeId = getTreeId();
          id3 = ":" + identifierPrefix + "R" + treeId;
          var localId = localIdCounter++;
          localId > 0 && (id3 += "H" + localId.toString(32)), id3 += ":";
        } else {
          var globalClientId = globalClientIdCounter++;
          id3 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        return hook.memoizedState = id3, id3;
      }
      function updateId() {
        var hook = updateWorkInProgressHook(), id3 = hook.memoizedState;
        return id3;
      }
      function dispatchReducerAction(fiber, queue, action) {
        typeof arguments[3] == "function" && error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber), update = {
          lane,
          action,
          hasEagerState: !1,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber))
          enqueueRenderPhaseUpdate(queue, update);
        else {
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function dispatchSetState(fiber, queue, action) {
        typeof arguments[3] == "function" && error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber), update = {
          lane,
          action,
          hasEagerState: !1,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber))
          enqueueRenderPhaseUpdate(queue, update);
        else {
          var alternate = fiber.alternate;
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              prevDispatcher = ReactCurrentDispatcher$1.current, ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                var currentState = queue.lastRenderedState, eagerState = lastRenderedReducer(currentState, action);
                if (update.hasEagerState = !0, update.eagerState = eagerState, objectIs(eagerState, currentState)) {
                  enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                  return;
                }
              } catch {
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }
          }
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime), entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = !0;
        var pending = queue.pending;
        pending === null ? update.next = update : (update.next = pending.next, pending.next = update), queue.pending = update;
      }
      function entangleTransitionUpdate(root2, queue, lane) {
        if (isTransitionLane(lane)) {
          var queueLanes = queue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          queue.lanes = newQueueLanes, markRootEntangled(root2, newQueueLanes);
        }
      }
      function markUpdateInDevTools(fiber, lane, action) {
        markStateUpdateScheduled(fiber, lane);
      }
      var ContextOnlyDispatcher = {
        readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      }, HooksDispatcherOnMountInDEV = null, HooksDispatcherOnMountWithHookTypesInDEV = null, HooksDispatcherOnUpdateInDEV = null, HooksDispatcherOnRerenderInDEV = null, InvalidNestedHooksDispatcherOnMountInDEV = null, InvalidNestedHooksDispatcherOnUpdateInDEV = null, InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        }, warnInvalidHookAccess = function() {
          error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", mountHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", mountHookTypesDev(), checkDepsAreArrayDev(deps), mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", mountHookTypesDev(), checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", mountHookTypesDev(), mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", mountHookTypesDev(), void 0;
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", mountHookTypesDev(), mountDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", mountHookTypesDev(), mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", mountHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", mountHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", mountHookTypesDev(), mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", updateHookTypesDev(), mountCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", updateHookTypesDev(), mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", updateHookTypesDev(), mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), void 0;
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), mountDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", updateHookTypesDev(), mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", updateHookTypesDev(), mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, HooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), updateDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", updateHookTypesDev(), updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, HooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", updateHookTypesDev(), rerenderDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", updateHookTypesDev(), rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return warnInvalidContextAccess(), readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), mountHookTypesDev(), mountCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", warnInvalidHookAccess(), mountHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), mountHookTypesDev(), mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), mountHookTypesDev(), mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", warnInvalidHookAccess(), mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", warnInvalidHookAccess(), mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", warnInvalidHookAccess(), mountHookTypesDev(), mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", warnInvalidHookAccess(), mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), mountHookTypesDev(), void 0;
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), mountHookTypesDev(), mountDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), mountHookTypesDev(), mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), mountHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), mountHookTypesDev(), mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", warnInvalidHookAccess(), mountHookTypesDev(), mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return warnInvalidContextAccess(), readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", warnInvalidHookAccess(), updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", warnInvalidHookAccess(), updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), updateHookTypesDev(), updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", warnInvalidHookAccess(), updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        }, InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return warnInvalidContextAccess(), readContext(context);
          },
          useCallback: function(callback, deps) {
            return currentHookNameInDev = "useCallback", warnInvalidHookAccess(), updateHookTypesDev(), updateCallback(callback, deps);
          },
          useContext: function(context) {
            return currentHookNameInDev = "useContext", warnInvalidHookAccess(), updateHookTypesDev(), readContext(context);
          },
          useEffect: function(create, deps) {
            return currentHookNameInDev = "useEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            return currentHookNameInDev = "useImperativeHandle", warnInvalidHookAccess(), updateHookTypesDev(), updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            return currentHookNameInDev = "useInsertionEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            return currentHookNameInDev = "useLayoutEffect", warnInvalidHookAccess(), updateHookTypesDev(), updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            return currentHookNameInDev = "useRef", warnInvalidHookAccess(), updateHookTypesDev(), updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState", warnInvalidHookAccess(), updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            return currentHookNameInDev = "useDebugValue", warnInvalidHookAccess(), updateHookTypesDev(), updateDebugValue();
          },
          useDeferredValue: function(value) {
            return currentHookNameInDev = "useDeferredValue", warnInvalidHookAccess(), updateHookTypesDev(), rerenderDeferredValue(value);
          },
          useTransition: function() {
            return currentHookNameInDev = "useTransition", warnInvalidHookAccess(), updateHookTypesDev(), rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            return currentHookNameInDev = "useMutableSource", warnInvalidHookAccess(), updateHookTypesDev(), void 0;
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            return currentHookNameInDev = "useSyncExternalStore", warnInvalidHookAccess(), updateHookTypesDev(), updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            return currentHookNameInDev = "useId", warnInvalidHookAccess(), updateHookTypesDev(), updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler.unstable_now, commitTime = 0, layoutEffectStartTime = -1, profilerStartTime = -1, passiveEffectStartTime = -1, currentUpdateIsNested = !1, nestedUpdateScheduled = !1;
      function isCurrentUpdateNested() {
        return currentUpdateIsNested;
      }
      function markNestedUpdateScheduled() {
        nestedUpdateScheduled = !0;
      }
      function resetNestedUpdateFlag() {
        currentUpdateIsNested = !1, nestedUpdateScheduled = !1;
      }
      function syncNestedUpdateFlag() {
        currentUpdateIsNested = nestedUpdateScheduled, nestedUpdateScheduled = !1;
      }
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now$1();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now$1(), fiber.actualStartTime < 0 && (fiber.actualStartTime = now$1());
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime, overrideBaseTime && (fiber.selfBaseDuration = elapsedTime), profilerStartTime = -1;
        }
      }
      function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
          var elapsedTime = now$1() - layoutEffectStartTime;
          layoutEffectStartTime = -1;
          for (var parentFiber = fiber.return; parentFiber !== null; ) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2.effectDuration += elapsedTime;
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode.effectDuration += elapsedTime;
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
          var elapsedTime = now$1() - passiveEffectStartTime;
          passiveEffectStartTime = -1;
          for (var parentFiber = fiber.return; parentFiber !== null; ) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2 !== null && (root2.passiveEffectDuration += elapsedTime);
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode !== null && (parentStateNode.passiveEffectDuration += elapsedTime);
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
      }
      function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
      }
      function transferActualDuration(fiber) {
        for (var child = fiber.child; child; )
          fiber.actualDuration += child.actualDuration, child = child.sibling;
      }
      function createCapturedValueAtFiber(value, source) {
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source),
          digest: null
        };
      }
      function createCapturedValue(value, digest, stack) {
        return {
          value,
          source: null,
          stack: stack ?? null,
          digest: digest ?? null
        };
      }
      function showErrorDialog(boundary, errorInfo) {
        return !0;
      }
      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo);
          if (logError === !1)
            return;
          var error3 = errorInfo.value, source = errorInfo.source, stack = errorInfo.stack, componentStack = stack !== null ? stack : "";
          if (error3 != null && error3._suppressLogging) {
            if (boundary.tag === ClassComponent)
              return;
            console.error(error3);
          }
          var componentName = source ? getComponentNameFromFiber(source) : null, componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:", errorBoundaryMessage;
          if (boundary.tag === HostRoot)
            errorBoundaryMessage = `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.`;
          else {
            var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
            errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
          }
          var combinedMessage = componentNameMessage + `
` + componentStack + `

` + ("" + errorBoundaryMessage);
          console.error(combinedMessage);
        } catch (e24) {
          setTimeout(function() {
            throw e24;
          });
        }
      }
      var PossiblyWeakMap$1 = typeof WeakMap == "function" ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate, update.payload = {
          element: null
        };
        var error3 = errorInfo.value;
        return update.callback = function() {
          onUncaughtError(error3), logCapturedError(fiber, errorInfo);
        }, update;
      }
      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError == "function") {
          var error$1 = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error$1);
          }, update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber), logCapturedError(fiber, errorInfo);
          };
        }
        var inst = fiber.stateNode;
        return inst !== null && typeof inst.componentDidCatch == "function" && (update.callback = function() {
          markFailedErrorBoundaryForHotReloading(fiber), logCapturedError(fiber, errorInfo), typeof getDerivedStateFromError != "function" && markLegacyErrorBoundaryAsFailed(this);
          var error$12 = errorInfo.value, stack = errorInfo.stack;
          this.componentDidCatch(error$12, {
            componentStack: stack !== null ? stack : ""
          }), typeof getDerivedStateFromError != "function" && (includesSomeLane(fiber.lanes, SyncLane) || error2("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown"));
        }), update;
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache, threadIDs;
        if (pingCache === null ? (pingCache = root2.pingCache = new PossiblyWeakMap$1(), threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs)) : (threadIDs = pingCache.get(wakeable), threadIDs === void 0 && (threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs))), !threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
          isDevToolsPresent && restorePendingUpdaters(root2, lanes), wakeable.then(ping, ping);
        }
      }
      function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
          var updateQueue = /* @__PURE__ */ new Set();
          updateQueue.add(wakeable), suspenseBoundary.updateQueue = updateQueue;
        } else
          wakeables.add(wakeable);
      }
      function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
          var currentSource = sourceFiber.alternate;
          currentSource ? (sourceFiber.updateQueue = currentSource.updateQueue, sourceFiber.memoizedState = currentSource.memoizedState, sourceFiber.lanes = currentSource.lanes) : (sourceFiber.updateQueue = null, sourceFiber.memoizedState = null);
        }
      }
      function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
          if (node.tag === SuspenseComponent && shouldCaptureSuspense(node))
            return node;
          node = node.return;
        } while (node !== null);
        return null;
      }
      function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
          if (suspenseBoundary === returnFiber)
            suspenseBoundary.flags |= ShouldCapture;
          else {
            if (suspenseBoundary.flags |= DidCapture, sourceFiber.flags |= ForceUpdateForLegacySuspense, sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete), sourceFiber.tag === ClassComponent) {
              var currentSourceFiber = sourceFiber.alternate;
              if (currentSourceFiber === null)
                sourceFiber.tag = IncompleteClassComponent;
              else {
                var update = createUpdate(NoTimestamp, SyncLane);
                update.tag = ForceUpdate, enqueueUpdate(sourceFiber, update, SyncLane);
              }
            }
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
          }
          return suspenseBoundary;
        }
        return suspenseBoundary.flags |= ShouldCapture, suspenseBoundary.lanes = rootRenderLanes, suspenseBoundary;
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        if (sourceFiber.flags |= Incomplete, isDevToolsPresent && restorePendingUpdaters(root2, rootRenderLanes), value !== null && typeof value == "object" && typeof value.then == "function") {
          var wakeable = value;
          resetSuspendedComponent(sourceFiber), getIsHydrating() && sourceFiber.mode & ConcurrentMode && markDidThrowWhileHydratingDEV();
          var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (suspenseBoundary !== null) {
            suspenseBoundary.flags &= ~ForceClientRender, markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes), suspenseBoundary.mode & ConcurrentMode && attachPingListener(root2, wakeable, rootRenderLanes), attachRetryListener(suspenseBoundary, root2, wakeable);
            return;
          } else {
            if (!includesSyncLane(rootRenderLanes)) {
              attachPingListener(root2, wakeable, rootRenderLanes), renderDidSuspendDelayIfPossible();
              return;
            }
            var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            value = uncaughtSuspenseError;
          }
        } else if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
          markDidThrowWhileHydratingDEV();
          var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (_suspenseBoundary !== null) {
            (_suspenseBoundary.flags & ShouldCapture) === NoFlags && (_suspenseBoundary.flags |= ForceClientRender), markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes), queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
            return;
          }
        }
        value = createCapturedValueAtFiber(value, sourceFiber), renderDidError(value);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress2, update);
              return;
            }
            case ClassComponent:
              var errorInfo = value, ctor = workInProgress2.type, instance = workInProgress2.stateNode;
              if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError == "function" || instance !== null && typeof instance.componentDidCatch == "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress2.flags |= ShouldCapture;
                var _lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                var _update3 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                enqueueCapturedUpdate(workInProgress2, _update3);
                return;
              }
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      function getSuspendedCache() {
        return null;
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, didReceiveUpdate = !1, didWarnAboutBadClass, didWarnAboutModulePatternComponent, didWarnAboutContextTypeOnFunctionComponent, didWarnAboutGetDerivedStateOnFunctionComponent, didWarnAboutFunctionRefs, didWarnAboutReassigningProps, didWarnAboutRevealOrder, didWarnAboutTailOptions;
      didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutFunctionRefs = {}, didWarnAboutReassigningProps = !1, didWarnAboutRevealOrder = {}, didWarnAboutTailOptions = {};
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        current2 === null ? workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
      }
      function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2), workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      }
      function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          innerPropTypes && checkPropTypes(
            innerPropTypes,
            nextProps,
            // Resolved props
            "prop",
            getComponentNameFromType(Component)
          );
        }
        var render2 = Component.render, ref = workInProgress2.ref, nextChildren, hasId;
        prepareToReadContext(workInProgress2, renderLanes2), markComponentRenderStarted(workInProgress2);
        {
          if (ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2), hasId = checkDidRenderIdHook(), workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2), hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          setIsRendering(!1);
        }
        return markComponentRenderStopped(), current2 !== null && !didReceiveUpdate ? (bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)) : (getIsHydrating() && hasId && pushMaterializedTreeId(workInProgress2), workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child);
      }
      function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (current2 === null) {
          var type2 = Component.type;
          if (isSimpleFunctionComponent(type2) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
          Component.defaultProps === void 0) {
            var resolvedType = type2;
            return resolvedType = resolveFunctionForHotReloading(type2), workInProgress2.tag = SimpleMemoComponent, workInProgress2.type = resolvedType, validateFunctionComponentInDev(workInProgress2, type2), updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
          }
          {
            var innerPropTypes = type2.propTypes;
            innerPropTypes && checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(type2)
            );
          }
          var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
          return child.ref = workInProgress2.ref, child.return = workInProgress2, workInProgress2.child = child, child;
        }
        {
          var _type = Component.type, _innerPropTypes = _type.propTypes;
          _innerPropTypes && checkPropTypes(
            _innerPropTypes,
            nextProps,
            // Resolved props
            "prop",
            getComponentNameFromType(_type)
          );
        }
        var currentChild = current2.child, hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
        if (!hasScheduledUpdateOrContext) {
          var prevProps = currentChild.memoizedProps, compare = Component.compare;
          if (compare = compare !== null ? compare : shallowEqual, compare(prevProps, nextProps) && current2.ref === workInProgress2.ref)
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        workInProgress2.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        return newChild.ref = workInProgress2.ref, newChild.return = workInProgress2, workInProgress2.child = newChild, newChild;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var outerMemoType = workInProgress2.elementType;
          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
            var lazyComponent = outerMemoType, payload = lazyComponent._payload, init = lazyComponent._init;
            try {
              outerMemoType = init(payload);
            } catch {
              outerMemoType = null;
            }
            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
            outerPropTypes && checkPropTypes(
              outerPropTypes,
              nextProps,
              // Resolved (SimpleMemoComponent has no defaultProps)
              "prop",
              getComponentNameFromType(outerMemoType)
            );
          }
        }
        if (current2 !== null) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
          workInProgress2.type === current2.type)
            if (didReceiveUpdate = !1, workInProgress2.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current2, renderLanes2))
              (current2.flags & ForceUpdateForLegacySuspense) !== NoFlags && (didReceiveUpdate = !0);
            else
              return workInProgress2.lanes = current2.lanes, bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children, prevState = current2 !== null ? current2.memoizedState : null;
        if (nextProps.mode === "hidden" || enableLegacyHidden)
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = nextState, pushRenderLanes(workInProgress2, renderLanes2);
          } else if (includesSomeLane(renderLanes2, OffscreenLane)) {
            var _nextState2 = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState2;
            var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
            pushRenderLanes(workInProgress2, subtreeRenderLanes2);
          } else {
            var spawnedCachePool = null, nextBaseLanes;
            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
            } else
              nextBaseLanes = renderLanes2;
            workInProgress2.lanes = workInProgress2.childLanes = OffscreenLane;
            var _nextState = {
              baseLanes: nextBaseLanes,
              cachePool: spawnedCachePool,
              transitions: null
            };
            return workInProgress2.memoizedState = _nextState, workInProgress2.updateQueue = null, pushRenderLanes(workInProgress2, nextBaseLanes), null;
          }
        else {
          var _subtreeRenderLanes;
          prevState !== null ? (_subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2), workInProgress2.memoizedState = null) : _subtreeRenderLanes = renderLanes2, pushRenderLanes(workInProgress2, _subtreeRenderLanes);
        }
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateFragment(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps;
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateMode(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps.children;
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateProfiler(current2, workInProgress2, renderLanes2) {
        {
          workInProgress2.flags |= Update;
          {
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
          }
        }
        var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children;
        return reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) && (workInProgress2.flags |= Ref, workInProgress2.flags |= RefStatic);
      }
      function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          innerPropTypes && checkPropTypes(
            innerPropTypes,
            nextProps,
            // Resolved props
            "prop",
            getComponentNameFromType(Component)
          );
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, !0);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren, hasId;
        prepareToReadContext(workInProgress2, renderLanes2), markComponentRenderStarted(workInProgress2);
        {
          if (ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2), hasId = checkDidRenderIdHook(), workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2), hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          setIsRendering(!1);
        }
        return markComponentRenderStopped(), current2 !== null && !didReceiveUpdate ? (bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2)) : (getIsHydrating() && hasId && pushMaterializedTreeId(workInProgress2), workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child);
      }
      function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          switch (shouldError(workInProgress2)) {
            case !1: {
              var _instance = workInProgress2.stateNode, ctor = workInProgress2.type, tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context), state = tempInstance.state;
              _instance.updater.enqueueSetState(_instance, state, null);
              break;
            }
            case !0: {
              workInProgress2.flags |= DidCapture, workInProgress2.flags |= ShouldCapture;
              var error$1 = new Error("Simulated error coming from DevTools"), lane = pickArbitraryLane(renderLanes2);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
              enqueueCapturedUpdate(workInProgress2, update);
              break;
            }
          }
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            innerPropTypes && checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(Component)
            );
          }
        }
        var hasContext;
        isContextProvider(Component) ? (hasContext = !0, pushContextProvider(workInProgress2)) : hasContext = !1, prepareToReadContext(workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode, shouldUpdate;
        instance === null ? (resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2), constructClassInstance(workInProgress2, Component, nextProps), mountClassInstance(workInProgress2, Component, nextProps, renderLanes2), shouldUpdate = !0) : current2 === null ? shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2) : shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
        var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
        {
          var inst = workInProgress2.stateNode;
          shouldUpdate && inst.props !== nextProps && (didWarnAboutReassigningProps || error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component"), didWarnAboutReassigningProps = !0);
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
        markRef(current2, workInProgress2);
        var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError)
          return hasContext && invalidateContextProvider(workInProgress2, Component, !1), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode;
        ReactCurrentOwner$1.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError != "function")
          nextChildren = null, stopProfilerTimerIfRunning();
        else {
          markComponentRenderStarted(workInProgress2);
          {
            if (setIsRendering(!0), nextChildren = instance.render(), workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(!0);
              try {
                instance.render();
              } finally {
                setIsStrictModeForDevtools(!1);
              }
            }
            setIsRendering(!1);
          }
          markComponentRenderStopped();
        }
        return workInProgress2.flags |= PerformedWork, current2 !== null && didCaptureError ? forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) : reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.memoizedState = instance.state, hasContext && invalidateContextProvider(workInProgress2, Component, !0), workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root2 = workInProgress2.stateNode;
        root2.pendingContext ? pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context) : root2.context && pushTopLevelContextObject(workInProgress2, root2.context, !1), pushHostContainer(workInProgress2, root2.containerInfo);
      }
      function updateHostRoot(current2, workInProgress2, renderLanes2) {
        if (pushHostRootContext(workInProgress2), current2 === null)
          throw new Error("Should have a current fiber. This is a bug in React.");
        var nextProps = workInProgress2.pendingProps, prevState = workInProgress2.memoizedState, prevChildren = prevState.element;
        cloneUpdateQueue(current2, workInProgress2), processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
        var nextState = workInProgress2.memoizedState, root2 = workInProgress2.stateNode, nextChildren = nextState.element;
        if (prevState.isDehydrated) {
          var overrideState = {
            element: nextChildren,
            isDehydrated: !1,
            cache: nextState.cache,
            pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
            transitions: nextState.transitions
          }, updateQueue = workInProgress2.updateQueue;
          if (updateQueue.baseState = overrideState, workInProgress2.memoizedState = overrideState, workInProgress2.flags & ForceClientRender) {
            var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
          } else if (nextChildren !== prevChildren) {
            var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
          } else {
            enterHydrationState(workInProgress2);
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            for (var node = child; node; )
              node.flags = node.flags & ~Placement | Hydrating, node = node.sibling;
          }
        } else {
          if (resetHydrationState(), nextChildren === prevChildren)
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
        return resetHydrationState(), queueHydrationError(recoverableError), workInProgress2.flags |= ForceClientRender, reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateHostComponent(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2), current2 === null && tryToClaimNextHydratableInstance(workInProgress2);
        var type2 = workInProgress2.type, nextProps = workInProgress2.pendingProps, prevProps = current2 !== null ? current2.memoizedProps : null, nextChildren = nextProps.children, isDirectTextChild = shouldSetTextContent(type2, nextProps);
        return isDirectTextChild ? nextChildren = null : prevProps !== null && shouldSetTextContent(type2, prevProps) && (workInProgress2.flags |= ContentReset), markRef(current2, workInProgress2), reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      function updateHostText(current2, workInProgress2) {
        return current2 === null && tryToClaimNextHydratableInstance(workInProgress2), null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps, lazyComponent = elementType, payload = lazyComponent._payload, init = lazyComponent._init, Component = init(payload);
        workInProgress2.type = Component;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component), resolvedProps = resolveDefaultProps(Component, props), child;
        switch (resolvedTag) {
          case FunctionComponent:
            return validateFunctionComponentInDev(workInProgress2, Component), workInProgress2.type = Component = resolveFunctionForHotReloading(Component), child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2), child;
          case ClassComponent:
            return workInProgress2.type = Component = resolveClassForHotReloading(Component), child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2), child;
          case ForwardRef:
            return workInProgress2.type = Component = resolveForwardRefForHotReloading(Component), child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2), child;
          case MemoComponent: {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = Component.propTypes;
              outerPropTypes && checkPropTypes(
                outerPropTypes,
                resolvedProps,
                // Resolved for outer only
                "prop",
                getComponentNameFromType(Component)
              );
            }
            return child = updateMemoComponent(
              null,
              workInProgress2,
              Component,
              resolveDefaultProps(Component.type, resolvedProps),
              // The inner type can have defaults too
              renderLanes2
            ), child;
          }
        }
        var hint = "";
        throw Component !== null && typeof Component == "object" && Component.$$typeof === REACT_LAZY_TYPE && (hint = " Did you wrap a component in React.lazy() more than once?"), new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2), workInProgress2.tag = ClassComponent;
        var hasContext;
        return isContextProvider(Component) ? (hasContext = !0, pushContextProvider(workInProgress2)) : hasContext = !1, prepareToReadContext(workInProgress2, renderLanes2), constructClassInstance(workInProgress2, Component, nextProps), mountClassInstance(workInProgress2, Component, nextProps, renderLanes2), finishClassComponent(null, workInProgress2, Component, !0, hasContext, renderLanes2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps, context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, !1);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var value, hasId;
        markComponentRenderStarted(workInProgress2);
        {
          if (Component.prototype && typeof Component.prototype.render == "function") {
            var componentName = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutBadClass[componentName] || (error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = !0);
          }
          workInProgress2.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null), setIsRendering(!0), ReactCurrentOwner$1.current = workInProgress2, value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2), hasId = checkDidRenderIdHook(), setIsRendering(!1);
        }
        if (markComponentRenderStopped(), workInProgress2.flags |= PerformedWork, typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component) || "Unknown";
          didWarnAboutModulePatternComponent[_componentName] || (error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = !0);
        }
        if (
          // Run these checks in production only if the flag is off.
          // Eventually we'll delete this branch altogether.
          typeof value == "object" && value !== null && typeof value.render == "function" && value.$$typeof === void 0
        ) {
          {
            var _componentName2 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName2] || (error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2), didWarnAboutModulePatternComponent[_componentName2] = !0);
          }
          workInProgress2.tag = ClassComponent, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null;
          var hasContext = !1;
          return isContextProvider(Component) ? (hasContext = !0, pushContextProvider(workInProgress2)) : hasContext = !1, workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null, initializeUpdateQueue(workInProgress2), adoptClassInstance(workInProgress2, value), mountClassInstance(workInProgress2, Component, props, renderLanes2), finishClassComponent(null, workInProgress2, Component, !0, hasContext, renderLanes2);
        } else {
          if (workInProgress2.tag = FunctionComponent, workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2), hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(!1);
            }
          }
          return getIsHydrating() && hasId && pushMaterializedTreeId(workInProgress2), reconcileChildren(null, workInProgress2, value, renderLanes2), validateFunctionComponentInDev(workInProgress2, Component), workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component) {
        {
          if (Component && Component.childContextTypes && error2("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component"), workInProgress2.ref !== null) {
            var info = "", ownerName = getCurrentFiberOwnerNameInDevOrNull();
            ownerName && (info += `

Check the render method of \`` + ownerName + "`.");
            var warningKey = ownerName || "", debugSource = workInProgress2._debugSource;
            debugSource && (warningKey = debugSource.fileName + ":" + debugSource.lineNumber), didWarnAboutFunctionRefs[warningKey] || (didWarnAboutFunctionRefs[warningKey] = !0, error2("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info));
          }
          if (typeof Component.getDerivedStateFromProps == "function") {
            var _componentName3 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] || (error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3), didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = !0);
          }
          if (typeof Component.contextType == "object" && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] || (error2("%s: Function components do not support contextType.", _componentName4), didWarnAboutContextTypeOnFunctionComponent[_componentName4] = !0);
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return {
          baseLanes: renderLanes2,
          cachePool: getSuspendedCache(),
          transitions: null
        };
      }
      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
        var cachePool = null;
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
          cachePool,
          transitions: prevOffscreenState.transitions
        };
      }
      function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          var suspenseState = current2.memoizedState;
          if (suspenseState === null)
            return !1;
        }
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }
      function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
        return removeLanes(current2.childLanes, renderLanes2);
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        shouldSuspend(workInProgress2) && (workInProgress2.flags |= DidCapture);
        var suspenseContext = suspenseStackCursor.current, showFallback = !1, didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current2) ? (showFallback = !0, workInProgress2.flags &= ~DidCapture) : (current2 === null || current2.memoizedState !== null) && (suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext)), suspenseContext = setDefaultShallowSuspenseContext(suspenseContext), pushSuspenseContext(workInProgress2, suspenseContext), current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null) {
            var dehydrated = suspenseState.dehydrated;
            if (dehydrated !== null)
              return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
          }
          var nextPrimaryChildren = nextProps.children, nextFallbackChildren = nextProps.fallback;
          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2), primaryChildFragment = workInProgress2.child;
            return primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackFragment;
          } else
            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
        } else {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var _dehydrated = prevState.dehydrated;
            if (_dehydrated !== null)
              return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
          }
          if (showFallback) {
            var _nextFallbackChildren = nextProps.fallback, _nextPrimaryChildren = nextProps.children, fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2), _primaryChildFragment2 = workInProgress2.child, prevOffscreenState = current2.child.memoizedState;
            return _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2), _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackChildFragment;
          } else {
            var _nextPrimaryChildren2 = nextProps.children, _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
            return workInProgress2.memoizedState = null, _primaryChildFragment3;
          }
        }
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
        var mode = workInProgress2.mode, primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        }, primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        return primaryChildFragment.return = workInProgress2, workInProgress2.child = primaryChildFragment, primaryChildFragment;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode, progressedPrimaryFragment = workInProgress2.child, primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        }, primaryChildFragment, fallbackChildFragment;
        return (mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null ? (primaryChildFragment = progressedPrimaryFragment, primaryChildFragment.childLanes = NoLanes, primaryChildFragment.pendingProps = primaryChildProps, workInProgress2.mode & ProfileMode && (primaryChildFragment.actualDuration = 0, primaryChildFragment.actualStartTime = -1, primaryChildFragment.selfBaseDuration = 0, primaryChildFragment.treeBaseDuration = 0), fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null)) : (primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode), fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null)), primaryChildFragment.return = workInProgress2, fallbackChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, fallbackChildFragment;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
      }
      function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
        return createWorkInProgress(current2, offscreenProps);
      }
      function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
        var currentPrimaryChildFragment = current2.child, currentFallbackChildFragment = currentPrimaryChildFragment.sibling, primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });
        if ((workInProgress2.mode & ConcurrentMode) === NoMode && (primaryChildFragment.lanes = renderLanes2), primaryChildFragment.return = workInProgress2, primaryChildFragment.sibling = null, currentFallbackChildFragment !== null) {
          var deletions = workInProgress2.deletions;
          deletions === null ? (workInProgress2.deletions = [currentFallbackChildFragment], workInProgress2.flags |= ChildDeletion) : deletions.push(currentFallbackChildFragment);
        }
        return workInProgress2.child = primaryChildFragment, primaryChildFragment;
      }
      function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode, currentPrimaryChildFragment = current2.child, currentFallbackChildFragment = currentPrimaryChildFragment.sibling, primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        }, primaryChildFragment;
        if (
          // In legacy mode, we commit the primary tree as if it successfully
          // completed, even though it's in an inconsistent state.
          (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
          // already cloned. In legacy mode, the only case where this isn't true is
          // when DevTools forces us to display a fallback; we skip the first render
          // pass entirely and go straight to rendering the fallback. (In Concurrent
          // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
          // only codepath.)
          workInProgress2.child !== currentPrimaryChildFragment
        ) {
          var progressedPrimaryFragment = workInProgress2.child;
          primaryChildFragment = progressedPrimaryFragment, primaryChildFragment.childLanes = NoLanes, primaryChildFragment.pendingProps = primaryChildProps, workInProgress2.mode & ProfileMode && (primaryChildFragment.actualDuration = 0, primaryChildFragment.actualStartTime = -1, primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration, primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration), workInProgress2.deletions = null;
        } else
          primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps), primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        var fallbackChildFragment;
        return currentFallbackChildFragment !== null ? fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren) : (fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null), fallbackChildFragment.flags |= Placement), fallbackChildFragment.return = workInProgress2, primaryChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, fallbackChildFragment;
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
        recoverableError !== null && queueHydrationError(recoverableError), reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        var nextProps = workInProgress2.pendingProps, primaryChildren = nextProps.children, primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
        return primaryChildFragment.flags |= Placement, workInProgress2.memoizedState = null, primaryChildFragment;
      }
      function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var fiberMode = workInProgress2.mode, primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        }, primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode), fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
        return fallbackChildFragment.flags |= Placement, primaryChildFragment.return = workInProgress2, fallbackChildFragment.return = workInProgress2, primaryChildFragment.sibling = fallbackChildFragment, workInProgress2.child = primaryChildFragment, (workInProgress2.mode & ConcurrentMode) !== NoMode && reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2), fallbackChildFragment;
      }
      function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
        return (workInProgress2.mode & ConcurrentMode) === NoMode ? (error2("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components."), workInProgress2.lanes = SyncLane) : isSuspenseInstanceFallback(suspenseInstance) ? workInProgress2.lanes = DefaultHydrationLane : workInProgress2.lanes = OffscreenLane, null;
      }
      function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
        if (didSuspend)
          if (workInProgress2.flags & ForceClientRender) {
            workInProgress2.flags &= ~ForceClientRender;
            var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
          } else {
            if (workInProgress2.memoizedState !== null)
              return workInProgress2.child = current2.child, workInProgress2.flags |= DidCapture, null;
            var nextPrimaryChildren = nextProps.children, nextFallbackChildren = nextProps.fallback, fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2), _primaryChildFragment4 = workInProgress2.child;
            return _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2), workInProgress2.memoizedState = SUSPENDED_MARKER, fallbackChildFragment;
          }
        else {
          if (warnIfHydrating(), (workInProgress2.mode & ConcurrentMode) === NoMode)
            return retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2,
              // TODO: When we delete legacy mode, we should make this error argument
              // required — every concurrent mode path that causes hydration to
              // de-opt to client rendering should have an error message.
              null
            );
          if (isSuspenseInstanceFallback(suspenseInstance)) {
            var digest, message2, stack;
            {
              var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
              digest = _getSuspenseInstanceF.digest, message2 = _getSuspenseInstanceF.message, stack = _getSuspenseInstanceF.stack;
            }
            var error3;
            message2 ? error3 = new Error(message2) : error3 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
            var capturedValue = createCapturedValue(error3, digest, stack);
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
          }
          var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
          if (didReceiveUpdate || hasContextChanged2) {
            var root2 = getWorkInProgressRoot();
            if (root2 !== null) {
              var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
              if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                suspenseState.retryLane = attemptHydrationAtLane;
                var eventTime = NoTimestamp;
                enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane), scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
              }
            }
            renderDidSuspendDelayIfPossible();
            var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
          } else if (isSuspenseInstancePending(suspenseInstance)) {
            workInProgress2.flags |= DidCapture, workInProgress2.child = current2.child;
            var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
            return registerSuspenseInstanceRetry(suspenseInstance, retry), null;
          } else {
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
            var primaryChildren = nextProps.children, primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            return primaryChildFragment.flags |= Hydrating, primaryChildFragment;
          }
        }
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
        var alternate = fiber.alternate;
        alternate !== null && (alternate.lanes = mergeLanes(alternate.lanes, renderLanes2)), scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
        for (var node = firstChild; node !== null; ) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            state !== null && scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          } else if (node.tag === SuspenseListComponent)
            scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          else if (node.child !== null) {
            node.child.return = node, node = node.child;
            continue;
          }
          if (node === workInProgress2)
            return;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === workInProgress2)
              return;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        for (var row = firstChild, lastContentRow = null; row !== null; ) {
          var currentRow = row.alternate;
          currentRow !== null && findFirstSuspended(currentRow) === null && (lastContentRow = row), row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder])
          if (didWarnAboutRevealOrder[revealOrder] = !0, typeof revealOrder == "string")
            switch (revealOrder.toLowerCase()) {
              case "together":
              case "forwards":
              case "backwards": {
                error2('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              case "forward":
              case "backward": {
                error2('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              default:
                error2('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                break;
            }
          else
            error2('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
      function validateTailOptions(tailMode, revealOrder) {
        tailMode !== void 0 && !didWarnAboutTailOptions[tailMode] && (tailMode !== "collapsed" && tailMode !== "hidden" ? (didWarnAboutTailOptions[tailMode] = !0, error2('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode)) : revealOrder !== "forwards" && revealOrder !== "backwards" && (didWarnAboutTailOptions[tailMode] = !0, error2('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode)));
      }
      function validateSuspenseListNestedChild(childSlot, index3) {
        {
          var isAnArray = isArray(childSlot), isIterable = !isAnArray && typeof getIteratorFn(childSlot) == "function";
          if (isAnArray || isIterable) {
            var type2 = isAnArray ? "array" : "iterable";
            return error2("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type2, index3, type2), !1;
          }
        }
        return !0;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== !1)
          if (isArray(children)) {
            for (var i13 = 0; i13 < children.length; i13++)
              if (!validateSuspenseListNestedChild(children[i13], i13))
                return;
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn == "function") {
              var childrenIterator = iteratorFn.call(children);
              if (childrenIterator)
                for (var step2 = childrenIterator.next(), _i = 0; !step2.done; step2 = childrenIterator.next()) {
                  if (!validateSuspenseListNestedChild(step2.value, _i))
                    return;
                  _i++;
                }
            } else
              error2('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
          }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        renderState === null ? workInProgress2.memoizedState = {
          isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail,
          tailMode
        } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail, newChildren = nextProps.children;
        validateRevealOrder(revealOrder), validateTailOptions(tailMode, revealOrder), validateSuspenseListChildren(newChildren, revealOrder), reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        var suspenseContext = suspenseStackCursor.current, shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback)
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback), workInProgress2.flags |= DidCapture;
        else {
          var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
          didSuspendBefore && propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2), suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        if (pushSuspenseContext(workInProgress2, suspenseContext), (workInProgress2.mode & ConcurrentMode) === NoMode)
          workInProgress2.memoizedState = null;
        else
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child), tail;
              lastContentRow === null ? (tail = workInProgress2.child, workInProgress2.child = null) : (tail = lastContentRow.sibling, lastContentRow.sibling = null), initSuspenseListRenderState(
                workInProgress2,
                !1,
                // isBackwards
                tail,
                lastContentRow,
                tailMode
              );
              break;
            }
            case "backwards": {
              var _tail = null, row = workInProgress2.child;
              for (workInProgress2.child = null; row !== null; ) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail, _tail = row, row = nextRow;
              }
              initSuspenseListRenderState(
                workInProgress2,
                !0,
                // isBackwards
                _tail,
                null,
                // last
                tailMode
              );
              break;
            }
            case "together": {
              initSuspenseListRenderState(
                workInProgress2,
                !1,
                // isBackwards
                null,
                // tail
                null,
                // last
                void 0
              );
              break;
            }
            default:
              workInProgress2.memoizedState = null;
          }
        return workInProgress2.child;
      }
      function updatePortalComponent(current2, workInProgress2, renderLanes2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        return current2 === null ? workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2), workInProgress2.child;
      }
      var hasWarnedAboutUsingNoValuePropOnContextProvider = !1;
      function updateContextProvider(current2, workInProgress2, renderLanes2) {
        var providerType = workInProgress2.type, context = providerType._context, newProps = workInProgress2.pendingProps, oldProps = workInProgress2.memoizedProps, newValue = newProps.value;
        {
          "value" in newProps || hasWarnedAboutUsingNoValuePropOnContextProvider || (hasWarnedAboutUsingNoValuePropOnContextProvider = !0, error2("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"));
          var providerPropTypes = workInProgress2.type.propTypes;
          providerPropTypes && checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
        }
        if (pushProvider(workInProgress2, context, newValue), oldProps !== null) {
          var oldValue = oldProps.value;
          if (objectIs(oldValue, newValue)) {
            if (oldProps.children === newProps.children && !hasContextChanged())
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          } else
            propagateContextChange(workInProgress2, context, renderLanes2);
        }
        var newChildren = newProps.children;
        return reconcileChildren(current2, workInProgress2, newChildren, renderLanes2), workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = !1;
      function updateContextConsumer(current2, workInProgress2, renderLanes2) {
        var context = workInProgress2.type;
        context._context === void 0 ? context !== context.Consumer && (hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = !0, error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : context = context._context;
        var newProps = workInProgress2.pendingProps, render2 = newProps.children;
        typeof render2 != "function" && error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."), prepareToReadContext(workInProgress2, renderLanes2);
        var newValue = readContext(context);
        markComponentRenderStarted(workInProgress2);
        var newChildren;
        return ReactCurrentOwner$1.current = workInProgress2, setIsRendering(!0), newChildren = render2(newValue), setIsRendering(!1), markComponentRenderStopped(), workInProgress2.flags |= PerformedWork, reconcileChildren(current2, workInProgress2, newChildren, renderLanes2), workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = !0;
      }
      function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
        (workInProgress2.mode & ConcurrentMode) === NoMode && current2 !== null && (current2.alternate = null, workInProgress2.alternate = null, workInProgress2.flags |= Placement);
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        return current2 !== null && (workInProgress2.dependencies = current2.dependencies), stopProfilerTimerIfRunning(), markSkippedUpdateLanes(workInProgress2.lanes), includesSomeLane(renderLanes2, workInProgress2.childLanes) ? (cloneChildFibers(current2, workInProgress2), workInProgress2.child) : null;
      }
      function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null)
            throw new Error("Cannot swap the root fiber.");
          if (current2.alternate = null, oldWorkInProgress.alternate = null, newWorkInProgress.index = oldWorkInProgress.index, newWorkInProgress.sibling = oldWorkInProgress.sibling, newWorkInProgress.return = oldWorkInProgress.return, newWorkInProgress.ref = oldWorkInProgress.ref, oldWorkInProgress === returnFiber.child)
            returnFiber.child = newWorkInProgress;
          else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null)
              throw new Error("Expected parent to have a child.");
            for (; prevSibling.sibling !== oldWorkInProgress; )
              if (prevSibling = prevSibling.sibling, prevSibling === null)
                throw new Error("Expected to find the previous sibling.");
            prevSibling.sibling = newWorkInProgress;
          }
          var deletions = returnFiber.deletions;
          return deletions === null ? (returnFiber.deletions = [current2], returnFiber.flags |= ChildDeletion) : deletions.push(current2), newWorkInProgress.flags |= Placement, newWorkInProgress;
        }
      }
      function checkScheduledUpdateOrContext(current2, renderLanes2) {
        var updateLanes = current2.lanes;
        return !!includesSomeLane(updateLanes, renderLanes2);
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress2);
            var root2 = workInProgress2.stateNode;
            resetHydrationState();
            break;
          case HostComponent:
            pushHostContext(workInProgress2);
            break;
          case ClassComponent: {
            var Component = workInProgress2.type;
            isContextProvider(Component) && pushContextProvider(workInProgress2);
            break;
          }
          case HostPortal:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            break;
          case ContextProvider: {
            var newValue = workInProgress2.memoizedProps.value, context = workInProgress2.type._context;
            pushProvider(workInProgress2, context, newValue);
            break;
          }
          case Profiler:
            {
              var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              hasChildWork && (workInProgress2.flags |= Update);
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
              }
            }
            break;
          case SuspenseComponent: {
            var state = workInProgress2.memoizedState;
            if (state !== null) {
              if (state.dehydrated !== null)
                return pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current)), workInProgress2.flags |= DidCapture, null;
              var primaryChildFragment = workInProgress2.child, primaryChildLanes = primaryChildFragment.childLanes;
              if (includesSomeLane(renderLanes2, primaryChildLanes))
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              return child !== null ? child.sibling : null;
            } else
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            break;
          }
          case SuspenseListComponent: {
            var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags, _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (didSuspendBefore) {
              if (_hasChildWork)
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              workInProgress2.flags |= DidCapture;
            }
            var renderState = workInProgress2.memoizedState;
            if (renderState !== null && (renderState.rendering = null, renderState.tail = null, renderState.lastEffect = null), pushSuspenseContext(workInProgress2, suspenseStackCursor.current), _hasChildWork)
              break;
            return null;
          }
          case OffscreenComponent:
          case LegacyHiddenComponent:
            return workInProgress2.lanes = NoLanes, updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        if (workInProgress2._debugNeedsRemount && current2 !== null)
          return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
        if (current2 !== null) {
          var oldProps = current2.memoizedProps, newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
          workInProgress2.type !== current2.type)
            didReceiveUpdate = !0;
          else {
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
            // may not be work scheduled on `current`, so we check for this flag.
            (workInProgress2.flags & DidCapture) === NoFlags)
              return didReceiveUpdate = !1, attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
            (current2.flags & ForceUpdateForLegacySuspense) !== NoFlags ? didReceiveUpdate = !0 : didReceiveUpdate = !1;
          }
        } else if (didReceiveUpdate = !1, getIsHydrating() && isForkedChild(workInProgress2)) {
          var slotIndex = workInProgress2.index, numberOfForks = getForksAtLevel();
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
        switch (workInProgress2.lanes = NoLanes, workInProgress2.tag) {
          case IndeterminateComponent:
            return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
          }
          case FunctionComponent: {
            var Component = workInProgress2.type, unresolvedProps = workInProgress2.pendingProps, resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
            return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
          }
          case ClassComponent: {
            var _Component = workInProgress2.type, _unresolvedProps = workInProgress2.pendingProps, _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
            return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
          }
          case HostRoot:
            return updateHostRoot(current2, workInProgress2, renderLanes2);
          case HostComponent:
            return updateHostComponent(current2, workInProgress2, renderLanes2);
          case HostText:
            return updateHostText(current2, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case HostPortal:
            return updatePortalComponent(current2, workInProgress2, renderLanes2);
          case ForwardRef: {
            var type2 = workInProgress2.type, _unresolvedProps2 = workInProgress2.pendingProps, _resolvedProps2 = workInProgress2.elementType === type2 ? _unresolvedProps2 : resolveDefaultProps(type2, _unresolvedProps2);
            return updateForwardRef(current2, workInProgress2, type2, _resolvedProps2, renderLanes2);
          }
          case Fragment9:
            return updateFragment(current2, workInProgress2, renderLanes2);
          case Mode:
            return updateMode(current2, workInProgress2, renderLanes2);
          case Profiler:
            return updateProfiler(current2, workInProgress2, renderLanes2);
          case ContextProvider:
            return updateContextProvider(current2, workInProgress2, renderLanes2);
          case ContextConsumer:
            return updateContextConsumer(current2, workInProgress2, renderLanes2);
          case MemoComponent: {
            var _type2 = workInProgress2.type, _unresolvedProps3 = workInProgress2.pendingProps, _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = _type2.propTypes;
              outerPropTypes && checkPropTypes(
                outerPropTypes,
                _resolvedProps3,
                // Resolved for outer only
                "prop",
                getComponentNameFromType(_type2)
              );
            }
            return _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3), updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
          }
          case SimpleMemoComponent:
            return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
          case IncompleteClassComponent: {
            var _Component2 = workInProgress2.type, _unresolvedProps4 = workInProgress2.pendingProps, _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
            return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
          }
          case SuspenseListComponent:
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          case ScopeComponent:
            break;
          case OffscreenComponent:
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= Update;
      }
      function markRef$1(workInProgress2) {
        workInProgress2.flags |= Ref, workInProgress2.flags |= RefStatic;
      }
      var appendAllChildren, updateHostContainer, updateHostComponent$1, updateHostText$1;
      appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
        for (var node = workInProgress2.child; node !== null; ) {
          if (node.tag === HostComponent || node.tag === HostText)
            appendInitialChild(parent, node.stateNode);
          else if (node.tag !== HostPortal) {
            if (node.child !== null) {
              node.child.return = node, node = node.child;
              continue;
            }
          }
          if (node === workInProgress2)
            return;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === workInProgress2)
              return;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
      }, updateHostContainer = function(current2, workInProgress2) {
      }, updateHostComponent$1 = function(current2, workInProgress2, type2, newProps, rootContainerInstance) {
        var oldProps = current2.memoizedProps;
        if (oldProps !== newProps) {
          var instance = workInProgress2.stateNode, currentHostContext = getHostContext(), updatePayload = prepareUpdate(instance, type2, oldProps, newProps, rootContainerInstance, currentHostContext);
          workInProgress2.updateQueue = updatePayload, updatePayload && markUpdate(workInProgress2);
        }
      }, updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
        oldText !== newText && markUpdate(workInProgress2);
      };
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (!getIsHydrating())
          switch (renderState.tailMode) {
            case "hidden": {
              for (var tailNode = renderState.tail, lastTailNode = null; tailNode !== null; )
                tailNode.alternate !== null && (lastTailNode = tailNode), tailNode = tailNode.sibling;
              lastTailNode === null ? renderState.tail = null : lastTailNode.sibling = null;
              break;
            }
            case "collapsed": {
              for (var _tailNode = renderState.tail, _lastTailNode = null; _tailNode !== null; )
                _tailNode.alternate !== null && (_lastTailNode = _tailNode), _tailNode = _tailNode.sibling;
              _lastTailNode === null ? !hasRenderedATailFallback && renderState.tail !== null ? renderState.tail.sibling = null : renderState.tail = null : _lastTailNode.sibling = null;
              break;
            }
          }
      }
      function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child, newChildLanes = NoLanes, subtreeFlags = NoFlags;
        if (didBailout) {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            for (var _treeBaseDuration = completedWork.selfBaseDuration, _child2 = completedWork.child; _child2 !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)), subtreeFlags |= _child2.subtreeFlags & StaticMask, subtreeFlags |= _child2.flags & StaticMask, _treeBaseDuration += _child2.treeBaseDuration, _child2 = _child2.sibling;
            completedWork.treeBaseDuration = _treeBaseDuration;
          } else
            for (var _child3 = completedWork.child; _child3 !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)), subtreeFlags |= _child3.subtreeFlags & StaticMask, subtreeFlags |= _child3.flags & StaticMask, _child3.return = completedWork, _child3 = _child3.sibling;
          completedWork.subtreeFlags |= subtreeFlags;
        } else {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            for (var actualDuration = completedWork.actualDuration, treeBaseDuration = completedWork.selfBaseDuration, child = completedWork.child; child !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes)), subtreeFlags |= child.subtreeFlags, subtreeFlags |= child.flags, actualDuration += child.actualDuration, treeBaseDuration += child.treeBaseDuration, child = child.sibling;
            completedWork.actualDuration = actualDuration, completedWork.treeBaseDuration = treeBaseDuration;
          } else
            for (var _child = completedWork.child; _child !== null; )
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes)), subtreeFlags |= _child.subtreeFlags, subtreeFlags |= _child.flags, _child.return = completedWork, _child = _child.sibling;
          completedWork.subtreeFlags |= subtreeFlags;
        }
        return completedWork.childLanes = newChildLanes, didBailout;
      }
      function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags)
          return warnIfUnhydratedTailNodes(workInProgress2), resetHydrationState(), workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture, !1;
        var wasHydrated = popHydrationState(workInProgress2);
        if (nextState !== null && nextState.dehydrated !== null)
          if (current2 === null) {
            if (!wasHydrated)
              throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
            if (prepareToHydrateHostSuspenseInstance(workInProgress2), bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode) {
              var isTimedOutSuspense = nextState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment !== null && (workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration);
              }
            }
            return !1;
          } else {
            if (resetHydrationState(), (workInProgress2.flags & DidCapture) === NoFlags && (workInProgress2.memoizedState = null), workInProgress2.flags |= Update, bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode) {
              var _isTimedOutSuspense = nextState !== null;
              if (_isTimedOutSuspense) {
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment !== null && (workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration);
              }
            }
            return !1;
          }
        else
          return upgradeHydrationErrorsToRecoverable(), !0;
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        switch (popTreeContext(workInProgress2), workInProgress2.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment9:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            return bubbleProperties(workInProgress2), null;
          case ClassComponent: {
            var Component = workInProgress2.type;
            return isContextProvider(Component) && popContext(workInProgress2), bubbleProperties(workInProgress2), null;
          }
          case HostRoot: {
            var fiberRoot = workInProgress2.stateNode;
            if (popHostContainer(workInProgress2), popTopLevelContextObject(workInProgress2), resetWorkInProgressVersions(), fiberRoot.pendingContext && (fiberRoot.context = fiberRoot.pendingContext, fiberRoot.pendingContext = null), current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated)
                markUpdate(workInProgress2);
              else if (current2 !== null) {
                var prevState = current2.memoizedState;
                // Check if this is a client root
                (!prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                (workInProgress2.flags & ForceClientRender) !== NoFlags) && (workInProgress2.flags |= Snapshot, upgradeHydrationErrorsToRecoverable());
              }
            }
            return updateHostContainer(current2, workInProgress2), bubbleProperties(workInProgress2), null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var rootContainerInstance = getRootHostContainer(), type2 = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null)
              updateHostComponent$1(current2, workInProgress2, type2, newProps, rootContainerInstance), current2.ref !== workInProgress2.ref && markRef$1(workInProgress2);
            else {
              if (!newProps) {
                if (workInProgress2.stateNode === null)
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                return bubbleProperties(workInProgress2), null;
              }
              var currentHostContext = getHostContext(), _wasHydrated = popHydrationState(workInProgress2);
              if (_wasHydrated)
                prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext) && markUpdate(workInProgress2);
              else {
                var instance = createInstance(type2, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                appendAllChildren(instance, workInProgress2, !1, !1), workInProgress2.stateNode = instance, finalizeInitialChildren(instance, type2, newProps, rootContainerInstance) && markUpdate(workInProgress2);
              }
              workInProgress2.ref !== null && markRef$1(workInProgress2);
            }
            return bubbleProperties(workInProgress2), null;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText$1(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText != "string" && workInProgress2.stateNode === null)
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              var _rootContainerInstance = getRootHostContainer(), _currentHostContext = getHostContext(), _wasHydrated2 = popHydrationState(workInProgress2);
              _wasHydrated2 ? prepareToHydrateHostTextInstance(workInProgress2) && markUpdate(workInProgress2) : workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
            }
            return bubbleProperties(workInProgress2), null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
              var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
              if (!fallthroughToNormalSuspensePath)
                return workInProgress2.flags & ShouldCapture ? workInProgress2 : null;
            }
            if ((workInProgress2.flags & DidCapture) !== NoFlags)
              return workInProgress2.lanes = renderLanes2, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2;
            var nextDidTimeout = nextState !== null, prevDidTimeout = current2 !== null && current2.memoizedState !== null;
            if (nextDidTimeout !== prevDidTimeout && nextDidTimeout) {
              var _offscreenFiber2 = workInProgress2.child;
              if (_offscreenFiber2.flags |= Visibility, (workInProgress2.mode & ConcurrentMode) !== NoMode) {
                var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== !0 || !enableSuspenseAvoidThisFallback);
                hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext) ? renderDidSuspend() : renderDidSuspendDelayIfPossible();
              }
            }
            var wakeables = workInProgress2.updateQueue;
            if (wakeables !== null && (workInProgress2.flags |= Update), bubbleProperties(workInProgress2), (workInProgress2.mode & ProfileMode) !== NoMode && nextDidTimeout) {
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment !== null && (workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration);
            }
            return null;
          }
          case HostPortal:
            return popHostContainer(workInProgress2), updateHostContainer(current2, workInProgress2), current2 === null && preparePortalMount(workInProgress2.stateNode.containerInfo), bubbleProperties(workInProgress2), null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            return popProvider(context, workInProgress2), bubbleProperties(workInProgress2), null;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            return isContextProvider(_Component) && popContext(workInProgress2), bubbleProperties(workInProgress2), null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null)
              return bubbleProperties(workInProgress2), null;
            var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags, renderedTail = renderState.rendering;
            if (renderedTail === null)
              if (didSuspendAlready)
                cutOffTailIfNeeded(renderState, !1);
              else {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended)
                  for (var row = workInProgress2.child; row !== null; ) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = !0, workInProgress2.flags |= DidCapture, cutOffTailIfNeeded(renderState, !1);
                      var newThenables = suspended.updateQueue;
                      return newThenables !== null && (workInProgress2.updateQueue = newThenables, workInProgress2.flags |= Update), workInProgress2.subtreeFlags = NoFlags, resetChildFibers(workInProgress2, renderLanes2), pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)), workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                renderState.tail !== null && now() > getRenderTargetTime() && (workInProgress2.flags |= DidCapture, didSuspendAlready = !0, cutOffTailIfNeeded(renderState, !1), workInProgress2.lanes = SomeRetryLane);
              }
            else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.flags |= DidCapture, didSuspendAlready = !0;
                  var _newThenables = _suspended.updateQueue;
                  if (_newThenables !== null && (workInProgress2.updateQueue = _newThenables, workInProgress2.flags |= Update), cutOffTailIfNeeded(renderState, !0), renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating())
                    return bubbleProperties(workInProgress2), null;
                } else
                  // The time it took to render last row is greater than the remaining
                  // time we have to render. So rendering one more row would likely
                  // exceed it.
                  now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane && (workInProgress2.flags |= DidCapture, didSuspendAlready = !0, cutOffTailIfNeeded(renderState, !1), workInProgress2.lanes = SomeRetryLane);
              }
              if (renderState.isBackwards)
                renderedTail.sibling = workInProgress2.child, workInProgress2.child = renderedTail;
              else {
                var previousSibling = renderState.last;
                previousSibling !== null ? previousSibling.sibling = renderedTail : workInProgress2.child = renderedTail, renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              var next = renderState.tail;
              renderState.rendering = next, renderState.tail = next.sibling, renderState.renderingStartTime = now(), next.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              return didSuspendAlready ? suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback) : suspenseContext = setDefaultShallowSuspenseContext(suspenseContext), pushSuspenseContext(workInProgress2, suspenseContext), next;
            }
            return bubbleProperties(workInProgress2), null;
          }
          case ScopeComponent:
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popRenderLanes(workInProgress2);
            var _nextState = workInProgress2.memoizedState, nextIsHidden = _nextState !== null;
            if (current2 !== null) {
              var _prevState = current2.memoizedState, prevIsHidden = _prevState !== null;
              prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
              !enableLegacyHidden && (workInProgress2.flags |= Visibility);
            }
            return !nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode ? bubbleProperties(workInProgress2) : includesSomeLane(subtreeRenderLanes, OffscreenLane) && (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & (Placement | Update) && (workInProgress2.flags |= Visibility)), null;
          }
          case CacheComponent:
            return null;
          case TracingMarkerComponent:
            return null;
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function unwindWork(current2, workInProgress2, renderLanes2) {
        switch (popTreeContext(workInProgress2), workInProgress2.tag) {
          case ClassComponent: {
            var Component = workInProgress2.type;
            isContextProvider(Component) && popContext(workInProgress2);
            var flags2 = workInProgress2.flags;
            return flags2 & ShouldCapture ? (workInProgress2.flags = flags2 & ~ShouldCapture | DidCapture, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
          }
          case HostRoot: {
            var root2 = workInProgress2.stateNode;
            popHostContainer(workInProgress2), popTopLevelContextObject(workInProgress2), resetWorkInProgressVersions();
            var _flags = workInProgress2.flags;
            return (_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags ? (workInProgress2.flags = _flags & ~ShouldCapture | DidCapture, workInProgress2) : null;
          }
          case HostComponent:
            return popHostContext(workInProgress2), null;
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              if (workInProgress2.alternate === null)
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              resetHydrationState();
            }
            var _flags2 = workInProgress2.flags;
            return _flags2 & ShouldCapture ? (workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture, (workInProgress2.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress2), workInProgress2) : null;
          }
          case SuspenseListComponent:
            return popSuspenseContext(workInProgress2), null;
          case HostPortal:
            return popHostContainer(workInProgress2), null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            return popProvider(context, workInProgress2), null;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            return popRenderLanes(workInProgress2), null;
          case CacheComponent:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
        switch (popTreeContext(interruptedWork), interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            childContextTypes != null && popContext(interruptedWork);
            break;
          }
          case HostRoot: {
            var root2 = interruptedWork.stateNode;
            popHostContainer(interruptedWork), popTopLevelContextObject(interruptedWork), resetWorkInProgressVersions();
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            var context = interruptedWork.type._context;
            popProvider(context, interruptedWork);
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
      var offscreenSubtreeIsHidden = !1, offscreenSubtreeWasHidden = !1, PossiblyWeakSet = typeof WeakSet == "function" ? WeakSet : Set, nextEffect = null, inProgressLanes = null, inProgressRoot = null;
      function reportUncaughtErrorInDEV(error3) {
        invokeGuardedCallback(null, function() {
          throw error3;
        }), clearCaughtError();
      }
      var callComponentWillUnmountWithTimer = function(current2, instance) {
        if (instance.props = current2.memoizedProps, instance.state = current2.memoizedState, current2.mode & ProfileMode)
          try {
            startLayoutEffectTimer(), instance.componentWillUnmount();
          } finally {
            recordLayoutEffectDuration(current2);
          }
        else
          instance.componentWillUnmount();
      };
      function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
        try {
          commitHookEffectListMount(Layout, current2);
        } catch (error3) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error3);
        }
      }
      function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
        try {
          callComponentWillUnmountWithTimer(current2, instance);
        } catch (error3) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error3);
        }
      }
      function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
        try {
          instance.componentDidMount();
        } catch (error3) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error3);
        }
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          commitAttachRef(current2);
        } catch (error3) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error3);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref;
        if (ref !== null)
          if (typeof ref == "function") {
            var retVal;
            try {
              if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode)
                try {
                  startLayoutEffectTimer(), retVal = ref(null);
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              else
                retVal = ref(null);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
            typeof retVal == "function" && error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
          } else
            ref.current = null;
      }
      function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
        try {
          destroy();
        } catch (error3) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error3);
        }
      }
      var focusedInstanceHandle = null, shouldFireAfterActiveInstanceBlur = !1;
      function commitBeforeMutationEffects(root2, firstChild) {
        focusedInstanceHandle = prepareForCommit(root2.containerInfo), nextEffect = firstChild, commitBeforeMutationEffects_begin();
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        return shouldFireAfterActiveInstanceBlur = !1, focusedInstanceHandle = null, shouldFire;
      }
      function commitBeforeMutationEffects_begin() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, child = fiber.child;
          (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null ? (child.return = fiber, nextEffect = child) : commitBeforeMutationEffects_complete();
        }
      }
      function commitBeforeMutationEffects_complete() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            commitBeforeMutationEffectsOnFiber(fiber);
          } catch (error3) {
            captureCommitPhaseError(fiber, fiber.return, error3);
          }
          resetCurrentFiber();
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current2 = finishedWork.alternate, flags2 = finishedWork.flags;
        if ((flags2 & Snapshot) !== NoFlags) {
          switch (setCurrentFiber(finishedWork), finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
              break;
            case ClassComponent: {
              if (current2 !== null) {
                var prevProps = current2.memoizedProps, prevState = current2.memoizedState, instance = finishedWork.stateNode;
                finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error2("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error2("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"));
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  snapshot === void 0 && !didWarnSet.has(finishedWork.type) && (didWarnSet.add(finishedWork.type), error2("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork)));
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
              break;
            }
            case HostRoot: {
              {
                var root2 = finishedWork.stateNode;
                clearContainer(root2.containerInfo);
              }
              break;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              break;
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
          resetCurrentFiber();
        }
      }
      function commitHookEffectListUnmount(flags2, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next, effect = firstEffect;
          do {
            if ((effect.tag & flags2) === flags2) {
              var destroy = effect.destroy;
              effect.destroy = void 0, destroy !== void 0 && ((flags2 & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectUnmountStarted(finishedWork) : (flags2 & Layout) !== NoFlags$1 && markComponentLayoutEffectUnmountStarted(finishedWork), (flags2 & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(!0), safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy), (flags2 & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(!1), (flags2 & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectUnmountStopped() : (flags2 & Layout) !== NoFlags$1 && markComponentLayoutEffectUnmountStopped());
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitHookEffectListMount(flags2, finishedWork) {
        var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next, effect = firstEffect;
          do {
            if ((effect.tag & flags2) === flags2) {
              (flags2 & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectMountStarted(finishedWork) : (flags2 & Layout) !== NoFlags$1 && markComponentLayoutEffectMountStarted(finishedWork);
              var create = effect.create;
              (flags2 & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(!0), effect.destroy = create(), (flags2 & Insertion) !== NoFlags$1 && setIsRunningInsertionEffect(!1), (flags2 & Passive$1) !== NoFlags$1 ? markComponentPassiveEffectMountStopped() : (flags2 & Layout) !== NoFlags$1 && markComponentLayoutEffectMountStopped();
              {
                var destroy = effect.destroy;
                if (destroy !== void 0 && typeof destroy != "function") {
                  var hookName = void 0;
                  (effect.tag & Layout) !== NoFlags ? hookName = "useLayoutEffect" : (effect.tag & Insertion) !== NoFlags ? hookName = "useInsertionEffect" : hookName = "useEffect";
                  var addendum = void 0;
                  destroy === null ? addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing)." : typeof destroy.then == "function" ? addendum = `

It looks like you wrote ` + hookName + `(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

` + hookName + `(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching` : addendum = " You returned: " + destroy, error2("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        if ((finishedWork.flags & Update) !== NoFlags)
          switch (finishedWork.tag) {
            case Profiler: {
              var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration, _finishedWork$memoize = finishedWork.memoizedProps, id3 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit, commitTime2 = getCommitTime(), phase = finishedWork.alternate === null ? "mount" : "update";
              isCurrentUpdateNested() && (phase = "nested-update"), typeof onPostCommit == "function" && onPostCommit(id3, phase, passiveEffectDuration, commitTime2);
              var parentFiber = finishedWork.return;
              outer:
                for (; parentFiber !== null; ) {
                  switch (parentFiber.tag) {
                    case HostRoot:
                      var root2 = parentFiber.stateNode;
                      root2.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                    case Profiler:
                      var parentStateNode = parentFiber.stateNode;
                      parentStateNode.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                  }
                  parentFiber = parentFiber.return;
                }
              break;
            }
          }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags)
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden)
                if (finishedWork.mode & ProfileMode)
                  try {
                    startLayoutEffectTimer(), commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                else
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
              break;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update && !offscreenSubtreeWasHidden)
                if (current2 === null)
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error2("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error2("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance")), finishedWork.mode & ProfileMode)
                    try {
                      startLayoutEffectTimer(), instance.componentDidMount();
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  else
                    instance.componentDidMount();
                else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps), prevState = current2.memoizedState;
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error2("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error2("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance")), finishedWork.mode & ProfileMode)
                    try {
                      startLayoutEffectTimer(), instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  else
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                }
              var updateQueue = finishedWork.updateQueue;
              updateQueue !== null && (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps && (instance.props !== finishedWork.memoizedProps && error2("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && error2("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance")), commitUpdateQueue(finishedWork, updateQueue, instance));
              break;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null)
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              break;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type2 = finishedWork.type, props = finishedWork.memoizedProps;
                commitMount(_instance2, type2, props);
              }
              break;
            }
            case HostText:
              break;
            case HostPortal:
              break;
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender, effectDuration = finishedWork.stateNode.effectDuration, commitTime2 = getCommitTime(), phase = current2 === null ? "mount" : "update";
                isCurrentUpdateNested() && (phase = "nested-update"), typeof onRender == "function" && onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                {
                  typeof onCommit == "function" && onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2), enqueuePendingPassiveProfilerEffect(finishedWork);
                  var parentFiber = finishedWork.return;
                  outer:
                    for (; parentFiber !== null; ) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                }
              }
              break;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent:
              break;
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        offscreenSubtreeWasHidden || finishedWork.flags & Ref && commitAttachRef(finishedWork);
      }
      function reappearLayoutEffectsOnFiber(node) {
        switch (node.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (node.mode & ProfileMode)
              try {
                startLayoutEffectTimer(), safelyCallCommitHookLayoutEffectListMount(node, node.return);
              } finally {
                recordLayoutEffectDuration(node);
              }
            else
              safelyCallCommitHookLayoutEffectListMount(node, node.return);
            break;
          }
          case ClassComponent: {
            var instance = node.stateNode;
            typeof instance.componentDidMount == "function" && safelyCallComponentDidMount(node, node.return, instance), safelyAttachRef(node, node.return);
            break;
          }
          case HostComponent: {
            safelyAttachRef(node, node.return);
            break;
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        for (var hostSubtreeRoot = null, node = finishedWork; ; ) {
          if (node.tag === HostComponent) {
            if (hostSubtreeRoot === null) {
              hostSubtreeRoot = node;
              try {
                var instance = node.stateNode;
                isHidden ? hideInstance(instance) : unhideInstance(node.stateNode, node.memoizedProps);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
            }
          } else if (node.tag === HostText) {
            if (hostSubtreeRoot === null)
              try {
                var _instance3 = node.stateNode;
                isHidden ? hideTextInstance(_instance3) : unhideTextInstance(_instance3, node.memoizedProps);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
          } else if (!((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)) {
            if (node.child !== null) {
              node.child.return = node, node = node.child;
              continue;
            }
          }
          if (node === finishedWork)
            return;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === finishedWork)
              return;
            hostSubtreeRoot === node && (hostSubtreeRoot = null), node = node.return;
          }
          hostSubtreeRoot === node && (hostSubtreeRoot = null), node.sibling.return = node.return, node = node.sibling;
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode, instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = instance;
              break;
            default:
              instanceToUse = instance;
          }
          if (typeof ref == "function") {
            var retVal;
            if (finishedWork.mode & ProfileMode)
              try {
                startLayoutEffectTimer(), retVal = ref(instanceToUse);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            else
              retVal = ref(instanceToUse);
            typeof retVal == "function" && error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
          } else
            ref.hasOwnProperty("current") || error2("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork)), ref.current = instanceToUse;
        }
      }
      function detachFiberMutation(fiber) {
        var alternate = fiber.alternate;
        alternate !== null && (alternate.return = null), fiber.return = null;
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        alternate !== null && (fiber.alternate = null, detachFiberAfterEffects(alternate));
        {
          if (fiber.child = null, fiber.deletions = null, fiber.sibling = null, fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            hostInstance !== null && detachDeletedInstance(hostInstance);
          }
          fiber.stateNode = null, fiber._debugOwner = null, fiber.return = null, fiber.dependencies = null, fiber.memoizedProps = null, fiber.memoizedState = null, fiber.pendingProps = null, fiber.stateNode = null, fiber.updateQueue = null;
        }
      }
      function getHostParentFiber(fiber) {
        for (var parent = fiber.return; parent !== null; ) {
          if (isHostParent(parent))
            return parent;
          parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node = fiber;
        siblings:
          for (; ; ) {
            for (; node.sibling === null; ) {
              if (node.return === null || isHostParent(node.return))
                return null;
              node = node.return;
            }
            for (node.sibling.return = node.return, node = node.sibling; node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment; ) {
              if (node.flags & Placement || node.child === null || node.tag === HostPortal)
                continue siblings;
              node.child.return = node, node = node.child;
            }
            if (!(node.flags & Placement))
              return node.stateNode;
          }
      }
      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        switch (parentFiber.tag) {
          case HostComponent: {
            var parent = parentFiber.stateNode;
            parentFiber.flags & ContentReset && (resetTextContent(parent), parentFiber.flags &= ~ContentReset);
            var before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent);
            break;
          }
          case HostRoot:
          case HostPortal: {
            var _parent = parentFiber.stateNode.containerInfo, _before = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag, isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          before ? insertInContainerBefore(parent, stateNode, before) : appendChildToContainer(parent, stateNode);
        } else if (tag !== HostPortal) {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            for (var sibling = child.sibling; sibling !== null; )
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent), sibling = sibling.sibling;
          }
        }
      }
      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag, isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          before ? insertBefore(parent, stateNode, before) : appendChild(parent, stateNode);
        } else if (tag !== HostPortal) {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            for (var sibling = child.sibling; sibling !== null; )
              insertOrAppendPlacementNode(sibling, before, parent), sibling = sibling.sibling;
          }
        }
      }
      var hostParent = null, hostParentIsContainer = !1;
      function commitDeletionEffects(root2, returnFiber, deletedFiber) {
        {
          var parent = returnFiber;
          findParent:
            for (; parent !== null; ) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode, hostParentIsContainer = !1;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo, hostParentIsContainer = !0;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo, hostParentIsContainer = !0;
                  break findParent;
                }
              }
              parent = parent.return;
            }
          if (hostParent === null)
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber), hostParent = null, hostParentIsContainer = !1;
        }
        detachFiberMutation(deletedFiber);
      }
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        for (var child = parent.child; child !== null; )
          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child), child = child.sibling;
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        switch (onCommitUnmount(deletedFiber), deletedFiber.tag) {
          case HostComponent:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
          case HostText: {
            {
              var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), hostParent = prevHostParent, hostParentIsContainer = prevHostParentIsContainer, hostParent !== null && (hostParentIsContainer ? removeChildFromContainer(hostParent, deletedFiber.stateNode) : removeChild(hostParent, deletedFiber.stateNode));
            }
            return;
          }
          case DehydratedFragment: {
            hostParent !== null && (hostParentIsContainer ? clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode) : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
            return;
          }
          case HostPortal: {
            {
              var _prevHostParent = hostParent, _prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo, hostParentIsContainer = !0, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), hostParent = _prevHostParent, hostParentIsContainer = _prevHostParentIsContainer;
            }
            return;
          }
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              var updateQueue = deletedFiber.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next, effect = firstEffect;
                  do {
                    var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                    destroy !== void 0 && ((tag & Insertion) !== NoFlags$1 ? safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy) : (tag & Layout) !== NoFlags$1 && (markComponentLayoutEffectUnmountStarted(deletedFiber), deletedFiber.mode & ProfileMode ? (startLayoutEffectTimer(), safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy), recordLayoutEffectDuration(deletedFiber)) : safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy), markComponentLayoutEffectUnmountStopped())), effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ClassComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var instance = deletedFiber.stateNode;
              typeof instance.componentWillUnmount == "function" && safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ScopeComponent: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case OffscreenComponent: {
            if (
              // TODO: Remove this dead flag
              deletedFiber.mode & ConcurrentMode
            ) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            break;
          }
          default: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
        }
      }
      function commitSuspenseCallback(finishedWork) {
        var newState = finishedWork.memoizedState;
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current2 = finishedWork.alternate;
          if (current2 !== null) {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              suspenseInstance !== null && commitHydratedSuspenseInstance(suspenseInstance);
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          retryCache === null && (retryCache = finishedWork.stateNode = new PossiblyWeakSet()), wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              if (retryCache.add(wakeable), isDevToolsPresent)
                if (inProgressLanes !== null && inProgressRoot !== null)
                  restorePendingUpdaters(inProgressRoot, inProgressLanes);
                else
                  throw Error("Expected finished root and lanes to be set. This is a bug in React.");
              wakeable.then(retry, retry);
            }
          });
        }
      }
      function commitMutationEffects(root2, finishedWork, committedLanes) {
        inProgressLanes = committedLanes, inProgressRoot = root2, setCurrentFiber(finishedWork), commitMutationEffectsOnFiber(finishedWork, root2), setCurrentFiber(finishedWork), inProgressLanes = null, inProgressRoot = null;
      }
      function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
        var deletions = parentFiber.deletions;
        if (deletions !== null)
          for (var i13 = 0; i13 < deletions.length; i13++) {
            var childToDelete = deletions[i13];
            try {
              commitDeletionEffects(root2, parentFiber, childToDelete);
            } catch (error3) {
              captureCommitPhaseError(childToDelete, parentFiber, error3);
            }
          }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask)
          for (var child = parentFiber.child; child !== null; )
            setCurrentFiber(child), commitMutationEffectsOnFiber(child, root2), child = child.sibling;
        setCurrentFiber(prevDebugFiber);
      }
      function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
        var current2 = finishedWork.alternate, flags2 = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags2 & Update) {
              try {
                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return), commitHookEffectListMount(Insertion | HasEffect, finishedWork);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer(), commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error3) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                }
                recordLayoutEffectDuration(finishedWork);
              } else
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error3) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                }
            }
            return;
          }
          case ClassComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags2 & Ref && current2 !== null && safelyDetachRef(current2, current2.return);
            return;
          }
          case HostComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags2 & Ref && current2 !== null && safelyDetachRef(current2, current2.return);
            {
              if (finishedWork.flags & ContentReset) {
                var instance = finishedWork.stateNode;
                try {
                  resetTextContent(instance);
                } catch (error3) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                }
              }
              if (flags2 & Update) {
                var _instance4 = finishedWork.stateNode;
                if (_instance4 != null) {
                  var newProps = finishedWork.memoizedProps, oldProps = current2 !== null ? current2.memoizedProps : newProps, type2 = finishedWork.type, updatePayload = finishedWork.updateQueue;
                  if (finishedWork.updateQueue = null, updatePayload !== null)
                    try {
                      commitUpdate(_instance4, updatePayload, type2, oldProps, newProps, finishedWork);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                }
              }
            }
            return;
          }
          case HostText: {
            if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags2 & Update) {
              if (finishedWork.stateNode === null)
                throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              var textInstance = finishedWork.stateNode, newText = finishedWork.memoizedProps, oldText = current2 !== null ? current2.memoizedProps : newText;
              try {
                commitTextUpdate(textInstance, oldText, newText);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
            }
            return;
          }
          case HostRoot: {
            if (recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags2 & Update && current2 !== null) {
              var prevRootState = current2.memoizedState;
              if (prevRootState.isDehydrated)
                try {
                  commitHydratedContainer(root2.containerInfo);
                } catch (error3) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                }
            }
            return;
          }
          case HostPortal: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
            return;
          }
          case SuspenseComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
            var offscreenFiber = finishedWork.child;
            if (offscreenFiber.flags & Visibility) {
              var offscreenInstance = offscreenFiber.stateNode, newState = offscreenFiber.memoizedState, isHidden = newState !== null;
              if (offscreenInstance.isHidden = isHidden, isHidden) {
                var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                wasHidden || markCommitTimeOfFallback();
              }
            }
            if (flags2 & Update) {
              try {
                commitSuspenseCallback(finishedWork);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case OffscreenComponent: {
            var _wasHidden = current2 !== null && current2.memoizedState !== null;
            if (
              // TODO: Remove this dead flag
              finishedWork.mode & ConcurrentMode
            ) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden, recursivelyTraverseMutationEffects(root2, finishedWork), offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else
              recursivelyTraverseMutationEffects(root2, finishedWork);
            if (commitReconciliationEffects(finishedWork), flags2 & Visibility) {
              var _offscreenInstance = finishedWork.stateNode, _newState = finishedWork.memoizedState, _isHidden = _newState !== null, offscreenBoundary = finishedWork;
              if (_offscreenInstance.isHidden = _isHidden, _isHidden && !_wasHidden && (offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                nextEffect = offscreenBoundary;
                for (var offscreenChild = offscreenBoundary.child; offscreenChild !== null; )
                  nextEffect = offscreenChild, disappearLayoutEffects_begin(offscreenChild), offscreenChild = offscreenChild.sibling;
              }
              hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
            }
            return;
          }
          case SuspenseListComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork), flags2 & Update && attachSuspenseRetryListeners(finishedWork);
            return;
          }
          case ScopeComponent:
            return;
          default: {
            recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
            return;
          }
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags2 = finishedWork.flags;
        if (flags2 & Placement) {
          try {
            commitPlacement(finishedWork);
          } catch (error3) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error3);
          }
          finishedWork.flags &= ~Placement;
        }
        flags2 & Hydrating && (finishedWork.flags &= ~Hydrating);
      }
      function commitLayoutEffects(finishedWork, root2, committedLanes) {
        inProgressLanes = committedLanes, inProgressRoot = root2, nextEffect = finishedWork, commitLayoutEffects_begin(finishedWork, root2, committedLanes), inProgressLanes = null, inProgressRoot = null;
      }
      function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
        for (var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent && isModernRoot) {
            var isHidden = fiber.memoizedState !== null, newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
            if (newOffscreenSubtreeIsHidden) {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            } else {
              var current2 = fiber.alternate, wasHidden = current2 !== null && current2.memoizedState !== null, newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden, offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden, offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden && (nextEffect = fiber, reappearLayoutEffects_begin(fiber));
              for (var child = firstChild; child !== null; )
                nextEffect = child, commitLayoutEffects_begin(
                  child,
                  // New root; bubble back up to here and stop.
                  root2,
                  committedLanes
                ), child = child.sibling;
              nextEffect = fiber, offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden, offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden, commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            }
          }
          (fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
        }
      }
      function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          if ((fiber.flags & LayoutMask) !== NoFlags) {
            var current2 = fiber.alternate;
            setCurrentFiber(fiber);
            try {
              commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function disappearLayoutEffects_begin(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (fiber.mode & ProfileMode)
                try {
                  startLayoutEffectTimer(), commitHookEffectListUnmount(Layout, fiber, fiber.return);
                } finally {
                  recordLayoutEffectDuration(fiber);
                }
              else
                commitHookEffectListUnmount(Layout, fiber, fiber.return);
              break;
            }
            case ClassComponent: {
              safelyDetachRef(fiber, fiber.return);
              var instance = fiber.stateNode;
              typeof instance.componentWillUnmount == "function" && safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              break;
            }
            case HostComponent: {
              safelyDetachRef(fiber, fiber.return);
              break;
            }
            case OffscreenComponent: {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                disappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
              break;
            }
          }
          firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : disappearLayoutEffects_complete(subtreeRoot);
        }
      }
      function disappearLayoutEffects_complete(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function reappearLayoutEffects_begin(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent) {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              reappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
          }
          firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : reappearLayoutEffects_complete(subtreeRoot);
        }
      }
      function reappearLayoutEffects_complete(subtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            reappearLayoutEffectsOnFiber(fiber);
          } catch (error3) {
            captureCommitPhaseError(fiber, fiber.return, error3);
          }
          if (resetCurrentFiber(), fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork, commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
      }
      function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, firstChild = fiber.child;
          (fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null ? (firstChild.return = fiber, nextEffect = firstChild) : commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
        }
      }
      function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            try {
              commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              } finally {
                recordPassiveEffectDuration(finishedWork);
              }
            } else
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            break;
          }
        }
      }
      function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild, commitPassiveUnmountEffects_begin();
      }
      function commitPassiveUnmountEffects_begin() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, child = fiber.child;
          if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
            var deletions = fiber.deletions;
            if (deletions !== null) {
              for (var i13 = 0; i13 < deletions.length; i13++) {
                var fiberToDelete = deletions[i13];
                nextEffect = fiberToDelete, commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
              }
              {
                var previousFiber = fiber.alternate;
                if (previousFiber !== null) {
                  var detachedChild = previousFiber.child;
                  if (detachedChild !== null) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null, detachedChild = detachedSibling;
                    } while (detachedChild !== null);
                  }
                }
              }
              nextEffect = fiber;
            }
          }
          (fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null ? (child.return = fiber, nextEffect = child) : commitPassiveUnmountEffects_complete();
        }
      }
      function commitPassiveUnmountEffects_complete() {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          (fiber.flags & Passive) !== NoFlags && (setCurrentFiber(fiber), commitPassiveUnmountOnFiber(fiber), resetCurrentFiber());
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return, nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            finishedWork.mode & ProfileMode ? (startPassiveEffectTimer(), commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return), recordPassiveEffectDuration(finishedWork)) : commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            break;
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect;
          setCurrentFiber(fiber), commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor), resetCurrentFiber();
          var child = fiber.child;
          child !== null ? (child.return = fiber, nextEffect = child) : commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        for (; nextEffect !== null; ) {
          var fiber = nextEffect, sibling = fiber.sibling, returnFiber = fiber.return;
          if (detachFiberAfterEffects(fiber), fiber === deletedSubtreeRoot) {
            nextEffect = null;
            return;
          }
          if (sibling !== null) {
            sibling.return = returnFiber, nextEffect = sibling;
            return;
          }
          nextEffect = returnFiber;
        }
      }
      function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
        switch (current2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            current2.mode & ProfileMode ? (startPassiveEffectTimer(), commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor), recordPassiveEffectDuration(current2)) : commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            break;
          }
        }
      }
      function invokeLayoutEffectMountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Layout | HasEffect, fiber);
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
            break;
          }
          case ClassComponent: {
            var instance = fiber.stateNode;
            try {
              instance.componentDidMount();
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
            break;
          }
        }
      }
      function invokePassiveEffectMountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Passive$1 | HasEffect, fiber);
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
            break;
          }
        }
      }
      function invokeLayoutEffectUnmountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
            break;
          }
          case ClassComponent: {
            var instance = fiber.stateNode;
            typeof instance.componentWillUnmount == "function" && safelyCallComponentWillUnmount(fiber, fiber.return, instance);
            break;
          }
        }
      }
      function invokePassiveEffectUnmountInDEV(fiber) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
            try {
              commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
        }
      }
      var COMPONENT_TYPE = 0, HAS_PSEUDO_CLASS_TYPE = 1, ROLE_TYPE = 2, TEST_NAME_TYPE = 3, TEXT_TYPE = 4;
      if (typeof Symbol == "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor("selector.component"), HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class"), ROLE_TYPE = symbolFor("selector.role"), TEST_NAME_TYPE = symbolFor("selector.test_id"), TEXT_TYPE = symbolFor("selector.text");
      }
      var commitHooks = [];
      function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
          return commitHook();
        });
      }
      var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
      function isLegacyActEnvironment(fiber) {
        {
          var isReactActEnvironmentGlobal = (
            // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
            typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
          ), jestIsDefined = typeof jest < "u";
          return jestIsDefined && isReactActEnvironmentGlobal !== !1;
        }
      }
      function isConcurrentActEnvironment() {
        {
          var isReactActEnvironmentGlobal = (
            // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
            typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
          );
          return !isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null && error2("The current testing environment is not configured to support act(...)"), isReactActEnvironmentGlobal;
        }
      }
      var ceil = Math.ceil, ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue, NoContext = (
        /*             */
        0
      ), BatchedContext = (
        /*               */
        1
      ), RenderContext = (
        /*                */
        2
      ), CommitContext = (
        /*                */
        4
      ), RootInProgress = 0, RootFatalErrored = 1, RootErrored = 2, RootSuspended = 3, RootSuspendedWithDelay = 4, RootCompleted = 5, RootDidNotComplete = 6, executionContext = NoContext, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = NoLanes, subtreeRenderLanes = NoLanes, subtreeRenderLanesCursor = createCursor(NoLanes), workInProgressRootExitStatus = RootInProgress, workInProgressRootFatalError = null, workInProgressRootIncludedLanes = NoLanes, workInProgressRootSkippedLanes = NoLanes, workInProgressRootInterleavedUpdatedLanes = NoLanes, workInProgressRootPingedLanes = NoLanes, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, globalMostRecentFallbackTime = 0, FALLBACK_THROTTLE_MS = 500, workInProgressRootRenderTargetTime = 1 / 0, RENDER_TIMEOUT_MS = 500, workInProgressTransitions = null;
      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
      }
      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }
      var hasUncaughtError = !1, firstUncaughtError = null, legacyErrorBoundariesThatAlreadyFailed = null, rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = NoLanes, pendingPassiveProfilerEffects = [], pendingPassiveTransitions = null, NESTED_UPDATE_LIMIT = 50, nestedUpdateCount = 0, rootWithNestedUpdates = null, isFlushingPassiveEffects = !1, didScheduleUpdateDuringPassiveEffects = !1, NESTED_PASSIVE_UPDATE_LIMIT = 50, nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, currentEventTime = NoTimestamp, currentEventTransitionLane = NoLanes, isRunningInsertionEffect = !1;
      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }
      function requestEventTime() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext ? now() : (currentEventTime !== NoTimestamp || (currentEventTime = now()), currentEventTime);
      }
      function requestUpdateLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode)
          return SyncLane;
        if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes)
          return pickArbitraryLane(workInProgressRootRenderLanes);
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
          if (ReactCurrentBatchConfig$3.transition !== null) {
            var transition = ReactCurrentBatchConfig$3.transition;
            transition._updatedFibers || (transition._updatedFibers = /* @__PURE__ */ new Set()), transition._updatedFibers.add(fiber);
          }
          return currentEventTransitionLane === NoLane && (currentEventTransitionLane = claimNextTransitionLane()), currentEventTransitionLane;
        }
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane)
          return updateLane;
        var eventLane = getCurrentEventPriority();
        return eventLane;
      }
      function requestRetryLane(fiber) {
        var mode = fiber.mode;
        return (mode & ConcurrentMode) === NoMode ? SyncLane : claimNextRetryLane();
      }
      function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
        checkForNestedUpdates(), isRunningInsertionEffect && error2("useInsertionEffect must not schedule updates."), isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = !0), markRootUpdated(root2, lane, eventTime), (executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot ? warnAboutRenderPhaseUpdatesInDEV(fiber) : (isDevToolsPresent && addFiberToLanesMap(root2, fiber, lane), warnIfUpdatesNotWrappedWithActDEV(fiber), root2 === workInProgressRoot && ((executionContext & RenderContext) === NoContext && (workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane)), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspended$1(root2, workInProgressRootRenderLanes)), ensureRootIsScheduled(root2, eventTime), lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !ReactCurrentActQueue$1.isBatchingLegacy && (resetRenderTimer(), flushSyncCallbacksOnlyInLegacyMode()));
      }
      function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
        var current2 = root2.current;
        current2.lanes = lane, markRootUpdated(root2, lane, eventTime), ensureRootIsScheduled(root2, eventTime);
      }
      function isUnsafeClassRenderPhaseUpdate(fiber) {
        return (
          // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
          // decided not to enable it.
          (executionContext & RenderContext) !== NoContext
        );
      }
      function ensureRootIsScheduled(root2, currentTime) {
        var existingCallbackNode = root2.callbackNode;
        markStarvedLanesAsExpired(root2, currentTime);
        var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
          existingCallbackNode !== null && cancelCallback$1(existingCallbackNode), root2.callbackNode = null, root2.callbackPriority = NoLane;
          return;
        }
        var newCallbackPriority = getHighestPriorityLane(nextLanes), existingCallbackPriority = root2.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
        // Scheduler task, rather than an `act` task, cancel it and re-scheduled
        // on the `act` queue.
        !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
          existingCallbackNode == null && existingCallbackPriority !== SyncLane && error2("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        existingCallbackNode != null && cancelCallback$1(existingCallbackNode);
        var newCallbackNode;
        if (newCallbackPriority === SyncLane)
          root2.tag === LegacyRoot ? (ReactCurrentActQueue$1.isBatchingLegacy !== null && (ReactCurrentActQueue$1.didScheduleLegacyUpdate = !0), scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2))) : scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2)), ReactCurrentActQueue$1.current !== null ? ReactCurrentActQueue$1.current.push(flushSyncCallbacks) : scheduleMicrotask(function() {
            (executionContext & (RenderContext | CommitContext)) === NoContext && flushSyncCallbacks();
          }), newCallbackNode = null;
        else {
          var schedulerPriorityLevel;
          switch (lanesToEventPriority(nextLanes)) {
            case DiscreteEventPriority:
              schedulerPriorityLevel = ImmediatePriority;
              break;
            case ContinuousEventPriority:
              schedulerPriorityLevel = UserBlockingPriority;
              break;
            case DefaultEventPriority:
              schedulerPriorityLevel = NormalPriority;
              break;
            case IdleEventPriority:
              schedulerPriorityLevel = IdlePriority;
              break;
            default:
              schedulerPriorityLevel = NormalPriority;
              break;
          }
          newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
        }
        root2.callbackPriority = newCallbackPriority, root2.callbackNode = newCallbackNode;
      }
      function performConcurrentWorkOnRoot(root2, didTimeout) {
        if (resetNestedUpdateFlag(), currentEventTime = NoTimestamp, currentEventTransitionLane = NoLanes, (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Should not already be working.");
        var originalCallbackNode = root2.callbackNode, didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects && root2.callbackNode !== originalCallbackNode)
          return null;
        var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes)
          return null;
        var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout, exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
        if (exitStatus !== RootInProgress) {
          if (exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            errorRetryLanes !== NoLanes && (lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, errorRetryLanes));
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now()), fatalError;
          }
          if (exitStatus === RootDidNotComplete)
            markRootSuspended$1(root2, lanes);
          else {
            var renderWasConcurrent = !includesBlockingLane(root2, lanes), finishedWork = root2.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
              if (exitStatus = renderRootSync(root2, lanes), exitStatus === RootErrored) {
                var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                _errorRetryLanes !== NoLanes && (lanes = _errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes));
              }
              if (exitStatus === RootFatalErrored) {
                var _fatalError = workInProgressRootFatalError;
                throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now()), _fatalError;
              }
            }
            root2.finishedWork = finishedWork, root2.finishedLanes = lanes, finishConcurrentRender(root2, exitStatus, lanes);
          }
        }
        return ensureRootIsScheduled(root2, now()), root2.callbackNode === originalCallbackNode ? performConcurrentWorkOnRoot.bind(null, root2) : null;
      }
      function recoverFromConcurrentError(root2, errorRetryLanes) {
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root2)) {
          var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
          rootWorkInProgress.flags |= ForceClientRender, errorHydratingContainer(root2.containerInfo);
        }
        var exitStatus = renderRootSync(root2, errorRetryLanes);
        if (exitStatus !== RootErrored) {
          var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
          workInProgressRootRecoverableErrors = errorsFromFirstAttempt, errorsFromSecondAttempt !== null && queueRecoverableErrors(errorsFromSecondAttempt);
        }
        return exitStatus;
      }
      function queueRecoverableErrors(errors) {
        workInProgressRootRecoverableErrors === null ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
      }
      function finishConcurrentRender(root2, exitStatus, lanes) {
        switch (exitStatus) {
          case RootInProgress:
          case RootFatalErrored:
            throw new Error("Root did not complete. This is a bug in React.");
          case RootErrored: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspended: {
            if (markRootSuspended$1(root2, lanes), includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
            !shouldForceFlushFallbacksInDEV()) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root2, NoLanes);
                if (nextLanes !== NoLanes)
                  break;
                var suspendedLanes = root2.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  var eventTime = requestEventTime();
                  markRootPinged(root2, suspendedLanes);
                  break;
                }
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspendedWithDelay: {
            if (markRootSuspended$1(root2, lanes), includesOnlyTransitions(lanes))
              break;
            if (!shouldForceFlushFallbacksInDEV()) {
              var mostRecentEventTime = getMostRecentEventTime(root2, lanes), eventTimeMs = mostRecentEventTime, timeElapsedMs = now() - eventTimeMs, _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              if (_msUntilTimeout > 10) {
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootCompleted: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          default:
            throw new Error("Unknown root exit status.");
        }
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        for (var node = finishedWork; ; ) {
          if (node.flags & StoreConsistency) {
            var updateQueue = node.updateQueue;
            if (updateQueue !== null) {
              var checks = updateQueue.stores;
              if (checks !== null)
                for (var i13 = 0; i13 < checks.length; i13++) {
                  var check = checks[i13], getSnapshot = check.getSnapshot, renderedValue = check.value;
                  try {
                    if (!objectIs(getSnapshot(), renderedValue))
                      return !1;
                  } catch {
                    return !1;
                  }
                }
            }
          }
          var child = node.child;
          if (node.subtreeFlags & StoreConsistency && child !== null) {
            child.return = node, node = child;
            continue;
          }
          if (node === finishedWork)
            return !0;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === finishedWork)
              return !0;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
        return !0;
      }
      function markRootSuspended$1(root2, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes), suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes), markRootSuspended(root2, suspendedLanes);
      }
      function performSyncWorkOnRoot(root2) {
        if (syncNestedUpdateFlag(), (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Should not already be working.");
        flushPassiveEffects();
        var lanes = getNextLanes(root2, NoLanes);
        if (!includesSomeLane(lanes, SyncLane))
          return ensureRootIsScheduled(root2, now()), null;
        var exitStatus = renderRootSync(root2, lanes);
        if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
          errorRetryLanes !== NoLanes && (lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root2, errorRetryLanes));
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          throw prepareFreshStack(root2, NoLanes), markRootSuspended$1(root2, lanes), ensureRootIsScheduled(root2, now()), fatalError;
        }
        if (exitStatus === RootDidNotComplete)
          throw new Error("Root did not complete. This is a bug in React.");
        var finishedWork = root2.current.alternate;
        return root2.finishedWork = finishedWork, root2.finishedLanes = lanes, commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions), ensureRootIsScheduled(root2, now()), null;
      }
      function flushRoot(root2, lanes) {
        lanes !== NoLanes && (markRootEntangled(root2, mergeLanes(lanes, SyncLane)), ensureRootIsScheduled(root2, now()), (executionContext & (RenderContext | CommitContext)) === NoContext && (resetRenderTimer(), flushSyncCallbacks()));
      }
      function batchedUpdates$1(fn, a9) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn(a9);
        } finally {
          executionContext = prevExecutionContext, executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
          !ReactCurrentActQueue$1.isBatchingLegacy && (resetRenderTimer(), flushSyncCallbacksOnlyInLegacyMode());
        }
      }
      function discreteUpdates(fn, a9, b, c, d) {
        var previousPriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          return ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), fn(a9, b, c, d);
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition, executionContext === NoContext && resetRenderTimer();
        }
      }
      function flushSync2(fn) {
        rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext && flushPassiveEffects();
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition, previousPriority = getCurrentUpdatePriority();
        try {
          return ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), fn ? fn() : void 0;
        } finally {
          setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition, executionContext = prevExecutionContext, (executionContext & (RenderContext | CommitContext)) === NoContext && flushSyncCallbacks();
        }
      }
      function isAlreadyRendering() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
      }
      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber), subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes), workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
      }
      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current, pop(subtreeRenderLanesCursor, fiber);
      }
      function prepareFreshStack(root2, lanes) {
        root2.finishedWork = null, root2.finishedLanes = NoLanes;
        var timeoutHandle = root2.timeoutHandle;
        if (timeoutHandle !== noTimeout && (root2.timeoutHandle = noTimeout, cancelTimeout(timeoutHandle)), workInProgress !== null)
          for (var interruptedWork = workInProgress.return; interruptedWork !== null; ) {
            var current2 = interruptedWork.alternate;
            unwindInterruptedWork(current2, interruptedWork), interruptedWork = interruptedWork.return;
          }
        workInProgressRoot = root2;
        var rootWorkInProgress = createWorkInProgress(root2.current, null);
        return workInProgress = rootWorkInProgress, workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes, workInProgressRootExitStatus = RootInProgress, workInProgressRootFatalError = null, workInProgressRootSkippedLanes = NoLanes, workInProgressRootInterleavedUpdatedLanes = NoLanes, workInProgressRootPingedLanes = NoLanes, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, finishQueueingConcurrentUpdates(), ReactStrictModeWarnings.discardPendingWarnings(), rootWorkInProgress;
      }
      function handleError(root2, thrownValue) {
        do {
          var erroredWork = workInProgress;
          try {
            if (resetContextDependencies(), resetHooksAfterThrow(), resetCurrentFiber(), ReactCurrentOwner$2.current = null, erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored, workInProgressRootFatalError = thrownValue, workInProgress = null;
              return;
            }
            if (enableProfilerTimer && erroredWork.mode & ProfileMode && stopProfilerTimerIfRunningAndRecordDelta(erroredWork, !0), enableSchedulingProfiler)
              if (markComponentRenderStopped(), thrownValue !== null && typeof thrownValue == "object" && typeof thrownValue.then == "function") {
                var wakeable = thrownValue;
                markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
              } else
                markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
            throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes), completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue, workInProgress === erroredWork && erroredWork !== null ? (erroredWork = erroredWork.return, workInProgress = erroredWork) : erroredWork = workInProgress;
            continue;
          }
          return;
        } while (!0);
      }
      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        return ReactCurrentDispatcher$2.current = ContextOnlyDispatcher, prevDispatcher === null ? ContextOnlyDispatcher : prevDispatcher;
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }
      function renderDidSuspend() {
        workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootSuspended);
      }
      function renderDidSuspendDelayIfPossible() {
        (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) && (workInProgressRootExitStatus = RootSuspendedWithDelay), workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes)) && markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
      }
      function renderDidError(error3) {
        workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored), workInProgressRootConcurrentErrors === null ? workInProgressRootConcurrentErrors = [error3] : workInProgressRootConcurrentErrors.push(error3);
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootInProgress;
      }
      function renderRootSync(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.size > 0 && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear()), movePendingFibersToMemoized(root2, lanes);
          }
          workInProgressTransitions = getTransitionsForLanes(), prepareFreshStack(root2, lanes);
        }
        markRenderStarted(lanes);
        do
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        while (!0);
        if (resetContextDependencies(), executionContext = prevExecutionContext, popDispatcher(prevDispatcher), workInProgress !== null)
          throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        return markRenderStopped(), workInProgressRoot = null, workInProgressRootRenderLanes = NoLanes, workInProgressRootExitStatus;
      }
      function workLoopSync() {
        for (; workInProgress !== null; )
          performUnitOfWork(workInProgress);
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.size > 0 && (restorePendingUpdaters(root2, workInProgressRootRenderLanes), memoizedUpdaters.clear()), movePendingFibersToMemoized(root2, lanes);
          }
          workInProgressTransitions = getTransitionsForLanes(), resetRenderTimer(), prepareFreshStack(root2, lanes);
        }
        markRenderStarted(lanes);
        do
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        while (!0);
        return resetContextDependencies(), popDispatcher(prevDispatcher), executionContext = prevExecutionContext, workInProgress !== null ? (markRenderYielded(), RootInProgress) : (markRenderStopped(), workInProgressRoot = null, workInProgressRootRenderLanes = NoLanes, workInProgressRootExitStatus);
      }
      function workLoopConcurrent() {
        for (; workInProgress !== null && !shouldYield(); )
          performUnitOfWork(workInProgress);
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        (unitOfWork.mode & ProfileMode) !== NoMode ? (startProfilerTimer(unitOfWork), next = beginWork$1(current2, unitOfWork, subtreeRenderLanes), stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, !0)) : next = beginWork$1(current2, unitOfWork, subtreeRenderLanes), resetCurrentFiber(), unitOfWork.memoizedProps = unitOfWork.pendingProps, next === null ? completeUnitOfWork(unitOfWork) : workInProgress = next, ReactCurrentOwner$2.current = null;
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          var current2 = completedWork.alternate, returnFiber = completedWork.return;
          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next = void 0;
            if ((completedWork.mode & ProfileMode) === NoMode ? next = completeWork(current2, completedWork, subtreeRenderLanes) : (startProfilerTimer(completedWork), next = completeWork(current2, completedWork, subtreeRenderLanes), stopProfilerTimerIfRunningAndRecordDelta(completedWork, !1)), resetCurrentFiber(), next !== null) {
              workInProgress = next;
              return;
            }
          } else {
            var _next = unwindWork(current2, completedWork);
            if (_next !== null) {
              _next.flags &= HostEffectMask, workInProgress = _next;
              return;
            }
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, !1);
              for (var actualDuration = completedWork.actualDuration, child = completedWork.child; child !== null; )
                actualDuration += child.actualDuration, child = child.sibling;
              completedWork.actualDuration = actualDuration;
            }
            if (returnFiber !== null)
              returnFiber.flags |= Incomplete, returnFiber.subtreeFlags = NoFlags, returnFiber.deletions = null;
            else {
              workInProgressRootExitStatus = RootDidNotComplete, workInProgress = null;
              return;
            }
          }
          var siblingFiber = completedWork.sibling;
          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }
          completedWork = returnFiber, workInProgress = completedWork;
        } while (completedWork !== null);
        workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootCompleted);
      }
      function commitRoot(root2, recoverableErrors, transitions) {
        var previousUpdateLanePriority = getCurrentUpdatePriority(), prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(DiscreteEventPriority), commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally {
          ReactCurrentBatchConfig$3.transition = prevTransition, setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
      }
      function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
        do
          flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null);
        if (flushRenderPhaseStrictModeWarningsInDEV(), (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Should not already be working.");
        var finishedWork = root2.finishedWork, lanes = root2.finishedLanes;
        if (markCommitStarted(lanes), finishedWork === null)
          return markCommitStopped(), null;
        if (lanes === NoLanes && error2("root.finishedLanes should not be empty during a commit. This is a bug in React."), root2.finishedWork = null, root2.finishedLanes = NoLanes, finishedWork === root2.current)
          throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        root2.callbackNode = null, root2.callbackPriority = NoLane;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root2, remainingLanes), root2 === workInProgressRoot && (workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = NoLanes), ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) && (rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, pendingPassiveTransitions = transitions, scheduleCallback$1(NormalPriority, function() {
          return flushPassiveEffects(), null;
        })));
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags, rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          ReactCurrentBatchConfig$3.transition = null;
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(DiscreteEventPriority);
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext, ReactCurrentOwner$2.current = null;
          var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
          recordCommitTime(), commitMutationEffects(root2, finishedWork, lanes), resetAfterCommit(root2.containerInfo), root2.current = finishedWork, markLayoutEffectsStarted(lanes), commitLayoutEffects(finishedWork, root2, lanes), markLayoutEffectsStopped(), requestPaint(), executionContext = prevExecutionContext, setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition;
        } else
          root2.current = finishedWork, recordCommitTime();
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects ? (rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = root2, pendingPassiveEffectsLanes = lanes) : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null), remainingLanes = root2.pendingLanes, remainingLanes === NoLanes && (legacyErrorBoundariesThatAlreadyFailed = null), rootDidHavePassiveEffects || commitDoubleInvokeEffectsInDEV(root2.current, !1), onCommitRoot(finishedWork.stateNode, renderPriorityLevel), isDevToolsPresent && root2.memoizedUpdaters.clear(), onCommitRoot$1(), ensureRootIsScheduled(root2, now()), recoverableErrors !== null)
          for (var onRecoverableError = root2.onRecoverableError, i13 = 0; i13 < recoverableErrors.length; i13++) {
            var recoverableError = recoverableErrors[i13], componentStack = recoverableError.stack, digest = recoverableError.digest;
            onRecoverableError(recoverableError.value, {
              componentStack,
              digest
            });
          }
        if (hasUncaughtError) {
          hasUncaughtError = !1;
          var error$1 = firstUncaughtError;
          throw firstUncaughtError = null, error$1;
        }
        return includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot && flushPassiveEffects(), remainingLanes = root2.pendingLanes, includesSomeLane(remainingLanes, SyncLane) ? (markNestedUpdateScheduled(), root2 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root2)) : nestedUpdateCount = 0, flushSyncCallbacks(), markCommitStopped(), null;
      }
      function flushPassiveEffects() {
        if (rootWithPendingPassiveEffects !== null) {
          var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes), priority = lowerEventPriority(DefaultEventPriority, renderPriority), prevTransition = ReactCurrentBatchConfig$3.transition, previousPriority = getCurrentUpdatePriority();
          try {
            return ReactCurrentBatchConfig$3.transition = null, setCurrentUpdatePriority(priority), flushPassiveEffectsImpl();
          } finally {
            setCurrentUpdatePriority(previousPriority), ReactCurrentBatchConfig$3.transition = prevTransition;
          }
        }
        return !1;
      }
      function enqueuePendingPassiveProfilerEffect(fiber) {
        pendingPassiveProfilerEffects.push(fiber), rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, scheduleCallback$1(NormalPriority, function() {
          return flushPassiveEffects(), null;
        }));
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null)
          return !1;
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root2 = rootWithPendingPassiveEffects, lanes = pendingPassiveEffectsLanes;
        if (rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = NoLanes, (executionContext & (RenderContext | CommitContext)) !== NoContext)
          throw new Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = !0, didScheduleUpdateDuringPassiveEffects = !1, markPassiveEffectsStarted(lanes);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext, commitPassiveUnmountEffects(root2.current), commitPassiveMountEffects(root2, root2.current, lanes, transitions);
        {
          var profilerEffects = pendingPassiveProfilerEffects;
          pendingPassiveProfilerEffects = [];
          for (var i13 = 0; i13 < profilerEffects.length; i13++) {
            var _fiber = profilerEffects[i13];
            commitPassiveEffectDurations(root2, _fiber);
          }
        }
        markPassiveEffectsStopped(), commitDoubleInvokeEffectsInDEV(root2.current, !0), executionContext = prevExecutionContext, flushSyncCallbacks(), didScheduleUpdateDuringPassiveEffects ? root2 === rootWithPassiveNestedUpdates ? nestedPassiveUpdateCount++ : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = root2) : nestedPassiveUpdateCount = 0, isFlushingPassiveEffects = !1, didScheduleUpdateDuringPassiveEffects = !1, onPostCommitRoot(root2);
        {
          var stateNode = root2.current.stateNode;
          stateNode.effectDuration = 0, stateNode.passiveEffectDuration = 0;
        }
        return !0;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        legacyErrorBoundariesThatAlreadyFailed === null ? legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]) : legacyErrorBoundariesThatAlreadyFailed.add(instance);
      }
      function prepareToThrowUncaughtError(error3) {
        hasUncaughtError || (hasUncaughtError = !0, firstUncaughtError = error3);
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error3) {
        var errorInfo = createCapturedValueAtFiber(error3, sourceFiber), update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane), root2 = enqueueUpdate(rootFiber, update, SyncLane), eventTime = requestEventTime();
        root2 !== null && (markRootUpdated(root2, SyncLane, eventTime), ensureRootIsScheduled(root2, eventTime));
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        if (reportUncaughtErrorInDEV(error$1), setIsRunningInsertionEffect(!1), sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
          return;
        }
        var fiber = null;
        for (fiber = nearestMountedAncestor; fiber !== null; ) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type, instance = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError == "function" || typeof instance.componentDidCatch == "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber), update = createClassErrorUpdate(fiber, errorInfo, SyncLane), root2 = enqueueUpdate(fiber, update, SyncLane), eventTime = requestEventTime();
              root2 !== null && (markRootUpdated(root2, SyncLane, eventTime), ensureRootIsScheduled(root2, eventTime));
              return;
            }
          }
          fiber = fiber.return;
        }
        error2(`Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.

Error message:

%s`, error$1);
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        pingCache !== null && pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root2, pingedLanes), warnIfSuspenseResolutionNotWrappedWithActDEV(root2), workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes) && (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? prepareFreshStack(root2, NoLanes) : workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes)), ensureRootIsScheduled(root2, eventTime);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        retryLane === NoLane && (retryLane = requestRetryLane(boundaryFiber));
        var eventTime = requestEventTime(), root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        root2 !== null && (markRootUpdated(root2, retryLane, eventTime), ensureRootIsScheduled(root2, eventTime));
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState, retryLane = NoLane;
        suspenseState !== null && (retryLane = suspenseState.retryLane), retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane, retryCache;
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            suspenseState !== null && (retryLane = suspenseState.retryLane);
            break;
          case SuspenseListComponent:
            retryCache = boundaryFiber.stateNode;
            break;
          default:
            throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        retryCache !== null && retryCache.delete(wakeable), retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
          throw nestedUpdateCount = 0, rootWithNestedUpdates = null, new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT && (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, error2("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."));
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning(), ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
      }
      function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        setCurrentFiber(fiber), invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV), hasPassiveEffects && invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV), invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV), hasPassiveEffects && invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV), resetCurrentFiber();
      }
      function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        for (var current2 = firstChild, subtreeRoot = null; current2 !== null; ) {
          var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
          current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags ? current2 = current2.child : ((current2.flags & fiberFlags) !== NoFlags && invokeEffectFn(current2), current2.sibling !== null ? current2 = current2.sibling : current2 = subtreeRoot = current2.return);
        }
      }
      var didWarnStateUpdateForNotYetMountedComponent = null;
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext || !(fiber.mode & ConcurrentMode))
            return;
          var tag = fiber.tag;
          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent)
            return;
          var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName))
              return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else
            didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
          var previousFiber = current;
          try {
            setCurrentFiber(fiber), error2("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
          } finally {
            previousFiber ? setCurrentFiber(fiber) : resetCurrentFiber();
          }
        }
      }
      var beginWork$1;
      {
        var dummyFiber = null;
        beginWork$1 = function(current2, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork(current2, unitOfWork, lanes);
          } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError == "object" && typeof originalError.then == "function")
              throw originalError;
            if (resetContextDependencies(), resetHooksAfterThrow(), unwindInterruptedWork(current2, unitOfWork), assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy), unitOfWork.mode & ProfileMode && startProfilerTimer(unitOfWork), invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes), hasCaughtError()) {
              var replayError = clearCaughtError();
              typeof replayError == "object" && replayError !== null && replayError._suppressLogging && typeof originalError == "object" && originalError !== null && !originalError._suppressLogging && (originalError._suppressLogging = !0);
            }
            throw originalError;
          }
        };
      }
      var didWarnAboutUpdateInRender = !1, didWarnAboutUpdateInRenderForAnotherComponent;
      didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV())
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown", dedupeKey = renderingComponentName;
              if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                error2("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
              }
              break;
            }
            case ClassComponent: {
              didWarnAboutUpdateInRender || (error2("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), didWarnAboutUpdateInRender = !0);
              break;
            }
          }
      }
      function restorePendingUpdaters(root2, lanes) {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root2.memoizedUpdaters;
          memoizedUpdaters.forEach(function(schedulingFiber) {
            addFiberToLanesMap(root2, schedulingFiber, lanes);
          });
        }
      }
      var fakeActCallbackNode = {};
      function scheduleCallback$1(priorityLevel, callback) {
        {
          var actQueue = ReactCurrentActQueue$1.current;
          return actQueue !== null ? (actQueue.push(callback), fakeActCallbackNode) : scheduleCallback(priorityLevel, callback);
        }
      }
      function cancelCallback$1(callbackNode) {
        if (callbackNode !== fakeActCallbackNode)
          return cancelCallback(callbackNode);
      }
      function shouldForceFlushFallbacksInDEV() {
        return ReactCurrentActQueue$1.current !== null;
      }
      function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        {
          if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment())
              return;
          } else if (!isLegacyActEnvironment() || executionContext !== NoContext || fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent)
            return;
          if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber), error2(`An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`, getComponentNameFromFiber(fiber));
            } finally {
              previousFiber ? setCurrentFiber(fiber) : resetCurrentFiber();
            }
          }
        }
      }
      function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
        root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null && error2(`A suspended resource finished loading inside a test, but the event was not wrapped in act(...).

When testing, code that resolves suspended data should be wrapped into act(...):

act(() => {
  /* finish loading suspended data */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`);
      }
      function setIsRunningInsertionEffect(isRunning) {
        isRunningInsertionEffect = isRunning;
      }
      var resolveFamily = null, failedBoundaries = null, setRefreshHandler = function(handler) {
        resolveFamily = handler;
      };
      function resolveFunctionForHotReloading(type2) {
        {
          if (resolveFamily === null)
            return type2;
          var family = resolveFamily(type2);
          return family === void 0 ? type2 : family.current;
        }
      }
      function resolveClassForHotReloading(type2) {
        return resolveFunctionForHotReloading(type2);
      }
      function resolveForwardRefForHotReloading(type2) {
        {
          if (resolveFamily === null)
            return type2;
          var family = resolveFamily(type2);
          if (family === void 0) {
            if (type2 != null && typeof type2.render == "function") {
              var currentRender = resolveFunctionForHotReloading(type2.render);
              if (type2.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };
                return type2.displayName !== void 0 && (syntheticType.displayName = type2.displayName), syntheticType;
              }
            }
            return type2;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null)
            return !1;
          var prevType = fiber.elementType, nextType = element.type, needsCompareFamilies = !1, $$typeofNextType = typeof nextType == "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              typeof nextType == "function" && (needsCompareFamilies = !0);
              break;
            }
            case FunctionComponent: {
              (typeof nextType == "function" || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = !0);
              break;
            }
            case ForwardRef: {
              ($$typeofNextType === REACT_FORWARD_REF_TYPE || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = !0);
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              ($$typeofNextType === REACT_MEMO_TYPE || $$typeofNextType === REACT_LAZY_TYPE) && (needsCompareFamilies = !0);
              break;
            }
            default:
              return !1;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType))
              return !0;
          }
          return !1;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null || typeof WeakSet != "function")
            return;
          failedBoundaries === null && (failedBoundaries = /* @__PURE__ */ new WeakSet()), failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root2, update) {
        {
          if (resolveFamily === null)
            return;
          var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
          flushPassiveEffects(), flushSync2(function() {
            scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
          });
        }
      }, scheduleRoot = function(root2, element) {
        {
          if (root2.context !== emptyContextObject)
            return;
          flushPassiveEffects(), flushSync2(function() {
            updateContainer(element, root2, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type2 = fiber.type, candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type2;
              break;
            case ForwardRef:
              candidateType = type2.render;
              break;
          }
          if (resolveFamily === null)
            throw new Error("Expected resolveFamily to be set during hot reload.");
          var needsRender = !1, needsRemount = !1;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            family !== void 0 && (staleFamilies.has(family) ? needsRemount = !0 : updatedFamilies.has(family) && (tag === ClassComponent ? needsRemount = !0 : needsRender = !0));
          }
          if (failedBoundaries !== null && (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) && (needsRemount = !0), needsRemount && (fiber._debugNeedsRemount = !0), needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            _root !== null && scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
          }
          child !== null && !needsRemount && scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies), sibling !== null && scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
        }
      }
      var findHostInstancesForRefresh = function(root2, families) {
        {
          var hostInstances = /* @__PURE__ */ new Set(), types2 = new Set(families.map(function(family) {
            return family.current;
          }));
          return findHostInstancesForMatchingFibersRecursively(root2.current, types2, hostInstances), hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
        {
          var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type2 = fiber.type, candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type2;
              break;
            case ForwardRef:
              candidateType = type2.render;
              break;
          }
          var didMatch = !1;
          candidateType !== null && types2.has(candidateType) && (didMatch = !0), didMatch ? findHostInstancesForFiberShallowly(fiber, hostInstances) : child !== null && findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances), sibling !== null && findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances)
            return;
          for (var node = fiber; ; ) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }
            if (node.return === null)
              throw new Error("Expected to reach root first.");
            node = node.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        for (var node = fiber, foundHostInstances = !1; ; ) {
          if (node.tag === HostComponent)
            foundHostInstances = !0, hostInstances.add(node.stateNode);
          else if (node.child !== null) {
            node.child.return = node, node = node.child;
            continue;
          }
          if (node === fiber)
            return foundHostInstances;
          for (; node.sibling === null; ) {
            if (node.return === null || node.return === fiber)
              return foundHostInstances;
            node = node.return;
          }
          node.sibling.return = node.return, node = node.sibling;
        }
        return !1;
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = !1;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
        } catch {
          hasBadMapPolyfill = !0;
        }
      }
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag, this.key = key, this.elementType = null, this.type = null, this.stateNode = null, this.return = null, this.child = null, this.sibling = null, this.index = 0, this.ref = null, this.pendingProps = pendingProps, this.memoizedProps = null, this.updateQueue = null, this.memoizedState = null, this.dependencies = null, this.mode = mode, this.flags = NoFlags, this.subtreeFlags = NoFlags, this.deletions = null, this.lanes = NoLanes, this.childLanes = NoLanes, this.alternate = null, this.actualDuration = Number.NaN, this.actualStartTime = Number.NaN, this.selfBaseDuration = Number.NaN, this.treeBaseDuration = Number.NaN, this.actualDuration = 0, this.actualStartTime = -1, this.selfBaseDuration = 0, this.treeBaseDuration = 0, this._debugSource = null, this._debugOwner = null, this._debugNeedsRemount = !1, this._debugHookTypes = null, !hasBadMapPolyfill && typeof Object.preventExtensions == "function" && Object.preventExtensions(this);
      }
      var createFiber = function(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };
      function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type2) {
        return typeof type2 == "function" && !shouldConstruct$1(type2) && type2.defaultProps === void 0;
      }
      function resolveLazyComponentTag(Component) {
        if (typeof Component == "function")
          return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        if (Component != null) {
          var $$typeof = Component.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE)
            return ForwardRef;
          if ($$typeof === REACT_MEMO_TYPE)
            return MemoComponent;
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        workInProgress2 === null ? (workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode), workInProgress2.elementType = current2.elementType, workInProgress2.type = current2.type, workInProgress2.stateNode = current2.stateNode, workInProgress2._debugSource = current2._debugSource, workInProgress2._debugOwner = current2._debugOwner, workInProgress2._debugHookTypes = current2._debugHookTypes, workInProgress2.alternate = current2, current2.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current2.type, workInProgress2.flags = NoFlags, workInProgress2.subtreeFlags = NoFlags, workInProgress2.deletions = null, workInProgress2.actualDuration = 0, workInProgress2.actualStartTime = -1), workInProgress2.flags = current2.flags & StaticMask, workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        switch (workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        }, workInProgress2.sibling = current2.sibling, workInProgress2.index = current2.index, workInProgress2.ref = current2.ref, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration, workInProgress2._debugNeedsRemount = current2._debugNeedsRemount, workInProgress2.tag) {
          case IndeterminateComponent:
          case FunctionComponent:
          case SimpleMemoComponent:
            workInProgress2.type = resolveFunctionForHotReloading(current2.type);
            break;
          case ClassComponent:
            workInProgress2.type = resolveClassForHotReloading(current2.type);
            break;
          case ForwardRef:
            workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
            break;
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= StaticMask | Placement;
        var current2 = workInProgress2.alternate;
        if (current2 === null)
          workInProgress2.childLanes = NoLanes, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = NoFlags, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null, workInProgress2.selfBaseDuration = 0, workInProgress2.treeBaseDuration = 0;
        else {
          workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.subtreeFlags = NoFlags, workInProgress2.deletions = null, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue, workInProgress2.type = current2.type;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          }, workInProgress2.selfBaseDuration = current2.selfBaseDuration, workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        return tag === ConcurrentRoot ? (mode = ConcurrentMode, isStrictMode === !0 && (mode |= StrictLegacyMode, mode |= StrictEffectsMode)) : mode = NoMode, isDevToolsPresent && (mode |= ProfileMode), createFiber(HostRoot, null, null, mode);
      }
      function createFiberFromTypeAndProps(type2, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent, resolvedType = type2;
        if (typeof type2 == "function")
          shouldConstruct$1(type2) ? (fiberTag = ClassComponent, resolvedType = resolveClassForHotReloading(resolvedType)) : resolvedType = resolveFunctionForHotReloading(resolvedType);
        else if (typeof type2 == "string")
          fiberTag = HostComponent;
        else
          getTag:
            switch (type2) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode, mode |= StrictLegacyMode, (mode & ConcurrentMode) !== NoMode && (mode |= StrictEffectsMode);
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE:
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type2 == "object" && type2 !== null)
                  switch (type2.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef, resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent, resolvedType = null;
                      break getTag;
                  }
                var info = "";
                {
                  (type2 === void 0 || typeof type2 == "object" && type2 !== null && Object.keys(type2).length === 0) && (info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  ownerName && (info += `

Check the render method of \`` + ownerName + "`.");
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type2 == null ? type2 : typeof type2) + "." + info));
              }
            }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        return fiber.elementType = type2, fiber.type = resolvedType, fiber.lanes = lanes, fiber._debugOwner = owner, fiber;
      }
      function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type2 = element.type, key = element.key, pendingProps = element.props, fiber = createFiberFromTypeAndProps(type2, key, pendingProps, owner, mode, lanes);
        return fiber._debugSource = element._source, fiber._debugOwner = element._owner, fiber;
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment9, elements, key, mode);
        return fiber.lanes = lanes, fiber;
      }
      function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        typeof pendingProps.id != "string" && error2('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        return fiber.elementType = REACT_PROFILER_TYPE, fiber.lanes = lanes, fiber.stateNode = {
          effectDuration: 0,
          passiveEffectDuration: 0
        }, fiber;
      }
      function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        return fiber.elementType = REACT_SUSPENSE_TYPE, fiber.lanes = lanes, fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        return fiber.elementType = REACT_SUSPENSE_LIST_TYPE, fiber.lanes = lanes, fiber;
      }
      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE, fiber.lanes = lanes;
        var primaryChildInstance = {
          isHidden: !1
        };
        return fiber.stateNode = primaryChildInstance, fiber;
      }
      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        return fiber.lanes = lanes, fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        return fiber.elementType = "DELETED", fiber;
      }
      function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        return fiber.stateNode = dehydratedNode, fiber;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [], fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        return fiber.lanes = lanes, fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          // Used by persistent updates
          implementation: portal.implementation
        }, fiber;
      }
      function assignFiberPropertiesInDEV(target, source) {
        return target === null && (target = createFiber(IndeterminateComponent, null, null, NoMode)), target.tag = source.tag, target.key = source.key, target.elementType = source.elementType, target.type = source.type, target.stateNode = source.stateNode, target.return = source.return, target.child = source.child, target.sibling = source.sibling, target.index = source.index, target.ref = source.ref, target.pendingProps = source.pendingProps, target.memoizedProps = source.memoizedProps, target.updateQueue = source.updateQueue, target.memoizedState = source.memoizedState, target.dependencies = source.dependencies, target.mode = source.mode, target.flags = source.flags, target.subtreeFlags = source.subtreeFlags, target.deletions = source.deletions, target.lanes = source.lanes, target.childLanes = source.childLanes, target.alternate = source.alternate, target.actualDuration = source.actualDuration, target.actualStartTime = source.actualStartTime, target.selfBaseDuration = source.selfBaseDuration, target.treeBaseDuration = source.treeBaseDuration, target._debugSource = source._debugSource, target._debugOwner = source._debugOwner, target._debugNeedsRemount = source._debugNeedsRemount, target._debugHookTypes = source._debugHookTypes, target;
      }
      function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
        this.tag = tag, this.containerInfo = containerInfo, this.pendingChildren = null, this.current = null, this.pingCache = null, this.finishedWork = null, this.timeoutHandle = noTimeout, this.context = null, this.pendingContext = null, this.callbackNode = null, this.callbackPriority = NoLane, this.eventTimes = createLaneMap(NoLanes), this.expirationTimes = createLaneMap(NoTimestamp), this.pendingLanes = NoLanes, this.suspendedLanes = NoLanes, this.pingedLanes = NoLanes, this.expiredLanes = NoLanes, this.mutableReadLanes = NoLanes, this.finishedLanes = NoLanes, this.entangledLanes = NoLanes, this.entanglements = createLaneMap(NoLanes), this.identifierPrefix = identifierPrefix, this.onRecoverableError = onRecoverableError, this.mutableSourceEagerHydrationData = null, this.effectDuration = 0, this.passiveEffectDuration = 0;
        {
          this.memoizedUpdaters = /* @__PURE__ */ new Set();
          for (var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [], _i = 0; _i < TotalLanes; _i++)
            pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
        }
        switch (tag) {
          case ConcurrentRoot:
            this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
            break;
          case LegacyRoot:
            this._debugRootType = hydrate2 ? "hydrate()" : "render()";
            break;
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError), uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root2.current = uninitializedFiber, uninitializedFiber.stateNode = root2;
        {
          var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate2,
            cache: null,
            // not enabled yet
            transitions: null,
            pendingSuspenseBoundaries: null
          };
          uninitializedFiber.memoizedState = _initialState;
        }
        return initializeUpdateQueue(uninitializedFiber), root2;
      }
      var ReactVersion = "18.2.0";
      function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
        return checkKeyStringCoercion(key), {
          // This tag allow us to uniquely identify this as a React Portal
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      var didWarnAboutNestedUpdates, didWarnAboutFindNodeInStrictMode;
      didWarnAboutNestedUpdates = !1, didWarnAboutFindNodeInStrictMode = {};
      function getContextForSubtree(parentComponent) {
        if (!parentComponent)
          return emptyContextObject;
        var fiber = get(parentComponent), parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component = fiber.type;
          if (isContextProvider(Component))
            return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
      }
      function findHostInstanceWithWarning(component2, methodName) {
        {
          var fiber = get(component2);
          if (fiber === void 0) {
            if (typeof component2.render == "function")
              throw new Error("Unable to find node on an unmounted component.");
            var keys = Object.keys(component2).join(",");
            throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null)
            return null;
          if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = !0;
              var previousFiber = current;
              try {
                setCurrentFiber(hostFiber), fiber.mode & StrictLegacyMode ? error2("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName) : error2("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
              } finally {
                previousFiber ? setCurrentFiber(previousFiber) : resetCurrentFiber();
              }
            }
          }
          return hostFiber.stateNode;
        }
      }
      function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = !1, initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      }
      function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = !0, root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        root2.context = getContextForSubtree(null);
        var current2 = root2.current, eventTime = requestEventTime(), lane = requestUpdateLane(current2), update = createUpdate(eventTime, lane);
        return update.callback = callback ?? null, enqueueUpdate(current2, update, lane), scheduleInitialHydrationOnRoot(root2, lane, eventTime), root2;
      }
      function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current, eventTime = requestEventTime(), lane = requestUpdateLane(current$1);
        markRenderScheduled(lane);
        var context = getContextForSubtree(parentComponent);
        container.context === null ? container.context = context : container.pendingContext = context, isRendering && current !== null && !didWarnAboutNestedUpdates && (didWarnAboutNestedUpdates = !0, error2(`Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.

Check the render method of %s.`, getComponentNameFromFiber(current) || "Unknown"));
        var update = createUpdate(eventTime, lane);
        update.payload = {
          element
        }, callback = callback === void 0 ? null : callback, callback !== null && (typeof callback != "function" && error2("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback), update.callback = callback);
        var root2 = enqueueUpdate(current$1, update, lane);
        return root2 !== null && (scheduleUpdateOnFiber(root2, current$1, lane, eventTime), entangleTransitions(root2, current$1, lane)), lane;
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child)
          return null;
        switch (containerFiber.child.tag) {
          case HostComponent:
            return containerFiber.child.stateNode;
          default:
            return containerFiber.child.stateNode;
        }
      }
      function attemptSynchronousHydration$1(fiber) {
        switch (fiber.tag) {
          case HostRoot: {
            var root2 = fiber.stateNode;
            if (isRootDehydrated(root2)) {
              var lanes = getHighestPriorityPendingLanes(root2);
              flushRoot(root2, lanes);
            }
            break;
          }
          case SuspenseComponent: {
            flushSync2(function() {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
              }
            });
            var retryLane = SyncLane;
            markRetryLaneIfNotHydrated(fiber, retryLane);
            break;
          }
        }
      }
      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        suspenseState !== null && suspenseState.dehydrated !== null && (suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane));
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        alternate && markRetryLaneImpl(alternate, retryLane);
      }
      function attemptContinuousHydration$1(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var lane = SelectiveHydrationLane, root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
      }
      function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var lane = requestUpdateLane(fiber), root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        return hostFiber === null ? null : hostFiber.stateNode;
      }
      var shouldErrorImpl = function(fiber) {
        return null;
      };
      function shouldError(fiber) {
        return shouldErrorImpl(fiber);
      }
      var shouldSuspendImpl = function(fiber) {
        return !1;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null, overrideHookStateDeletePath = null, overrideHookStateRenamePath = null, overrideProps = null, overridePropsDeletePath = null, overridePropsRenamePath = null, scheduleUpdate = null, setErrorHandler = null, setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function(obj, path, index3) {
          var key = path[index3], updated = isArray(obj) ? obj.slice() : assign({}, obj);
          return index3 + 1 === path.length ? (isArray(updated) ? updated.splice(key, 1) : delete updated[key], updated) : (updated[key] = copyWithDeleteImpl(obj[key], path, index3 + 1), updated);
        }, copyWithDelete = function(obj, path) {
          return copyWithDeleteImpl(obj, path, 0);
        }, copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
          var oldKey = oldPath[index3], updated = isArray(obj) ? obj.slice() : assign({}, obj);
          if (index3 + 1 === oldPath.length) {
            var newKey = newPath[index3];
            updated[newKey] = updated[oldKey], isArray(updated) ? updated.splice(oldKey, 1) : delete updated[oldKey];
          } else
            updated[oldKey] = copyWithRenameImpl(
              // $FlowFixMe number or string is fine here
              obj[oldKey],
              oldPath,
              newPath,
              index3 + 1
            );
          return updated;
        }, copyWithRename = function(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
          } else
            for (var i13 = 0; i13 < newPath.length - 1; i13++)
              if (oldPath[i13] !== newPath[i13]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        }, copyWithSetImpl = function(obj, path, index3, value) {
          if (index3 >= path.length)
            return value;
          var key = path[index3], updated = isArray(obj) ? obj.slice() : assign({}, obj);
          return updated[key] = copyWithSetImpl(obj[key], path, index3 + 1, value), updated;
        }, copyWithSet = function(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        }, findHook = function(fiber, id3) {
          for (var currentHook2 = fiber.memoizedState; currentHook2 !== null && id3 > 0; )
            currentHook2 = currentHook2.next, id3--;
          return currentHook2;
        };
        overrideHookState = function(fiber, id3, path, value) {
          var hook = findHook(fiber, id3);
          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }, overrideHookStateDeletePath = function(fiber, id3, path) {
          var hook = findHook(fiber, id3);
          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }, overrideHookStateRenamePath = function(fiber, id3, oldPath, newPath) {
          var hook = findHook(fiber, id3);
          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState, hook.baseState = newState, fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }, overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, scheduleUpdate = function(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          root2 !== null && scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }, setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        }, setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        return hostFiber === null ? null : hostFiber.stateNode;
      }
      function emptyFindFiberByHostInstance(instance) {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance, ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setErrorHandler,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          // React Refresh
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          // Enables DevTools to append owner stacks to error messages in DEV mode.
          getCurrentFiber: getCurrentFiberForDevTools,
          // Enables DevTools to detect reconciler version rather than renderer version
          // which may not match for third party renderers.
          reconcilerVersion: ReactVersion
        });
      }
      var defaultOnRecoverableError = typeof reportError == "function" ? (
        // In modern browsers, reportError will dispatch an error event,
        // emulating an uncaught JavaScript error.
        reportError
      ) : function(error3) {
        console.error(error3);
      };
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        if (root2 === null)
          throw new Error("Cannot update an unmounted root.");
        {
          typeof arguments[1] == "function" ? error2("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().") : isValidContainer(arguments[1]) ? error2("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.") : typeof arguments[1] < "u" && error2("You passed a second argument to root.render(...) but it only accepts one argument.");
          var container = root2.containerInfo;
          if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root2.current);
            hostInstance && hostInstance.parentNode !== container && error2("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
          }
        }
        updateContainer(children, root2, null, null);
      }, ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        typeof arguments[0] == "function" && error2("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root2 = this._internalRoot;
        if (root2 !== null) {
          this._internalRoot = null;
          var container = root2.containerInfo;
          isAlreadyRendering() && error2("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."), flushSync2(function() {
            updateContainer(null, root2, null, null);
          }), unmarkContainerAsRoot(container);
        }
      };
      function createRoot(container, options2) {
        if (!isValidContainer(container))
          throw new Error("createRoot(...): Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = !1, concurrentUpdatesByDefaultOverride = !1, identifierPrefix = "", onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null;
        options2 != null && (options2.hydrate ? warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.") : typeof options2 == "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE && error2(`You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:

  let root = createRoot(domContainer);
  root.render(<App />);`), options2.unstable_strictMode === !0 && (isStrictMode = !0), options2.identifierPrefix !== void 0 && (identifierPrefix = options2.identifierPrefix), options2.onRecoverableError !== void 0 && (onRecoverableError = options2.onRecoverableError), options2.transitionCallbacks !== void 0 && (transitionCallbacks = options2.transitionCallbacks));
        var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        return listenToAllSupportedEvents(rootContainerElement), new ReactDOMRoot(root2);
      }
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function scheduleHydration(target) {
        target && queueExplicitHydrationTarget(target);
      }
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
      function hydrateRoot(container, initialChildren, options2) {
        if (!isValidContainer(container))
          throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container), initialChildren === void 0 && error2("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        var hydrationCallbacks = options2 ?? null, mutableSources = options2 != null && options2.hydratedSources || null, isStrictMode = !1, concurrentUpdatesByDefaultOverride = !1, identifierPrefix = "", onRecoverableError = defaultOnRecoverableError;
        options2 != null && (options2.unstable_strictMode === !0 && (isStrictMode = !0), options2.identifierPrefix !== void 0 && (identifierPrefix = options2.identifierPrefix), options2.onRecoverableError !== void 0 && (onRecoverableError = options2.onRecoverableError));
        var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        if (markContainerAsRoot(root2.current, container), listenToAllSupportedEvents(container), mutableSources)
          for (var i13 = 0; i13 < mutableSources.length; i13++) {
            var mutableSource = mutableSources[i13];
            registerMutableSourceForHydration(root2, mutableSource);
          }
        return new ReactDOMHydrationRoot(root2);
      }
      function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
      }
      function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
      }
      function warnIfReactDOMContainerInDEV(container) {
        container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY" && error2("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app."), isContainerMarkedAsRoot(container) && (container._reactRootContainer ? error2("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.") : error2("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."));
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner, topLevelUpdateWarnings;
      topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
          hostInstance && hostInstance.parentNode !== container && error2("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer, rootEl = getReactRootElementInContainer(container), hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        hasNonRootReactChild && !isRootRenderedBySomeReact && error2("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."), container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY" && error2("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
      };
      function getReactRootElementInContainer(container) {
        return container ? container.nodeType === DOCUMENT_NODE ? container.documentElement : container.firstChild : null;
      }
      function noopOnRecoverableError() {
      }
      function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
          if (typeof callback == "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          var root2 = createHydrationContainer(
            initialChildren,
            callback,
            container,
            LegacyRoot,
            null,
            // hydrationCallbacks
            !1,
            // isStrictMode
            !1,
            // concurrentUpdatesByDefaultOverride,
            "",
            // identifierPrefix
            noopOnRecoverableError
          );
          container._reactRootContainer = root2, markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          return listenToAllSupportedEvents(rootContainerElement), flushSync2(), root2;
        } else {
          for (var rootSibling; rootSibling = container.lastChild; )
            container.removeChild(rootSibling);
          if (typeof callback == "function") {
            var _originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(_root);
              _originalCallback.call(instance);
            };
          }
          var _root = createContainer(
            container,
            LegacyRoot,
            null,
            // hydrationCallbacks
            !1,
            // isStrictMode
            !1,
            // concurrentUpdatesByDefaultOverride,
            "",
            // identifierPrefix
            noopOnRecoverableError
          );
          container._reactRootContainer = _root, markContainerAsRoot(_root.current, container);
          var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          return listenToAllSupportedEvents(_rootContainerElement), flushSync2(function() {
            updateContainer(initialChildren, _root, parentComponent, callback);
          }), _root;
        }
      }
      function warnOnInvalidCallback$1(callback, callerName) {
        callback !== null && typeof callback != "function" && error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container), warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
        var maybeRoot = container._reactRootContainer, root2;
        if (!maybeRoot)
          root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        else {
          if (root2 = maybeRoot, typeof callback == "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          updateContainer(children, root2, parentComponent, callback);
        }
        return getPublicRootInstance(root2);
      }
      function findDOMNode(componentOrElement) {
        {
          var owner = ReactCurrentOwner$3.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            warnedAboutRefsInRender || error2("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component"), owner.stateNode._warnedAboutRefsInRender = !0;
          }
        }
        return componentOrElement == null ? null : componentOrElement.nodeType === ELEMENT_NODE ? componentOrElement : findHostInstanceWithWarning(componentOrElement, "findDOMNode");
      }
      function hydrate(element, container, callback) {
        if (error2("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(container))
          throw new Error("Target container is not a DOM element.");
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          isModernRoot && error2("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, !0, callback);
      }
      function render(element, container, callback) {
        if (error2("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(container))
          throw new Error("Target container is not a DOM element.");
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          isModernRoot && error2("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, !1, callback);
      }
      function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (error2("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"), !isValidContainerLegacy(containerNode))
          throw new Error("Target container is not a DOM element.");
        if (parentComponent == null || !has(parentComponent))
          throw new Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, !1, callback);
      }
      function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container))
          throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
          isModernRoot && error2("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        }
        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container), renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            renderedByDifferentReact && error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
          }
          return flushSync2(function() {
            legacyRenderSubtreeIntoContainer(null, null, container, !1, function() {
              container._reactRootContainer = null, unmarkContainerAsRoot(container);
            });
          }), !0;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container), hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)), isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            hasNonRootReactChild && error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
          }
          return !1;
        }
      }
      setAttemptSynchronousHydration(attemptSynchronousHydration$1), setAttemptContinuousHydration(attemptContinuousHydration$1), setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1), setGetCurrentUpdatePriority(getCurrentUpdatePriority), setAttemptHydrationAtPriority(runWithPriority), (typeof Map != "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
      Map.prototype == null || typeof Map.prototype.forEach != "function" || typeof Set != "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
      Set.prototype == null || typeof Set.prototype.clear != "function" || typeof Set.prototype.forEach != "function") && error2("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"), setRestoreImplementation(restoreControlledState$3), setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync2);
      function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!isValidContainer(container))
          throw new Error("Target container is not a DOM element.");
        return createPortal(children, container, null, key);
      }
      function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
      }
      var Internals = {
        usingClientEntryPoint: !1,
        // Keep in sync with ReactTestUtils.js.
        // This is an array for better minification.
        Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
      };
      function createRoot$1(container, options2) {
        return Internals.usingClientEntryPoint || error2('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'), createRoot(container, options2);
      }
      function hydrateRoot$1(container, initialChildren, options2) {
        return Internals.usingClientEntryPoint || error2('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'), hydrateRoot(container, initialChildren, options2);
      }
      function flushSync$1(fn) {
        return isAlreadyRendering() && error2("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."), flushSync2(fn);
      }
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
      });
      if (!foundDevTools && canUseDOM && window.top === window.self && (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1)) {
        var protocol = window.location.protocol;
        /^(https?|file):$/.test(protocol) && console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? `
You might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq` : ""), "font-weight:bold");
      }
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals, exports.createPortal = createPortal$1, exports.createRoot = createRoot$1, exports.findDOMNode = findDOMNode, exports.flushSync = flushSync$1, exports.hydrate = hydrate, exports.hydrateRoot = hydrateRoot$1, exports.render = render, exports.unmountComponentAtNode = unmountComponentAtNode, exports.unstable_batchedUpdates = batchedUpdates$1, exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer, exports.version = ReactVersion, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    })();
  }
});

// ../../../node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "../../../node_modules/react-dom/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_react_dom_development();
  }
});

// ../../../node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "../../../node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    (function() {
      "use strict";
      var hasSymbol = typeof Symbol == "function" && Symbol.for, REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103, REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106, REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107, REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108, REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114, REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109, REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110, REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111, REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111, REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112, REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113, REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120, REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115, REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116, REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121, REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117, REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118, REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
      function isValidElementType(type2) {
        return typeof type2 == "string" || typeof type2 == "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
        type2 === REACT_FRAGMENT_TYPE || type2 === REACT_CONCURRENT_MODE_TYPE || type2 === REACT_PROFILER_TYPE || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || typeof type2 == "object" && type2 !== null && (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_FUNDAMENTAL_TYPE || type2.$$typeof === REACT_RESPONDER_TYPE || type2.$$typeof === REACT_SCOPE_TYPE || type2.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object) {
        if (typeof object == "object" && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type2 = object.type;
              switch (type2) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type2;
                default:
                  var $$typeofType = type2 && type2.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
      }
      var AsyncMode = REACT_ASYNC_MODE_TYPE, ConcurrentMode = REACT_CONCURRENT_MODE_TYPE, ContextConsumer = REACT_CONTEXT_TYPE, ContextProvider = REACT_PROVIDER_TYPE, Element2 = REACT_ELEMENT_TYPE, ForwardRef = REACT_FORWARD_REF_TYPE, Fragment9 = REACT_FRAGMENT_TYPE, Lazy = REACT_LAZY_TYPE, Memo = REACT_MEMO_TYPE, Portal = REACT_PORTAL_TYPE, Profiler = REACT_PROFILER_TYPE, StrictMode = REACT_STRICT_MODE_TYPE, Suspense = REACT_SUSPENSE_TYPE, hasWarnedAboutDeprecatedIsAsyncMode = !1;
      function isAsyncMode(object) {
        return hasWarnedAboutDeprecatedIsAsyncMode || (hasWarnedAboutDeprecatedIsAsyncMode = !0, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")), isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement2(object) {
        return typeof object == "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      exports.AsyncMode = AsyncMode, exports.ConcurrentMode = ConcurrentMode, exports.ContextConsumer = ContextConsumer, exports.ContextProvider = ContextProvider, exports.Element = Element2, exports.ForwardRef = ForwardRef, exports.Fragment = Fragment9, exports.Lazy = Lazy, exports.Memo = Memo, exports.Portal = Portal, exports.Profiler = Profiler, exports.StrictMode = StrictMode, exports.Suspense = Suspense, exports.isAsyncMode = isAsyncMode, exports.isConcurrentMode = isConcurrentMode, exports.isContextConsumer = isContextConsumer, exports.isContextProvider = isContextProvider, exports.isElement = isElement2, exports.isForwardRef = isForwardRef, exports.isFragment = isFragment, exports.isLazy = isLazy, exports.isMemo = isMemo, exports.isPortal = isPortal, exports.isProfiler = isProfiler, exports.isStrictMode = isStrictMode, exports.isSuspense = isSuspense, exports.isValidElementType = isValidElementType, exports.typeOf = typeOf;
    })();
  }
});

// ../../../node_modules/prop-types/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "../../../node_modules/prop-types/node_modules/react-is/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_react_is_development();
  }
});

// ../../../node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "../../../node_modules/object-assign/index.js"(exports, module2) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols, hasOwnProperty = Object.prototype.hasOwnProperty, propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val == null)
        throw new TypeError("Object.assign cannot be called with null or undefined");
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign)
          return !1;
        var test1 = new String("abc");
        if (test1[5] = "de", Object.getOwnPropertyNames(test1)[0] === "5")
          return !1;
        for (var test2 = {}, i13 = 0; i13 < 10; i13++)
          test2["_" + String.fromCharCode(i13)] = i13;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789")
          return !1;
        var test3 = {};
        return "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        }), Object.keys(Object.assign({}, test3)).join("") === "abcdefghijklmnopqrst";
      } catch {
        return !1;
      }
    }
    module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
      for (var from, to = toObject(target), symbols, s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from)
          hasOwnProperty.call(from, key) && (to[key] = from[key]);
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i13 = 0; i13 < symbols.length; i13++)
            propIsEnumerable.call(from, symbols[i13]) && (to[symbols[i13]] = from[symbols[i13]]);
        }
      }
      return to;
    };
  }
});

// ../../../node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "../../../node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module2) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module2.exports = ReactPropTypesSecret;
  }
});

// ../../../node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "../../../node_modules/prop-types/lib/has.js"(exports, module2) {
    module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// ../../../node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "../../../node_modules/prop-types/checkPropTypes.js"(exports, module2) {
    "use strict";
    var printWarning = function() {
    };
    ReactPropTypesSecret = require_ReactPropTypesSecret(), loggedTypeFailures = {}, has = require_has(), printWarning = function(text) {
      var message2 = "Warning: " + text;
      typeof console < "u" && console.error(message2);
      try {
        throw new Error(message2);
      } catch {
      }
    };
    var ReactPropTypesSecret, loggedTypeFailures, has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      for (var typeSpecName in typeSpecs)
        if (has(typeSpecs, typeSpecName)) {
          var error2;
          try {
            if (typeof typeSpecs[typeSpecName] != "function") {
              var err = Error(
                (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
              );
              throw err.name = "Invariant Violation", err;
            }
            error2 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error2 = ex;
          }
          if (error2 && !(error2 instanceof Error) && printWarning(
            (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error2 + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
          ), error2 instanceof Error && !(error2.message in loggedTypeFailures)) {
            loggedTypeFailures[error2.message] = !0;
            var stack = getStack ? getStack() : "";
            printWarning(
              "Failed " + location + " type: " + error2.message + (stack ?? "")
            );
          }
        }
    }
    checkPropTypes.resetWarningCache = function() {
      loggedTypeFailures = {};
    };
    module2.exports = checkPropTypes;
  }
});

// ../../../node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "../../../node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module2) {
    "use strict";
    var ReactIs = require_react_is(), assign = require_object_assign(), ReactPropTypesSecret = require_ReactPropTypesSecret(), has = require_has(), checkPropTypes = require_checkPropTypes(), printWarning = function() {
    };
    printWarning = function(text) {
      var message2 = "Warning: " + text;
      typeof console < "u" && console.error(message2);
      try {
        throw new Error(message2);
      } catch {
      }
    };
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module2.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol == "function" && Symbol.iterator, FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn == "function")
          return iteratorFn;
      }
      var ANONYMOUS = "<<anonymous>>", ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        return x === y ? x !== 0 || 1 / x === 1 / y : x !== x && y !== y;
      }
      function PropTypeError(message2, data) {
        this.message = message2, this.data = data && typeof data == "object" ? data : {}, this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        var manualPropTypeCallCache = {}, manualPropTypeWarningCount = 0;
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          if (componentName = componentName || ANONYMOUS, propFullName = propFullName || propName, secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              throw err.name = "Invariant Violation", err;
            } else if (typeof console < "u") {
              var cacheKey = componentName + ":" + propName;
              !manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3 && (printWarning(
                "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
              ), manualPropTypeCallCache[cacheKey] = !0, manualPropTypeWarningCount++);
            }
          }
          return props[propName] == null ? isRequired ? props[propName] === null ? new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`.")) : new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`.")) : null : validate(props, propName, componentName, location, propFullName);
        }
        var chainedCheckType = checkType.bind(null, !1);
        return chainedCheckType.isRequired = checkType.bind(null, !0), chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName], propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker != "function")
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i13 = 0; i13 < propValue.length; i13++) {
            var error2 = typeChecker(propValue, i13, componentName, location, propFullName + "[" + i13 + "]", ReactPropTypesSecret);
            if (error2 instanceof Error)
              return error2;
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS, actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues))
          return arguments.length > 1 ? printWarning(
            "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
          ) : printWarning("Invalid argument supplied to oneOf, expected an array."), emptyFunctionThatReturnsNull;
        function validate(props, propName, componentName, location, propFullName) {
          for (var propValue = props[propName], i13 = 0; i13 < expectedValues.length; i13++)
            if (is(propValue, expectedValues[i13]))
              return null;
          var valuesString = JSON.stringify(expectedValues, function(key, value) {
            var type2 = getPreciseType(value);
            return type2 === "symbol" ? String(value) : value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker != "function")
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          var propValue = props[propName], propType = getPropType(propValue);
          if (propType !== "object")
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          for (var key in propValue)
            if (has(propValue, key)) {
              var error2 = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error2 instanceof Error)
                return error2;
            }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers))
          return printWarning("Invalid argument supplied to oneOfType, expected an instance of array."), emptyFunctionThatReturnsNull;
        for (var i13 = 0; i13 < arrayOfTypeCheckers.length; i13++) {
          var checker = arrayOfTypeCheckers[i13];
          if (typeof checker != "function")
            return printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i13 + "."
            ), emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          for (var expectedTypes = [], i14 = 0; i14 < arrayOfTypeCheckers.length; i14++) {
            var checker2 = arrayOfTypeCheckers[i14], checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null)
              return null;
            checkerResult.data && has(checkerResult.data, "expectedType") && expectedTypes.push(checkerResult.data.expectedType);
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          return isNode2(props[propName]) ? null : new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type2) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type2 + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName], propType = getPropType(propValue);
          if (propType !== "object")
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker != "function")
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            var error2 = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error2)
              return error2;
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName], propType = getPropType(propValue);
          if (propType !== "object")
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker != "function")
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            if (!checker)
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + `
Valid keys: ` + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            var error2 = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error2)
              return error2;
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode2(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return !0;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue))
              return propValue.every(isNode2);
            if (propValue === null || isValidElement(propValue))
              return !0;
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue), step2;
              if (iteratorFn !== propValue.entries) {
                for (; !(step2 = iterator.next()).done; )
                  if (!isNode2(step2.value))
                    return !1;
              } else
                for (; !(step2 = iterator.next()).done; ) {
                  var entry2 = step2.value;
                  if (entry2 && !isNode2(entry2[1]))
                    return !1;
                }
            } else
              return !1;
            return !0;
          default:
            return !1;
        }
      }
      function isSymbol(propType, propValue) {
        return propType === "symbol" ? !0 : propValue ? propValue["@@toStringTag"] === "Symbol" || typeof Symbol == "function" && propValue instanceof Symbol : !1;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        return Array.isArray(propValue) ? "array" : propValue instanceof RegExp ? "object" : isSymbol(propType, propValue) ? "symbol" : propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue > "u" || propValue === null)
          return "" + propValue;
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date)
            return "date";
          if (propValue instanceof RegExp)
            return "regexp";
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type2 = getPreciseType(value);
        switch (type2) {
          case "array":
          case "object":
            return "an " + type2;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type2;
          default:
            return type2;
        }
      }
      function getClassName(propValue) {
        return !propValue.constructor || !propValue.constructor.name ? ANONYMOUS : propValue.constructor.name;
      }
      return ReactPropTypes.checkPropTypes = checkPropTypes, ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache, ReactPropTypes.PropTypes = ReactPropTypes, ReactPropTypes;
    };
  }
});

// ../../../node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "../../../node_modules/prop-types/index.js"(exports, module2) {
    ReactIs = require_react_is(), throwOnDirectAccess = !0, module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    var ReactIs, throwOnDirectAccess;
  }
});

// ../../../node_modules/classnames/index.js
var require_classnames = __commonJS({
  "../../../node_modules/classnames/index.js"(exports, module2) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty, nativeCodeString = "[native code]";
      function classNames16() {
        for (var classes = [], i13 = 0; i13 < arguments.length; i13++) {
          var arg = arguments[i13];
          if (arg) {
            var argType = typeof arg;
            if (argType === "string" || argType === "number")
              classes.push(arg);
            else if (Array.isArray(arg)) {
              if (arg.length) {
                var inner = classNames16.apply(null, arg);
                inner && classes.push(inner);
              }
            } else if (argType === "object") {
              if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
                classes.push(arg.toString());
                continue;
              }
              for (var key in arg)
                hasOwn.call(arg, key) && arg[key] && classes.push(key);
            }
          }
        }
        return classes.join(" ");
      }
      typeof module2 < "u" && module2.exports ? (classNames16.default = classNames16, module2.exports = classNames16) : typeof define == "function" && typeof define.amd == "object" && define.amd ? define("classnames", [], function() {
        return classNames16;
      }) : window.classNames = classNames16;
    })();
  }
});

// ../../../node_modules/@emotion/memoize/dist/memoize.cjs.dev.js
var require_memoize_cjs_dev = __commonJS({
  "../../../node_modules/@emotion/memoize/dist/memoize.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    function memoize(fn) {
      var cache = {};
      return function(arg) {
        return cache[arg] === void 0 && (cache[arg] = fn(arg)), cache[arg];
      };
    }
    exports.default = memoize;
  }
});

// ../../../node_modules/@emotion/memoize/dist/memoize.cjs.js
var require_memoize_cjs = __commonJS({
  "../../../node_modules/@emotion/memoize/dist/memoize.cjs.js"(exports, module2) {
    "use strict";
    module2.exports = require_memoize_cjs_dev();
  }
});

// ../../../node_modules/@emotion/is-prop-valid/dist/is-prop-valid.cjs.dev.js
var require_is_prop_valid_cjs_dev = __commonJS({
  "../../../node_modules/@emotion/is-prop-valid/dist/is-prop-valid.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    function _interopDefault(ex) {
      return ex && typeof ex == "object" && "default" in ex ? ex.default : ex;
    }
    var memoize = _interopDefault(require_memoize_cjs()), reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/, index2 = memoize(
      function(prop) {
        return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
      }
      /* Z+1 */
    );
    exports.default = index2;
  }
});

// ../../../node_modules/@emotion/is-prop-valid/dist/is-prop-valid.cjs.js
var require_is_prop_valid_cjs = __commonJS({
  "../../../node_modules/@emotion/is-prop-valid/dist/is-prop-valid.cjs.js"(exports, module2) {
    "use strict";
    module2.exports = require_is_prop_valid_cjs_dev();
  }
});

// ../../../node_modules/aria-hidden/dist/es5/index.js
var require_es5 = __commonJS({
  "../../../node_modules/aria-hidden/dist/es5/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.suppressOthers = exports.supportsInert = exports.inertOthers = exports.hideOthers = void 0;
    var getDefaultParent = function(originalTarget) {
      if (typeof document > "u")
        return null;
      var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
      return sampleTarget.ownerDocument.body;
    }, counterMap = /* @__PURE__ */ new WeakMap(), uncontrolledNodes = /* @__PURE__ */ new WeakMap(), markerMap = {}, lockCount = 0, unwrapHost = function(node) {
      return node && (node.host || unwrapHost(node.parentNode));
    }, correctTargets = function(parent, targets) {
      return targets.map(function(target) {
        if (parent.contains(target))
          return target;
        var correctedTarget = unwrapHost(target);
        return correctedTarget && parent.contains(correctedTarget) ? correctedTarget : (console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing"), null);
      }).filter(function(x) {
        return Boolean(x);
      });
    }, applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {
      var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
      markerMap[markerName] || (markerMap[markerName] = /* @__PURE__ */ new WeakMap());
      var markerCounter = markerMap[markerName], hiddenNodes = [], elementsToKeep = /* @__PURE__ */ new Set(), elementsToStop = new Set(targets), keep = function(el) {
        !el || elementsToKeep.has(el) || (elementsToKeep.add(el), keep(el.parentNode));
      };
      targets.forEach(keep);
      var deep = function(parent) {
        !parent || elementsToStop.has(parent) || Array.prototype.forEach.call(parent.children, function(node) {
          if (elementsToKeep.has(node))
            deep(node);
          else {
            var attr = node.getAttribute(controlAttribute), alreadyHidden = attr !== null && attr !== "false", counterValue = (counterMap.get(node) || 0) + 1, markerValue = (markerCounter.get(node) || 0) + 1;
            counterMap.set(node, counterValue), markerCounter.set(node, markerValue), hiddenNodes.push(node), counterValue === 1 && alreadyHidden && uncontrolledNodes.set(node, !0), markerValue === 1 && node.setAttribute(markerName, "true"), alreadyHidden || node.setAttribute(controlAttribute, "true");
          }
        });
      };
      return deep(parentNode), elementsToKeep.clear(), lockCount++, function() {
        hiddenNodes.forEach(function(node) {
          var counterValue = counterMap.get(node) - 1, markerValue = markerCounter.get(node) - 1;
          counterMap.set(node, counterValue), markerCounter.set(node, markerValue), counterValue || (uncontrolledNodes.has(node) || node.removeAttribute(controlAttribute), uncontrolledNodes.delete(node)), markerValue || node.removeAttribute(markerName);
        }), lockCount--, lockCount || (counterMap = /* @__PURE__ */ new WeakMap(), counterMap = /* @__PURE__ */ new WeakMap(), uncontrolledNodes = /* @__PURE__ */ new WeakMap(), markerMap = {});
      };
    }, hideOthers = function(originalTarget, parentNode, markerName) {
      markerName === void 0 && (markerName = "data-aria-hidden");
      var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]), activeParentNode = parentNode || getDefaultParent(originalTarget);
      return activeParentNode ? (targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]"))), applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden")) : function() {
        return null;
      };
    };
    exports.hideOthers = hideOthers;
    var inertOthers = function(originalTarget, parentNode, markerName) {
      markerName === void 0 && (markerName = "data-inert-ed");
      var activeParentNode = parentNode || getDefaultParent(originalTarget);
      return activeParentNode ? applyAttributeToOthers(originalTarget, activeParentNode, markerName, "inert") : function() {
        return null;
      };
    };
    exports.inertOthers = inertOthers;
    var supportsInert = function() {
      return typeof HTMLElement < "u" && HTMLElement.prototype.hasOwnProperty("inert");
    };
    exports.supportsInert = supportsInert;
    var suppressOthers = function(originalTarget, parentNode, markerName) {
      return markerName === void 0 && (markerName = "data-suppressed"), ((0, exports.supportsInert)() ? exports.inertOthers : exports.hideOthers)(originalTarget, parentNode, markerName);
    };
    exports.suppressOthers = suppressOthers;
  }
});

// ../../../node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b != "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e24) {
  var t17 = {};
  for (var p in s)
    Object.prototype.hasOwnProperty.call(s, p) && e24.indexOf(p) < 0 && (t17[p] = s[p]);
  if (s != null && typeof Object.getOwnPropertySymbols == "function")
    for (var i13 = 0, p = Object.getOwnPropertySymbols(s); i13 < p.length; i13++)
      e24.indexOf(p[i13]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i13]) && (t17[p[i13]] = s[p[i13]]);
  return t17;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r25 = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
    r25 = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i13 = decorators.length - 1; i13 >= 0; i13--)
      (d = decorators[i13]) && (r25 = (c < 3 ? d(r25) : c > 3 ? d(target, key, r25) : d(target, key)) || r25);
  return c > 3 && r25 && Object.defineProperty(target, key, r25), r25;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f != "function")
      throw new TypeError("Function expected");
    return f;
  }
  for (var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value", target = !descriptorIn && ctor ? contextIn.static ? ctor : ctor.prototype : null, descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {}), _, done = !1, i13 = decorators.length - 1; i13 >= 0; i13--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i13])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result != "object")
        throw new TypeError("Object expected");
      (_ = accept(result.get)) && (descriptor.get = _), (_ = accept(result.set)) && (descriptor.set = _), (_ = accept(result.init)) && initializers.unshift(_);
    } else
      (_ = accept(result)) && (kind === "field" ? initializers.unshift(_) : descriptor[key] = _);
  }
  target && Object.defineProperty(target, contextIn.name, descriptor), done = !0;
}
function __runInitializers(thisArg, initializers, value) {
  for (var useValue = arguments.length > 2, i13 = 0; i13 < initializers.length; i13++)
    value = useValue ? initializers[i13].call(thisArg, value) : initializers[i13].call(thisArg);
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x == "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix2) {
  return typeof name == "symbol" && (name = name.description ? "[".concat(name.description, "]") : ""), Object.defineProperty(f, "name", { configurable: !0, value: prefix2 ? "".concat(prefix2, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect == "object" && typeof Reflect.metadata == "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step2(generator.next(value));
      } catch (e24) {
        reject(e24);
      }
    }
    function rejected(value) {
      try {
        step2(generator.throw(value));
      } catch (e24) {
        reject(e24);
      }
    }
    function step2(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step2((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t17[0] & 1)
      throw t17[1];
    return t17[1];
  }, trys: [], ops: [] }, f, y, t17, g;
  return g = { next: verb(0), throw: verb(1), return: verb(2) }, typeof Symbol == "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step2([n, v]);
    };
  }
  function step2(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    for (; g && (g = 0, op[0] && (_ = 0)), _; )
      try {
        if (f = 1, y && (t17 = op[0] & 2 ? y.return : op[0] ? y.throw || ((t17 = y.return) && t17.call(y), 0) : y.next) && !(t17 = t17.call(y, op[1])).done)
          return t17;
        switch (y = 0, t17 && (op = [op[0] & 2, t17.value]), op[0]) {
          case 0:
          case 1:
            t17 = op;
            break;
          case 4:
            return _.label++, { value: op[1], done: !1 };
          case 5:
            _.label++, y = op[1], op = [0];
            continue;
          case 7:
            op = _.ops.pop(), _.trys.pop();
            continue;
          default:
            if (t17 = _.trys, !(t17 = t17.length > 0 && t17[t17.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t17 || op[1] > t17[0] && op[1] < t17[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t17[1]) {
              _.label = t17[1], t17 = op;
              break;
            }
            if (t17 && _.label < t17[2]) {
              _.label = t17[2], _.ops.push(op);
              break;
            }
            t17[2] && _.ops.pop(), _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e24) {
        op = [6, e24], y = 0;
      } finally {
        f = t17 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: !0 };
  }
}
function __exportStar(m, o3) {
  for (var p in m)
    p !== "default" && !Object.prototype.hasOwnProperty.call(o3, p) && __createBinding(o3, m, p);
}
function __values(o3) {
  var s = typeof Symbol == "function" && Symbol.iterator, m = s && o3[s], i13 = 0;
  if (m)
    return m.call(o3);
  if (o3 && typeof o3.length == "number")
    return {
      next: function() {
        return o3 && i13 >= o3.length && (o3 = void 0), { value: o3 && o3[i13++], done: !o3 };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o3, n) {
  var m = typeof Symbol == "function" && o3[Symbol.iterator];
  if (!m)
    return o3;
  var i13 = m.call(o3), r25, ar = [], e24;
  try {
    for (; (n === void 0 || n-- > 0) && !(r25 = i13.next()).done; )
      ar.push(r25.value);
  } catch (error2) {
    e24 = { error: error2 };
  } finally {
    try {
      r25 && !r25.done && (m = i13.return) && m.call(i13);
    } finally {
      if (e24)
        throw e24.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i13 = 0; i13 < arguments.length; i13++)
    ar = ar.concat(__read(arguments[i13]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i13 = 0, il = arguments.length; i13 < il; i13++)
    s += arguments[i13].length;
  for (var r25 = Array(s), k = 0, i13 = 0; i13 < il; i13++)
    for (var a9 = arguments[i13], j = 0, jl = a9.length; j < jl; j++, k++)
      r25[k] = a9[j];
  return r25;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i13 = 0, l10 = from.length, ar; i13 < l10; i13++)
      (ar || !(i13 in from)) && (ar || (ar = Array.prototype.slice.call(from, 0, i13)), ar[i13] = from[i13]);
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i13, q = [];
  return i13 = {}, verb("next"), verb("throw"), verb("return"), i13[Symbol.asyncIterator] = function() {
    return this;
  }, i13;
  function verb(n) {
    g[n] && (i13[n] = function(v) {
      return new Promise(function(a9, b) {
        q.push([n, v, a9, b]) > 1 || resume(n, v);
      });
    });
  }
  function resume(n, v) {
    try {
      step2(g[n](v));
    } catch (e24) {
      settle(q[0][3], e24);
    }
  }
  function step2(r25) {
    r25.value instanceof __await ? Promise.resolve(r25.value.v).then(fulfill, reject) : settle(q[0][2], r25);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    f(v), q.shift(), q.length && resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o3) {
  var i13, p;
  return i13 = {}, verb("next"), verb("throw", function(e24) {
    throw e24;
  }), verb("return"), i13[Symbol.iterator] = function() {
    return this;
  }, i13;
  function verb(n, f) {
    i13[n] = o3[n] ? function(v) {
      return (p = !p) ? { value: __await(o3[n](v)), done: !1 } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o3) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o3[Symbol.asyncIterator], i13;
  return m ? m.call(o3) : (o3 = typeof __values == "function" ? __values(o3) : o3[Symbol.iterator](), i13 = {}, verb("next"), verb("throw"), verb("return"), i13[Symbol.asyncIterator] = function() {
    return this;
  }, i13);
  function verb(n) {
    i13[n] = o3[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o3[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  return Object.defineProperty ? Object.defineProperty(cooked, "raw", { value: raw }) : cooked.raw = raw, cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null)
    for (var k in mod)
      k !== "default" && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
  return __setModuleDefault(result, mod), result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver != "object" && typeof receiver != "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state == "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value != null) {
    if (typeof value != "object")
      throw new TypeError("Object expected.");
    var dispose;
    if (async) {
      if (!Symbol.asyncDispose)
        throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose)
        throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
    }
    if (typeof dispose != "function")
      throw new TypeError("Object not disposable.");
    env.stack.push({ value, dispose, async });
  } else
    async && env.stack.push({ async: !0 });
  return value;
}
function __disposeResources(env) {
  function fail(e24) {
    env.error = env.hasError ? new _SuppressedError(e24, env.error, "An error was suppressed during disposal.") : e24, env.hasError = !0;
  }
  function next() {
    for (; env.stack.length; ) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async)
          return Promise.resolve(result).then(next, function(e24) {
            return fail(e24), next();
          });
      } catch (e24) {
        fail(e24);
      }
    }
    if (env.hasError)
      throw env.error;
  }
  return next();
}
var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default, init_tslib_es6 = __esm({
  "../../../node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      return extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          Object.prototype.hasOwnProperty.call(b2, p) && (d2[p] = b2[p]);
      }, extendStatics(d, b);
    };
    __assign = function() {
      return __assign = Object.assign || function(t17) {
        for (var s, i13 = 1, n = arguments.length; i13 < n; i13++) {
          s = arguments[i13];
          for (var p in s)
            Object.prototype.hasOwnProperty.call(s, p) && (t17[p] = s[p]);
        }
        return t17;
      }, __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o3, m, k, k2) {
      k2 === void 0 && (k2 = k);
      var desc = Object.getOwnPropertyDescriptor(m, k);
      (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) && (desc = { enumerable: !0, get: function() {
        return m[k];
      } }), Object.defineProperty(o3, k2, desc);
    } : function(o3, m, k, k2) {
      k2 === void 0 && (k2 = k), o3[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o3, v) {
      Object.defineProperty(o3, "default", { enumerable: !0, value: v });
    } : function(o3, v) {
      o3.default = v;
    };
    _SuppressedError = typeof SuppressedError == "function" ? SuppressedError : function(error2, suppressed, message2) {
      var e24 = new Error(message2);
      return e24.name = "SuppressedError", e24.error = error2, e24.suppressed = suppressed, e24;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources
    };
  }
});

// ../../../node_modules/react-remove-scroll-bar/dist/es5/constants.js
var require_constants = __commonJS({
  "../../../node_modules/react-remove-scroll-bar/dist/es5/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.removedBarSizeVariable = exports.noScrollbarsClassName = exports.fullWidthClassName = exports.zeroRightClassName = void 0;
    exports.zeroRightClassName = "right-scroll-bar-position";
    exports.fullWidthClassName = "width-before-scroll-bar";
    exports.noScrollbarsClassName = "with-scroll-bars-hidden";
    exports.removedBarSizeVariable = "--removed-body-scroll-bar-size";
  }
});

// ../../../node_modules/use-callback-ref/dist/es5/assignRef.js
var require_assignRef = __commonJS({
  "../../../node_modules/use-callback-ref/dist/es5/assignRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.assignRef = void 0;
    function assignRef(ref, value) {
      return typeof ref == "function" ? ref(value) : ref && (ref.current = value), ref;
    }
    exports.assignRef = assignRef;
  }
});

// ../../../node_modules/use-callback-ref/dist/es5/useRef.js
var require_useRef = __commonJS({
  "../../../node_modules/use-callback-ref/dist/es5/useRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.useCallbackRef = void 0;
    var react_1 = require_react();
    function useCallbackRef(initialValue, callback) {
      var ref = (0, react_1.useState)(function() {
        return {
          // value
          value: initialValue,
          // last callback
          callback,
          // "memoized" public interface
          facade: {
            get current() {
              return ref.value;
            },
            set current(value) {
              var last = ref.value;
              last !== value && (ref.value = value, ref.callback(value, last));
            }
          }
        };
      })[0];
      return ref.callback = callback, ref.facade;
    }
    exports.useCallbackRef = useCallbackRef;
  }
});

// ../../../node_modules/use-callback-ref/dist/es5/createRef.js
var require_createRef = __commonJS({
  "../../../node_modules/use-callback-ref/dist/es5/createRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.createCallbackRef = void 0;
    function createCallbackRef(callback) {
      var current = null;
      return {
        get current() {
          return current;
        },
        set current(value) {
          var last = current;
          last !== value && (current = value, callback(value, last));
        }
      };
    }
    exports.createCallbackRef = createCallbackRef;
  }
});

// ../../../node_modules/use-callback-ref/dist/es5/mergeRef.js
var require_mergeRef = __commonJS({
  "../../../node_modules/use-callback-ref/dist/es5/mergeRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.mergeRefs = void 0;
    var assignRef_1 = require_assignRef(), createRef_1 = require_createRef();
    function mergeRefs(refs) {
      return (0, createRef_1.createCallbackRef)(function(newValue) {
        return refs.forEach(function(ref) {
          return (0, assignRef_1.assignRef)(ref, newValue);
        });
      });
    }
    exports.mergeRefs = mergeRefs;
  }
});

// ../../../node_modules/use-callback-ref/dist/es5/useMergeRef.js
var require_useMergeRef = __commonJS({
  "../../../node_modules/use-callback-ref/dist/es5/useMergeRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.useMergeRefs = void 0;
    var assignRef_1 = require_assignRef(), useRef_1 = require_useRef();
    function useMergeRefs(refs, defaultValue) {
      return (0, useRef_1.useCallbackRef)(defaultValue || null, function(newValue) {
        return refs.forEach(function(ref) {
          return (0, assignRef_1.assignRef)(ref, newValue);
        });
      });
    }
    exports.useMergeRefs = useMergeRefs;
  }
});

// ../../../node_modules/use-callback-ref/dist/es5/useTransformRef.js
var require_useTransformRef = __commonJS({
  "../../../node_modules/use-callback-ref/dist/es5/useTransformRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.useTransformRef = void 0;
    var assignRef_1 = require_assignRef(), useRef_1 = require_useRef();
    function useTransformRef(ref, transformer) {
      return (0, useRef_1.useCallbackRef)(null, function(value) {
        return (0, assignRef_1.assignRef)(ref, transformer(value));
      });
    }
    exports.useTransformRef = useTransformRef;
  }
});

// ../../../node_modules/use-callback-ref/dist/es5/transformRef.js
var require_transformRef = __commonJS({
  "../../../node_modules/use-callback-ref/dist/es5/transformRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.transformRef = void 0;
    var assignRef_1 = require_assignRef(), createRef_1 = require_createRef();
    function transformRef(ref, transformer) {
      return (0, createRef_1.createCallbackRef)(function(value) {
        return (0, assignRef_1.assignRef)(ref, transformer(value));
      });
    }
    exports.transformRef = transformRef;
  }
});

// ../../../node_modules/use-callback-ref/dist/es5/refToCallback.js
var require_refToCallback = __commonJS({
  "../../../node_modules/use-callback-ref/dist/es5/refToCallback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.useRefToCallback = exports.refToCallback = void 0;
    function refToCallback(ref) {
      return function(newValue) {
        typeof ref == "function" ? ref(newValue) : ref && (ref.current = newValue);
      };
    }
    exports.refToCallback = refToCallback;
    var nullCallback = function() {
      return null;
    }, weakMem = /* @__PURE__ */ new WeakMap(), weakMemoize = function(ref) {
      var usedRef = ref || nullCallback, storedRef = weakMem.get(usedRef);
      if (storedRef)
        return storedRef;
      var cb = refToCallback(usedRef);
      return weakMem.set(usedRef, cb), cb;
    };
    function useRefToCallback(ref) {
      return weakMemoize(ref);
    }
    exports.useRefToCallback = useRefToCallback;
  }
});

// ../../../node_modules/use-callback-ref/dist/es5/index.js
var require_es52 = __commonJS({
  "../../../node_modules/use-callback-ref/dist/es5/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.useRefToCallback = exports.refToCallback = exports.transformRef = exports.useTransformRef = exports.useMergeRefs = exports.mergeRefs = exports.createCallbackRef = exports.useCallbackRef = exports.assignRef = void 0;
    var assignRef_1 = require_assignRef();
    Object.defineProperty(exports, "assignRef", { enumerable: !0, get: function() {
      return assignRef_1.assignRef;
    } });
    var useRef_1 = require_useRef();
    Object.defineProperty(exports, "useCallbackRef", { enumerable: !0, get: function() {
      return useRef_1.useCallbackRef;
    } });
    var createRef_1 = require_createRef();
    Object.defineProperty(exports, "createCallbackRef", { enumerable: !0, get: function() {
      return createRef_1.createCallbackRef;
    } });
    var mergeRef_1 = require_mergeRef();
    Object.defineProperty(exports, "mergeRefs", { enumerable: !0, get: function() {
      return mergeRef_1.mergeRefs;
    } });
    var useMergeRef_1 = require_useMergeRef();
    Object.defineProperty(exports, "useMergeRefs", { enumerable: !0, get: function() {
      return useMergeRef_1.useMergeRefs;
    } });
    var useTransformRef_1 = require_useTransformRef();
    Object.defineProperty(exports, "useTransformRef", { enumerable: !0, get: function() {
      return useTransformRef_1.useTransformRef;
    } });
    var transformRef_1 = require_transformRef();
    Object.defineProperty(exports, "transformRef", { enumerable: !0, get: function() {
      return transformRef_1.transformRef;
    } });
    var refToCallback_1 = require_refToCallback();
    Object.defineProperty(exports, "refToCallback", { enumerable: !0, get: function() {
      return refToCallback_1.refToCallback;
    } });
    Object.defineProperty(exports, "useRefToCallback", { enumerable: !0, get: function() {
      return refToCallback_1.useRefToCallback;
    } });
  }
});

// ../../../node_modules/detect-node-es/es5/node.js
var require_node = __commonJS({
  "../../../node_modules/detect-node-es/es5/node.js"(exports, module2) {
    module2.exports.isNode = Object.prototype.toString.call(typeof process < "u" ? process : 0) === "[object process]";
  }
});

// ../../../node_modules/use-sidecar/dist/es5/env.js
var require_env = __commonJS({
  "../../../node_modules/use-sidecar/dist/es5/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.env = void 0;
    var detect_node_es_1 = require_node();
    exports.env = {
      isNode: detect_node_es_1.isNode,
      forceCache: !1
    };
  }
});

// ../../../node_modules/use-sidecar/dist/es5/hook.js
var require_hook = __commonJS({
  "../../../node_modules/use-sidecar/dist/es5/hook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.useSidecar = void 0;
    var react_1 = require_react(), env_1 = require_env(), cache = /* @__PURE__ */ new WeakMap(), NO_OPTIONS = {};
    function useSidecar(importer, effect) {
      var options = effect && effect.options || NO_OPTIONS;
      return env_1.env.isNode && !options.ssr ? [null, null] : useRealSidecar(importer, effect);
    }
    exports.useSidecar = useSidecar;
    function useRealSidecar(importer, effect) {
      var options = effect && effect.options || NO_OPTIONS, couldUseCache = env_1.env.forceCache || env_1.env.isNode && !!options.ssr || !options.async, _a = (0, react_1.useState)(couldUseCache ? function() {
        return cache.get(importer);
      } : void 0), Car = _a[0], setCar = _a[1], _b = (0, react_1.useState)(null), error2 = _b[0], setError = _b[1];
      return (0, react_1.useEffect)(function() {
        Car || importer().then(function(car) {
          var resolved = effect ? effect.read() : car.default || car;
          if (!resolved) {
            console.error("Sidecar error: with importer", importer);
            var error_1;
            throw effect ? (console.error("Sidecar error: with medium", effect), error_1 = new Error("Sidecar medium was not found")) : error_1 = new Error("Sidecar was not found in exports"), setError(function() {
              return error_1;
            }), error_1;
          }
          cache.set(importer, resolved), setCar(function() {
            return resolved;
          });
        }, function(e24) {
          return setError(function() {
            return e24;
          });
        });
      }, []), [Car, error2];
    }
  }
});

// ../../../node_modules/use-sidecar/dist/es5/hoc.js
var require_hoc = __commonJS({
  "../../../node_modules/use-sidecar/dist/es5/hoc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.sidecar = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports)), React12 = tslib_1.__importStar(require_react()), hook_1 = require_hook();
    function sidecar(importer, errorComponent) {
      var ErrorCase = function() {
        return errorComponent;
      };
      return function(props) {
        var _a = (0, hook_1.useSidecar)(importer, props.sideCar), Car = _a[0], error2 = _a[1];
        return error2 && errorComponent ? ErrorCase : Car ? React12.createElement(Car, tslib_1.__assign({}, props)) : null;
      };
    }
    exports.sidecar = sidecar;
  }
});

// ../../../node_modules/use-sidecar/dist/es5/config.js
var require_config = __commonJS({
  "../../../node_modules/use-sidecar/dist/es5/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.setConfig = exports.config = void 0;
    exports.config = {
      onError: function(e24) {
        return console.error(e24);
      }
    };
    var setConfig = function(conf) {
      Object.assign(exports.config, conf);
    };
    exports.setConfig = setConfig;
  }
});

// ../../../node_modules/use-sidecar/dist/es5/medium.js
var require_medium = __commonJS({
  "../../../node_modules/use-sidecar/dist/es5/medium.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.createSidecarMedium = exports.createMedium = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    function ItoI(a9) {
      return a9;
    }
    function innerCreateMedium(defaults, middleware) {
      middleware === void 0 && (middleware = ItoI);
      var buffer = [], assigned = !1, medium = {
        read: function() {
          if (assigned)
            throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
          return buffer.length ? buffer[buffer.length - 1] : defaults;
        },
        useMedium: function(data) {
          var item = middleware(data, assigned);
          return buffer.push(item), function() {
            buffer = buffer.filter(function(x) {
              return x !== item;
            });
          };
        },
        assignSyncMedium: function(cb) {
          for (assigned = !0; buffer.length; ) {
            var cbs = buffer;
            buffer = [], cbs.forEach(cb);
          }
          buffer = {
            push: function(x) {
              return cb(x);
            },
            filter: function() {
              return buffer;
            }
          };
        },
        assignMedium: function(cb) {
          assigned = !0;
          var pendingQueue = [];
          if (buffer.length) {
            var cbs = buffer;
            buffer = [], cbs.forEach(cb), pendingQueue = buffer;
          }
          var executeQueue = function() {
            var cbs2 = pendingQueue;
            pendingQueue = [], cbs2.forEach(cb);
          }, cycle = function() {
            return Promise.resolve().then(executeQueue);
          };
          cycle(), buffer = {
            push: function(x) {
              pendingQueue.push(x), cycle();
            },
            filter: function(filter2) {
              return pendingQueue = pendingQueue.filter(filter2), buffer;
            }
          };
        }
      };
      return medium;
    }
    function createMedium(defaults, middleware) {
      return middleware === void 0 && (middleware = ItoI), innerCreateMedium(defaults, middleware);
    }
    exports.createMedium = createMedium;
    function createSidecarMedium(options) {
      options === void 0 && (options = {});
      var medium = innerCreateMedium(null);
      return medium.options = tslib_1.__assign({ async: !0, ssr: !1 }, options), medium;
    }
    exports.createSidecarMedium = createSidecarMedium;
  }
});

// ../../../node_modules/use-sidecar/dist/es5/renderProp.js
var require_renderProp = __commonJS({
  "../../../node_modules/use-sidecar/dist/es5/renderProp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.renderCar = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports)), React12 = tslib_1.__importStar(require_react()), react_1 = require_react();
    function renderCar(WrappedComponent, defaults) {
      function State(_a) {
        var stateRef = _a.stateRef, props = _a.props, renderTarget = (0, react_1.useCallback)(function() {
          for (var args = [], _i = 0; _i < arguments.length; _i++)
            args[_i] = arguments[_i];
          return (0, react_1.useLayoutEffect)(function() {
            stateRef.current(args);
          }), null;
        }, []);
        return React12.createElement(WrappedComponent, tslib_1.__assign({}, props, { children: renderTarget }));
      }
      var Children = React12.memo(function(_a) {
        var stateRef = _a.stateRef, defaultState = _a.defaultState, children = _a.children, _b = (0, react_1.useState)(defaultState.current), state = _b[0], setState = _b[1];
        return (0, react_1.useEffect)(function() {
          stateRef.current = setState;
        }, []), children.apply(void 0, state);
      }, function() {
        return !0;
      });
      return function(props) {
        var defaultState = React12.useRef(defaults(props)), ref = React12.useRef(function(state) {
          return defaultState.current = state;
        });
        return React12.createElement(
          React12.Fragment,
          null,
          React12.createElement(State, { stateRef: ref, props }),
          React12.createElement(Children, { stateRef: ref, defaultState, children: props.children })
        );
      };
    }
    exports.renderCar = renderCar;
  }
});

// ../../../node_modules/use-sidecar/dist/es5/exports.js
var require_exports = __commonJS({
  "../../../node_modules/use-sidecar/dist/es5/exports.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.exportSidecar = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports)), React12 = tslib_1.__importStar(require_react()), SideCar = function(_a) {
      var sideCar = _a.sideCar, rest = tslib_1.__rest(_a, ["sideCar"]);
      if (!sideCar)
        throw new Error("Sidecar: please provide `sideCar` property to import the right car");
      var Target = sideCar.read();
      if (!Target)
        throw new Error("Sidecar medium not found");
      return React12.createElement(Target, tslib_1.__assign({}, rest));
    };
    SideCar.isSideCarExport = !0;
    function exportSidecar(medium, exported) {
      return medium.useMedium(exported), SideCar;
    }
    exports.exportSidecar = exportSidecar;
  }
});

// ../../../node_modules/use-sidecar/dist/es5/index.js
var require_es53 = __commonJS({
  "../../../node_modules/use-sidecar/dist/es5/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.exportSidecar = exports.renderCar = exports.createSidecarMedium = exports.createMedium = exports.setConfig = exports.useSidecar = exports.sidecar = void 0;
    var hoc_1 = require_hoc();
    Object.defineProperty(exports, "sidecar", { enumerable: !0, get: function() {
      return hoc_1.sidecar;
    } });
    var hook_1 = require_hook();
    Object.defineProperty(exports, "useSidecar", { enumerable: !0, get: function() {
      return hook_1.useSidecar;
    } });
    var config_1 = require_config();
    Object.defineProperty(exports, "setConfig", { enumerable: !0, get: function() {
      return config_1.setConfig;
    } });
    var medium_1 = require_medium();
    Object.defineProperty(exports, "createMedium", { enumerable: !0, get: function() {
      return medium_1.createMedium;
    } });
    Object.defineProperty(exports, "createSidecarMedium", { enumerable: !0, get: function() {
      return medium_1.createSidecarMedium;
    } });
    var renderProp_1 = require_renderProp();
    Object.defineProperty(exports, "renderCar", { enumerable: !0, get: function() {
      return renderProp_1.renderCar;
    } });
    var exports_1 = require_exports();
    Object.defineProperty(exports, "exportSidecar", { enumerable: !0, get: function() {
      return exports_1.exportSidecar;
    } });
  }
});

// ../../../node_modules/react-remove-scroll/dist/es5/medium.js
var require_medium2 = __commonJS({
  "../../../node_modules/react-remove-scroll/dist/es5/medium.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.effectCar = void 0;
    var use_sidecar_1 = require_es53();
    exports.effectCar = (0, use_sidecar_1.createSidecarMedium)();
  }
});

// ../../../node_modules/react-remove-scroll/dist/es5/UI.js
var require_UI = __commonJS({
  "../../../node_modules/react-remove-scroll/dist/es5/UI.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.RemoveScroll = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports)), React12 = tslib_1.__importStar(require_react()), constants_1 = require_constants(), use_callback_ref_1 = require_es52(), medium_1 = require_medium2(), nothing = function() {
    }, RemoveScroll = React12.forwardRef(function(props, parentRef) {
      var ref = React12.useRef(null), _a = React12.useState({
        onScrollCapture: nothing,
        onWheelCapture: nothing,
        onTouchMoveCapture: nothing
      }), callbacks = _a[0], setCallbacks = _a[1], forwardProps = props.forwardProps, children = props.children, className2 = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container3 = _b === void 0 ? "div" : _b, rest = tslib_1.__rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]), SideCar = sideCar, containerRef = (0, use_callback_ref_1.useMergeRefs)([ref, parentRef]), containerProps = tslib_1.__assign(tslib_1.__assign({}, rest), callbacks);
      return React12.createElement(
        React12.Fragment,
        null,
        enabled && React12.createElement(SideCar, { sideCar: medium_1.effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref }),
        forwardProps ? React12.cloneElement(React12.Children.only(children), tslib_1.__assign(tslib_1.__assign({}, containerProps), { ref: containerRef })) : React12.createElement(Container3, tslib_1.__assign({}, containerProps, { className: className2, ref: containerRef }), children)
      );
    });
    exports.RemoveScroll = RemoveScroll;
    RemoveScroll.defaultProps = {
      enabled: !0,
      removeScrollBar: !0,
      inert: !1
    };
    RemoveScroll.classNames = {
      fullWidth: constants_1.fullWidthClassName,
      zeroRight: constants_1.zeroRightClassName
    };
  }
});

// ../../../node_modules/get-nonce/dist/es5/index.js
var require_es54 = __commonJS({
  "../../../node_modules/get-nonce/dist/es5/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var currentNonce;
    exports.setNonce = function(nonce) {
      currentNonce = nonce;
    };
    exports.getNonce = function() {
      if (currentNonce)
        return currentNonce;
      if (typeof __webpack_nonce__ < "u")
        return __webpack_nonce__;
    };
  }
});

// ../../../node_modules/react-style-singleton/dist/es5/singleton.js
var require_singleton = __commonJS({
  "../../../node_modules/react-style-singleton/dist/es5/singleton.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.stylesheetSingleton = void 0;
    var get_nonce_1 = require_es54();
    function makeStyleTag() {
      if (!document)
        return null;
      var tag = document.createElement("style");
      tag.type = "text/css";
      var nonce = (0, get_nonce_1.getNonce)();
      return nonce && tag.setAttribute("nonce", nonce), tag;
    }
    function injectStyles(tag, css) {
      tag.styleSheet ? tag.styleSheet.cssText = css : tag.appendChild(document.createTextNode(css));
    }
    function insertStyleTag(tag) {
      var head = document.head || document.getElementsByTagName("head")[0];
      head.appendChild(tag);
    }
    var stylesheetSingleton = function() {
      var counter = 0, stylesheet = null;
      return {
        add: function(style) {
          counter == 0 && (stylesheet = makeStyleTag()) && (injectStyles(stylesheet, style), insertStyleTag(stylesheet)), counter++;
        },
        remove: function() {
          counter--, !counter && stylesheet && (stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet), stylesheet = null);
        }
      };
    };
    exports.stylesheetSingleton = stylesheetSingleton;
  }
});

// ../../../node_modules/react-style-singleton/dist/es5/hook.js
var require_hook2 = __commonJS({
  "../../../node_modules/react-style-singleton/dist/es5/hook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.styleHookSingleton = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports)), React12 = tslib_1.__importStar(require_react()), singleton_1 = require_singleton(), styleHookSingleton = function() {
      var sheet = (0, singleton_1.stylesheetSingleton)();
      return function(styles, isDynamic) {
        React12.useEffect(function() {
          return sheet.add(styles), function() {
            sheet.remove();
          };
        }, [styles && isDynamic]);
      };
    };
    exports.styleHookSingleton = styleHookSingleton;
  }
});

// ../../../node_modules/react-style-singleton/dist/es5/component.js
var require_component = __commonJS({
  "../../../node_modules/react-style-singleton/dist/es5/component.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.styleSingleton = void 0;
    var hook_1 = require_hook2(), styleSingleton = function() {
      var useStyle2 = (0, hook_1.styleHookSingleton)(), Sheet = function(_a) {
        var styles = _a.styles, dynamic = _a.dynamic;
        return useStyle2(styles, dynamic), null;
      };
      return Sheet;
    };
    exports.styleSingleton = styleSingleton;
  }
});

// ../../../node_modules/react-style-singleton/dist/es5/index.js
var require_es55 = __commonJS({
  "../../../node_modules/react-style-singleton/dist/es5/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.styleHookSingleton = exports.stylesheetSingleton = exports.styleSingleton = void 0;
    var component_1 = require_component();
    Object.defineProperty(exports, "styleSingleton", { enumerable: !0, get: function() {
      return component_1.styleSingleton;
    } });
    var singleton_1 = require_singleton();
    Object.defineProperty(exports, "stylesheetSingleton", { enumerable: !0, get: function() {
      return singleton_1.stylesheetSingleton;
    } });
    var hook_1 = require_hook2();
    Object.defineProperty(exports, "styleHookSingleton", { enumerable: !0, get: function() {
      return hook_1.styleHookSingleton;
    } });
  }
});

// ../../../node_modules/react-remove-scroll-bar/dist/es5/utils.js
var require_utils2 = __commonJS({
  "../../../node_modules/react-remove-scroll-bar/dist/es5/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.getGapWidth = exports.zeroGap = void 0;
    exports.zeroGap = {
      left: 0,
      top: 0,
      right: 0,
      gap: 0
    };
    var parse = function(x) {
      return parseInt(x || "", 10) || 0;
    }, getOffset = function(gapMode) {
      var cs = window.getComputedStyle(document.body), left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"], top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"], right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
      return [parse(left), parse(top), parse(right)];
    }, getGapWidth = function(gapMode) {
      if (gapMode === void 0 && (gapMode = "margin"), typeof window > "u")
        return exports.zeroGap;
      var offsets = getOffset(gapMode), documentWidth = document.documentElement.clientWidth, windowWidth = window.innerWidth;
      return {
        left: offsets[0],
        top: offsets[1],
        right: offsets[2],
        gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
      };
    };
    exports.getGapWidth = getGapWidth;
  }
});

// ../../../node_modules/react-remove-scroll-bar/dist/es5/component.js
var require_component2 = __commonJS({
  "../../../node_modules/react-remove-scroll-bar/dist/es5/component.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.RemoveScrollBar = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports)), React12 = tslib_1.__importStar(require_react()), react_style_singleton_1 = require_es55(), constants_1 = require_constants(), utils_1 = require_utils2(), Style = (0, react_style_singleton_1.styleSingleton)(), getStyles = function(_a, allowRelative, gapMode, important) {
      var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;
      return gapMode === void 0 && (gapMode = "margin"), `
  .`.concat(constants_1.noScrollbarsClassName, ` {
   overflow: hidden `).concat(important, `;
   padding-right: `).concat(gap, "px ").concat(important, `;
  }
  body {
    overflow: hidden `).concat(important, `;
    overscroll-behavior: contain;
    `).concat([
        allowRelative && "position: relative ".concat(important, ";"),
        gapMode === "margin" && `
    padding-left: `.concat(left, `px;
    padding-top: `).concat(top, `px;
    padding-right: `).concat(right, `px;
    margin-left:0;
    margin-top:0;
    margin-right: `).concat(gap, "px ").concat(important, `;
    `),
        gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
      ].filter(Boolean).join(""), `
  }
  
  .`).concat(constants_1.zeroRightClassName, ` {
    right: `).concat(gap, "px ").concat(important, `;
  }
  
  .`).concat(constants_1.fullWidthClassName, ` {
    margin-right: `).concat(gap, "px ").concat(important, `;
  }
  
  .`).concat(constants_1.zeroRightClassName, " .").concat(constants_1.zeroRightClassName, ` {
    right: 0 `).concat(important, `;
  }
  
  .`).concat(constants_1.fullWidthClassName, " .").concat(constants_1.fullWidthClassName, ` {
    margin-right: 0 `).concat(important, `;
  }
  
  body {
    `).concat(constants_1.removedBarSizeVariable, ": ").concat(gap, `px;
  }
`);
    }, RemoveScrollBar = function(props) {
      var noRelative = props.noRelative, noImportant = props.noImportant, _a = props.gapMode, gapMode = _a === void 0 ? "margin" : _a, gap = React12.useMemo(function() {
        return (0, utils_1.getGapWidth)(gapMode);
      }, [gapMode]);
      return React12.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, noImportant ? "" : "!important") });
    };
    exports.RemoveScrollBar = RemoveScrollBar;
  }
});

// ../../../node_modules/react-remove-scroll-bar/dist/es5/index.js
var require_es56 = __commonJS({
  "../../../node_modules/react-remove-scroll-bar/dist/es5/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.getGapWidth = exports.removedBarSizeVariable = exports.noScrollbarsClassName = exports.fullWidthClassName = exports.zeroRightClassName = exports.RemoveScrollBar = void 0;
    var component_1 = require_component2();
    Object.defineProperty(exports, "RemoveScrollBar", { enumerable: !0, get: function() {
      return component_1.RemoveScrollBar;
    } });
    var constants_1 = require_constants();
    Object.defineProperty(exports, "zeroRightClassName", { enumerable: !0, get: function() {
      return constants_1.zeroRightClassName;
    } });
    Object.defineProperty(exports, "fullWidthClassName", { enumerable: !0, get: function() {
      return constants_1.fullWidthClassName;
    } });
    Object.defineProperty(exports, "noScrollbarsClassName", { enumerable: !0, get: function() {
      return constants_1.noScrollbarsClassName;
    } });
    Object.defineProperty(exports, "removedBarSizeVariable", { enumerable: !0, get: function() {
      return constants_1.removedBarSizeVariable;
    } });
    var utils_1 = require_utils2();
    Object.defineProperty(exports, "getGapWidth", { enumerable: !0, get: function() {
      return utils_1.getGapWidth;
    } });
  }
});

// ../../../node_modules/react-remove-scroll/dist/es5/aggresiveCapture.js
var require_aggresiveCapture = __commonJS({
  "../../../node_modules/react-remove-scroll/dist/es5/aggresiveCapture.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.nonPassive = void 0;
    var passiveSupported = !1;
    if (typeof window < "u")
      try {
        options = Object.defineProperty({}, "passive", {
          get: function() {
            return passiveSupported = !0, !0;
          }
        }), window.addEventListener("test", options, options), window.removeEventListener("test", options, options);
      } catch {
        passiveSupported = !1;
      }
    var options;
    exports.nonPassive = passiveSupported ? { passive: !1 } : !1;
  }
});

// ../../../node_modules/react-remove-scroll/dist/es5/handleScroll.js
var require_handleScroll = __commonJS({
  "../../../node_modules/react-remove-scroll/dist/es5/handleScroll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.handleScroll = exports.locationCouldBeScrolled = void 0;
    var alwaysContainsScroll = function(node) {
      return node.tagName === "TEXTAREA";
    }, elementCanBeScrolled = function(node, overflow) {
      var styles = window.getComputedStyle(node);
      return (
        // not-not-scrollable
        styles[overflow] !== "hidden" && // contains scroll inside self
        !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === "visible")
      );
    }, elementCouldBeVScrolled = function(node) {
      return elementCanBeScrolled(node, "overflowY");
    }, elementCouldBeHScrolled = function(node) {
      return elementCanBeScrolled(node, "overflowX");
    }, locationCouldBeScrolled = function(axis, node) {
      var current = node;
      do {
        typeof ShadowRoot < "u" && current instanceof ShadowRoot && (current = current.host);
        var isScrollable = elementCouldBeScrolled(axis, current);
        if (isScrollable) {
          var _a = getScrollVariables(axis, current), s = _a[1], d = _a[2];
          if (s > d)
            return !0;
        }
        current = current.parentNode;
      } while (current && current !== document.body);
      return !1;
    };
    exports.locationCouldBeScrolled = locationCouldBeScrolled;
    var getVScrollVariables = function(_a) {
      var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
      return [
        scrollTop,
        scrollHeight,
        clientHeight
      ];
    }, getHScrollVariables = function(_a) {
      var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
      return [
        scrollLeft,
        scrollWidth,
        clientWidth
      ];
    }, elementCouldBeScrolled = function(axis, node) {
      return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
    }, getScrollVariables = function(axis, node) {
      return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
    }, getDirectionFactor = function(axis, direction) {
      return axis === "h" && direction === "rtl" ? -1 : 1;
    }, handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
      var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction), delta = directionFactor * sourceDelta, target = event.target, targetInLock = endTarget.contains(target), shouldCancelScroll = !1, isDeltaPositive = delta > 0, availableScroll = 0, availableScrollTop = 0;
      do {
        var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2], elementScroll = scroll_1 - capacity - directionFactor * position;
        (position || elementScroll) && elementCouldBeScrolled(axis, target) && (availableScroll += elementScroll, availableScrollTop += position), target = target.parentNode;
      } while (
        // portaled content
        !targetInLock && target !== document.body || // self content
        targetInLock && (endTarget.contains(target) || endTarget === target)
      );
      return (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll) || !isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) && (shouldCancelScroll = !0), shouldCancelScroll;
    };
    exports.handleScroll = handleScroll;
  }
});

// ../../../node_modules/react-remove-scroll/dist/es5/SideEffect.js
var require_SideEffect = __commonJS({
  "../../../node_modules/react-remove-scroll/dist/es5/SideEffect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.RemoveScrollSideCar = exports.getDeltaXY = exports.getTouchXY = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports)), React12 = tslib_1.__importStar(require_react()), react_remove_scroll_bar_1 = require_es56(), react_style_singleton_1 = require_es55(), aggresiveCapture_1 = require_aggresiveCapture(), handleScroll_1 = require_handleScroll(), getTouchXY = function(event) {
      return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
    };
    exports.getTouchXY = getTouchXY;
    var getDeltaXY = function(event) {
      return [event.deltaX, event.deltaY];
    };
    exports.getDeltaXY = getDeltaXY;
    var extractRef = function(ref) {
      return ref && "current" in ref ? ref.current : ref;
    }, deltaCompare = function(x, y) {
      return x[0] === y[0] && x[1] === y[1];
    }, generateStyle = function(id3) {
      return `
  .block-interactivity-`.concat(id3, ` {pointer-events: none;}
  .allow-interactivity-`).concat(id3, ` {pointer-events: all;}
`);
    }, idCounter = 0, lockStack = [];
    function RemoveScrollSideCar(props) {
      var shouldPreventQueue = React12.useRef([]), touchStartRef = React12.useRef([0, 0]), activeAxis = React12.useRef(), id3 = React12.useState(idCounter++)[0], Style = React12.useState(function() {
        return (0, react_style_singleton_1.styleSingleton)();
      })[0], lastProps = React12.useRef(props);
      React12.useEffect(function() {
        lastProps.current = props;
      }, [props]), React12.useEffect(function() {
        if (props.inert) {
          document.body.classList.add("block-interactivity-".concat(id3));
          var allow_1 = tslib_1.__spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), !0).filter(Boolean);
          return allow_1.forEach(function(el) {
            return el.classList.add("allow-interactivity-".concat(id3));
          }), function() {
            document.body.classList.remove("block-interactivity-".concat(id3)), allow_1.forEach(function(el) {
              return el.classList.remove("allow-interactivity-".concat(id3));
            });
          };
        }
      }, [props.inert, props.lockRef.current, props.shards]);
      var shouldCancelEvent = React12.useCallback(function(event, parent) {
        if ("touches" in event && event.touches.length === 2)
          return !lastProps.current.allowPinchZoom;
        var touch = (0, exports.getTouchXY)(event), touchStart = touchStartRef.current, deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0], deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1], currentAxis, target = event.target, moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
        if ("touches" in event && moveDirection === "h" && target.type === "range")
          return !1;
        var canBeScrolledInMainDirection = (0, handleScroll_1.locationCouldBeScrolled)(moveDirection, target);
        if (!canBeScrolledInMainDirection)
          return !0;
        if (canBeScrolledInMainDirection ? currentAxis = moveDirection : (currentAxis = moveDirection === "v" ? "h" : "v", canBeScrolledInMainDirection = (0, handleScroll_1.locationCouldBeScrolled)(moveDirection, target)), !canBeScrolledInMainDirection)
          return !1;
        if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY) && (activeAxis.current = currentAxis), !currentAxis)
          return !0;
        var cancelingAxis = activeAxis.current || currentAxis;
        return (0, handleScroll_1.handleScroll)(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, !0);
      }, []), shouldPrevent = React12.useCallback(function(_event) {
        var event = _event;
        if (!(!lockStack.length || lockStack[lockStack.length - 1] !== Style)) {
          var delta = "deltaY" in event ? (0, exports.getDeltaXY)(event) : (0, exports.getTouchXY)(event), sourceEvent = shouldPreventQueue.current.filter(function(e24) {
            return e24.name === event.type && e24.target === event.target && deltaCompare(e24.delta, delta);
          })[0];
          if (sourceEvent && sourceEvent.should) {
            event.cancelable && event.preventDefault();
            return;
          }
          if (!sourceEvent) {
            var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
              return node.contains(event.target);
            }), shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
            shouldStop && event.cancelable && event.preventDefault();
          }
        }
      }, []), shouldCancel = React12.useCallback(function(name, delta, target, should) {
        var event = { name, delta, target, should };
        shouldPreventQueue.current.push(event), setTimeout(function() {
          shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e24) {
            return e24 !== event;
          });
        }, 1);
      }, []), scrollTouchStart = React12.useCallback(function(event) {
        touchStartRef.current = (0, exports.getTouchXY)(event), activeAxis.current = void 0;
      }, []), scrollWheel = React12.useCallback(function(event) {
        shouldCancel(event.type, (0, exports.getDeltaXY)(event), event.target, shouldCancelEvent(event, props.lockRef.current));
      }, []), scrollTouchMove = React12.useCallback(function(event) {
        shouldCancel(event.type, (0, exports.getTouchXY)(event), event.target, shouldCancelEvent(event, props.lockRef.current));
      }, []);
      React12.useEffect(function() {
        return lockStack.push(Style), props.setCallbacks({
          onScrollCapture: scrollWheel,
          onWheelCapture: scrollWheel,
          onTouchMoveCapture: scrollTouchMove
        }), document.addEventListener("wheel", shouldPrevent, aggresiveCapture_1.nonPassive), document.addEventListener("touchmove", shouldPrevent, aggresiveCapture_1.nonPassive), document.addEventListener("touchstart", scrollTouchStart, aggresiveCapture_1.nonPassive), function() {
          lockStack = lockStack.filter(function(inst) {
            return inst !== Style;
          }), document.removeEventListener("wheel", shouldPrevent, aggresiveCapture_1.nonPassive), document.removeEventListener("touchmove", shouldPrevent, aggresiveCapture_1.nonPassive), document.removeEventListener("touchstart", scrollTouchStart, aggresiveCapture_1.nonPassive);
        };
      }, []);
      var removeScrollBar = props.removeScrollBar, inert = props.inert;
      return React12.createElement(
        React12.Fragment,
        null,
        inert ? React12.createElement(Style, { styles: generateStyle(id3) }) : null,
        removeScrollBar ? React12.createElement(react_remove_scroll_bar_1.RemoveScrollBar, { gapMode: "margin" }) : null
      );
    }
    exports.RemoveScrollSideCar = RemoveScrollSideCar;
  }
});

// ../../../node_modules/react-remove-scroll/dist/es5/sidecar.js
var require_sidecar = __commonJS({
  "../../../node_modules/react-remove-scroll/dist/es5/sidecar.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var use_sidecar_1 = require_es53(), SideEffect_1 = require_SideEffect(), medium_1 = require_medium2();
    exports.default = (0, use_sidecar_1.exportSidecar)(medium_1.effectCar, SideEffect_1.RemoveScrollSideCar);
  }
});

// ../../../node_modules/react-remove-scroll/dist/es5/Combination.js
var require_Combination = __commonJS({
  "../../../node_modules/react-remove-scroll/dist/es5/Combination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports)), React12 = tslib_1.__importStar(require_react()), UI_1 = require_UI(), sidecar_1 = tslib_1.__importDefault(require_sidecar()), ReactRemoveScroll = React12.forwardRef(function(props, ref) {
      return React12.createElement(UI_1.RemoveScroll, tslib_1.__assign({}, props, { ref, sideCar: sidecar_1.default }));
    });
    ReactRemoveScroll.classNames = UI_1.RemoveScroll.classNames;
    exports.default = ReactRemoveScroll;
  }
});

// ../../../node_modules/react-remove-scroll/dist/es5/index.js
var require_es57 = __commonJS({
  "../../../node_modules/react-remove-scroll/dist/es5/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: !0 });
    exports.RemoveScroll = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports)), Combination_1 = tslib_1.__importDefault(require_Combination());
    exports.RemoveScroll = Combination_1.default;
  }
});

// <stdin>
var stdin_exports = {};
__export(stdin_exports, {
  assets: () => assets_manifest_default,
  assetsBuildDirectory: () => assetsBuildDirectory,
  entry: () => entry,
  future: () => future,
  publicPath: () => publicPath,
  routes: () => routes
});
module.exports = __toCommonJS(stdin_exports);

// app/entry.server.jsx
var entry_server_exports = {};
__export(entry_server_exports, {
  default: () => handleRequest
});
var import_stream = require("stream"), import_node = __toESM(require_dist2()), import_react = __toESM(require_dist3());

// node_modules/isbot/index.mjs
function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
  return _classApplyDescriptorGet(receiver, descriptor);
}
function _classPrivateFieldSet(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
  return _classApplyDescriptorSet(receiver, descriptor, value), value;
}
function _classExtractFieldDescriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver))
    throw new TypeError("attempted to " + action + " private field on non-instance");
  return privateMap.get(receiver);
}
function _classApplyDescriptorGet(receiver, descriptor) {
  return descriptor.get ? descriptor.get.call(receiver) : descriptor.value;
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
  if (descriptor.set)
    descriptor.set.call(receiver, value);
  else {
    if (!descriptor.writable)
      throw new TypeError("attempted to set read only private field");
    descriptor.value = value;
  }
}
function _classPrivateMethodGet(receiver, privateSet, fn) {
  if (!privateSet.has(receiver))
    throw new TypeError("attempted to get private field on non-instance");
  return fn;
}
function _checkPrivateRedeclaration(obj, privateCollection) {
  if (privateCollection.has(obj))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classPrivateFieldInitSpec(obj, privateMap, value) {
  _checkPrivateRedeclaration(obj, privateMap), privateMap.set(obj, value);
}
function _classPrivateMethodInitSpec(obj, privateSet) {
  _checkPrivateRedeclaration(obj, privateSet), privateSet.add(obj);
}
var list = [
  " daum[ /]",
  " deusu/",
  "(?:^| )site",
  "@[a-z]",
  "\\(at\\)[a-z]",
  "\\(github\\.com/",
  "\\[at\\][a-z]",
  "^12345",
  "^<",
  "^[\\w \\.\\-\\(\\)]+(/v?\\d+(\\.\\d+)?(\\.\\d{1,10})?)?$",
  "^[^ ]{50,}$",
  "^active",
  "^ad muncher",
  "^anglesharp/",
  "^anonymous",
  "^avsdevicesdk/",
  "^axios/",
  "^bidtellect/",
  "^biglotron",
  "^btwebclient/",
  "^castro",
  "^clamav[ /]",
  "^client/",
  "^cobweb/",
  "^coccoc",
  "^custom",
  "^ddg[_-]android",
  "^discourse",
  "^dispatch/\\d",
  "^downcast/",
  "^duckduckgo",
  "^facebook",
  "^fdm[ /]\\d",
  "^getright/",
  "^gozilla/",
  "^hatena",
  "^hobbit",
  "^hotzonu",
  "^hwcdn/",
  "^jeode/",
  "^jetty/",
  "^jigsaw",
  "^linkdex",
  "^lwp[-: ]",
  "^metauri",
  "^microsoft bits",
  "^movabletype",
  "^mozilla/\\d\\.\\d \\(compatible;?\\)$",
  "^mozilla/\\d\\.\\d \\w*$",
  "^navermailapp",
  "^netsurf",
  "^offline explorer",
  "^php",
  "^postman",
  "^postrank",
  "^python",
  "^read",
  "^reed",
  "^restsharp/",
  "^snapchat",
  "^space bison",
  "^svn",
  "^swcd ",
  "^taringa",
  "^test certificate info",
  "^thumbor/",
  "^tumblr/",
  "^user-agent:mozilla",
  "^valid",
  "^venus/fedoraplanet",
  "^w3c",
  "^webbandit/",
  "^webcopier",
  "^wget",
  "^whatsapp",
  "^xenu link sleuth",
  "^yahoo",
  "^yandex",
  "^zdm/\\d",
  "^zoom marketplace/",
  "^{{.*}}$",
  "adbeat\\.com",
  "appinsights",
  "archive",
  "ask jeeves/teoma",
  "bit\\.ly/",
  "bluecoat drtr",
  "bot",
  "browsex",
  "burpcollaborator",
  "capture",
  "catch",
  "check",
  "chrome-lighthouse",
  "chromeframe",
  "cloud",
  "crawl",
  "cryptoapi",
  "dareboost",
  "datanyze",
  "dataprovider",
  "dejaclick",
  "dmbrowser",
  "download",
  "evc-batch/",
  "feed",
  "firephp",
  "freesafeip",
  "ghost",
  "gomezagent",
  "google",
  "headlesschrome/",
  "http",
  "httrack",
  "hubspot marketing grader",
  "hydra",
  "ibisbrowser",
  "images",
  "iplabel",
  "ips-agent",
  "java",
  "library",
  "mail\\.ru/",
  "manager",
  "monitor",
  "morningscore/",
  "neustar wpm",
  "news",
  "nutch",
  "offbyone",
  "optimize",
  "pageburst",
  "pagespeed",
  "perl",
  "phantom",
  "pingdom",
  "powermarks",
  "preview",
  "proxy",
  "ptst[ /]\\d",
  "reader",
  "rexx;",
  "rigor",
  "rss",
  "scan",
  "scrape",
  "search",
  "serp ?reputation ?management",
  "server",
  "sogou",
  "sparkler/",
  "speedcurve",
  "spider",
  "statuscake",
  "stumbleupon\\.com",
  "supercleaner",
  "synapse",
  "synthetic",
  "taginspector/",
  "torrent",
  "tracemyfile",
  "transcoder",
  "trendsmapresolver",
  "twingly recon",
  "url",
  "virtuoso",
  "wappalyzer",
  "webglance",
  "webkit2png",
  "websitemetadataretriever",
  "whatcms/",
  "wordpress",
  "zgrab"
];
function amend(list2) {
  try {
    new RegExp("(?<! cu)bot").test("dangerbot");
  } catch {
    return list2;
  }
  return [
    // Addresses: Cubot device
    ["bot", "(?<! cu)bot"],
    // Addresses: Android webview
    ["google", "(?<! (?:channel/|google/))google(?!(app|/google| pixel))"],
    // Addresses: libhttp browser
    ["http", "(?<!(?:lib))http"],
    // Addresses: java based browsers
    ["java", "java(?!;)"],
    // Addresses: Yandex Search App
    ["search", "(?<! ya(?:yandex)?)search"]
  ].forEach((_ref) => {
    let [search, replace] = _ref, index2 = list2.lastIndexOf(search);
    ~index2 && list2.splice(index2, 1, replace);
  }), list2;
}
amend(list);
var flags = "i", _list = /* @__PURE__ */ new WeakMap(), _pattern = /* @__PURE__ */ new WeakMap(), _update = /* @__PURE__ */ new WeakSet(), _index = /* @__PURE__ */ new WeakSet(), Isbot = class {
  constructor(patterns) {
    return _classPrivateMethodInitSpec(this, _index), _classPrivateMethodInitSpec(this, _update), _classPrivateFieldInitSpec(this, _list, {
      writable: !0,
      value: void 0
    }), _classPrivateFieldInitSpec(this, _pattern, {
      writable: !0,
      value: void 0
    }), _classPrivateFieldSet(this, _list, patterns || list.slice()), _classPrivateMethodGet(this, _update, _update2).call(this), Object.defineProperties((ua) => this.test(ua), Object.entries(Object.getOwnPropertyDescriptors(Isbot.prototype)).reduce((accumulator, _ref) => {
      let [prop, descriptor] = _ref;
      return typeof descriptor.value == "function" && Object.assign(accumulator, {
        [prop]: {
          value: this[prop].bind(this)
        }
      }), typeof descriptor.get == "function" && Object.assign(accumulator, {
        [prop]: {
          get: () => this[prop]
        }
      }), accumulator;
    }, {}));
  }
  /**
   * Get a clone of the pattern
   * @type RegExp
   */
  get pattern() {
    return new RegExp(_classPrivateFieldGet(this, _pattern));
  }
  /**
   * Match given string against out pattern
   * @param  {string} ua User Agent string
   * @returns {boolean}
   */
  test(ua) {
    return Boolean(ua) && _classPrivateFieldGet(this, _pattern).test(ua);
  }
  /**
   * Get the match for strings' known crawler pattern
   * @param  {string} ua User Agent string
   * @returns {string|null}
   */
  find() {
    let match = (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "").match(_classPrivateFieldGet(this, _pattern));
    return match && match[0];
  }
  /**
   * Get the patterns that match user agent string if any
   * @param  {string} ua User Agent string
   * @returns {string[]}
   */
  matches() {
    let ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    return _classPrivateFieldGet(this, _list).filter((entry2) => new RegExp(entry2, flags).test(ua));
  }
  /**
   * Clear all patterns that match user agent
   * @param  {string} ua User Agent string
   * @returns {void}
   */
  clear() {
    let ua = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    this.exclude(this.matches(ua));
  }
  /**
   * Extent patterns for known crawlers
   * @param  {string[]} filters
   * @returns {void}
   */
  extend() {
    let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    [].push.apply(_classPrivateFieldGet(this, _list), filters.filter((rule) => _classPrivateMethodGet(this, _index, _index2).call(this, rule) === -1).map((filter2) => filter2.toLowerCase())), _classPrivateMethodGet(this, _update, _update2).call(this);
  }
  /**
   * Exclude patterns from bot pattern rule
   * @param  {string[]} filters
   * @returns {void}
   */
  exclude() {
    let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], {
      length
    } = filters;
    for (; length--; ) {
      let index2 = _classPrivateMethodGet(this, _index, _index2).call(this, filters[length]);
      index2 > -1 && _classPrivateFieldGet(this, _list).splice(index2, 1);
    }
    _classPrivateMethodGet(this, _update, _update2).call(this);
  }
  /**
   * Create a new Isbot instance using given list or self's list
   * @param  {string[]} [list]
   * @returns {Isbot}
   */
  spawn(list2) {
    return new Isbot(list2 || _classPrivateFieldGet(this, _list));
  }
};
function _update2() {
  _classPrivateFieldSet(this, _pattern, new RegExp(_classPrivateFieldGet(this, _list).join("|"), flags));
}
function _index2(rule) {
  return _classPrivateFieldGet(this, _list).indexOf(rule.toLowerCase());
}
var isbot = new Isbot();

// app/entry.server.jsx
var import_server = __toESM(require_server_node()), import_jsx_dev_runtime = __toESM(require_jsx_dev_runtime()), ABORT_DELAY = 5e3;
function handleRequest(request, responseStatusCode, responseHeaders, remixContext, loadContext) {
  return isbot(request.headers.get("user-agent")) ? handleBotRequest(
    request,
    responseStatusCode,
    responseHeaders,
    remixContext
  ) : handleBrowserRequest(
    request,
    responseStatusCode,
    responseHeaders,
    remixContext
  );
}
function handleBotRequest(request, responseStatusCode, responseHeaders, remixContext) {
  return new Promise((resolve, reject) => {
    let shellRendered = !1, { pipe: pipe2, abort } = (0, import_server.renderToPipeableStream)(
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(
        import_react.RemixServer,
        {
          context: remixContext,
          url: request.url,
          abortDelay: ABORT_DELAY
        },
        void 0,
        !1,
        {
          fileName: "app/entry.server.jsx",
          lineNumber: 41,
          columnNumber: 7
        },
        this
      ),
      {
        onAllReady() {
          shellRendered = !0;
          let body = new import_stream.PassThrough();
          responseHeaders.set("Content-Type", "text/html"), resolve(
            new import_node.Response(body, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          ), pipe2(body);
        },
        onShellError(error2) {
          reject(error2);
        },
        onError(error2) {
          responseStatusCode = 500, shellRendered && console.error(error2);
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}
function handleBrowserRequest(request, responseStatusCode, responseHeaders, remixContext) {
  return console.log("hello worls"), new Promise((resolve, reject) => {
    let shellRendered = !1, { pipe: pipe2, abort } = (0, import_server.renderToPipeableStream)(
      /* @__PURE__ */ (0, import_jsx_dev_runtime.jsxDEV)(
        import_react.RemixServer,
        {
          context: remixContext,
          url: request.url,
          abortDelay: ABORT_DELAY
        },
        void 0,
        !1,
        {
          fileName: "app/entry.server.jsx",
          lineNumber: 92,
          columnNumber: 7
        },
        this
      ),
      {
        onShellReady() {
          shellRendered = !0;
          let body = new import_stream.PassThrough();
          responseHeaders.set("Content-Type", "text/html"), resolve(
            new import_node.Response(body, {
              headers: responseHeaders,
              status: responseStatusCode
            })
          ), pipe2(body);
        },
        onShellError(error2) {
          reject(error2);
        },
        onError(error2) {
          responseStatusCode = 500, shellRendered && console.error(error2);
        }
      }
    );
    setTimeout(abort, ABORT_DELAY);
  });
}

// app/root.jsx
var root_exports = {};
__export(root_exports, {
  default: () => App,
  links: () => links
});
var import_react6 = __toESM(require_dist3());

// ../../../node_modules/@react-aria/utils/dist/import.mjs
var import_react3 = __toESM(require_react(), 1);

// ../../../node_modules/@react-aria/ssr/dist/import.mjs
var import_react2 = __toESM(require_react(), 1), $704cf1d3b684cc5c$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 1e10)),
  current: 0,
  isSSR: !1
}, $704cf1d3b684cc5c$var$SSRContext = /* @__PURE__ */ import_react2.default.createContext($704cf1d3b684cc5c$var$defaultContext);
function $704cf1d3b684cc5c$export$9f8ac96af4b1b2ae(props) {
  let cur = (0, import_react2.useContext)($704cf1d3b684cc5c$var$SSRContext), counter = $704cf1d3b684cc5c$var$useCounter(cur === $704cf1d3b684cc5c$var$defaultContext), [isSSR, setIsSSR] = (0, import_react2.useState)(!0), value = (0, import_react2.useMemo)(() => ({
    // If this is the first SSRProvider, start with an empty string prefix, otherwise
    // append and increment the counter.
    prefix: cur === $704cf1d3b684cc5c$var$defaultContext ? "" : `${cur.prefix}-${counter}`,
    current: 0,
    isSSR
  }), [
    cur,
    counter,
    isSSR
  ]);
  return typeof window < "u" && (0, import_react2.useLayoutEffect)(() => {
    setIsSSR(!1);
  }, []), /* @__PURE__ */ import_react2.default.createElement($704cf1d3b684cc5c$var$SSRContext.Provider, {
    value
  }, props.children);
}
var $704cf1d3b684cc5c$var$canUseDOM = Boolean(typeof window < "u" && window.document && window.document.createElement), $704cf1d3b684cc5c$var$componentIds = /* @__PURE__ */ new WeakMap();
function $704cf1d3b684cc5c$var$useCounter(isDisabled = !1) {
  let ctx = (0, import_react2.useContext)($704cf1d3b684cc5c$var$SSRContext), ref = (0, import_react2.useRef)(null);
  if (ref.current === null && !isDisabled) {
    var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner;
    let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = import_react2.default.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 || (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;
    if (currentOwner) {
      let prevComponentValue = $704cf1d3b684cc5c$var$componentIds.get(currentOwner);
      prevComponentValue == null ? $704cf1d3b684cc5c$var$componentIds.set(currentOwner, {
        id: ctx.current,
        state: currentOwner.memoizedState
      }) : currentOwner.memoizedState !== prevComponentValue.state && (ctx.current = prevComponentValue.id, $704cf1d3b684cc5c$var$componentIds.delete(currentOwner));
    }
    ref.current = ++ctx.current;
  }
  return ref.current;
}

// ../../../node_modules/@react-aria/utils/dist/import.mjs
var import_clsx = __toESM(require_clsx(), 1), $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window < "u" ? import_react3.default.useLayoutEffect : () => {
};
var $bdb11010cef70236$var$idsUpdaterMap = /* @__PURE__ */ new Map();
function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB)
    return idA;
  let setIdA = $bdb11010cef70236$var$idsUpdaterMap.get(idA);
  if (setIdA)
    return setIdA(idB), idB;
  let setIdB = $bdb11010cef70236$var$idsUpdaterMap.get(idB);
  return setIdB ? (setIdB(idA), idA) : idB;
}
function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks)
      typeof callback == "function" && callback(...args);
  };
}
function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  let result = {
    ...args[0]
  };
  for (let i13 = 1; i13 < args.length; i13++) {
    let props = args[i13];
    for (let key in props) {
      let a9 = result[key], b = props[key];
      typeof a9 == "function" && typeof b == "function" && // This is a lot faster than a regex.
      key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */
      65 && key.charCodeAt(2) <= /* 'Z' */
      90 ? result[key] = $ff5963eb1fccf552$export$e08e3b67e392101e(a9, b) : (key === "className" || key === "UNSAFE_className") && typeof a9 == "string" && typeof b == "string" ? result[key] = (0, import_clsx.default)(a9, b) : key === "id" && a9 && b ? result.id = $bdb11010cef70236$export$cd8c9cb68f842629(a9, b) : result[key] = b !== void 0 ? b : a9;
    }
  }
  return result;
}
var $65484d02dcb7eb3e$var$DOMPropNames = /* @__PURE__ */ new Set([
  "id"
]), $65484d02dcb7eb3e$var$labelablePropNames = /* @__PURE__ */ new Set([
  "aria-label",
  "aria-labelledby",
  "aria-describedby",
  "aria-details"
]), $65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
function $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
  let { labelable, propNames } = opts, filteredProps = {};
  for (let prop in props)
    Object.prototype.hasOwnProperty.call(props, prop) && ($65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && $65484d02dcb7eb3e$var$labelablePropNames.has(prop) || propNames != null && propNames.has(prop) || $65484d02dcb7eb3e$var$propRe.test(prop)) && (filteredProps[prop] = props[prop]);
  return filteredProps;
}
function $7215afc6de606d6b$export$de79e2c695e052f3(element) {
  if ($7215afc6de606d6b$var$supportsPreventScroll())
    element.focus({
      preventScroll: !0
    });
  else {
    let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element);
    element.focus(), $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
var $7215afc6de606d6b$var$supportsPreventScrollCached = null;
function $7215afc6de606d6b$var$supportsPreventScroll() {
  if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    $7215afc6de606d6b$var$supportsPreventScrollCached = !1;
    try {
      var focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          return $7215afc6de606d6b$var$supportsPreventScrollCached = !0, !0;
        }
      });
    } catch {
    }
  }
  return $7215afc6de606d6b$var$supportsPreventScrollCached;
}
function $7215afc6de606d6b$var$getScrollableElements(element) {
  for (var parent = element.parentNode, scrollableElements = [], rootScrollingElement = document.scrollingElement || document.documentElement; parent instanceof HTMLElement && parent !== rootScrollingElement; )
    (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) && scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    }), parent = parent.parentNode;
  return rootScrollingElement instanceof HTMLElement && scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  }), scrollableElements;
}
function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let { element, scrollTop, scrollLeft } of scrollableElements)
    element.scrollTop = scrollTop, element.scrollLeft = scrollLeft;
}
var $bbed8b41f857bcc0$var$transitionsByElement = /* @__PURE__ */ new Map(), $bbed8b41f857bcc0$var$transitionCallbacks = /* @__PURE__ */ new Set();
function $bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window > "u")
    return;
  let onTransitionStart = (e24) => {
    let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e24.target);
    transitions || (transitions = /* @__PURE__ */ new Set(), $bbed8b41f857bcc0$var$transitionsByElement.set(e24.target, transitions), e24.target.addEventListener("transitioncancel", onTransitionEnd)), transitions.add(e24.propertyName);
  }, onTransitionEnd = (e24) => {
    let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e24.target);
    if (properties && (properties.delete(e24.propertyName), properties.size === 0 && (e24.target.removeEventListener("transitioncancel", onTransitionEnd), $bbed8b41f857bcc0$var$transitionsByElement.delete(e24.target)), $bbed8b41f857bcc0$var$transitionsByElement.size === 0)) {
      for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks)
        cb();
      $bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart), document.body.addEventListener("transitionend", onTransitionEnd);
}
typeof document < "u" && (document.readyState !== "loading" ? $bbed8b41f857bcc0$var$setupGlobalEvents() : document.addEventListener("DOMContentLoaded", $bbed8b41f857bcc0$var$setupGlobalEvents));
function $bbed8b41f857bcc0$export$24490316f764c430(fn) {
  requestAnimationFrame(() => {
    $bbed8b41f857bcc0$var$transitionsByElement.size === 0 ? fn() : $bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
  });
}
function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0, import_react3.useRef)(/* @__PURE__ */ new Map()), addGlobalListener = (0, import_react3.useCallback)((eventTarget, type2, listener, options) => {
    let fn = options != null && options.once ? (...args) => {
      globalListeners.current.delete(listener), listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type: type2,
      eventTarget,
      fn,
      options
    }), eventTarget.addEventListener(type2, listener, options);
  }, []), removeGlobalListener = (0, import_react3.useCallback)((eventTarget, type2, listener, options) => {
    var _globalListeners_current_get;
    let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
    eventTarget.removeEventListener(type2, fn, options), globalListeners.current.delete(listener);
  }, []), removeAllGlobalListeners = (0, import_react3.useCallback)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [
    removeGlobalListener
  ]);
  return (0, import_react3.useEffect)(() => removeAllGlobalListeners, [
    removeAllGlobalListeners
  ]), {
    addGlobalListener,
    removeGlobalListener,
    removeAllGlobalListeners
  };
}
function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (context && context.ref && ref)
      return context.ref.current = ref.current, () => {
        context.ref.current = null;
      };
  }, [
    context,
    ref
  ]);
}
var $5df64b3807dc15ee$var$visualViewport = typeof window < "u" && window.visualViewport;
function $c87311424ea30a05$var$testUserAgent(re) {
  var _window_navigator_userAgentData;
  return typeof window > "u" || window.navigator == null ? !1 : ((_window_navigator_userAgentData = window.navigator.userAgentData) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand) => re.test(brand.brand))) || re.test(window.navigator.userAgent);
}
function $c87311424ea30a05$var$testPlatform(re) {
  var _window_navigator_userAgentData;
  return typeof window < "u" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator.userAgentData) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : !1;
}
function $c87311424ea30a05$export$9ac100e40613ea10() {
  return $c87311424ea30a05$var$testPlatform(/^Mac/i);
}
function $c87311424ea30a05$export$186c6964ca17d99() {
  return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
}
function $c87311424ea30a05$export$7bef049ce92e4224() {
  return $c87311424ea30a05$var$testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
  $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
}
function $c87311424ea30a05$export$fedb369cb70207f1() {
  return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
}
function $c87311424ea30a05$export$a11b0059900ceec8() {
  return $c87311424ea30a05$var$testUserAgent(/Android/i);
}
function $6a7db85432448f7f$export$60278871457622de(event) {
  return event.mozInputSource === 0 && event.isTrusted ? !0 : $c87311424ea30a05$export$a11b0059900ceec8() && event.pointerType ? event.type === "click" && event.buttons === 1 : event.detail === 0 && !event.pointerType;
}
function $6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
}

// ../../../node_modules/@swc/helpers/src/_define_property.mjs
function _defineProperty(obj, key, value) {
  return key in obj ? Object.defineProperty(obj, key, {
    value,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : obj[key] = value, obj;
}

// ../../../node_modules/@react-aria/focus/dist/import.mjs
var import_react5 = __toESM(require_react(), 1);

// ../../../node_modules/@react-aria/interactions/dist/import.mjs
var import_react4 = __toESM(require_react(), 1);
var $14c0b72509d70225$var$state = "default", $14c0b72509d70225$var$savedUserSelect = "", $14c0b72509d70225$var$modifiedElementMap = /* @__PURE__ */ new WeakMap();
function $14c0b72509d70225$export$16a4697467175487(target) {
  $c87311424ea30a05$export$fedb369cb70207f1() ? ($14c0b72509d70225$var$state === "default" && ($14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect, document.documentElement.style.webkitUserSelect = "none"), $14c0b72509d70225$var$state = "disabled") : (target instanceof HTMLElement || target instanceof SVGElement) && ($14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect), target.style.userSelect = "none");
}
function $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if ($c87311424ea30a05$export$fedb369cb70207f1()) {
    if ($14c0b72509d70225$var$state !== "disabled")
      return;
    $14c0b72509d70225$var$state = "restoring", setTimeout(() => {
      $bbed8b41f857bcc0$export$24490316f764c430(() => {
        $14c0b72509d70225$var$state === "restoring" && (document.documentElement.style.webkitUserSelect === "none" && (document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || ""), $14c0b72509d70225$var$savedUserSelect = "", $14c0b72509d70225$var$state = "default");
      });
    }, 300);
  } else if ((target instanceof HTMLElement || target instanceof SVGElement) && target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {
    let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);
    target.style.userSelect === "none" && (target.style.userSelect = targetOldUserSelect), target.getAttribute("style") === "" && target.removeAttribute("style"), $14c0b72509d70225$var$modifiedElementMap.delete(target);
  }
}
var $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = import_react4.default.createContext(null);
$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";
function $f6c31cce2adf654f$var$usePressResponderContext(props) {
  let context = (0, import_react4.useContext)($ae1eeba8b9eafd08$export$5165eccb35aaadb5);
  if (context) {
    let { register, ...contextProps } = context;
    props = $3ef42575df84b30b$export$9d1611c77c2fe928(contextProps, props), register();
  }
  return $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, props.ref), props;
}
function $f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let {
    onPress,
    onPressChange,
    onPressStart,
    onPressEnd,
    onPressUp,
    isDisabled,
    isPressed: isPressedProp,
    preventFocusOnPress,
    shouldCancelOnPointerExit,
    allowTextSelectionOnPress,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ref: _,
    ...domProps
  } = $f6c31cce2adf654f$var$usePressResponderContext(props), propsRef = (0, import_react4.useRef)(null);
  propsRef.current = {
    onPress,
    onPressChange,
    onPressStart,
    onPressEnd,
    onPressUp,
    isDisabled,
    shouldCancelOnPointerExit
  };
  let [isPressed, setPressed] = (0, import_react4.useState)(!1), ref = (0, import_react4.useRef)({
    isPressed: !1,
    ignoreEmulatedMouseEvents: !1,
    ignoreClickAfterPress: !1,
    didFirePressStart: !1,
    activePointerId: null,
    target: null,
    isOverTarget: !1,
    pointerType: null
  }), { addGlobalListener, removeAllGlobalListeners } = $03deb23ff14920c4$export$4eaf04e54aa8eed6(), pressProps = (0, import_react4.useMemo)(() => {
    let state = ref.current, triggerPressStart = (originalEvent, pointerType) => {
      let { onPressStart: onPressStart2, onPressChange: onPressChange2, isDisabled: isDisabled2 } = propsRef.current;
      isDisabled2 || state.didFirePressStart || (onPressStart2 && onPressStart2({
        type: "pressstart",
        pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      }), onPressChange2 && onPressChange2(!0), state.didFirePressStart = !0, setPressed(!0));
    }, triggerPressEnd = (originalEvent, pointerType, wasPressed = !0) => {
      let { onPressEnd: onPressEnd2, onPressChange: onPressChange2, onPress: onPress2, isDisabled: isDisabled2 } = propsRef.current;
      state.didFirePressStart && (state.ignoreClickAfterPress = !0, state.didFirePressStart = !1, onPressEnd2 && onPressEnd2({
        type: "pressend",
        pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      }), onPressChange2 && onPressChange2(!1), setPressed(!1), onPress2 && wasPressed && !isDisabled2 && onPress2({
        type: "press",
        pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      }));
    }, triggerPressUp = (originalEvent, pointerType) => {
      let { onPressUp: onPressUp2, isDisabled: isDisabled2 } = propsRef.current;
      isDisabled2 || onPressUp2 && onPressUp2({
        type: "pressup",
        pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    }, cancel = (e24) => {
      state.isPressed && (state.isOverTarget && triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e24), state.pointerType, !1), state.isPressed = !1, state.isOverTarget = !1, state.activePointerId = null, state.pointerType = null, removeAllGlobalListeners(), allowTextSelectionOnPress || $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target));
    }, pressProps2 = {
      onKeyDown(e24) {
        $f6c31cce2adf654f$var$isValidKeyboardEvent(e24.nativeEvent, e24.currentTarget) && e24.currentTarget.contains(e24.target) ? ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e24.target, e24.key) && e24.preventDefault(), e24.stopPropagation(), !state.isPressed && !e24.repeat && (state.target = e24.currentTarget, state.isPressed = !0, triggerPressStart(e24, "keyboard"), addGlobalListener(document, "keyup", onKeyUp, !1))) : e24.key === "Enter" && $f6c31cce2adf654f$var$isHTMLAnchorLink(e24.currentTarget) && e24.stopPropagation();
      },
      onKeyUp(e24) {
        $f6c31cce2adf654f$var$isValidKeyboardEvent(e24.nativeEvent, e24.currentTarget) && !e24.repeat && e24.currentTarget.contains(e24.target) && triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e24), "keyboard");
      },
      onClick(e24) {
        e24 && !e24.currentTarget.contains(e24.target) || e24 && e24.button === 0 && (e24.stopPropagation(), isDisabled && e24.preventDefault(), !state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === "virtual" || $6a7db85432448f7f$export$60278871457622de(e24.nativeEvent)) && (!isDisabled && !preventFocusOnPress && $7215afc6de606d6b$export$de79e2c695e052f3(e24.currentTarget), triggerPressStart(e24, "virtual"), triggerPressUp(e24, "virtual"), triggerPressEnd(e24, "virtual")), state.ignoreEmulatedMouseEvents = !1, state.ignoreClickAfterPress = !1);
      }
    }, onKeyUp = (e24) => {
      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e24, state.target)) {
        $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e24.target, e24.key) && e24.preventDefault(), e24.stopPropagation(), state.isPressed = !1;
        let target = e24.target;
        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e24), "keyboard", state.target.contains(target)), removeAllGlobalListeners(), state.target instanceof HTMLElement && state.target.contains(target) && ($f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute("role") === "link") && state.target.click();
      }
    };
    if (typeof PointerEvent < "u") {
      pressProps2.onPointerDown = (e24) => {
        if (!(e24.button !== 0 || !e24.currentTarget.contains(e24.target))) {
          if ($6a7db85432448f7f$export$29bf1b5f2c56cf63(e24.nativeEvent)) {
            state.pointerType = "virtual";
            return;
          }
          $f6c31cce2adf654f$var$shouldPreventDefault(e24.currentTarget) && e24.preventDefault(), state.pointerType = e24.pointerType, e24.stopPropagation(), state.isPressed || (state.isPressed = !0, state.isOverTarget = !0, state.activePointerId = e24.pointerId, state.target = e24.currentTarget, !isDisabled && !preventFocusOnPress && $7215afc6de606d6b$export$de79e2c695e052f3(e24.currentTarget), allowTextSelectionOnPress || $14c0b72509d70225$export$16a4697467175487(state.target), triggerPressStart(e24, state.pointerType), addGlobalListener(document, "pointermove", onPointerMove, !1), addGlobalListener(document, "pointerup", onPointerUp, !1), addGlobalListener(document, "pointercancel", onPointerCancel, !1));
        }
      }, pressProps2.onMouseDown = (e24) => {
        e24.currentTarget.contains(e24.target) && e24.button === 0 && ($f6c31cce2adf654f$var$shouldPreventDefault(e24.currentTarget) && e24.preventDefault(), e24.stopPropagation());
      }, pressProps2.onPointerUp = (e24) => {
        !e24.currentTarget.contains(e24.target) || state.pointerType === "virtual" || e24.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e24, e24.currentTarget) && triggerPressUp(e24, state.pointerType || e24.pointerType);
      };
      let onPointerMove = (e24) => {
        e24.pointerId === state.activePointerId && ($f6c31cce2adf654f$var$isOverTarget(e24, state.target) ? state.isOverTarget || (state.isOverTarget = !0, triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e24), state.pointerType)) : state.isOverTarget && (state.isOverTarget = !1, triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e24), state.pointerType, !1), propsRef.current.shouldCancelOnPointerExit && cancel(e24)));
      }, onPointerUp = (e24) => {
        e24.pointerId === state.activePointerId && state.isPressed && e24.button === 0 && ($f6c31cce2adf654f$var$isOverTarget(e24, state.target) ? triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e24), state.pointerType) : state.isOverTarget && triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e24), state.pointerType, !1), state.isPressed = !1, state.isOverTarget = !1, state.activePointerId = null, state.pointerType = null, removeAllGlobalListeners(), allowTextSelectionOnPress || $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target));
      }, onPointerCancel = (e24) => {
        cancel(e24);
      };
      pressProps2.onDragStart = (e24) => {
        e24.currentTarget.contains(e24.target) && cancel(e24);
      };
    } else {
      pressProps2.onMouseDown = (e24) => {
        e24.button !== 0 || !e24.currentTarget.contains(e24.target) || ($f6c31cce2adf654f$var$shouldPreventDefault(e24.currentTarget) && e24.preventDefault(), e24.stopPropagation(), !state.ignoreEmulatedMouseEvents && (state.isPressed = !0, state.isOverTarget = !0, state.target = e24.currentTarget, state.pointerType = $6a7db85432448f7f$export$60278871457622de(e24.nativeEvent) ? "virtual" : "mouse", !isDisabled && !preventFocusOnPress && $7215afc6de606d6b$export$de79e2c695e052f3(e24.currentTarget), triggerPressStart(e24, state.pointerType), addGlobalListener(document, "mouseup", onMouseUp, !1)));
      }, pressProps2.onMouseEnter = (e24) => {
        e24.currentTarget.contains(e24.target) && (e24.stopPropagation(), state.isPressed && !state.ignoreEmulatedMouseEvents && (state.isOverTarget = !0, triggerPressStart(e24, state.pointerType)));
      }, pressProps2.onMouseLeave = (e24) => {
        e24.currentTarget.contains(e24.target) && (e24.stopPropagation(), state.isPressed && !state.ignoreEmulatedMouseEvents && (state.isOverTarget = !1, triggerPressEnd(e24, state.pointerType, !1), propsRef.current.shouldCancelOnPointerExit && cancel(e24)));
      }, pressProps2.onMouseUp = (e24) => {
        e24.currentTarget.contains(e24.target) && !state.ignoreEmulatedMouseEvents && e24.button === 0 && triggerPressUp(e24, state.pointerType);
      };
      let onMouseUp = (e24) => {
        if (e24.button === 0) {
          if (state.isPressed = !1, removeAllGlobalListeners(), state.ignoreEmulatedMouseEvents) {
            state.ignoreEmulatedMouseEvents = !1;
            return;
          }
          $f6c31cce2adf654f$var$isOverTarget(e24, state.target) ? triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e24), state.pointerType) : state.isOverTarget && triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e24), state.pointerType, !1), state.isOverTarget = !1;
        }
      };
      pressProps2.onTouchStart = (e24) => {
        if (!e24.currentTarget.contains(e24.target))
          return;
        e24.stopPropagation();
        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e24.nativeEvent);
        touch && (state.activePointerId = touch.identifier, state.ignoreEmulatedMouseEvents = !0, state.isOverTarget = !0, state.isPressed = !0, state.target = e24.currentTarget, state.pointerType = "touch", !isDisabled && !preventFocusOnPress && $7215afc6de606d6b$export$de79e2c695e052f3(e24.currentTarget), allowTextSelectionOnPress || $14c0b72509d70225$export$16a4697467175487(state.target), triggerPressStart(e24, state.pointerType), addGlobalListener(window, "scroll", onScroll, !0));
      }, pressProps2.onTouchMove = (e24) => {
        if (!e24.currentTarget.contains(e24.target) || (e24.stopPropagation(), !state.isPressed))
          return;
        let touch = $f6c31cce2adf654f$var$getTouchById(e24.nativeEvent, state.activePointerId);
        touch && $f6c31cce2adf654f$var$isOverTarget(touch, e24.currentTarget) ? state.isOverTarget || (state.isOverTarget = !0, triggerPressStart(e24, state.pointerType)) : state.isOverTarget && (state.isOverTarget = !1, triggerPressEnd(e24, state.pointerType, !1), propsRef.current.shouldCancelOnPointerExit && cancel(e24));
      }, pressProps2.onTouchEnd = (e24) => {
        if (!e24.currentTarget.contains(e24.target) || (e24.stopPropagation(), !state.isPressed))
          return;
        let touch = $f6c31cce2adf654f$var$getTouchById(e24.nativeEvent, state.activePointerId);
        touch && $f6c31cce2adf654f$var$isOverTarget(touch, e24.currentTarget) ? (triggerPressUp(e24, state.pointerType), triggerPressEnd(e24, state.pointerType)) : state.isOverTarget && triggerPressEnd(e24, state.pointerType, !1), state.isPressed = !1, state.activePointerId = null, state.isOverTarget = !1, state.ignoreEmulatedMouseEvents = !0, allowTextSelectionOnPress || $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target), removeAllGlobalListeners();
      }, pressProps2.onTouchCancel = (e24) => {
        e24.currentTarget.contains(e24.target) && (e24.stopPropagation(), state.isPressed && cancel(e24));
      };
      let onScroll = (e24) => {
        state.isPressed && e24.target.contains(state.target) && cancel({
          currentTarget: state.target,
          shiftKey: !1,
          ctrlKey: !1,
          metaKey: !1,
          altKey: !1
        });
      };
      pressProps2.onDragStart = (e24) => {
        e24.currentTarget.contains(e24.target) && cancel(e24);
      };
    }
    return pressProps2;
  }, [
    addGlobalListener,
    isDisabled,
    preventFocusOnPress,
    removeAllGlobalListeners,
    allowTextSelectionOnPress
  ]);
  return (0, import_react4.useEffect)(() => () => {
    allowTextSelectionOnPress || $14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);
  }, [
    allowTextSelectionOnPress
  ]), {
    isPressed: isPressedProp || isPressed,
    pressProps: $3ef42575df84b30b$export$9d1611c77c2fe928(domProps, pressProps)
  };
}
function $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === "A" && target.hasAttribute("href");
}
function $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {
  let { key, code } = event, element = currentTarget, role = element.getAttribute("role");
  return (key === "Enter" || key === " " || key === "Spacebar" || code === "Space") && !(element instanceof HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && // A link with a valid href should be handled natively,
  // unless it also has role='button' and was triggered using Space.
  (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === "button" && key !== "Enter") && // An element with role='link' should only trigger with Enter key
  !(role === "link" && key !== "Enter");
}
function $f6c31cce2adf654f$var$getTouchFromEvent(event) {
  let { targetTouches } = event;
  return targetTouches.length > 0 ? targetTouches[0] : null;
}
function $f6c31cce2adf654f$var$getTouchById(event, pointerId) {
  let changedTouches = event.changedTouches;
  for (let i13 = 0; i13 < changedTouches.length; i13++) {
    let touch = changedTouches[i13];
    if (touch.identifier === pointerId)
      return touch;
  }
  return null;
}
function $f6c31cce2adf654f$var$createEvent(target, e24) {
  return {
    currentTarget: target,
    shiftKey: e24.shiftKey,
    ctrlKey: e24.ctrlKey,
    metaKey: e24.metaKey,
    altKey: e24.altKey
  };
}
function $f6c31cce2adf654f$var$getPointClientRect(point) {
  let offsetX = point.width / 2 || point.radiusX || 0, offsetY = point.height / 2 || point.radiusY || 0;
  return {
    top: point.clientY - offsetY,
    right: point.clientX + offsetX,
    bottom: point.clientY + offsetY,
    left: point.clientX - offsetX
  };
}
function $f6c31cce2adf654f$var$areRectanglesOverlapping(a9, b) {
  return !(a9.left > b.right || b.left > a9.right || a9.top > b.bottom || b.top > a9.bottom);
}
function $f6c31cce2adf654f$var$isOverTarget(point, target) {
  let rect = target.getBoundingClientRect(), pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);
  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);
}
function $f6c31cce2adf654f$var$shouldPreventDefault(target) {
  return !(target instanceof HTMLElement) || !target.draggable;
}
function $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {
  return target instanceof HTMLInputElement ? !$f6c31cce2adf654f$var$isValidInputKey(target, key) : target instanceof HTMLButtonElement ? target.type !== "submit" : !0;
}
var $f6c31cce2adf654f$var$nonTextInputTypes = /* @__PURE__ */ new Set([
  "checkbox",
  "radio",
  "range",
  "color",
  "file",
  "image",
  "button",
  "submit",
  "reset"
]);
function $f6c31cce2adf654f$var$isValidInputKey(target, key) {
  return target.type === "checkbox" || target.type === "radio" ? key === " " : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);
}
var $8a9cb279dc87e130$export$905e7fc544a71f36 = class {
  isDefaultPrevented() {
    return this.nativeEvent.defaultPrevented;
  }
  preventDefault() {
    this.defaultPrevented = !0, this.nativeEvent.preventDefault();
  }
  stopPropagation() {
    this.nativeEvent.stopPropagation(), this.isPropagationStopped = () => !0;
  }
  isPropagationStopped() {
    return !1;
  }
  persist() {
  }
  constructor(type2, nativeEvent) {
    this.nativeEvent = nativeEvent, this.target = nativeEvent.target, this.currentTarget = nativeEvent.currentTarget, this.relatedTarget = nativeEvent.relatedTarget, this.bubbles = nativeEvent.bubbles, this.cancelable = nativeEvent.cancelable, this.defaultPrevented = nativeEvent.defaultPrevented, this.eventPhase = nativeEvent.eventPhase, this.isTrusted = nativeEvent.isTrusted, this.timeStamp = nativeEvent.timeStamp, this.type = type2;
  }
};
function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
  let stateRef = (0, import_react4.useRef)({
    isFocused: !1,
    onBlur,
    observer: null
  });
  return stateRef.current.onBlur = onBlur, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let state = stateRef.current;
    return () => {
      state.observer && (state.observer.disconnect(), state.observer = null);
    };
  }, []), (0, import_react4.useCallback)((e24) => {
    if (e24.target instanceof HTMLButtonElement || e24.target instanceof HTMLInputElement || e24.target instanceof HTMLTextAreaElement || e24.target instanceof HTMLSelectElement) {
      stateRef.current.isFocused = !0;
      let target = e24.target, onBlurHandler = (e25) => {
        var _stateRef_current, _stateRef_current_onBlur;
        stateRef.current.isFocused = !1, target.disabled && ((_stateRef_current_onBlur = (_stateRef_current = stateRef.current).onBlur) === null || _stateRef_current_onBlur === void 0 || _stateRef_current_onBlur.call(_stateRef_current, new $8a9cb279dc87e130$export$905e7fc544a71f36("blur", e25))), stateRef.current.observer && (stateRef.current.observer.disconnect(), stateRef.current.observer = null);
      };
      target.addEventListener("focusout", onBlurHandler, {
        once: !0
      }), stateRef.current.observer = new MutationObserver(() => {
        stateRef.current.isFocused && target.disabled && (stateRef.current.observer.disconnect(), target.dispatchEvent(new FocusEvent("blur")), target.dispatchEvent(new FocusEvent("focusout", {
          bubbles: !0
        })));
      }), stateRef.current.observer.observe(target, {
        attributes: !0,
        attributeFilter: [
          "disabled"
        ]
      });
    }
  }, []);
}
function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let { isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props, onBlur = (0, import_react4.useCallback)((e24) => {
    if (e24.target === e24.currentTarget)
      return onBlurProp && onBlurProp(e24), onFocusChange && onFocusChange(!1), !0;
  }, [
    onBlurProp,
    onFocusChange
  ]), onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur), onFocus = (0, import_react4.useCallback)((e24) => {
    e24.target === e24.currentTarget && document.activeElement === e24.target && (onFocusProp && onFocusProp(e24), onFocusChange && onFocusChange(!0), onSyntheticFocus(e24));
  }, [
    onFocusChange,
    onFocusProp,
    onSyntheticFocus
  ]);
  return {
    focusProps: {
      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : void 0,
      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : void 0
    }
  };
}
var $507fabe10e71c6fb$var$currentModality = null, $507fabe10e71c6fb$var$changeHandlers = /* @__PURE__ */ new Set(), $507fabe10e71c6fb$var$hasSetupGlobalListeners = !1, $507fabe10e71c6fb$var$hasEventBeforeFocus = !1, $507fabe10e71c6fb$var$hasBlurredWindowRecently = !1, $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
  Tab: !0,
  Escape: !0
};
function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e24) {
  for (let handler of $507fabe10e71c6fb$var$changeHandlers)
    handler(modality, e24);
}
function $507fabe10e71c6fb$var$isValidKey(e24) {
  return !(e24.metaKey || !$c87311424ea30a05$export$9ac100e40613ea10() && e24.altKey || e24.ctrlKey || e24.key === "Control" || e24.key === "Shift" || e24.key === "Meta");
}
function $507fabe10e71c6fb$var$handleKeyboardEvent(e24) {
  $507fabe10e71c6fb$var$hasEventBeforeFocus = !0, $507fabe10e71c6fb$var$isValidKey(e24) && ($507fabe10e71c6fb$var$currentModality = "keyboard", $507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e24));
}
function $507fabe10e71c6fb$var$handlePointerEvent(e24) {
  $507fabe10e71c6fb$var$currentModality = "pointer", (e24.type === "mousedown" || e24.type === "pointerdown") && ($507fabe10e71c6fb$var$hasEventBeforeFocus = !0, $507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e24));
}
function $507fabe10e71c6fb$var$handleClickEvent(e24) {
  $6a7db85432448f7f$export$60278871457622de(e24) && ($507fabe10e71c6fb$var$hasEventBeforeFocus = !0, $507fabe10e71c6fb$var$currentModality = "virtual");
}
function $507fabe10e71c6fb$var$handleFocusEvent(e24) {
  e24.target === window || e24.target === document || (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently && ($507fabe10e71c6fb$var$currentModality = "virtual", $507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e24)), $507fabe10e71c6fb$var$hasEventBeforeFocus = !1, $507fabe10e71c6fb$var$hasBlurredWindowRecently = !1);
}
function $507fabe10e71c6fb$var$handleWindowBlur() {
  $507fabe10e71c6fb$var$hasEventBeforeFocus = !1, $507fabe10e71c6fb$var$hasBlurredWindowRecently = !0;
}
function $507fabe10e71c6fb$var$setupGlobalFocusEvents() {
  if (typeof window > "u" || $507fabe10e71c6fb$var$hasSetupGlobalListeners)
    return;
  let focus = HTMLElement.prototype.focus;
  HTMLElement.prototype.focus = function() {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = !0, focus.apply(this, arguments);
  }, document.addEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, !0), document.addEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, !0), document.addEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, !0), window.addEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, !0), window.addEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, !1), typeof PointerEvent < "u" ? (document.addEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, !0), document.addEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, !0), document.addEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, !0)) : (document.addEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, !0), document.addEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, !0), document.addEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, !0)), $507fabe10e71c6fb$var$hasSetupGlobalListeners = !0;
}
typeof document < "u" && (document.readyState !== "loading" ? $507fabe10e71c6fb$var$setupGlobalFocusEvents() : document.addEventListener("DOMContentLoaded", $507fabe10e71c6fb$var$setupGlobalFocusEvents));
function $507fabe10e71c6fb$export$b9b3dfddab17db27() {
  return $507fabe10e71c6fb$var$currentModality !== "pointer";
}
function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return $507fabe10e71c6fb$var$currentModality;
}
function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e24) {
  return !(isTextInput && modality === "keyboard" && e24 instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e24.key]);
}
function $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
  $507fabe10e71c6fb$var$setupGlobalFocusEvents(), (0, import_react4.useEffect)(() => {
    let handler = (modality, e24) => {
      $507fabe10e71c6fb$var$isKeyboardFocusEvent(opts == null ? void 0 : opts.isTextInput, modality, e24) && fn($507fabe10e71c6fb$export$b9b3dfddab17db27());
    };
    return $507fabe10e71c6fb$var$changeHandlers.add(handler), () => {
      $507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, deps);
}
function $9ab94262bd0047c7$export$420e68273165f4ec(props) {
  let { isDisabled, onBlurWithin, onFocusWithin, onFocusWithinChange } = props, state = (0, import_react4.useRef)({
    isFocusWithin: !1
  }), onBlur = (0, import_react4.useCallback)((e24) => {
    state.current.isFocusWithin && !e24.currentTarget.contains(e24.relatedTarget) && (state.current.isFocusWithin = !1, onBlurWithin && onBlurWithin(e24), onFocusWithinChange && onFocusWithinChange(!1));
  }, [
    onBlurWithin,
    onFocusWithinChange,
    state
  ]), onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur), onFocus = (0, import_react4.useCallback)((e24) => {
    !state.current.isFocusWithin && document.activeElement === e24.target && (onFocusWithin && onFocusWithin(e24), onFocusWithinChange && onFocusWithinChange(!0), state.current.isFocusWithin = !0, onSyntheticFocus(e24));
  }, [
    onFocusWithin,
    onFocusWithinChange,
    onSyntheticFocus
  ]);
  return isDisabled ? {
    focusWithinProps: {
      onFocus: null,
      onBlur: null
    }
  } : {
    focusWithinProps: {
      onFocus,
      onBlur
    }
  };
}
function $93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler)
    return;
  let shouldStopPropagation = !0;
  return (e24) => {
    let event = {
      ...e24,
      preventDefault() {
        e24.preventDefault();
      },
      isDefaultPrevented() {
        return e24.isDefaultPrevented();
      },
      stopPropagation() {
        console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
      },
      continuePropagation() {
        shouldStopPropagation = !1;
      }
    };
    handler(event), shouldStopPropagation && e24.stopPropagation();
  };
}
function $46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),
      onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)
    }
  };
}

// ../../../node_modules/@react-aria/focus/dist/import.mjs
var import_clsx2 = __toESM(require_clsx(), 1);
function $6a99195332edec8b$export$80f3e147d781571c(element) {
  if ($507fabe10e71c6fb$export$630ff653c5ada6a9() === "virtual") {
    let lastFocusedElement = document.activeElement;
    $bbed8b41f857bcc0$export$24490316f764c430(() => {
      document.activeElement === lastFocusedElement && document.contains(element) && $7215afc6de606d6b$export$de79e2c695e052f3(element);
    });
  } else
    $7215afc6de606d6b$export$de79e2c695e052f3(element);
}
var $9bf71ea28793e738$var$focusableElements = [
  "input:not([disabled]):not([type=hidden])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[contenteditable]"
], $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
var $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
function $9bf71ea28793e738$var$isElementInScope(element, scope) {
  return scope.some((node) => node.contains(element));
}
var $9bf71ea28793e738$var$Tree = class {
  get size() {
    return this.fastMap.size;
  }
  getTreeNode(data) {
    return this.fastMap.get(data);
  }
  addTreeNode(scopeRef, parent, nodeToRestore) {
    let parentNode = this.fastMap.get(parent ?? null), node = new $9bf71ea28793e738$var$TreeNode({
      scopeRef
    });
    parentNode.addChild(node), node.parent = parentNode, this.fastMap.set(scopeRef, node), nodeToRestore && (node.nodeToRestore = nodeToRestore);
  }
  addNode(node) {
    this.fastMap.set(node.scopeRef, node);
  }
  removeTreeNode(scopeRef) {
    if (scopeRef === null)
      return;
    let node = this.fastMap.get(scopeRef), parentNode = node.parent;
    for (let current of this.traverse())
      current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current) && (current.nodeToRestore = node.nodeToRestore);
    let children = node.children;
    parentNode.removeChild(node), children.size > 0 && children.forEach((child) => parentNode.addChild(child)), this.fastMap.delete(node.scopeRef);
  }
  // Pre Order Depth First
  *traverse(node = this.root) {
    if (node.scopeRef != null && (yield node), node.children.size > 0)
      for (let child of node.children)
        yield* this.traverse(child);
  }
  clone() {
    let newTree = new $9bf71ea28793e738$var$Tree();
    for (let node of this.traverse())
      newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);
    return newTree;
  }
  constructor() {
    _defineProperty(this, "fastMap", /* @__PURE__ */ new Map()), this.root = new $9bf71ea28793e738$var$TreeNode({
      scopeRef: null
    }), this.fastMap.set(null, this.root);
  }
}, $9bf71ea28793e738$var$TreeNode = class {
  addChild(node) {
    this.children.add(node), node.parent = this;
  }
  removeChild(node) {
    this.children.delete(node), node.parent = void 0;
  }
  constructor(props) {
    _defineProperty(this, "children", /* @__PURE__ */ new Set()), _defineProperty(this, "contain", !1), this.scopeRef = props.scopeRef;
  }
}, $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();
function $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {
  let { autoFocus = !1, isTextInput, within: within2 } = props, state = (0, import_react5.useRef)({
    isFocused: !1,
    isFocusVisible: autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27()
  }), [isFocused, setFocused] = (0, import_react5.useState)(!1), [isFocusVisibleState, setFocusVisible] = (0, import_react5.useState)(() => state.current.isFocused && state.current.isFocusVisible), updateState = (0, import_react5.useCallback)(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []), onFocusChange = (0, import_react5.useCallback)((isFocused2) => {
    state.current.isFocused = isFocused2, setFocused(isFocused2), updateState();
  }, [
    updateState
  ]);
  $507fabe10e71c6fb$export$ec71b4b83ac08ec3((isFocusVisible) => {
    state.current.isFocusVisible = isFocusVisible, updateState();
  }, [], {
    isTextInput
  });
  let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
    isDisabled: within2,
    onFocusChange
  }), { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
    isDisabled: !within2,
    onFocusWithinChange: onFocusChange
  });
  return {
    isFocused,
    isFocusVisible: state.current.isFocused && isFocusVisibleState,
    focusProps: within2 ? focusWithinProps : focusProps
  };
}
var $e6afbd83fe6ebbd2$var$FocusableContext = /* @__PURE__ */ import_react5.default.createContext(null);
function $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {
  let context = (0, import_react5.useContext)($e6afbd83fe6ebbd2$var$FocusableContext) || {};
  $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref);
  let { ref: _, ...otherProps } = context;
  return otherProps;
}
function $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {
  let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props), { keyboardProps } = $46d819fcbaf35654$export$8f71654801c2f7cd(props), interactions = $3ef42575df84b30b$export$9d1611c77c2fe928(focusProps, keyboardProps), domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef), interactionProps = props.isDisabled ? {} : domProps, autoFocusRef = (0, import_react5.useRef)(props.autoFocus);
  return (0, import_react5.useEffect)(() => {
    autoFocusRef.current && domRef.current && $6a99195332edec8b$export$80f3e147d781571c(domRef.current), autoFocusRef.current = !1;
  }, [
    domRef
  ]), {
    focusableProps: $3ef42575df84b30b$export$9d1611c77c2fe928({
      ...interactions,
      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : void 0
    }, interactionProps)
  };
}

// ../../../node_modules/@react-aria/link/dist/import.mjs
function $298d61e98472621b$export$dcf14c9974fe2767(props, ref) {
  let {
    elementType = "a",
    onPress,
    onPressStart,
    onPressEnd,
    // @ts-ignore
    onClick: deprecatedOnClick,
    isDisabled,
    ...otherProps
  } = props, linkProps = {};
  elementType !== "a" && (linkProps = {
    role: "link",
    tabIndex: isDisabled ? void 0 : 0
  });
  let { focusableProps } = $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, ref), { pressProps, isPressed } = $f6c31cce2adf654f$export$45712eceda6fad21({
    onPress,
    onPressStart,
    onPressEnd,
    isDisabled,
    ref
  }), domProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(otherProps, {
    labelable: !0
  }), interactionHandlers = $3ef42575df84b30b$export$9d1611c77c2fe928(focusableProps, pressProps);
  return {
    isPressed,
    linkProps: $3ef42575df84b30b$export$9d1611c77c2fe928(domProps, {
      ...interactionHandlers,
      ...linkProps,
      "aria-disabled": isDisabled || void 0,
      "aria-current": props["aria-current"],
      onClick: (e24) => {
        var _pressProps_onClick;
        (_pressProps_onClick = pressProps.onClick) === null || _pressProps_onClick === void 0 || _pressProps_onClick.call(pressProps, e24), deprecatedOnClick && (deprecatedOnClick(e24), console.warn("onClick is deprecated, please use onPress"));
      }
    })
  };
}

// ../../index.css
var src_default = "/build/_assets/index-EVDKF7T3.css";

// app/styles/index.css
var styles_default = "/build/_assets/index-SJ3NXQR4.css";

// app/root.jsx
var import_jsx_dev_runtime2 = __toESM(require_jsx_dev_runtime()), links = () => [
  { rel: "stylesheet", href: src_default },
  { rel: "stylesheet", href: styles_default }
];
function App() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("html", { lang: "en", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("head", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("meta", { charSet: "utf-8" }, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 14,
        columnNumber: 17
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(
        "meta",
        {
          name: "viewport",
          content: "width=device-width,initial-scale=1"
        },
        void 0,
        !1,
        {
          fileName: "app/root.jsx",
          lineNumber: 15,
          columnNumber: 17
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("title", { children: "Remix: So great, it's funny!" }, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 19,
        columnNumber: 17
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_react6.Links, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 20,
        columnNumber: 17
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.jsx",
      lineNumber: 13,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)("body", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)($704cf1d3b684cc5c$export$9f8ac96af4b1b2ae, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_react6.Outlet, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 24,
        columnNumber: 21
      }, this) }, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 23,
        columnNumber: 17
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime2.jsxDEV)(import_react6.Scripts, {}, void 0, !1, {
        fileName: "app/root.jsx",
        lineNumber: 26,
        columnNumber: 17
      }, this)
    ] }, void 0, !0, {
      fileName: "app/root.jsx",
      lineNumber: 22,
      columnNumber: 13
    }, this)
  ] }, void 0, !0, {
    fileName: "app/root.jsx",
    lineNumber: 12,
    columnNumber: 5
  }, this);
}

// app/routes/console.settings.billing.jsx
var console_settings_billing_exports = {};
__export(console_settings_billing_exports, {
  default: () => ConsoleSettingsBilling
});

// ../../components/atoms/button.jsx
var import_react29 = __toESM(require_react(), 1), import_prop_types = __toESM(require_prop_types(), 1), import_classnames = __toESM(require_classnames(), 1), import_react30 = __toESM(require_dist3(), 1);

// ../../../node_modules/framer-motion/dist/es/motion/index.mjs
var React = __toESM(require_react(), 1), import_react17 = __toESM(require_react(), 1);

// ../../../node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs
var import_react7 = __toESM(require_react(), 1), MotionConfigContext = (0, import_react7.createContext)({
  transformPagePoint: (p) => p,
  isStatic: !1,
  reducedMotion: "never"
});

// ../../../node_modules/framer-motion/dist/es/context/MotionContext/index.mjs
var import_react8 = __toESM(require_react(), 1), MotionContext = (0, import_react8.createContext)({});

// ../../../node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
var import_react12 = __toESM(require_react(), 1);

// ../../../node_modules/framer-motion/dist/es/context/PresenceContext.mjs
var import_react9 = __toESM(require_react(), 1), PresenceContext = (0, import_react9.createContext)(null);

// ../../../node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
var import_react10 = __toESM(require_react(), 1);

// ../../../node_modules/framer-motion/dist/es/utils/is-browser.mjs
var isBrowser = typeof document < "u";

// ../../../node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
var useIsomorphicLayoutEffect = isBrowser ? import_react10.useLayoutEffect : import_react10.useEffect;

// ../../../node_modules/framer-motion/dist/es/context/LazyContext.mjs
var import_react11 = __toESM(require_react(), 1), LazyContext = (0, import_react11.createContext)({ strict: !1 });

// ../../../node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
function useVisualElement(Component, visualState, props, createVisualElement) {
  let { visualElement: parent } = (0, import_react12.useContext)(MotionContext), lazyContext = (0, import_react12.useContext)(LazyContext), presenceContext = (0, import_react12.useContext)(PresenceContext), reducedMotionConfig = (0, import_react12.useContext)(MotionConfigContext).reducedMotion, visualElementRef = (0, import_react12.useRef)();
  createVisualElement = createVisualElement || lazyContext.renderer, !visualElementRef.current && createVisualElement && (visualElementRef.current = createVisualElement(Component, {
    visualState,
    parent,
    props,
    presenceContext,
    blockInitialAnimation: presenceContext ? presenceContext.initial === !1 : !1,
    reducedMotionConfig
  }));
  let visualElement = visualElementRef.current;
  return (0, import_react12.useInsertionEffect)(() => {
    visualElement && visualElement.update(props, presenceContext);
  }), useIsomorphicLayoutEffect(() => {
    visualElement && visualElement.render();
  }), (0, import_react12.useEffect)(() => {
    visualElement && visualElement.updateFeatures();
  }), (window.HandoffAppearAnimations ? useIsomorphicLayoutEffect : import_react12.useEffect)(() => {
    visualElement && visualElement.animationState && visualElement.animationState.animateChanges();
  }), visualElement;
}

// ../../../node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
var import_react13 = __toESM(require_react(), 1);

// ../../../node_modules/framer-motion/dist/es/utils/is-ref-object.mjs
function isRefObject(ref) {
  return typeof ref == "object" && Object.prototype.hasOwnProperty.call(ref, "current");
}

// ../../../node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
function useMotionRef(visualState, visualElement, externalRef) {
  return (0, import_react13.useCallback)(
    (instance) => {
      instance && visualState.mount && visualState.mount(instance), visualElement && (instance ? visualElement.mount(instance) : visualElement.unmount()), externalRef && (typeof externalRef == "function" ? externalRef(instance) : isRefObject(externalRef) && (externalRef.current = instance));
    },
    /**
     * Only pass a new ref callback to React if we've received a visual element
     * factory. Otherwise we'll be mounting/remounting every time externalRef
     * or other dependencies change.
     */
    [visualElement]
  );
}

// ../../../node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
var import_react14 = __toESM(require_react(), 1);

// ../../../node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs
function isVariantLabel(v) {
  return typeof v == "string" || Array.isArray(v);
}

// ../../../node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs
function isAnimationControls(v) {
  return typeof v == "object" && typeof v.start == "function";
}

// ../../../node_modules/framer-motion/dist/es/render/utils/variant-props.mjs
var variantPriorityOrder = [
  "animate",
  "whileInView",
  "whileFocus",
  "whileHover",
  "whileTap",
  "whileDrag",
  "exit"
], variantProps = ["initial", ...variantPriorityOrder];

// ../../../node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs
function isControllingVariants(props) {
  return isAnimationControls(props.animate) || variantProps.some((name) => isVariantLabel(props[name]));
}
function isVariantNode(props) {
  return Boolean(isControllingVariants(props) || props.variants);
}

// ../../../node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
function getCurrentTreeVariants(props, context) {
  if (isControllingVariants(props)) {
    let { initial, animate } = props;
    return {
      initial: initial === !1 || isVariantLabel(initial) ? initial : void 0,
      animate: isVariantLabel(animate) ? animate : void 0
    };
  }
  return props.inherit !== !1 ? context : {};
}

// ../../../node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
function useCreateMotionContext(props) {
  let { initial, animate } = getCurrentTreeVariants(props, (0, import_react14.useContext)(MotionContext));
  return (0, import_react14.useMemo)(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);
}
function variantLabelsAsDependency(prop) {
  return Array.isArray(prop) ? prop.join(" ") : prop;
}

// ../../../node_modules/framer-motion/dist/es/motion/features/definitions.mjs
var featureProps = {
  animation: [
    "animate",
    "variants",
    "whileHover",
    "whileTap",
    "exit",
    "whileInView",
    "whileFocus",
    "whileDrag"
  ],
  exit: ["exit"],
  drag: ["drag", "dragControls"],
  focus: ["whileFocus"],
  hover: ["whileHover", "onHoverStart", "onHoverEnd"],
  tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
  pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
  inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
  layout: ["layout", "layoutId"]
}, featureDefinitions = {};
for (let key in featureProps)
  featureDefinitions[key] = {
    isEnabled: (props) => featureProps[key].some((name) => !!props[name])
  };

// ../../../node_modules/framer-motion/dist/es/motion/features/load-features.mjs
function loadFeatures(features) {
  for (let key in features)
    featureDefinitions[key] = {
      ...featureDefinitions[key],
      ...features[key]
    };
}

// ../../../node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs
var import_react15 = __toESM(require_react(), 1), LayoutGroupContext = (0, import_react15.createContext)({});

// ../../../node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs
var import_react16 = __toESM(require_react(), 1), SwitchLayoutGroupContext = (0, import_react16.createContext)({});

// ../../../node_modules/framer-motion/dist/es/motion/utils/symbol.mjs
var motionComponentSymbol = Symbol.for("motionComponentSymbol");

// ../../../node_modules/framer-motion/dist/es/motion/index.mjs
function createMotionComponent({ preloadedFeatures: preloadedFeatures2, createVisualElement, useRender, useVisualState, Component }) {
  preloadedFeatures2 && loadFeatures(preloadedFeatures2);
  function MotionComponent(props, externalRef) {
    let MeasureLayout2, configAndProps = {
      ...(0, import_react17.useContext)(MotionConfigContext),
      ...props,
      layoutId: useLayoutId(props)
    }, { isStatic } = configAndProps, context = useCreateMotionContext(props), visualState = useVisualState(props, isStatic);
    if (!isStatic && isBrowser) {
      context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);
      let initialLayoutGroupConfig = (0, import_react17.useContext)(SwitchLayoutGroupContext), isStrict = (0, import_react17.useContext)(LazyContext).strict;
      context.visualElement && (MeasureLayout2 = context.visualElement.loadFeatures(
        // Note: Pass the full new combined props to correctly re-render dynamic feature components.
        configAndProps,
        isStrict,
        preloadedFeatures2,
        initialLayoutGroupConfig
      ));
    }
    return React.createElement(
      MotionContext.Provider,
      { value: context },
      MeasureLayout2 && context.visualElement ? React.createElement(MeasureLayout2, { visualElement: context.visualElement, ...configAndProps }) : null,
      useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)
    );
  }
  let ForwardRefComponent = (0, import_react17.forwardRef)(MotionComponent);
  return ForwardRefComponent[motionComponentSymbol] = Component, ForwardRefComponent;
}
function useLayoutId({ layoutId }) {
  let layoutGroupId = (0, import_react17.useContext)(LayoutGroupContext).id;
  return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
}

// ../../../node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs
function createMotionProxy(createConfig) {
  function custom(Component, customMotionComponentConfig = {}) {
    return createMotionComponent(createConfig(Component, customMotionComponentConfig));
  }
  if (typeof Proxy > "u")
    return custom;
  let componentCache = /* @__PURE__ */ new Map();
  return new Proxy(custom, {
    /**
     * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
     * The prop name is passed through as `key` and we can use that to generate a `motion`
     * DOM component with that name.
     */
    get: (_target, key) => (componentCache.has(key) || componentCache.set(key, custom(key)), componentCache.get(key))
  });
}

// ../../../node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs
var lowercaseSVGElements = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "switch",
  "symbol",
  "svg",
  "text",
  "tspan",
  "use",
  "view"
];

// ../../../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
function isSVGComponent(Component) {
  return (
    /**
     * If it's not a string, it's a custom React component. Currently we only support
     * HTML custom React components.
     */
    typeof Component != "string" || /**
     * If it contains a dash, the element is a custom HTML webcomponent.
     */
    Component.includes("-") ? !1 : (
      /**
       * If it's in our list of lowercase SVG tags, it's an SVG component
       */
      !!(lowercaseSVGElements.indexOf(Component) > -1 || /**
       * If it contains a capital letter, it's an SVG component
       */
      /[A-Z]/.test(Component))
    )
  );
}

// ../../../node_modules/framer-motion/dist/es/render/dom/use-render.mjs
var import_react20 = __toESM(require_react(), 1);

// ../../../node_modules/framer-motion/dist/es/render/html/use-props.mjs
var import_react18 = __toESM(require_react(), 1);

// ../../../node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs
var scaleCorrectors = {};
function addScaleCorrector(correctors) {
  Object.assign(scaleCorrectors, correctors);
}

// ../../../node_modules/framer-motion/dist/es/render/html/utils/transform.mjs
var transformPropOrder = [
  "transformPerspective",
  "x",
  "y",
  "z",
  "translateX",
  "translateY",
  "translateZ",
  "scale",
  "scaleX",
  "scaleY",
  "rotate",
  "rotateX",
  "rotateY",
  "rotateZ",
  "skew",
  "skewX",
  "skewY"
], transformProps = new Set(transformPropOrder);

// ../../../node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
function isForcedMotionValue(key, { layout: layout2, layoutId }) {
  return transformProps.has(key) || key.startsWith("origin") || (layout2 || layoutId !== void 0) && (!!scaleCorrectors[key] || key === "opacity");
}

// ../../../node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs
var isMotionValue = (value) => Boolean(value && value.getVelocity);

// ../../../node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs
var translateAlias = {
  x: "translateX",
  y: "translateY",
  z: "translateZ",
  transformPerspective: "perspective"
}, numTransforms = transformPropOrder.length;
function buildTransform(transform, { enableHardwareAcceleration = !0, allowTransformNone = !0 }, transformIsDefault, transformTemplate) {
  let transformString = "";
  for (let i13 = 0; i13 < numTransforms; i13++) {
    let key = transformPropOrder[i13];
    if (transform[key] !== void 0) {
      let transformName = translateAlias[key] || key;
      transformString += `${transformName}(${transform[key]}) `;
    }
  }
  return enableHardwareAcceleration && !transform.z && (transformString += "translateZ(0)"), transformString = transformString.trim(), transformTemplate ? transformString = transformTemplate(transform, transformIsDefault ? "" : transformString) : allowTransformNone && transformIsDefault && (transformString = "none"), transformString;
}

// ../../../node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs
var checkStringStartsWith = (token) => (key) => typeof key == "string" && key.startsWith(token), isCSSVariableName = checkStringStartsWith("--"), isCSSVariableToken = checkStringStartsWith("var(--"), cssVariableRegex = /var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g;

// ../../../node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs
var getValueAsType = (value, type2) => type2 && typeof value == "number" ? type2.transform(value) : value;

// ../../../node_modules/framer-motion/dist/es/utils/clamp.mjs
var clamp = (min3, max3, v) => Math.min(Math.max(v, min3), max3);

// ../../../node_modules/framer-motion/dist/es/value/types/numbers/index.mjs
var number = {
  test: (v) => typeof v == "number",
  parse: parseFloat,
  transform: (v) => v
}, alpha = {
  ...number,
  transform: (v) => clamp(0, 1, v)
}, scale = {
  ...number,
  default: 1
};

// ../../../node_modules/framer-motion/dist/es/value/types/utils.mjs
var sanitize = (v) => Math.round(v * 1e5) / 1e5, floatRegex = /(-)?([\d]*\.?[\d])+/g, colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi, singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
function isString(v) {
  return typeof v == "string";
}

// ../../../node_modules/framer-motion/dist/es/value/types/numbers/units.mjs
var createUnitType = (unit) => ({
  test: (v) => isString(v) && v.endsWith(unit) && v.split(" ").length === 1,
  parse: parseFloat,
  transform: (v) => `${v}${unit}`
}), degrees = createUnitType("deg"), percent = createUnitType("%"), px = createUnitType("px"), vh = createUnitType("vh"), vw = createUnitType("vw"), progressPercentage = {
  ...percent,
  parse: (v) => percent.parse(v) / 100,
  transform: (v) => percent.transform(v * 100)
};

// ../../../node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs
var int = {
  ...number,
  transform: Math.round
};

// ../../../node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
var numberValueTypes = {
  // Border props
  borderWidth: px,
  borderTopWidth: px,
  borderRightWidth: px,
  borderBottomWidth: px,
  borderLeftWidth: px,
  borderRadius: px,
  radius: px,
  borderTopLeftRadius: px,
  borderTopRightRadius: px,
  borderBottomRightRadius: px,
  borderBottomLeftRadius: px,
  // Positioning props
  width: px,
  maxWidth: px,
  height: px,
  maxHeight: px,
  size: px,
  top: px,
  right: px,
  bottom: px,
  left: px,
  // Spacing props
  padding: px,
  paddingTop: px,
  paddingRight: px,
  paddingBottom: px,
  paddingLeft: px,
  margin: px,
  marginTop: px,
  marginRight: px,
  marginBottom: px,
  marginLeft: px,
  // Transform props
  rotate: degrees,
  rotateX: degrees,
  rotateY: degrees,
  rotateZ: degrees,
  scale,
  scaleX: scale,
  scaleY: scale,
  scaleZ: scale,
  skew: degrees,
  skewX: degrees,
  skewY: degrees,
  distance: px,
  translateX: px,
  translateY: px,
  translateZ: px,
  x: px,
  y: px,
  z: px,
  perspective: px,
  transformPerspective: px,
  opacity: alpha,
  originX: progressPercentage,
  originY: progressPercentage,
  originZ: px,
  // Misc
  zIndex: int,
  // SVG
  fillOpacity: alpha,
  strokeOpacity: alpha,
  numOctaves: int
};

// ../../../node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
function buildHTMLStyles(state, latestValues, options, transformTemplate) {
  let { style, vars, transform, transformOrigin } = state, hasTransform2 = !1, hasTransformOrigin = !1, transformIsNone = !0;
  for (let key in latestValues) {
    let value = latestValues[key];
    if (isCSSVariableName(key)) {
      vars[key] = value;
      continue;
    }
    let valueType = numberValueTypes[key], valueAsType = getValueAsType(value, valueType);
    if (transformProps.has(key)) {
      if (hasTransform2 = !0, transform[key] = valueAsType, !transformIsNone)
        continue;
      value !== (valueType.default || 0) && (transformIsNone = !1);
    } else
      key.startsWith("origin") ? (hasTransformOrigin = !0, transformOrigin[key] = valueAsType) : style[key] = valueAsType;
  }
  if (latestValues.transform || (hasTransform2 || transformTemplate ? style.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate) : style.transform && (style.transform = "none")), hasTransformOrigin) {
    let { originX = "50%", originY = "50%", originZ = 0 } = transformOrigin;
    style.transformOrigin = `${originX} ${originY} ${originZ}`;
  }
}

// ../../../node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs
var createHtmlRenderState = () => ({
  style: {},
  transform: {},
  transformOrigin: {},
  vars: {}
});

// ../../../node_modules/framer-motion/dist/es/render/html/use-props.mjs
function copyRawValuesOnly(target, source, props) {
  for (let key in source)
    !isMotionValue(source[key]) && !isForcedMotionValue(key, props) && (target[key] = source[key]);
}
function useInitialMotionValues({ transformTemplate }, visualState, isStatic) {
  return (0, import_react18.useMemo)(() => {
    let state = createHtmlRenderState();
    return buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate), Object.assign({}, state.vars, state.style);
  }, [visualState]);
}
function useStyle(props, visualState, isStatic) {
  let styleProp = props.style || {}, style = {};
  return copyRawValuesOnly(style, styleProp, props), Object.assign(style, useInitialMotionValues(props, visualState, isStatic)), props.transformValues ? props.transformValues(style) : style;
}
function useHTMLProps(props, visualState, isStatic) {
  let htmlProps = {}, style = useStyle(props, visualState, isStatic);
  return props.drag && props.dragListener !== !1 && (htmlProps.draggable = !1, style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none", style.touchAction = props.drag === !0 ? "none" : `pan-${props.drag === "x" ? "y" : "x"}`), props.tabIndex === void 0 && (props.onTap || props.onTapStart || props.whileTap) && (htmlProps.tabIndex = 0), htmlProps.style = style, htmlProps;
}

// ../../../node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs
var validMotionProps = /* @__PURE__ */ new Set([
  "animate",
  "exit",
  "variants",
  "initial",
  "style",
  "values",
  "variants",
  "transition",
  "transformTemplate",
  "transformValues",
  "custom",
  "inherit",
  "onLayoutAnimationStart",
  "onLayoutAnimationComplete",
  "onLayoutMeasure",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "_dragX",
  "_dragY",
  "onHoverStart",
  "onHoverEnd",
  "onViewportEnter",
  "onViewportLeave",
  "ignoreStrict",
  "viewport"
]);
function isValidMotionProp(key) {
  return key.startsWith("while") || key.startsWith("drag") && key !== "draggable" || key.startsWith("layout") || key.startsWith("onTap") || key.startsWith("onPan") || validMotionProps.has(key);
}

// ../../../node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
var shouldForward = (key) => !isValidMotionProp(key);
function loadExternalIsValidProp(isValidProp) {
  isValidProp && (shouldForward = (key) => key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key));
}
try {
  loadExternalIsValidProp(require_is_prop_valid_cjs().default);
} catch {
}
function filterProps(props, isDom, forwardMotionProps) {
  let filteredProps = {};
  for (let key in props)
    key === "values" && typeof props.values == "object" || (shouldForward(key) || forwardMotionProps === !0 && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || // If trying to use native HTML drag events, forward drag listeners
    props.draggable && key.startsWith("onDrag")) && (filteredProps[key] = props[key]);
  return filteredProps;
}

// ../../../node_modules/framer-motion/dist/es/render/svg/use-props.mjs
var import_react19 = __toESM(require_react(), 1);

// ../../../node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs
function calcOrigin(origin, offset2, size2) {
  return typeof origin == "string" ? origin : px.transform(offset2 + size2 * origin);
}
function calcSVGTransformOrigin(dimensions, originX, originY) {
  let pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width), pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
  return `${pxOriginX} ${pxOriginY}`;
}

// ../../../node_modules/framer-motion/dist/es/render/svg/utils/path.mjs
var dashKeys = {
  offset: "stroke-dashoffset",
  array: "stroke-dasharray"
}, camelKeys = {
  offset: "strokeDashoffset",
  array: "strokeDasharray"
};
function buildSVGPath(attrs, length, spacing = 1, offset2 = 0, useDashCase = !0) {
  attrs.pathLength = 1;
  let keys = useDashCase ? dashKeys : camelKeys;
  attrs[keys.offset] = px.transform(-offset2);
  let pathLength = px.transform(length), pathSpacing = px.transform(spacing);
  attrs[keys.array] = `${pathLength} ${pathSpacing}`;
}

// ../../../node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
function buildSVGAttrs(state, {
  attrX,
  attrY,
  attrScale,
  originX,
  originY,
  pathLength,
  pathSpacing = 1,
  pathOffset = 0,
  // This is object creation, which we try to avoid per-frame.
  ...latest
}, options, isSVGTag2, transformTemplate) {
  if (buildHTMLStyles(state, latest, options, transformTemplate), isSVGTag2) {
    state.style.viewBox && (state.attrs.viewBox = state.style.viewBox);
    return;
  }
  state.attrs = state.style, state.style = {};
  let { attrs, style, dimensions } = state;
  attrs.transform && (dimensions && (style.transform = attrs.transform), delete attrs.transform), dimensions && (originX !== void 0 || originY !== void 0 || style.transform) && (style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5)), attrX !== void 0 && (attrs.x = attrX), attrY !== void 0 && (attrs.y = attrY), attrScale !== void 0 && (attrs.scale = attrScale), pathLength !== void 0 && buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, !1);
}

// ../../../node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs
var createSvgRenderState = () => ({
  ...createHtmlRenderState(),
  attrs: {}
});

// ../../../node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs
var isSVGTag = (tag) => typeof tag == "string" && tag.toLowerCase() === "svg";

// ../../../node_modules/framer-motion/dist/es/render/svg/use-props.mjs
function useSVGProps(props, visualState, _isStatic, Component) {
  let visualProps = (0, import_react19.useMemo)(() => {
    let state = createSvgRenderState();
    return buildSVGAttrs(state, visualState, { enableHardwareAcceleration: !1 }, isSVGTag(Component), props.transformTemplate), {
      ...state.attrs,
      style: { ...state.style }
    };
  }, [visualState]);
  if (props.style) {
    let rawStyles = {};
    copyRawValuesOnly(rawStyles, props.style, props), visualProps.style = { ...rawStyles, ...visualProps.style };
  }
  return visualProps;
}

// ../../../node_modules/framer-motion/dist/es/render/dom/use-render.mjs
function createUseRender(forwardMotionProps = !1) {
  return (Component, props, ref, { latestValues }, isStatic) => {
    let visualProps = (isSVGComponent(Component) ? useSVGProps : useHTMLProps)(props, latestValues, isStatic, Component), elementProps = {
      ...filterProps(props, typeof Component == "string", forwardMotionProps),
      ...visualProps,
      ref
    }, { children } = props, renderedChildren = (0, import_react20.useMemo)(() => isMotionValue(children) ? children.get() : children, [children]);
    return (0, import_react20.createElement)(Component, {
      ...elementProps,
      children: renderedChildren
    });
  };
}

// ../../../node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs
var camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();

// ../../../node_modules/framer-motion/dist/es/render/html/utils/render.mjs
function renderHTML(element, { style, vars }, styleProp, projection) {
  Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
  for (let key in vars)
    element.style.setProperty(key, vars[key]);
}

// ../../../node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs
var camelCaseAttributes = /* @__PURE__ */ new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox",
  "gradientTransform",
  "pathLength",
  "startOffset",
  "textLength",
  "lengthAdjust"
]);

// ../../../node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
function renderSVG(element, renderState, _styleProp, projection) {
  renderHTML(element, renderState, void 0, projection);
  for (let key in renderState.attrs)
    element.setAttribute(camelCaseAttributes.has(key) ? key : camelToDash(key), renderState.attrs[key]);
}

// ../../../node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs
function scrapeMotionValuesFromProps(props, prevProps) {
  let { style } = props, newValues = {};
  for (let key in style)
    (isMotionValue(style[key]) || prevProps.style && isMotionValue(prevProps.style[key]) || isForcedMotionValue(key, props)) && (newValues[key] = style[key]);
  return newValues;
}

// ../../../node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
function scrapeMotionValuesFromProps2(props, prevProps) {
  let newValues = scrapeMotionValuesFromProps(props, prevProps);
  for (let key in props)
    if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {
      let targetKey = transformPropOrder.indexOf(key) !== -1 ? "attr" + key.charAt(0).toUpperCase() + key.substring(1) : key;
      newValues[targetKey] = props[key];
    }
  return newValues;
}

// ../../../node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
var import_react22 = __toESM(require_react(), 1);

// ../../../node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs
function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {
  return typeof definition == "function" && (definition = definition(custom !== void 0 ? custom : props.custom, currentValues, currentVelocity)), typeof definition == "string" && (definition = props.variants && props.variants[definition]), typeof definition == "function" && (definition = definition(custom !== void 0 ? custom : props.custom, currentValues, currentVelocity)), definition;
}

// ../../../node_modules/framer-motion/dist/es/utils/use-constant.mjs
var import_react21 = __toESM(require_react(), 1);
function useConstant(init) {
  let ref = (0, import_react21.useRef)(null);
  return ref.current === null && (ref.current = init()), ref.current;
}

// ../../../node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs
var isKeyframesTarget = (v) => Array.isArray(v);

// ../../../node_modules/framer-motion/dist/es/utils/resolve-value.mjs
var isCustomValue = (v) => Boolean(v && typeof v == "object" && v.mix && v.toValue), resolveFinalValueInKeyframes = (v) => isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;

// ../../../node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
function resolveMotionValue(value) {
  let unwrappedValue = isMotionValue(value) ? value.get() : value;
  return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
}

// ../../../node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
function makeState({ scrapeMotionValuesFromProps: scrapeMotionValuesFromProps3, createRenderState, onMount }, props, context, presenceContext) {
  let state = {
    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps3),
    renderState: createRenderState()
  };
  return onMount && (state.mount = (instance) => onMount(props, instance, state)), state;
}
var makeUseVisualState = (config) => (props, isStatic) => {
  let context = (0, import_react22.useContext)(MotionContext), presenceContext = (0, import_react22.useContext)(PresenceContext), make = () => makeState(config, props, context, presenceContext);
  return isStatic ? make() : useConstant(make);
};
function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
  let values = {}, motionValues = scrapeMotionValues(props, {});
  for (let key in motionValues)
    values[key] = resolveMotionValue(motionValues[key]);
  let { initial, animate } = props, isControllingVariants$1 = isControllingVariants(props), isVariantNode$1 = isVariantNode(props);
  context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== !1 && (initial === void 0 && (initial = context.initial), animate === void 0 && (animate = context.animate));
  let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === !1 : !1;
  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === !1;
  let variantToSet = isInitialAnimationBlocked ? animate : initial;
  return variantToSet && typeof variantToSet != "boolean" && !isAnimationControls(variantToSet) && (Array.isArray(variantToSet) ? variantToSet : [variantToSet]).forEach((definition) => {
    let resolved = resolveVariantFromProps(props, definition);
    if (!resolved)
      return;
    let { transitionEnd, transition, ...target } = resolved;
    for (let key in target) {
      let valueTarget = target[key];
      if (Array.isArray(valueTarget)) {
        let index2 = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;
        valueTarget = valueTarget[index2];
      }
      valueTarget !== null && (values[key] = valueTarget);
    }
    for (let key in transitionEnd)
      values[key] = transitionEnd[key];
  }), values;
}

// ../../../node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
var svgMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
    createRenderState: createSvgRenderState,
    onMount: (props, instance, { renderState, latestValues }) => {
      try {
        renderState.dimensions = typeof instance.getBBox == "function" ? instance.getBBox() : instance.getBoundingClientRect();
      } catch {
        renderState.dimensions = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
      }
      buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: !1 }, isSVGTag(instance.tagName), props.transformTemplate), renderSVG(instance, renderState);
    }
  })
};

// ../../../node_modules/framer-motion/dist/es/render/html/config-motion.mjs
var htmlMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps,
    createRenderState: createHtmlRenderState
  })
};

// ../../../node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs
function createDomMotionConfig(Component, { forwardMotionProps = !1 }, preloadedFeatures2, createVisualElement) {
  return {
    ...isSVGComponent(Component) ? svgMotionConfig : htmlMotionConfig,
    preloadedFeatures: preloadedFeatures2,
    useRender: createUseRender(forwardMotionProps),
    createVisualElement,
    Component
  };
}

// ../../../node_modules/framer-motion/dist/es/events/add-dom-event.mjs
function addDomEvent(target, eventName, handler, options = { passive: !0 }) {
  return target.addEventListener(eventName, handler, options), () => target.removeEventListener(eventName, handler);
}

// ../../../node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs
var isPrimaryPointer = (event) => event.pointerType === "mouse" ? typeof event.button != "number" || event.button <= 0 : event.isPrimary !== !1;

// ../../../node_modules/framer-motion/dist/es/events/event-info.mjs
function extractEventInfo(event, pointType = "page") {
  return {
    point: {
      x: event[pointType + "X"],
      y: event[pointType + "Y"]
    }
  };
}
var addPointerInfo = (handler) => (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));

// ../../../node_modules/framer-motion/dist/es/events/add-pointer-event.mjs
function addPointerEvent(target, eventName, handler, options) {
  return addDomEvent(target, eventName, addPointerInfo(handler), options);
}

// ../../../node_modules/framer-motion/dist/es/utils/pipe.mjs
var combineFunctions = (a9, b) => (v) => b(a9(v)), pipe = (...transformers) => transformers.reduce(combineFunctions);

// ../../../node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs
function createLock(name) {
  let lock = null;
  return () => {
    let openLock = () => {
      lock = null;
    };
    return lock === null ? (lock = name, openLock) : !1;
  };
}
var globalHorizontalLock = createLock("dragHorizontal"), globalVerticalLock = createLock("dragVertical");
function getGlobalLock(drag2) {
  let lock = !1;
  if (drag2 === "y")
    lock = globalVerticalLock();
  else if (drag2 === "x")
    lock = globalHorizontalLock();
  else {
    let openHorizontal = globalHorizontalLock(), openVertical = globalVerticalLock();
    openHorizontal && openVertical ? lock = () => {
      openHorizontal(), openVertical();
    } : (openHorizontal && openHorizontal(), openVertical && openVertical());
  }
  return lock;
}
function isDragActive() {
  let openGestureLock = getGlobalLock(!0);
  return openGestureLock ? (openGestureLock(), !1) : !0;
}

// ../../../node_modules/framer-motion/dist/es/motion/features/Feature.mjs
var Feature = class {
  constructor(node) {
    this.isMounted = !1, this.node = node;
  }
  update() {
  }
};

// ../../../node_modules/framer-motion/dist/es/frameloop/create-render-step.mjs
function createRenderStep(runNextFrame2) {
  let toRun = [], toRunNextFrame = [], numToRun = 0, isProcessing = !1, flushNextFrame = !1, toKeepAlive = /* @__PURE__ */ new WeakSet(), step2 = {
    /**
     * Schedule a process to run on the next frame.
     */
    schedule: (callback, keepAlive = !1, immediate = !1) => {
      let addToCurrentFrame = immediate && isProcessing, buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      return keepAlive && toKeepAlive.add(callback), buffer.indexOf(callback) === -1 && (buffer.push(callback), addToCurrentFrame && isProcessing && (numToRun = toRun.length)), callback;
    },
    /**
     * Cancel the provided callback from running on the next frame.
     */
    cancel: (callback) => {
      let index2 = toRunNextFrame.indexOf(callback);
      index2 !== -1 && toRunNextFrame.splice(index2, 1), toKeepAlive.delete(callback);
    },
    /**
     * Execute all schedule callbacks.
     */
    process: (frameData2) => {
      if (isProcessing) {
        flushNextFrame = !0;
        return;
      }
      if (isProcessing = !0, [toRun, toRunNextFrame] = [toRunNextFrame, toRun], toRunNextFrame.length = 0, numToRun = toRun.length, numToRun)
        for (let i13 = 0; i13 < numToRun; i13++) {
          let callback = toRun[i13];
          callback(frameData2), toKeepAlive.has(callback) && (step2.schedule(callback), runNextFrame2());
        }
      isProcessing = !1, flushNextFrame && (flushNextFrame = !1, step2.process(frameData2));
    }
  };
  return step2;
}

// ../../../node_modules/framer-motion/dist/es/frameloop/data.mjs
var frameData = {
  delta: 0,
  timestamp: 0,
  isProcessing: !1
};

// ../../../node_modules/framer-motion/dist/es/frameloop/index.mjs
var maxElapsed = 40, useDefaultElapsed = !0, runNextFrame = !1, stepsOrder = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
], steps = stepsOrder.reduce((acc, key) => (acc[key] = createRenderStep(() => runNextFrame = !0), acc), {}), processStep = (stepId) => steps[stepId].process(frameData), processFrame = (timestamp) => {
  runNextFrame = !1, frameData.delta = useDefaultElapsed ? 1e3 / 60 : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed), 1), frameData.timestamp = timestamp, frameData.isProcessing = !0, stepsOrder.forEach(processStep), frameData.isProcessing = !1, runNextFrame && (useDefaultElapsed = !1, requestAnimationFrame(processFrame));
}, startLoop = () => {
  runNextFrame = !0, useDefaultElapsed = !0, frameData.isProcessing || requestAnimationFrame(processFrame);
}, frame = stepsOrder.reduce((acc, key) => {
  let step2 = steps[key];
  return acc[key] = (process2, keepAlive = !1, immediate = !1) => (runNextFrame || startLoop(), step2.schedule(process2, keepAlive, immediate)), acc;
}, {});
function cancelFrame(process2) {
  stepsOrder.forEach((key) => steps[key].cancel(process2));
}

// ../../../node_modules/framer-motion/dist/es/gestures/hover.mjs
function addHoverEvent(node, isActive) {
  let eventName = "pointer" + (isActive ? "enter" : "leave"), callbackName = "onHover" + (isActive ? "Start" : "End"), handleEvent = (event, info) => {
    if (event.type === "touch" || isDragActive())
      return;
    let props = node.getProps();
    node.animationState && props.whileHover && node.animationState.setActive("whileHover", isActive), props[callbackName] && frame.update(() => props[callbackName](event, info));
  };
  return addPointerEvent(node.current, eventName, handleEvent, {
    passive: !node.getProps()[callbackName]
  });
}
var HoverGesture = class extends Feature {
  mount() {
    this.unmount = pipe(addHoverEvent(this.node, !0), addHoverEvent(this.node, !1));
  }
  unmount() {
  }
};

// ../../../node_modules/framer-motion/dist/es/gestures/focus.mjs
var FocusGesture = class extends Feature {
  constructor() {
    super(...arguments), this.isActive = !1;
  }
  onFocus() {
    let isFocusVisible = !1;
    try {
      isFocusVisible = this.node.current.matches(":focus-visible");
    } catch {
      isFocusVisible = !0;
    }
    !isFocusVisible || !this.node.animationState || (this.node.animationState.setActive("whileFocus", !0), this.isActive = !0);
  }
  onBlur() {
    !this.isActive || !this.node.animationState || (this.node.animationState.setActive("whileFocus", !1), this.isActive = !1);
  }
  mount() {
    this.unmount = pipe(addDomEvent(this.node.current, "focus", () => this.onFocus()), addDomEvent(this.node.current, "blur", () => this.onBlur()));
  }
  unmount() {
  }
};

// ../../../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs
var isNodeOrChild = (parent, child) => child ? parent === child ? !0 : isNodeOrChild(parent, child.parentElement) : !1;

// ../../../node_modules/framer-motion/dist/es/utils/noop.mjs
var noop = (any) => any;

// ../../../node_modules/framer-motion/dist/es/gestures/press.mjs
function fireSyntheticPointerEvent(name, handler) {
  if (!handler)
    return;
  let syntheticPointerEvent = new PointerEvent("pointer" + name);
  handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));
}
var PressGesture = class extends Feature {
  constructor() {
    super(...arguments), this.removeStartListeners = noop, this.removeEndListeners = noop, this.removeAccessibleListeners = noop, this.startPointerPress = (startEvent, startInfo) => {
      if (this.removeEndListeners(), this.isPressing)
        return;
      let props = this.node.getProps(), removePointerUpListener = addPointerEvent(window, "pointerup", (endEvent, endInfo) => {
        if (!this.checkPressEnd())
          return;
        let { onTap, onTapCancel } = this.node.getProps();
        frame.update(() => {
          isNodeOrChild(this.node.current, endEvent.target) ? onTap && onTap(endEvent, endInfo) : onTapCancel && onTapCancel(endEvent, endInfo);
        });
      }, { passive: !(props.onTap || props.onPointerUp) }), removePointerCancelListener = addPointerEvent(window, "pointercancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props.onPointerCancel) });
      this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener), this.startPress(startEvent, startInfo);
    }, this.startAccessiblePress = () => {
      let handleKeydown = (keydownEvent) => {
        if (keydownEvent.key !== "Enter" || this.isPressing)
          return;
        let handleKeyup = (keyupEvent) => {
          keyupEvent.key !== "Enter" || !this.checkPressEnd() || fireSyntheticPointerEvent("up", (event, info) => {
            let { onTap } = this.node.getProps();
            onTap && frame.update(() => onTap(event, info));
          });
        };
        this.removeEndListeners(), this.removeEndListeners = addDomEvent(this.node.current, "keyup", handleKeyup), fireSyntheticPointerEvent("down", (event, info) => {
          this.startPress(event, info);
        });
      }, removeKeydownListener = addDomEvent(this.node.current, "keydown", handleKeydown), handleBlur = () => {
        this.isPressing && fireSyntheticPointerEvent("cancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));
      }, removeBlurListener = addDomEvent(this.node.current, "blur", handleBlur);
      this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);
    };
  }
  startPress(event, info) {
    this.isPressing = !0;
    let { onTapStart, whileTap } = this.node.getProps();
    whileTap && this.node.animationState && this.node.animationState.setActive("whileTap", !0), onTapStart && frame.update(() => onTapStart(event, info));
  }
  checkPressEnd() {
    return this.removeEndListeners(), this.isPressing = !1, this.node.getProps().whileTap && this.node.animationState && this.node.animationState.setActive("whileTap", !1), !isDragActive();
  }
  cancelPress(event, info) {
    if (!this.checkPressEnd())
      return;
    let { onTapCancel } = this.node.getProps();
    onTapCancel && frame.update(() => onTapCancel(event, info));
  }
  mount() {
    let props = this.node.getProps(), removePointerListener = addPointerEvent(this.node.current, "pointerdown", this.startPointerPress, { passive: !(props.onTapStart || props.onPointerStart) }), removeFocusListener = addDomEvent(this.node.current, "focus", this.startAccessiblePress);
    this.removeStartListeners = pipe(removePointerListener, removeFocusListener);
  }
  unmount() {
    this.removeStartListeners(), this.removeEndListeners(), this.removeAccessibleListeners();
  }
};

// ../../../node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs
var observerCallbacks = /* @__PURE__ */ new WeakMap(), observers = /* @__PURE__ */ new WeakMap(), fireObserverCallback = (entry2) => {
  let callback = observerCallbacks.get(entry2.target);
  callback && callback(entry2);
}, fireAllObserverCallbacks = (entries) => {
  entries.forEach(fireObserverCallback);
};
function initIntersectionObserver({ root, ...options }) {
  let lookupRoot = root || document;
  observers.has(lookupRoot) || observers.set(lookupRoot, {});
  let rootObservers = observers.get(lookupRoot), key = JSON.stringify(options);
  return rootObservers[key] || (rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options })), rootObservers[key];
}
function observeIntersection(element, options, callback) {
  let rootInteresectionObserver = initIntersectionObserver(options);
  return observerCallbacks.set(element, callback), rootInteresectionObserver.observe(element), () => {
    observerCallbacks.delete(element), rootInteresectionObserver.unobserve(element);
  };
}

// ../../../node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs
var thresholdNames = {
  some: 0,
  all: 1
}, InViewFeature = class extends Feature {
  constructor() {
    super(...arguments), this.hasEnteredView = !1, this.isInView = !1;
  }
  startObserver() {
    this.unmount();
    let { viewport = {} } = this.node.getProps(), { root, margin: rootMargin, amount = "some", once } = viewport, options = {
      root: root ? root.current : void 0,
      rootMargin,
      threshold: typeof amount == "number" ? amount : thresholdNames[amount]
    }, onIntersectionUpdate = (entry2) => {
      let { isIntersecting } = entry2;
      if (this.isInView === isIntersecting || (this.isInView = isIntersecting, once && !isIntersecting && this.hasEnteredView))
        return;
      isIntersecting && (this.hasEnteredView = !0), this.node.animationState && this.node.animationState.setActive("whileInView", isIntersecting);
      let { onViewportEnter, onViewportLeave } = this.node.getProps(), callback = isIntersecting ? onViewportEnter : onViewportLeave;
      callback && callback(entry2);
    };
    return observeIntersection(this.node.current, options, onIntersectionUpdate);
  }
  mount() {
    this.startObserver();
  }
  update() {
    if (typeof IntersectionObserver > "u")
      return;
    let { props, prevProps } = this.node;
    ["amount", "margin", "root"].some(hasViewportOptionChanged(props, prevProps)) && this.startObserver();
  }
  unmount() {
  }
};
function hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {
  return (name) => viewport[name] !== prevViewport[name];
}

// ../../../node_modules/framer-motion/dist/es/motion/features/gestures.mjs
var gestureAnimations = {
  inView: {
    Feature: InViewFeature
  },
  tap: {
    Feature: PressGesture
  },
  focus: {
    Feature: FocusGesture
  },
  hover: {
    Feature: HoverGesture
  }
};

// ../../../node_modules/framer-motion/dist/es/utils/shallow-compare.mjs
function shallowCompare(next, prev) {
  if (!Array.isArray(prev))
    return !1;
  let prevLength = prev.length;
  if (prevLength !== next.length)
    return !1;
  for (let i13 = 0; i13 < prevLength; i13++)
    if (prev[i13] !== next[i13])
      return !1;
  return !0;
}

// ../../../node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs
function getCurrent(visualElement) {
  let current = {};
  return visualElement.values.forEach((value, key) => current[key] = value.get()), current;
}
function getVelocity(visualElement) {
  let velocity = {};
  return visualElement.values.forEach((value, key) => velocity[key] = value.getVelocity()), velocity;
}
function resolveVariant(visualElement, definition, custom) {
  let props = visualElement.getProps();
  return resolveVariantFromProps(props, definition, custom !== void 0 ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));
}

// ../../../node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs
var optimizedAppearDataId = "framerAppearId", optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId);

// ../../../node_modules/framer-motion/dist/es/utils/errors.mjs
var warning = noop, invariant = noop;
warning = (check, message2) => {
  !check && typeof console < "u" && console.warn(message2);
}, invariant = (check, message2) => {
  if (!check)
    throw new Error(message2);
};

// ../../../node_modules/framer-motion/dist/es/utils/time-conversion.mjs
var secondsToMilliseconds = (seconds) => seconds * 1e3, millisecondsToSeconds = (milliseconds) => milliseconds / 1e3;

// ../../../node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs
var instantAnimationState = {
  current: !1
};

// ../../../node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs
var isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] == "number";

// ../../../node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs
function isWaapiSupportedEasing(easing) {
  return Boolean(!easing || typeof easing == "string" && supportedWaapiEasing[easing] || isBezierDefinition(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));
}
var cubicBezierAsString = ([a9, b, c, d]) => `cubic-bezier(${a9}, ${b}, ${c}, ${d})`, supportedWaapiEasing = {
  linear: "linear",
  ease: "ease",
  easeIn: "ease-in",
  easeOut: "ease-out",
  easeInOut: "ease-in-out",
  circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),
  circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),
  backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
  backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99])
};
function mapEasingToNativeEasing(easing) {
  if (easing)
    return isBezierDefinition(easing) ? cubicBezierAsString(easing) : Array.isArray(easing) ? easing.map(mapEasingToNativeEasing) : supportedWaapiEasing[easing];
}

// ../../../node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs
function animateStyle(element, valueName, keyframes2, { delay: delay2 = 0, duration, repeat = 0, repeatType = "loop", ease: ease2, times } = {}) {
  let keyframeOptions = { [valueName]: keyframes2 };
  times && (keyframeOptions.offset = times);
  let easing = mapEasingToNativeEasing(ease2);
  return Array.isArray(easing) && (keyframeOptions.easing = easing), element.animate(keyframeOptions, {
    delay: delay2,
    duration,
    easing: Array.isArray(easing) ? "linear" : easing,
    fill: "both",
    iterations: repeat + 1,
    direction: repeatType === "reverse" ? "alternate" : "normal"
  });
}

// ../../../node_modules/framer-motion/dist/es/animation/animators/waapi/supports.mjs
var featureTests = {
  waapi: () => Object.hasOwnProperty.call(Element.prototype, "animate")
}, results = {}, supports = {};
for (let key in featureTests)
  supports[key] = () => (results[key] === void 0 && (results[key] = featureTests[key]()), results[key]);

// ../../../node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs
function getFinalKeyframe(keyframes2, { repeat, repeatType = "loop" }) {
  let index2 = repeat && repeatType !== "loop" && repeat % 2 === 1 ? 0 : keyframes2.length - 1;
  return keyframes2[index2];
}

// ../../../node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs
var calcBezier = (t17, a1, a22) => (((1 - 3 * a22 + 3 * a1) * t17 + (3 * a22 - 6 * a1)) * t17 + 3 * a1) * t17, subdivisionPrecision = 1e-7, subdivisionMaxIterations = 12;
function binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {
  let currentX, currentT, i13 = 0;
  do
    currentT = lowerBound + (upperBound - lowerBound) / 2, currentX = calcBezier(currentT, mX1, mX2) - x, currentX > 0 ? upperBound = currentT : lowerBound = currentT;
  while (Math.abs(currentX) > subdivisionPrecision && ++i13 < subdivisionMaxIterations);
  return currentT;
}
function cubicBezier(mX1, mY1, mX2, mY2) {
  if (mX1 === mY1 && mX2 === mY2)
    return noop;
  let getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
  return (t17) => t17 === 0 || t17 === 1 ? t17 : calcBezier(getTForX(t17), mY1, mY2);
}

// ../../../node_modules/framer-motion/dist/es/easing/ease.mjs
var easeIn = cubicBezier(0.42, 0, 1, 1), easeOut = cubicBezier(0, 0, 0.58, 1), easeInOut = cubicBezier(0.42, 0, 0.58, 1);

// ../../../node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs
var isEasingArray = (ease2) => Array.isArray(ease2) && typeof ease2[0] != "number";

// ../../../node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs
var mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;

// ../../../node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs
var reverseEasing = (easing) => (p) => 1 - easing(1 - p);

// ../../../node_modules/framer-motion/dist/es/easing/circ.mjs
var circIn = (p) => 1 - Math.sin(Math.acos(p)), circOut = reverseEasing(circIn), circInOut = mirrorEasing(circOut);

// ../../../node_modules/framer-motion/dist/es/easing/back.mjs
var backOut = cubicBezier(0.33, 1.53, 0.69, 0.99), backIn = reverseEasing(backOut), backInOut = mirrorEasing(backIn);

// ../../../node_modules/framer-motion/dist/es/easing/anticipate.mjs
var anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));

// ../../../node_modules/framer-motion/dist/es/easing/utils/map.mjs
var easingLookup = {
  linear: noop,
  easeIn,
  easeInOut,
  easeOut,
  circIn,
  circInOut,
  circOut,
  backIn,
  backInOut,
  backOut,
  anticipate
}, easingDefinitionToFunction = (definition) => {
  if (Array.isArray(definition)) {
    invariant(definition.length === 4, "Cubic bezier arrays must contain four numerical values.");
    let [x1, y1, x2, y2] = definition;
    return cubicBezier(x1, y1, x2, y2);
  } else if (typeof definition == "string")
    return invariant(easingLookup[definition] !== void 0, `Invalid easing type '${definition}'`), easingLookup[definition];
  return definition;
};

// ../../../node_modules/framer-motion/dist/es/value/types/color/utils.mjs
var isColorString = (type2, testProp) => (v) => Boolean(isString(v) && singleColorRegex.test(v) && v.startsWith(type2) || testProp && Object.prototype.hasOwnProperty.call(v, testProp)), splitColor = (aName, bName, cName) => (v) => {
  if (!isString(v))
    return v;
  let [a9, b, c, alpha2] = v.match(floatRegex);
  return {
    [aName]: parseFloat(a9),
    [bName]: parseFloat(b),
    [cName]: parseFloat(c),
    alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
  };
};

// ../../../node_modules/framer-motion/dist/es/value/types/color/rgba.mjs
var clampRgbUnit = (v) => clamp(0, 255, v), rgbUnit = {
  ...number,
  transform: (v) => Math.round(clampRgbUnit(v))
}, rgba = {
  test: isColorString("rgb", "red"),
  parse: splitColor("red", "green", "blue"),
  transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
};

// ../../../node_modules/framer-motion/dist/es/value/types/color/hex.mjs
function parseHex(v) {
  let r25 = "", g = "", b = "", a9 = "";
  return v.length > 5 ? (r25 = v.substring(1, 3), g = v.substring(3, 5), b = v.substring(5, 7), a9 = v.substring(7, 9)) : (r25 = v.substring(1, 2), g = v.substring(2, 3), b = v.substring(3, 4), a9 = v.substring(4, 5), r25 += r25, g += g, b += b, a9 += a9), {
    red: parseInt(r25, 16),
    green: parseInt(g, 16),
    blue: parseInt(b, 16),
    alpha: a9 ? parseInt(a9, 16) / 255 : 1
  };
}
var hex = {
  test: isColorString("#"),
  parse: parseHex,
  transform: rgba.transform
};

// ../../../node_modules/framer-motion/dist/es/value/types/color/hsla.mjs
var hsla = {
  test: isColorString("hsl", "hue"),
  parse: splitColor("hue", "saturation", "lightness"),
  transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
};

// ../../../node_modules/framer-motion/dist/es/value/types/color/index.mjs
var color = {
  test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),
  parse: (v) => rgba.test(v) ? rgba.parse(v) : hsla.test(v) ? hsla.parse(v) : hex.parse(v),
  transform: (v) => isString(v) ? v : v.hasOwnProperty("red") ? rgba.transform(v) : hsla.transform(v)
};

// ../../../node_modules/framer-motion/dist/es/utils/mix.mjs
var mix = (from, to, progress2) => -progress2 * from + progress2 * to + from;

// ../../../node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs
function hueToRgb(p, q, t17) {
  return t17 < 0 && (t17 += 1), t17 > 1 && (t17 -= 1), t17 < 1 / 6 ? p + (q - p) * 6 * t17 : t17 < 1 / 2 ? q : t17 < 2 / 3 ? p + (q - p) * (2 / 3 - t17) * 6 : p;
}
function hslaToRgba({ hue, saturation, lightness, alpha: alpha2 }) {
  hue /= 360, saturation /= 100, lightness /= 100;
  let red = 0, green = 0, blue = 0;
  if (!saturation)
    red = green = blue = lightness;
  else {
    let q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation, p = 2 * lightness - q;
    red = hueToRgb(p, q, hue + 1 / 3), green = hueToRgb(p, q, hue), blue = hueToRgb(p, q, hue - 1 / 3);
  }
  return {
    red: Math.round(red * 255),
    green: Math.round(green * 255),
    blue: Math.round(blue * 255),
    alpha: alpha2
  };
}

// ../../../node_modules/framer-motion/dist/es/utils/mix-color.mjs
var mixLinearColor = (from, to, v) => {
  let fromExpo = from * from;
  return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));
}, colorTypes = [hex, rgba, hsla], getColorType = (v) => colorTypes.find((type2) => type2.test(v));
function asRGBA(color2) {
  let type2 = getColorType(color2);
  invariant(Boolean(type2), `'${color2}' is not an animatable color. Use the equivalent color code instead.`);
  let model = type2.parse(color2);
  return type2 === hsla && (model = hslaToRgba(model)), model;
}
var mixColor = (from, to) => {
  let fromRGBA = asRGBA(from), toRGBA = asRGBA(to), blended = { ...fromRGBA };
  return (v) => (blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v), blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v), blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v), blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v), rgba.transform(blended));
};

// ../../../node_modules/framer-motion/dist/es/value/types/complex/index.mjs
function test(v) {
  var _a, _b;
  return isNaN(v) && isString(v) && (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;
}
var cssVarTokeniser = {
  regex: cssVariableRegex,
  countKey: "Vars",
  token: "${v}",
  parse: noop
}, colorTokeniser = {
  regex: colorRegex,
  countKey: "Colors",
  token: "${c}",
  parse: color.parse
}, numberTokeniser = {
  regex: floatRegex,
  countKey: "Numbers",
  token: "${n}",
  parse: number.parse
};
function tokenise(info, { regex, countKey, token, parse }) {
  let matches = info.tokenised.match(regex);
  matches && (info["num" + countKey] = matches.length, info.tokenised = info.tokenised.replace(regex, token), info.values.push(...matches.map(parse)));
}
function analyseComplexValue(value) {
  let originalValue = value.toString(), info = {
    value: originalValue,
    tokenised: originalValue,
    values: [],
    numVars: 0,
    numColors: 0,
    numNumbers: 0
  };
  return info.value.includes("var(--") && tokenise(info, cssVarTokeniser), tokenise(info, colorTokeniser), tokenise(info, numberTokeniser), info;
}
function parseComplexValue(v) {
  return analyseComplexValue(v).values;
}
function createTransformer(source) {
  let { values, numColors, numVars, tokenised } = analyseComplexValue(source), numValues = values.length;
  return (v) => {
    let output = tokenised;
    for (let i13 = 0; i13 < numValues; i13++)
      i13 < numVars ? output = output.replace(cssVarTokeniser.token, v[i13]) : i13 < numVars + numColors ? output = output.replace(colorTokeniser.token, color.transform(v[i13])) : output = output.replace(numberTokeniser.token, sanitize(v[i13]));
    return output;
  };
}
var convertNumbersToZero = (v) => typeof v == "number" ? 0 : v;
function getAnimatableNone(v) {
  let parsed = parseComplexValue(v);
  return createTransformer(v)(parsed.map(convertNumbersToZero));
}
var complex = {
  test,
  parse: parseComplexValue,
  createTransformer,
  getAnimatableNone
};

// ../../../node_modules/framer-motion/dist/es/utils/mix-complex.mjs
var mixImmediate = (origin, target) => (p) => `${p > 0 ? target : origin}`;
function getMixer(origin, target) {
  return typeof origin == "number" ? (v) => mix(origin, target, v) : color.test(origin) ? mixColor(origin, target) : origin.startsWith("var(") ? mixImmediate(origin, target) : mixComplex(origin, target);
}
var mixArray = (from, to) => {
  let output = [...from], numValues = output.length, blendValue = from.map((fromThis, i13) => getMixer(fromThis, to[i13]));
  return (v) => {
    for (let i13 = 0; i13 < numValues; i13++)
      output[i13] = blendValue[i13](v);
    return output;
  };
}, mixObject = (origin, target) => {
  let output = { ...origin, ...target }, blendValue = {};
  for (let key in output)
    origin[key] !== void 0 && target[key] !== void 0 && (blendValue[key] = getMixer(origin[key], target[key]));
  return (v) => {
    for (let key in blendValue)
      output[key] = blendValue[key](v);
    return output;
  };
}, mixComplex = (origin, target) => {
  let template = complex.createTransformer(target), originStats = analyseComplexValue(origin), targetStats = analyseComplexValue(target);
  return originStats.numVars === targetStats.numVars && originStats.numColors === targetStats.numColors && originStats.numNumbers >= targetStats.numNumbers ? pipe(mixArray(originStats.values, targetStats.values), template) : (warning(!0, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`), mixImmediate(origin, target));
};

// ../../../node_modules/framer-motion/dist/es/utils/progress.mjs
var progress = (from, to, value) => {
  let toFromDifference = to - from;
  return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
};

// ../../../node_modules/framer-motion/dist/es/utils/interpolate.mjs
var mixNumber = (from, to) => (p) => mix(from, to, p);
function detectMixerFactory(v) {
  return typeof v == "number" ? mixNumber : typeof v == "string" ? color.test(v) ? mixColor : mixComplex : Array.isArray(v) ? mixArray : typeof v == "object" ? mixObject : mixNumber;
}
function createMixers(output, ease2, customMixer) {
  let mixers = [], mixerFactory = customMixer || detectMixerFactory(output[0]), numMixers = output.length - 1;
  for (let i13 = 0; i13 < numMixers; i13++) {
    let mixer = mixerFactory(output[i13], output[i13 + 1]);
    if (ease2) {
      let easingFunction = Array.isArray(ease2) ? ease2[i13] || noop : ease2;
      mixer = pipe(easingFunction, mixer);
    }
    mixers.push(mixer);
  }
  return mixers;
}
function interpolate(input, output, { clamp: isClamp = !0, ease: ease2, mixer } = {}) {
  let inputLength = input.length;
  if (invariant(inputLength === output.length, "Both input and output ranges must be the same length"), inputLength === 1)
    return () => output[0];
  input[0] > input[inputLength - 1] && (input = [...input].reverse(), output = [...output].reverse());
  let mixers = createMixers(output, ease2, mixer), numMixers = mixers.length, interpolator = (v) => {
    let i13 = 0;
    if (numMixers > 1)
      for (; i13 < input.length - 2 && !(v < input[i13 + 1]); i13++)
        ;
    let progressInRange = progress(input[i13], input[i13 + 1], v);
    return mixers[i13](progressInRange);
  };
  return isClamp ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v)) : interpolator;
}

// ../../../node_modules/framer-motion/dist/es/utils/offsets/fill.mjs
function fillOffset(offset2, remaining) {
  let min3 = offset2[offset2.length - 1];
  for (let i13 = 1; i13 <= remaining; i13++) {
    let offsetProgress = progress(0, remaining, i13);
    offset2.push(mix(min3, 1, offsetProgress));
  }
}

// ../../../node_modules/framer-motion/dist/es/utils/offsets/default.mjs
function defaultOffset(arr) {
  let offset2 = [0];
  return fillOffset(offset2, arr.length - 1), offset2;
}

// ../../../node_modules/framer-motion/dist/es/utils/offsets/time.mjs
function convertOffsetToTimes(offset2, duration) {
  return offset2.map((o3) => o3 * duration);
}

// ../../../node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs
function defaultEasing(values, easing) {
  return values.map(() => easing || easeInOut).splice(0, values.length - 1);
}
function keyframes({ duration = 300, keyframes: keyframeValues, times, ease: ease2 = "easeInOut" }) {
  let easingFunctions = isEasingArray(ease2) ? ease2.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease2), state = {
    done: !1,
    value: keyframeValues[0]
  }, absoluteTimes = convertOffsetToTimes(
    // Only use the provided offsets if they're the correct length
    // TODO Maybe we should warn here if there's a length mismatch
    times && times.length === keyframeValues.length ? times : defaultOffset(keyframeValues),
    duration
  ), mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {
    ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)
  });
  return {
    calculatedDuration: duration,
    next: (t17) => (state.value = mapTimeToKeyframe(t17), state.done = t17 >= duration, state)
  };
}

// ../../../node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs
function velocityPerSecond(velocity, frameDuration) {
  return frameDuration ? velocity * (1e3 / frameDuration) : 0;
}

// ../../../node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs
var velocitySampleDuration = 5;
function calcGeneratorVelocity(resolveValue, t17, current) {
  let prevT = Math.max(t17 - velocitySampleDuration, 0);
  return velocityPerSecond(current - resolveValue(prevT), t17 - prevT);
}

// ../../../node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs
var safeMin = 1e-3, minDuration = 0.01, maxDuration = 10, minDamping = 0.05, maxDamping = 1;
function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
  let envelope, derivative;
  warning(duration <= secondsToMilliseconds(maxDuration), "Spring duration must be 10 seconds or less");
  let dampingRatio = 1 - bounce;
  dampingRatio = clamp(minDamping, maxDamping, dampingRatio), duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration)), dampingRatio < 1 ? (envelope = (undampedFreq2) => {
    let exponentialDecay = undampedFreq2 * dampingRatio, delta = exponentialDecay * duration, a9 = exponentialDecay - velocity, b = calcAngularFreq(undampedFreq2, dampingRatio), c = Math.exp(-delta);
    return safeMin - a9 / b * c;
  }, derivative = (undampedFreq2) => {
    let delta = undampedFreq2 * dampingRatio * duration, d = delta * velocity + velocity, e24 = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration, f = Math.exp(-delta), g = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
    return (-envelope(undampedFreq2) + safeMin > 0 ? -1 : 1) * ((d - e24) * f) / g;
  }) : (envelope = (undampedFreq2) => {
    let a9 = Math.exp(-undampedFreq2 * duration), b = (undampedFreq2 - velocity) * duration + 1;
    return -safeMin + a9 * b;
  }, derivative = (undampedFreq2) => {
    let a9 = Math.exp(-undampedFreq2 * duration), b = (velocity - undampedFreq2) * (duration * duration);
    return a9 * b;
  });
  let initialGuess = 5 / duration, undampedFreq = approximateRoot(envelope, derivative, initialGuess);
  if (duration = secondsToMilliseconds(duration), isNaN(undampedFreq))
    return {
      stiffness: 100,
      damping: 10,
      duration
    };
  {
    let stiffness = Math.pow(undampedFreq, 2) * mass;
    return {
      stiffness,
      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
      duration
    };
  }
}
var rootIterations = 12;
function approximateRoot(envelope, derivative, initialGuess) {
  let result = initialGuess;
  for (let i13 = 1; i13 < rootIterations; i13++)
    result = result - envelope(result) / derivative(result);
  return result;
}
function calcAngularFreq(undampedFreq, dampingRatio) {
  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}

// ../../../node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs
var durationKeys = ["duration", "bounce"], physicsKeys = ["stiffness", "damping", "mass"];
function isSpringType(options, keys) {
  return keys.some((key) => options[key] !== void 0);
}
function getSpringOptions(options) {
  let springOptions = {
    velocity: 0,
    stiffness: 100,
    damping: 10,
    mass: 1,
    isResolvedFromDuration: !1,
    ...options
  };
  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
    let derived = findSpring(options);
    springOptions = {
      ...springOptions,
      ...derived,
      velocity: 0,
      mass: 1
    }, springOptions.isResolvedFromDuration = !0;
  }
  return springOptions;
}
function spring({ keyframes: keyframes2, restDelta, restSpeed, ...options }) {
  let origin = keyframes2[0], target = keyframes2[keyframes2.length - 1], state = { done: !1, value: origin }, { stiffness, damping, mass, velocity, duration, isResolvedFromDuration } = getSpringOptions(options), initialVelocity = velocity ? -millisecondsToSeconds(velocity) : 0, dampingRatio = damping / (2 * Math.sqrt(stiffness * mass)), initialDelta = target - origin, undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass)), isGranularScale = Math.abs(initialDelta) < 5;
  restSpeed || (restSpeed = isGranularScale ? 0.01 : 2), restDelta || (restDelta = isGranularScale ? 5e-3 : 0.5);
  let resolveSpring;
  if (dampingRatio < 1) {
    let angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
    resolveSpring = (t17) => {
      let envelope = Math.exp(-dampingRatio * undampedAngularFreq * t17);
      return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t17) + initialDelta * Math.cos(angularFreq * t17));
    };
  } else if (dampingRatio === 1)
    resolveSpring = (t17) => target - Math.exp(-undampedAngularFreq * t17) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t17);
  else {
    let dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
    resolveSpring = (t17) => {
      let envelope = Math.exp(-dampingRatio * undampedAngularFreq * t17), freqForT = Math.min(dampedAngularFreq * t17, 300);
      return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
    };
  }
  return {
    calculatedDuration: isResolvedFromDuration && duration || null,
    next: (t17) => {
      let current = resolveSpring(t17);
      if (isResolvedFromDuration)
        state.done = t17 >= duration;
      else {
        let currentVelocity = initialVelocity;
        t17 !== 0 && (dampingRatio < 1 ? currentVelocity = calcGeneratorVelocity(resolveSpring, t17, current) : currentVelocity = 0);
        let isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed, isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
      }
      return state.value = state.done ? target : current, state;
    }
  };
}

// ../../../node_modules/framer-motion/dist/es/animation/generators/inertia.mjs
function inertia({ keyframes: keyframes2, velocity = 0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min: min3, max: max3, restDelta = 0.5, restSpeed }) {
  let origin = keyframes2[0], state = {
    done: !1,
    value: origin
  }, isOutOfBounds = (v) => min3 !== void 0 && v < min3 || max3 !== void 0 && v > max3, nearestBoundary = (v) => min3 === void 0 ? max3 : max3 === void 0 || Math.abs(min3 - v) < Math.abs(max3 - v) ? min3 : max3, amplitude = power * velocity, ideal = origin + amplitude, target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
  target !== ideal && (amplitude = target - origin);
  let calcDelta = (t17) => -amplitude * Math.exp(-t17 / timeConstant), calcLatest = (t17) => target + calcDelta(t17), applyFriction = (t17) => {
    let delta = calcDelta(t17), latest = calcLatest(t17);
    state.done = Math.abs(delta) <= restDelta, state.value = state.done ? target : latest;
  }, timeReachedBoundary, spring$1, checkCatchBoundary = (t17) => {
    isOutOfBounds(state.value) && (timeReachedBoundary = t17, spring$1 = spring({
      keyframes: [state.value, nearestBoundary(state.value)],
      velocity: calcGeneratorVelocity(calcLatest, t17, state.value),
      damping: bounceDamping,
      stiffness: bounceStiffness,
      restDelta,
      restSpeed
    }));
  };
  return checkCatchBoundary(0), {
    calculatedDuration: null,
    next: (t17) => {
      let hasUpdatedFrame = !1;
      return !spring$1 && timeReachedBoundary === void 0 && (hasUpdatedFrame = !0, applyFriction(t17), checkCatchBoundary(t17)), timeReachedBoundary !== void 0 && t17 > timeReachedBoundary ? spring$1.next(t17 - timeReachedBoundary) : (!hasUpdatedFrame && applyFriction(t17), state);
    }
  };
}

// ../../../node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs
var frameloopDriver = (update) => {
  let passTimestamp = ({ timestamp }) => update(timestamp);
  return {
    start: () => frame.update(passTimestamp, !0),
    stop: () => cancelFrame(passTimestamp),
    /**
     * If we're processing this frame we can use the
     * framelocked timestamp to keep things in sync.
     */
    now: () => frameData.isProcessing ? frameData.timestamp : performance.now()
  };
};

// ../../../node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs
function calcGeneratorDuration(generator) {
  let duration = 0, timeStep = 50, state = generator.next(duration);
  for (; !state.done && duration < 2e4; )
    duration += timeStep, state = generator.next(duration);
  return duration >= 2e4 ? 1 / 0 : duration;
}

// ../../../node_modules/framer-motion/dist/es/animation/animators/js/index.mjs
var types = {
  decay: inertia,
  inertia,
  tween: keyframes,
  keyframes,
  spring
};
function animateValue({ autoplay = !0, delay: delay2 = 0, driver = frameloopDriver, keyframes: keyframes$1, type: type2 = "keyframes", repeat = 0, repeatDelay = 0, repeatType = "loop", onPlay, onStop, onComplete, onUpdate, ...options }) {
  let speed = 1, hasStopped = !1, resolveFinishedPromise, currentFinishedPromise, updateFinishedPromise = () => {
    resolveFinishedPromise && resolveFinishedPromise(), currentFinishedPromise = new Promise((resolve) => {
      resolveFinishedPromise = resolve;
    });
  };
  updateFinishedPromise();
  let animationDriver, generatorFactory = types[type2] || keyframes, mapNumbersToKeyframes;
  generatorFactory !== keyframes && typeof keyframes$1[0] != "number" && (mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {
    clamp: !1
  }), keyframes$1 = [0, 100]);
  let generator = generatorFactory({ ...options, keyframes: keyframes$1 }), mirroredGenerator;
  repeatType === "mirror" && (mirroredGenerator = generatorFactory({
    ...options,
    keyframes: [...keyframes$1].reverse(),
    velocity: -(options.velocity || 0)
  }));
  let playState = "idle", holdTime = null, startTime = null, cancelTime = null;
  generator.calculatedDuration === null && repeat && (generator.calculatedDuration = calcGeneratorDuration(generator));
  let { calculatedDuration } = generator, resolvedDuration = 1 / 0, totalDuration = 1 / 0;
  calculatedDuration !== null && (resolvedDuration = calculatedDuration + repeatDelay, totalDuration = resolvedDuration * (repeat + 1) - repeatDelay);
  let currentTime = 0, tick = (timestamp) => {
    if (startTime === null)
      return;
    speed > 0 && (startTime = Math.min(startTime, timestamp)), speed < 0 && (startTime = Math.min(timestamp - totalDuration / speed, startTime)), holdTime !== null ? currentTime = holdTime : currentTime = Math.round(timestamp - startTime) * speed;
    let timeWithoutDelay = currentTime - delay2 * (speed >= 0 ? 1 : -1), isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;
    currentTime = Math.max(timeWithoutDelay, 0), playState === "finished" && holdTime === null && (currentTime = totalDuration);
    let elapsed = currentTime, frameGenerator = generator;
    if (repeat) {
      let progress2 = currentTime / resolvedDuration, currentIteration = Math.floor(progress2), iterationProgress = progress2 % 1;
      !iterationProgress && progress2 >= 1 && (iterationProgress = 1), iterationProgress === 1 && currentIteration--, currentIteration = Math.min(currentIteration, repeat + 1);
      let iterationIsOdd = Boolean(currentIteration % 2);
      iterationIsOdd && (repeatType === "reverse" ? (iterationProgress = 1 - iterationProgress, repeatDelay && (iterationProgress -= repeatDelay / resolvedDuration)) : repeatType === "mirror" && (frameGenerator = mirroredGenerator));
      let p = clamp(0, 1, iterationProgress);
      currentTime > totalDuration && (p = repeatType === "reverse" && iterationIsOdd ? 1 : 0), elapsed = p * resolvedDuration;
    }
    let state = isInDelayPhase ? { done: !1, value: keyframes$1[0] } : frameGenerator.next(elapsed);
    mapNumbersToKeyframes && (state.value = mapNumbersToKeyframes(state.value));
    let { done } = state;
    !isInDelayPhase && calculatedDuration !== null && (done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0);
    let isAnimationFinished = holdTime === null && (playState === "finished" || playState === "running" && done);
    return onUpdate && onUpdate(state.value), isAnimationFinished && finish(), state;
  }, stopAnimationDriver = () => {
    animationDriver && animationDriver.stop(), animationDriver = void 0;
  }, cancel = () => {
    playState = "idle", stopAnimationDriver(), updateFinishedPromise(), startTime = cancelTime = null;
  }, finish = () => {
    playState = "finished", onComplete && onComplete(), stopAnimationDriver(), updateFinishedPromise();
  }, play = () => {
    if (hasStopped)
      return;
    animationDriver || (animationDriver = driver(tick));
    let now = animationDriver.now();
    onPlay && onPlay(), holdTime !== null ? startTime = now - holdTime : (!startTime || playState === "finished") && (startTime = now), cancelTime = startTime, holdTime = null, playState = "running", animationDriver.start();
  };
  autoplay && play();
  let controls = {
    then(resolve, reject) {
      return currentFinishedPromise.then(resolve, reject);
    },
    get time() {
      return millisecondsToSeconds(currentTime);
    },
    set time(newTime) {
      newTime = secondsToMilliseconds(newTime), currentTime = newTime, holdTime !== null || !animationDriver || speed === 0 ? holdTime = newTime : startTime = animationDriver.now() - newTime / speed;
    },
    get duration() {
      let duration = generator.calculatedDuration === null ? calcGeneratorDuration(generator) : generator.calculatedDuration;
      return millisecondsToSeconds(duration);
    },
    get speed() {
      return speed;
    },
    set speed(newSpeed) {
      newSpeed === speed || !animationDriver || (speed = newSpeed, controls.time = millisecondsToSeconds(currentTime));
    },
    get state() {
      return playState;
    },
    play,
    pause: () => {
      playState = "paused", holdTime = currentTime;
    },
    stop: () => {
      hasStopped = !0, playState !== "idle" && (playState = "idle", onStop && onStop(), cancel());
    },
    cancel: () => {
      cancelTime !== null && tick(cancelTime), cancel();
    },
    complete: () => {
      playState = "finished";
    },
    sample: (elapsed) => (startTime = 0, tick(elapsed))
  };
  return controls;
}

// ../../../node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs
var acceleratedValues = /* @__PURE__ */ new Set([
  "opacity",
  "clipPath",
  "filter",
  "transform",
  "backgroundColor"
]), sampleDelta = 10, maxDuration2 = 2e4, requiresPregeneratedKeyframes = (valueName, options) => options.type === "spring" || valueName === "backgroundColor" || !isWaapiSupportedEasing(options.ease);
function createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {
  if (!(supports.waapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== "mirror" && options.damping !== 0 && options.type !== "inertia"))
    return !1;
  let hasStopped = !1, resolveFinishedPromise, currentFinishedPromise, updateFinishedPromise = () => {
    currentFinishedPromise = new Promise((resolve) => {
      resolveFinishedPromise = resolve;
    });
  };
  updateFinishedPromise();
  let { keyframes: keyframes2, duration = 300, ease: ease2, times } = options;
  if (requiresPregeneratedKeyframes(valueName, options)) {
    let sampleAnimation = animateValue({
      ...options,
      repeat: 0,
      delay: 0
    }), state = { done: !1, value: keyframes2[0] }, pregeneratedKeyframes = [], t17 = 0;
    for (; !state.done && t17 < maxDuration2; )
      state = sampleAnimation.sample(t17), pregeneratedKeyframes.push(state.value), t17 += sampleDelta;
    times = void 0, keyframes2 = pregeneratedKeyframes, duration = t17 - sampleDelta, ease2 = "linear";
  }
  let animation = animateStyle(value.owner.current, valueName, keyframes2, {
    ...options,
    duration,
    /**
     * This function is currently not called if ease is provided
     * as a function so the cast is safe.
     *
     * However it would be possible for a future refinement to port
     * in easing pregeneration from Motion One for browsers that
     * support the upcoming `linear()` easing function.
     */
    ease: ease2,
    times
  }), cancelAnimation = () => animation.cancel(), safeCancel = () => {
    frame.update(cancelAnimation), resolveFinishedPromise(), updateFinishedPromise();
  };
  return animation.onfinish = () => {
    value.set(getFinalKeyframe(keyframes2, options)), onComplete && onComplete(), safeCancel();
  }, {
    then(resolve, reject) {
      return currentFinishedPromise.then(resolve, reject);
    },
    get time() {
      return millisecondsToSeconds(animation.currentTime || 0);
    },
    set time(newTime) {
      animation.currentTime = secondsToMilliseconds(newTime);
    },
    get speed() {
      return animation.playbackRate;
    },
    set speed(newSpeed) {
      animation.playbackRate = newSpeed;
    },
    get duration() {
      return millisecondsToSeconds(duration);
    },
    play: () => {
      hasStopped || (animation.play(), cancelFrame(cancelAnimation));
    },
    pause: () => animation.pause(),
    stop: () => {
      if (hasStopped = !0, animation.playState === "idle")
        return;
      let { currentTime } = animation;
      if (currentTime) {
        let sampleAnimation = animateValue({
          ...options,
          autoplay: !1
        });
        value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);
      }
      safeCancel();
    },
    complete: () => animation.finish(),
    cancel: safeCancel
  };
}

// ../../../node_modules/framer-motion/dist/es/animation/animators/instant.mjs
function createInstantAnimation({ keyframes: keyframes2, delay: delay2, onUpdate, onComplete }) {
  let setValue = () => (onUpdate && onUpdate(keyframes2[keyframes2.length - 1]), onComplete && onComplete(), {
    time: 0,
    speed: 1,
    duration: 0,
    play: noop,
    pause: noop,
    stop: noop,
    then: (resolve) => (resolve(), Promise.resolve()),
    cancel: noop,
    complete: noop
  });
  return delay2 ? animateValue({
    keyframes: [0, 1],
    duration: 0,
    delay: delay2,
    onComplete: setValue
  }) : setValue();
}

// ../../../node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs
var underDampedSpring = {
  type: "spring",
  stiffness: 500,
  damping: 25,
  restSpeed: 10
}, criticallyDampedSpring = (target) => ({
  type: "spring",
  stiffness: 550,
  damping: target === 0 ? 2 * Math.sqrt(550) : 30,
  restSpeed: 10
}), keyframesTransition = {
  type: "keyframes",
  duration: 0.8
}, ease = {
  type: "keyframes",
  ease: [0.25, 0.1, 0.35, 1],
  duration: 0.3
}, getDefaultTransition = (valueKey, { keyframes: keyframes2 }) => keyframes2.length > 2 ? keyframesTransition : transformProps.has(valueKey) ? valueKey.startsWith("scale") ? criticallyDampedSpring(keyframes2[1]) : underDampedSpring : ease;

// ../../../node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs
var isAnimatable = (key, value) => key === "zIndex" ? !1 : !!(typeof value == "number" || Array.isArray(value) || typeof value == "string" && // It's animatable if we have a string
(complex.test(value) || value === "0") && // And it contains numbers and/or colors
!value.startsWith("url("));

// ../../../node_modules/framer-motion/dist/es/value/types/complex/filter.mjs
var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
function applyDefaultFilter(v) {
  let [name, value] = v.slice(0, -1).split("(");
  if (name === "drop-shadow")
    return v;
  let [number2] = value.match(floatRegex) || [];
  if (!number2)
    return v;
  let unit = value.replace(number2, ""), defaultValue = maxDefaults.has(name) ? 1 : 0;
  return number2 !== value && (defaultValue *= 100), name + "(" + defaultValue + unit + ")";
}
var functionRegex = /([a-z-]*)\(.*?\)/g, filter = {
  ...complex,
  getAnimatableNone: (v) => {
    let functions = v.match(functionRegex);
    return functions ? functions.map(applyDefaultFilter).join(" ") : v;
  }
};

// ../../../node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs
var defaultValueTypes = {
  ...numberValueTypes,
  // Color props
  color,
  backgroundColor: color,
  outlineColor: color,
  fill: color,
  stroke: color,
  // Border props
  borderColor: color,
  borderTopColor: color,
  borderRightColor: color,
  borderBottomColor: color,
  borderLeftColor: color,
  filter,
  WebkitFilter: filter
}, getDefaultValueType = (key) => defaultValueTypes[key];

// ../../../node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
function getAnimatableNone2(key, value) {
  let defaultValueType = getDefaultValueType(key);
  return defaultValueType !== filter && (defaultValueType = complex), defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : void 0;
}

// ../../../node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs
var isZeroValueString = (v) => /^0[^.\s]+$/.test(v);

// ../../../node_modules/framer-motion/dist/es/animation/utils/is-none.mjs
function isNone(value) {
  if (typeof value == "number")
    return value === 0;
  if (value !== null)
    return value === "none" || value === "0" || isZeroValueString(value);
}

// ../../../node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs
function getKeyframes(value, valueName, target, transition) {
  let isTargetAnimatable = isAnimatable(valueName, target), keyframes2;
  Array.isArray(target) ? keyframes2 = [...target] : keyframes2 = [null, target];
  let defaultOrigin = transition.from !== void 0 ? transition.from : value.get(), animatableTemplateValue, noneKeyframeIndexes = [];
  for (let i13 = 0; i13 < keyframes2.length; i13++)
    keyframes2[i13] === null && (keyframes2[i13] = i13 === 0 ? defaultOrigin : keyframes2[i13 - 1]), isNone(keyframes2[i13]) && noneKeyframeIndexes.push(i13), typeof keyframes2[i13] == "string" && keyframes2[i13] !== "none" && keyframes2[i13] !== "0" && (animatableTemplateValue = keyframes2[i13]);
  if (isTargetAnimatable && noneKeyframeIndexes.length && animatableTemplateValue)
    for (let i13 = 0; i13 < noneKeyframeIndexes.length; i13++) {
      let index2 = noneKeyframeIndexes[i13];
      keyframes2[index2] = getAnimatableNone2(valueName, animatableTemplateValue);
    }
  return keyframes2;
}

// ../../../node_modules/framer-motion/dist/es/animation/utils/transitions.mjs
function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {
  return !!Object.keys(transition).length;
}
function getValueTransition(transition, key) {
  return transition[key] || transition.default || transition;
}

// ../../../node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs
var animateMotionValue = (valueName, value, target, transition = {}) => (onComplete) => {
  let valueTransition = getValueTransition(transition, valueName) || {}, delay2 = valueTransition.delay || transition.delay || 0, { elapsed = 0 } = transition;
  elapsed = elapsed - secondsToMilliseconds(delay2);
  let keyframes2 = getKeyframes(value, valueName, target, valueTransition), originKeyframe = keyframes2[0], targetKeyframe = keyframes2[keyframes2.length - 1], isOriginAnimatable = isAnimatable(valueName, originKeyframe), isTargetAnimatable = isAnimatable(valueName, targetKeyframe);
  warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from "${originKeyframe}" to "${targetKeyframe}". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \`style\` property.`);
  let options = {
    keyframes: keyframes2,
    velocity: value.getVelocity(),
    ease: "easeOut",
    ...valueTransition,
    delay: -elapsed,
    onUpdate: (v) => {
      value.set(v), valueTransition.onUpdate && valueTransition.onUpdate(v);
    },
    onComplete: () => {
      onComplete(), valueTransition.onComplete && valueTransition.onComplete();
    }
  };
  if (isTransitionDefined(valueTransition) || (options = {
    ...options,
    ...getDefaultTransition(valueName, options)
  }), options.duration && (options.duration = secondsToMilliseconds(options.duration)), options.repeatDelay && (options.repeatDelay = secondsToMilliseconds(options.repeatDelay)), !isOriginAnimatable || !isTargetAnimatable || instantAnimationState.current || valueTransition.type === !1)
    return createInstantAnimation(options);
  if (value.owner && value.owner.current instanceof HTMLElement && !value.owner.getProps().onUpdate) {
    let acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);
    if (acceleratedAnimation)
      return acceleratedAnimation;
  }
  return animateValue(options);
};

// ../../../node_modules/framer-motion/dist/es/value/use-will-change/is.mjs
function isWillChangeMotionValue(value) {
  return Boolean(isMotionValue(value) && value.add);
}

// ../../../node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs
var isNumericalString = (v) => /^\-?\d*\.?\d+$/.test(v);

// ../../../node_modules/framer-motion/dist/es/utils/array.mjs
function addUniqueItem(arr, item) {
  arr.indexOf(item) === -1 && arr.push(item);
}
function removeItem(arr, item) {
  let index2 = arr.indexOf(item);
  index2 > -1 && arr.splice(index2, 1);
}

// ../../../node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
var SubscriptionManager = class {
  constructor() {
    this.subscriptions = [];
  }
  add(handler) {
    return addUniqueItem(this.subscriptions, handler), () => removeItem(this.subscriptions, handler);
  }
  notify(a9, b, c) {
    let numSubscriptions = this.subscriptions.length;
    if (numSubscriptions)
      if (numSubscriptions === 1)
        this.subscriptions[0](a9, b, c);
      else
        for (let i13 = 0; i13 < numSubscriptions; i13++) {
          let handler = this.subscriptions[i13];
          handler && handler(a9, b, c);
        }
  }
  getSize() {
    return this.subscriptions.length;
  }
  clear() {
    this.subscriptions.length = 0;
  }
};

// ../../../node_modules/framer-motion/dist/es/utils/warn-once.mjs
var warned = /* @__PURE__ */ new Set();
function warnOnce(condition, message2, element) {
  condition || warned.has(message2) || (console.warn(message2), element && console.warn(element), warned.add(message2));
}

// ../../../node_modules/framer-motion/dist/es/value/index.mjs
var isFloat = (value) => !isNaN(parseFloat(value)), MotionValue = class {
  /**
   * @param init - The initiating value
   * @param config - Optional configuration options
   *
   * -  `transformer`: A function to transform incoming values with.
   *
   * @internal
   */
  constructor(init, options = {}) {
    this.version = "10.12.17", this.timeDelta = 0, this.lastUpdated = 0, this.canTrackVelocity = !1, this.events = {}, this.updateAndNotify = (v, render = !0) => {
      this.prev = this.current, this.current = v;
      let { delta, timestamp } = frameData;
      this.lastUpdated !== timestamp && (this.timeDelta = delta, this.lastUpdated = timestamp, frame.postRender(this.scheduleVelocityCheck)), this.prev !== this.current && this.events.change && this.events.change.notify(this.current), this.events.velocityChange && this.events.velocityChange.notify(this.getVelocity()), render && this.events.renderRequest && this.events.renderRequest.notify(this.current);
    }, this.scheduleVelocityCheck = () => frame.postRender(this.velocityCheck), this.velocityCheck = ({ timestamp }) => {
      timestamp !== this.lastUpdated && (this.prev = this.current, this.events.velocityChange && this.events.velocityChange.notify(this.getVelocity()));
    }, this.hasAnimated = !1, this.prev = this.current = init, this.canTrackVelocity = isFloat(this.current), this.owner = options.owner;
  }
  /**
   * Adds a function that will be notified when the `MotionValue` is updated.
   *
   * It returns a function that, when called, will cancel the subscription.
   *
   * When calling `onChange` inside a React component, it should be wrapped with the
   * `useEffect` hook. As it returns an unsubscribe function, this should be returned
   * from the `useEffect` function to ensure you don't add duplicate subscribers..
   *
   * ```jsx
   * export const MyComponent = () => {
   *   const x = useMotionValue(0)
   *   const y = useMotionValue(0)
   *   const opacity = useMotionValue(1)
   *
   *   useEffect(() => {
   *     function updateOpacity() {
   *       const maxXY = Math.max(x.get(), y.get())
   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
   *       opacity.set(newOpacity)
   *     }
   *
   *     const unsubscribeX = x.on("change", updateOpacity)
   *     const unsubscribeY = y.on("change", updateOpacity)
   *
   *     return () => {
   *       unsubscribeX()
   *       unsubscribeY()
   *     }
   *   }, [])
   *
   *   return <motion.div style={{ x }} />
   * }
   * ```
   *
   * @param subscriber - A function that receives the latest value.
   * @returns A function that, when called, will cancel this subscription.
   *
   * @deprecated
   */
  onChange(subscription) {
    return warnOnce(!1, 'value.onChange(callback) is deprecated. Switch to value.on("change", callback).'), this.on("change", subscription);
  }
  on(eventName, callback) {
    this.events[eventName] || (this.events[eventName] = new SubscriptionManager());
    let unsubscribe = this.events[eventName].add(callback);
    return eventName === "change" ? () => {
      unsubscribe(), frame.read(() => {
        this.events.change.getSize() || this.stop();
      });
    } : unsubscribe;
  }
  clearListeners() {
    for (let eventManagers in this.events)
      this.events[eventManagers].clear();
  }
  /**
   * Attaches a passive effect to the `MotionValue`.
   *
   * @internal
   */
  attach(passiveEffect, stopPassiveEffect) {
    this.passiveEffect = passiveEffect, this.stopPassiveEffect = stopPassiveEffect;
  }
  /**
   * Sets the state of the `MotionValue`.
   *
   * @remarks
   *
   * ```jsx
   * const x = useMotionValue(0)
   * x.set(10)
   * ```
   *
   * @param latest - Latest value to set.
   * @param render - Whether to notify render subscribers. Defaults to `true`
   *
   * @public
   */
  set(v, render = !0) {
    !render || !this.passiveEffect ? this.updateAndNotify(v, render) : this.passiveEffect(v, this.updateAndNotify);
  }
  setWithVelocity(prev, current, delta) {
    this.set(current), this.prev = prev, this.timeDelta = delta;
  }
  /**
   * Set the state of the `MotionValue`, stopping any active animations,
   * effects, and resets velocity to `0`.
   */
  jump(v) {
    this.updateAndNotify(v), this.prev = v, this.stop(), this.stopPassiveEffect && this.stopPassiveEffect();
  }
  /**
   * Returns the latest state of `MotionValue`
   *
   * @returns - The latest state of `MotionValue`
   *
   * @public
   */
  get() {
    return this.current;
  }
  /**
   * @public
   */
  getPrevious() {
    return this.prev;
  }
  /**
   * Returns the latest velocity of `MotionValue`
   *
   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
   *
   * @public
   */
  getVelocity() {
    return this.canTrackVelocity ? (
      // These casts could be avoided if parseFloat would be typed better
      velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta)
    ) : 0;
  }
  /**
   * Registers a new animation to control this `MotionValue`. Only one
   * animation can drive a `MotionValue` at one time.
   *
   * ```jsx
   * value.start()
   * ```
   *
   * @param animation - A function that starts the provided animation
   *
   * @internal
   */
  start(startAnimation) {
    return this.stop(), new Promise((resolve) => {
      this.hasAnimated = !0, this.animation = startAnimation(resolve), this.events.animationStart && this.events.animationStart.notify();
    }).then(() => {
      this.events.animationComplete && this.events.animationComplete.notify(), this.clearAnimation();
    });
  }
  /**
   * Stop the currently active animation.
   *
   * @public
   */
  stop() {
    this.animation && (this.animation.stop(), this.events.animationCancel && this.events.animationCancel.notify()), this.clearAnimation();
  }
  /**
   * Returns `true` if this value is currently animating.
   *
   * @public
   */
  isAnimating() {
    return !!this.animation;
  }
  clearAnimation() {
    delete this.animation;
  }
  /**
   * Destroy and clean up subscribers to this `MotionValue`.
   *
   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
   * created a `MotionValue` via the `motionValue` function.
   *
   * @public
   */
  destroy() {
    this.clearListeners(), this.stop(), this.stopPassiveEffect && this.stopPassiveEffect();
  }
};
function motionValue(init, options) {
  return new MotionValue(init, options);
}

// ../../../node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs
var testValueType = (v) => (type2) => type2.test(v);

// ../../../node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs
var auto = {
  test: (v) => v === "auto",
  parse: (v) => v
};

// ../../../node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
var dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto], findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));

// ../../../node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
var valueTypes = [...dimensionValueTypes, color, complex], findValueType = (v) => valueTypes.find(testValueType(v));

// ../../../node_modules/framer-motion/dist/es/render/utils/setters.mjs
function setMotionValue(visualElement, key, value) {
  visualElement.hasValue(key) ? visualElement.getValue(key).set(value) : visualElement.addValue(key, motionValue(value));
}
function setTarget(visualElement, definition) {
  let resolved = resolveVariant(visualElement, definition), { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, !1) : {};
  target = { ...target, ...transitionEnd };
  for (let key in target) {
    let value = resolveFinalValueInKeyframes(target[key]);
    setMotionValue(visualElement, key, value);
  }
}
function checkTargetForNewValues(visualElement, target, origin) {
  var _a, _b;
  let newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key)), numNewValues = newValueKeys.length;
  if (numNewValues)
    for (let i13 = 0; i13 < numNewValues; i13++) {
      let key = newValueKeys[i13], targetValue = target[key], value = null;
      Array.isArray(targetValue) && (value = targetValue[0]), value === null && (value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key]), value != null && (typeof value == "string" && (isNumericalString(value) || isZeroValueString(value)) ? value = parseFloat(value) : !findValueType(value) && complex.test(targetValue) && (value = getAnimatableNone2(key, targetValue)), visualElement.addValue(key, motionValue(value, { owner: visualElement })), origin[key] === void 0 && (origin[key] = value), value !== null && visualElement.setBaseTarget(key, value));
    }
}
function getOriginFromTransition(key, transition) {
  return transition ? (transition[key] || transition.default || transition).from : void 0;
}
function getOrigin(target, transition, visualElement) {
  let origin = {};
  for (let key in target) {
    let transitionOrigin = getOriginFromTransition(key, transition);
    if (transitionOrigin !== void 0)
      origin[key] = transitionOrigin;
    else {
      let value = visualElement.getValue(key);
      value && (origin[key] = value.get());
    }
  }
  return origin;
}

// ../../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs
function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {
  let shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== !0;
  return needsAnimating[key] = !1, shouldBlock;
}
function animateTarget(visualElement, definition, { delay: delay2 = 0, transitionOverride, type: type2 } = {}) {
  let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition), willChange = visualElement.getValue("willChange");
  transitionOverride && (transition = transitionOverride);
  let animations2 = [], animationTypeState = type2 && visualElement.animationState && visualElement.animationState.getState()[type2];
  for (let key in target) {
    let value = visualElement.getValue(key), valueTarget = target[key];
    if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key))
      continue;
    let valueTransition = { delay: delay2, elapsed: 0, ...transition };
    if (window.HandoffAppearAnimations && !value.hasAnimated) {
      let appearId = visualElement.getProps()[optimizedAppearDataAttribute];
      appearId && (valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame));
    }
    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? { type: !1 } : valueTransition));
    let animation = value.animation;
    isWillChangeMotionValue(willChange) && (willChange.add(key), animation.then(() => willChange.remove(key))), animations2.push(animation);
  }
  return transitionEnd && Promise.all(animations2).then(() => {
    transitionEnd && setTarget(visualElement, transitionEnd);
  }), animations2;
}

// ../../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs
function animateVariant(visualElement, variant, options = {}) {
  let resolved = resolveVariant(visualElement, variant, options.custom), { transition = visualElement.getDefaultTransition() || {} } = resolved || {};
  options.transitionOverride && (transition = options.transitionOverride);
  let getAnimation = resolved ? () => Promise.all(animateTarget(visualElement, resolved, options)) : () => Promise.resolve(), getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? (forwardDelay = 0) => {
    let { delayChildren = 0, staggerChildren, staggerDirection } = transition;
    return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
  } : () => Promise.resolve(), { when } = transition;
  if (when) {
    let [first, last] = when === "beforeChildren" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];
    return first().then(() => last());
  } else
    return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
}
function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {
  let animations2 = [], maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren, generateStaggerDuration = staggerDirection === 1 ? (i13 = 0) => i13 * staggerChildren : (i13 = 0) => maxStaggerDuration - i13 * staggerChildren;
  return Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i13) => {
    child.notify("AnimationStart", variant), animations2.push(animateVariant(child, variant, {
      ...options,
      delay: delayChildren + generateStaggerDuration(i13)
    }).then(() => child.notify("AnimationComplete", variant)));
  }), Promise.all(animations2);
}
function sortByTreeOrder(a9, b) {
  return a9.sortNodePosition(b);
}

// ../../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs
function animateVisualElement(visualElement, definition, options = {}) {
  visualElement.notify("AnimationStart", definition);
  let animation;
  if (Array.isArray(definition)) {
    let animations2 = definition.map((variant) => animateVariant(visualElement, variant, options));
    animation = Promise.all(animations2);
  } else if (typeof definition == "string")
    animation = animateVariant(visualElement, definition, options);
  else {
    let resolvedDefinition = typeof definition == "function" ? resolveVariant(visualElement, definition, options.custom) : definition;
    animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));
  }
  return animation.then(() => visualElement.notify("AnimationComplete", definition));
}

// ../../../node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
var reversePriorityOrder = [...variantPriorityOrder].reverse(), numAnimationTypes = variantPriorityOrder.length;
function animateList(visualElement) {
  return (animations2) => Promise.all(animations2.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));
}
function createAnimationState(visualElement) {
  let animate = animateList(visualElement), state = createState(), isInitialRender = !0, buildResolvedTypeValues = (acc, definition) => {
    let resolved = resolveVariant(visualElement, definition);
    if (resolved) {
      let { transition, transitionEnd, ...target } = resolved;
      acc = { ...acc, ...target, ...transitionEnd };
    }
    return acc;
  };
  function setAnimateFunction(makeAnimator) {
    animate = makeAnimator(visualElement);
  }
  function animateChanges(options, changedActiveType) {
    let props = visualElement.getProps(), context = visualElement.getVariantContext(!0) || {}, animations2 = [], removedKeys = /* @__PURE__ */ new Set(), encounteredKeys = {}, removedVariantIndex = 1 / 0;
    for (let i13 = 0; i13 < numAnimationTypes; i13++) {
      let type2 = reversePriorityOrder[i13], typeState = state[type2], prop = props[type2] !== void 0 ? props[type2] : context[type2], propIsVariant = isVariantLabel(prop), activeDelta = type2 === changedActiveType ? typeState.isActive : null;
      activeDelta === !1 && (removedVariantIndex = i13);
      let isInherited = prop === context[type2] && prop !== props[type2] && propIsVariant;
      if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount && (isInherited = !1), typeState.protectedKeys = { ...encounteredKeys }, // If it isn't active and hasn't *just* been set as inactive
      !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type
      !prop && !typeState.prevProp || // Or if the prop doesn't define an animation
      isAnimationControls(prop) || typeof prop == "boolean")
        continue;
      let variantDidChange = checkVariantsDidChange(typeState.prevProp, prop), shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active
      type2 === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)
      i13 > removedVariantIndex && propIsVariant, definitionList = Array.isArray(prop) ? prop : [prop], resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
      activeDelta === !1 && (resolvedValues = {});
      let { prevResolvedValues = {} } = typeState, allKeys = {
        ...prevResolvedValues,
        ...resolvedValues
      }, markToAnimate = (key) => {
        shouldAnimateType = !0, removedKeys.delete(key), typeState.needsAnimating[key] = !0;
      };
      for (let key in allKeys) {
        let next = resolvedValues[key], prev = prevResolvedValues[key];
        encounteredKeys.hasOwnProperty(key) || (next !== prev ? isKeyframesTarget(next) && isKeyframesTarget(prev) ? !shallowCompare(next, prev) || variantDidChange ? markToAnimate(key) : typeState.protectedKeys[key] = !0 : next !== void 0 ? markToAnimate(key) : removedKeys.add(key) : next !== void 0 && removedKeys.has(key) ? markToAnimate(key) : typeState.protectedKeys[key] = !0);
      }
      typeState.prevProp = prop, typeState.prevResolvedValues = resolvedValues, typeState.isActive && (encounteredKeys = { ...encounteredKeys, ...resolvedValues }), isInitialRender && visualElement.blockInitialAnimation && (shouldAnimateType = !1), shouldAnimateType && !isInherited && animations2.push(...definitionList.map((animation) => ({
        animation,
        options: { type: type2, ...options }
      })));
    }
    if (removedKeys.size) {
      let fallbackAnimation = {};
      removedKeys.forEach((key) => {
        let fallbackTarget = visualElement.getBaseTarget(key);
        fallbackTarget !== void 0 && (fallbackAnimation[key] = fallbackTarget);
      }), animations2.push({ animation: fallbackAnimation });
    }
    let shouldAnimate = Boolean(animations2.length);
    return isInitialRender && props.initial === !1 && !visualElement.manuallyAnimateOnMount && (shouldAnimate = !1), isInitialRender = !1, shouldAnimate ? animate(animations2) : Promise.resolve();
  }
  function setActive(type2, isActive, options) {
    var _a;
    if (state[type2].isActive === isActive)
      return Promise.resolve();
    (_a = visualElement.variantChildren) === null || _a === void 0 || _a.forEach((child) => {
      var _a2;
      return (_a2 = child.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(type2, isActive);
    }), state[type2].isActive = isActive;
    let animations2 = animateChanges(options, type2);
    for (let key in state)
      state[key].protectedKeys = {};
    return animations2;
  }
  return {
    animateChanges,
    setActive,
    setAnimateFunction,
    getState: () => state
  };
}
function checkVariantsDidChange(prev, next) {
  return typeof next == "string" ? next !== prev : Array.isArray(next) ? !shallowCompare(next, prev) : !1;
}
function createTypeState(isActive = !1) {
  return {
    isActive,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {}
  };
}
function createState() {
  return {
    animate: createTypeState(!0),
    whileInView: createTypeState(),
    whileHover: createTypeState(),
    whileTap: createTypeState(),
    whileDrag: createTypeState(),
    whileFocus: createTypeState(),
    exit: createTypeState()
  };
}

// ../../../node_modules/framer-motion/dist/es/motion/features/animation/index.mjs
var AnimationFeature = class extends Feature {
  /**
   * We dynamically generate the AnimationState manager as it contains a reference
   * to the underlying animation library. We only want to load that if we load this,
   * so people can optionally code split it out using the `m` component.
   */
  constructor(node) {
    super(node), node.animationState || (node.animationState = createAnimationState(node));
  }
  updateAnimationControlsSubscription() {
    let { animate } = this.node.getProps();
    this.unmount(), isAnimationControls(animate) && (this.unmount = animate.subscribe(this.node));
  }
  /**
   * Subscribe any provided AnimationControls to the component's VisualElement
   */
  mount() {
    this.updateAnimationControlsSubscription();
  }
  update() {
    let { animate } = this.node.getProps(), { animate: prevAnimate } = this.node.prevProps || {};
    animate !== prevAnimate && this.updateAnimationControlsSubscription();
  }
  unmount() {
  }
};

// ../../../node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs
var id = 0, ExitAnimationFeature = class extends Feature {
  constructor() {
    super(...arguments), this.id = id++;
  }
  update() {
    if (!this.node.presenceContext)
      return;
    let { isPresent, onExitComplete, custom } = this.node.presenceContext, { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
    if (!this.node.animationState || isPresent === prevIsPresent)
      return;
    let exitAnimation = this.node.animationState.setActive("exit", !isPresent, { custom: custom ?? this.node.getProps().custom });
    onExitComplete && !isPresent && exitAnimation.then(() => onExitComplete(this.id));
  }
  mount() {
    let { register } = this.node.presenceContext || {};
    register && (this.unmount = register(this.id));
  }
  unmount() {
  }
};

// ../../../node_modules/framer-motion/dist/es/motion/features/animations.mjs
var animations = {
  animation: {
    Feature: AnimationFeature
  },
  exit: {
    Feature: ExitAnimationFeature
  }
};

// ../../../node_modules/framer-motion/dist/es/utils/distance.mjs
var distance = (a9, b) => Math.abs(a9 - b);
function distance2D(a9, b) {
  let xDelta = distance(a9.x, b.x), yDelta = distance(a9.y, b.y);
  return Math.sqrt(xDelta ** 2 + yDelta ** 2);
}

// ../../../node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs
var PanSession = class {
  constructor(event, handlers, { transformPagePoint } = {}) {
    if (this.startEvent = null, this.lastMoveEvent = null, this.lastMoveEventInfo = null, this.handlers = {}, this.updatePoint = () => {
      if (!(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      let info2 = getPanInfo(this.lastMoveEventInfo, this.history), isPanStarted = this.startEvent !== null, isDistancePastThreshold = distance2D(info2.offset, { x: 0, y: 0 }) >= 3;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      let { point: point2 } = info2, { timestamp: timestamp2 } = frameData;
      this.history.push({ ...point2, timestamp: timestamp2 });
      let { onStart, onMove } = this.handlers;
      isPanStarted || (onStart && onStart(this.lastMoveEvent, info2), this.startEvent = this.lastMoveEvent), onMove && onMove(this.lastMoveEvent, info2);
    }, this.handlePointerMove = (event2, info2) => {
      this.lastMoveEvent = event2, this.lastMoveEventInfo = transformPoint(info2, this.transformPagePoint), frame.update(this.updatePoint, !0);
    }, this.handlePointerUp = (event2, info2) => {
      if (this.end(), !(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      let { onEnd, onSessionEnd } = this.handlers, panInfo = getPanInfo(event2.type === "pointercancel" ? this.lastMoveEventInfo : transformPoint(info2, this.transformPagePoint), this.history);
      this.startEvent && onEnd && onEnd(event2, panInfo), onSessionEnd && onSessionEnd(event2, panInfo);
    }, !isPrimaryPointer(event))
      return;
    this.handlers = handlers, this.transformPagePoint = transformPagePoint;
    let info = extractEventInfo(event), initialInfo = transformPoint(info, this.transformPagePoint), { point } = initialInfo, { timestamp } = frameData;
    this.history = [{ ...point, timestamp }];
    let { onSessionStart } = handlers;
    onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history)), this.removeListeners = pipe(addPointerEvent(window, "pointermove", this.handlePointerMove), addPointerEvent(window, "pointerup", this.handlePointerUp), addPointerEvent(window, "pointercancel", this.handlePointerUp));
  }
  updateHandlers(handlers) {
    this.handlers = handlers;
  }
  end() {
    this.removeListeners && this.removeListeners(), cancelFrame(this.updatePoint);
  }
};
function transformPoint(info, transformPagePoint) {
  return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
}
function subtractPoint(a9, b) {
  return { x: a9.x - b.x, y: a9.y - b.y };
}
function getPanInfo({ point }, history) {
  return {
    point,
    delta: subtractPoint(point, lastDevicePoint(history)),
    offset: subtractPoint(point, startDevicePoint(history)),
    velocity: getVelocity2(history, 0.1)
  };
}
function startDevicePoint(history) {
  return history[0];
}
function lastDevicePoint(history) {
  return history[history.length - 1];
}
function getVelocity2(history, timeDelta) {
  if (history.length < 2)
    return { x: 0, y: 0 };
  let i13 = history.length - 1, timestampedPoint = null, lastPoint = lastDevicePoint(history);
  for (; i13 >= 0 && (timestampedPoint = history[i13], !(lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta))); )
    i13--;
  if (!timestampedPoint)
    return { x: 0, y: 0 };
  let time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);
  if (time === 0)
    return { x: 0, y: 0 };
  let currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time,
    y: (lastPoint.y - timestampedPoint.y) / time
  };
  return currentVelocity.x === 1 / 0 && (currentVelocity.x = 0), currentVelocity.y === 1 / 0 && (currentVelocity.y = 0), currentVelocity;
}

// ../../../node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs
function calcLength(axis) {
  return axis.max - axis.min;
}
function isNear(value, target = 0, maxDistance = 0.01) {
  return Math.abs(value - target) <= maxDistance;
}
function calcAxisDelta(delta, source, target, origin = 0.5) {
  delta.origin = origin, delta.originPoint = mix(source.min, source.max, delta.origin), delta.scale = calcLength(target) / calcLength(source), (isNear(delta.scale, 1, 1e-4) || isNaN(delta.scale)) && (delta.scale = 1), delta.translate = mix(target.min, target.max, delta.origin) - delta.originPoint, (isNear(delta.translate) || isNaN(delta.translate)) && (delta.translate = 0);
}
function calcBoxDelta(delta, source, target, origin) {
  calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : void 0), calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : void 0);
}
function calcRelativeAxis(target, relative, parent) {
  target.min = parent.min + relative.min, target.max = target.min + calcLength(relative);
}
function calcRelativeBox(target, relative, parent) {
  calcRelativeAxis(target.x, relative.x, parent.x), calcRelativeAxis(target.y, relative.y, parent.y);
}
function calcRelativeAxisPosition(target, layout2, parent) {
  target.min = layout2.min - parent.min, target.max = target.min + calcLength(layout2);
}
function calcRelativePosition(target, layout2, parent) {
  calcRelativeAxisPosition(target.x, layout2.x, parent.x), calcRelativeAxisPosition(target.y, layout2.y, parent.y);
}

// ../../../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs
function applyConstraints(point, { min: min3, max: max3 }, elastic) {
  return min3 !== void 0 && point < min3 ? point = elastic ? mix(min3, point, elastic.min) : Math.max(point, min3) : max3 !== void 0 && point > max3 && (point = elastic ? mix(max3, point, elastic.max) : Math.min(point, max3)), point;
}
function calcRelativeAxisConstraints(axis, min3, max3) {
  return {
    min: min3 !== void 0 ? axis.min + min3 : void 0,
    max: max3 !== void 0 ? axis.max + max3 - (axis.max - axis.min) : void 0
  };
}
function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {
  return {
    x: calcRelativeAxisConstraints(layoutBox.x, left, right),
    y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)
  };
}
function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
  let min3 = constraintsAxis.min - layoutAxis.min, max3 = constraintsAxis.max - layoutAxis.max;
  return constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min && ([min3, max3] = [max3, min3]), { min: min3, max: max3 };
}
function calcViewportConstraints(layoutBox, constraintsBox) {
  return {
    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
  };
}
function calcOrigin2(source, target) {
  let origin = 0.5, sourceLength = calcLength(source), targetLength = calcLength(target);
  return targetLength > sourceLength ? origin = progress(target.min, target.max - sourceLength, source.min) : sourceLength > targetLength && (origin = progress(source.min, source.max - targetLength, target.min)), clamp(0, 1, origin);
}
function rebaseAxisConstraints(layout2, constraints) {
  let relativeConstraints = {};
  return constraints.min !== void 0 && (relativeConstraints.min = constraints.min - layout2.min), constraints.max !== void 0 && (relativeConstraints.max = constraints.max - layout2.min), relativeConstraints;
}
var defaultElastic = 0.35;
function resolveDragElastic(dragElastic = defaultElastic) {
  return dragElastic === !1 ? dragElastic = 0 : dragElastic === !0 && (dragElastic = defaultElastic), {
    x: resolveAxisElastic(dragElastic, "left", "right"),
    y: resolveAxisElastic(dragElastic, "top", "bottom")
  };
}
function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
  return {
    min: resolvePointElastic(dragElastic, minLabel),
    max: resolvePointElastic(dragElastic, maxLabel)
  };
}
function resolvePointElastic(dragElastic, label2) {
  return typeof dragElastic == "number" ? dragElastic : dragElastic[label2] || 0;
}

// ../../../node_modules/framer-motion/dist/es/projection/geometry/models.mjs
var createAxisDelta = () => ({
  translate: 0,
  scale: 1,
  origin: 0,
  originPoint: 0
}), createDelta = () => ({
  x: createAxisDelta(),
  y: createAxisDelta()
}), createAxis = () => ({ min: 0, max: 0 }), createBox = () => ({
  x: createAxis(),
  y: createAxis()
});

// ../../../node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs
function eachAxis(callback) {
  return [callback("x"), callback("y")];
}

// ../../../node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs
function convertBoundingBoxToBox({ top, left, right, bottom }) {
  return {
    x: { min: left, max: right },
    y: { min: top, max: bottom }
  };
}
function convertBoxToBoundingBox({ x, y }) {
  return { top: y.min, right: x.max, bottom: y.max, left: x.min };
}
function transformBoxPoints(point, transformPoint2) {
  if (!transformPoint2)
    return point;
  let topLeft = transformPoint2({ x: point.left, y: point.top }), bottomRight = transformPoint2({ x: point.right, y: point.bottom });
  return {
    top: topLeft.y,
    left: topLeft.x,
    bottom: bottomRight.y,
    right: bottomRight.x
  };
}

// ../../../node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs
function isIdentityScale(scale2) {
  return scale2 === void 0 || scale2 === 1;
}
function hasScale({ scale: scale2, scaleX, scaleY }) {
  return !isIdentityScale(scale2) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
}
function hasTransform(values) {
  return hasScale(values) || has2DTranslate(values) || values.z || values.rotate || values.rotateX || values.rotateY;
}
function has2DTranslate(values) {
  return is2DTranslate(values.x) || is2DTranslate(values.y);
}
function is2DTranslate(value) {
  return value && value !== "0%";
}

// ../../../node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs
function scalePoint(point, scale2, originPoint) {
  let distanceFromOrigin = point - originPoint, scaled = scale2 * distanceFromOrigin;
  return originPoint + scaled;
}
function applyPointDelta(point, translate, scale2, originPoint, boxScale) {
  return boxScale !== void 0 && (point = scalePoint(point, boxScale, originPoint)), scalePoint(point, scale2, originPoint) + translate;
}
function applyAxisDelta(axis, translate = 0, scale2 = 1, originPoint, boxScale) {
  axis.min = applyPointDelta(axis.min, translate, scale2, originPoint, boxScale), axis.max = applyPointDelta(axis.max, translate, scale2, originPoint, boxScale);
}
function applyBoxDelta(box, { x, y }) {
  applyAxisDelta(box.x, x.translate, x.scale, x.originPoint), applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
}
function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = !1) {
  let treeLength = treePath.length;
  if (!treeLength)
    return;
  treeScale.x = treeScale.y = 1;
  let node, delta;
  for (let i13 = 0; i13 < treeLength; i13++) {
    node = treePath[i13], delta = node.projectionDelta;
    let instance = node.instance;
    instance && instance.style && instance.style.display === "contents" || (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root && transformBox(box, {
      x: -node.scroll.offset.x,
      y: -node.scroll.offset.y
    }), delta && (treeScale.x *= delta.x.scale, treeScale.y *= delta.y.scale, applyBoxDelta(box, delta)), isSharedTransition && hasTransform(node.latestValues) && transformBox(box, node.latestValues));
  }
  treeScale.x = snapToDefault(treeScale.x), treeScale.y = snapToDefault(treeScale.y);
}
function snapToDefault(scale2) {
  return Number.isInteger(scale2) || scale2 > 1.0000000000001 || scale2 < 0.999999999999 ? scale2 : 1;
}
function translateAxis(axis, distance2) {
  axis.min = axis.min + distance2, axis.max = axis.max + distance2;
}
function transformAxis(axis, transforms, [key, scaleKey, originKey]) {
  let axisOrigin = transforms[originKey] !== void 0 ? transforms[originKey] : 0.5, originPoint = mix(axis.min, axis.max, axisOrigin);
  applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);
}
var xKeys = ["x", "scaleX", "originX"], yKeys = ["y", "scaleY", "originY"];
function transformBox(box, transform) {
  transformAxis(box.x, transform, xKeys), transformAxis(box.y, transform, yKeys);
}

// ../../../node_modules/framer-motion/dist/es/projection/utils/measure.mjs
function measureViewportBox(instance, transformPoint2) {
  return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint2));
}
function measurePageBox(element, rootProjectionNode2, transformPagePoint) {
  let viewportBox = measureViewportBox(element, transformPagePoint), { scroll } = rootProjectionNode2;
  return scroll && (translateAxis(viewportBox.x, scroll.offset.x), translateAxis(viewportBox.y, scroll.offset.y)), viewportBox;
}

// ../../../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs
var elementDragControls = /* @__PURE__ */ new WeakMap(), VisualElementDragControls = class {
  constructor(visualElement) {
    this.openGlobalLock = null, this.isDragging = !1, this.currentDirection = null, this.originPoint = { x: 0, y: 0 }, this.constraints = !1, this.hasMutatedConstraints = !1, this.elastic = createBox(), this.visualElement = visualElement;
  }
  start(originEvent, { snapToCursor = !1 } = {}) {
    let { presenceContext } = this.visualElement;
    if (presenceContext && presenceContext.isPresent === !1)
      return;
    let onSessionStart = (event) => {
      this.stopAnimation(), snapToCursor && this.snapToCursor(extractEventInfo(event, "page").point);
    }, onStart = (event, info) => {
      let { drag: drag2, dragPropagation, onDragStart } = this.getProps();
      if (drag2 && !dragPropagation && (this.openGlobalLock && this.openGlobalLock(), this.openGlobalLock = getGlobalLock(drag2), !this.openGlobalLock))
        return;
      this.isDragging = !0, this.currentDirection = null, this.resolveConstraints(), this.visualElement.projection && (this.visualElement.projection.isAnimationBlocked = !0, this.visualElement.projection.target = void 0), eachAxis((axis) => {
        let current = this.getAxisMotionValue(axis).get() || 0;
        if (percent.test(current)) {
          let { projection } = this.visualElement;
          if (projection && projection.layout) {
            let measuredAxis = projection.layout.layoutBox[axis];
            measuredAxis && (current = calcLength(measuredAxis) * (parseFloat(current) / 100));
          }
        }
        this.originPoint[axis] = current;
      }), onDragStart && frame.update(() => onDragStart(event, info), !1, !0);
      let { animationState } = this.visualElement;
      animationState && animationState.setActive("whileDrag", !0);
    }, onMove = (event, info) => {
      let { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } = this.getProps();
      if (!dragPropagation && !this.openGlobalLock)
        return;
      let { offset: offset2 } = info;
      if (dragDirectionLock && this.currentDirection === null) {
        this.currentDirection = getCurrentDirection(offset2), this.currentDirection !== null && onDirectionLock && onDirectionLock(this.currentDirection);
        return;
      }
      this.updateAxis("x", info.point, offset2), this.updateAxis("y", info.point, offset2), this.visualElement.render(), onDrag && onDrag(event, info);
    }, onSessionEnd = (event, info) => this.stop(event, info);
    this.panSession = new PanSession(originEvent, {
      onSessionStart,
      onStart,
      onMove,
      onSessionEnd
    }, { transformPagePoint: this.visualElement.getTransformPagePoint() });
  }
  stop(event, info) {
    let isDragging = this.isDragging;
    if (this.cancel(), !isDragging)
      return;
    let { velocity } = info;
    this.startAnimation(velocity);
    let { onDragEnd } = this.getProps();
    onDragEnd && frame.update(() => onDragEnd(event, info));
  }
  cancel() {
    this.isDragging = !1;
    let { projection, animationState } = this.visualElement;
    projection && (projection.isAnimationBlocked = !1), this.panSession && this.panSession.end(), this.panSession = void 0;
    let { dragPropagation } = this.getProps();
    !dragPropagation && this.openGlobalLock && (this.openGlobalLock(), this.openGlobalLock = null), animationState && animationState.setActive("whileDrag", !1);
  }
  updateAxis(axis, _point, offset2) {
    let { drag: drag2 } = this.getProps();
    if (!offset2 || !shouldDrag(axis, drag2, this.currentDirection))
      return;
    let axisValue = this.getAxisMotionValue(axis), next = this.originPoint[axis] + offset2[axis];
    this.constraints && this.constraints[axis] && (next = applyConstraints(next, this.constraints[axis], this.elastic[axis])), axisValue.set(next);
  }
  resolveConstraints() {
    let { dragConstraints, dragElastic } = this.getProps(), { layout: layout2 } = this.visualElement.projection || {}, prevConstraints = this.constraints;
    dragConstraints && isRefObject(dragConstraints) ? this.constraints || (this.constraints = this.resolveRefConstraints()) : dragConstraints && layout2 ? this.constraints = calcRelativeConstraints(layout2.layoutBox, dragConstraints) : this.constraints = !1, this.elastic = resolveDragElastic(dragElastic), prevConstraints !== this.constraints && layout2 && this.constraints && !this.hasMutatedConstraints && eachAxis((axis) => {
      this.getAxisMotionValue(axis) && (this.constraints[axis] = rebaseAxisConstraints(layout2.layoutBox[axis], this.constraints[axis]));
    });
  }
  resolveRefConstraints() {
    let { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();
    if (!constraints || !isRefObject(constraints))
      return !1;
    let constraintsElement = constraints.current;
    invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
    let { projection } = this.visualElement;
    if (!projection || !projection.layout)
      return !1;
    let constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint()), measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);
    if (onMeasureDragConstraints) {
      let userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
      this.hasMutatedConstraints = !!userConstraints, userConstraints && (measuredConstraints = convertBoundingBoxToBox(userConstraints));
    }
    return measuredConstraints;
  }
  startAnimation(velocity) {
    let { drag: drag2, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd } = this.getProps(), constraints = this.constraints || {}, momentumAnimations = eachAxis((axis) => {
      if (!shouldDrag(axis, drag2, this.currentDirection))
        return;
      let transition = constraints && constraints[axis] || {};
      dragSnapToOrigin && (transition = { min: 0, max: 0 });
      let bounceStiffness = dragElastic ? 200 : 1e6, bounceDamping = dragElastic ? 40 : 1e7, inertia2 = {
        type: "inertia",
        velocity: dragMomentum ? velocity[axis] : 0,
        bounceStiffness,
        bounceDamping,
        timeConstant: 750,
        restDelta: 1,
        restSpeed: 10,
        ...dragTransition,
        ...transition
      };
      return this.startAxisValueAnimation(axis, inertia2);
    });
    return Promise.all(momentumAnimations).then(onDragTransitionEnd);
  }
  startAxisValueAnimation(axis, transition) {
    let axisValue = this.getAxisMotionValue(axis);
    return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));
  }
  stopAnimation() {
    eachAxis((axis) => this.getAxisMotionValue(axis).stop());
  }
  /**
   * Drag works differently depending on which props are provided.
   *
   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
   * - Otherwise, we apply the delta to the x/y motion values.
   */
  getAxisMotionValue(axis) {
    let dragKey = "_drag" + axis.toUpperCase(), props = this.visualElement.getProps(), externalMotionValue = props[dragKey];
    return externalMotionValue || this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : void 0) || 0);
  }
  snapToCursor(point) {
    eachAxis((axis) => {
      let { drag: drag2 } = this.getProps();
      if (!shouldDrag(axis, drag2, this.currentDirection))
        return;
      let { projection } = this.visualElement, axisValue = this.getAxisMotionValue(axis);
      if (projection && projection.layout) {
        let { min: min3, max: max3 } = projection.layout.layoutBox[axis];
        axisValue.set(point[axis] - mix(min3, max3, 0.5));
      }
    });
  }
  /**
   * When the viewport resizes we want to check if the measured constraints
   * have changed and, if so, reposition the element within those new constraints
   * relative to where it was before the resize.
   */
  scalePositionWithinConstraints() {
    if (!this.visualElement.current)
      return;
    let { drag: drag2, dragConstraints } = this.getProps(), { projection } = this.visualElement;
    if (!isRefObject(dragConstraints) || !projection || !this.constraints)
      return;
    this.stopAnimation();
    let boxProgress = { x: 0, y: 0 };
    eachAxis((axis) => {
      let axisValue = this.getAxisMotionValue(axis);
      if (axisValue) {
        let latest = axisValue.get();
        boxProgress[axis] = calcOrigin2({ min: latest, max: latest }, this.constraints[axis]);
      }
    });
    let { transformTemplate } = this.visualElement.getProps();
    this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, "") : "none", projection.root && projection.root.updateScroll(), projection.updateLayout(), this.resolveConstraints(), eachAxis((axis) => {
      if (!shouldDrag(axis, drag2, null))
        return;
      let axisValue = this.getAxisMotionValue(axis), { min: min3, max: max3 } = this.constraints[axis];
      axisValue.set(mix(min3, max3, boxProgress[axis]));
    });
  }
  addListeners() {
    if (!this.visualElement.current)
      return;
    elementDragControls.set(this.visualElement, this);
    let element = this.visualElement.current, stopPointerListener = addPointerEvent(element, "pointerdown", (event) => {
      let { drag: drag2, dragListener = !0 } = this.getProps();
      drag2 && dragListener && this.start(event);
    }), measureDragConstraints = () => {
      let { dragConstraints } = this.getProps();
      isRefObject(dragConstraints) && (this.constraints = this.resolveRefConstraints());
    }, { projection } = this.visualElement, stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
    projection && !projection.layout && (projection.root && projection.root.updateScroll(), projection.updateLayout()), measureDragConstraints();
    let stopResizeListener = addDomEvent(window, "resize", () => this.scalePositionWithinConstraints()), stopLayoutUpdateListener = projection.addEventListener("didUpdate", ({ delta, hasLayoutChanged }) => {
      this.isDragging && hasLayoutChanged && (eachAxis((axis) => {
        let motionValue2 = this.getAxisMotionValue(axis);
        motionValue2 && (this.originPoint[axis] += delta[axis].translate, motionValue2.set(motionValue2.get() + delta[axis].translate));
      }), this.visualElement.render());
    });
    return () => {
      stopResizeListener(), stopPointerListener(), stopMeasureLayoutListener(), stopLayoutUpdateListener && stopLayoutUpdateListener();
    };
  }
  getProps() {
    let props = this.visualElement.getProps(), { drag: drag2 = !1, dragDirectionLock = !1, dragPropagation = !1, dragConstraints = !1, dragElastic = defaultElastic, dragMomentum = !0 } = props;
    return {
      ...props,
      drag: drag2,
      dragDirectionLock,
      dragPropagation,
      dragConstraints,
      dragElastic,
      dragMomentum
    };
  }
};
function shouldDrag(direction, drag2, currentDirection) {
  return (drag2 === !0 || drag2 === direction) && (currentDirection === null || currentDirection === direction);
}
function getCurrentDirection(offset2, lockThreshold = 10) {
  let direction = null;
  return Math.abs(offset2.y) > lockThreshold ? direction = "y" : Math.abs(offset2.x) > lockThreshold && (direction = "x"), direction;
}

// ../../../node_modules/framer-motion/dist/es/gestures/drag/index.mjs
var DragGesture = class extends Feature {
  constructor(node) {
    super(node), this.removeGroupControls = noop, this.removeListeners = noop, this.controls = new VisualElementDragControls(node);
  }
  mount() {
    let { dragControls } = this.node.getProps();
    dragControls && (this.removeGroupControls = dragControls.subscribe(this.controls)), this.removeListeners = this.controls.addListeners() || noop;
  }
  unmount() {
    this.removeGroupControls(), this.removeListeners();
  }
};

// ../../../node_modules/framer-motion/dist/es/gestures/pan/index.mjs
var asyncHandler = (handler) => (event, info) => {
  handler && frame.update(() => handler(event, info));
}, PanGesture = class extends Feature {
  constructor() {
    super(...arguments), this.removePointerDownListener = noop;
  }
  onPointerDown(pointerDownEvent) {
    this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });
  }
  createPanHandlers() {
    let { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();
    return {
      onSessionStart: asyncHandler(onPanSessionStart),
      onStart: asyncHandler(onPanStart),
      onMove: onPan,
      onEnd: (event, info) => {
        delete this.session, onPanEnd && frame.update(() => onPanEnd(event, info));
      }
    };
  }
  mount() {
    this.removePointerDownListener = addPointerEvent(this.node.current, "pointerdown", (event) => this.onPointerDown(event));
  }
  update() {
    this.session && this.session.updateHandlers(this.createPanHandlers());
  }
  unmount() {
    this.removePointerDownListener(), this.session && this.session.end();
  }
};

// ../../../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
var import_react24 = __toESM(require_react(), 1);

// ../../../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
var import_react23 = __toESM(require_react(), 1);
function usePresence() {
  let context = (0, import_react23.useContext)(PresenceContext);
  if (context === null)
    return [!0, null];
  let { isPresent, onExitComplete, register } = context, id3 = (0, import_react23.useId)();
  return (0, import_react23.useEffect)(() => register(id3), []), !isPresent && onExitComplete ? [!1, () => onExitComplete && onExitComplete(id3)] : [!0];
}

// ../../../node_modules/framer-motion/dist/es/projection/node/state.mjs
var globalProjectionState = {
  /**
   * Global flag as to whether the tree has animated since the last time
   * we resized the window
   */
  hasAnimatedSinceResize: !0,
  /**
   * We set this to true once, on the first update. Any nodes added to the tree beyond that
   * update will be given a `data-projection-id` attribute.
   */
  hasEverUpdated: !1
};

// ../../../node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs
function pixelsToPercent(pixels, axis) {
  return axis.max === axis.min ? 0 : pixels / (axis.max - axis.min) * 100;
}
var correctBorderRadius = {
  correct: (latest, node) => {
    if (!node.target)
      return latest;
    if (typeof latest == "string")
      if (px.test(latest))
        latest = parseFloat(latest);
      else
        return latest;
    let x = pixelsToPercent(latest, node.target.x), y = pixelsToPercent(latest, node.target.y);
    return `${x}% ${y}%`;
  }
};

// ../../../node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs
var correctBoxShadow = {
  correct: (latest, { treeScale, projectionDelta }) => {
    let original = latest, shadow = complex.parse(latest);
    if (shadow.length > 5)
      return original;
    let template = complex.createTransformer(latest), offset2 = typeof shadow[0] != "number" ? 1 : 0, xScale = projectionDelta.x.scale * treeScale.x, yScale = projectionDelta.y.scale * treeScale.y;
    shadow[0 + offset2] /= xScale, shadow[1 + offset2] /= yScale;
    let averageScale = mix(xScale, yScale, 0.5);
    return typeof shadow[2 + offset2] == "number" && (shadow[2 + offset2] /= averageScale), typeof shadow[3 + offset2] == "number" && (shadow[3 + offset2] /= averageScale), template(shadow);
  }
};

// ../../../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
var MeasureLayoutWithContext = class extends import_react24.default.Component {
  /**
   * This only mounts projection nodes for components that
   * need measuring, we might want to do it for all components
   * in order to incorporate transforms
   */
  componentDidMount() {
    let { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props, { projection } = visualElement;
    addScaleCorrector(defaultScaleCorrectors), projection && (layoutGroup.group && layoutGroup.group.add(projection), switchLayoutGroup && switchLayoutGroup.register && layoutId && switchLayoutGroup.register(projection), projection.root.didUpdate(), projection.addEventListener("animationComplete", () => {
      this.safeToRemove();
    }), projection.setOptions({
      ...projection.options,
      onExitComplete: () => this.safeToRemove()
    })), globalProjectionState.hasEverUpdated = !0;
  }
  getSnapshotBeforeUpdate(prevProps) {
    let { layoutDependency, visualElement, drag: drag2, isPresent } = this.props, projection = visualElement.projection;
    return projection && (projection.isPresent = isPresent, drag2 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0 ? projection.willUpdate() : this.safeToRemove(), prevProps.isPresent !== isPresent && (isPresent ? projection.promote() : projection.relegate() || frame.postRender(() => {
      let stack = projection.getStack();
      (!stack || !stack.members.length) && this.safeToRemove();
    }))), null;
  }
  componentDidUpdate() {
    let { projection } = this.props.visualElement;
    projection && (projection.root.didUpdate(), queueMicrotask(() => {
      !projection.currentAnimation && projection.isLead() && this.safeToRemove();
    }));
  }
  componentWillUnmount() {
    let { visualElement, layoutGroup, switchLayoutGroup: promoteContext } = this.props, { projection } = visualElement;
    projection && (projection.scheduleCheckAfterUnmount(), layoutGroup && layoutGroup.group && layoutGroup.group.remove(projection), promoteContext && promoteContext.deregister && promoteContext.deregister(projection));
  }
  safeToRemove() {
    let { safeToRemove } = this.props;
    safeToRemove && safeToRemove();
  }
  render() {
    return null;
  }
};
function MeasureLayout(props) {
  let [isPresent, safeToRemove] = usePresence(), layoutGroup = (0, import_react24.useContext)(LayoutGroupContext);
  return import_react24.default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup, switchLayoutGroup: (0, import_react24.useContext)(SwitchLayoutGroupContext), isPresent, safeToRemove });
}
var defaultScaleCorrectors = {
  borderRadius: {
    ...correctBorderRadius,
    applyTo: [
      "borderTopLeftRadius",
      "borderTopRightRadius",
      "borderBottomLeftRadius",
      "borderBottomRightRadius"
    ]
  },
  borderTopLeftRadius: correctBorderRadius,
  borderTopRightRadius: correctBorderRadius,
  borderBottomLeftRadius: correctBorderRadius,
  borderBottomRightRadius: correctBorderRadius,
  boxShadow: correctBoxShadow
};

// ../../../node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs
var borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"], numBorders = borders.length, asNumber = (value) => typeof value == "string" ? parseFloat(value) : value, isPx = (value) => typeof value == "number" || px.test(value);
function mixValues(target, follow, lead, progress2, shouldCrossfadeOpacity, isOnlyMember) {
  shouldCrossfadeOpacity ? (target.opacity = mix(
    0,
    // TODO Reinstate this if only child
    lead.opacity !== void 0 ? lead.opacity : 1,
    easeCrossfadeIn(progress2)
  ), target.opacityExit = mix(follow.opacity !== void 0 ? follow.opacity : 1, 0, easeCrossfadeOut(progress2))) : isOnlyMember && (target.opacity = mix(follow.opacity !== void 0 ? follow.opacity : 1, lead.opacity !== void 0 ? lead.opacity : 1, progress2));
  for (let i13 = 0; i13 < numBorders; i13++) {
    let borderLabel = `border${borders[i13]}Radius`, followRadius = getRadius(follow, borderLabel), leadRadius = getRadius(lead, borderLabel);
    if (followRadius === void 0 && leadRadius === void 0)
      continue;
    followRadius || (followRadius = 0), leadRadius || (leadRadius = 0), followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius) ? (target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress2), 0), (percent.test(leadRadius) || percent.test(followRadius)) && (target[borderLabel] += "%")) : target[borderLabel] = leadRadius;
  }
  (follow.rotate || lead.rotate) && (target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress2));
}
function getRadius(values, radiusName) {
  return values[radiusName] !== void 0 ? values[radiusName] : values.borderRadius;
}
var easeCrossfadeIn = compress(0, 0.5, circOut), easeCrossfadeOut = compress(0.5, 0.95, noop);
function compress(min3, max3, easing) {
  return (p) => p < min3 ? 0 : p > max3 ? 1 : easing(progress(min3, max3, p));
}

// ../../../node_modules/framer-motion/dist/es/projection/geometry/copy.mjs
function copyAxisInto(axis, originAxis) {
  axis.min = originAxis.min, axis.max = originAxis.max;
}
function copyBoxInto(box, originBox) {
  copyAxisInto(box.x, originBox.x), copyAxisInto(box.y, originBox.y);
}

// ../../../node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs
function removePointDelta(point, translate, scale2, originPoint, boxScale) {
  return point -= translate, point = scalePoint(point, 1 / scale2, originPoint), boxScale !== void 0 && (point = scalePoint(point, 1 / boxScale, originPoint)), point;
}
function removeAxisDelta(axis, translate = 0, scale2 = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {
  if (percent.test(translate) && (translate = parseFloat(translate), translate = mix(sourceAxis.min, sourceAxis.max, translate / 100) - sourceAxis.min), typeof translate != "number")
    return;
  let originPoint = mix(originAxis.min, originAxis.max, origin);
  axis === originAxis && (originPoint -= translate), axis.min = removePointDelta(axis.min, translate, scale2, originPoint, boxScale), axis.max = removePointDelta(axis.max, translate, scale2, originPoint, boxScale);
}
function removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {
  removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);
}
var xKeys2 = ["x", "scaleX", "originX"], yKeys2 = ["y", "scaleY", "originY"];
function removeBoxTransforms(box, transforms, originBox, sourceBox) {
  removeAxisTransforms(box.x, transforms, xKeys2, originBox ? originBox.x : void 0, sourceBox ? sourceBox.x : void 0), removeAxisTransforms(box.y, transforms, yKeys2, originBox ? originBox.y : void 0, sourceBox ? sourceBox.y : void 0);
}

// ../../../node_modules/framer-motion/dist/es/projection/geometry/utils.mjs
function isAxisDeltaZero(delta) {
  return delta.translate === 0 && delta.scale === 1;
}
function isDeltaZero(delta) {
  return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
}
function boxEquals(a9, b) {
  return a9.x.min === b.x.min && a9.x.max === b.x.max && a9.y.min === b.y.min && a9.y.max === b.y.max;
}
function aspectRatio(box) {
  return calcLength(box.x) / calcLength(box.y);
}

// ../../../node_modules/framer-motion/dist/es/projection/shared/stack.mjs
var NodeStack = class {
  constructor() {
    this.members = [];
  }
  add(node) {
    addUniqueItem(this.members, node), node.scheduleRender();
  }
  remove(node) {
    if (removeItem(this.members, node), node === this.prevLead && (this.prevLead = void 0), node === this.lead) {
      let prevLead = this.members[this.members.length - 1];
      prevLead && this.promote(prevLead);
    }
  }
  relegate(node) {
    let indexOfNode = this.members.findIndex((member) => node === member);
    if (indexOfNode === 0)
      return !1;
    let prevLead;
    for (let i13 = indexOfNode; i13 >= 0; i13--) {
      let member = this.members[i13];
      if (member.isPresent !== !1) {
        prevLead = member;
        break;
      }
    }
    return prevLead ? (this.promote(prevLead), !0) : !1;
  }
  promote(node, preserveFollowOpacity) {
    let prevLead = this.lead;
    if (node !== prevLead && (this.prevLead = prevLead, this.lead = node, node.show(), prevLead)) {
      prevLead.instance && prevLead.scheduleRender(), node.scheduleRender(), node.resumeFrom = prevLead, preserveFollowOpacity && (node.resumeFrom.preserveOpacity = !0), prevLead.snapshot && (node.snapshot = prevLead.snapshot, node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues), node.root && node.root.isUpdating && (node.isLayoutDirty = !0);
      let { crossfade } = node.options;
      crossfade === !1 && prevLead.hide();
    }
  }
  exitAnimationComplete() {
    this.members.forEach((node) => {
      let { options, resumingFrom } = node;
      options.onExitComplete && options.onExitComplete(), resumingFrom && resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();
    });
  }
  scheduleRender() {
    this.members.forEach((node) => {
      node.instance && node.scheduleRender(!1);
    });
  }
  /**
   * Clear any leads that have been removed this render to prevent them from being
   * used in future animations and to prevent memory leaks
   */
  removeLeadSnapshot() {
    this.lead && this.lead.snapshot && (this.lead.snapshot = void 0);
  }
};

// ../../../node_modules/framer-motion/dist/es/projection/styles/transform.mjs
function buildProjectionTransform(delta, treeScale, latestTransform) {
  let transform = "", xTranslate = delta.x.translate / treeScale.x, yTranslate = delta.y.translate / treeScale.y;
  if ((xTranslate || yTranslate) && (transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `), (treeScale.x !== 1 || treeScale.y !== 1) && (transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `), latestTransform) {
    let { rotate, rotateX, rotateY } = latestTransform;
    rotate && (transform += `rotate(${rotate}deg) `), rotateX && (transform += `rotateX(${rotateX}deg) `), rotateY && (transform += `rotateY(${rotateY}deg) `);
  }
  let elementScaleX = delta.x.scale * treeScale.x, elementScaleY = delta.y.scale * treeScale.y;
  return (elementScaleX !== 1 || elementScaleY !== 1) && (transform += `scale(${elementScaleX}, ${elementScaleY})`), transform || "none";
}

// ../../../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs
var compareByDepth = (a9, b) => a9.depth - b.depth;

// ../../../node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs
var FlatTree = class {
  constructor() {
    this.children = [], this.isDirty = !1;
  }
  add(child) {
    addUniqueItem(this.children, child), this.isDirty = !0;
  }
  remove(child) {
    removeItem(this.children, child), this.isDirty = !0;
  }
  forEach(callback) {
    this.isDirty && this.children.sort(compareByDepth), this.isDirty = !1, this.children.forEach(callback);
  }
};

// ../../../node_modules/framer-motion/dist/es/utils/delay.mjs
function delay(callback, timeout) {
  let start = performance.now(), checkElapsed = ({ timestamp }) => {
    let elapsed = timestamp - start;
    elapsed >= timeout && (cancelFrame(checkElapsed), callback(elapsed - timeout));
  };
  return frame.read(checkElapsed, !0), () => cancelFrame(checkElapsed);
}

// ../../../node_modules/framer-motion/dist/es/debug/record.mjs
function record(data) {
  window.MotionDebug && window.MotionDebug.record(data);
}

// ../../../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs
function isSVGElement(element) {
  return element instanceof SVGElement && element.tagName !== "svg";
}

// ../../../node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs
function animateSingleValue(value, keyframes2, options) {
  let motionValue$1 = isMotionValue(value) ? value : motionValue(value);
  return motionValue$1.start(animateMotionValue("", motionValue$1, keyframes2, options)), motionValue$1.animation;
}

// ../../../node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs
var transformAxes = ["", "X", "Y", "Z"], animationTarget = 1e3, id2 = 0, projectionFrameData = {
  type: "projectionFrame",
  totalNodes: 0,
  resolvedTargetDeltas: 0,
  recalculatedProjection: 0
};
function createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform }) {
  return class {
    constructor(latestValues = {}, parent = defaultParent == null ? void 0 : defaultParent()) {
      this.id = id2++, this.animationId = 0, this.children = /* @__PURE__ */ new Set(), this.options = {}, this.isTreeAnimating = !1, this.isAnimationBlocked = !1, this.isLayoutDirty = !1, this.isProjectionDirty = !1, this.isSharedProjectionDirty = !1, this.isTransformDirty = !1, this.updateManuallyBlocked = !1, this.updateBlockedByResize = !1, this.isUpdating = !1, this.isSVG = !1, this.needsReset = !1, this.shouldResetTransform = !1, this.treeScale = { x: 1, y: 1 }, this.eventHandlers = /* @__PURE__ */ new Map(), this.hasTreeAnimated = !1, this.updateScheduled = !1, this.checkUpdateFailed = () => {
        this.isUpdating && (this.isUpdating = !1, this.clearAllSnapshots());
      }, this.updateProjection = () => {
        projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0, this.nodes.forEach(propagateDirtyNodes), this.nodes.forEach(resolveTargetDelta), this.nodes.forEach(calcProjection), this.nodes.forEach(cleanDirtyNodes), record(projectionFrameData);
      }, this.hasProjected = !1, this.isVisible = !0, this.animationProgress = 0, this.sharedNodes = /* @__PURE__ */ new Map(), this.latestValues = latestValues, this.root = parent ? parent.root || parent : this, this.path = parent ? [...parent.path, parent] : [], this.parent = parent, this.depth = parent ? parent.depth + 1 : 0;
      for (let i13 = 0; i13 < this.path.length; i13++)
        this.path[i13].shouldResetTransform = !0;
      this.root === this && (this.nodes = new FlatTree());
    }
    addEventListener(name, handler) {
      return this.eventHandlers.has(name) || this.eventHandlers.set(name, new SubscriptionManager()), this.eventHandlers.get(name).add(handler);
    }
    notifyListeners(name, ...args) {
      let subscriptionManager = this.eventHandlers.get(name);
      subscriptionManager && subscriptionManager.notify(...args);
    }
    hasListeners(name) {
      return this.eventHandlers.has(name);
    }
    /**
     * Lifecycles
     */
    mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {
      if (this.instance)
        return;
      this.isSVG = isSVGElement(instance), this.instance = instance;
      let { layoutId, layout: layout2, visualElement } = this.options;
      if (visualElement && !visualElement.current && visualElement.mount(instance), this.root.nodes.add(this), this.parent && this.parent.children.add(this), isLayoutDirty && (layout2 || layoutId) && (this.isLayoutDirty = !0), attachResizeListener) {
        let cancelDelay, resizeUnblockUpdate = () => this.root.updateBlockedByResize = !1;
        attachResizeListener(instance, () => {
          this.root.updateBlockedByResize = !0, cancelDelay && cancelDelay(), cancelDelay = delay(resizeUnblockUpdate, 250), globalProjectionState.hasAnimatedSinceResize && (globalProjectionState.hasAnimatedSinceResize = !1, this.nodes.forEach(finishAnimation));
        });
      }
      layoutId && this.root.registerSharedNode(layoutId, this), this.options.animate !== !1 && visualElement && (layoutId || layout2) && this.addEventListener("didUpdate", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout }) => {
        if (this.isTreeAnimationBlocked()) {
          this.target = void 0, this.relativeTarget = void 0;
          return;
        }
        let layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition, { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement.getProps(), targetChanged = !this.targetLayout || !boxEquals(this.targetLayout, newLayout) || hasRelativeTargetChanged, hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
        if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {
          this.resumeFrom && (this.resumingFrom = this.resumeFrom, this.resumingFrom.resumingFrom = void 0), this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
          let animationOptions = {
            ...getValueTransition(layoutTransition, "layout"),
            onPlay: onLayoutAnimationStart,
            onComplete: onLayoutAnimationComplete
          };
          (visualElement.shouldReduceMotion || this.options.layoutRoot) && (animationOptions.delay = 0, animationOptions.type = !1), this.startAnimation(animationOptions);
        } else
          hasLayoutChanged || finishAnimation(this), this.isLead() && this.options.onExitComplete && this.options.onExitComplete();
        this.targetLayout = newLayout;
      });
    }
    unmount() {
      this.options.layoutId && this.willUpdate(), this.root.nodes.remove(this);
      let stack = this.getStack();
      stack && stack.remove(this), this.parent && this.parent.children.delete(this), this.instance = void 0, cancelFrame(this.updateProjection);
    }
    // only on the root
    blockUpdate() {
      this.updateManuallyBlocked = !0;
    }
    unblockUpdate() {
      this.updateManuallyBlocked = !1;
    }
    isUpdateBlocked() {
      return this.updateManuallyBlocked || this.updateBlockedByResize;
    }
    isTreeAnimationBlocked() {
      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || !1;
    }
    // Note: currently only running on root node
    startUpdate() {
      this.isUpdateBlocked() || (this.isUpdating = !0, this.nodes && this.nodes.forEach(resetRotation), this.animationId++);
    }
    getTransformTemplate() {
      let { visualElement } = this.options;
      return visualElement && visualElement.getProps().transformTemplate;
    }
    willUpdate(shouldNotifyListeners = !0) {
      if (this.root.hasTreeAnimated = !0, this.root.isUpdateBlocked()) {
        this.options.onExitComplete && this.options.onExitComplete();
        return;
      }
      if (!this.root.isUpdating && this.root.startUpdate(), this.isLayoutDirty)
        return;
      this.isLayoutDirty = !0;
      for (let i13 = 0; i13 < this.path.length; i13++) {
        let node = this.path[i13];
        node.shouldResetTransform = !0, node.updateScroll("snapshot"), node.options.layoutRoot && node.willUpdate(!1);
      }
      let { layoutId, layout: layout2 } = this.options;
      if (layoutId === void 0 && !layout2)
        return;
      let transformTemplate = this.getTransformTemplate();
      this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, "") : void 0, this.updateSnapshot(), shouldNotifyListeners && this.notifyListeners("willUpdate");
    }
    update() {
      if (this.updateScheduled = !1, this.isUpdateBlocked()) {
        this.unblockUpdate(), this.clearAllSnapshots(), this.nodes.forEach(clearMeasurements);
        return;
      }
      this.isUpdating || this.nodes.forEach(clearIsLayoutDirty), this.isUpdating = !1, this.nodes.forEach(resetTransformStyle), this.nodes.forEach(updateLayout), this.nodes.forEach(notifyLayoutUpdate), this.clearAllSnapshots();
      let now = performance.now();
      frameData.delta = clamp(0, 1e3 / 60, now - frameData.timestamp), frameData.timestamp = now, frameData.isProcessing = !0, steps.update.process(frameData), steps.preRender.process(frameData), steps.render.process(frameData), frameData.isProcessing = !1;
    }
    didUpdate() {
      this.updateScheduled || (this.updateScheduled = !0, queueMicrotask(() => this.update()));
    }
    clearAllSnapshots() {
      this.nodes.forEach(clearSnapshot), this.sharedNodes.forEach(removeLeadSnapshots);
    }
    scheduleUpdateProjection() {
      frame.preRender(this.updateProjection, !1, !0);
    }
    scheduleCheckAfterUnmount() {
      frame.postRender(() => {
        this.isLayoutDirty ? this.root.didUpdate() : this.root.checkUpdateFailed();
      });
    }
    /**
     * Update measurements
     */
    updateSnapshot() {
      this.snapshot || !this.instance || (this.snapshot = this.measure());
    }
    updateLayout() {
      if (!this.instance || (this.updateScroll(), !(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty))
        return;
      if (this.resumeFrom && !this.resumeFrom.instance)
        for (let i13 = 0; i13 < this.path.length; i13++)
          this.path[i13].updateScroll();
      let prevLayout = this.layout;
      this.layout = this.measure(!1), this.layoutCorrected = createBox(), this.isLayoutDirty = !1, this.projectionDelta = void 0, this.notifyListeners("measure", this.layout.layoutBox);
      let { visualElement } = this.options;
      visualElement && visualElement.notify("LayoutMeasure", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : void 0);
    }
    updateScroll(phase = "measure") {
      let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);
      this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase && (needsMeasurement = !1), needsMeasurement && (this.scroll = {
        animationId: this.root.animationId,
        phase,
        isRoot: checkIsScrollRoot(this.instance),
        offset: measureScroll(this.instance)
      });
    }
    resetTransform() {
      if (!resetTransform)
        return;
      let isResetRequested = this.isLayoutDirty || this.shouldResetTransform, hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta), transformTemplate = this.getTransformTemplate(), transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, "") : void 0, transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
      isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged) && (resetTransform(this.instance, transformTemplateValue), this.shouldResetTransform = !1, this.scheduleRender());
    }
    measure(removeTransform = !0) {
      let pageBox = this.measurePageBox(), layoutBox = this.removeElementScroll(pageBox);
      return removeTransform && (layoutBox = this.removeTransform(layoutBox)), roundBox(layoutBox), {
        animationId: this.root.animationId,
        measuredBox: pageBox,
        layoutBox,
        latestValues: {},
        source: this.id
      };
    }
    measurePageBox() {
      let { visualElement } = this.options;
      if (!visualElement)
        return createBox();
      let box = visualElement.measureViewportBox(), { scroll } = this.root;
      return scroll && (translateAxis(box.x, scroll.offset.x), translateAxis(box.y, scroll.offset.y)), box;
    }
    removeElementScroll(box) {
      let boxWithoutScroll = createBox();
      copyBoxInto(boxWithoutScroll, box);
      for (let i13 = 0; i13 < this.path.length; i13++) {
        let node = this.path[i13], { scroll, options } = node;
        if (node !== this.root && scroll && options.layoutScroll) {
          if (scroll.isRoot) {
            copyBoxInto(boxWithoutScroll, box);
            let { scroll: rootScroll } = this.root;
            rootScroll && (translateAxis(boxWithoutScroll.x, -rootScroll.offset.x), translateAxis(boxWithoutScroll.y, -rootScroll.offset.y));
          }
          translateAxis(boxWithoutScroll.x, scroll.offset.x), translateAxis(boxWithoutScroll.y, scroll.offset.y);
        }
      }
      return boxWithoutScroll;
    }
    applyTransform(box, transformOnly = !1) {
      let withTransforms = createBox();
      copyBoxInto(withTransforms, box);
      for (let i13 = 0; i13 < this.path.length; i13++) {
        let node = this.path[i13];
        !transformOnly && node.options.layoutScroll && node.scroll && node !== node.root && transformBox(withTransforms, {
          x: -node.scroll.offset.x,
          y: -node.scroll.offset.y
        }), hasTransform(node.latestValues) && transformBox(withTransforms, node.latestValues);
      }
      return hasTransform(this.latestValues) && transformBox(withTransforms, this.latestValues), withTransforms;
    }
    removeTransform(box) {
      let boxWithoutTransform = createBox();
      copyBoxInto(boxWithoutTransform, box);
      for (let i13 = 0; i13 < this.path.length; i13++) {
        let node = this.path[i13];
        if (!node.instance || !hasTransform(node.latestValues))
          continue;
        hasScale(node.latestValues) && node.updateSnapshot();
        let sourceBox = createBox(), nodeBox = node.measurePageBox();
        copyBoxInto(sourceBox, nodeBox), removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : void 0, sourceBox);
      }
      return hasTransform(this.latestValues) && removeBoxTransforms(boxWithoutTransform, this.latestValues), boxWithoutTransform;
    }
    setTargetDelta(delta) {
      this.targetDelta = delta, this.root.scheduleUpdateProjection(), this.isProjectionDirty = !0;
    }
    setOptions(options) {
      this.options = {
        ...this.options,
        ...options,
        crossfade: options.crossfade !== void 0 ? options.crossfade : !0
      };
    }
    clearMeasurements() {
      this.scroll = void 0, this.layout = void 0, this.snapshot = void 0, this.prevTransformTemplateValue = void 0, this.targetDelta = void 0, this.target = void 0, this.isLayoutDirty = !1;
    }
    forceRelativeParentToResolveTarget() {
      this.relativeParent && this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp && this.relativeParent.resolveTargetDelta(!0);
    }
    resolveTargetDelta(forceRecalculation = !1) {
      var _a;
      let lead = this.getLead();
      this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty), this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty), this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
      let isShared = Boolean(this.resumingFrom) || this !== lead;
      if (!(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || !((_a = this.parent) === null || _a === void 0) && _a.isProjectionDirty || this.attemptToResolveRelativeTarget))
        return;
      let { layout: layout2, layoutId } = this.options;
      if (!(!this.layout || !(layout2 || layoutId))) {
        if (this.resolvedRelativeTargetAt = frameData.timestamp, !this.targetDelta && !this.relativeTarget) {
          let relativeParent = this.getClosestProjectingParent();
          relativeParent && relativeParent.layout && this.animationProgress !== 1 ? (this.relativeParent = relativeParent, this.forceRelativeParentToResolveTarget(), this.relativeTarget = createBox(), this.relativeTargetOrigin = createBox(), calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox), copyBoxInto(this.relativeTarget, this.relativeTargetOrigin)) : this.relativeParent = this.relativeTarget = void 0;
        }
        if (!(!this.relativeTarget && !this.targetDelta)) {
          if (this.target || (this.target = createBox(), this.targetWithTransforms = createBox()), this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target ? (this.forceRelativeParentToResolveTarget(), calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target)) : this.targetDelta ? (Boolean(this.resumingFrom) ? this.target = this.applyTransform(this.layout.layoutBox) : copyBoxInto(this.target, this.layout.layoutBox), applyBoxDelta(this.target, this.targetDelta)) : copyBoxInto(this.target, this.layout.layoutBox), this.attemptToResolveRelativeTarget) {
            this.attemptToResolveRelativeTarget = !1;
            let relativeParent = this.getClosestProjectingParent();
            relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1 ? (this.relativeParent = relativeParent, this.forceRelativeParentToResolveTarget(), this.relativeTarget = createBox(), this.relativeTargetOrigin = createBox(), calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target), copyBoxInto(this.relativeTarget, this.relativeTargetOrigin)) : this.relativeParent = this.relativeTarget = void 0;
          }
          projectionFrameData.resolvedTargetDeltas++;
        }
      }
    }
    getClosestProjectingParent() {
      if (!(!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)))
        return this.parent.isProjecting() ? this.parent : this.parent.getClosestProjectingParent();
    }
    isProjecting() {
      return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);
    }
    calcProjection() {
      var _a;
      let lead = this.getLead(), isShared = Boolean(this.resumingFrom) || this !== lead, canSkip = !0;
      if ((this.isProjectionDirty || !((_a = this.parent) === null || _a === void 0) && _a.isProjectionDirty) && (canSkip = !1), isShared && (this.isSharedProjectionDirty || this.isTransformDirty) && (canSkip = !1), this.resolvedRelativeTargetAt === frameData.timestamp && (canSkip = !1), canSkip)
        return;
      let { layout: layout2, layoutId } = this.options;
      if (this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation), this.isTreeAnimating || (this.targetDelta = this.relativeTarget = void 0), !this.layout || !(layout2 || layoutId))
        return;
      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
      let prevTreeScaleX = this.treeScale.x, prevTreeScaleY = this.treeScale.y;
      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared), lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1) && (lead.target = lead.layout.layoutBox);
      let { target } = lead;
      if (!target) {
        this.projectionTransform && (this.projectionDelta = createDelta(), this.projectionTransform = "none", this.scheduleRender());
        return;
      }
      this.projectionDelta || (this.projectionDelta = createDelta(), this.projectionDeltaWithTransform = createDelta());
      let prevProjectionTransform = this.projectionTransform;
      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues), this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale), (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) && (this.hasProjected = !0, this.scheduleRender(), this.notifyListeners("projectionUpdate", target)), projectionFrameData.recalculatedProjection++;
    }
    hide() {
      this.isVisible = !1;
    }
    show() {
      this.isVisible = !0;
    }
    scheduleRender(notifyAll = !0) {
      if (this.options.scheduleRender && this.options.scheduleRender(), notifyAll) {
        let stack = this.getStack();
        stack && stack.scheduleRender();
      }
      this.resumingFrom && !this.resumingFrom.instance && (this.resumingFrom = void 0);
    }
    setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = !1) {
      let snapshot = this.snapshot, snapshotLatestValues = snapshot ? snapshot.latestValues : {}, mixedValues = { ...this.latestValues }, targetDelta = createDelta();
      (!this.relativeParent || !this.relativeParent.options.layoutRoot) && (this.relativeTarget = this.relativeTargetOrigin = void 0), this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
      let relativeLayout = createBox(), snapshotSource = snapshot ? snapshot.source : void 0, layoutSource = this.layout ? this.layout.source : void 0, isSharedLayoutAnimation = snapshotSource !== layoutSource, stack = this.getStack(), isOnlyMember = !stack || stack.members.length <= 1, shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === !0 && !this.path.some(hasOpacityCrossfade));
      this.animationProgress = 0;
      let prevRelativeTarget;
      this.mixTargetDelta = (latest) => {
        let progress2 = latest / 1e3;
        mixAxisDelta(targetDelta.x, delta.x, progress2), mixAxisDelta(targetDelta.y, delta.y, progress2), this.setTargetDelta(targetDelta), this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout && (calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox), mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress2), prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget) && (this.isProjectionDirty = !1), prevRelativeTarget || (prevRelativeTarget = createBox()), copyBoxInto(prevRelativeTarget, this.relativeTarget)), isSharedLayoutAnimation && (this.animationValues = mixedValues, mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress2, shouldCrossfadeOpacity, isOnlyMember)), this.root.scheduleUpdateProjection(), this.scheduleRender(), this.animationProgress = progress2;
      }, this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);
    }
    startAnimation(options) {
      this.notifyListeners("animationStart"), this.currentAnimation && this.currentAnimation.stop(), this.resumingFrom && this.resumingFrom.currentAnimation && this.resumingFrom.currentAnimation.stop(), this.pendingAnimation && (cancelFrame(this.pendingAnimation), this.pendingAnimation = void 0), this.pendingAnimation = frame.update(() => {
        globalProjectionState.hasAnimatedSinceResize = !0, this.currentAnimation = animateSingleValue(0, animationTarget, {
          ...options,
          onUpdate: (latest) => {
            this.mixTargetDelta(latest), options.onUpdate && options.onUpdate(latest);
          },
          onComplete: () => {
            options.onComplete && options.onComplete(), this.completeAnimation();
          }
        }), this.resumingFrom && (this.resumingFrom.currentAnimation = this.currentAnimation), this.pendingAnimation = void 0;
      });
    }
    completeAnimation() {
      this.resumingFrom && (this.resumingFrom.currentAnimation = void 0, this.resumingFrom.preserveOpacity = void 0);
      let stack = this.getStack();
      stack && stack.exitAnimationComplete(), this.resumingFrom = this.currentAnimation = this.animationValues = void 0, this.notifyListeners("animationComplete");
    }
    finishAnimation() {
      this.currentAnimation && (this.mixTargetDelta && this.mixTargetDelta(animationTarget), this.currentAnimation.stop()), this.completeAnimation();
    }
    applyTransformsToTarget() {
      let lead = this.getLead(), { targetWithTransforms, target, layout: layout2, latestValues } = lead;
      if (!(!targetWithTransforms || !target || !layout2)) {
        if (this !== lead && this.layout && layout2 && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout2.layoutBox)) {
          target = this.target || createBox();
          let xLength = calcLength(this.layout.layoutBox.x);
          target.x.min = lead.target.x.min, target.x.max = target.x.min + xLength;
          let yLength = calcLength(this.layout.layoutBox.y);
          target.y.min = lead.target.y.min, target.y.max = target.y.min + yLength;
        }
        copyBoxInto(targetWithTransforms, target), transformBox(targetWithTransforms, latestValues), calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
      }
    }
    registerSharedNode(layoutId, node) {
      this.sharedNodes.has(layoutId) || this.sharedNodes.set(layoutId, new NodeStack()), this.sharedNodes.get(layoutId).add(node);
      let config = node.options.initialPromotionConfig;
      node.promote({
        transition: config ? config.transition : void 0,
        preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : void 0
      });
    }
    isLead() {
      let stack = this.getStack();
      return stack ? stack.lead === this : !0;
    }
    getLead() {
      var _a;
      let { layoutId } = this.options;
      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;
    }
    getPrevLead() {
      var _a;
      let { layoutId } = this.options;
      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : void 0;
    }
    getStack() {
      let { layoutId } = this.options;
      if (layoutId)
        return this.root.sharedNodes.get(layoutId);
    }
    promote({ needsReset, transition, preserveFollowOpacity } = {}) {
      let stack = this.getStack();
      stack && stack.promote(this, preserveFollowOpacity), needsReset && (this.projectionDelta = void 0, this.needsReset = !0), transition && this.setOptions({ transition });
    }
    relegate() {
      let stack = this.getStack();
      return stack ? stack.relegate(this) : !1;
    }
    resetRotation() {
      let { visualElement } = this.options;
      if (!visualElement)
        return;
      let hasRotate = !1, { latestValues } = visualElement;
      if ((latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) && (hasRotate = !0), !hasRotate)
        return;
      let resetValues = {};
      for (let i13 = 0; i13 < transformAxes.length; i13++) {
        let key = "rotate" + transformAxes[i13];
        latestValues[key] && (resetValues[key] = latestValues[key], visualElement.setStaticValue(key, 0));
      }
      visualElement.render();
      for (let key in resetValues)
        visualElement.setStaticValue(key, resetValues[key]);
      visualElement.scheduleRender();
    }
    getProjectionStyles(styleProp = {}) {
      var _a, _b;
      let styles = {};
      if (!this.instance || this.isSVG)
        return styles;
      if (this.isVisible)
        styles.visibility = "";
      else
        return { visibility: "hidden" };
      let transformTemplate = this.getTransformTemplate();
      if (this.needsReset)
        return this.needsReset = !1, styles.opacity = "", styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "", styles.transform = transformTemplate ? transformTemplate(this.latestValues, "") : "none", styles;
      let lead = this.getLead();
      if (!this.projectionDelta || !this.layout || !lead.target) {
        let emptyStyles = {};
        return this.options.layoutId && (emptyStyles.opacity = this.latestValues.opacity !== void 0 ? this.latestValues.opacity : 1, emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || ""), this.hasProjected && !hasTransform(this.latestValues) && (emptyStyles.transform = transformTemplate ? transformTemplate({}, "") : "none", this.hasProjected = !1), emptyStyles;
      }
      let valuesToRender = lead.animationValues || lead.latestValues;
      this.applyTransformsToTarget(), styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender), transformTemplate && (styles.transform = transformTemplate(valuesToRender, styles.transform));
      let { x, y } = this.projectionDelta;
      styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`, lead.animationValues ? styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit : styles.opacity = lead === this ? valuesToRender.opacity !== void 0 ? valuesToRender.opacity : "" : valuesToRender.opacityExit !== void 0 ? valuesToRender.opacityExit : 0;
      for (let key in scaleCorrectors) {
        if (valuesToRender[key] === void 0)
          continue;
        let { correct, applyTo } = scaleCorrectors[key], corrected = styles.transform === "none" ? valuesToRender[key] : correct(valuesToRender[key], lead);
        if (applyTo) {
          let num = applyTo.length;
          for (let i13 = 0; i13 < num; i13++)
            styles[applyTo[i13]] = corrected;
        } else
          styles[key] = corrected;
      }
      return this.options.layoutId && (styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || "" : "none"), styles;
    }
    clearSnapshot() {
      this.resumeFrom = this.snapshot = void 0;
    }
    // Only run on root
    resetTree() {
      this.root.nodes.forEach((node) => {
        var _a;
        return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();
      }), this.root.nodes.forEach(clearMeasurements), this.root.sharedNodes.clear();
    }
  };
}
function updateLayout(node) {
  node.updateLayout();
}
function notifyLayoutUpdate(node) {
  var _a;
  let snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;
  if (node.isLead() && node.layout && snapshot && node.hasListeners("didUpdate")) {
    let { layoutBox: layout2, measuredBox: measuredLayout } = node.layout, { animationType } = node.options, isShared = snapshot.source !== node.layout.source;
    animationType === "size" ? eachAxis((axis) => {
      let axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis], length = calcLength(axisSnapshot);
      axisSnapshot.min = layout2[axis].min, axisSnapshot.max = axisSnapshot.min + length;
    }) : shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout2) && eachAxis((axis) => {
      let axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis], length = calcLength(layout2[axis]);
      axisSnapshot.max = axisSnapshot.min + length, node.relativeTarget && !node.currentAnimation && (node.isProjectionDirty = !0, node.relativeTarget[axis].max = node.relativeTarget[axis].min + length);
    });
    let layoutDelta = createDelta();
    calcBoxDelta(layoutDelta, layout2, snapshot.layoutBox);
    let visualDelta = createDelta();
    isShared ? calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, !0), snapshot.measuredBox) : calcBoxDelta(visualDelta, layout2, snapshot.layoutBox);
    let hasLayoutChanged = !isDeltaZero(layoutDelta), hasRelativeTargetChanged = !1;
    if (!node.resumeFrom) {
      let relativeParent = node.getClosestProjectingParent();
      if (relativeParent && !relativeParent.resumeFrom) {
        let { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;
        if (parentSnapshot && parentLayout) {
          let relativeSnapshot = createBox();
          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);
          let relativeLayout = createBox();
          calcRelativePosition(relativeLayout, layout2, parentLayout.layoutBox), boxEquals(relativeSnapshot, relativeLayout) || (hasRelativeTargetChanged = !0), relativeParent.options.layoutRoot && (node.relativeTarget = relativeLayout, node.relativeTargetOrigin = relativeSnapshot, node.relativeParent = relativeParent);
        }
      }
    }
    node.notifyListeners("didUpdate", {
      layout: layout2,
      snapshot,
      delta: visualDelta,
      layoutDelta,
      hasLayoutChanged,
      hasRelativeTargetChanged
    });
  } else if (node.isLead()) {
    let { onExitComplete } = node.options;
    onExitComplete && onExitComplete();
  }
  node.options.transition = void 0;
}
function propagateDirtyNodes(node) {
  projectionFrameData.totalNodes++, node.parent && (node.isProjecting() || (node.isProjectionDirty = node.parent.isProjectionDirty), node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty)), node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty));
}
function cleanDirtyNodes(node) {
  node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = !1;
}
function clearSnapshot(node) {
  node.clearSnapshot();
}
function clearMeasurements(node) {
  node.clearMeasurements();
}
function clearIsLayoutDirty(node) {
  node.isLayoutDirty = !1;
}
function resetTransformStyle(node) {
  let { visualElement } = node.options;
  visualElement && visualElement.getProps().onBeforeLayoutMeasure && visualElement.notify("BeforeLayoutMeasure"), node.resetTransform();
}
function finishAnimation(node) {
  node.finishAnimation(), node.targetDelta = node.relativeTarget = node.target = void 0, node.isProjectionDirty = !0;
}
function resolveTargetDelta(node) {
  node.resolveTargetDelta();
}
function calcProjection(node) {
  node.calcProjection();
}
function resetRotation(node) {
  node.resetRotation();
}
function removeLeadSnapshots(stack) {
  stack.removeLeadSnapshot();
}
function mixAxisDelta(output, delta, p) {
  output.translate = mix(delta.translate, 0, p), output.scale = mix(delta.scale, 1, p), output.origin = delta.origin, output.originPoint = delta.originPoint;
}
function mixAxis(output, from, to, p) {
  output.min = mix(from.min, to.min, p), output.max = mix(from.max, to.max, p);
}
function mixBox(output, from, to, p) {
  mixAxis(output.x, from.x, to.x, p), mixAxis(output.y, from.y, to.y, p);
}
function hasOpacityCrossfade(node) {
  return node.animationValues && node.animationValues.opacityExit !== void 0;
}
var defaultLayoutTransition = {
  duration: 0.45,
  ease: [0.4, 0, 0.1, 1]
};
function roundAxis(axis) {
  axis.min = Math.round(axis.min), axis.max = Math.round(axis.max);
}
function roundBox(box) {
  roundAxis(box.x), roundAxis(box.y);
}
function shouldAnimatePositionOnly(animationType, snapshot, layout2) {
  return animationType === "position" || animationType === "preserve-aspect" && !isNear(aspectRatio(snapshot), aspectRatio(layout2), 0.2);
}

// ../../../node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs
var DocumentProjectionNode = createProjectionNode({
  attachResizeListener: (ref, notify2) => addDomEvent(ref, "resize", notify2),
  measureScroll: () => ({
    x: document.documentElement.scrollLeft || document.body.scrollLeft,
    y: document.documentElement.scrollTop || document.body.scrollTop
  }),
  checkIsScrollRoot: () => !0
});

// ../../../node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs
var rootProjectionNode = {
  current: void 0
}, HTMLProjectionNode = createProjectionNode({
  measureScroll: (instance) => ({
    x: instance.scrollLeft,
    y: instance.scrollTop
  }),
  defaultParent: () => {
    if (!rootProjectionNode.current) {
      let documentNode = new DocumentProjectionNode({});
      documentNode.mount(window), documentNode.setOptions({ layoutScroll: !0 }), rootProjectionNode.current = documentNode;
    }
    return rootProjectionNode.current;
  },
  resetTransform: (instance, value) => {
    instance.style.transform = value !== void 0 ? value : "none";
  },
  checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === "fixed")
});

// ../../../node_modules/framer-motion/dist/es/motion/features/drag.mjs
var drag = {
  pan: {
    Feature: PanGesture
  },
  drag: {
    Feature: DragGesture,
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout
  }
};

// ../../../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs
var splitCSSVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function parseCSSVariable(current) {
  let match = splitCSSVariableRegex.exec(current);
  if (!match)
    return [,];
  let [, token, fallback] = match;
  return [token, fallback];
}
var maxDepth = 4;
function getVariableValue(current, element, depth = 1) {
  invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property "${current}". This may indicate a circular fallback dependency.`);
  let [token, fallback] = parseCSSVariable(current);
  if (!token)
    return;
  let resolved = window.getComputedStyle(element).getPropertyValue(token);
  return resolved ? resolved.trim() : isCSSVariableToken(fallback) ? getVariableValue(fallback, element, depth + 1) : fallback;
}
function resolveCSSVariables(visualElement, { ...target }, transitionEnd) {
  let element = visualElement.current;
  if (!(element instanceof Element))
    return { target, transitionEnd };
  transitionEnd && (transitionEnd = { ...transitionEnd }), visualElement.values.forEach((value) => {
    let current = value.get();
    if (!isCSSVariableToken(current))
      return;
    let resolved = getVariableValue(current, element);
    resolved && value.set(resolved);
  });
  for (let key in target) {
    let current = target[key];
    if (!isCSSVariableToken(current))
      continue;
    let resolved = getVariableValue(current, element);
    resolved && (target[key] = resolved, transitionEnd || (transitionEnd = {}), transitionEnd[key] === void 0 && (transitionEnd[key] = current));
  }
  return { target, transitionEnd };
}

// ../../../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs
var positionalKeys = /* @__PURE__ */ new Set([
  "width",
  "height",
  "top",
  "left",
  "right",
  "bottom",
  "x",
  "y",
  "translateX",
  "translateY"
]), isPositionalKey = (key) => positionalKeys.has(key), hasPositionalKey = (target) => Object.keys(target).some(isPositionalKey), isNumOrPxType = (v) => v === number || v === px, getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(", ")[pos]), getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {
  if (transform === "none" || !transform)
    return 0;
  let matrix3d = transform.match(/^matrix3d\((.+)\)$/);
  if (matrix3d)
    return getPosFromMatrix(matrix3d[1], pos3);
  {
    let matrix = transform.match(/^matrix\((.+)\)$/);
    return matrix ? getPosFromMatrix(matrix[1], pos2) : 0;
  }
}, transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]), nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));
function removeNonTranslationalTransform(visualElement) {
  let removedTransforms = [];
  return nonTranslationalTransformKeys.forEach((key) => {
    let value = visualElement.getValue(key);
    value !== void 0 && (removedTransforms.push([key, value.get()]), value.set(key.startsWith("scale") ? 1 : 0));
  }), removedTransforms.length && visualElement.render(), removedTransforms;
}
var positionalValues = {
  // Dimensions
  width: ({ x }, { paddingLeft = "0", paddingRight = "0" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
  height: ({ y }, { paddingTop = "0", paddingBottom = "0" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
  top: (_bbox, { top }) => parseFloat(top),
  left: (_bbox, { left }) => parseFloat(left),
  bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),
  right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),
  // Transform
  x: getTranslateFromMatrix(4, 13),
  y: getTranslateFromMatrix(5, 14)
}, convertChangedValueTypes = (target, visualElement, changedKeys) => {
  let originBbox = visualElement.measureViewportBox(), element = visualElement.current, elementComputedStyle = getComputedStyle(element), { display } = elementComputedStyle, origin = {};
  display === "none" && visualElement.setStaticValue("display", target.display || "block"), changedKeys.forEach((key) => {
    origin[key] = positionalValues[key](originBbox, elementComputedStyle);
  }), visualElement.render();
  let targetBbox = visualElement.measureViewportBox();
  return changedKeys.forEach((key) => {
    let value = visualElement.getValue(key);
    value && value.jump(origin[key]), target[key] = positionalValues[key](targetBbox, elementComputedStyle);
  }), target;
}, checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {
  target = { ...target }, transitionEnd = { ...transitionEnd };
  let targetPositionalKeys = Object.keys(target).filter(isPositionalKey), removedTransformValues = [], hasAttemptedToRemoveTransformValues = !1, changedValueTypeKeys = [];
  if (targetPositionalKeys.forEach((key) => {
    let value = visualElement.getValue(key);
    if (!visualElement.hasValue(key))
      return;
    let from = origin[key], fromType = findDimensionValueType(from), to = target[key], toType;
    if (isKeyframesTarget(to)) {
      let numKeyframes = to.length, fromIndex = to[0] === null ? 1 : 0;
      from = to[fromIndex], fromType = findDimensionValueType(from);
      for (let i13 = fromIndex; i13 < numKeyframes && to[i13] !== null; i13++)
        toType ? invariant(findDimensionValueType(to[i13]) === toType, "All keyframes must be of the same type") : (toType = findDimensionValueType(to[i13]), invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value"));
    } else
      toType = findDimensionValueType(to);
    if (fromType !== toType)
      if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
        let current = value.get();
        typeof current == "string" && value.set(parseFloat(current)), typeof to == "string" ? target[key] = parseFloat(to) : Array.isArray(to) && toType === px && (target[key] = to.map(parseFloat));
      } else
        fromType != null && fromType.transform && (toType != null && toType.transform) && (from === 0 || to === 0) ? from === 0 ? value.set(toType.transform(from)) : target[key] = fromType.transform(to) : (hasAttemptedToRemoveTransformValues || (removedTransformValues = removeNonTranslationalTransform(visualElement), hasAttemptedToRemoveTransformValues = !0), changedValueTypeKeys.push(key), transitionEnd[key] = transitionEnd[key] !== void 0 ? transitionEnd[key] : target[key], value.jump(to));
  }), changedValueTypeKeys.length) {
    let scrollY = changedValueTypeKeys.indexOf("height") >= 0 ? window.pageYOffset : null, convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);
    return removedTransformValues.length && removedTransformValues.forEach(([key, value]) => {
      visualElement.getValue(key).set(value);
    }), visualElement.render(), isBrowser && scrollY !== null && window.scrollTo({ top: scrollY }), { target: convertedTarget, transitionEnd };
  } else
    return { target, transitionEnd };
};
function unitConversion(visualElement, target, origin, transitionEnd) {
  return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd) : { target, transitionEnd };
}

// ../../../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs
var parseDomVariant = (visualElement, target, origin, transitionEnd) => {
  let resolved = resolveCSSVariables(visualElement, target, transitionEnd);
  return target = resolved.target, transitionEnd = resolved.transitionEnd, unitConversion(visualElement, target, origin, transitionEnd);
};

// ../../../node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs
var prefersReducedMotion = { current: null }, hasReducedMotionListener = { current: !1 };

// ../../../node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs
function initPrefersReducedMotion() {
  if (hasReducedMotionListener.current = !0, !!isBrowser)
    if (window.matchMedia) {
      let motionMediaQuery = window.matchMedia("(prefers-reduced-motion)"), setReducedMotionPreferences = () => prefersReducedMotion.current = motionMediaQuery.matches;
      motionMediaQuery.addListener(setReducedMotionPreferences), setReducedMotionPreferences();
    } else
      prefersReducedMotion.current = !1;
}

// ../../../node_modules/framer-motion/dist/es/render/utils/motion-values.mjs
function updateMotionValuesFromProps(element, next, prev) {
  let { willChange } = next;
  for (let key in next) {
    let nextValue = next[key], prevValue = prev[key];
    if (isMotionValue(nextValue))
      element.addValue(key, nextValue), isWillChangeMotionValue(willChange) && willChange.add(key), warnOnce(nextValue.version === "10.12.17", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.12.17 may not work as expected.`);
    else if (isMotionValue(prevValue))
      element.addValue(key, motionValue(nextValue, { owner: element })), isWillChangeMotionValue(willChange) && willChange.remove(key);
    else if (prevValue !== nextValue)
      if (element.hasValue(key)) {
        let existingValue = element.getValue(key);
        !existingValue.hasAnimated && existingValue.set(nextValue);
      } else {
        let latestValue = element.getStaticValue(key);
        element.addValue(key, motionValue(latestValue !== void 0 ? latestValue : nextValue, { owner: element }));
      }
  }
  for (let key in prev)
    next[key] === void 0 && element.removeValue(key);
  return next;
}

// ../../../node_modules/framer-motion/dist/es/render/store.mjs
var visualElementStore = /* @__PURE__ */ new WeakMap();

// ../../../node_modules/framer-motion/dist/es/render/VisualElement.mjs
var featureNames = Object.keys(featureDefinitions), numFeatures = featureNames.length, propEventHandlers = [
  "AnimationStart",
  "AnimationComplete",
  "Update",
  "BeforeLayoutMeasure",
  "LayoutMeasure",
  "LayoutAnimationStart",
  "LayoutAnimationComplete"
], numVariantProps = variantProps.length, VisualElement = class {
  constructor({ parent, props, presenceContext, reducedMotionConfig, visualState }, options = {}) {
    this.current = null, this.children = /* @__PURE__ */ new Set(), this.isVariantNode = !1, this.isControllingVariants = !1, this.shouldReduceMotion = null, this.values = /* @__PURE__ */ new Map(), this.features = {}, this.valueSubscriptions = /* @__PURE__ */ new Map(), this.prevMotionValues = {}, this.events = {}, this.propEventSubscriptions = {}, this.notifyUpdate = () => this.notify("Update", this.latestValues), this.render = () => {
      this.current && (this.triggerBuild(), this.renderInstance(this.current, this.renderState, this.props.style, this.projection));
    }, this.scheduleRender = () => frame.render(this.render, !1, !0);
    let { latestValues, renderState } = visualState;
    this.latestValues = latestValues, this.baseTarget = { ...latestValues }, this.initialValues = props.initial ? { ...latestValues } : {}, this.renderState = renderState, this.parent = parent, this.props = props, this.presenceContext = presenceContext, this.depth = parent ? parent.depth + 1 : 0, this.reducedMotionConfig = reducedMotionConfig, this.options = options, this.isControllingVariants = isControllingVariants(props), this.isVariantNode = isVariantNode(props), this.isVariantNode && (this.variantChildren = /* @__PURE__ */ new Set()), this.manuallyAnimateOnMount = Boolean(parent && parent.current);
    let { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});
    for (let key in initialMotionValues) {
      let value = initialMotionValues[key];
      latestValues[key] !== void 0 && isMotionValue(value) && (value.set(latestValues[key], !1), isWillChangeMotionValue(willChange) && willChange.add(key));
    }
  }
  /**
   * This method takes React props and returns found MotionValues. For example, HTML
   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
   *
   * This isn't an abstract method as it needs calling in the constructor, but it is
   * intended to be one.
   */
  scrapeMotionValuesFromProps(_props, _prevProps) {
    return {};
  }
  mount(instance) {
    this.current = instance, visualElementStore.set(instance, this), this.projection && !this.projection.instance && this.projection.mount(instance), this.parent && this.isVariantNode && !this.isControllingVariants && (this.removeFromVariantTree = this.parent.addVariantChild(this)), this.values.forEach((value, key) => this.bindToMotionValue(key, value)), hasReducedMotionListener.current || initPrefersReducedMotion(), this.shouldReduceMotion = this.reducedMotionConfig === "never" ? !1 : this.reducedMotionConfig === "always" ? !0 : prefersReducedMotion.current, warnOnce(this.shouldReduceMotion !== !0, "You have Reduced Motion enabled on your device. Animations may not appear as expected."), this.parent && this.parent.children.add(this), this.update(this.props, this.presenceContext);
  }
  unmount() {
    visualElementStore.delete(this.current), this.projection && this.projection.unmount(), cancelFrame(this.notifyUpdate), cancelFrame(this.render), this.valueSubscriptions.forEach((remove) => remove()), this.removeFromVariantTree && this.removeFromVariantTree(), this.parent && this.parent.children.delete(this);
    for (let key in this.events)
      this.events[key].clear();
    for (let key in this.features)
      this.features[key].unmount();
    this.current = null;
  }
  bindToMotionValue(key, value) {
    let valueIsTransform = transformProps.has(key), removeOnChange = value.on("change", (latestValue) => {
      this.latestValues[key] = latestValue, this.props.onUpdate && frame.update(this.notifyUpdate, !1, !0), valueIsTransform && this.projection && (this.projection.isTransformDirty = !0);
    }), removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
    this.valueSubscriptions.set(key, () => {
      removeOnChange(), removeOnRenderRequest();
    });
  }
  sortNodePosition(other) {
    return !this.current || !this.sortInstanceNodePosition || this.type !== other.type ? 0 : this.sortInstanceNodePosition(this.current, other.current);
  }
  loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures2, initialLayoutGroupConfig) {
    let ProjectionNodeConstructor, MeasureLayout2;
    if (preloadedFeatures2 && isStrict) {
      let strictMessage = "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";
      renderedProps.ignoreStrict ? warning(!1, strictMessage) : invariant(!1, strictMessage);
    }
    for (let i13 = 0; i13 < numFeatures; i13++) {
      let name = featureNames[i13], { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent } = featureDefinitions[name];
      ProjectionNode && (ProjectionNodeConstructor = ProjectionNode), isEnabled(renderedProps) && (!this.features[name] && FeatureConstructor && (this.features[name] = new FeatureConstructor(this)), MeasureLayoutComponent && (MeasureLayout2 = MeasureLayoutComponent));
    }
    if (!this.projection && ProjectionNodeConstructor) {
      this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);
      let { layoutId, layout: layout2, drag: drag2, dragConstraints, layoutScroll, layoutRoot } = renderedProps;
      this.projection.setOptions({
        layoutId,
        layout: layout2,
        alwaysMeasureLayout: Boolean(drag2) || dragConstraints && isRefObject(dragConstraints),
        visualElement: this,
        scheduleRender: () => this.scheduleRender(),
        /**
         * TODO: Update options in an effect. This could be tricky as it'll be too late
         * to update by the time layout animations run.
         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
         * ensuring it gets called if there's no potential layout animations.
         *
         */
        animationType: typeof layout2 == "string" ? layout2 : "both",
        initialPromotionConfig: initialLayoutGroupConfig,
        layoutScroll,
        layoutRoot
      });
    }
    return MeasureLayout2;
  }
  updateFeatures() {
    for (let key in this.features) {
      let feature = this.features[key];
      feature.isMounted ? feature.update() : (feature.mount(), feature.isMounted = !0);
    }
  }
  triggerBuild() {
    this.build(this.renderState, this.latestValues, this.options, this.props);
  }
  /**
   * Measure the current viewport box with or without transforms.
   * Only measures axis-aligned boxes, rotate and skew must be manually
   * removed with a re-render to work.
   */
  measureViewportBox() {
    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();
  }
  getStaticValue(key) {
    return this.latestValues[key];
  }
  setStaticValue(key, value) {
    this.latestValues[key] = value;
  }
  /**
   * Make a target animatable by Popmotion. For instance, if we're
   * trying to animate width from 100px to 100vw we need to measure 100vw
   * in pixels to determine what we really need to animate to. This is also
   * pluggable to support Framer's custom value types like Color,
   * and CSS variables.
   */
  makeTargetAnimatable(target, canMutate = !0) {
    return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);
  }
  /**
   * Update the provided props. Ensure any newly-added motion values are
   * added to our map, old ones removed, and listeners updated.
   */
  update(props, presenceContext) {
    (props.transformTemplate || this.props.transformTemplate) && this.scheduleRender(), this.prevProps = this.props, this.props = props, this.prevPresenceContext = this.presenceContext, this.presenceContext = presenceContext;
    for (let i13 = 0; i13 < propEventHandlers.length; i13++) {
      let key = propEventHandlers[i13];
      this.propEventSubscriptions[key] && (this.propEventSubscriptions[key](), delete this.propEventSubscriptions[key]);
      let listener = props["on" + key];
      listener && (this.propEventSubscriptions[key] = this.on(key, listener));
    }
    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues), this.handleChildMotionValue && this.handleChildMotionValue();
  }
  getProps() {
    return this.props;
  }
  /**
   * Returns the variant definition with a given name.
   */
  getVariant(name) {
    return this.props.variants ? this.props.variants[name] : void 0;
  }
  /**
   * Returns the defined default transition on this component.
   */
  getDefaultTransition() {
    return this.props.transition;
  }
  getTransformPagePoint() {
    return this.props.transformPagePoint;
  }
  getClosestVariantNode() {
    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
  }
  getVariantContext(startAtParent = !1) {
    if (startAtParent)
      return this.parent ? this.parent.getVariantContext() : void 0;
    if (!this.isControllingVariants) {
      let context2 = this.parent ? this.parent.getVariantContext() || {} : {};
      return this.props.initial !== void 0 && (context2.initial = this.props.initial), context2;
    }
    let context = {};
    for (let i13 = 0; i13 < numVariantProps; i13++) {
      let name = variantProps[i13], prop = this.props[name];
      (isVariantLabel(prop) || prop === !1) && (context[name] = prop);
    }
    return context;
  }
  /**
   * Add a child visual element to our set of children.
   */
  addVariantChild(child) {
    let closestVariantNode = this.getClosestVariantNode();
    if (closestVariantNode)
      return closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child), () => closestVariantNode.variantChildren.delete(child);
  }
  /**
   * Add a motion value and bind it to this visual element.
   */
  addValue(key, value) {
    value !== this.values.get(key) && (this.removeValue(key), this.bindToMotionValue(key, value)), this.values.set(key, value), this.latestValues[key] = value.get();
  }
  /**
   * Remove a motion value and unbind any active subscriptions.
   */
  removeValue(key) {
    this.values.delete(key);
    let unsubscribe = this.valueSubscriptions.get(key);
    unsubscribe && (unsubscribe(), this.valueSubscriptions.delete(key)), delete this.latestValues[key], this.removeValueFromRenderState(key, this.renderState);
  }
  /**
   * Check whether we have a motion value for this key
   */
  hasValue(key) {
    return this.values.has(key);
  }
  getValue(key, defaultValue) {
    if (this.props.values && this.props.values[key])
      return this.props.values[key];
    let value = this.values.get(key);
    return value === void 0 && defaultValue !== void 0 && (value = motionValue(defaultValue, { owner: this }), this.addValue(key, value)), value;
  }
  /**
   * If we're trying to animate to a previously unencountered value,
   * we need to check for it in our state and as a last resort read it
   * directly from the instance (which might have performance implications).
   */
  readValue(key) {
    return this.latestValues[key] !== void 0 || !this.current ? this.latestValues[key] : this.readValueFromInstance(this.current, key, this.options);
  }
  /**
   * Set the base target to later animate back to. This is currently
   * only hydrated on creation and when we first read a value.
   */
  setBaseTarget(key, value) {
    this.baseTarget[key] = value;
  }
  /**
   * Find the base target for a value thats been removed from all animation
   * props.
   */
  getBaseTarget(key) {
    var _a;
    let { initial } = this.props, valueFromInitial = typeof initial == "string" || typeof initial == "object" ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key] : void 0;
    if (initial && valueFromInitial !== void 0)
      return valueFromInitial;
    let target = this.getBaseTargetFromProps(this.props, key);
    return target !== void 0 && !isMotionValue(target) ? target : this.initialValues[key] !== void 0 && valueFromInitial === void 0 ? void 0 : this.baseTarget[key];
  }
  on(eventName, callback) {
    return this.events[eventName] || (this.events[eventName] = new SubscriptionManager()), this.events[eventName].add(callback);
  }
  notify(eventName, ...args) {
    this.events[eventName] && this.events[eventName].notify(...args);
  }
};

// ../../../node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs
var DOMVisualElement = class extends VisualElement {
  sortInstanceNodePosition(a9, b) {
    return a9.compareDocumentPosition(b) & 2 ? 1 : -1;
  }
  getBaseTargetFromProps(props, key) {
    return props.style ? props.style[key] : void 0;
  }
  removeValueFromRenderState(key, { vars, style }) {
    delete vars[key], delete style[key];
  }
  makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {
    let origin = getOrigin(target, transition || {}, this);
    if (transformValues && (transitionEnd && (transitionEnd = transformValues(transitionEnd)), target && (target = transformValues(target)), origin && (origin = transformValues(origin))), isMounted) {
      checkTargetForNewValues(this, target, origin);
      let parsed = parseDomVariant(this, target, origin, transitionEnd);
      transitionEnd = parsed.transitionEnd, target = parsed.target;
    }
    return {
      transition,
      transitionEnd,
      ...target
    };
  }
};

// ../../../node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs
function getComputedStyle2(element) {
  return window.getComputedStyle(element);
}
var HTMLVisualElement = class extends DOMVisualElement {
  readValueFromInstance(instance, key) {
    if (transformProps.has(key)) {
      let defaultType = getDefaultValueType(key);
      return defaultType && defaultType.default || 0;
    } else {
      let computedStyle = getComputedStyle2(instance), value = (isCSSVariableName(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
      return typeof value == "string" ? value.trim() : value;
    }
  }
  measureInstanceViewportBox(instance, { transformPagePoint }) {
    return measureViewportBox(instance, transformPagePoint);
  }
  build(renderState, latestValues, options, props) {
    buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);
  }
  scrapeMotionValuesFromProps(props, prevProps) {
    return scrapeMotionValuesFromProps(props, prevProps);
  }
  handleChildMotionValue() {
    this.childSubscription && (this.childSubscription(), delete this.childSubscription);
    let { children } = this.props;
    isMotionValue(children) && (this.childSubscription = children.on("change", (latest) => {
      this.current && (this.current.textContent = `${latest}`);
    }));
  }
  renderInstance(instance, renderState, styleProp, projection) {
    renderHTML(instance, renderState, styleProp, projection);
  }
};

// ../../../node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs
var SVGVisualElement = class extends DOMVisualElement {
  constructor() {
    super(...arguments), this.isSVGTag = !1;
  }
  getBaseTargetFromProps(props, key) {
    return props[key];
  }
  readValueFromInstance(instance, key) {
    if (transformProps.has(key)) {
      let defaultType = getDefaultValueType(key);
      return defaultType && defaultType.default || 0;
    }
    return key = camelCaseAttributes.has(key) ? key : camelToDash(key), instance.getAttribute(key);
  }
  measureInstanceViewportBox() {
    return createBox();
  }
  scrapeMotionValuesFromProps(props, prevProps) {
    return scrapeMotionValuesFromProps2(props, prevProps);
  }
  build(renderState, latestValues, options, props) {
    buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);
  }
  renderInstance(instance, renderState, styleProp, projection) {
    renderSVG(instance, renderState, styleProp, projection);
  }
  mount(instance) {
    this.isSVGTag = isSVGTag(instance.tagName), super.mount(instance);
  }
};

// ../../../node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
var createDomVisualElement = (Component, options) => isSVGComponent(Component) ? new SVGVisualElement(options, { enableHardwareAcceleration: !1 }) : new HTMLVisualElement(options, { enableHardwareAcceleration: !0 });

// ../../../node_modules/framer-motion/dist/es/motion/features/layout.mjs
var layout = {
  layout: {
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout
  }
};

// ../../../node_modules/framer-motion/dist/es/render/dom/motion.mjs
var preloadedFeatures = {
  ...animations,
  ...gestureAnimations,
  ...drag,
  ...layout
}, motion = /* @__PURE__ */ createMotionProxy((Component, config) => createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement));

// ../../../node_modules/framer-motion/dist/es/utils/use-force-update.mjs
var import_react26 = __toESM(require_react(), 1);

// ../../../node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs
var import_react25 = __toESM(require_react(), 1);
function useIsMounted() {
  let isMounted = (0, import_react25.useRef)(!1);
  return useIsomorphicLayoutEffect(() => (isMounted.current = !0, () => {
    isMounted.current = !1;
  }), []), isMounted;
}

// ../../../node_modules/framer-motion/dist/es/utils/use-force-update.mjs
function useForceUpdate() {
  let isMounted = useIsMounted(), [forcedRenderCount, setForcedRenderCount] = (0, import_react26.useState)(0), forceRender = (0, import_react26.useCallback)(() => {
    isMounted.current && setForcedRenderCount(forcedRenderCount + 1);
  }, [forcedRenderCount]);
  return [(0, import_react26.useCallback)(() => frame.postRender(forceRender), [forceRender]), forcedRenderCount];
}

// ../../../node_modules/framer-motion/dist/es/components/LayoutGroup/index.mjs
var React2 = __toESM(require_react(), 1), import_react28 = __toESM(require_react(), 1);

// ../../../node_modules/framer-motion/dist/es/context/DeprecatedLayoutGroupContext.mjs
var import_react27 = __toESM(require_react(), 1), DeprecatedLayoutGroupContext = (0, import_react27.createContext)(null);

// ../../../node_modules/framer-motion/dist/es/projection/node/group.mjs
var notify = (node) => !node.isLayoutDirty && node.willUpdate(!1);
function nodeGroup() {
  let nodes = /* @__PURE__ */ new Set(), subscriptions = /* @__PURE__ */ new WeakMap(), dirtyAll = () => nodes.forEach(notify);
  return {
    add: (node) => {
      nodes.add(node), subscriptions.set(node, node.addEventListener("willUpdate", dirtyAll));
    },
    remove: (node) => {
      nodes.delete(node);
      let unsubscribe = subscriptions.get(node);
      unsubscribe && (unsubscribe(), subscriptions.delete(node)), dirtyAll();
    },
    dirty: dirtyAll
  };
}

// ../../../node_modules/framer-motion/dist/es/components/LayoutGroup/index.mjs
var shouldInheritGroup = (inherit) => inherit === !0, shouldInheritId = (inherit) => shouldInheritGroup(inherit === !0) || inherit === "id", LayoutGroup = ({ children, id: id3, inherit = !0 }) => {
  let layoutGroupContext = (0, import_react28.useContext)(LayoutGroupContext), deprecatedLayoutGroupContext = (0, import_react28.useContext)(DeprecatedLayoutGroupContext), [forceRender, key] = useForceUpdate(), context = (0, import_react28.useRef)(null), upstreamId = layoutGroupContext.id || deprecatedLayoutGroupContext;
  context.current === null && (shouldInheritId(inherit) && upstreamId && (id3 = id3 ? upstreamId + "-" + id3 : upstreamId), context.current = {
    id: id3,
    group: shouldInheritGroup(inherit) ? layoutGroupContext.group || nodeGroup() : nodeGroup()
  });
  let memoizedContext = (0, import_react28.useMemo)(() => ({ ...context.current, forceRender }), [key]);
  return React2.createElement(LayoutGroupContext.Provider, { value: memoizedContext }, children);
};

// ../../components/bounce-it.jsx
var import_jsx_dev_runtime3 = __toESM(require_jsx_dev_runtime(), 1), BounceIt = ({
  disable = !1,
  onClick = (_) => {
  },
  className: className2 = "",
  ...etc
}) => disable ? /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)("div", { children: etc.children }, void 0, !1, {
  fileName: "../../components/bounce-it.jsx",
  lineNumber: 10,
  columnNumber: 12
}, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime3.jsxDEV)(
  motion.div,
  {
    tabIndex: -1,
    className: `${className2} inline-block outline-none`,
    initial: { scale: 1 },
    whileTap: { scale: 0.99 },
    onClick,
    ...etc
  },
  void 0,
  !1,
  {
    fileName: "../../components/bounce-it.jsx",
    lineNumber: 13,
    columnNumber: 5
  },
  this
);

// ../../components/atoms/button.jsx
var import_jsx_dev_runtime4 = __toESM(require_jsx_dev_runtime(), 1);
var IconButtonStyles = [
  "outline",
  "basic",
  "plain"
], AriaButton = "button", ButtonBase = (0, import_react29.forwardRef)(({
  variant,
  size: size2 = "medium",
  onClick,
  href,
  label: label2,
  type: type2,
  disabled: disabled2,
  sharpLeft = !1,
  sharpRight = !1,
  noBorder,
  className: className2,
  noRounded,
  noRing,
  IconComp,
  DisclosureComp,
  iconOnly = !1,
  selected = !1,
  ...props
}, ref) => {
  let Component = "button", extraProps = {};
  return extraProps.onClick = onClick, href ? (Component = import_react30.Link, extraProps.to = href) : extraProps.disabled = disabled2, /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(BounceIt, { className: className2, children: /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(
    Component,
    {
      ref,
      type: type2,
      className: (0, import_classnames.default)(
        "w-full",
        {
          "bodyMd-medium": variant !== "primary-plain" && variant !== "secondary-plain" && variant !== "critical-plain" && variant !== "plain",
          bodyMd: variant === "primary-plain" || variant === "secondary-plain" || variant !== "critical-plain" || variant !== "plain"
        },
        "relative ring-offset-1",
        "outline-none shadow-button",
        "flex flex-row gap-2 items-center justify-center",
        "disabled:text-text-disabled",
        {
          ...noRing ? {} : {
            "focus-visible:ring-2 focus:ring-border-focus focus:z-10": !0
          }
        },
        {
          ...noRounded ? {} : {
            "rounded-none": sharpLeft && sharpRight,
            "rounded-r": sharpLeft && !sharpRight,
            "rounded-l": !sharpLeft && sharpRight,
            rounded: !sharpLeft && !sharpRight
          }
        },
        "transition-all",
        "disabled:pointer-events-none",
        {
          ...noBorder ? { "border-none": !0 } : {
            "border-border-default disabled:border-border-disabled": variant === "basic" || variant === "outline" || variant === "secondary-outline",
            "border-border-primary disabled:border-border-disabled": variant === "primary" || variant === "primary-outline",
            "border-border-secondary disabled:border-border-disabled": variant === "secondary",
            "border-border-danger disabled:border-border-disabled": variant === "critical-outline" || variant === "critical",
            "border-none": variant === "plain" || variant === "primary-plain" || variant === "critical-plain" || variant === "secondary-plain",
            border: !(variant === "plain" || variant === "primary-plain" || variant === "critical-plain" || variant === "secondary-plain")
          }
        },
        {
          "bg-surface-default hover:bg-surface-hovered active:bg-surface-pressed": variant === "basic",
          "bg-surface-pressed hover:bg-surface-pressed active:bg-surface-pressed": variant === "basic" && selected,
          "bg-surface-primary-default hover:bg-surface-primary-hovered active:bg-surface-primary-pressed disabled:bg-surface-default": variant === "primary",
          "bg-surface-secondary-default hover:bg-surface-secondary-hovered active:bg-surface-secondary-pressed disabled:bg-surface-default": variant === "secondary",
          "bg-surface-danger-default hover:bg-surface-danger-hovered active:bg-surface-danger-pressed disabled:bg-surface-default": variant === "critical",
          "bg-none shadow-none hover:bg-surface-danger-subdued active:bg-surface-danger-pressed hover:shadow-button active:shadow-button": variant === "critical-outline",
          "bg-none shadow-none hover:bg-surface-primary-subdued active:bg-surface-primary-pressed hover:shadow-button active:shadow-button": variant === "primary-outline",
          "bg-none shadow-none hover:bg-surface-secondary-hovered active:bg-surface-secondary-pressed hover:shadow-button active:shadow-button": variant === "secondary-outline",
          "bg-none shadow-none hover:bg-surface-hovered active:bg-surface-pressed hover:shadow-button active:shadow-button": variant === "outline",
          "bg-none shadow-none active:bg-surface-pressed active:shadow-button": variant === "plain" && !iconOnly,
          "bg-none shadow-none hover:bg-surface-hovered active:bg-surface-pressed active:shadow-button": variant === "plain" && iconOnly,
          "bg-none shadow-none active:bg-surface-primary-pressed active:shadow-button": variant === "primary-plain",
          "bg-none shadow-none active:bg-surface-secondary-pressed active:shadow-button": variant === "secondary-plain",
          "bg-none shadow-none active:bg-surface-danger-pressed active:shadow-button": variant === "critical-plain"
        },
        {
          "text-text-default": variant === "basic" || variant === "plain" || variant === "outline",
          "active:text-text-on-primary": variant === "primary-plain" || variant === "critical-plain" || variant === "secondary-plain",
          "text-text-on-primary": variant === "primary" || variant === "critical" || variant === "secondary" || variant === "secondary-outline",
          "text-text-danger": variant === "critical-outline" || variant === "critical-plain",
          "text-text-primary": variant === "primary-outline" || variant === "primary-plain",
          "text-text-secondary": variant === "secondary-plain"
        },
        {
          "focus:underline": noRing
        },
        {
          "hover:underline": variant === "plain" || variant === "primary-plain" || variant === "critical-plain" || variant === "secondary-plain"
        },
        {
          ...iconOnly ? {
            "p-2.75": size2 === "large" && variant != "plain",
            "p-1.75": size2 === "medium" && variant != "plain",
            "p-0.75": size2 === "small" && variant != "plain",
            "p-3": size2 === "large" && variant == "plain",
            "p-2": size2 === "medium" && variant == "plain",
            "p-1": size2 === "small" && variant == "plain"
          } : {
            "px-6 py-2.75": size2 === "large" && variant !== "plain" && variant !== "critical-plain" && variant !== "primary-plain" && variant !== "secondary-plain",
            "px-4 py-1.75": size2 === "medium" && variant !== "plain" && variant !== "critical-plain" && variant !== "primary-plain" && variant !== "secondary-plain",
            "px-2 py-0.75": size2 === "small" && variant !== "plain" && variant !== "critical-plain" && variant !== "primary-plain" && variant !== "secondary-plain",
            "px-1 py-0.5": variant === "plain" || variant === "primary-plain" || variant === "critical-plain" || variant === "secondary-plain"
          }
        }
      ),
      ...props,
      ...extraProps,
      children: [
        IconComp && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(IconComp, { size: iconOnly ? 20 : 16, color: "currentColor" }, void 0, !1, {
          fileName: "../../components/atoms/button.jsx",
          lineNumber: 151,
          columnNumber: 22
        }, this),
        !iconOnly && label2,
        DisclosureComp && !iconOnly && /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(DisclosureComp, { size: 16, color: "currentColor" }, void 0, !1, {
          fileName: "../../components/atoms/button.jsx",
          lineNumber: 153,
          columnNumber: 41
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "../../components/atoms/button.jsx",
      lineNumber: 64,
      columnNumber: 7
    },
    this
  ) }, void 0, !1, {
    fileName: "../../components/atoms/button.jsx",
    lineNumber: 63,
    columnNumber: 5
  }, this);
}), IconButton = ({
  variant,
  size: size2 = "medium",
  onClick,
  href,
  type: type2,
  disabled: disabled2,
  sharpLeft = !1,
  sharpRight = !1,
  className: className2,
  noRounded,
  noRing,
  IconComp,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(ButtonBase, { ...props, iconOnly: !0, label: "", variant, size: size2, onClick, href, type: type2, disabled: disabled2, sharpLeft, sharpRight, noRing, noRounded, IconComp, className: className2 }, void 0, !1, {
  fileName: "../../components/atoms/button.jsx",
  lineNumber: 177,
  columnNumber: 10
}, this), Button = (0, import_react29.forwardRef)(({
  label: label2,
  variant,
  size: size2 = "medium",
  onClick,
  href,
  type: type2,
  disabled: disabled2,
  sharpLeft = !1,
  sharpRight = !1,
  className: className2,
  noRounded,
  noBorder,
  noRing,
  IconComp,
  DisclosureComp,
  ...props
}, ref) => (console.log(variant), /* @__PURE__ */ (0, import_jsx_dev_runtime4.jsxDEV)(ButtonBase, { ref, ...props, label: label2, noBorder, DisclosureComp, variant, size: size2, onClick, href, type: type2, disabled: disabled2, sharpLeft, sharpRight, noRing, noRounded, IconComp, className: className2 }, void 0, !1, {
  fileName: "../../components/atoms/button.jsx",
  lineNumber: 200,
  columnNumber: 10
}, this)));
Button.propTypes = {
  /**
   * How the button looks like?
   */
  variant: import_prop_types.default.oneOf([
    "outline",
    "basic",
    "plain",
    "primary",
    "primary-outline",
    "secondary",
    "secondary-outline",
    "critical",
    "critical-outline",
    "primary-plain",
    "secondary-plain",
    "critical-plain"
  ]),
  /**
   * How large should the button be?
   */
  size: import_prop_types.default.oneOf(["small", "medium", "large"]),
  /**
   * Button contents
   */
  label: import_prop_types.default.string.isRequired,
  /**
   * Optional click handler
   */
  onClick: import_prop_types.default.func,
  /**
   * Href for link
   */
  href: import_prop_types.default.string,
  /**
   * Disable button
   */
  disabled: import_prop_types.default.bool,
  type: import_prop_types.default.oneOf(["button", "submit"])
};
Button.defaultProps = {
  variant: "primary",
  size: "medium",
  onClick: void 0,
  type: "button"
};
IconButton.propTypes = {
  /**
   * How the button looks like?
   */
  variant: import_prop_types.default.oneOf(IconButtonStyles),
  /**
   * How large should the button be?
   */
  size: import_prop_types.default.oneOf(["small", "medium", "large"]),
  /**
   * Button contents
   */
  /**
   * Optional click handler
   */
  onClick: import_prop_types.default.func,
  /**
   * Href for link
   */
  href: import_prop_types.default.string,
  /**
   * Disable button
   */
  disabled: import_prop_types.default.bool,
  type: import_prop_types.default.oneOf(["button", "submit"])
};
IconButton.defaultProps = {
  variant: "basic",
  size: "medium",
  onClick: void 0,
  type: "button"
};

// ../../components/atoms/input.jsx
var import_classnames2 = __toESM(require_classnames(), 1), import_prop_types2 = __toESM(require_prop_types(), 1), import_react55 = __toESM(require_react(), 1);

// ../../../node_modules/@jengaicons/react/dist/src/base.js
var import_react31 = __toESM(require_react(), 1), o = (0, import_react31.createContext)({});

// ../../../node_modules/@jengaicons/react/dist/icons/fill/ArrowLeftFill.js
var e = __toESM(require_react(), 1), import_react32 = __toESM(require_react(), 1);
var i = (0, import_react32.forwardRef)(function(r25, i13) {
  var l10 = r25.size, s = r25.color, a9 = r25.alt, n = r25.children, c = r25.mirrored, m = r25.style, d = (0, import_react32.useContext)(o), f = d.alt, h = d.children, p = d.color, w = d.mirrored, g = d.size, u = d.style;
  return e.createElement("svg", { width: l10 || g || 32, height: l10 || g || 32, transform: c || w ? "scale(-1, 1)" : void 0, ref: i13, style: Object.assign(Object.assign({}, u), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!f || !!a9) && e.createElement("title", null, a9 || f), e.createElement("path", { stroke: s || p || "#000000", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: "2", d: "M11.325 9.919 4.96 16.283l6.364 6.364M4.96 16.283h24" }), n || h);
});
i.displayName = "ArrowLeftFill";

// ../../../node_modules/@jengaicons/react/dist/icons/fill/ArrowsDownUpFill.js
var e2 = __toESM(require_react(), 1), import_react33 = __toESM(require_react(), 1);
var l = (0, import_react33.forwardRef)(function(r25, l10) {
  var s = r25.size, i13 = r25.color, a9 = r25.alt, n = r25.children, c = r25.mirrored, m = r25.style, d = (0, import_react33.useContext)(o), p = d.alt, f = d.children, h = d.color, v = d.mirrored, w = d.size, g = d.style;
  return e2.createElement("svg", { width: s || w || 32, height: s || w || 32, transform: c || v ? "scale(-1, 1)" : void 0, ref: l10, style: Object.assign(Object.assign({}, g), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!p || !!a9) && e2.createElement("title", null, a9 || p), e2.createElement("path", { stroke: i13 || h || "#000000", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: "2", d: "M9.765 4.283v24M25.2 28.283v-24M20.931 8.603l4.218-4.268 4.217 4.268M5.497 23.963l4.217 4.268 4.217-4.268" }), n || f);
});
l.displayName = "ArrowsDownUpFill";

// ../../../node_modules/@jengaicons/react/dist/icons/fill/BellFill.js
var e3 = __toESM(require_react(), 1), import_react34 = __toESM(require_react(), 1);
var a = (0, import_react34.forwardRef)(function(l10, a9) {
  var i13 = l10.size, c = l10.color, o3 = l10.alt, s = l10.children, n = l10.mirrored, m = l10.style, d = (0, import_react34.useContext)(o), v = d.alt, f = d.children, h = d.color, p = d.mirrored, g = d.size, u = d.style;
  return e3.createElement("svg", { width: i13 || g || 32, height: i13 || g || 32, transform: n || p ? "scale(-1, 1)" : void 0, ref: a9, style: Object.assign(Object.assign({}, u), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!v || !!o3) && e3.createElement("title", null, o3 || v), e3.createElement("path", { fill: c || h || "#000000", fillRule: "evenodd", d: "M6.617 22.555c-.218.34.026.8.431.8h4.912v.986c0 1.316.53 2.574 1.47 3.5a5.03 5.03 0 0 0 3.53 1.442 5.03 5.03 0 0 0 3.53-1.442 4.913 4.913 0 0 0 1.47-3.5v-.985h4.911c.405 0 .65-.46.432-.802-.777-1.214-2.161-3.566-2.469-5.329a11.313 11.313 0 0 1-.122-2.595C25 9.694 21.904 4.283 16.96 4.283S8.919 9.694 9.208 14.63c.052.891.022 1.768-.123 2.595-.307 1.762-1.692 4.115-2.468 5.33Zm13.343.8h-6v.986c0 .775.312 1.522.873 2.075a3.03 3.03 0 0 0 2.127.867c.8 0 1.565-.314 2.127-.867.56-.553.873-1.3.873-2.075v-.985Z", clipRule: "evenodd" }), s || f);
});
a.displayName = "BellFill";

// ../../../node_modules/@jengaicons/react/dist/icons/fill/BellSimpleFill.js
var e4 = __toESM(require_react(), 1), import_react35 = __toESM(require_react(), 1);
var i2 = (0, import_react35.forwardRef)(function(l10, i13) {
  var a9 = l10.size, o3 = l10.color, s = l10.alt, c = l10.children, n = l10.mirrored, m = l10.style, d = (0, import_react35.useContext)(o), f = d.alt, h = d.children, p = d.color, v = d.mirrored, g = d.size, u = d.style;
  return e4.createElement("svg", { width: a9 || g || 32, height: a9 || g || 32, transform: n || v ? "scale(-1, 1)" : void 0, ref: i13, style: Object.assign(Object.assign({}, u), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!f || !!s) && e4.createElement("title", null, s || f), e4.createElement("path", { fill: o3 || p || "#000000", fillRule: "evenodd", d: "M6.617 22.555c-.218.34.026.8.431.8h19.823c.405 0 .65-.46.432-.8-.777-1.215-2.161-3.567-2.469-5.33a11.313 11.313 0 0 1-.122-2.595C25 9.694 21.904 4.283 16.96 4.283S8.919 9.694 9.208 14.63c.052.891.022 1.768-.123 2.595-.307 1.762-1.692 4.115-2.468 5.33Zm6.343 4.728a1 1 0 1 0 0 2h8a1 1 0 0 0 0-2h-8Z", clipRule: "evenodd" }), c || h);
});
i2.displayName = "BellSimpleFill";

// ../../../node_modules/@jengaicons/react/dist/icons/fill/CaretDownFill.js
var e5 = __toESM(require_react(), 1), import_react36 = __toESM(require_react(), 1);
var a2 = (0, import_react36.forwardRef)(function(r25, a9) {
  var i13 = r25.size, o3 = r25.color, s = r25.alt, n = r25.children, c = r25.mirrored, m = r25.style, d = (0, import_react36.useContext)(o), f = d.alt, h = d.children, p = d.color, w = d.mirrored, g = d.size, v = d.style;
  return e5.createElement("svg", { width: i13 || g || 32, height: i13 || g || 32, transform: c || w ? "scale(-1, 1)" : void 0, ref: a9, style: Object.assign(Object.assign({}, v), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!f || !!s) && e5.createElement("title", null, s || f), e5.createElement("path", { fill: o3 || p || "#000000", d: "M16.606 21.93 5.814 11.136a.5.5 0 0 1 .353-.854h21.586a.5.5 0 0 1 .353.854L17.313 21.928a.5.5 0 0 1-.707 0Z" }), n || h);
});
a2.displayName = "CaretDownFill";

// ../../../node_modules/@jengaicons/react/dist/icons/fill/CaretUpFill.js
var e6 = __toESM(require_react(), 1), import_react37 = __toESM(require_react(), 1);
var a3 = (0, import_react37.forwardRef)(function(r25, a9) {
  var i13 = r25.size, s = r25.color, o3 = r25.alt, n = r25.children, c = r25.mirrored, m = r25.style, d = (0, import_react37.useContext)(o), f = d.alt, h = d.children, p = d.color, g = d.mirrored, v = d.size, w = d.style;
  return e6.createElement("svg", { width: i13 || v || 32, height: i13 || v || 32, transform: c || g ? "scale(-1, 1)" : void 0, ref: a9, style: Object.assign(Object.assign({}, w), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!f || !!o3) && e6.createElement("title", null, o3 || f), e6.createElement("path", { fill: s || p || "#000000", d: "M16.607 10.636 5.814 21.43a.5.5 0 0 0 .353.854h21.586a.5.5 0 0 0 .354-.854L17.314 10.637a.5.5 0 0 0-.707 0Z" }), n || h);
});
a3.displayName = "CaretUpFill";

// ../../../node_modules/@jengaicons/react/dist/icons/fill/EnvelopeFill.js
var e7 = __toESM(require_react(), 1), import_react38 = __toESM(require_react(), 1);
var a4 = (0, import_react38.forwardRef)(function(l10, a9) {
  var i13 = l10.size, o3 = l10.color, s = l10.alt, n = l10.children, c = l10.mirrored, m = l10.style, d = (0, import_react38.useContext)(o), v = d.alt, f = d.children, h = d.color, p = d.mirrored, g = d.size, u = d.style;
  return e7.createElement("svg", { width: i13 || g || 32, height: i13 || g || 32, transform: c || p ? "scale(-1, 1)" : void 0, ref: a9, style: Object.assign(Object.assign({}, u), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!v || !!s) && e7.createElement("title", null, s || v), e7.createElement("path", { fill: o3 || h || "#000000", fillRule: "evenodd", d: "M5.96 7.283a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h22a1 1 0 0 0 1-1v-16a1 1 0 0 0-1-1h-22Zm9.017 10.603-7.306 6.428a1 1 0 1 1-1.321-1.502l7.18-6.316-7.138-6.85a.872.872 0 0 1 0-1.27.963.963 0 0 1 1.323 0l9.218 8.847 9.332-8.958a.963.963 0 0 1 1.323 0c.365.351.365.92 0 1.27l-7.14 6.852 7.137 6.279a1 1 0 0 1-1.322 1.501L19 17.777l-2.067 1.985-1.956-1.876Z", clipRule: "evenodd" }), n || f);
});
a4.displayName = "EnvelopeFill";

// ../../../node_modules/@jengaicons/react/dist/icons/fill/GithubLogoFill.js
var e8 = __toESM(require_react(), 1), import_react39 = __toESM(require_react(), 1);
var a5 = (0, import_react39.forwardRef)(function(l10, a9) {
  var i13 = l10.size, o3 = l10.color, c = l10.alt, s = l10.children, n = l10.mirrored, m = l10.style, d = (0, import_react39.useContext)(o), f = d.alt, v = d.children, h = d.color, p = d.mirrored, g = d.size, u = d.style;
  return e8.createElement("svg", { width: i13 || g || 32, height: i13 || g || 32, transform: n || p ? "scale(-1, 1)" : void 0, ref: a9, style: Object.assign(Object.assign({}, u), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!f || !!c) && e8.createElement("title", null, c || f), e8.createElement("path", { fill: o3 || h || "#000000", fillRule: "evenodd", d: "M20.122 29.09c5.651-1.413 9.838-6.524 9.838-12.613 0-7.18-5.82-13-13-13s-13 5.82-13 13c0 6.089 4.186 11.2 9.838 12.612a3.243 3.243 0 0 1-.067-.658V25.63c-.975.288-3.143.444-4.163-1.203-.203-.535-.785-1.716-1.497-2.157-.89-.551-.595-.723-.462-.798.345-.091 1.214-.089 1.92.648.133.147.43.493.55.701l.01.017c.177.309 1.127 1.972 3.66 1.007l.093-.028a3.227 3.227 0 0 1 .907-1.51 12.708 12.708 0 0 1-1.784-.386c-2.464-.616-4.27-2.82-4.27-5.852 0-1.638.514-2.914 1.352-3.91-.519-1.195-.118-2.715.151-3.333 1.182-.154 2.84.846 3.446 1.261.987-.235 2.125-.358 3.388-.358 1.186 0 2.308.124 3.295.35.663-.437 2.235-1.406 3.42-1.24.269.58.674 2.023.2 3.26a6.262 6.262 0 0 1 1.391 3.97c0 2.421-1.339 4.554-3.254 5.461-.816.355-1.807.626-2.907.782a3.22 3.22 0 0 1 1.012 2.348v3.772c0 .226-.023.446-.067.658Z", clipRule: "evenodd" }), s || v);
});
a5.displayName = "GithubLogoFill";

// ../../../node_modules/@jengaicons/react/dist/icons/fill/GitlabLogoFill.js
var e9 = __toESM(require_react(), 1), import_react40 = __toESM(require_react(), 1);
var l6 = (0, import_react40.forwardRef)(function(t17, l10) {
  var i13 = t17.size, s = t17.color, n = t17.alt, a9 = t17.children, c = t17.mirrored, d = t17.style, m = (0, import_react40.useContext)(o), h = m.alt, f = m.children, p = m.color, k = m.mirrored, u = m.size, g = m.style;
  return e9.createElement("svg", { width: i13 || u || 32, height: i13 || u || 32, transform: c || k ? "scale(-1, 1)" : void 0, ref: l10, style: Object.assign(Object.assign({}, g), d), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!h || !!n) && e9.createElement("title", null, n || h), e9.createElement("path", { stroke: s || p || "#000000", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: "2", d: "m27.5 13 1.462 5.454-11.786 8.455-12.299-8.455L6.5 13" }), e9.createElement("path", { fill: s || p || "#000000", stroke: s || p || "#000000", strokeLinejoin: "round", strokeWidth: "2", d: "M12 13H6.5l2-7 3.5 7ZM22 13h5.5l-2-7-3.5 7Z" }), e9.createElement("path", { fill: s || p || "#000000", stroke: s || p || "#000000", strokeLinejoin: "round", d: "M22 13H12l5 14 5-14Z" }), a9 || f);
});
l6.displayName = "GitlabLogoFill";

// ../../../node_modules/@jengaicons/react/dist/icons/fill/PlusFill.js
var e10 = __toESM(require_react(), 1), import_react41 = __toESM(require_react(), 1);
var a6 = (0, import_react41.forwardRef)(function(l10, a9) {
  var i13 = l10.size, o3 = l10.color, s = l10.alt, n = l10.children, c = l10.mirrored, m = l10.style, d = (0, import_react41.useContext)(o), v = d.alt, f = d.children, h = d.color, p = d.mirrored, u = d.size, g = d.style;
  return e10.createElement("svg", { width: i13 || u || 32, height: i13 || u || 32, transform: c || p ? "scale(-1, 1)" : void 0, ref: a9, style: Object.assign(Object.assign({}, g), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!v || !!s) && e10.createElement("title", null, s || v), e10.createElement("path", { fill: o3 || h || "#000000", fillRule: "evenodd", d: "M17.96 9.28a1 1 0 1 0-2 0v6.003H9.957a1 1 0 1 0 0 2h6.003v6.003a1 1 0 1 0 2 0v-6.003h6.003a1 1 0 0 0 0-2H17.96V9.28Z", clipRule: "evenodd" }), n || f);
});
a6.displayName = "PlusFill";

// ../../../node_modules/@jengaicons/react/dist/icons/fill/XCircleFill.js
var e11 = __toESM(require_react(), 1), import_react42 = __toESM(require_react(), 1);
var a7 = (0, import_react42.forwardRef)(function(l10, a9) {
  var i13 = l10.size, s = l10.color, o3 = l10.alt, c = l10.children, n = l10.mirrored, m = l10.style, d = (0, import_react42.useContext)(o), f = d.alt, p = d.children, v = d.color, h = d.mirrored, g = d.size, u = d.style;
  return e11.createElement("svg", { width: i13 || g || 32, height: i13 || g || 32, transform: n || h ? "scale(-1, 1)" : void 0, ref: a9, style: Object.assign(Object.assign({}, u), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!f || !!o3) && e11.createElement("title", null, o3 || f), e11.createElement("path", { fill: s || v || "#000000", fillRule: "evenodd", d: "M16.96 28.283c6.627 0 12-5.373 12-12s-5.373-12-12-12c-6.628 0-12 5.373-12 12s5.372 12 12 12Zm4.707-16.707a1 1 0 0 1 0 1.414l-3.293 3.293 3.293 3.293a1 1 0 0 1-1.414 1.414l-3.293-3.293-3.293 3.293a1 1 0 0 1-1.414-1.414l3.293-3.293-3.293-3.293a1 1 0 1 1 1.414-1.414l3.293 3.293 3.293-3.293a1 1 0 0 1 1.414 0Z", clipRule: "evenodd" }), c || p);
});
a7.displayName = "XCircleFill";

// ../../../node_modules/@jengaicons/react/dist/icons/fill/XFill.js
var e12 = __toESM(require_react(), 1), import_react43 = __toESM(require_react(), 1);
var a8 = (0, import_react43.forwardRef)(function(l10, a9) {
  var i13 = l10.size, o3 = l10.color, s = l10.alt, n = l10.children, c = l10.mirrored, m = l10.style, d = (0, import_react43.useContext)(o), f = d.alt, p = d.children, v = d.color, h = d.mirrored, g = d.size, u = d.style;
  return e12.createElement("svg", { width: i13 || g || 32, height: i13 || g || 32, transform: c || h ? "scale(-1, 1)" : void 0, ref: a9, style: Object.assign(Object.assign({}, u), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!f || !!s) && e12.createElement("title", null, s || f), e12.createElement("path", { fill: o3 || v || "#000000", fillRule: "evenodd", d: "M24.67 9.988a1 1 0 0 0-1.415-1.414l-6.295 6.295-6.295-6.295a1 1 0 1 0-1.414 1.414l6.295 6.295-6.295 6.295a1 1 0 0 0 1.414 1.414l6.295-6.295 6.295 6.295a1 1 0 0 0 1.414-1.414l-6.295-6.295 6.295-6.295Z", clipRule: "evenodd" }), n || p);
});
a8.displayName = "XFill";

// ../../../node_modules/@jengaicons/react/dist/icons/regular/ArrowLeft.js
var e13 = __toESM(require_react(), 1), import_react44 = __toESM(require_react(), 1);
var i3 = (0, import_react44.forwardRef)(function(r25, i13) {
  var s = r25.size, l10 = r25.color, a9 = r25.alt, n = r25.children, c = r25.mirrored, m = r25.weight, d = r25.style, h = (0, import_react44.useContext)(o), f = h.alt, w = h.children, g = h.color, p = h.mirrored, u = h.size, v = h.weight, k = h.style;
  return e13.createElement("svg", { width: s || u || 32, height: s || u || 32, transform: c || p ? "scale(-1, 1)" : void 0, strokeWidth: m || v || 2, ref: i13, style: Object.assign(Object.assign({}, k), d), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!f || !!a9) && e13.createElement("title", null, a9 || f), e13.createElement("path", { stroke: l10 || g || "#000000", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: m || v || "2", d: "M10.364 9.636 4 16l6.364 6.364M4 16h24" }), n || w);
});
i3.displayName = "ArrowLeft";

// ../../../node_modules/@jengaicons/react/dist/icons/regular/ArrowRight.js
var e14 = __toESM(require_react(), 1), import_react45 = __toESM(require_react(), 1);
var i4 = (0, import_react45.forwardRef)(function(r25, i13) {
  var s = r25.size, l10 = r25.color, a9 = r25.alt, n = r25.children, c = r25.mirrored, m = r25.weight, d = r25.style, h = (0, import_react45.useContext)(o), g = h.alt, w = h.children, f = h.color, p = h.mirrored, u = h.size, v = h.weight, k = h.style;
  return e14.createElement("svg", { width: s || u || 32, height: s || u || 32, transform: c || p ? "scale(-1, 1)" : void 0, strokeWidth: m || v || 2, ref: i13, style: Object.assign(Object.assign({}, k), d), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!g || !!a9) && e14.createElement("title", null, a9 || g), e14.createElement("path", { stroke: l10 || f || "#000000", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: m || v || "2", d: "M21.636 9.636 28 16l-6.364 6.364M28 15.994H4" }), n || w);
});
i4.displayName = "ArrowRight";

// ../../../node_modules/@jengaicons/react/dist/icons/regular/CircleDashed.js
var e15 = __toESM(require_react(), 1), import_react46 = __toESM(require_react(), 1);
var i5 = (0, import_react46.forwardRef)(function(r25, i13) {
  var o3 = r25.size, a9 = r25.color, l10 = r25.alt, c = r25.children, n = r25.mirrored, m = r25.weight, d = r25.style, h = (0, import_react46.useContext)(o), f = h.alt, g = h.children, p = h.color, w = h.mirrored, k = h.size, v = h.weight, u = h.style;
  return e15.createElement("svg", { width: o3 || k || 32, height: o3 || k || 32, transform: n || w ? "scale(-1, 1)" : void 0, strokeWidth: m || v || 2, ref: i13, style: Object.assign(Object.assign({}, u), d), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!f || !!l10) && e15.createElement("title", null, l10 || f), e15.createElement("path", { stroke: a9 || p || "#000000", strokeDasharray: "4 4", strokeLinecap: "round", strokeMiterlimit: "10", strokeWidth: m || v || "2", d: "M16 28c6.627 0 12-5.373 12-12S22.627 4 16 4 4 9.373 4 16s5.373 12 12 12Z" }), c || g);
});
i5.displayName = "CircleDashed";

// ../../../node_modules/@jengaicons/react/dist/icons/regular/Envelope.js
var e16 = __toESM(require_react(), 1), import_react47 = __toESM(require_react(), 1);
var i6 = (0, import_react47.forwardRef)(function(t17, i13) {
  var s = t17.size, n = t17.color, l10 = t17.alt, a9 = t17.children, c = t17.mirrored, d = t17.weight, m = t17.style, h = (0, import_react47.useContext)(o), p = h.alt, f = h.children, g = h.color, k = h.mirrored, v = h.size, w = h.weight, u = h.style;
  return e16.createElement("svg", { width: s || v || 32, height: s || v || 32, transform: c || k ? "scale(-1, 1)" : void 0, strokeWidth: d || w || 2, ref: i13, style: Object.assign(Object.assign({}, u), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!p || !!l10) && e16.createElement("title", null, l10 || p), e16.createElement("path", { stroke: n || g || "#000000", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: d || w || "2", d: "M28 7 16 18 4 7M13.818 16l-9.51 8.717M27.692 24.717 18.182 16" }), e16.createElement("path", { stroke: n || g || "#000000", strokeLinejoin: "round", strokeWidth: d || w || "2", d: "M4 7h24v18H4z" }), a9 || f);
});
i6.displayName = "Envelope";

// ../../../node_modules/@jengaicons/react/dist/icons/regular/Eye.js
var e17 = __toESM(require_react(), 1), import_react48 = __toESM(require_react(), 1);
var i7 = (0, import_react48.forwardRef)(function(t17, i13) {
  var s = t17.size, a9 = t17.color, n = t17.alt, l10 = t17.children, c = t17.mirrored, d = t17.weight, m = t17.style, h = (0, import_react48.useContext)(o), p = h.alt, f = h.children, g = h.color, k = h.mirrored, w = h.size, u = h.weight, v = h.style;
  return e17.createElement("svg", { width: s || w || 32, height: s || w || 32, transform: c || k ? "scale(-1, 1)" : void 0, strokeWidth: d || u || 2, ref: i13, style: Object.assign(Object.assign({}, v), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!p || !!n) && e17.createElement("title", null, n || p), e17.createElement("path", { stroke: a9 || g || "#000000", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: d || u || "2", d: "M16 19.75a3.75 3.75 0 1 0 0-7.5 3.75 3.75 0 0 0 0 7.5Z" }), e17.createElement("path", { stroke: a9 || g || "#000000", strokeLinejoin: "round", strokeWidth: d || u || "2", d: "M4 15.918c9.122-10.31 14.379-10.043 24 0-9.213 10.19-14.459 10.598-24 0Z" }), l10 || f);
});
i7.displayName = "Eye";

// ../../../node_modules/@jengaicons/react/dist/icons/regular/EyeSlash.js
var e18 = __toESM(require_react(), 1), import_react49 = __toESM(require_react(), 1);
var i8 = (0, import_react49.forwardRef)(function(t17, i13) {
  var s = t17.size, a9 = t17.color, n = t17.alt, l10 = t17.children, c = t17.mirrored, d = t17.weight, m = t17.style, h = (0, import_react49.useContext)(o), p = h.alt, k = h.children, f = h.color, g = h.mirrored, u = h.size, w = h.weight, v = h.style;
  return e18.createElement("svg", { width: s || u || 32, height: s || u || 32, transform: c || g ? "scale(-1, 1)" : void 0, strokeWidth: d || w || 2, ref: i13, style: Object.assign(Object.assign({}, v), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!p || !!n) && e18.createElement("title", null, n || p), e18.createElement("path", { stroke: a9 || f || "#000000", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: d || w || "2", d: "M18.418 18.866a3.75 3.75 0 0 1-5.43-5.1m3.517-1.482a3.752 3.752 0 0 1 3.204 3.157" }), e18.createElement("path", { stroke: a9 || f || "#000000", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: d || w || "2", d: "M15.83 8.286c3.651.04 7.367 2.618 12.17 7.632a56.85 56.85 0 0 1-2.733 2.84M9.941 10.361C8.105 11.627 6.161 13.476 4 15.918c7.054 7.835 11.76 9.655 17.457 5.954M6.676 6.676l18.648 18.648" }), l10 || k);
});
i8.displayName = "EyeSlash";

// ../../../node_modules/@jengaicons/react/dist/icons/regular/GoogleLogo.js
var e19 = __toESM(require_react(), 1), import_react50 = __toESM(require_react(), 1);
var i9 = (0, import_react50.forwardRef)(function(t17, i13) {
  var s = t17.size, a9 = t17.color, l10 = t17.alt, n = t17.children, c = t17.mirrored, m = t17.weight, d = t17.style, h = (0, import_react50.useContext)(o), g = h.alt, f = h.children, p = h.color, w = h.mirrored, u = h.size, v = h.weight, k = h.style;
  return e19.createElement("svg", { width: s || u || 32, height: s || u || 32, transform: c || w ? "scale(-1, 1)" : void 0, strokeWidth: m || v || 2, ref: i13, style: Object.assign(Object.assign({}, k), d), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!g || !!l10) && e19.createElement("title", null, l10 || g), e19.createElement("path", { stroke: a9 || p || "#000000", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: m || v || "2", d: "M16 16h11a11 11 0 1 1-3.222-7.778" }), n || f);
});
i9.displayName = "GoogleLogo";

// ../../../node_modules/@jengaicons/react/dist/icons/regular/Info.js
var e20 = __toESM(require_react(), 1), import_react51 = __toESM(require_react(), 1);
var i10 = (0, import_react51.forwardRef)(function(t17, i13) {
  var s = t17.size, a9 = t17.color, l10 = t17.alt, n = t17.children, c = t17.mirrored, m = t17.weight, d = t17.style, h = (0, import_react51.useContext)(o), f = h.alt, p = h.children, g = h.color, w = h.mirrored, v = h.size, u = h.weight, k = h.style;
  return e20.createElement("svg", { width: s || v || 32, height: s || v || 32, transform: c || w ? "scale(-1, 1)" : void 0, strokeWidth: m || u || 2, ref: i13, style: Object.assign(Object.assign({}, k), d), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!f || !!l10) && e20.createElement("title", null, l10 || f), e20.createElement("path", { stroke: a9 || g || "#000000", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: m || u || "2", d: "M16 28c6.627 0 12-5.373 12-12S22.627 4 16 4 4 9.373 4 16s5.373 12 12 12ZM16 15v7" }), e20.createElement("path", { fill: a9 || g || "#000000", d: "M15.75 12a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z" }), n || p);
});
i10.displayName = "Info";

// ../../../node_modules/@jengaicons/react/dist/icons/regular/List.js
var e21 = __toESM(require_react(), 1), import_react52 = __toESM(require_react(), 1);
var o2 = (0, import_react52.forwardRef)(function(t17, o3) {
  var s = t17.size, a9 = t17.color, l10 = t17.alt, n = t17.children, c = t17.mirrored, h = t17.weight, m = t17.style, d = (0, import_react52.useContext)(o), f = d.alt, g = d.children, p = d.color, w = d.mirrored, u = d.size, v = d.weight, k = d.style;
  return e21.createElement("svg", { width: s || u || 32, height: s || u || 32, transform: c || w ? "scale(-1, 1)" : void 0, strokeWidth: h || v || 2, ref: o3, style: Object.assign(Object.assign({}, k), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!f || !!l10) && e21.createElement("title", null, l10 || f), e21.createElement("path", { stroke: a9 || p || "#000000", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: h || v || "2", d: "M6 16h20M6 8.727h20M6 23.273h20" }), n || g);
});
o2.displayName = "List";

// ../../../node_modules/@jengaicons/react/dist/icons/regular/Search.js
var e22 = __toESM(require_react(), 1), import_react53 = __toESM(require_react(), 1);
var i11 = (0, import_react53.forwardRef)(function(r25, i13) {
  var s = r25.size, a9 = r25.color, l10 = r25.alt, n = r25.children, c = r25.mirrored, m = r25.weight, d = r25.style, h = (0, import_react53.useContext)(o), f = h.alt, g = h.children, p = h.color, w = h.mirrored, u = h.size, v = h.weight, k = h.style;
  return e22.createElement("svg", { width: s || u || 32, height: s || u || 32, transform: c || w ? "scale(-1, 1)" : void 0, strokeWidth: m || v || 2, ref: i13, style: Object.assign(Object.assign({}, k), d), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!f || !!l10) && e22.createElement("title", null, l10 || f), e22.createElement("path", { stroke: a9 || p || "#000000", strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: m || v || "2", d: "M14.861 24.222a8.861 8.861 0 1 0 0-17.722 8.861 8.861 0 0 0 0 17.722ZM21.127 21.627 26 26.5" }), n || g);
});
i11.displayName = "Search";

// ../../../node_modules/@jengaicons/react/dist/icons/regular/SquaresFour.js
var e23 = __toESM(require_react(), 1), import_react54 = __toESM(require_react(), 1);
var i12 = (0, import_react54.forwardRef)(function(r25, i13) {
  var s = r25.size, a9 = r25.color, l10 = r25.alt, n = r25.children, h = r25.mirrored, c = r25.weight, m = r25.style, d = (0, import_react54.useContext)(o), f = d.alt, g = d.children, v = d.color, w = d.mirrored, p = d.size, u = d.weight, z = d.style;
  return e23.createElement("svg", { width: s || p || 32, height: s || p || 32, transform: h || w ? "scale(-1, 1)" : void 0, strokeWidth: c || u || 2, ref: i13, style: Object.assign(Object.assign({}, z), m), xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 32 32" }, (!!f || !!l10) && e23.createElement("title", null, l10 || f), e23.createElement("path", { stroke: a9 || v || "#000000", strokeLinejoin: "round", strokeWidth: c || u || "2", d: "M4 4h9.6v9.6H4zM4 18.4h9.6V28H4zM18.4 4H28v9.6h-9.6zM18.4 18.4H28V28h-9.6z" }), n || g);
});
i12.displayName = "SquaresFour";

// ../../components/atoms/input.jsx
var import_react57 = __toESM(require_react(), 1), import_jsx_dev_runtime5 = __toESM(require_jsx_dev_runtime(), 1), NumberInput = (props = { label, disabled, message, extra, placeholder, value: "", onChange, error: !1, className, step }) => {
  let [v, setV] = (0, import_react55.useState)(props.value || 0), ref = (0, import_react57.useRef)(), id3 = (0, import_react55.useId)(), step2 = props.step || 1;
  return (0, import_react55.useEffect)(() => {
    props.onChange && props.onChange({
      target: {
        ...ref.current,
        value: v
      }
    });
  }, [v]), /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("div", { className: (0, import_classnames2.default)(
    "flex flex-col",
    {
      "gap-1": props.label || props.extra
    }
  ), children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("div", { className: "flex", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("label", { className: "flex-1 select-none bodyMd-medium", htmlFor: id3, children: props.label }, void 0, !1, {
        fileName: "../../components/atoms/input.jsx",
        lineNumber: 33,
        columnNumber: 7
      }, this),
      props.extra && /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("div", { className: "bodyMd", children: (0, import_react55.cloneElement)(props.extra) }, void 0, !1, {
        fileName: "../../components/atoms/input.jsx",
        lineNumber: 34,
        columnNumber: 23
      }, this)
    ] }, void 0, !0, {
      fileName: "../../components/atoms/input.jsx",
      lineNumber: 32,
      columnNumber: 5
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("div", { className: (0, import_classnames2.default)(
      "transition-all flex relative",
      "ring-offset-1 focus-within:ring-2 focus-within:ring-border-focus rounded border overflow-hidden",
      {
        "bg-surface-danger-subdued border-border-danger text-text-danger placeholder:text-critical-400": props.error,
        "text-text-default border-border-default": !props.error
      }
    ), children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(
        "input",
        {
          ref,
          id: id3,
          disabled: props.disabled,
          type: "number",
          autoComplete: "off",
          inputMode: "numeric",
          className: (0, import_classnames2.default)(
            "outline-none flex-1",
            "outline-none disabled:bg-surface-input disabled:text-text-disabled",
            "rounded px-3 py-2 bodyMd ",
            "no-spinner"
          ),
          value: v,
          onChange: (e24) => {
            setV(e24.target.value);
          }
        },
        void 0,
        !1,
        {
          fileName: "../../components/atoms/input.jsx",
          lineNumber: 42,
          columnNumber: 7
        },
        this
      ),
      /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(
        "div",
        {
          className: (0, import_classnames2.default)(
            "flex flex-col absolute right-0 top-0 bottom-0 justify-center items-center",
            {
              "bg-surface-danger-subdued divide-border-danger divide-y rounded-r border-l border-border-danger text-text-danger placeholder:text-critical-400": props.error,
              "text-text-default border-l border-border-default divide-border-default divide-y": !props.error
            }
          ),
          tabIndex: -1,
          children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(
              "button",
              {
                "aria-controls": id3,
                "aria-label": `Increase ${props.label}`,
                tabIndex: -1,
                onClick: () => {
                  setV((v2) => v2 + step2), ref.current.focus();
                },
                className: (0, import_classnames2.default)("flex-1 p-0.5 disabled:text-icon-disabled hover:bg-surface-hovered active:bg-surface-pressed"),
                children: /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(a3, { size: 16, color: "currentColor" }, void 0, !1, {
                  fileName: "../../components/atoms/input.jsx",
                  lineNumber: 74,
                  columnNumber: 133
                }, this)
              },
              void 0,
              !1,
              {
                fileName: "../../components/atoms/input.jsx",
                lineNumber: 66,
                columnNumber: 9
              },
              this
            ),
            /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(
              "button",
              {
                "aria-controls": id3,
                "aria-label": `Decrease ${props.label}`,
                tabIndex: -1,
                onClick: () => {
                  setV((v2) => v2 - step2);
                },
                className: (0, import_classnames2.default)("flex-1 p-0.5 disabled:text-icon-disabled hover:bg-surface-hovered active:bg-surface-pressed"),
                children: /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(a2, { size: 16, color: "currentColor" }, void 0, !1, {
                  fileName: "../../components/atoms/input.jsx",
                  lineNumber: 81,
                  columnNumber: 132
                }, this)
              },
              void 0,
              !1,
              {
                fileName: "../../components/atoms/input.jsx",
                lineNumber: 75,
                columnNumber: 9
              },
              this
            )
          ]
        },
        void 0,
        !0,
        {
          fileName: "../../components/atoms/input.jsx",
          lineNumber: 60,
          columnNumber: 7
        },
        this
      )
    ] }, void 0, !0, {
      fileName: "../../components/atoms/input.jsx",
      lineNumber: 36,
      columnNumber: 5
    }, this),
    props.message && /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("span", { className: (0, import_classnames2.default)("bodySm", {
      "text-text-danger": props.error,
      "text-text-default": !props.error
    }), children: props.message }, void 0, !1, {
      fileName: "../../components/atoms/input.jsx",
      lineNumber: 85,
      columnNumber: 23
    }, this)
  ] }, void 0, !0, {
    fileName: "../../components/atoms/input.jsx",
    lineNumber: 28,
    columnNumber: 10
  }, this);
}, TextInputBase = (0, import_react55.forwardRef)((props = { label, disabled, message, extra, placeholder, value: "", onChange, error: !1, prefix, suffix, showclear, className, component, type }, ref) => {
  let [val, setVal] = (0, import_react55.useState)(props.value || ""), [type2, setType] = (0, import_react55.useState)(props.type || "text"), id3 = (0, import_react55.useId)();
  (0, import_react55.useEffect)(() => {
    props.onChange && props.onChange({
      target: {
        ...ref.current,
        value: val
      }
    });
  }, [val]);
  let Prefix = props.prefix, Suffix = props.suffix, Component = props.component || "input";
  return /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("div", { className: (0, import_classnames2.default)(
    "flex flex-col",
    {
      "gap-1": props.label || props.extra
    },
    props.className
  ), children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("div", { className: "flex", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("label", { className: "flex-1 select-none bodyMd-medium", htmlFor: id3, children: props.label }, void 0, !1, {
        fileName: "../../components/atoms/input.jsx",
        lineNumber: 126,
        columnNumber: 9
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("div", { className: "bodyMd", children: props.extra && (0, import_react55.cloneElement)(props.extra) }, void 0, !1, {
        fileName: "../../components/atoms/input.jsx",
        lineNumber: 127,
        columnNumber: 9
      }, this)
    ] }, void 0, !0, {
      fileName: "../../components/atoms/input.jsx",
      lineNumber: 125,
      columnNumber: 7
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("div", { className: (0, import_classnames2.default)(
      "transition-all px-3 rounded border flex flex-row items-center relative ring-offset-1 focus-within:ring-2 focus-within:ring-border-focus ",
      {
        "text-text-danger bg-surface-danger-subdued border-border-danger": props.error,
        "text-text-default border-border-default bg-surface-input": !props.error,
        "text-text-disabled border-border-disabled bg-surface-input": props.disabled,
        "pr-0": props.component != "input"
      }
    ), children: [
      Prefix && /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("div", { className: (0, import_classnames2.default)(
        "pr-2 bodyMd",
        {
          "text-text-strong": typeof Prefix != "object" && !props.error && !props.disabled,
          "text-text-danger": props.error,
          "text-text-disabled": props.disabled
        }
      ), children: typeof Prefix == "object" ? /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(Prefix, { size: 20, color: "currentColor" }, void 0, !1, {
        fileName: "../../components/atoms/input.jsx",
        lineNumber: 141,
        columnNumber: 47
      }, this) : Prefix }, void 0, !1, {
        fileName: "../../components/atoms/input.jsx",
        lineNumber: 136,
        columnNumber: 20
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(
        Component,
        {
          type: type2,
          placeholder: props.placeholder,
          id: id3,
          className: (0, import_classnames2.default)(
            "outline-none disabled:bg-surface-input disabled:text-text-disabled",
            "w-full",
            "rounded py-2 bodyMd ",
            {
              "text-text-danger bg-surface-danger-subdued placeholder:text-critical-400": props.error,
              "text-text-default bg-surface-input": !props.error
            }
          ),
          value: val,
          onChange: (e24) => {
            setVal(e24.target.value);
          },
          disabled: props.disabled,
          ref,
          onKeyDown: (e24) => {
            console.log(e24), (e24.key === "ArrowDown" || e24.key === "Escape") && e24.target.blur();
          },
          autoComplete: "off"
        },
        void 0,
        !1,
        {
          fileName: "../../components/atoms/input.jsx",
          lineNumber: 142,
          columnNumber: 9
        },
        this
      ),
      Suffix && /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("div", { className: (0, import_classnames2.default)(
        "pl-2 bodyMd",
        {
          "text-text-danger": props.error,
          "text-text-strong": !props.error && !props.disabled,
          "text-text-disabled": props.disabled
        }
      ), children: typeof Suffix == "object" ? /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(Suffix, { size: 20, color: "currentColor" }, void 0, !1, {
        fileName: "../../components/atoms/input.jsx",
        lineNumber: 174,
        columnNumber: 47
      }, this) : Suffix }, void 0, !1, {
        fileName: "../../components/atoms/input.jsx",
        lineNumber: 169,
        columnNumber: 20
      }, this),
      props.showclear && !props.disabled && /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(
        "button",
        {
          tabIndex: -1,
          onClick: () => {
            setVal(""), console.log("button");
          },
          className: (0, import_classnames2.default)(
            "outline-none flex items-center rounded justify-center",
            {
              "cursor-default": props.disabled
            }
          ),
          children: /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(a7, { size: 20, color: "currentColor" }, void 0, !1, {
            fileName: "../../components/atoms/input.jsx",
            lineNumber: 186,
            columnNumber: 13
          }, this)
        },
        void 0,
        !1,
        {
          fileName: "../../components/atoms/input.jsx",
          lineNumber: 176,
          columnNumber: 49
        },
        this
      ),
      props.type === "password" && !props.disabled && /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(
        "button",
        {
          tabIndex: -1,
          onClick: () => {
            setType((prev) => prev == "text" ? "password" : "text"), console.log("button");
          },
          className: (0, import_classnames2.default)(
            "outline-none flex items-center rounded justify-center",
            {
              "cursor-default": props.disabled
            }
          ),
          children: type2 === "password" ? /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(i8, { size: 16, color: "currentColor" }, void 0, !1, {
            fileName: "../../components/atoms/input.jsx",
            lineNumber: 200,
            columnNumber: 36
          }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(i7, { size: 16, color: "currentColor" }, void 0, !1, {
            fileName: "../../components/atoms/input.jsx",
            lineNumber: 200,
            columnNumber: 82
          }, this)
        },
        void 0,
        !1,
        {
          fileName: "../../components/atoms/input.jsx",
          lineNumber: 190,
          columnNumber: 59
        },
        this
      )
    ] }, void 0, !0, {
      fileName: "../../components/atoms/input.jsx",
      lineNumber: 129,
      columnNumber: 7
    }, this),
    props.message && /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)("div", { className: (0, import_classnames2.default)("bodySm", {
      "text-text-danger": props.error,
      "text-text-default": !props.error
    }), children: props.message }, void 0, !1, {
      fileName: "../../components/atoms/input.jsx",
      lineNumber: 206,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "../../components/atoms/input.jsx",
    lineNumber: 119,
    columnNumber: 5
  }, this);
}), TextInput = (props = { label, disabled, extra, placeholder, value: "", onChange, error, message, prefix, suffix, showclear, className }) => {
  let ref = (0, import_react57.useRef)(null);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(TextInputBase, { ...props, component: "input", ref, type: "text" }, void 0, !1, {
    fileName: "../../components/atoms/input.jsx",
    lineNumber: 219,
    columnNumber: 10
  }, this);
};
var PasswordInput = (props = { label, disabled, extra, placeholder, value: "", onChange, error, message, className }) => {
  let ref = (0, import_react57.useRef)(null);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime5.jsxDEV)(TextInputBase, { ...props, component: "input", ref, type: "password" }, void 0, !1, {
    fileName: "../../components/atoms/input.jsx",
    lineNumber: 229,
    columnNumber: 10
  }, this);
}, BaseInputProps = {
  label: import_prop_types2.default.string,
  placeholder: import_prop_types2.default.string,
  value: import_prop_types2.default.string,
  onChange: import_prop_types2.default.func,
  error: import_prop_types2.default.bool,
  message: import_prop_types2.default.string,
  extra: import_prop_types2.default.elementType,
  className: import_prop_types2.default.string,
  disabled: import_prop_types2.default.bool
};
TextInput.propTypes = {
  ...BaseInputProps,
  prefix: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.object]),
  suffix: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.object])
};
TextInput.propTypes = {
  ...BaseInputProps
};
NumberInput.propTypes = {
  ...BaseInputProps
};
TextInput.defaultProps = {
  placeholder: "Placeholder",
  value: "",
  disabled: !1
};

// app/pages/settings/billing.jsx
var import_jsx_dev_runtime6 = __toESM(require_jsx_dev_runtime()), BillingSettings = ({}) => /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("div", { className: "flex-1 flex flex-col gap-10", children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("div", { className: "border border-border-default rounded-md p-5 flex flex-col gap-5", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("span", { className: "text-text-default headingMd", children: "Configure" }, void 0, !1, {
      fileName: "app/pages/settings/billing.jsx",
      lineNumber: 7,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("div", { className: "flex flex-row gap-x-5", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)(TextInput, { label: "Company name", placeholder: "Company name", className: "flex-1" }, void 0, !1, {
        fileName: "app/pages/settings/billing.jsx",
        lineNumber: 9,
        columnNumber: 17
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)(TextInput, { label: "Invoice email recipient", placeholder: "Invoice email recipient", className: "flex-1" }, void 0, !1, {
        fileName: "app/pages/settings/billing.jsx",
        lineNumber: 10,
        columnNumber: 17
      }, this)
    ] }, void 0, !0, {
      fileName: "app/pages/settings/billing.jsx",
      lineNumber: 8,
      columnNumber: 13
    }, this)
  ] }, void 0, !0, {
    fileName: "app/pages/settings/billing.jsx",
    lineNumber: 6,
    columnNumber: 9
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("div", { className: "border border-border-danger rounded-md p-5 flex items-start flex-col gap-5", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("span", { className: "text-text-default headingMd", children: "Delete Account" }, void 0, !1, {
      fileName: "app/pages/settings/billing.jsx",
      lineNumber: 14,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)("p", { children: "Permanently remove your personal account and all of its contents from the Kloudlite platform. This action is not reversible, so please continue with caution." }, void 0, !1, {
      fileName: "app/pages/settings/billing.jsx",
      lineNumber: 15,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime6.jsxDEV)(Button, { variant: "critical", label: "Delete" }, void 0, !1, {
      fileName: "app/pages/settings/billing.jsx",
      lineNumber: 18,
      columnNumber: 13
    }, this)
  ] }, void 0, !0, {
    fileName: "app/pages/settings/billing.jsx",
    lineNumber: 13,
    columnNumber: 9
  }, this)
] }, void 0, !0, {
  fileName: "app/pages/settings/billing.jsx",
  lineNumber: 5,
  columnNumber: 12
}, this), billing_default = BillingSettings;

// app/routes/console.settings.billing.jsx
var import_jsx_dev_runtime7 = __toESM(require_jsx_dev_runtime());
function ConsoleSettingsBilling() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime7.jsxDEV)(billing_default, {}, void 0, !1, {
    fileName: "app/routes/console.settings.billing.jsx",
    lineNumber: 4,
    columnNumber: 12
  }, this);
}

// app/routes/console.settings.general.jsx
var console_settings_general_exports = {};
__export(console_settings_general_exports, {
  default: () => ConsoleSettingsGeneral
});

// ../../components/atoms/avatar.jsx
var import_react58 = __toESM(require_react(), 1), import_prop_types3 = __toESM(require_prop_types(), 1), import_classnames3 = __toESM(require_classnames(), 1);
var import_jsx_dev_runtime8 = __toESM(require_jsx_dev_runtime(), 1), colors = {
  one: [
    "#D4D4D8",
    "#FFFFFF",
    "#8C9196",
    "#111827"
  ],
  two: [
    "#D97706",
    "#FDE68A",
    "#b45309",
    "#b45309"
  ],
  three: [
    "#16A34A",
    "#BBF7D0",
    "#15803d",
    "#15803d"
  ],
  four: [
    "#DC2626",
    "#FECACA",
    "#B91C1C",
    "#B91C1C"
  ],
  five: [
    "#0d9488",
    "#99F6E4",
    "#0f766e",
    "#0f766e"
  ]
}, AvatarBase = ({ label: label2, size: size2, color: color2, onClick, avatarRef, renderAs = "button" }) => {
  let ab = () => label2.split(" ").map((word) => word.charAt(0).toUpperCase()).join(""), Component = renderAs, props = {};
  return renderAs === "button" ? (Component = AriaButton, props.onPress = onClick, props.buttonRef = avatarRef) : props.ref = avatarRef, /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)(
    Component,
    {
      className: (0, import_classnames3.default)(
        "relative",
        "ring-offset-1 outline-none focus:ring-2 transition-all focus:ring-border-focus",
        "rounded-full",
        {
          "w-16 h-16": size2 === "large",
          "w-10 h-10": size2 === "medium",
          "w-8 h-8": size2 === "small",
          "w-6 h-6": size2 === "extra-small"
        }
      ),
      ref: avatarRef,
      ...props,
      children: [
        !label2 && /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)("svg", { className: (0, import_classnames3.default)(
          {
            "w-16 h-16": size2 === "large",
            "w-10 h-10": size2 === "medium",
            "w-8 h-8": size2 === "small",
            "w-6 h-6": size2 === "extra-small"
          }
        ), viewBox: "0 0 62 61", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)("rect", { x: "1", y: "0.5", width: "60", height: "60", rx: "30", fill: colors[color2][1] }, void 0, !1, {
            fileName: "../../components/atoms/avatar.jsx",
            lineNumber: 85,
            columnNumber: 7
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M31.0002 27.3571C36.0446 27.3571 40.1339 23.1358 40.1339 17.9286C40.1339 12.7213 36.0446 8.5 31.0002 8.5C25.9558 8.5 21.8665 12.7213 21.8665 17.9286C21.8665 23.1358 25.9558 27.3571 31.0002 27.3571ZM31.0002 52.5C38.6749 52.5 45.5322 48.8162 50 43.0717C45.5322 37.3269 38.6747 33.6429 30.9998 33.6429C23.3251 33.6429 16.4678 37.3267 12 43.0712C16.4678 48.816 23.3253 52.5 31.0002 52.5Z", fill: colors[color2][2] }, void 0, !1, {
            fileName: "../../components/atoms/avatar.jsx",
            lineNumber: 86,
            columnNumber: 7
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)("rect", { x: "1", y: "0.5", width: "60", height: "60", rx: "30", stroke: colors[color2][0] }, void 0, !1, {
            fileName: "../../components/atoms/avatar.jsx",
            lineNumber: 87,
            columnNumber: 7
          }, this)
        ] }, void 0, !0, {
          fileName: "../../components/atoms/avatar.jsx",
          lineNumber: 77,
          columnNumber: 16
        }, this),
        label2 && /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)("div", { className: (0, import_classnames3.default)(
          {
            "w-16 h-16": size2 === "large",
            "w-10 h-10": size2 === "medium",
            "w-8 h-8": size2 === "small",
            "w-6 h-6": size2 === "extra-small"
          },
          "relative"
        ), children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)("svg", { className: (0, import_classnames3.default)(
            {
              "w-16 h-16": size2 === "large",
              "w-10 h-10": size2 === "medium",
              "w-8 h-8": size2 === "small",
              "w-6 h-6": size2 === "extra-small"
            }
          ), viewBox: "0 0 62 61", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)("rect", { x: "1", y: "0.5", width: "60", height: "60", rx: "30", fill: colors[color2][1] }, void 0, !1, {
              fileName: "../../components/atoms/avatar.jsx",
              lineNumber: 106,
              columnNumber: 11
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)("rect", { x: "1", y: "0.5", width: "60", height: "60", rx: "30", stroke: colors[color2][0] }, void 0, !1, {
              fileName: "../../components/atoms/avatar.jsx",
              lineNumber: 107,
              columnNumber: 11
            }, this)
          ] }, void 0, !0, {
            fileName: "../../components/atoms/avatar.jsx",
            lineNumber: 98,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)("div", { className: (0, import_classnames3.default)("absolute top-0 bottom-0 left-0 right-0 flex justify-center items-center", {
            headingLg: size2 === "large",
            bodyLg: size2 === "medium" || size2 === "small",
            bodySm: size2 === "extra-small"
          }), style: { color: colors[color2][3] }, children: ab() }, void 0, !1, {
            fileName: "../../components/atoms/avatar.jsx",
            lineNumber: 109,
            columnNumber: 9
          }, this)
        ] }, void 0, !0, {
          fileName: "../../components/atoms/avatar.jsx",
          lineNumber: 90,
          columnNumber: 7
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "../../components/atoms/avatar.jsx",
      lineNumber: 60,
      columnNumber: 10
    },
    this
  );
}, Avatar = ({ label: label2, size: size2, color: color2, onClick, avatarRef }) => /* @__PURE__ */ (0, import_jsx_dev_runtime8.jsxDEV)(AvatarBase, { label: label2, size: size2, color: color2, onClick, avatarRef, renderAs: "button" }, void 0, !1, {
  fileName: "../../components/atoms/avatar.jsx",
  lineNumber: 120,
  columnNumber: 10
}, this);
Avatar.propTypes = {
  label: import_prop_types3.default.string.isRequired,
  size: import_prop_types3.default.oneOf([
    "large",
    "medium",
    "small",
    "extra-small"
  ]),
  color: import_prop_types3.default.oneOf([
    "one",
    "two",
    "three",
    "four",
    "five"
  ])
};
Avatar.defaultProps = {
  label: "test",
  size: "medium",
  color: "one"
};

// app/pages/settings/general.jsx
var import_jsx_dev_runtime9 = __toESM(require_jsx_dev_runtime()), GeneralSettings = ({}) => /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)("div", { className: "flex-1 flex flex-col gap-10", children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)("div", { className: "border border-border-default rounded-md p-5 flex flex-col gap-5", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)("span", { className: "text-text-default headingMd", children: "Profile" }, void 0, !1, {
      fileName: "app/pages/settings/general.jsx",
      lineNumber: 8,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)("div", { className: "flex flex-row gap-x-5 items-center", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)(Avatar, { size: "large", color: "one", label: "" }, void 0, !1, {
        fileName: "app/pages/settings/general.jsx",
        lineNumber: 10,
        columnNumber: 17
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)(Button, { label: "Upload photo", variant: "basic" }, void 0, !1, {
        fileName: "app/pages/settings/general.jsx",
        lineNumber: 11,
        columnNumber: 17
      }, this)
    ] }, void 0, !0, {
      fileName: "app/pages/settings/general.jsx",
      lineNumber: 9,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)(TextInput, { label: "Team name", placeholder: "Astroman" }, void 0, !1, {
      fileName: "app/pages/settings/general.jsx",
      lineNumber: 13,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)("div", { className: "flex flex-row gap-x-5", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)(TextInput, { label: "Team URL", placeholder: "team url", prefix: "kloudlite.com/", message: "This is your URL namespace within Kloudlite", className: "flex-1" }, void 0, !1, {
        fileName: "app/pages/settings/general.jsx",
        lineNumber: 15,
        columnNumber: 17
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)(TextInput, { label: "Team ID", placeholder: "team id", message: "Used when interacting with the Kloudlite API", className: "flex-1" }, void 0, !1, {
        fileName: "app/pages/settings/general.jsx",
        lineNumber: 16,
        columnNumber: 17
      }, this)
    ] }, void 0, !0, {
      fileName: "app/pages/settings/general.jsx",
      lineNumber: 14,
      columnNumber: 13
    }, this)
  ] }, void 0, !0, {
    fileName: "app/pages/settings/general.jsx",
    lineNumber: 7,
    columnNumber: 9
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)("div", { className: "border border-border-danger rounded-md p-5 flex items-start flex-col gap-5", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)("span", { className: "text-text-default headingMd", children: "Delete Account" }, void 0, !1, {
      fileName: "app/pages/settings/general.jsx",
      lineNumber: 20,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)("p", { children: "Permanently remove your personal account and all of its contents from the Kloudlite platform. This action is not reversible, so please continue with caution." }, void 0, !1, {
      fileName: "app/pages/settings/general.jsx",
      lineNumber: 21,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime9.jsxDEV)(Button, { variant: "critical", label: "Delete" }, void 0, !1, {
      fileName: "app/pages/settings/general.jsx",
      lineNumber: 24,
      columnNumber: 13
    }, this)
  ] }, void 0, !0, {
    fileName: "app/pages/settings/general.jsx",
    lineNumber: 19,
    columnNumber: 9
  }, this)
] }, void 0, !0, {
  fileName: "app/pages/settings/general.jsx",
  lineNumber: 6,
  columnNumber: 12
}, this), general_default = GeneralSettings;

// app/routes/console.settings.general.jsx
var import_jsx_dev_runtime10 = __toESM(require_jsx_dev_runtime());
function ConsoleSettingsGeneral() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime10.jsxDEV)(general_default, {}, void 0, !1, {
    fileName: "app/routes/console.settings.general.jsx",
    lineNumber: 4,
    columnNumber: 12
  }, this);
}

// app/routes/_auth.forgotpassword.jsx
var auth_forgotpassword_exports = {};
__export(auth_forgotpassword_exports, {
  default: () => AuthLogin
});
var import_classnames4 = __toESM(require_classnames());

// ../../components/branding/brand-logo.jsx
var import_prop_types4 = __toESM(require_prop_types(), 1), import_jsx_dev_runtime11 = __toESM(require_jsx_dev_runtime(), 1), Logo = ({ size: size2, darkBg }) => /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)(import_jsx_dev_runtime11.Fragment, { children: [
  !darkBg && /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("svg", { height: size2, viewBox: "0 0 90 90", fill: "none", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("path", { d: "M36.5546 45.7965C36.0525 45.2945 36.0525 44.4805 36.5546 43.9785L62.3723 18.1608C62.8743 17.6587 63.6883 17.6587 64.1904 18.1608L90.0082 43.9786C90.5103 44.4807 90.5103 45.2946 90.0082 45.7967L64.1905 71.6144C63.6885 72.1164 62.8745 72.1164 62.3724 71.6144L36.5546 45.7965Z", fill: "#2563EB" }, void 0, !1, {
      fileName: "../../components/branding/brand-logo.jsx",
      lineNumber: 8,
      columnNumber: 17
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("path", { d: "M46.5887 0.376535C46.0867 -0.125511 45.2727 -0.125512 44.7707 0.376534L1.05622 44.091C0.554176 44.593 0.554176 45.407 1.05622 45.909L44.7707 89.6235C45.2727 90.1255 46.0867 90.1255 46.5887 89.6235L53.7942 82.418C54.2962 81.9159 54.2962 81.102 53.7942 80.5999L18.9358 45.7415C18.4337 45.2395 18.4337 44.4255 18.9358 43.9234L53.6267 9.23255C54.1287 8.7305 54.1287 7.91652 53.6267 7.41448L46.5887 0.376535Z", fill: "#2563EB" }, void 0, !1, {
      fileName: "../../components/branding/brand-logo.jsx",
      lineNumber: 9,
      columnNumber: 17
    }, this)
  ] }, void 0, !0, {
    fileName: "../../components/branding/brand-logo.jsx",
    lineNumber: 7,
    columnNumber: 13
  }, this),
  darkBg && /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("svg", { height: size2, viewBox: "0 0 90 90", fill: "none", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("path", { d: "M36.0546 45.7965C35.5525 45.2945 35.5525 44.4805 36.0546 43.9785L61.8723 18.1608C62.3743 17.6587 63.1883 17.6587 63.6904 18.1608L89.5082 43.9786C90.0103 44.4807 90.0103 45.2946 89.5082 45.7967L63.6905 71.6144C63.1885 72.1164 62.3745 72.1164 61.8724 71.6144L36.0546 45.7965Z", fill: "white" }, void 0, !1, {
      fileName: "../../components/branding/brand-logo.jsx",
      lineNumber: 15,
      columnNumber: 17
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("path", { d: "M46.0887 0.376535C45.5867 -0.125511 44.7727 -0.125512 44.2707 0.376534L0.556222 44.091C0.0541762 44.593 0.0541759 45.407 0.556222 45.909L44.2707 89.6235C44.7727 90.1255 45.5867 90.1255 46.0887 89.6235L53.2942 82.418C53.7962 81.9159 53.7962 81.102 53.2942 80.5999L18.4358 45.7415C17.9337 45.2395 17.9337 44.4255 18.4358 43.9234L53.1267 9.23255C53.6287 8.7305 53.6287 7.91652 53.1267 7.41448L46.0887 0.376535Z", fill: "white" }, void 0, !1, {
      fileName: "../../components/branding/brand-logo.jsx",
      lineNumber: 16,
      columnNumber: 17
    }, this)
  ] }, void 0, !0, {
    fileName: "../../components/branding/brand-logo.jsx",
    lineNumber: 14,
    columnNumber: 13
  }, this)
] }, void 0, !0, {
  fileName: "../../components/branding/brand-logo.jsx",
  lineNumber: 4,
  columnNumber: 12
}, this), DetailedLogo = ({ size: size2, darkBg }) => /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)(import_jsx_dev_runtime11.Fragment, { children: [
  !darkBg && /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("svg", { height: size2, viewBox: "0 0 463 90", fill: "none", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("path", { d: "M36.5546 45.7965C36.0525 45.2945 36.0525 44.4805 36.5546 43.9785L62.3723 18.1608C62.8743 17.6587 63.6883 17.6587 64.1904 18.1608L90.0082 43.9786C90.5103 44.4807 90.5103 45.2946 90.0082 45.7967L64.1905 71.6144C63.6885 72.1164 62.8745 72.1164 62.3724 71.6144L36.5546 45.7965Z", fill: "#2563EB" }, void 0, !1, {
      fileName: "../../components/branding/brand-logo.jsx",
      lineNumber: 27,
      columnNumber: 17
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("path", { d: "M46.5887 0.376535C46.0867 -0.125511 45.2727 -0.125512 44.7707 0.376534L1.05622 44.091C0.554176 44.593 0.554176 45.407 1.05622 45.909L44.7707 89.6235C45.2727 90.1255 46.0867 90.1255 46.5887 89.6235L53.7942 82.418C54.2962 81.9159 54.2962 81.102 53.7942 80.5999L18.9358 45.7415C18.4337 45.2395 18.4337 44.4255 18.9358 43.9234L53.6267 9.23255C54.1287 8.7305 54.1287 7.91652 53.6267 7.41448L46.5887 0.376535Z", fill: "#2563EB" }, void 0, !1, {
      fileName: "../../components/branding/brand-logo.jsx",
      lineNumber: 28,
      columnNumber: 17
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M114.385 7V83H127.618V59.3079L144.587 83H159.528L139.678 55.2524L159.101 29.1424H144.16L127.618 51.5172V7H114.385ZM377.199 29.0521H363.403V83H377.199V29.0521ZM363.403 7.01953V21.0213H377.199V7.01953H363.403ZM163.325 7.02761L163.642 83H177.437L177.121 7.02761H163.325ZM207.021 29.0521C198.51 29.0521 192.435 31.4201 188.798 36.1559C185.16 40.8232 183.341 47.4123 183.341 55.9231C183.341 73.9744 191.234 83 207.021 83C222.807 83 230.7 73.9744 230.7 55.9231C230.7 47.4123 228.881 40.8232 225.243 36.1559C221.606 31.4201 215.531 29.0521 207.021 29.0521ZM207.021 71.2633C203.383 71.2633 200.843 70.0278 199.402 67.5569C198.029 65.086 197.343 61.2081 197.343 55.9231C197.343 50.6381 198.029 46.7945 199.402 44.3923C200.843 41.99 203.383 40.7889 207.021 40.7889C210.658 40.7889 213.164 41.99 214.536 44.3923C215.978 46.7945 216.698 50.6381 216.698 55.9231C216.698 61.2081 215.978 65.086 214.536 67.5569C213.164 70.0278 210.658 71.2633 207.021 71.2633ZM267.559 29.0521H281.354V83H267.661V78.8819C262.72 81.6273 258.43 83 254.792 83C247.654 83 242.85 81.0439 240.379 77.1317C237.908 73.1508 236.672 66.5274 236.672 57.2615V29.0521H250.468V57.4674C250.468 62.5465 250.88 66.0126 251.704 67.8658C252.527 69.719 254.518 70.6455 257.675 70.6455C260.695 70.6455 263.543 70.1651 266.22 69.2042L267.559 68.7924V29.0521ZM333.41 83L333.409 7.02761H319.614L319.614 30.4935L317.658 30.0817C313.746 29.3953 310.691 29.0521 308.495 29.0521C301.357 29.0521 296.003 31.2141 292.434 35.5382C288.934 39.7937 287.183 46.6229 287.183 56.0261C287.183 65.3606 288.659 72.1898 291.61 76.5139C294.562 80.838 299.778 83 307.259 83C310.76 83 314.912 81.8675 319.717 79.6026V83H333.41ZM319.614 69.1012L318.173 69.4101C315.015 70.2337 311.995 70.6455 309.113 70.6455C306.299 70.6455 304.274 69.5131 303.038 67.2481C301.803 64.9831 301.185 61.1738 301.185 55.8202C301.185 45.9366 303.965 40.9948 309.524 40.9948C312.476 40.9948 315.839 41.338 319.614 42.0243V69.1012ZM341.524 83L341.524 7.02761H355.319L355.32 83H341.524ZM413.212 42.0243H400.549V63.1299C400.549 65.189 400.583 66.6647 400.652 67.5569C400.789 68.3806 401.167 69.1012 401.784 69.719C402.471 70.3367 403.5 70.6455 404.873 70.6455L412.698 70.4396L413.315 81.4557C408.717 82.4853 405.216 83 402.814 83C396.637 83 392.416 81.6273 390.151 78.8819C387.886 76.0678 386.753 70.9201 386.753 63.4388V42.0243V29.0521V7.01953H400.549V29.0521H413.212V42.0243ZM433.992 68.7924C432.414 67.351 431.59 65.0517 431.521 61.8944H461.79L462.819 52.3197C462.819 36.808 455.338 29.0521 440.375 29.0521C425.207 29.0521 417.623 38.2837 417.623 56.7468C417.623 66.0126 419.373 72.7046 422.873 76.8228C426.374 80.941 432.002 83 439.758 83C446.141 83 453.279 82.0391 461.172 80.1173L460.966 69.9249L458.083 70.2337C453.073 70.6455 447.376 70.8515 440.993 70.8515C437.973 70.8515 435.639 70.1651 433.992 68.7924ZM447.273 42.848C448.577 44.4266 449.229 47.275 449.229 51.3931H431.418C431.487 47.4123 432.173 44.5982 433.477 42.9509C434.85 41.235 437.149 40.3771 440.375 40.3771C443.67 40.3771 445.969 41.2007 447.273 42.848Z", fill: "#2563EB" }, void 0, !1, {
      fileName: "../../components/branding/brand-logo.jsx",
      lineNumber: 29,
      columnNumber: 17
    }, this)
  ] }, void 0, !0, {
    fileName: "../../components/branding/brand-logo.jsx",
    lineNumber: 26,
    columnNumber: 13
  }, this),
  darkBg && /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("svg", { height: size2, viewBox: "0 0 463 90", fill: "none", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("path", { d: "M36.0546 45.7965C35.5525 45.2945 35.5525 44.4805 36.0546 43.9785L61.8723 18.1608C62.3743 17.6587 63.1883 17.6587 63.6904 18.1608L89.5082 43.9786C90.0103 44.4807 90.0103 45.2946 89.5082 45.7967L63.6905 71.6144C63.1885 72.1164 62.3745 72.1164 61.8724 71.6144L36.0546 45.7965Z", fill: "white" }, void 0, !1, {
      fileName: "../../components/branding/brand-logo.jsx",
      lineNumber: 35,
      columnNumber: 17
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("path", { d: "M46.0887 0.376535C45.5867 -0.125511 44.7727 -0.125512 44.2707 0.376534L0.556222 44.091C0.0541762 44.593 0.0541759 45.407 0.556222 45.909L44.2707 89.6235C44.7727 90.1255 45.5867 90.1255 46.0887 89.6235L53.2942 82.418C53.7962 81.9159 53.7962 81.102 53.2942 80.5999L18.4358 45.7415C17.9337 45.2395 17.9337 44.4255 18.4358 43.9234L53.1267 9.23255C53.6287 8.7305 53.6287 7.91652 53.1267 7.41448L46.0887 0.376535Z", fill: "white" }, void 0, !1, {
      fileName: "../../components/branding/brand-logo.jsx",
      lineNumber: 36,
      columnNumber: 17
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M113.885 7V83H127.118V59.3079L144.087 83H159.028L139.178 55.2524L158.601 29.1424H143.66L127.118 51.5172V7H113.885ZM376.699 29.0521H362.903V83H376.699V29.0521ZM362.903 7.01953V21.0213H376.699V7.01953H362.903ZM162.825 7.02761L163.142 83H176.937L176.621 7.02761H162.825ZM206.521 29.0521C198.01 29.0521 191.935 31.4201 188.298 36.1559C184.66 40.8232 182.841 47.4123 182.841 55.9231C182.841 73.9744 190.734 83 206.521 83C222.307 83 230.2 73.9744 230.2 55.9231C230.2 47.4123 228.381 40.8232 224.743 36.1559C221.106 31.4201 215.031 29.0521 206.521 29.0521ZM206.521 71.2633C202.883 71.2633 200.343 70.0278 198.902 67.5569C197.529 65.086 196.843 61.2081 196.843 55.9231C196.843 50.6381 197.529 46.7945 198.902 44.3923C200.343 41.99 202.883 40.7889 206.521 40.7889C210.158 40.7889 212.664 41.99 214.036 44.3923C215.478 46.7945 216.198 50.6381 216.198 55.9231C216.198 61.2081 215.478 65.086 214.036 67.5569C212.664 70.0278 210.158 71.2633 206.521 71.2633ZM267.059 29.0521H280.854V83H267.161V78.8819C262.22 81.6273 257.93 83 254.292 83C247.154 83 242.35 81.0439 239.879 77.1317C237.408 73.1508 236.172 66.5274 236.172 57.2615V29.0521H249.968V57.4674C249.968 62.5465 250.38 66.0126 251.204 67.8658C252.027 69.719 254.018 70.6455 257.175 70.6455C260.195 70.6455 263.043 70.1651 265.72 69.2042L267.059 68.7924V29.0521ZM332.91 83L332.909 7.02761H319.114L319.114 30.4935L317.158 30.0817C313.246 29.3953 310.191 29.0521 307.995 29.0521C300.857 29.0521 295.503 31.2141 291.934 35.5382C288.434 39.7937 286.683 46.6229 286.683 56.0261C286.683 65.3606 288.159 72.1898 291.11 76.5139C294.062 80.838 299.278 83 306.759 83C310.26 83 314.412 81.8675 319.217 79.6026V83H332.91ZM319.114 69.1012L317.673 69.4101C314.515 70.2337 311.495 70.6455 308.613 70.6455C305.799 70.6455 303.774 69.5131 302.538 67.2481C301.303 64.9831 300.685 61.1738 300.685 55.8202C300.685 45.9366 303.465 40.9948 309.024 40.9948C311.976 40.9948 315.339 41.338 319.114 42.0243V69.1012ZM341.024 83L341.024 7.02761H354.819L354.82 83H341.024ZM412.712 42.0243H400.049V63.1299C400.049 65.189 400.083 66.6647 400.152 67.5569C400.289 68.3806 400.667 69.1012 401.284 69.719C401.971 70.3367 403 70.6455 404.373 70.6455L412.198 70.4396L412.815 81.4557C408.217 82.4853 404.716 83 402.314 83C396.137 83 391.916 81.6273 389.651 78.8819C387.386 76.0678 386.253 70.9201 386.253 63.4388V42.0243V29.0521V7.01953H400.049V29.0521H412.712V42.0243ZM433.492 68.7924C431.914 67.351 431.09 65.0517 431.021 61.8944H461.29L462.319 52.3197C462.319 36.808 454.838 29.0521 439.875 29.0521C424.707 29.0521 417.123 38.2837 417.123 56.7468C417.123 66.0126 418.873 72.7046 422.373 76.8228C425.874 80.941 431.502 83 439.258 83C445.641 83 452.779 82.0391 460.672 80.1173L460.466 69.9249L457.583 70.2337C452.573 70.6455 446.876 70.8515 440.493 70.8515C437.473 70.8515 435.139 70.1651 433.492 68.7924ZM446.773 42.848C448.077 44.4266 448.729 47.275 448.729 51.3931H430.918C430.987 47.4123 431.673 44.5982 432.977 42.9509C434.35 41.235 436.649 40.3771 439.875 40.3771C443.17 40.3771 445.469 41.2007 446.773 42.848Z", fill: "white" }, void 0, !1, {
      fileName: "../../components/branding/brand-logo.jsx",
      lineNumber: 37,
      columnNumber: 17
    }, this)
  ] }, void 0, !0, {
    fileName: "../../components/branding/brand-logo.jsx",
    lineNumber: 34,
    columnNumber: 13
  }, this)
] }, void 0, !0, {
  fileName: "../../components/branding/brand-logo.jsx",
  lineNumber: 23,
  columnNumber: 12
}, this), BrandLogo = ({ size: size2, darkBg, detailed }) => /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)(import_jsx_dev_runtime11.Fragment, { children: [
  detailed && /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)(DetailedLogo, { size: size2, darkBg }, void 0, !1, {
    fileName: "../../components/branding/brand-logo.jsx",
    lineNumber: 46,
    columnNumber: 25
  }, this),
  !detailed && /* @__PURE__ */ (0, import_jsx_dev_runtime11.jsxDEV)(Logo, { size: size2, darkBg }, void 0, !1, {
    fileName: "../../components/branding/brand-logo.jsx",
    lineNumber: 49,
    columnNumber: 26
  }, this)
] }, void 0, !0, {
  fileName: "../../components/branding/brand-logo.jsx",
  lineNumber: 44,
  columnNumber: 12
}, this);
BrandLogo.propTypes = {
  size: import_prop_types4.default.number,
  darkBg: import_prop_types4.default.bool,
  detailed: import_prop_types4.default.bool
};
BrandLogo.defaultProps = {
  size: 24,
  darkBg: !1,
  detailed: !1
};

// app/routes/_auth.forgotpassword.jsx
var import_react_router_dom = __toESM(require_main2());
var import_jsx_dev_runtime12 = __toESM(require_jsx_dev_runtime());
function AuthLogin({}) {
  let [searchParams, setSearchParams] = (0, import_react_router_dom.useSearchParams)();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("div", { className: (0, import_classnames4.default)("flex flex-col items-center justify-center h-full"), children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("div", { className: (0, import_classnames4.default)("flex flex-1 flex-col items-center self-stretch justify-center px-5 pb-8 border-b border-border-default md:py-37.5"), children: /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("div", { className: "flex flex-col items-stretch justify-center gap-8 md:w-[400px]", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(BrandLogo, { darkBg: !1, size: 60 }, void 0, !1, {
        fileName: "app/routes/_auth.forgotpassword.jsx",
        lineNumber: 13,
        columnNumber: 17
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("div", { className: "flex flex-col items-stretch gap-8 pb-8", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("div", { className: "flex flex-col gap-2 items-center md:px-12", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("div", { className: (0, import_classnames4.default)("text-text-strong heading3xl text-center"), children: "Forgot password" }, void 0, !1, {
            fileName: "app/routes/_auth.forgotpassword.jsx",
            lineNumber: 16,
            columnNumber: 25
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("div", { className: "text-text-soft bodySm text-center", children: "Enter your registered email below to receive password reset instruction." }, void 0, !1, {
            fileName: "app/routes/_auth.forgotpassword.jsx",
            lineNumber: 17,
            columnNumber: 25
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_auth.forgotpassword.jsx",
          lineNumber: 15,
          columnNumber: 21
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("div", { className: "flex flex-col items-stretch gap-5", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(TextInput, { label: "Email", placeholder: "zuko@example.com" }, void 0, !1, {
            fileName: "app/routes/_auth.forgotpassword.jsx",
            lineNumber: 20,
            columnNumber: 25
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(Button, { size: "large", variant: "primary", label: "Send instructions", DisclosureComp: i4 }, void 0, !1, {
            fileName: "app/routes/_auth.forgotpassword.jsx",
            lineNumber: 21,
            columnNumber: 25
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_auth.forgotpassword.jsx",
          lineNumber: 19,
          columnNumber: 21
        }, this)
      ] }, void 0, !0, {
        fileName: "app/routes/_auth.forgotpassword.jsx",
        lineNumber: 14,
        columnNumber: 17
      }, this)
    ] }, void 0, !0, {
      fileName: "app/routes/_auth.forgotpassword.jsx",
      lineNumber: 12,
      columnNumber: 13
    }, this) }, void 0, !1, {
      fileName: "app/routes/_auth.forgotpassword.jsx",
      lineNumber: 11,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("div", { className: "py-8  px-5 flex flex-row items-center justify-center self-stretch", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)("div", { className: "bodyMd text-text-default", children: "Remember password?" }, void 0, !1, {
        fileName: "app/routes/_auth.forgotpassword.jsx",
        lineNumber: 27,
        columnNumber: 13
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime12.jsxDEV)(Button, { label: "Login", variant: "primary-plain", size: "medium", href: "/login" }, void 0, !1, {
        fileName: "app/routes/_auth.forgotpassword.jsx",
        lineNumber: 28,
        columnNumber: 13
      }, this)
    ] }, void 0, !0, {
      fileName: "app/routes/_auth.forgotpassword.jsx",
      lineNumber: 26,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/routes/_auth.forgotpassword.jsx",
    lineNumber: 10,
    columnNumber: 12
  }, this);
}

// app/routes/console.newproject.jsx
var console_newproject_exports = {};
__export(console_newproject_exports, {
  default: () => ConsoleNewProject
});

// app/pages/new-project.jsx
var import_react72 = __toESM(require_react());

// ../../components/organisms/contextual-save-bar.jsx
var import_classnames5 = __toESM(require_classnames(), 1);
var import_jsx_dev_runtime13 = __toESM(require_jsx_dev_runtime(), 1), ContextualSaveBar = ({ logo, logoWidth, message: message2, saveAction, discardAction, fullwidth, fixed }) => /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: (0, import_classnames5.default)(
  "bg-surface-secondary-pressed py-3 px-5",
  {
    "fixed top-0 left-0 right-0": fixed
  }
), children: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "flex flex-row items-center justify-between  max-w-296 m-auto", children: [
  logo && /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "hidden md:block lg:block xl:block", width: logoWidth || 124, children: logo }, void 0, !1, {
    fileName: "../../components/organisms/contextual-save-bar.jsx",
    lineNumber: 11,
    columnNumber: 22
  }, this),
  message2 && /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "headingMd text-text-on-primary font-sans-serif", children: message2 }, void 0, !1, {
    fileName: "../../components/organisms/contextual-save-bar.jsx",
    lineNumber: 14,
    columnNumber: 25
  }, this),
  logo && /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(import_jsx_dev_runtime13.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", {}, void 0, !1, {
      fileName: "../../components/organisms/contextual-save-bar.jsx",
      lineNumber: 16,
      columnNumber: 17
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", {}, void 0, !1, {
      fileName: "../../components/organisms/contextual-save-bar.jsx",
      lineNumber: 17,
      columnNumber: 17
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", {}, void 0, !1, {
      fileName: "../../components/organisms/contextual-save-bar.jsx",
      lineNumber: 18,
      columnNumber: 17
    }, this)
  ] }, void 0, !0, {
    fileName: "../../components/organisms/contextual-save-bar.jsx",
    lineNumber: 15,
    columnNumber: 22
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)("div", { className: "gap-x-2 flex flex-row items-center", children: [
    discardAction && /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Button, { label: "Discard", onClick: discardAction, style: "secondary-outline" }, void 0, !1, {
      fileName: "../../components/organisms/contextual-save-bar.jsx",
      lineNumber: 21,
      columnNumber: 35
    }, this),
    saveAction && /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(Button, { label: "Save", onClick: saveAction, style: "basic" }, void 0, !1, {
      fileName: "../../components/organisms/contextual-save-bar.jsx",
      lineNumber: 22,
      columnNumber: 32
    }, this)
  ] }, void 0, !0, {
    fileName: "../../components/organisms/contextual-save-bar.jsx",
    lineNumber: 20,
    columnNumber: 13
  }, this)
] }, void 0, !0, {
  fileName: "../../components/organisms/contextual-save-bar.jsx",
  lineNumber: 10,
  columnNumber: 9
}, this) }, void 0, !1, {
  fileName: "../../components/organisms/contextual-save-bar.jsx",
  lineNumber: 6,
  columnNumber: 12
}, this);
ContextualSaveBar.defaultProps = {
  imageWidth: 124,
  logo: /* @__PURE__ */ (0, import_jsx_dev_runtime13.jsxDEV)(BrandLogo, { detailed: !0, darkBg: !0, size: 20 }, void 0, !1, {
    fileName: "../../components/organisms/contextual-save-bar.jsx",
    lineNumber: 33,
    columnNumber: 11
  }, this),
  message: "Unsaved changes",
  saveAction: (e24) => {
    console.log(e24);
  },
  discardAction: (e24) => {
  }
};

// ../../components/organisms/progress-tracker.jsx
var import_classnames6 = __toESM(require_classnames(), 1), import_prop_types5 = __toESM(require_prop_types(), 1), import_jsx_dev_runtime14 = __toESM(require_jsx_dev_runtime(), 1), trackerLineColor = "#D4D4D8", ProgressTrackerItem = ({ label: label2, active }) => /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("div", { className: (0, import_classnames6.default)(
  "flex flex-row gap-x-3 items-center",
  {
    "bodyMd-semibold text-text-default": active,
    "bodyMd text-text-disabled": !active
  }
), children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("div", { className: (0, import_classnames6.default)("w-2.5 h-2.5 rounded-full flex items-center justify-center"), children: /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("div", { className: (0, import_classnames6.default)(
    "rounded-full",
    {
      "bg-icon-primary w-2.5 h-2.5": active,
      "bg-icon-disabled w-1.25 h-1.25": !active
    }
  ) }, void 0, !1, {
    fileName: "../../components/organisms/progress-tracker.jsx",
    lineNumber: 15,
    columnNumber: 17
  }, this) }, void 0, !1, {
    fileName: "../../components/organisms/progress-tracker.jsx",
    lineNumber: 14,
    columnNumber: 13
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("div", { className: "py-2", children: label2 }, void 0, !1, {
    fileName: "../../components/organisms/progress-tracker.jsx",
    lineNumber: 21,
    columnNumber: 13
  }, this)
] }, void 0, !0, {
  fileName: "../../components/organisms/progress-tracker.jsx",
  lineNumber: 9,
  columnNumber: 9
}, this), ProgressTracker = ({ items }) => /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("div", { className: "flex flex-col gap-y-2", children: items && items.map((item, index2) => /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("div", { className: "flex flex-col", children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)(ProgressTrackerItem, { active: item.active, label: item.label }, void 0, !1, {
    fileName: "../../components/organisms/progress-tracker.jsx",
    lineNumber: 30,
    columnNumber: 17
  }, this),
  index2 != items.length - 1 && /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("div", { className: "flex items-center justify-center w-2.5", children: /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("svg", { width: "10", height: "35", className: "-mt-3.25 -mb-5.5", children: /* @__PURE__ */ (0, import_jsx_dev_runtime14.jsxDEV)("line", { x1: "5", y1: "1", x2: "5", y2: "34", stroke: trackerLineColor, strokeWidth: "1", strokeLinecap: "round", strokeDasharray: "3, 4" }, void 0, !1, {
    fileName: "../../components/organisms/progress-tracker.jsx",
    lineNumber: 33,
    columnNumber: 25
  }, this) }, void 0, !1, {
    fileName: "../../components/organisms/progress-tracker.jsx",
    lineNumber: 32,
    columnNumber: 21
  }, this) }, void 0, !1, {
    fileName: "../../components/organisms/progress-tracker.jsx",
    lineNumber: 31,
    columnNumber: 49
  }, this)
] }, item.key, !0, {
  fileName: "../../components/organisms/progress-tracker.jsx",
  lineNumber: 29,
  columnNumber: 20
}, this)) }, void 0, !1, {
  fileName: "../../components/organisms/progress-tracker.jsx",
  lineNumber: 27,
  columnNumber: 12
}, this);
ProgressTracker.propTypes = {
  items: import_prop_types5.default.arrayOf(import_prop_types5.default.shape({
    label: import_prop_types5.default.string.isRequired,
    active: import_prop_types5.default.bool,
    key: import_prop_types5.default.any
  })).isRequired
};
ProgressTracker.defaultProps = {
  items: [
    {
      label: "Item 1",
      active: !0
    },
    {
      label: "Item 2",
      active: !0
    },
    {
      label: "Item 3",
      active: !1
    },
    {
      label: "Item 4",
      active: !1
    },
    {
      label: "Item 5",
      active: !1
    }
  ]
};

// ../../components/atoms/checkbox.jsx
var import_prop_types6 = __toESM(require_prop_types(), 1), import_classnames7 = __toESM(require_classnames(), 1), import_react71 = __toESM(require_react(), 1);

// ../../../node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i13 = 1; i13 < arguments.length; i13++) {
      var source = arguments[i13];
      for (var key in source)
        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
    }
    return target;
  }, _extends.apply(this, arguments);
}

// ../../../node_modules/@radix-ui/react-checkbox/dist/index.mjs
var import_react70 = __toESM(require_react(), 1);

// ../../../node_modules/@radix-ui/react-compose-refs/dist/index.mjs
var import_react60 = __toESM(require_react(), 1);
function $6ed0406888f73fc4$var$setRef(ref, value) {
  typeof ref == "function" ? ref(value) : ref != null && (ref.current = value);
}
function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {
  return (node) => refs.forEach(
    (ref) => $6ed0406888f73fc4$var$setRef(ref, node)
  );
}
function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs) {
  return (0, import_react60.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af(...refs), refs);
}

// ../../../node_modules/@radix-ui/react-context/dist/index.mjs
var import_react61 = __toESM(require_react(), 1);
function $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName, createContextScopeDeps = []) {
  let defaultContexts = [];
  function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {
    let BaseContext = /* @__PURE__ */ (0, import_react61.createContext)(defaultContext), index2 = defaultContexts.length;
    defaultContexts = [
      ...defaultContexts,
      defaultContext
    ];
    function Provider(props) {
      let { scope, children, ...context } = props, Context = (scope == null ? void 0 : scope[scopeName][index2]) || BaseContext, value = (0, import_react61.useMemo)(
        () => context,
        Object.values(context)
      );
      return /* @__PURE__ */ (0, import_react61.createElement)(Context.Provider, {
        value
      }, children);
    }
    function useContext8(consumerName, scope) {
      let Context = (scope == null ? void 0 : scope[scopeName][index2]) || BaseContext, context = (0, import_react61.useContext)(Context);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    return Provider.displayName = rootComponentName + "Provider", [
      Provider,
      useContext8
    ];
  }
  let createScope = () => {
    let scopeContexts = defaultContexts.map((defaultContext) => /* @__PURE__ */ (0, import_react61.createContext)(defaultContext));
    return function(scope) {
      let contexts = (scope == null ? void 0 : scope[scopeName]) || scopeContexts;
      return (0, import_react61.useMemo)(
        () => ({
          [`__scope${scopeName}`]: {
            ...scope,
            [scopeName]: contexts
          }
        }),
        [
          scope,
          contexts
        ]
      );
    };
  };
  return createScope.scopeName = scopeName, [
    $c512c27ab02ef895$export$fd42f52fd3ae1109,
    $c512c27ab02ef895$var$composeContextScopes(createScope, ...createContextScopeDeps)
  ];
}
function $c512c27ab02ef895$var$composeContextScopes(...scopes) {
  let baseScope = scopes[0];
  if (scopes.length === 1)
    return baseScope;
  let createScope1 = () => {
    let scopeHooks = scopes.map(
      (createScope) => ({
        useScope: createScope(),
        scopeName: createScope.scopeName
      })
    );
    return function(overrideScopes) {
      let nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
        let currentScope = useScope(overrideScopes)[`__scope${scopeName}`];
        return {
          ...nextScopes,
          ...currentScope
        };
      }, {});
      return (0, import_react61.useMemo)(
        () => ({
          [`__scope${baseScope.scopeName}`]: nextScopes1
        }),
        [
          nextScopes1
        ]
      );
    };
  };
  return createScope1.scopeName = baseScope.scopeName, createScope1;
}

// ../../../node_modules/@radix-ui/primitive/dist/index.mjs
function $e42e1063c40fb3ef$export$b9ecd428b558ff10(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = !0 } = {}) {
  return function(event) {
    if (originalEventHandler == null || originalEventHandler(event), checkForDefaultPrevented === !1 || !event.defaultPrevented)
      return ourEventHandler == null ? void 0 : ourEventHandler(event);
  };
}

// ../../../node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs
var import_react63 = __toESM(require_react(), 1);

// ../../../node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs
var import_react62 = __toESM(require_react(), 1);
function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback) {
  let callbackRef = (0, import_react62.useRef)(callback);
  return (0, import_react62.useEffect)(() => {
    callbackRef.current = callback;
  }), (0, import_react62.useMemo)(
    () => (...args) => {
      var _callbackRef$current;
      return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
    },
    []
  );
}

// ../../../node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs
function $71cd76cc60e0454e$export$6f32135080cb4c3({ prop, defaultProp, onChange: onChange2 = () => {
} }) {
  let [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState({
    defaultProp,
    onChange: onChange2
  }), isControlled = prop !== void 0, value1 = isControlled ? prop : uncontrolledProp, handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange2), setValue = (0, import_react63.useCallback)((nextValue) => {
    if (isControlled) {
      let value = typeof nextValue == "function" ? nextValue(prop) : nextValue;
      value !== prop && handleChange(value);
    } else
      setUncontrolledProp(nextValue);
  }, [
    isControlled,
    prop,
    setUncontrolledProp,
    handleChange
  ]);
  return [
    value1,
    setValue
  ];
}
function $71cd76cc60e0454e$var$useUncontrolledState({ defaultProp, onChange: onChange2 }) {
  let uncontrolledState = (0, import_react63.useState)(defaultProp), [value] = uncontrolledState, prevValueRef = (0, import_react63.useRef)(value), handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange2);
  return (0, import_react63.useEffect)(() => {
    prevValueRef.current !== value && (handleChange(value), prevValueRef.current = value);
  }, [
    value,
    prevValueRef,
    handleChange
  ]), uncontrolledState;
}

// ../../../node_modules/@radix-ui/react-use-previous/dist/index.mjs
var import_react64 = __toESM(require_react(), 1);
function $010c2913dbd2fe3d$export$5cae361ad82dce8b(value) {
  let ref = (0, import_react64.useRef)({
    value,
    previous: value
  });
  return (0, import_react64.useMemo)(() => (ref.current.value !== value && (ref.current.previous = ref.current.value, ref.current.value = value), ref.current.previous), [
    value
  ]);
}

// ../../../node_modules/@radix-ui/react-use-size/dist/index.mjs
var import_react66 = __toESM(require_react(), 1);

// ../../../node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs
var import_react65 = __toESM(require_react(), 1), $9f79659886946c16$export$e5c5a5f917a5871c = Boolean(globalThis == null ? void 0 : globalThis.document) ? import_react65.useLayoutEffect : () => {
};

// ../../../node_modules/@radix-ui/react-use-size/dist/index.mjs
function $db6c3485150b8e66$export$1ab7ae714698c4b8(element) {
  let [size2, setSize] = (0, import_react66.useState)(void 0);
  return $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (element) {
      setSize({
        width: element.offsetWidth,
        height: element.offsetHeight
      });
      let resizeObserver = new ResizeObserver((entries) => {
        if (!Array.isArray(entries) || !entries.length)
          return;
        let entry2 = entries[0], width, height;
        if ("borderBoxSize" in entry2) {
          let borderSizeEntry = entry2.borderBoxSize, borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
          width = borderSize.inlineSize, height = borderSize.blockSize;
        } else
          width = element.offsetWidth, height = element.offsetHeight;
        setSize({
          width,
          height
        });
      });
      return resizeObserver.observe(element, {
        box: "border-box"
      }), () => resizeObserver.unobserve(element);
    } else
      setSize(void 0);
  }, [
    element
  ]), size2;
}

// ../../../node_modules/@radix-ui/react-presence/dist/index.mjs
var import_react67 = __toESM(require_react(), 1), import_react_dom = __toESM(require_react_dom(), 1);
function $fe963b355347cc68$export$3e6543de14f8614f(initialState, machine) {
  return (0, import_react67.useReducer)((state, event) => {
    let nextState = machine[state][event];
    return nextState ?? state;
  }, initialState);
}
var $921a889cee6df7e8$export$99c2b779aa4e8b8b = (props) => {
  let { present, children } = props, presence = $921a889cee6df7e8$var$usePresence(present), child = typeof children == "function" ? children({
    present: presence.isPresent
  }) : import_react67.Children.only(children), ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(presence.ref, child.ref);
  return typeof children == "function" || presence.isPresent ? /* @__PURE__ */ (0, import_react67.cloneElement)(child, {
    ref
  }) : null;
};
$921a889cee6df7e8$export$99c2b779aa4e8b8b.displayName = "Presence";
function $921a889cee6df7e8$var$usePresence(present) {
  let [node1, setNode] = (0, import_react67.useState)(), stylesRef = (0, import_react67.useRef)({}), prevPresentRef = (0, import_react67.useRef)(present), prevAnimationNameRef = (0, import_react67.useRef)("none"), initialState = present ? "mounted" : "unmounted", [state, send] = $fe963b355347cc68$export$3e6543de14f8614f(initialState, {
    mounted: {
      UNMOUNT: "unmounted",
      ANIMATION_OUT: "unmountSuspended"
    },
    unmountSuspended: {
      MOUNT: "mounted",
      ANIMATION_END: "unmounted"
    },
    unmounted: {
      MOUNT: "mounted"
    }
  });
  return (0, import_react67.useEffect)(() => {
    let currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
    prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
  }, [
    state
  ]), $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    let styles = stylesRef.current, wasPresent = prevPresentRef.current;
    if (wasPresent !== present) {
      let prevAnimationName = prevAnimationNameRef.current, currentAnimationName = $921a889cee6df7e8$var$getAnimationName(styles);
      present ? send("MOUNT") : currentAnimationName === "none" || (styles == null ? void 0 : styles.display) === "none" ? send("UNMOUNT") : send(wasPresent && prevAnimationName !== currentAnimationName ? "ANIMATION_OUT" : "UNMOUNT"), prevPresentRef.current = present;
    }
  }, [
    present,
    send
  ]), $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (node1) {
      let handleAnimationEnd = (event) => {
        let isCurrentAnimation = $921a889cee6df7e8$var$getAnimationName(stylesRef.current).includes(event.animationName);
        event.target === node1 && isCurrentAnimation && (0, import_react_dom.flushSync)(
          () => send("ANIMATION_END")
        );
      }, handleAnimationStart = (event) => {
        event.target === node1 && (prevAnimationNameRef.current = $921a889cee6df7e8$var$getAnimationName(stylesRef.current));
      };
      return node1.addEventListener("animationstart", handleAnimationStart), node1.addEventListener("animationcancel", handleAnimationEnd), node1.addEventListener("animationend", handleAnimationEnd), () => {
        node1.removeEventListener("animationstart", handleAnimationStart), node1.removeEventListener("animationcancel", handleAnimationEnd), node1.removeEventListener("animationend", handleAnimationEnd);
      };
    } else
      send("ANIMATION_END");
  }, [
    node1,
    send
  ]), {
    isPresent: [
      "mounted",
      "unmountSuspended"
    ].includes(state),
    ref: (0, import_react67.useCallback)((node) => {
      node && (stylesRef.current = getComputedStyle(node)), setNode(node);
    }, [])
  };
}
function $921a889cee6df7e8$var$getAnimationName(styles) {
  return (styles == null ? void 0 : styles.animationName) || "none";
}

// ../../../node_modules/@radix-ui/react-primitive/dist/index.mjs
var import_react69 = __toESM(require_react(), 1), import_react_dom2 = __toESM(require_react_dom(), 1);

// ../../../node_modules/@radix-ui/react-slot/dist/index.mjs
var import_react68 = __toESM(require_react(), 1);
var $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /* @__PURE__ */ (0, import_react68.forwardRef)((props, forwardedRef) => {
  let { children, ...slotProps } = props, childrenArray = import_react68.Children.toArray(children), slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);
  if (slottable) {
    let newElement = slottable.props.children, newChildren = childrenArray.map((child) => child === slottable ? import_react68.Children.count(newElement) > 1 ? import_react68.Children.only(null) : /* @__PURE__ */ (0, import_react68.isValidElement)(newElement) ? newElement.props.children : null : child);
    return /* @__PURE__ */ (0, import_react68.createElement)($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
      ref: forwardedRef
    }), /* @__PURE__ */ (0, import_react68.isValidElement)(newElement) ? /* @__PURE__ */ (0, import_react68.cloneElement)(newElement, void 0, newChildren) : null);
  }
  return /* @__PURE__ */ (0, import_react68.createElement)($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
    ref: forwardedRef
  }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = "Slot";
var $5e63c961fc1ce211$var$SlotClone = /* @__PURE__ */ (0, import_react68.forwardRef)((props, forwardedRef) => {
  let { children, ...slotProps } = props;
  return /* @__PURE__ */ (0, import_react68.isValidElement)(children) ? /* @__PURE__ */ (0, import_react68.cloneElement)(children, {
    ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),
    ref: forwardedRef ? $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, children.ref) : children.ref
  }) : import_react68.Children.count(children) > 1 ? import_react68.Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone.displayName = "SlotClone";
var $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children }) => /* @__PURE__ */ (0, import_react68.createElement)(import_react68.Fragment, null, children);
function $5e63c961fc1ce211$var$isSlottable(child) {
  return /* @__PURE__ */ (0, import_react68.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;
}
function $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {
  let overrideProps = {
    ...childProps
  };
  for (let propName in childProps) {
    let slotPropValue = slotProps[propName], childPropValue = childProps[propName];
    /^on[A-Z]/.test(propName) ? slotPropValue && childPropValue ? overrideProps[propName] = (...args) => {
      childPropValue(...args), slotPropValue(...args);
    } : slotPropValue && (overrideProps[propName] = slotPropValue) : propName === "style" ? overrideProps[propName] = {
      ...slotPropValue,
      ...childPropValue
    } : propName === "className" && (overrideProps[propName] = [
      slotPropValue,
      childPropValue
    ].filter(Boolean).join(" "));
  }
  return {
    ...slotProps,
    ...overrideProps
  };
}

// ../../../node_modules/@radix-ui/react-primitive/dist/index.mjs
var $8927f6f2acc4f386$var$NODES = [
  "a",
  "button",
  "div",
  "form",
  "h2",
  "h3",
  "img",
  "input",
  "label",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
], $8927f6f2acc4f386$export$250ffa63cdc0d034 = $8927f6f2acc4f386$var$NODES.reduce((primitive, node) => {
  let Node = /* @__PURE__ */ (0, import_react69.forwardRef)((props, forwardedRef) => {
    let { asChild, ...primitiveProps } = props, Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac1360 : node;
    return (0, import_react69.useEffect)(() => {
      window[Symbol.for("radix-ui")] = !0;
    }, []), /* @__PURE__ */ (0, import_react69.createElement)(Comp, _extends({}, primitiveProps, {
      ref: forwardedRef
    }));
  });
  return Node.displayName = `Primitive.${node}`, {
    ...primitive,
    [node]: Node
  };
}, {});
function $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event) {
  target && (0, import_react_dom2.flushSync)(
    () => target.dispatchEvent(event)
  );
}

// ../../../node_modules/@radix-ui/react-checkbox/dist/index.mjs
var $e698a72e93240346$var$CHECKBOX_NAME = "Checkbox", [$e698a72e93240346$var$createCheckboxContext, $e698a72e93240346$export$b566c4ff5488ea01] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($e698a72e93240346$var$CHECKBOX_NAME), [$e698a72e93240346$var$CheckboxProvider, $e698a72e93240346$var$useCheckboxContext] = $e698a72e93240346$var$createCheckboxContext($e698a72e93240346$var$CHECKBOX_NAME), $e698a72e93240346$export$48513f6b9f8ce62d = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
  let { __scopeCheckbox, name, checked: checkedProp, defaultChecked, required, disabled: disabled2, value = "on", onCheckedChange, ...checkboxProps } = props, [button, setButton] = (0, import_react70.useState)(null), composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node) => setButton(node)
  ), hasConsumerStoppedPropagationRef = (0, import_react70.useRef)(!1), isFormControl = button ? Boolean(button.closest("form")) : !0, [checked = !1, setChecked] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: checkedProp,
    defaultProp: defaultChecked,
    onChange: onCheckedChange
  }), initialCheckedStateRef = (0, import_react70.useRef)(checked);
  return (0, import_react70.useEffect)(() => {
    let form = button == null ? void 0 : button.form;
    if (form) {
      let reset = () => setChecked(initialCheckedStateRef.current);
      return form.addEventListener("reset", reset), () => form.removeEventListener("reset", reset);
    }
  }, [
    button,
    setChecked
  ]), /* @__PURE__ */ (0, import_react70.createElement)($e698a72e93240346$var$CheckboxProvider, {
    scope: __scopeCheckbox,
    state: checked,
    disabled: disabled2
  }, /* @__PURE__ */ (0, import_react70.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
    type: "button",
    role: "checkbox",
    "aria-checked": $e698a72e93240346$var$isIndeterminate(checked) ? "mixed" : checked,
    "aria-required": required,
    "data-state": $e698a72e93240346$var$getState(checked),
    "data-disabled": disabled2 ? "" : void 0,
    disabled: disabled2,
    value
  }, checkboxProps, {
    ref: composedRefs,
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
      event.key === "Enter" && event.preventDefault();
    }),
    onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, (event) => {
      setChecked(
        (prevChecked) => $e698a72e93240346$var$isIndeterminate(prevChecked) ? !0 : !prevChecked
      ), isFormControl && (hasConsumerStoppedPropagationRef.current = event.isPropagationStopped(), hasConsumerStoppedPropagationRef.current || event.stopPropagation());
    })
  })), isFormControl && /* @__PURE__ */ (0, import_react70.createElement)($e698a72e93240346$var$BubbleInput, {
    control: button,
    bubbles: !hasConsumerStoppedPropagationRef.current,
    name,
    value,
    checked,
    required,
    disabled: disabled2,
    style: {
      transform: "translateX(-100%)"
    }
  }));
}), $e698a72e93240346$var$INDICATOR_NAME = "CheckboxIndicator", $e698a72e93240346$export$59aad738f51d1c05 = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
  let { __scopeCheckbox, forceMount, ...indicatorProps } = props, context = $e698a72e93240346$var$useCheckboxContext($e698a72e93240346$var$INDICATOR_NAME, __scopeCheckbox);
  return /* @__PURE__ */ (0, import_react70.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || $e698a72e93240346$var$isIndeterminate(context.state) || context.state === !0
  }, /* @__PURE__ */ (0, import_react70.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
    "data-state": $e698a72e93240346$var$getState(context.state),
    "data-disabled": context.disabled ? "" : void 0
  }, indicatorProps, {
    ref: forwardedRef,
    style: {
      pointerEvents: "none",
      ...props.style
    }
  })));
}), $e698a72e93240346$var$BubbleInput = (props) => {
  let { control, checked, bubbles = !0, ...inputProps } = props, ref = (0, import_react70.useRef)(null), prevChecked = $010c2913dbd2fe3d$export$5cae361ad82dce8b(checked), controlSize = $db6c3485150b8e66$export$1ab7ae714698c4b8(control);
  return (0, import_react70.useEffect)(() => {
    let input = ref.current, inputProto = window.HTMLInputElement.prototype, setChecked = Object.getOwnPropertyDescriptor(inputProto, "checked").set;
    if (prevChecked !== checked && setChecked) {
      let event = new Event("click", {
        bubbles
      });
      input.indeterminate = $e698a72e93240346$var$isIndeterminate(checked), setChecked.call(input, $e698a72e93240346$var$isIndeterminate(checked) ? !1 : checked), input.dispatchEvent(event);
    }
  }, [
    prevChecked,
    checked,
    bubbles
  ]), /* @__PURE__ */ (0, import_react70.createElement)("input", _extends({
    type: "checkbox",
    "aria-hidden": !0,
    defaultChecked: $e698a72e93240346$var$isIndeterminate(checked) ? !1 : checked
  }, inputProps, {
    tabIndex: -1,
    ref,
    style: {
      ...props.style,
      ...controlSize,
      position: "absolute",
      pointerEvents: "none",
      opacity: 0,
      margin: 0
    }
  }));
};
function $e698a72e93240346$var$isIndeterminate(checked) {
  return checked === "indeterminate";
}
function $e698a72e93240346$var$getState(checked) {
  return $e698a72e93240346$var$isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
}
var $e698a72e93240346$export$be92b6f5f03c0fe9 = $e698a72e93240346$export$48513f6b9f8ce62d, $e698a72e93240346$export$adb584737d712b70 = $e698a72e93240346$export$59aad738f51d1c05;

// ../../components/atoms/checkbox.jsx
var import_jsx_dev_runtime15 = __toESM(require_jsx_dev_runtime(), 1), Checkbox = (props) => {
  let [checked, setChecked] = (0, import_react71.useState)(props.checked);
  (0, import_react71.useEffect)(() => {
    props.onChange && props.onChange(checked);
  }, [checked]);
  let id3 = (0, import_react71.useId)();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)("div", { className: "flex items-center justify-center w-fit", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)(
      $e698a72e93240346$export$be92b6f5f03c0fe9,
      {
        className: (0, import_classnames7.default)(
          "rounded flex flex-row items-center justify-center border w-5 h-5 outline-none transition-all cursor-pointer",
          "ring-border-focus ring-offset-1 focus:ring-2",
          {
            "border-border-disabled !cursor-default": props.disabled
          },
          {
            "bg-surface-default border-border-default": !checked && !props.disabled,
            "bg-surface-primary-default border-border-primary": checked && !props.error && !props.disabled,
            "bg-surface-danger-default border-border-danger": checked && props.error && !props.disabled,
            "hover:bg-surface-hovered": !checked && !props.disabled
          }
        ),
        defaultChecked: !0,
        id: id3,
        checked,
        onCheckedChange: (e24) => {
          setChecked((prev) => props.indeterminate ? prev == "indeterminate" ? !1 : "indeterminate" : e24);
        },
        disabled: props.disabled,
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)($e698a72e93240346$export$adb584737d712b70, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)("svg", { width: "17", height: "16", viewBox: "0 0 17 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
          checked == !0 && /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)("path", { d: "M14.5 4.00019L6.5 11.9998L2.5 8.00019", className: (0, import_classnames7.default)({
            "stroke-text-disabled": props.disabled,
            "stroke-text-on-primary": !props.disabled
          }), strokeLinecap: "round", strokeLinejoin: "round" }, void 0, !1, {
            fileName: "../../components/atoms/checkbox.jsx",
            lineNumber: 37,
            columnNumber: 34
          }, this),
          checked === "indeterminate" && /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)("path", { d: "M2.5 8H14.5", className: (0, import_classnames7.default)({
            "stroke-text-disabled": props.disabled,
            "stroke-text-on-primary": !props.disabled
          }), strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }, void 0, !1, {
            fileName: "../../components/atoms/checkbox.jsx",
            lineNumber: 46,
            columnNumber: 46
          }, this)
        ] }, void 0, !0, {
          fileName: "../../components/atoms/checkbox.jsx",
          lineNumber: 35,
          columnNumber: 11
        }, this) }, void 0, !1, {
          fileName: "../../components/atoms/checkbox.jsx",
          lineNumber: 34,
          columnNumber: 9
        }, this)
      },
      void 0,
      !1,
      {
        fileName: "../../components/atoms/checkbox.jsx",
        lineNumber: 15,
        columnNumber: 7
      },
      this
    ),
    props.label && /* @__PURE__ */ (0, import_jsx_dev_runtime15.jsxDEV)(
      "label",
      {
        className: (0, import_classnames7.default)({
          "text-text-disabled": props.disabled,
          "text-text-default cursor-pointer": !props.disabled
        }, "bodyMd-medium pl-2"),
        htmlFor: id3,
        children: props.label
      },
      void 0,
      !1,
      {
        fileName: "../../components/atoms/checkbox.jsx",
        lineNumber: 57,
        columnNumber: 24
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "../../components/atoms/checkbox.jsx",
    lineNumber: 14,
    columnNumber: 5
  }, this);
};
Checkbox.propTypes = {
  label: import_prop_types6.default.string.isRequired,
  onChange: import_prop_types6.default.func,
  disabled: import_prop_types6.default.bool,
  error: import_prop_types6.default.bool,
  checked: import_prop_types6.default.any,
  indeterminate: import_prop_types6.default.bool
};
Checkbox.defaultProps = {
  onChange: () => {
  },
  disabled: !1,
  error: !1
};

// app/pages/new-project.jsx
var import_jsx_dev_runtime16 = __toESM(require_jsx_dev_runtime()), NewProject = ({}) => {
  let [clusters, setClusters] = (0, import_react72.useState)([
    {
      label: "Plaxonic",
      time: ". 197d ago"
    },
    {
      label: "Plaxonic",
      time: ". 197d ago"
    },
    {
      label: "Plaxonic",
      time: ". 197d ago"
    },
    {
      label: "Plaxonic",
      time: ". 197d ago"
    },
    {
      label: "Plaxonic",
      time: ". 197d ago"
    },
    {
      label: "Plaxonic",
      time: ". 197d ago"
    }
  ]);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(import_jsx_dev_runtime16.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(ContextualSaveBar, { fullwidth: !0, message: "Unsaved changes", fixed: !0 }, void 0, !1, {
      fileName: "app/pages/new-project.jsx",
      lineNumber: 38,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("div", { className: "flex flex-row justify-between gap-[91px] pt-16", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("div", { className: "flex flex-col gap-5 items-start", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(Button, { label: "Back", IconComp: i, style: "plain" }, void 0, !1, {
          fileName: "app/pages/new-project.jsx",
          lineNumber: 41,
          columnNumber: 21
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("span", { className: "heading2xl text-text-default", children: "Let\u2019s create new project." }, void 0, !1, {
          fileName: "app/pages/new-project.jsx",
          lineNumber: 42,
          columnNumber: 21
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(ProgressTracker, { items: [
          {
            label: "Configure projects",
            active: !0,
            key: "configureprojects"
          },
          {
            label: "Publish",
            active: !1,
            key: "publish"
          }
        ] }, void 0, !1, {
          fileName: "app/pages/new-project.jsx",
          lineNumber: 45,
          columnNumber: 21
        }, this)
      ] }, void 0, !0, {
        fileName: "app/pages/new-project.jsx",
        lineNumber: 40,
        columnNumber: 17
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("div", { className: "flex flex-col border border-border-default bg-surface-default shadow-card rounded-md flex-1", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("div", { className: "bg-surface-subdued p-5 text-text-default headingXl rounded-t-md", children: "Configure Projects" }, void 0, !1, {
          fileName: "app/pages/new-project.jsx",
          lineNumber: 59,
          columnNumber: 21
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("div", { className: "flex flex-col gap-8 px-5 pt-5 pb-8", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("div", { className: "flex flex-row gap-5", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(TextInput, { label: "Project Name", className: "flex-1", placeholder: "" }, void 0, !1, {
              fileName: "app/pages/new-project.jsx",
              lineNumber: 64,
              columnNumber: 29
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(TextInput, { label: "Project ID", suffix: i10, className: "flex-1", placeholder: "" }, void 0, !1, {
              fileName: "app/pages/new-project.jsx",
              lineNumber: 65,
              columnNumber: 29
            }, this)
          ] }, void 0, !0, {
            fileName: "app/pages/new-project.jsx",
            lineNumber: 63,
            columnNumber: 25
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("div", { className: "flex flex-col border border-border-disabled bg-surface-default rounded-md", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("div", { className: "bg-surface-subdued py-2 px-4 text-text-default headingMd rounded-t-md", children: "Cluster(s)" }, void 0, !1, {
              fileName: "app/pages/new-project.jsx",
              lineNumber: 68,
              columnNumber: 29
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("div", { className: "flex flex-col", children: clusters.map((child, index2) => /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("div", { className: "p-4 flex flex-row gap-2.5 items-center", children: [
              /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(i5, {}, void 0, !1, {
                fileName: "app/pages/new-project.jsx",
                lineNumber: 75,
                columnNumber: 45
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("div", { className: "flex flex-row flex-1 items-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("span", { className: "headingMd text-text-default", children: "Plaxonic" }, void 0, !1, {
                  fileName: "app/pages/new-project.jsx",
                  lineNumber: 77,
                  columnNumber: 49
                }, this),
                /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)("span", { className: "bodyMd text-text-default", children: ". 197d ago" }, void 0, !1, {
                  fileName: "app/pages/new-project.jsx",
                  lineNumber: 78,
                  columnNumber: 49
                }, this)
              ] }, void 0, !0, {
                fileName: "app/pages/new-project.jsx",
                lineNumber: 76,
                columnNumber: 45
              }, this),
              /* @__PURE__ */ (0, import_jsx_dev_runtime16.jsxDEV)(Checkbox, { label: "" }, void 0, !1, {
                fileName: "app/pages/new-project.jsx",
                lineNumber: 80,
                columnNumber: 45
              }, this)
            ] }, index2, !0, {
              fileName: "app/pages/new-project.jsx",
              lineNumber: 74,
              columnNumber: 41
            }, this)) }, void 0, !1, {
              fileName: "app/pages/new-project.jsx",
              lineNumber: 71,
              columnNumber: 29
            }, this)
          ] }, void 0, !0, {
            fileName: "app/pages/new-project.jsx",
            lineNumber: 67,
            columnNumber: 25
          }, this)
        ] }, void 0, !0, {
          fileName: "app/pages/new-project.jsx",
          lineNumber: 62,
          columnNumber: 21
        }, this)
      ] }, void 0, !0, {
        fileName: "app/pages/new-project.jsx",
        lineNumber: 58,
        columnNumber: 17
      }, this)
    ] }, void 0, !0, {
      fileName: "app/pages/new-project.jsx",
      lineNumber: 39,
      columnNumber: 13
    }, this)
  ] }, void 0, !0, {
    fileName: "app/pages/new-project.jsx",
    lineNumber: 37,
    columnNumber: 9
  }, this);
}, new_project_default = NewProject;

// app/routes/console.newproject.jsx
var import_jsx_dev_runtime17 = __toESM(require_jsx_dev_runtime());
function ConsoleNewProject() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime17.jsxDEV)(new_project_default, {}, void 0, !1, {
    fileName: "app/routes/console.newproject.jsx",
    lineNumber: 4,
    columnNumber: 12
  }, this);
}

// app/routes/console.projects.jsx
var console_projects_exports = {};
__export(console_projects_exports, {
  default: () => console_projects_default
});
var import_react94 = __toESM(require_react()), import_react95 = __toESM(require_dist3());

// ../../components/organisms/sub-header.jsx
var import_classnames8 = __toESM(require_classnames(), 1), import_jsx_dev_runtime18 = __toESM(require_jsx_dev_runtime(), 1), SubHeader = ({ title, actions }) => /* @__PURE__ */ (0, import_jsx_dev_runtime18.jsxDEV)("div", { children: /* @__PURE__ */ (0, import_jsx_dev_runtime18.jsxDEV)("div", { className: "flex flex-col justify-center max-w-296 m-auto", children: /* @__PURE__ */ (0, import_jsx_dev_runtime18.jsxDEV)("div", { className: "flex flex-row items-center justify-between py-5", children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime18.jsxDEV)("div", { className: "text-text-strong headingLg py-1.5", children: title }, void 0, !1, {
    fileName: "../../components/organisms/sub-header.jsx",
    lineNumber: 7,
    columnNumber: 17
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime18.jsxDEV)("div", { className: "flex flex-row items-center justify-center", children: actions && actions }, void 0, !1, {
    fileName: "../../components/organisms/sub-header.jsx",
    lineNumber: 10,
    columnNumber: 17
  }, this)
] }, void 0, !0, {
  fileName: "../../components/organisms/sub-header.jsx",
  lineNumber: 6,
  columnNumber: 13
}, this) }, void 0, !1, {
  fileName: "../../components/organisms/sub-header.jsx",
  lineNumber: 5,
  columnNumber: 9
}, this) }, void 0, !1, {
  fileName: "../../components/organisms/sub-header.jsx",
  lineNumber: 4,
  columnNumber: 13
}, this);

// ../../components/molecule/filters.jsx
var import_prop_types9 = __toESM(require_prop_types(), 1), import_react92 = __toESM(require_react(), 1);

// ../../components/atoms/chip.jsx
var import_react74 = __toESM(require_react(), 1), import_prop_types7 = __toESM(require_prop_types(), 1), import_classnames9 = __toESM(require_classnames(), 1);
var import_jsx_dev_runtime19 = __toESM(require_jsx_dev_runtime(), 1), ChipTypes = Object.freeze({
  BASIC: "BASIC",
  REMOVABLE: "REMOVABLE",
  CLICKABLE: "CLICKABLE"
}), Chip = ({ label: label2, disabled: disabled2, type: type2 = ChipTypes.BASIC, onClose, prefix: prefix2, onClick }) => {
  let { isFocusVisible, focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f(), props = {}, Component = "div";
  type2 === ChipTypes.CLICKABLE && (Component = AriaButton);
  let Prefix = prefix2;
  return /* @__PURE__ */ (0, import_jsx_dev_runtime19.jsxDEV)(
    Component,
    {
      ...focusProps,
      ...props,
      className: (0, import_classnames9.default)(
        "rounded border bodySm-medium py-px flex items-center transition-all outline-none flex-row gap-1.5 ring-offset-1",
        "w-fit",
        {
          "text-text-default": !disabled2,
          "text-text-disabled": disabled2
        },
        {
          "pointer-events-none": disabled2
        },
        {
          "border-border-default": !disabled2,
          "border-border-disabled": disabled2
        },
        {
          "bg-surface-default": !disabled2
        },
        {
          "pr-1 pl-2": type2 === ChipTypes.REMOVABLE,
          "px-2": type2 != ChipTypes.REMOVABLE
        },
        {
          "hover:bg-surface-hovered active:bg-surface-pressed ": type2 === ChipTypes.CLICKABLE,
          "focus-visible:ring-2 focus:ring-border-focus": isFocusVisible && type2 === ChipTypes.CLICKABLE
        }
      ),
      children: [
        Prefix && type2 != ChipTypes.CLICKABLE && (typeof Prefix == "string" ? /* @__PURE__ */ (0, import_jsx_dev_runtime19.jsxDEV)("span", { className: "bodySm text-text-soft", children: Prefix }, void 0, !1, {
          fileName: "../../components/atoms/chip.jsx",
          lineNumber: 64,
          columnNumber: 89
        }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime19.jsxDEV)(Prefix, { size: 16, color: "currentColor" }, void 0, !1, {
          fileName: "../../components/atoms/chip.jsx",
          lineNumber: 64,
          columnNumber: 147
        }, this)),
        /* @__PURE__ */ (0, import_jsx_dev_runtime19.jsxDEV)("span", { className: "flex items-center", children: label2 }, void 0, !1, {
          fileName: "../../components/atoms/chip.jsx",
          lineNumber: 66,
          columnNumber: 13
        }, this),
        type2 == ChipTypes.REMOVABLE && /* @__PURE__ */ (0, import_jsx_dev_runtime19.jsxDEV)(
          AriaButton,
          {
            disabled: disabled2,
            onClick: onClose,
            ...focusProps,
            className: (0, import_classnames9.default)(
              "outline-none flex items-center rounded-sm ring-offset-0 justify-center hover:bg-surface-hovered active:bg-surface-pressed",
              {
                "cursor-default": disabled2
              },
              {
                "focus-visible:ring-2 focus:ring-border-focus": isFocusVisible
              }
            ),
            children: /* @__PURE__ */ (0, import_jsx_dev_runtime19.jsxDEV)(a8, { size: 16, color: "currentColor" }, void 0, !1, {
              fileName: "../../components/atoms/chip.jsx",
              lineNumber: 81,
              columnNumber: 21
            }, this)
          },
          void 0,
          !1,
          {
            fileName: "../../components/atoms/chip.jsx",
            lineNumber: 70,
            columnNumber: 48
          },
          this
        )
      ]
    },
    void 0,
    !0,
    {
      fileName: "../../components/atoms/chip.jsx",
      lineNumber: 34,
      columnNumber: 9
    },
    this
  );
};
Chip.propTypes = {
  label: import_prop_types7.default.string.isRequired,
  disabled: import_prop_types7.default.bool,
  onClose: import_prop_types7.default.func,
  type: import_prop_types7.default.oneOf([ChipTypes.BASIC, ChipTypes.CLICKABLE, ChipTypes.REMOVABLE]),
  prefix: import_prop_types7.default.oneOfType([import_prop_types7.default.string, import_prop_types7.default.object]),
  onClick: import_prop_types7.default.func
};
Chip.defaultProps = {
  label: "test",
  onClose: null,
  disabled: !1
};

// ../../components/atoms/option.jsx
var import_classnames10 = __toESM(require_classnames(), 1), import_react76 = __toESM(require_react(), 1);
var import_jsx_dev_runtime20 = __toESM(require_jsx_dev_runtime(), 1), import_react77 = __toESM(require_react(), 1), OptionItemTypes = Object.freeze({
  RADIO: "RADIO",
  LABEL: "LABEL",
  CHECKBOX: "CHECKBOX"
});

// ../../components/molecule/profile.jsx
var import_prop_types8 = __toESM(require_prop_types(), 1);
var import_classnames11 = __toESM(require_classnames(), 1);
var import_react78 = __toESM(require_react(), 1), import_jsx_dev_runtime21 = __toESM(require_jsx_dev_runtime(), 1), Profile = (0, import_react78.forwardRef)(({ name, subtitle, color: color2, size: size2, ...props }, ref) => {
  let { isFocusVisible, focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(
    AriaButton,
    {
      ...focusProps,
      ...props,
      ref,
      className: (0, import_classnames11.default)(
        "outline-none flex py-0.5 px-1 gap-2 items-center ring-offset-1 outline-none transition-all rounded",
        {
          "focus:ring-2 focus:ring-border-focus": isFocusVisible
        }
      ),
      children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)(AvatarBase, { label: name, color: color2, size: size2, renderAs: "div" }, void 0, !1, {
          fileName: "../../components/molecule/profile.jsx",
          lineNumber: 18,
          columnNumber: 5
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)("div", { className: "flex flex-col gap-y-1  items-start", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)("div", { className: "bodyMd-medium", children: name }, void 0, !1, {
            fileName: "../../components/molecule/profile.jsx",
            lineNumber: 20,
            columnNumber: 7
          }, this),
          subtitle && /* @__PURE__ */ (0, import_jsx_dev_runtime21.jsxDEV)("div", { className: "bodySm text-text-soft", children: subtitle }, void 0, !1, {
            fileName: "../../components/molecule/profile.jsx",
            lineNumber: 21,
            columnNumber: 20
          }, this)
        ] }, void 0, !0, {
          fileName: "../../components/molecule/profile.jsx",
          lineNumber: 19,
          columnNumber: 5
        }, this)
      ]
    },
    void 0,
    !0,
    {
      fileName: "../../components/molecule/profile.jsx",
      lineNumber: 10,
      columnNumber: 10
    },
    this
  );
});
Profile.propTypes = {
  name: import_prop_types8.default.string.isRequired,
  subtitle: import_prop_types8.default.string,
  color: import_prop_types8.default.oneOf([
    "one",
    "two",
    "three",
    "four",
    "five"
  ]),
  size: import_prop_types8.default.oneOf([
    "large",
    "medium",
    "small",
    "extra-small"
  ])
};
Profile.defaultProps = {
  name: "test",
  subtitle: "subtitle",
  color: "one",
  size: "medium"
};

// ../../components/atoms/dropdown.jsx
var React9 = __toESM(require_react(), 1);

// ../../../node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs
var import_react90 = __toESM(require_react(), 1);

// ../../../node_modules/@radix-ui/react-menu/dist/index.mjs
var import_react89 = __toESM(require_react(), 1);

// ../../../node_modules/@radix-ui/react-collection/dist/index.mjs
var import_react79 = __toESM(require_react(), 1);
function $e02a7d9cb1dc128c$export$c74125a8e3af6bb2(name) {
  let PROVIDER_NAME = name + "CollectionProvider", [createCollectionContext, createCollectionScope] = $c512c27ab02ef895$export$50c7b4e9d9f19c1(PROVIDER_NAME), [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {
    collectionRef: {
      current: null
    },
    itemMap: /* @__PURE__ */ new Map()
  }), CollectionProvider = (props) => {
    let { scope, children } = props, ref = import_react79.default.useRef(null), itemMap = import_react79.default.useRef(/* @__PURE__ */ new Map()).current;
    return /* @__PURE__ */ import_react79.default.createElement(CollectionProviderImpl, {
      scope,
      itemMap,
      collectionRef: ref
    }, children);
  }, COLLECTION_SLOT_NAME = name + "CollectionSlot", CollectionSlot = /* @__PURE__ */ import_react79.default.forwardRef((props, forwardedRef) => {
    let { scope, children } = props, context = useCollectionContext(COLLECTION_SLOT_NAME, scope), composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.collectionRef);
    return /* @__PURE__ */ import_react79.default.createElement($5e63c961fc1ce211$export$8c6ed5c666ac1360, {
      ref: composedRefs
    }, children);
  }), ITEM_SLOT_NAME = name + "CollectionItemSlot", ITEM_DATA_ATTR = "data-radix-collection-item", CollectionItemSlot = /* @__PURE__ */ import_react79.default.forwardRef((props, forwardedRef) => {
    let { scope, children, ...itemData } = props, ref = import_react79.default.useRef(null), composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref), context = useCollectionContext(ITEM_SLOT_NAME, scope);
    return import_react79.default.useEffect(() => (context.itemMap.set(ref, {
      ref,
      ...itemData
    }), () => void context.itemMap.delete(ref))), /* @__PURE__ */ import_react79.default.createElement($5e63c961fc1ce211$export$8c6ed5c666ac1360, {
      [ITEM_DATA_ATTR]: "",
      ref: composedRefs
    }, children);
  });
  function useCollection(scope) {
    let context = useCollectionContext(name + "CollectionConsumer", scope);
    return import_react79.default.useCallback(() => {
      let collectionNode = context.collectionRef.current;
      if (!collectionNode)
        return [];
      let orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
      return Array.from(context.itemMap.values()).sort(
        (a9, b) => orderedNodes.indexOf(a9.ref.current) - orderedNodes.indexOf(b.ref.current)
      );
    }, [
      context.collectionRef,
      context.itemMap
    ]);
  }
  return [
    {
      Provider: CollectionProvider,
      Slot: CollectionSlot,
      ItemSlot: CollectionItemSlot
    },
    useCollection,
    createCollectionScope
  ];
}

// ../../../node_modules/@radix-ui/react-direction/dist/index.mjs
var import_react80 = __toESM(require_react(), 1), $f631663db3294ace$var$DirectionContext = /* @__PURE__ */ (0, import_react80.createContext)(void 0);
function $f631663db3294ace$export$b39126d51d94e6f3(localDir) {
  let globalDir = (0, import_react80.useContext)($f631663db3294ace$var$DirectionContext);
  return localDir || globalDir || "ltr";
}

// ../../../node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs
var import_react82 = __toESM(require_react(), 1);

// ../../../node_modules/@radix-ui/react-use-escape-keydown/dist/index.mjs
var import_react81 = __toESM(require_react(), 1);
function $addc16e1bbe58fd0$export$3a72a57244d6e765(onEscapeKeyDownProp, ownerDocument = globalThis == null ? void 0 : globalThis.document) {
  let onEscapeKeyDown = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEscapeKeyDownProp);
  (0, import_react81.useEffect)(() => {
    let handleKeyDown = (event) => {
      event.key === "Escape" && onEscapeKeyDown(event);
    };
    return ownerDocument.addEventListener("keydown", handleKeyDown), () => ownerDocument.removeEventListener("keydown", handleKeyDown);
  }, [
    onEscapeKeyDown,
    ownerDocument
  ]);
}

// ../../../node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs
var $5cb92bef7577960e$var$CONTEXT_UPDATE = "dismissableLayer.update", $5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside", $5cb92bef7577960e$var$FOCUS_OUTSIDE = "dismissableLayer.focusOutside", $5cb92bef7577960e$var$originalBodyPointerEvents, $5cb92bef7577960e$var$DismissableLayerContext = /* @__PURE__ */ (0, import_react82.createContext)({
  layers: /* @__PURE__ */ new Set(),
  layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
  branches: /* @__PURE__ */ new Set()
}), $5cb92bef7577960e$export$177fb62ff3ec1f22 = /* @__PURE__ */ (0, import_react82.forwardRef)((props, forwardedRef) => {
  var _node$ownerDocument;
  let { disableOutsidePointerEvents = !1, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, ...layerProps } = props, context = (0, import_react82.useContext)($5cb92bef7577960e$var$DismissableLayerContext), [node1, setNode] = (0, import_react82.useState)(null), ownerDocument = (_node$ownerDocument = node1 == null ? void 0 : node1.ownerDocument) !== null && _node$ownerDocument !== void 0 ? _node$ownerDocument : globalThis == null ? void 0 : globalThis.document, [, force] = (0, import_react82.useState)({}), composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node) => setNode(node)
  ), layers = Array.from(context.layers), [highestLayerWithOutsidePointerEventsDisabled] = [
    ...context.layersWithOutsidePointerEventsDisabled
  ].slice(-1), highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled), index2 = node1 ? layers.indexOf(node1) : -1, isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0, isPointerEventsEnabled = index2 >= highestLayerWithOutsidePointerEventsDisabledIndex, pointerDownOutside = $5cb92bef7577960e$var$usePointerDownOutside((event) => {
    let target = event.target, isPointerDownOnBranch = [
      ...context.branches
    ].some(
      (branch) => branch.contains(target)
    );
    !isPointerEventsEnabled || isPointerDownOnBranch || (onPointerDownOutside == null || onPointerDownOutside(event), onInteractOutside == null || onInteractOutside(event), event.defaultPrevented || onDismiss == null || onDismiss());
  }, ownerDocument), focusOutside = $5cb92bef7577960e$var$useFocusOutside((event) => {
    let target = event.target;
    [
      ...context.branches
    ].some(
      (branch) => branch.contains(target)
    ) || (onFocusOutside == null || onFocusOutside(event), onInteractOutside == null || onInteractOutside(event), event.defaultPrevented || onDismiss == null || onDismiss());
  }, ownerDocument);
  return $addc16e1bbe58fd0$export$3a72a57244d6e765((event) => {
    index2 === context.layers.size - 1 && (onEscapeKeyDown == null || onEscapeKeyDown(event), !event.defaultPrevented && onDismiss && (event.preventDefault(), onDismiss()));
  }, ownerDocument), (0, import_react82.useEffect)(() => {
    if (node1)
      return disableOutsidePointerEvents && (context.layersWithOutsidePointerEventsDisabled.size === 0 && ($5cb92bef7577960e$var$originalBodyPointerEvents = ownerDocument.body.style.pointerEvents, ownerDocument.body.style.pointerEvents = "none"), context.layersWithOutsidePointerEventsDisabled.add(node1)), context.layers.add(node1), $5cb92bef7577960e$var$dispatchUpdate(), () => {
        disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1 && (ownerDocument.body.style.pointerEvents = $5cb92bef7577960e$var$originalBodyPointerEvents);
      };
  }, [
    node1,
    ownerDocument,
    disableOutsidePointerEvents,
    context
  ]), (0, import_react82.useEffect)(() => () => {
    node1 && (context.layers.delete(node1), context.layersWithOutsidePointerEventsDisabled.delete(node1), $5cb92bef7577960e$var$dispatchUpdate());
  }, [
    node1,
    context
  ]), (0, import_react82.useEffect)(() => {
    let handleUpdate = () => force({});
    return document.addEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate), () => document.removeEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate);
  }, []), /* @__PURE__ */ (0, import_react82.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, layerProps, {
    ref: composedRefs,
    style: {
      pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0,
      ...props.style
    },
    onFocusCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusCapture, focusOutside.onFocusCapture),
    onBlurCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlurCapture, focusOutside.onBlurCapture),
    onPointerDownCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)
  }));
});
function $5cb92bef7577960e$var$usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis == null ? void 0 : globalThis.document) {
  let handlePointerDownOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onPointerDownOutside), isPointerInsideReactTreeRef = (0, import_react82.useRef)(!1), handleClickRef = (0, import_react82.useRef)(() => {
  });
  return (0, import_react82.useEffect)(() => {
    let handlePointerDown = (event) => {
      if (event.target && !isPointerInsideReactTreeRef.current) {
        let handleAndDispatchPointerDownOutsideEvent = function() {
          $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {
            discrete: !0
          });
        }, eventDetail = {
          originalEvent: event
        };
        event.pointerType === "touch" ? (ownerDocument.removeEventListener("click", handleClickRef.current), handleClickRef.current = handleAndDispatchPointerDownOutsideEvent, ownerDocument.addEventListener("click", handleClickRef.current, {
          once: !0
        })) : handleAndDispatchPointerDownOutsideEvent();
      }
      isPointerInsideReactTreeRef.current = !1;
    }, timerId = window.setTimeout(() => {
      ownerDocument.addEventListener("pointerdown", handlePointerDown);
    }, 0);
    return () => {
      window.clearTimeout(timerId), ownerDocument.removeEventListener("pointerdown", handlePointerDown), ownerDocument.removeEventListener("click", handleClickRef.current);
    };
  }, [
    ownerDocument,
    handlePointerDownOutside
  ]), {
    // ensures we check React component tree (not just DOM tree)
    onPointerDownCapture: () => isPointerInsideReactTreeRef.current = !0
  };
}
function $5cb92bef7577960e$var$useFocusOutside(onFocusOutside, ownerDocument = globalThis == null ? void 0 : globalThis.document) {
  let handleFocusOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onFocusOutside), isFocusInsideReactTreeRef = (0, import_react82.useRef)(!1);
  return (0, import_react82.useEffect)(() => {
    let handleFocus = (event) => {
      event.target && !isFocusInsideReactTreeRef.current && $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$FOCUS_OUTSIDE, handleFocusOutside, {
        originalEvent: event
      }, {
        discrete: !1
      });
    };
    return ownerDocument.addEventListener("focusin", handleFocus), () => ownerDocument.removeEventListener("focusin", handleFocus);
  }, [
    ownerDocument,
    handleFocusOutside
  ]), {
    onFocusCapture: () => isFocusInsideReactTreeRef.current = !0,
    onBlurCapture: () => isFocusInsideReactTreeRef.current = !1
  };
}
function $5cb92bef7577960e$var$dispatchUpdate() {
  let event = new CustomEvent($5cb92bef7577960e$var$CONTEXT_UPDATE);
  document.dispatchEvent(event);
}
function $5cb92bef7577960e$var$handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
  let target = detail.originalEvent.target, event = new CustomEvent(name, {
    bubbles: !1,
    cancelable: !0,
    detail
  });
  handler && target.addEventListener(name, handler, {
    once: !0
  }), discrete ? $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event) : target.dispatchEvent(event);
}

// ../../../node_modules/@radix-ui/react-focus-guards/dist/index.mjs
var import_react83 = __toESM(require_react(), 1), $3db38b7d1fb3fe6a$var$count = 0;
function $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c() {
  (0, import_react83.useEffect)(() => {
    var _edgeGuards$, _edgeGuards$2;
    let edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
    return document.body.insertAdjacentElement("afterbegin", (_edgeGuards$ = edgeGuards[0]) !== null && _edgeGuards$ !== void 0 ? _edgeGuards$ : $3db38b7d1fb3fe6a$var$createFocusGuard()), document.body.insertAdjacentElement("beforeend", (_edgeGuards$2 = edgeGuards[1]) !== null && _edgeGuards$2 !== void 0 ? _edgeGuards$2 : $3db38b7d1fb3fe6a$var$createFocusGuard()), $3db38b7d1fb3fe6a$var$count++, () => {
      $3db38b7d1fb3fe6a$var$count === 1 && document.querySelectorAll("[data-radix-focus-guard]").forEach(
        (node) => node.remove()
      ), $3db38b7d1fb3fe6a$var$count--;
    };
  }, []);
}
function $3db38b7d1fb3fe6a$var$createFocusGuard() {
  let element = document.createElement("span");
  return element.setAttribute("data-radix-focus-guard", ""), element.tabIndex = 0, element.style.cssText = "outline: none; opacity: 0; position: fixed; pointer-events: none", element;
}

// ../../../node_modules/@radix-ui/react-focus-scope/dist/index.mjs
var import_react84 = __toESM(require_react(), 1);
var $d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount", $d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount", $d3863c46a17e8a28$var$EVENT_OPTIONS = {
  bubbles: !1,
  cancelable: !0
};
var $d3863c46a17e8a28$export$20e40289641fbbb6 = /* @__PURE__ */ (0, import_react84.forwardRef)((props, forwardedRef) => {
  let { loop = !1, trapped = !1, onMountAutoFocus: onMountAutoFocusProp, onUnmountAutoFocus: onUnmountAutoFocusProp, ...scopeProps } = props, [container1, setContainer] = (0, import_react84.useState)(null), onMountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onMountAutoFocusProp), onUnmountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onUnmountAutoFocusProp), lastFocusedElementRef = (0, import_react84.useRef)(null), composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node) => setContainer(node)
  ), focusScope = (0, import_react84.useRef)({
    paused: !1,
    pause() {
      this.paused = !0;
    },
    resume() {
      this.paused = !1;
    }
  }).current;
  (0, import_react84.useEffect)(() => {
    if (trapped) {
      let handleFocusIn = function(event) {
        if (focusScope.paused || !container1)
          return;
        let target = event.target;
        container1.contains(target) ? lastFocusedElementRef.current = target : $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
          select: !0
        });
      }, handleFocusOut = function(event) {
        if (focusScope.paused || !container1)
          return;
        let relatedTarget = event.relatedTarget;
        relatedTarget !== null && (container1.contains(relatedTarget) || $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
          select: !0
        }));
      }, handleMutations = function(mutations) {
        let focusedElement = document.activeElement;
        for (let mutation of mutations)
          mutation.removedNodes.length > 0 && (container1 != null && container1.contains(focusedElement) || $d3863c46a17e8a28$var$focus(container1));
      };
      document.addEventListener("focusin", handleFocusIn), document.addEventListener("focusout", handleFocusOut);
      let mutationObserver = new MutationObserver(handleMutations);
      return container1 && mutationObserver.observe(container1, {
        childList: !0,
        subtree: !0
      }), () => {
        document.removeEventListener("focusin", handleFocusIn), document.removeEventListener("focusout", handleFocusOut), mutationObserver.disconnect();
      };
    }
  }, [
    trapped,
    container1,
    focusScope.paused
  ]), (0, import_react84.useEffect)(() => {
    if (container1) {
      $d3863c46a17e8a28$var$focusScopesStack.add(focusScope);
      let previouslyFocusedElement = document.activeElement;
      if (!container1.contains(previouslyFocusedElement)) {
        let mountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
        container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus), container1.dispatchEvent(mountEvent), mountEvent.defaultPrevented || ($d3863c46a17e8a28$var$focusFirst($d3863c46a17e8a28$var$removeLinks($d3863c46a17e8a28$var$getTabbableCandidates(container1)), {
          select: !0
        }), document.activeElement === previouslyFocusedElement && $d3863c46a17e8a28$var$focus(container1));
      }
      return () => {
        container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus), setTimeout(() => {
          let unmountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
          container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus), container1.dispatchEvent(unmountEvent), unmountEvent.defaultPrevented || $d3863c46a17e8a28$var$focus(previouslyFocusedElement ?? document.body, {
            select: !0
          }), container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus), $d3863c46a17e8a28$var$focusScopesStack.remove(focusScope);
        }, 0);
      };
    }
  }, [
    container1,
    onMountAutoFocus,
    onUnmountAutoFocus,
    focusScope
  ]);
  let handleKeyDown = (0, import_react84.useCallback)((event) => {
    if (!loop && !trapped || focusScope.paused)
      return;
    let isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey, focusedElement = document.activeElement;
    if (isTabKey && focusedElement) {
      let container = event.currentTarget, [first, last] = $d3863c46a17e8a28$var$getTabbableEdges(container);
      first && last ? !event.shiftKey && focusedElement === last ? (event.preventDefault(), loop && $d3863c46a17e8a28$var$focus(first, {
        select: !0
      })) : event.shiftKey && focusedElement === first && (event.preventDefault(), loop && $d3863c46a17e8a28$var$focus(last, {
        select: !0
      })) : focusedElement === container && event.preventDefault();
    }
  }, [
    loop,
    trapped,
    focusScope.paused
  ]);
  return /* @__PURE__ */ (0, import_react84.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    tabIndex: -1
  }, scopeProps, {
    ref: composedRefs,
    onKeyDown: handleKeyDown
  }));
});
function $d3863c46a17e8a28$var$focusFirst(candidates, { select = !1 } = {}) {
  let previouslyFocusedElement = document.activeElement;
  for (let candidate of candidates)
    if ($d3863c46a17e8a28$var$focus(candidate, {
      select
    }), document.activeElement !== previouslyFocusedElement)
      return;
}
function $d3863c46a17e8a28$var$getTabbableEdges(container) {
  let candidates = $d3863c46a17e8a28$var$getTabbableCandidates(container), first = $d3863c46a17e8a28$var$findVisible(candidates, container), last = $d3863c46a17e8a28$var$findVisible(candidates.reverse(), container);
  return [
    first,
    last
  ];
}
function $d3863c46a17e8a28$var$getTabbableCandidates(container) {
  let nodes = [], walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      let isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      return node.disabled || node.hidden || isHiddenInput ? NodeFilter.FILTER_SKIP : node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  for (; walker.nextNode(); )
    nodes.push(walker.currentNode);
  return nodes;
}
function $d3863c46a17e8a28$var$findVisible(elements, container) {
  for (let element of elements)
    if (!$d3863c46a17e8a28$var$isHidden(element, {
      upTo: container
    }))
      return element;
}
function $d3863c46a17e8a28$var$isHidden(node, { upTo }) {
  if (getComputedStyle(node).visibility === "hidden")
    return !0;
  for (; node; ) {
    if (upTo !== void 0 && node === upTo)
      return !1;
    if (getComputedStyle(node).display === "none")
      return !0;
    node = node.parentElement;
  }
  return !1;
}
function $d3863c46a17e8a28$var$isSelectableInput(element) {
  return element instanceof HTMLInputElement && "select" in element;
}
function $d3863c46a17e8a28$var$focus(element, { select = !1 } = {}) {
  if (element && element.focus) {
    let previouslyFocusedElement = document.activeElement;
    element.focus({
      preventScroll: !0
    }), element !== previouslyFocusedElement && $d3863c46a17e8a28$var$isSelectableInput(element) && select && element.select();
  }
}
var $d3863c46a17e8a28$var$focusScopesStack = $d3863c46a17e8a28$var$createFocusScopesStack();
function $d3863c46a17e8a28$var$createFocusScopesStack() {
  let stack = [];
  return {
    add(focusScope) {
      let activeFocusScope = stack[0];
      focusScope !== activeFocusScope && (activeFocusScope == null || activeFocusScope.pause()), stack = $d3863c46a17e8a28$var$arrayRemove(stack, focusScope), stack.unshift(focusScope);
    },
    remove(focusScope) {
      var _stack$;
      stack = $d3863c46a17e8a28$var$arrayRemove(stack, focusScope), (_stack$ = stack[0]) === null || _stack$ === void 0 || _stack$.resume();
    }
  };
}
function $d3863c46a17e8a28$var$arrayRemove(array, item) {
  let updatedArray = [
    ...array
  ], index2 = updatedArray.indexOf(item);
  return index2 !== -1 && updatedArray.splice(index2, 1), updatedArray;
}
function $d3863c46a17e8a28$var$removeLinks(items) {
  return items.filter(
    (item) => item.tagName !== "A"
  );
}

// ../../../node_modules/@radix-ui/react-id/dist/index.mjs
var $2AODx$react = __toESM(require_react(), 1);
var $1746a345f3d73bb7$var$useReactId = $2AODx$react["useId".toString()] || (() => {
}), $1746a345f3d73bb7$var$count = 0;
function $1746a345f3d73bb7$export$f680877a34711e37(deterministicId) {
  let [id3, setId] = $2AODx$react.useState($1746a345f3d73bb7$var$useReactId());
  return $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    deterministicId || setId(
      (reactId) => reactId ?? String($1746a345f3d73bb7$var$count++)
    );
  }, [
    deterministicId
  ]), deterministicId || (id3 ? `radix-${id3}` : "");
}

// ../../../node_modules/@radix-ui/react-popper/dist/index.mjs
var import_react86 = __toESM(require_react(), 1);

// ../../../node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getLengthFromAxis(axis) {
  return axis === "y" ? "height" : "width";
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "x" : "y";
}
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref, commonX = reference.x + reference.width / 2 - floating.width / 2, commonY = reference.y + reference.height / 2 - floating.height / 2, mainAxis = getMainAxisFromPlacement(placement), length = getLengthFromAxis(mainAxis), commonAlign = reference[length] / 2 - floating[length] / 2, side = getSide(placement), isVertical = mainAxis === "x", coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config) => {
  let {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config, validMiddleware = middleware.filter(Boolean), rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating)), rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  }), {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl), statefulPlacement = placement, middlewareData = {}, resetCount = 0;
  for (let i13 = 0; i13 < validMiddleware.length; i13++) {
    let {
      name,
      fn
    } = validMiddleware[i13], {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    if (x = nextX ?? x, y = nextY ?? y, middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    }, reset && resetCount <= 50) {
      resetCount++, typeof reset == "object" && (reset.placement && (statefulPlacement = reset.placement), reset.rects && (rects = reset.rects === !0 ? await platform2.getElementRects({
        reference,
        floating,
        strategy
      }) : reset.rects), {
        x,
        y
      } = computeCoordsFromPlacement(rects, statefulPlacement, rtl)), i13 = -1;
      continue;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
function evaluate(value, param) {
  return typeof value == "function" ? value(param) : value;
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getSideObjectFromPadding(padding) {
  return typeof padding != "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  options === void 0 && (options = {});
  let {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state, {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = !1,
    padding = 0
  } = evaluate(options, state), paddingObject = getSideObjectFromPadding(padding), element = elements[altBoundary ? elementContext === "floating" ? "reference" : "floating" : elementContext], clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: (_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) == null || _await$platform$isEle ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  })), rect = elementContext === "floating" ? {
    ...rects.floating,
    x,
    y
  } : rects.reference, offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating)), offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  }, elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var min = Math.min, max = Math.max;
function within(min$1, value, max$1) {
  return max(min$1, min(value, max$1));
}
var arrow = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    let {
      x,
      y,
      placement,
      rects,
      platform: platform2,
      elements
    } = state, {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null)
      return {};
    let paddingObject = getSideObjectFromPadding(padding), coords = {
      x,
      y
    }, axis = getMainAxisFromPlacement(placement), length = getLengthFromAxis(axis), arrowDimensions = await platform2.getDimensions(element), isYAxis = axis === "y", minProp = isYAxis ? "top" : "left", maxProp = isYAxis ? "bottom" : "right", clientProp = isYAxis ? "clientHeight" : "clientWidth", endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length], startDiff = coords[axis] - rects.reference[axis], arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element)), clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) && (clientSize = elements.floating[clientProp] || rects.floating[length]);
    let centerToReference = endDiff / 2 - startDiff / 2, largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1, minPadding = min(paddingObject[minProp], largestPossiblePadding), maxPadding = min(paddingObject[maxProp], largestPossiblePadding), min$1 = minPadding, max3 = clientSize - arrowDimensions[length] - maxPadding, center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference, offset2 = within(min$1, center, max3), alignmentOffset = getAlignment(placement) != null && center != offset2 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0 ? center < min$1 ? min$1 - center : max3 - center : 0;
    return {
      [axis]: coords[axis] - alignmentOffset,
      data: {
        [axis]: offset2,
        centerOffset: center - offset2 + alignmentOffset
      }
    };
  }
}), sides = ["top", "right", "bottom", "left"];
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function getAlignmentSides(placement, rects, rtl) {
  rtl === void 0 && (rtl = !1);
  let alignment = getAlignment(placement), mainAxis = getMainAxisFromPlacement(placement), length = getLengthFromAxis(mainAxis), mainAlignmentSide = mainAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  return rects.reference[length] > rects.floating[length] && (mainAlignmentSide = getOppositePlacement(mainAlignmentSide)), {
    main: mainAlignmentSide,
    cross: getOppositePlacement(mainAlignmentSide)
  };
}
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getExpandedPlacements(placement) {
  let oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getSideList(side, isStart, rtl) {
  let lr = ["left", "right"], rl = ["right", "left"], tb = ["top", "bottom"], bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      return rtl ? isStart ? rl : lr : isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  let alignment = getAlignment(placement), list2 = getSideList(getSide(placement), direction === "start", rtl);
  return alignment && (list2 = list2.map((side) => side + "-" + alignment), flipAlignment && (list2 = list2.concat(list2.map(getOppositeAlignmentPlacement)))), list2;
}
var flip = function(options) {
  return options === void 0 && (options = {}), {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$flip;
      let {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state, {
        mainAxis: checkMainAxis = !0,
        crossAxis: checkCrossAxis = !0,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = !0,
        ...detectOverflowOptions
      } = evaluate(options, state), side = getSide(placement), isBasePlacement = getSide(initialPlacement) === initialPlacement, rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)), fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      !specifiedFallbackPlacements && fallbackAxisSideDirection !== "none" && fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      let placements = [initialPlacement, ...fallbackPlacements], overflow = await detectOverflow(state, detectOverflowOptions), overflows = [], overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis && overflows.push(overflow[side]), checkCrossAxis) {
        let {
          main,
          cross
        } = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[main], overflow[cross]);
      }
      if (overflowsData = [...overflowsData, {
        placement,
        overflows
      }], !overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        let nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1, nextPlacement = placements[nextIndex];
        if (nextPlacement)
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a9, b) => a9.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement)
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$map$so;
              let placement2 = (_overflowsData$map$so = overflowsData.map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a9, b) => a9[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
              placement2 && (resetPlacement = placement2);
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        if (placement !== resetPlacement)
          return {
            reset: {
              placement: resetPlacement
            }
          };
      }
      return {};
    }
  };
};
function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}
function isAnySideFullyClipped(overflow) {
  return sides.some((side) => overflow[side] >= 0);
}
var hide = function(options) {
  return options === void 0 && (options = {}), {
    name: "hide",
    options,
    async fn(state) {
      let {
        rects
      } = state, {
        strategy = "referenceHidden",
        ...detectOverflowOptions
      } = evaluate(options, state);
      switch (strategy) {
        case "referenceHidden": {
          let overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            elementContext: "reference"
          }), offsets = getSideOffsets(overflow, rects.reference);
          return {
            data: {
              referenceHiddenOffsets: offsets,
              referenceHidden: isAnySideFullyClipped(offsets)
            }
          };
        }
        case "escaped": {
          let overflow = await detectOverflow(state, {
            ...detectOverflowOptions,
            altBoundary: !0
          }), offsets = getSideOffsets(overflow, rects.floating);
          return {
            data: {
              escapedOffsets: offsets,
              escaped: isAnySideFullyClipped(offsets)
            }
          };
        }
        default:
          return {};
      }
    }
  };
};
async function convertValueToCoords(state, options) {
  let {
    placement,
    platform: platform2,
    elements
  } = state, rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)), side = getSide(placement), alignment = getAlignment(placement), isVertical = getMainAxisFromPlacement(placement) === "x", mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1, crossAxisMulti = rtl && isVertical ? -1 : 1, rawValue = evaluate(options, state), {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue == "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  return alignment && typeof alignmentAxis == "number" && (crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis), isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options) {
  return options === void 0 && (options = 0), {
    name: "offset",
    options,
    async fn(state) {
      let {
        x,
        y
      } = state, diffCoords = await convertValueToCoords(state, options);
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: diffCoords
      };
    }
  };
};
function getCrossAxis(axis) {
  return axis === "x" ? "y" : "x";
}
var shift = function(options) {
  return options === void 0 && (options = {}), {
    name: "shift",
    options,
    async fn(state) {
      let {
        x,
        y,
        placement
      } = state, {
        mainAxis: checkMainAxis = !0,
        crossAxis: checkCrossAxis = !1,
        limiter = {
          fn: (_ref) => {
            let {
              x: x2,
              y: y2
            } = _ref;
            return {
              x: x2,
              y: y2
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state), coords = {
        x,
        y
      }, overflow = await detectOverflow(state, detectOverflowOptions), mainAxis = getMainAxisFromPlacement(getSide(placement)), crossAxis = getCrossAxis(mainAxis), mainAxisCoord = coords[mainAxis], crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        let minSide = mainAxis === "y" ? "top" : "left", maxSide = mainAxis === "y" ? "bottom" : "right", min3 = mainAxisCoord + overflow[minSide], max3 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = within(min3, mainAxisCoord, max3);
      }
      if (checkCrossAxis) {
        let minSide = crossAxis === "y" ? "top" : "left", maxSide = crossAxis === "y" ? "bottom" : "right", min3 = crossAxisCoord + overflow[minSide], max3 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = within(min3, crossAxisCoord, max3);
      }
      let limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y
        }
      };
    }
  };
}, limitShift = function(options) {
  return options === void 0 && (options = {}), {
    options,
    fn(state) {
      let {
        x,
        y,
        placement,
        rects,
        middlewareData
      } = state, {
        offset: offset2 = 0,
        mainAxis: checkMainAxis = !0,
        crossAxis: checkCrossAxis = !0
      } = evaluate(options, state), coords = {
        x,
        y
      }, mainAxis = getMainAxisFromPlacement(placement), crossAxis = getCrossAxis(mainAxis), mainAxisCoord = coords[mainAxis], crossAxisCoord = coords[crossAxis], rawOffset = evaluate(offset2, state), computedOffset = typeof rawOffset == "number" ? {
        mainAxis: rawOffset,
        crossAxis: 0
      } : {
        mainAxis: 0,
        crossAxis: 0,
        ...rawOffset
      };
      if (checkMainAxis) {
        let len = mainAxis === "y" ? "height" : "width", limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis, limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
        mainAxisCoord < limitMin ? mainAxisCoord = limitMin : mainAxisCoord > limitMax && (mainAxisCoord = limitMax);
      }
      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2;
        let len = mainAxis === "y" ? "width" : "height", isOriginSide = ["top", "left"].includes(getSide(placement)), limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide && ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0) + (isOriginSide ? 0 : computedOffset.crossAxis), limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
        crossAxisCoord < limitMin ? crossAxisCoord = limitMin : crossAxisCoord > limitMax && (crossAxisCoord = limitMax);
      }
      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      };
    }
  };
}, size = function(options) {
  return options === void 0 && (options = {}), {
    name: "size",
    options,
    async fn(state) {
      let {
        placement,
        rects,
        platform: platform2,
        elements
      } = state, {
        apply = () => {
        },
        ...detectOverflowOptions
      } = evaluate(options, state), overflow = await detectOverflow(state, detectOverflowOptions), side = getSide(placement), alignment = getAlignment(placement), isXAxis = getMainAxisFromPlacement(placement) === "x", {
        width,
        height
      } = rects.floating, heightSide, widthSide;
      side === "top" || side === "bottom" ? (heightSide = side, widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right") : (widthSide = side, heightSide = alignment === "end" ? "top" : "bottom");
      let overflowAvailableHeight = height - overflow[heightSide], overflowAvailableWidth = width - overflow[widthSide], noShift = !state.middlewareData.shift, availableHeight = overflowAvailableHeight, availableWidth = overflowAvailableWidth;
      if (isXAxis) {
        let maximumClippingWidth = width - overflow.left - overflow.right;
        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;
      } else {
        let maximumClippingHeight = height - overflow.top - overflow.bottom;
        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;
      }
      if (noShift && !alignment) {
        let xMin = max(overflow.left, 0), xMax = max(overflow.right, 0), yMin = max(overflow.top, 0), yMax = max(overflow.bottom, 0);
        isXAxis ? availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
      }
      await apply({
        ...state,
        availableWidth,
        availableHeight
      });
      let nextDimensions = await platform2.getDimensions(elements.floating);
      return width !== nextDimensions.width || height !== nextDimensions.height ? {
        reset: {
          rects: !0
        }
      } : {};
    }
  };
};

// ../../../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getWindow(node) {
  var _node$ownerDocument;
  return ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function isNode(value) {
  return value instanceof getWindow(value).Node;
}
function getNodeName(node) {
  return isNode(node) ? (node.nodeName || "").toLowerCase() : "#document";
}
function isHTMLElement(value) {
  return value instanceof getWindow(value).HTMLElement;
}
function isElement(value) {
  return value instanceof getWindow(value).Element;
}
function isShadowRoot(node) {
  return typeof ShadowRoot > "u" ? !1 : node instanceof getWindow(node).ShadowRoot || node instanceof ShadowRoot;
}
function isOverflowElement(element) {
  let {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  let safari = isSafari(), css = getComputedStyle$1(element);
  return css.transform !== "none" || css.perspective !== "none" || !safari && (css.backdropFilter ? css.backdropFilter !== "none" : !1) || !safari && (css.filter ? css.filter !== "none" : !1) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function isSafari() {
  return typeof CSS > "u" || !CSS.supports ? !1 : CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
var min2 = Math.min, max2 = Math.max, round = Math.round, floor = Math.floor, createEmptyCoords = (v) => ({
  x: v,
  y: v
});
function getCssDimensions(element) {
  let css = getComputedStyle$1(element), width = parseFloat(css.width) || 0, height = parseFloat(css.height) || 0, hasOffset = isHTMLElement(element), offsetWidth = hasOffset ? element.offsetWidth : width, offsetHeight = hasOffset ? element.offsetHeight : height, shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  return shouldFallback && (width = offsetWidth, height = offsetHeight), {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return isElement(element) ? element : element.contextElement;
}
function getScale(element) {
  let domElement = unwrapElement(element);
  if (!isHTMLElement(domElement))
    return createEmptyCoords(1);
  let rect = domElement.getBoundingClientRect(), {
    width,
    height,
    $
  } = getCssDimensions(domElement), x = ($ ? round(rect.width) : rect.width) / width, y = ($ ? round(rect.height) : rect.height) / height;
  return (!x || !Number.isFinite(x)) && (x = 1), (!y || !Number.isFinite(y)) && (y = 1), {
    x,
    y
  };
}
var noOffsets = /* @__PURE__ */ createEmptyCoords(0);
function getVisualOffsets(element, isFixed, floatingOffsetParent) {
  var _win$visualViewport, _win$visualViewport2;
  if (isFixed === void 0 && (isFixed = !0), !isSafari())
    return noOffsets;
  let win = element ? getWindow(element) : window;
  return !floatingOffsetParent || isFixed && floatingOffsetParent !== win ? noOffsets : {
    x: ((_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) || 0,
    y: ((_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) || 0
  };
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  includeScale === void 0 && (includeScale = !1), isFixedStrategy === void 0 && (isFixedStrategy = !1);
  let clientRect = element.getBoundingClientRect(), domElement = unwrapElement(element), scale2 = createEmptyCoords(1);
  includeScale && (offsetParent ? isElement(offsetParent) && (scale2 = getScale(offsetParent)) : scale2 = getScale(element));
  let visualOffsets = getVisualOffsets(domElement, isFixedStrategy, offsetParent), x = (clientRect.left + visualOffsets.x) / scale2.x, y = (clientRect.top + visualOffsets.y) / scale2.y, width = clientRect.width / scale2.x, height = clientRect.height / scale2.y;
  if (domElement) {
    let win = getWindow(domElement), offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent, currentIFrame = win.frameElement;
    for (; currentIFrame && offsetParent && offsetWin !== win; ) {
      let iframeScale = getScale(currentIFrame), iframeRect = currentIFrame.getBoundingClientRect(), css = getComputedStyle(currentIFrame), left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x, top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x, y *= iframeScale.y, width *= iframeScale.x, height *= iframeScale.y, x += left, y += top, currentIFrame = getWindow(currentIFrame).frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function getDocumentElement(node) {
  return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;
}
function getNodeScroll(element) {
  return isElement(element) ? {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  } : {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref, isOffsetParentAnElement = isHTMLElement(offsetParent), documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement)
    return rect;
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  }, scale2 = createEmptyCoords(1), offsets = createEmptyCoords(0);
  if ((isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") && ((getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) && (scroll = getNodeScroll(offsetParent)), isHTMLElement(offsetParent))) {
    let offsetRect = getBoundingClientRect(offsetParent);
    scale2 = getScale(offsetParent), offsets.x = offsetRect.x + offsetParent.clientLeft, offsets.y = offsetRect.y + offsetParent.clientTop;
  }
  return {
    width: rect.width * scale2.x,
    height: rect.height * scale2.y,
    x: rect.x * scale2.x - scroll.scrollLeft * scale2.x + offsets.x,
    y: rect.y * scale2.y - scroll.scrollTop * scale2.y + offsets.y
  };
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  let html = getDocumentElement(element), scroll = getNodeScroll(element), body = element.ownerDocument.body, width = max2(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth), height = max2(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight), x = -scroll.scrollLeft + getWindowScrollBarX(element), y = -scroll.scrollTop;
  return getComputedStyle$1(body).direction === "rtl" && (x += max2(html.clientWidth, body.clientWidth) - width), {
    width,
    height,
    x,
    y
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html")
    return node;
  let result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  let parentNode = getParentNode(node);
  return isLastTraversableNode(parentNode) ? node.ownerDocument ? node.ownerDocument.body : node.body : isHTMLElement(parentNode) && isOverflowElement(parentNode) ? parentNode : getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list2) {
  var _node$ownerDocument;
  list2 === void 0 && (list2 = []);
  let scrollableAncestor = getNearestOverflowAncestor(node), isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body), win = getWindow(scrollableAncestor);
  return isBody ? list2.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []) : list2.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));
}
function getViewportRect(element, strategy) {
  let win = getWindow(element), html = getDocumentElement(element), visualViewport = win.visualViewport, width = html.clientWidth, height = html.clientHeight, x = 0, y = 0;
  if (visualViewport) {
    width = visualViewport.width, height = visualViewport.height;
    let visualViewportBased = isSafari();
    (!visualViewportBased || visualViewportBased && strategy === "fixed") && (x = visualViewport.offsetLeft, y = visualViewport.offsetTop);
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  let clientRect = getBoundingClientRect(element, !0, strategy === "fixed"), top = clientRect.top + element.clientTop, left = clientRect.left + element.clientLeft, scale2 = isHTMLElement(element) ? getScale(element) : createEmptyCoords(1), width = element.clientWidth * scale2.x, height = element.clientHeight * scale2.y, x = left * scale2.x, y = top * scale2.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport")
    rect = getViewportRect(element, strategy);
  else if (clippingAncestor === "document")
    rect = getDocumentRect(getDocumentElement(element));
  else if (isElement(clippingAncestor))
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  else {
    let visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  let parentNode = getParentNode(element);
  return parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode) ? !1 : getComputedStyle$1(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  let cachedResult = cache.get(element);
  if (cachedResult)
    return cachedResult;
  let result = getOverflowAncestors(element).filter((el) => isElement(el) && getNodeName(el) !== "body"), currentContainingBlockComputedStyle = null, elementIsFixed = getComputedStyle$1(element).position === "fixed", currentNode = elementIsFixed ? getParentNode(element) : element;
  for (; isElement(currentNode) && !isLastTraversableNode(currentNode); ) {
    let computedStyle = getComputedStyle$1(currentNode), currentNodeIsContaining = isContainingBlock(currentNode);
    !currentNodeIsContaining && computedStyle.position === "fixed" && (currentContainingBlockComputedStyle = null), (elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode)) ? result = result.filter((ancestor) => ancestor !== currentNode) : currentContainingBlockComputedStyle = computedStyle, currentNode = getParentNode(currentNode);
  }
  return cache.set(element, result), result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref, clippingAncestors = [...boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary), rootBoundary], firstClippingAncestor = clippingAncestors[0], clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    let rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    return accRect.top = max2(rect.top, accRect.top), accRect.right = min2(rect.right, accRect.right), accRect.bottom = min2(rect.bottom, accRect.bottom), accRect.left = max2(rect.left, accRect.left), accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  return getCssDimensions(element);
}
function getTrueOffsetParent(element, polyfill) {
  return !isHTMLElement(element) || getComputedStyle$1(element).position === "fixed" ? null : polyfill ? polyfill(element) : element.offsetParent;
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  for (; isHTMLElement(currentNode) && !isLastTraversableNode(currentNode); ) {
    if (isContainingBlock(currentNode))
      return currentNode;
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function getOffsetParent(element, polyfill) {
  let window2 = getWindow(element);
  if (!isHTMLElement(element))
    return window2;
  let offsetParent = getTrueOffsetParent(element, polyfill);
  for (; offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static"; )
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  return offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static" && !isContainingBlock(offsetParent)) ? window2 : offsetParent || getContainingBlock(element) || window2;
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  let isOffsetParentAnElement = isHTMLElement(offsetParent), documentElement = getDocumentElement(offsetParent), isFixed = strategy === "fixed", rect = getBoundingClientRect(element, !0, isFixed, offsetParent), scroll = {
    scrollLeft: 0,
    scrollTop: 0
  }, offsets = createEmptyCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed)
    if ((getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) && (scroll = getNodeScroll(offsetParent)), isHTMLElement(offsetParent)) {
      let offsetRect = getBoundingClientRect(offsetParent, !0, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft, offsets.y = offsetRect.y + offsetParent.clientTop;
    } else
      documentElement && (offsets.x = getWindowScrollBarX(documentElement));
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
var platform = {
  getClippingRect,
  convertOffsetParentRelativeRectToViewportRelativeRect,
  isElement,
  getDimensions,
  getOffsetParent,
  getDocumentElement,
  getScale,
  async getElementRects(_ref) {
    let {
      reference,
      floating,
      strategy
    } = _ref, getOffsetParentFn = this.getOffsetParent || getOffsetParent, getDimensionsFn = this.getDimensions;
    return {
      reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),
      floating: {
        x: 0,
        y: 0,
        ...await getDimensionsFn(floating)
      }
    };
  },
  getClientRects: (element) => Array.from(element.getClientRects()),
  isRTL: (element) => getComputedStyle$1(element).direction === "rtl"
};
function observeMove(element, onMove) {
  let io = null, timeoutId, root = getDocumentElement(element);
  function cleanup() {
    clearTimeout(timeoutId), io && io.disconnect(), io = null;
  }
  function refresh(skip, threshold) {
    skip === void 0 && (skip = !1), threshold === void 0 && (threshold = 1), cleanup();
    let {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (skip || onMove(), !width || !height)
      return;
    let insetTop = floor(top), insetRight = floor(root.clientWidth - (left + width)), insetBottom = floor(root.clientHeight - (top + height)), insetLeft = floor(left), rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px", isFirstUpdate = !0;
    io = new IntersectionObserver((entries) => {
      let ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate)
          return refresh();
        ratio ? refresh(!1, ratio) : timeoutId = setTimeout(() => {
          refresh(!1, 1e-7);
        }, 100);
      }
      isFirstUpdate = !1;
    }, {
      rootMargin,
      threshold: max2(0, min2(1, threshold)) || 1
    }), io.observe(element);
  }
  return refresh(!0), cleanup;
}
function autoUpdate(reference, floating, update, options) {
  options === void 0 && (options = {});
  let {
    ancestorScroll = !0,
    ancestorResize = !0,
    elementResize = !0,
    layoutShift = typeof IntersectionObserver == "function",
    animationFrame = !1
  } = options, referenceEl = unwrapElement(reference), ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: !0
    }), ancestorResize && ancestor.addEventListener("resize", update);
  });
  let cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null, resizeObserver = null;
  elementResize && (resizeObserver = new ResizeObserver(update), referenceEl && !animationFrame && resizeObserver.observe(referenceEl), resizeObserver.observe(floating));
  let frameId, prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  animationFrame && frameLoop();
  function frameLoop() {
    let nextRefRect = getBoundingClientRect(reference);
    prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height) && update(), prevRefRect = nextRefRect, frameId = requestAnimationFrame(frameLoop);
  }
  return update(), () => {
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update), ancestorResize && ancestor.removeEventListener("resize", update);
    }), cleanupIo && cleanupIo(), resizeObserver && resizeObserver.disconnect(), resizeObserver = null, animationFrame && cancelAnimationFrame(frameId);
  };
}
var computePosition2 = (reference, floating, options) => {
  let cache = /* @__PURE__ */ new Map(), mergedOptions = {
    platform,
    ...options
  }, platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// ../../../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js
var React8 = __toESM(require_react()), import_react85 = __toESM(require_react()), ReactDOM = __toESM(require_react_dom()), arrow2 = (options) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(state) {
      let {
        element,
        padding
      } = typeof options == "function" ? options(state) : options;
      return element && isRef(element) ? element.current != null ? arrow({
        element: element.current,
        padding
      }).fn(state) : {} : element ? arrow({
        element,
        padding
      }).fn(state) : {};
    }
  };
}, index = typeof document < "u" ? import_react85.useLayoutEffect : import_react85.useEffect;
function deepEqual(a9, b) {
  if (a9 === b)
    return !0;
  if (typeof a9 != typeof b)
    return !1;
  if (typeof a9 == "function" && a9.toString() === b.toString())
    return !0;
  let length, i13, keys;
  if (a9 && b && typeof a9 == "object") {
    if (Array.isArray(a9)) {
      if (length = a9.length, length != b.length)
        return !1;
      for (i13 = length; i13-- !== 0; )
        if (!deepEqual(a9[i13], b[i13]))
          return !1;
      return !0;
    }
    if (keys = Object.keys(a9), length = keys.length, length !== Object.keys(b).length)
      return !1;
    for (i13 = length; i13-- !== 0; )
      if (!{}.hasOwnProperty.call(b, keys[i13]))
        return !1;
    for (i13 = length; i13-- !== 0; ) {
      let key = keys[i13];
      if (!(key === "_owner" && a9.$$typeof) && !deepEqual(a9[key], b[key]))
        return !1;
    }
    return !0;
  }
  return a9 !== a9 && b !== b;
}
function getDPR(element) {
  return typeof window > "u" ? 1 : (element.ownerDocument.defaultView || window).devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  let dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef(value) {
  let ref = React8.useRef(value);
  return index(() => {
    ref.current = value;
  }), ref;
}
function useFloating(options) {
  options === void 0 && (options = {});
  let {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = !0,
    whileElementsMounted,
    open
  } = options, [data, setData] = React8.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: !1
  }), [latestMiddleware, setLatestMiddleware] = React8.useState(middleware);
  deepEqual(latestMiddleware, middleware) || setLatestMiddleware(middleware);
  let [_reference, _setReference] = React8.useState(null), [_floating, _setFloating] = React8.useState(null), setReference = React8.useCallback((node) => {
    node != referenceRef.current && (referenceRef.current = node, _setReference(node));
  }, [_setReference]), setFloating = React8.useCallback((node) => {
    node !== floatingRef.current && (floatingRef.current = node, _setFloating(node));
  }, [_setFloating]), referenceEl = externalReference || _reference, floatingEl = externalFloating || _floating, referenceRef = React8.useRef(null), floatingRef = React8.useRef(null), dataRef = React8.useRef(data), whileElementsMountedRef = useLatestRef(whileElementsMounted), platformRef = useLatestRef(platform2), update = React8.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current)
      return;
    let config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    platformRef.current && (config.platform = platformRef.current), computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
      let fullData = {
        ...data2,
        isPositioned: !0
      };
      isMountedRef.current && !deepEqual(dataRef.current, fullData) && (dataRef.current = fullData, ReactDOM.flushSync(() => {
        setData(fullData);
      }));
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index(() => {
    open === !1 && dataRef.current.isPositioned && (dataRef.current.isPositioned = !1, setData((data2) => ({
      ...data2,
      isPositioned: !1
    })));
  }, [open]);
  let isMountedRef = React8.useRef(!1);
  index(() => (isMountedRef.current = !0, () => {
    isMountedRef.current = !1;
  }), []), index(() => {
    if (referenceEl && (referenceRef.current = referenceEl), floatingEl && (floatingRef.current = floatingEl), referenceEl && floatingEl) {
      if (whileElementsMountedRef.current)
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      update();
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef]);
  let refs = React8.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]), elements = React8.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]), floatingStyles = React8.useMemo(() => {
    let initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating)
      return initialStyles;
    let x = roundByDPR(elements.floating, data.x), y = roundByDPR(elements.floating, data.y);
    return transform ? {
      ...initialStyles,
      transform: "translate(" + x + "px, " + y + "px)",
      ...getDPR(elements.floating) >= 1.5 && {
        willChange: "transform"
      }
    } : {
      position: strategy,
      left: x,
      top: y
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React8.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}

// ../../../node_modules/@radix-ui/react-popper/dist/index.mjs
var $cf1ac5d9fe0e8206$var$POPPER_NAME = "Popper", [$cf1ac5d9fe0e8206$var$createPopperContext, $cf1ac5d9fe0e8206$export$722aac194ae923] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($cf1ac5d9fe0e8206$var$POPPER_NAME), [$cf1ac5d9fe0e8206$var$PopperProvider, $cf1ac5d9fe0e8206$var$usePopperContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$POPPER_NAME), $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9 = (props) => {
  let { __scopePopper, children } = props, [anchor, setAnchor] = (0, import_react86.useState)(null);
  return /* @__PURE__ */ (0, import_react86.createElement)($cf1ac5d9fe0e8206$var$PopperProvider, {
    scope: __scopePopper,
    anchor,
    onAnchorChange: setAnchor
  }, children);
}, $cf1ac5d9fe0e8206$var$ANCHOR_NAME = "PopperAnchor", $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d = /* @__PURE__ */ (0, import_react86.forwardRef)((props, forwardedRef) => {
  let { __scopePopper, virtualRef, ...anchorProps } = props, context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$ANCHOR_NAME, __scopePopper), ref = (0, import_react86.useRef)(null), composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
  return (0, import_react86.useEffect)(() => {
    context.onAnchorChange((virtualRef == null ? void 0 : virtualRef.current) || ref.current);
  }), virtualRef ? null : /* @__PURE__ */ (0, import_react86.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, anchorProps, {
    ref: composedRefs
  }));
}), $cf1ac5d9fe0e8206$var$CONTENT_NAME = "PopperContent", [$cf1ac5d9fe0e8206$var$PopperContentProvider, $cf1ac5d9fe0e8206$var$useContentContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME), $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc = /* @__PURE__ */ (0, import_react86.forwardRef)((props, forwardedRef) => {
  var _arrowSize$width, _arrowSize$height, _middlewareData$arrow, _middlewareData$arrow2, _middlewareData$arrow3, _middlewareData$trans, _middlewareData$trans2, _middlewareData$hide;
  let { __scopePopper, side = "bottom", sideOffset = 0, align = "center", alignOffset = 0, arrowPadding = 0, collisionBoundary = [], collisionPadding: collisionPaddingProp = 0, sticky = "partial", hideWhenDetached = !1, avoidCollisions = !0, onPlaced, ...contentProps } = props, context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME, __scopePopper), [content, setContent] = (0, import_react86.useState)(null), composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node) => setContent(node)
  ), [arrow3, setArrow] = (0, import_react86.useState)(null), arrowSize = $db6c3485150b8e66$export$1ab7ae714698c4b8(arrow3), arrowWidth = (_arrowSize$width = arrowSize == null ? void 0 : arrowSize.width) !== null && _arrowSize$width !== void 0 ? _arrowSize$width : 0, arrowHeight = (_arrowSize$height = arrowSize == null ? void 0 : arrowSize.height) !== null && _arrowSize$height !== void 0 ? _arrowSize$height : 0, desiredPlacement = side + (align !== "center" ? "-" + align : ""), collisionPadding = typeof collisionPaddingProp == "number" ? collisionPaddingProp : {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...collisionPaddingProp
  }, boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [
    collisionBoundary
  ], hasExplicitBoundaries = boundary.length > 0, detectOverflowOptions = {
    padding: collisionPadding,
    boundary: boundary.filter($cf1ac5d9fe0e8206$var$isNotNull),
    // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries
    altBoundary: hasExplicitBoundaries
  }, { refs, floatingStyles, placement, isPositioned, middlewareData } = useFloating({
    // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues
    strategy: "fixed",
    placement: desiredPlacement,
    whileElementsMounted: autoUpdate,
    elements: {
      reference: context.anchor
    },
    middleware: [
      offset({
        mainAxis: sideOffset + arrowHeight,
        alignmentAxis: alignOffset
      }),
      avoidCollisions && shift({
        mainAxis: !0,
        crossAxis: !1,
        limiter: sticky === "partial" ? limitShift() : void 0,
        ...detectOverflowOptions
      }),
      avoidCollisions && flip({
        ...detectOverflowOptions
      }),
      size({
        ...detectOverflowOptions,
        apply: ({ elements, rects, availableWidth, availableHeight }) => {
          let { width: anchorWidth, height: anchorHeight } = rects.reference, contentStyle = elements.floating.style;
          contentStyle.setProperty("--radix-popper-available-width", `${availableWidth}px`), contentStyle.setProperty("--radix-popper-available-height", `${availableHeight}px`), contentStyle.setProperty("--radix-popper-anchor-width", `${anchorWidth}px`), contentStyle.setProperty("--radix-popper-anchor-height", `${anchorHeight}px`);
        }
      }),
      arrow3 && arrow2({
        element: arrow3,
        padding: arrowPadding
      }),
      $cf1ac5d9fe0e8206$var$transformOrigin({
        arrowWidth,
        arrowHeight
      }),
      hideWhenDetached && hide({
        strategy: "referenceHidden"
      })
    ]
  }), [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement), handlePlaced = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onPlaced);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    isPositioned && (handlePlaced == null || handlePlaced());
  }, [
    isPositioned,
    handlePlaced
  ]);
  let arrowX = (_middlewareData$arrow = middlewareData.arrow) === null || _middlewareData$arrow === void 0 ? void 0 : _middlewareData$arrow.x, arrowY = (_middlewareData$arrow2 = middlewareData.arrow) === null || _middlewareData$arrow2 === void 0 ? void 0 : _middlewareData$arrow2.y, cannotCenterArrow = ((_middlewareData$arrow3 = middlewareData.arrow) === null || _middlewareData$arrow3 === void 0 ? void 0 : _middlewareData$arrow3.centerOffset) !== 0, [contentZIndex, setContentZIndex] = (0, import_react86.useState)();
  return $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    content && setContentZIndex(window.getComputedStyle(content).zIndex);
  }, [
    content
  ]), /* @__PURE__ */ (0, import_react86.createElement)("div", {
    ref: refs.setFloating,
    "data-radix-popper-content-wrapper": "",
    style: {
      ...floatingStyles,
      transform: isPositioned ? floatingStyles.transform : "translate(0, -200%)",
      // keep off the page when measuring
      minWidth: "max-content",
      zIndex: contentZIndex,
      ["--radix-popper-transform-origin"]: [
        (_middlewareData$trans = middlewareData.transformOrigin) === null || _middlewareData$trans === void 0 ? void 0 : _middlewareData$trans.x,
        (_middlewareData$trans2 = middlewareData.transformOrigin) === null || _middlewareData$trans2 === void 0 ? void 0 : _middlewareData$trans2.y
      ].join(" ")
    },
    dir: props.dir
  }, /* @__PURE__ */ (0, import_react86.createElement)($cf1ac5d9fe0e8206$var$PopperContentProvider, {
    scope: __scopePopper,
    placedSide,
    onArrowChange: setArrow,
    arrowX,
    arrowY,
    shouldHideArrow: cannotCenterArrow
  }, /* @__PURE__ */ (0, import_react86.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    "data-side": placedSide,
    "data-align": placedAlign
  }, contentProps, {
    ref: composedRefs,
    style: {
      ...contentProps.style,
      // if the PopperContent hasn't been placed yet (not all measurements done)
      // we prevent animations so that users's animation don't kick in too early referring wrong sides
      animation: isPositioned ? void 0 : "none",
      // hide the content if using the hide middleware and should be hidden
      opacity: (_middlewareData$hide = middlewareData.hide) !== null && _middlewareData$hide !== void 0 && _middlewareData$hide.referenceHidden ? 0 : void 0
    }
  }))));
});
function $cf1ac5d9fe0e8206$var$isNotNull(value) {
  return value !== null;
}
var $cf1ac5d9fe0e8206$var$transformOrigin = (options) => ({
  name: "transformOrigin",
  options,
  fn(data) {
    var _middlewareData$arrow4, _middlewareData$arrow5, _middlewareData$arrow6, _middlewareData$arrow7, _middlewareData$arrow8;
    let { placement, rects, middlewareData } = data, isArrowHidden = ((_middlewareData$arrow4 = middlewareData.arrow) === null || _middlewareData$arrow4 === void 0 ? void 0 : _middlewareData$arrow4.centerOffset) !== 0, arrowWidth = isArrowHidden ? 0 : options.arrowWidth, arrowHeight = isArrowHidden ? 0 : options.arrowHeight, [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement), noArrowAlign = {
      start: "0%",
      center: "50%",
      end: "100%"
    }[placedAlign], arrowXCenter = ((_middlewareData$arrow5 = (_middlewareData$arrow6 = middlewareData.arrow) === null || _middlewareData$arrow6 === void 0 ? void 0 : _middlewareData$arrow6.x) !== null && _middlewareData$arrow5 !== void 0 ? _middlewareData$arrow5 : 0) + arrowWidth / 2, arrowYCenter = ((_middlewareData$arrow7 = (_middlewareData$arrow8 = middlewareData.arrow) === null || _middlewareData$arrow8 === void 0 ? void 0 : _middlewareData$arrow8.y) !== null && _middlewareData$arrow7 !== void 0 ? _middlewareData$arrow7 : 0) + arrowHeight / 2, x = "", y = "";
    return placedSide === "bottom" ? (x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`, y = `${-arrowHeight}px`) : placedSide === "top" ? (x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`, y = `${rects.floating.height + arrowHeight}px`) : placedSide === "right" ? (x = `${-arrowHeight}px`, y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`) : placedSide === "left" && (x = `${rects.floating.width + arrowHeight}px`, y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`), {
      data: {
        x,
        y
      }
    };
  }
});
function $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement) {
  let [side, align = "center"] = placement.split("-");
  return [
    side,
    align
  ];
}
var $cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9 = $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9, $cf1ac5d9fe0e8206$export$b688253958b8dfe7 = $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d, $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2 = $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc;

// ../../../node_modules/@radix-ui/react-portal/dist/index.mjs
var import_react87 = __toESM(require_react(), 1), import_react_dom4 = __toESM(require_react_dom(), 1);
var $f1701beae083dbae$export$602eac185826482c = /* @__PURE__ */ (0, import_react87.forwardRef)((props, forwardedRef) => {
  var _globalThis$document;
  let { container = globalThis == null || (_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.body, ...portalProps } = props;
  return container ? /* @__PURE__ */ import_react_dom4.default.createPortal(/* @__PURE__ */ (0, import_react87.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, portalProps, {
    ref: forwardedRef
  })), container) : null;
});

// ../../../node_modules/@radix-ui/react-roving-focus/dist/index.mjs
var import_react88 = __toESM(require_react(), 1);
var $d7bdfb9eb0fdf311$var$ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus", $d7bdfb9eb0fdf311$var$EVENT_OPTIONS = {
  bubbles: !1,
  cancelable: !0
}, $d7bdfb9eb0fdf311$var$GROUP_NAME = "RovingFocusGroup", [$d7bdfb9eb0fdf311$var$Collection, $d7bdfb9eb0fdf311$var$useCollection, $d7bdfb9eb0fdf311$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($d7bdfb9eb0fdf311$var$GROUP_NAME), [$d7bdfb9eb0fdf311$var$createRovingFocusGroupContext, $d7bdfb9eb0fdf311$export$c7109489551a4f4] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($d7bdfb9eb0fdf311$var$GROUP_NAME, [
  $d7bdfb9eb0fdf311$var$createCollectionScope
]), [$d7bdfb9eb0fdf311$var$RovingFocusProvider, $d7bdfb9eb0fdf311$var$useRovingFocusContext] = $d7bdfb9eb0fdf311$var$createRovingFocusGroupContext($d7bdfb9eb0fdf311$var$GROUP_NAME), $d7bdfb9eb0fdf311$export$8699f7c8af148338 = /* @__PURE__ */ (0, import_react88.forwardRef)((props, forwardedRef) => /* @__PURE__ */ (0, import_react88.createElement)($d7bdfb9eb0fdf311$var$Collection.Provider, {
  scope: props.__scopeRovingFocusGroup
}, /* @__PURE__ */ (0, import_react88.createElement)($d7bdfb9eb0fdf311$var$Collection.Slot, {
  scope: props.__scopeRovingFocusGroup
}, /* @__PURE__ */ (0, import_react88.createElement)($d7bdfb9eb0fdf311$var$RovingFocusGroupImpl, _extends({}, props, {
  ref: forwardedRef
}))))), $d7bdfb9eb0fdf311$var$RovingFocusGroupImpl = /* @__PURE__ */ (0, import_react88.forwardRef)((props, forwardedRef) => {
  let { __scopeRovingFocusGroup, orientation, loop = !1, dir, currentTabStopId: currentTabStopIdProp, defaultCurrentTabStopId, onCurrentTabStopIdChange, onEntryFocus, ...groupProps } = props, ref = (0, import_react88.useRef)(null), composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref), direction = $f631663db3294ace$export$b39126d51d94e6f3(dir), [currentTabStopId = null, setCurrentTabStopId] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: currentTabStopIdProp,
    defaultProp: defaultCurrentTabStopId,
    onChange: onCurrentTabStopIdChange
  }), [isTabbingBackOut, setIsTabbingBackOut] = (0, import_react88.useState)(!1), handleEntryFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEntryFocus), getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup), isClickFocusRef = (0, import_react88.useRef)(!1), [focusableItemsCount, setFocusableItemsCount] = (0, import_react88.useState)(0);
  return (0, import_react88.useEffect)(() => {
    let node = ref.current;
    if (node)
      return node.addEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus), () => node.removeEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus);
  }, [
    handleEntryFocus
  ]), /* @__PURE__ */ (0, import_react88.createElement)($d7bdfb9eb0fdf311$var$RovingFocusProvider, {
    scope: __scopeRovingFocusGroup,
    orientation,
    dir: direction,
    loop,
    currentTabStopId,
    onItemFocus: (0, import_react88.useCallback)(
      (tabStopId) => setCurrentTabStopId(tabStopId),
      [
        setCurrentTabStopId
      ]
    ),
    onItemShiftTab: (0, import_react88.useCallback)(
      () => setIsTabbingBackOut(!0),
      []
    ),
    onFocusableItemAdd: (0, import_react88.useCallback)(
      () => setFocusableItemsCount(
        (prevCount) => prevCount + 1
      ),
      []
    ),
    onFocusableItemRemove: (0, import_react88.useCallback)(
      () => setFocusableItemsCount(
        (prevCount) => prevCount - 1
      ),
      []
    )
  }, /* @__PURE__ */ (0, import_react88.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
    "data-orientation": orientation
  }, groupProps, {
    ref: composedRefs,
    style: {
      outline: "none",
      ...props.style
    },
    onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onMouseDown, () => {
      isClickFocusRef.current = !0;
    }),
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, (event) => {
      let isKeyboardFocus = !isClickFocusRef.current;
      if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
        let entryFocusEvent = new CustomEvent($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, $d7bdfb9eb0fdf311$var$EVENT_OPTIONS);
        if (event.currentTarget.dispatchEvent(entryFocusEvent), !entryFocusEvent.defaultPrevented) {
          let items = getItems().filter(
            (item) => item.focusable
          ), activeItem = items.find(
            (item) => item.active
          ), currentItem = items.find(
            (item) => item.id === currentTabStopId
          ), candidateNodes = [
            activeItem,
            currentItem,
            ...items
          ].filter(Boolean).map(
            (item) => item.ref.current
          );
          $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes);
        }
      }
      isClickFocusRef.current = !1;
    }),
    onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
      props.onBlur,
      () => setIsTabbingBackOut(!1)
    )
  })));
}), $d7bdfb9eb0fdf311$var$ITEM_NAME = "RovingFocusGroupItem", $d7bdfb9eb0fdf311$export$ab9df7c53fe8454 = /* @__PURE__ */ (0, import_react88.forwardRef)((props, forwardedRef) => {
  let { __scopeRovingFocusGroup, focusable = !0, active = !1, tabStopId, ...itemProps } = props, autoId = $1746a345f3d73bb7$export$f680877a34711e37(), id3 = tabStopId || autoId, context = $d7bdfb9eb0fdf311$var$useRovingFocusContext($d7bdfb9eb0fdf311$var$ITEM_NAME, __scopeRovingFocusGroup), isCurrentTabStop = context.currentTabStopId === id3, getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup), { onFocusableItemAdd, onFocusableItemRemove } = context;
  return (0, import_react88.useEffect)(() => {
    if (focusable)
      return onFocusableItemAdd(), () => onFocusableItemRemove();
  }, [
    focusable,
    onFocusableItemAdd,
    onFocusableItemRemove
  ]), /* @__PURE__ */ (0, import_react88.createElement)($d7bdfb9eb0fdf311$var$Collection.ItemSlot, {
    scope: __scopeRovingFocusGroup,
    id: id3,
    focusable,
    active
  }, /* @__PURE__ */ (0, import_react88.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
    tabIndex: isCurrentTabStop ? 0 : -1,
    "data-orientation": context.orientation
  }, itemProps, {
    ref: forwardedRef,
    onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onMouseDown, (event) => {
      focusable ? context.onItemFocus(id3) : event.preventDefault();
    }),
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
      props.onFocus,
      () => context.onItemFocus(id3)
    ),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
      if (event.key === "Tab" && event.shiftKey) {
        context.onItemShiftTab();
        return;
      }
      if (event.target !== event.currentTarget)
        return;
      let focusIntent = $d7bdfb9eb0fdf311$var$getFocusIntent(event, context.orientation, context.dir);
      if (focusIntent !== void 0) {
        event.preventDefault();
        let candidateNodes = getItems().filter(
          (item) => item.focusable
        ).map(
          (item) => item.ref.current
        );
        if (focusIntent === "last")
          candidateNodes.reverse();
        else if (focusIntent === "prev" || focusIntent === "next") {
          focusIntent === "prev" && candidateNodes.reverse();
          let currentIndex = candidateNodes.indexOf(event.currentTarget);
          candidateNodes = context.loop ? $d7bdfb9eb0fdf311$var$wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
        }
        setTimeout(
          () => $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes)
        );
      }
    })
  })));
}), $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT = {
  ArrowLeft: "prev",
  ArrowUp: "prev",
  ArrowRight: "next",
  ArrowDown: "next",
  PageUp: "first",
  Home: "first",
  PageDown: "last",
  End: "last"
};
function $d7bdfb9eb0fdf311$var$getDirectionAwareKey(key, dir) {
  return dir !== "rtl" ? key : key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
}
function $d7bdfb9eb0fdf311$var$getFocusIntent(event, orientation, dir) {
  let key = $d7bdfb9eb0fdf311$var$getDirectionAwareKey(event.key, dir);
  if (!(orientation === "vertical" && [
    "ArrowLeft",
    "ArrowRight"
  ].includes(key)) && !(orientation === "horizontal" && [
    "ArrowUp",
    "ArrowDown"
  ].includes(key)))
    return $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT[key];
}
function $d7bdfb9eb0fdf311$var$focusFirst(candidates) {
  let PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
  for (let candidate of candidates)
    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT || (candidate.focus(), document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT))
      return;
}
function $d7bdfb9eb0fdf311$var$wrapArray(array, startIndex) {
  return array.map(
    (_, index2) => array[(startIndex + index2) % array.length]
  );
}
var $d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9 = $d7bdfb9eb0fdf311$export$8699f7c8af148338, $d7bdfb9eb0fdf311$export$6d08773d2e66f8f2 = $d7bdfb9eb0fdf311$export$ab9df7c53fe8454;

// ../../../node_modules/@radix-ui/react-menu/dist/index.mjs
var import_aria_hidden = __toESM(require_es5(), 1), import_react_remove_scroll = __toESM(require_es57(), 1), $6cc32821e9371a1c$var$SELECTION_KEYS = [
  "Enter",
  " "
], $6cc32821e9371a1c$var$FIRST_KEYS = [
  "ArrowDown",
  "PageUp",
  "Home"
], $6cc32821e9371a1c$var$LAST_KEYS = [
  "ArrowUp",
  "PageDown",
  "End"
], $6cc32821e9371a1c$var$FIRST_LAST_KEYS = [
  ...$6cc32821e9371a1c$var$FIRST_KEYS,
  ...$6cc32821e9371a1c$var$LAST_KEYS
], $6cc32821e9371a1c$var$SUB_OPEN_KEYS = {
  ltr: [
    ...$6cc32821e9371a1c$var$SELECTION_KEYS,
    "ArrowRight"
  ],
  rtl: [
    ...$6cc32821e9371a1c$var$SELECTION_KEYS,
    "ArrowLeft"
  ]
};
var $6cc32821e9371a1c$var$MENU_NAME = "Menu", [$6cc32821e9371a1c$var$Collection, $6cc32821e9371a1c$var$useCollection, $6cc32821e9371a1c$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($6cc32821e9371a1c$var$MENU_NAME), [$6cc32821e9371a1c$var$createMenuContext, $6cc32821e9371a1c$export$4027731b685e72eb] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($6cc32821e9371a1c$var$MENU_NAME, [
  $6cc32821e9371a1c$var$createCollectionScope,
  $cf1ac5d9fe0e8206$export$722aac194ae923,
  $d7bdfb9eb0fdf311$export$c7109489551a4f4
]), $6cc32821e9371a1c$var$usePopperScope = $cf1ac5d9fe0e8206$export$722aac194ae923(), $6cc32821e9371a1c$var$useRovingFocusGroupScope = $d7bdfb9eb0fdf311$export$c7109489551a4f4(), [$6cc32821e9371a1c$var$MenuProvider, $6cc32821e9371a1c$var$useMenuContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$MENU_NAME), [$6cc32821e9371a1c$var$MenuRootProvider, $6cc32821e9371a1c$var$useMenuRootContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$MENU_NAME), $6cc32821e9371a1c$export$d9b273488cd8ce6f = (props) => {
  let { __scopeMenu, open = !1, children, dir, onOpenChange, modal = !0 } = props, popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu), [content, setContent] = (0, import_react89.useState)(null), isUsingKeyboardRef = (0, import_react89.useRef)(!1), handleOpenChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onOpenChange), direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
  return (0, import_react89.useEffect)(() => {
    let handleKeyDown = () => {
      isUsingKeyboardRef.current = !0, document.addEventListener("pointerdown", handlePointer, {
        capture: !0,
        once: !0
      }), document.addEventListener("pointermove", handlePointer, {
        capture: !0,
        once: !0
      });
    }, handlePointer = () => isUsingKeyboardRef.current = !1;
    return document.addEventListener("keydown", handleKeyDown, {
      capture: !0
    }), () => {
      document.removeEventListener("keydown", handleKeyDown, {
        capture: !0
      }), document.removeEventListener("pointerdown", handlePointer, {
        capture: !0
      }), document.removeEventListener("pointermove", handlePointer, {
        capture: !0
      });
    };
  }, []), /* @__PURE__ */ (0, import_react89.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, popperScope, /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$MenuProvider, {
    scope: __scopeMenu,
    open,
    onOpenChange: handleOpenChange,
    content,
    onContentChange: setContent
  }, /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$MenuRootProvider, {
    scope: __scopeMenu,
    onClose: (0, import_react89.useCallback)(
      () => handleOpenChange(!1),
      [
        handleOpenChange
      ]
    ),
    isUsingKeyboardRef,
    dir: direction,
    modal
  }, children)));
};
var $6cc32821e9371a1c$export$9fa5ebd18bee4d43 = /* @__PURE__ */ (0, import_react89.forwardRef)((props, forwardedRef) => {
  let { __scopeMenu, ...anchorProps } = props, popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
  return /* @__PURE__ */ (0, import_react89.createElement)($cf1ac5d9fe0e8206$export$b688253958b8dfe7, _extends({}, popperScope, anchorProps, {
    ref: forwardedRef
  }));
}), $6cc32821e9371a1c$var$PORTAL_NAME = "MenuPortal", [$6cc32821e9371a1c$var$PortalProvider, $6cc32821e9371a1c$var$usePortalContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$PORTAL_NAME, {
  forceMount: void 0
}), $6cc32821e9371a1c$export$793392f970497feb = (props) => {
  let { __scopeMenu, forceMount, children, container } = props, context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$PORTAL_NAME, __scopeMenu);
  return /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$PortalProvider, {
    scope: __scopeMenu,
    forceMount
  }, /* @__PURE__ */ (0, import_react89.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, /* @__PURE__ */ (0, import_react89.createElement)($f1701beae083dbae$export$602eac185826482c, {
    asChild: !0,
    container
  }, children)));
}, $6cc32821e9371a1c$var$CONTENT_NAME = "MenuContent", [$6cc32821e9371a1c$var$MenuContentProvider, $6cc32821e9371a1c$var$useMenuContentContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$CONTENT_NAME), $6cc32821e9371a1c$export$479f0f2f71193efe = /* @__PURE__ */ (0, import_react89.forwardRef)((props, forwardedRef) => {
  let portalContext = $6cc32821e9371a1c$var$usePortalContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu), { forceMount = portalContext.forceMount, ...contentProps } = props, context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu), rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  return /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$Collection.Provider, {
    scope: props.__scopeMenu
  }, /* @__PURE__ */ (0, import_react89.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || context.open
  }, /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$Collection.Slot, {
    scope: props.__scopeMenu
  }, rootContext.modal ? /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$MenuRootContentModal, _extends({}, contentProps, {
    ref: forwardedRef
  })) : /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$MenuRootContentNonModal, _extends({}, contentProps, {
    ref: forwardedRef
  })))));
}), $6cc32821e9371a1c$var$MenuRootContentModal = /* @__PURE__ */ (0, import_react89.forwardRef)((props, forwardedRef) => {
  let context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu), ref = (0, import_react89.useRef)(null), composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
  return (0, import_react89.useEffect)(() => {
    let content = ref.current;
    if (content)
      return (0, import_aria_hidden.hideOthers)(content);
  }, []), /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$MenuContentImpl, _extends({}, props, {
    ref: composedRefs,
    trapFocus: context.open,
    disableOutsidePointerEvents: context.open,
    disableOutsideScroll: !0,
    onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
      props.onFocusOutside,
      (event) => event.preventDefault(),
      {
        checkForDefaultPrevented: !1
      }
    ),
    onDismiss: () => context.onOpenChange(!1)
  }));
}), $6cc32821e9371a1c$var$MenuRootContentNonModal = /* @__PURE__ */ (0, import_react89.forwardRef)((props, forwardedRef) => {
  let context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
  return /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$MenuContentImpl, _extends({}, props, {
    ref: forwardedRef,
    trapFocus: !1,
    disableOutsidePointerEvents: !1,
    disableOutsideScroll: !1,
    onDismiss: () => context.onOpenChange(!1)
  }));
}), $6cc32821e9371a1c$var$MenuContentImpl = /* @__PURE__ */ (0, import_react89.forwardRef)((props, forwardedRef) => {
  let { __scopeMenu, loop = !1, trapFocus, onOpenAutoFocus, onCloseAutoFocus, disableOutsidePointerEvents, onEntryFocus, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, disableOutsideScroll, ...contentProps } = props, context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, __scopeMenu), rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$CONTENT_NAME, __scopeMenu), popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu), rovingFocusGroupScope = $6cc32821e9371a1c$var$useRovingFocusGroupScope(__scopeMenu), getItems = $6cc32821e9371a1c$var$useCollection(__scopeMenu), [currentItemId, setCurrentItemId] = (0, import_react89.useState)(null), contentRef = (0, import_react89.useRef)(null), composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, contentRef, context.onContentChange), timerRef = (0, import_react89.useRef)(0), searchRef = (0, import_react89.useRef)(""), pointerGraceTimerRef = (0, import_react89.useRef)(0), pointerGraceIntentRef = (0, import_react89.useRef)(null), pointerDirRef = (0, import_react89.useRef)("right"), lastPointerXRef = (0, import_react89.useRef)(0), ScrollLockWrapper = disableOutsideScroll ? import_react_remove_scroll.RemoveScroll : import_react89.Fragment, scrollLockWrapperProps = disableOutsideScroll ? {
    as: $5e63c961fc1ce211$export$8c6ed5c666ac1360,
    allowPinchZoom: !0
  } : void 0, handleTypeaheadSearch = (key) => {
    var _items$find, _items$find2;
    let search = searchRef.current + key, items = getItems().filter(
      (item) => !item.disabled
    ), currentItem = document.activeElement, currentMatch = (_items$find = items.find(
      (item) => item.ref.current === currentItem
    )) === null || _items$find === void 0 ? void 0 : _items$find.textValue, values = items.map(
      (item) => item.textValue
    ), nextMatch = $6cc32821e9371a1c$var$getNextMatch(values, search, currentMatch), newItem = (_items$find2 = items.find(
      (item) => item.textValue === nextMatch
    )) === null || _items$find2 === void 0 ? void 0 : _items$find2.ref.current;
    (function updateSearch(value) {
      searchRef.current = value, window.clearTimeout(timerRef.current), value !== "" && (timerRef.current = window.setTimeout(
        () => updateSearch(""),
        1e3
      ));
    })(search), newItem && setTimeout(
      () => newItem.focus()
    );
  };
  (0, import_react89.useEffect)(() => () => window.clearTimeout(timerRef.current), []), $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
  let isPointerMovingToSubmenu = (0, import_react89.useCallback)((event) => {
    var _pointerGraceIntentRe, _pointerGraceIntentRe2;
    return pointerDirRef.current === ((_pointerGraceIntentRe = pointerGraceIntentRef.current) === null || _pointerGraceIntentRe === void 0 ? void 0 : _pointerGraceIntentRe.side) && $6cc32821e9371a1c$var$isPointerInGraceArea(event, (_pointerGraceIntentRe2 = pointerGraceIntentRef.current) === null || _pointerGraceIntentRe2 === void 0 ? void 0 : _pointerGraceIntentRe2.area);
  }, []);
  return /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$MenuContentProvider, {
    scope: __scopeMenu,
    searchRef,
    onItemEnter: (0, import_react89.useCallback)((event) => {
      isPointerMovingToSubmenu(event) && event.preventDefault();
    }, [
      isPointerMovingToSubmenu
    ]),
    onItemLeave: (0, import_react89.useCallback)((event) => {
      var _contentRef$current;
      isPointerMovingToSubmenu(event) || ((_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 || _contentRef$current.focus(), setCurrentItemId(null));
    }, [
      isPointerMovingToSubmenu
    ]),
    onTriggerLeave: (0, import_react89.useCallback)((event) => {
      isPointerMovingToSubmenu(event) && event.preventDefault();
    }, [
      isPointerMovingToSubmenu
    ]),
    pointerGraceTimerRef,
    onPointerGraceIntentChange: (0, import_react89.useCallback)((intent) => {
      pointerGraceIntentRef.current = intent;
    }, [])
  }, /* @__PURE__ */ (0, import_react89.createElement)(ScrollLockWrapper, scrollLockWrapperProps, /* @__PURE__ */ (0, import_react89.createElement)($d3863c46a17e8a28$export$20e40289641fbbb6, {
    asChild: !0,
    trapped: trapFocus,
    onMountAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(onOpenAutoFocus, (event) => {
      var _contentRef$current2;
      event.preventDefault(), (_contentRef$current2 = contentRef.current) === null || _contentRef$current2 === void 0 || _contentRef$current2.focus();
    }),
    onUnmountAutoFocus: onCloseAutoFocus
  }, /* @__PURE__ */ (0, import_react89.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f22, {
    asChild: !0,
    disableOutsidePointerEvents,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onInteractOutside,
    onDismiss
  }, /* @__PURE__ */ (0, import_react89.createElement)($d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9, _extends({
    asChild: !0
  }, rovingFocusGroupScope, {
    dir: rootContext.dir,
    orientation: "vertical",
    loop,
    currentTabStopId: currentItemId,
    onCurrentTabStopIdChange: setCurrentItemId,
    onEntryFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(onEntryFocus, (event) => {
      rootContext.isUsingKeyboardRef.current || event.preventDefault();
    })
  }), /* @__PURE__ */ (0, import_react89.createElement)($cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2, _extends({
    role: "menu",
    "aria-orientation": "vertical",
    "data-state": $6cc32821e9371a1c$var$getOpenState(context.open),
    "data-radix-menu-content": "",
    dir: rootContext.dir
  }, popperScope, contentProps, {
    ref: composedRefs,
    style: {
      outline: "none",
      ...contentProps.style
    },
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(contentProps.onKeyDown, (event) => {
      let isKeyDownInside = event.target.closest("[data-radix-menu-content]") === event.currentTarget, isModifierKey = event.ctrlKey || event.altKey || event.metaKey, isCharacterKey = event.key.length === 1;
      isKeyDownInside && (event.key === "Tab" && event.preventDefault(), !isModifierKey && isCharacterKey && handleTypeaheadSearch(event.key));
      let content = contentRef.current;
      if (event.target !== content || !$6cc32821e9371a1c$var$FIRST_LAST_KEYS.includes(event.key))
        return;
      event.preventDefault();
      let candidateNodes = getItems().filter(
        (item) => !item.disabled
      ).map(
        (item) => item.ref.current
      );
      $6cc32821e9371a1c$var$LAST_KEYS.includes(event.key) && candidateNodes.reverse(), $6cc32821e9371a1c$var$focusFirst(candidateNodes);
    }),
    onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlur, (event) => {
      event.currentTarget.contains(event.target) || (window.clearTimeout(timerRef.current), searchRef.current = "");
    }),
    onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $6cc32821e9371a1c$var$whenMouse((event) => {
      let target = event.target, pointerXHasChanged = lastPointerXRef.current !== event.clientX;
      if (event.currentTarget.contains(target) && pointerXHasChanged) {
        let newDir = event.clientX > lastPointerXRef.current ? "right" : "left";
        pointerDirRef.current = newDir, lastPointerXRef.current = event.clientX;
      }
    }))
  })))))));
});
var $6cc32821e9371a1c$export$22a631d1f72787bb = /* @__PURE__ */ (0, import_react89.forwardRef)((props, forwardedRef) => {
  let { __scopeMenu, ...groupProps } = props;
  return /* @__PURE__ */ (0, import_react89.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    role: "group"
  }, groupProps, {
    ref: forwardedRef
  }));
});
var $6cc32821e9371a1c$export$dd37bec0e8a99143 = /* @__PURE__ */ (0, import_react89.forwardRef)((props, forwardedRef) => {
  let { __scopeMenu, ...labelProps } = props;
  return /* @__PURE__ */ (0, import_react89.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, labelProps, {
    ref: forwardedRef
  }));
}), $6cc32821e9371a1c$var$ITEM_NAME = "MenuItem", $6cc32821e9371a1c$var$ITEM_SELECT = "menu.itemSelect", $6cc32821e9371a1c$export$2ce376c2cc3355c8 = /* @__PURE__ */ (0, import_react89.forwardRef)((props, forwardedRef) => {
  let { disabled: disabled2 = !1, onSelect, ...itemProps } = props, ref = (0, import_react89.useRef)(null), rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$ITEM_NAME, props.__scopeMenu), contentContext = $6cc32821e9371a1c$var$useMenuContentContext($6cc32821e9371a1c$var$ITEM_NAME, props.__scopeMenu), composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref), isPointerDownRef = (0, import_react89.useRef)(!1), handleSelect = () => {
    let menuItem = ref.current;
    if (!disabled2 && menuItem) {
      let itemSelectEvent = new CustomEvent($6cc32821e9371a1c$var$ITEM_SELECT, {
        bubbles: !0,
        cancelable: !0
      });
      menuItem.addEventListener(
        $6cc32821e9371a1c$var$ITEM_SELECT,
        (event) => onSelect == null ? void 0 : onSelect(event),
        {
          once: !0
        }
      ), $8927f6f2acc4f386$export$6d1a0317bde7de7f(menuItem, itemSelectEvent), itemSelectEvent.defaultPrevented ? isPointerDownRef.current = !1 : rootContext.onClose();
    }
  };
  return /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$MenuItemImpl, _extends({}, itemProps, {
    ref: composedRefs,
    disabled: disabled2,
    onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, handleSelect),
    onPointerDown: (event) => {
      var _props$onPointerDown;
      (_props$onPointerDown = props.onPointerDown) === null || _props$onPointerDown === void 0 || _props$onPointerDown.call(props, event), isPointerDownRef.current = !0;
    },
    onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, (event) => {
      var _event$currentTarget;
      isPointerDownRef.current || (_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 || _event$currentTarget.click();
    }),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
      let isTypingAhead = contentContext.searchRef.current !== "";
      disabled2 || isTypingAhead && event.key === " " || $6cc32821e9371a1c$var$SELECTION_KEYS.includes(event.key) && (event.currentTarget.click(), event.preventDefault());
    })
  }));
}), $6cc32821e9371a1c$var$MenuItemImpl = /* @__PURE__ */ (0, import_react89.forwardRef)((props, forwardedRef) => {
  let { __scopeMenu, disabled: disabled2 = !1, textValue, ...itemProps } = props, contentContext = $6cc32821e9371a1c$var$useMenuContentContext($6cc32821e9371a1c$var$ITEM_NAME, __scopeMenu), rovingFocusGroupScope = $6cc32821e9371a1c$var$useRovingFocusGroupScope(__scopeMenu), ref = (0, import_react89.useRef)(null), composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref), [isFocused, setIsFocused] = (0, import_react89.useState)(!1), [textContent, setTextContent] = (0, import_react89.useState)("");
  return (0, import_react89.useEffect)(() => {
    let menuItem = ref.current;
    if (menuItem) {
      var _menuItem$textContent;
      setTextContent(((_menuItem$textContent = menuItem.textContent) !== null && _menuItem$textContent !== void 0 ? _menuItem$textContent : "").trim());
    }
  }, [
    itemProps.children
  ]), /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$Collection.ItemSlot, {
    scope: __scopeMenu,
    disabled: disabled2,
    textValue: textValue ?? textContent
  }, /* @__PURE__ */ (0, import_react89.createElement)($d7bdfb9eb0fdf311$export$6d08773d2e66f8f2, _extends({
    asChild: !0
  }, rovingFocusGroupScope, {
    focusable: !disabled2
  }), /* @__PURE__ */ (0, import_react89.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    role: "menuitem",
    "data-highlighted": isFocused ? "" : void 0,
    "aria-disabled": disabled2 || void 0,
    "data-disabled": disabled2 ? "" : void 0
  }, itemProps, {
    ref: composedRefs,
    onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $6cc32821e9371a1c$var$whenMouse((event) => {
      disabled2 ? contentContext.onItemLeave(event) : (contentContext.onItemEnter(event), event.defaultPrevented || event.currentTarget.focus());
    })),
    onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerLeave, $6cc32821e9371a1c$var$whenMouse(
      (event) => contentContext.onItemLeave(event)
    )),
    onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
      props.onFocus,
      () => setIsFocused(!0)
    ),
    onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
      props.onBlur,
      () => setIsFocused(!1)
    )
  }))));
});
var $6cc32821e9371a1c$export$f6f243521332502d = /* @__PURE__ */ (0, import_react89.forwardRef)((props, forwardedRef) => {
  let { checked = !1, onCheckedChange, ...checkboxItemProps } = props;
  return /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$ItemIndicatorProvider, {
    scope: props.__scopeMenu,
    checked
  }, /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$export$2ce376c2cc3355c8, _extends({
    role: "menuitemcheckbox",
    "aria-checked": $6cc32821e9371a1c$var$isIndeterminate(checked) ? "mixed" : checked
  }, checkboxItemProps, {
    ref: forwardedRef,
    "data-state": $6cc32821e9371a1c$var$getCheckedState(checked),
    onSelect: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
      checkboxItemProps.onSelect,
      () => onCheckedChange == null ? void 0 : onCheckedChange($6cc32821e9371a1c$var$isIndeterminate(checked) ? !0 : !checked),
      {
        checkForDefaultPrevented: !1
      }
    )
  })));
}), $6cc32821e9371a1c$var$RADIO_GROUP_NAME = "MenuRadioGroup", [$6cc32821e9371a1c$var$RadioGroupProvider, $6cc32821e9371a1c$var$useRadioGroupContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$RADIO_GROUP_NAME, {
  value: void 0,
  onValueChange: () => {
  }
}), $6cc32821e9371a1c$export$ea2200c9eee416b3 = /* @__PURE__ */ (0, import_react89.forwardRef)((props, forwardedRef) => {
  let { value, onValueChange, ...groupProps } = props, handleValueChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onValueChange);
  return /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$RadioGroupProvider, {
    scope: props.__scopeMenu,
    value,
    onValueChange: handleValueChange
  }, /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$export$22a631d1f72787bb, _extends({}, groupProps, {
    ref: forwardedRef
  })));
}), $6cc32821e9371a1c$var$RADIO_ITEM_NAME = "MenuRadioItem", $6cc32821e9371a1c$export$69bd225e9817f6d0 = /* @__PURE__ */ (0, import_react89.forwardRef)((props, forwardedRef) => {
  let { value, ...radioItemProps } = props, context = $6cc32821e9371a1c$var$useRadioGroupContext($6cc32821e9371a1c$var$RADIO_ITEM_NAME, props.__scopeMenu), checked = value === context.value;
  return /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$var$ItemIndicatorProvider, {
    scope: props.__scopeMenu,
    checked
  }, /* @__PURE__ */ (0, import_react89.createElement)($6cc32821e9371a1c$export$2ce376c2cc3355c8, _extends({
    role: "menuitemradio",
    "aria-checked": checked
  }, radioItemProps, {
    ref: forwardedRef,
    "data-state": $6cc32821e9371a1c$var$getCheckedState(checked),
    onSelect: $e42e1063c40fb3ef$export$b9ecd428b558ff10(radioItemProps.onSelect, () => {
      var _context$onValueChang;
      return (_context$onValueChang = context.onValueChange) === null || _context$onValueChang === void 0 ? void 0 : _context$onValueChang.call(context, value);
    }, {
      checkForDefaultPrevented: !1
    })
  })));
}), $6cc32821e9371a1c$var$ITEM_INDICATOR_NAME = "MenuItemIndicator", [$6cc32821e9371a1c$var$ItemIndicatorProvider, $6cc32821e9371a1c$var$useItemIndicatorContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$ITEM_INDICATOR_NAME, {
  checked: !1
}), $6cc32821e9371a1c$export$a2593e23056970a3 = /* @__PURE__ */ (0, import_react89.forwardRef)((props, forwardedRef) => {
  let { __scopeMenu, forceMount, ...itemIndicatorProps } = props, indicatorContext = $6cc32821e9371a1c$var$useItemIndicatorContext($6cc32821e9371a1c$var$ITEM_INDICATOR_NAME, __scopeMenu);
  return /* @__PURE__ */ (0, import_react89.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || $6cc32821e9371a1c$var$isIndeterminate(indicatorContext.checked) || indicatorContext.checked === !0
  }, /* @__PURE__ */ (0, import_react89.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({}, itemIndicatorProps, {
    ref: forwardedRef,
    "data-state": $6cc32821e9371a1c$var$getCheckedState(indicatorContext.checked)
  })));
});
var $6cc32821e9371a1c$export$1cec7dcdd713e220 = /* @__PURE__ */ (0, import_react89.forwardRef)((props, forwardedRef) => {
  let { __scopeMenu, ...separatorProps } = props;
  return /* @__PURE__ */ (0, import_react89.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    role: "separator",
    "aria-orientation": "horizontal"
  }, separatorProps, {
    ref: forwardedRef
  }));
});
var $6cc32821e9371a1c$var$SUB_NAME = "MenuSub", [$6cc32821e9371a1c$var$MenuSubProvider, $6cc32821e9371a1c$var$useMenuSubContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$SUB_NAME);
function $6cc32821e9371a1c$var$getOpenState(open) {
  return open ? "open" : "closed";
}
function $6cc32821e9371a1c$var$isIndeterminate(checked) {
  return checked === "indeterminate";
}
function $6cc32821e9371a1c$var$getCheckedState(checked) {
  return $6cc32821e9371a1c$var$isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
}
function $6cc32821e9371a1c$var$focusFirst(candidates) {
  let PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
  for (let candidate of candidates)
    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT || (candidate.focus(), document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT))
      return;
}
function $6cc32821e9371a1c$var$wrapArray(array, startIndex) {
  return array.map(
    (_, index2) => array[(startIndex + index2) % array.length]
  );
}
function $6cc32821e9371a1c$var$getNextMatch(values, search, currentMatch) {
  let normalizedSearch = search.length > 1 && Array.from(search).every(
    (char) => char === search[0]
  ) ? search[0] : search, currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1, wrappedValues = $6cc32821e9371a1c$var$wrapArray(values, Math.max(currentMatchIndex, 0));
  normalizedSearch.length === 1 && (wrappedValues = wrappedValues.filter(
    (v) => v !== currentMatch
  ));
  let nextMatch = wrappedValues.find(
    (value) => value.toLowerCase().startsWith(normalizedSearch.toLowerCase())
  );
  return nextMatch !== currentMatch ? nextMatch : void 0;
}
function $6cc32821e9371a1c$var$isPointInPolygon(point, polygon) {
  let { x, y } = point, inside = !1;
  for (let i13 = 0, j = polygon.length - 1; i13 < polygon.length; j = i13++) {
    let xi = polygon[i13].x, yi = polygon[i13].y, xj = polygon[j].x, yj = polygon[j].y;
    yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi && (inside = !inside);
  }
  return inside;
}
function $6cc32821e9371a1c$var$isPointerInGraceArea(event, area) {
  if (!area)
    return !1;
  let cursorPos = {
    x: event.clientX,
    y: event.clientY
  };
  return $6cc32821e9371a1c$var$isPointInPolygon(cursorPos, area);
}
function $6cc32821e9371a1c$var$whenMouse(handler) {
  return (event) => event.pointerType === "mouse" ? handler(event) : void 0;
}
var $6cc32821e9371a1c$export$be92b6f5f03c0fe9 = $6cc32821e9371a1c$export$d9b273488cd8ce6f, $6cc32821e9371a1c$export$b688253958b8dfe7 = $6cc32821e9371a1c$export$9fa5ebd18bee4d43, $6cc32821e9371a1c$export$602eac185826482c = $6cc32821e9371a1c$export$793392f970497feb, $6cc32821e9371a1c$export$7c6e2c02157bb7d2 = $6cc32821e9371a1c$export$479f0f2f71193efe;
var $6cc32821e9371a1c$export$b04be29aa201d4f5 = $6cc32821e9371a1c$export$dd37bec0e8a99143, $6cc32821e9371a1c$export$6d08773d2e66f8f2 = $6cc32821e9371a1c$export$2ce376c2cc3355c8, $6cc32821e9371a1c$export$16ce288f89fa631c = $6cc32821e9371a1c$export$f6f243521332502d, $6cc32821e9371a1c$export$a98f0dcb43a68a25 = $6cc32821e9371a1c$export$ea2200c9eee416b3, $6cc32821e9371a1c$export$371ab307eab489c0 = $6cc32821e9371a1c$export$69bd225e9817f6d0, $6cc32821e9371a1c$export$c3468e2714d175fa = $6cc32821e9371a1c$export$a2593e23056970a3, $6cc32821e9371a1c$export$1ff3c3f08ae963c0 = $6cc32821e9371a1c$export$1cec7dcdd713e220;

// ../../../node_modules/@radix-ui/react-dropdown-menu/dist/index.mjs
var $d08ef79370b62062$var$DROPDOWN_MENU_NAME = "DropdownMenu", [$d08ef79370b62062$var$createDropdownMenuContext, $d08ef79370b62062$export$c0623cd925aeb687] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($d08ef79370b62062$var$DROPDOWN_MENU_NAME, [
  $6cc32821e9371a1c$export$4027731b685e72eb
]), $d08ef79370b62062$var$useMenuScope = $6cc32821e9371a1c$export$4027731b685e72eb(), [$d08ef79370b62062$var$DropdownMenuProvider, $d08ef79370b62062$var$useDropdownMenuContext] = $d08ef79370b62062$var$createDropdownMenuContext($d08ef79370b62062$var$DROPDOWN_MENU_NAME), $d08ef79370b62062$export$e44a253a59704894 = (props) => {
  let { __scopeDropdownMenu, children, dir, open: openProp, defaultOpen, onOpenChange, modal = !0 } = props, menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu), triggerRef = (0, import_react90.useRef)(null), [open = !1, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
    prop: openProp,
    defaultProp: defaultOpen,
    onChange: onOpenChange
  });
  return /* @__PURE__ */ (0, import_react90.createElement)($d08ef79370b62062$var$DropdownMenuProvider, {
    scope: __scopeDropdownMenu,
    triggerId: $1746a345f3d73bb7$export$f680877a34711e37(),
    triggerRef,
    contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
    open,
    onOpenChange: setOpen,
    onOpenToggle: (0, import_react90.useCallback)(
      () => setOpen(
        (prevOpen) => !prevOpen
      ),
      [
        setOpen
      ]
    ),
    modal
  }, /* @__PURE__ */ (0, import_react90.createElement)($6cc32821e9371a1c$export$be92b6f5f03c0fe9, _extends({}, menuScope, {
    open,
    onOpenChange: setOpen,
    dir,
    modal
  }), children));
}, $d08ef79370b62062$var$TRIGGER_NAME = "DropdownMenuTrigger", $d08ef79370b62062$export$d2469213b3befba9 = /* @__PURE__ */ (0, import_react90.forwardRef)((props, forwardedRef) => {
  let { __scopeDropdownMenu, disabled: disabled2 = !1, ...triggerProps } = props, context = $d08ef79370b62062$var$useDropdownMenuContext($d08ef79370b62062$var$TRIGGER_NAME, __scopeDropdownMenu), menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react90.createElement)($6cc32821e9371a1c$export$b688253958b8dfe7, _extends({
    asChild: !0
  }, menuScope), /* @__PURE__ */ (0, import_react90.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
    type: "button",
    id: context.triggerId,
    "aria-haspopup": "menu",
    "aria-expanded": context.open,
    "aria-controls": context.open ? context.contentId : void 0,
    "data-state": context.open ? "open" : "closed",
    "data-disabled": disabled2 ? "" : void 0,
    disabled: disabled2
  }, triggerProps, {
    ref: $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, context.triggerRef),
    onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, (event) => {
      !disabled2 && event.button === 0 && event.ctrlKey === !1 && (context.onOpenToggle(), context.open || event.preventDefault());
    }),
    onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
      disabled2 || ([
        "Enter",
        " "
      ].includes(event.key) && context.onOpenToggle(), event.key === "ArrowDown" && context.onOpenChange(!0), [
        "Enter",
        " ",
        "ArrowDown"
      ].includes(event.key) && event.preventDefault());
    })
  })));
});
var $d08ef79370b62062$export$cd369b4d4d54efc9 = (props) => {
  let { __scopeDropdownMenu, ...portalProps } = props, menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react90.createElement)($6cc32821e9371a1c$export$602eac185826482c, _extends({}, menuScope, portalProps));
}, $d08ef79370b62062$var$CONTENT_NAME = "DropdownMenuContent", $d08ef79370b62062$export$6e76d93a37c01248 = /* @__PURE__ */ (0, import_react90.forwardRef)((props, forwardedRef) => {
  let { __scopeDropdownMenu, ...contentProps } = props, context = $d08ef79370b62062$var$useDropdownMenuContext($d08ef79370b62062$var$CONTENT_NAME, __scopeDropdownMenu), menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu), hasInteractedOutsideRef = (0, import_react90.useRef)(!1);
  return /* @__PURE__ */ (0, import_react90.createElement)($6cc32821e9371a1c$export$7c6e2c02157bb7d2, _extends({
    id: context.contentId,
    "aria-labelledby": context.triggerId
  }, menuScope, contentProps, {
    ref: forwardedRef,
    onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onCloseAutoFocus, (event) => {
      var _context$triggerRef$c;
      hasInteractedOutsideRef.current || (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus(), hasInteractedOutsideRef.current = !1, event.preventDefault();
    }),
    onInteractOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onInteractOutside, (event) => {
      let originalEvent = event.detail.originalEvent, ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === !0, isRightClick = originalEvent.button === 2 || ctrlLeftClick;
      (!context.modal || isRightClick) && (hasInteractedOutsideRef.current = !0);
    }),
    style: {
      ...props.style,
      "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
      "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
      "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
      "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
      "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
    }
  }));
});
var $d08ef79370b62062$export$76e48c5b57f24495 = /* @__PURE__ */ (0, import_react90.forwardRef)((props, forwardedRef) => {
  let { __scopeDropdownMenu, ...labelProps } = props, menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react90.createElement)($6cc32821e9371a1c$export$b04be29aa201d4f5, _extends({}, menuScope, labelProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$ed97964d1871885d = /* @__PURE__ */ (0, import_react90.forwardRef)((props, forwardedRef) => {
  let { __scopeDropdownMenu, ...itemProps } = props, menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react90.createElement)($6cc32821e9371a1c$export$6d08773d2e66f8f2, _extends({}, menuScope, itemProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$53a69729da201fa9 = /* @__PURE__ */ (0, import_react90.forwardRef)((props, forwardedRef) => {
  let { __scopeDropdownMenu, ...checkboxItemProps } = props, menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react90.createElement)($6cc32821e9371a1c$export$16ce288f89fa631c, _extends({}, menuScope, checkboxItemProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$3323ad73d55f587e = /* @__PURE__ */ (0, import_react90.forwardRef)((props, forwardedRef) => {
  let { __scopeDropdownMenu, ...radioGroupProps } = props, menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react90.createElement)($6cc32821e9371a1c$export$a98f0dcb43a68a25, _extends({}, menuScope, radioGroupProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$e4f69b41b1637536 = /* @__PURE__ */ (0, import_react90.forwardRef)((props, forwardedRef) => {
  let { __scopeDropdownMenu, ...radioItemProps } = props, menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react90.createElement)($6cc32821e9371a1c$export$371ab307eab489c0, _extends({}, menuScope, radioItemProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$42355ae145153fb6 = /* @__PURE__ */ (0, import_react90.forwardRef)((props, forwardedRef) => {
  let { __scopeDropdownMenu, ...itemIndicatorProps } = props, menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react90.createElement)($6cc32821e9371a1c$export$c3468e2714d175fa, _extends({}, menuScope, itemIndicatorProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$da160178fd3bc7e9 = /* @__PURE__ */ (0, import_react90.forwardRef)((props, forwardedRef) => {
  let { __scopeDropdownMenu, ...separatorProps } = props, menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
  return /* @__PURE__ */ (0, import_react90.createElement)($6cc32821e9371a1c$export$1ff3c3f08ae963c0, _extends({}, menuScope, separatorProps, {
    ref: forwardedRef
  }));
});
var $d08ef79370b62062$export$be92b6f5f03c0fe9 = $d08ef79370b62062$export$e44a253a59704894, $d08ef79370b62062$export$41fb9f06171c75f4 = $d08ef79370b62062$export$d2469213b3befba9, $d08ef79370b62062$export$602eac185826482c = $d08ef79370b62062$export$cd369b4d4d54efc9, $d08ef79370b62062$export$7c6e2c02157bb7d2 = $d08ef79370b62062$export$6e76d93a37c01248;
var $d08ef79370b62062$export$b04be29aa201d4f5 = $d08ef79370b62062$export$76e48c5b57f24495, $d08ef79370b62062$export$6d08773d2e66f8f2 = $d08ef79370b62062$export$ed97964d1871885d, $d08ef79370b62062$export$16ce288f89fa631c = $d08ef79370b62062$export$53a69729da201fa9, $d08ef79370b62062$export$a98f0dcb43a68a25 = $d08ef79370b62062$export$3323ad73d55f587e, $d08ef79370b62062$export$371ab307eab489c0 = $d08ef79370b62062$export$e4f69b41b1637536, $d08ef79370b62062$export$c3468e2714d175fa = $d08ef79370b62062$export$42355ae145153fb6, $d08ef79370b62062$export$1ff3c3f08ae963c0 = $d08ef79370b62062$export$da160178fd3bc7e9;

// ../../components/atoms/dropdown.jsx
var import_classnames12 = __toESM(require_classnames(), 1);
var import_jsx_dev_runtime22 = __toESM(require_jsx_dev_runtime(), 1), DropdownMenu = $d08ef79370b62062$export$be92b6f5f03c0fe9, DropdownMenuTrigger = $d08ef79370b62062$export$41fb9f06171c75f4;
var DropdownMenuRadioGroup = $d08ef79370b62062$export$a98f0dcb43a68a25, DropdownMenuContent = React9.forwardRef(({ className: className2, sideOffset = 4, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)($d08ef79370b62062$export$602eac185826482c, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(
  $d08ef79370b62062$export$7c6e2c02157bb7d2,
  {
    ref,
    sideOffset,
    align: "end",
    className: (0, import_classnames12.default)(
      "z-50 border border-border-default shadow-popover bg-surface-default rounded min-w-48 overflow-hidden",
      "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className2
    ),
    ...props
  },
  void 0,
  !1,
  {
    fileName: "../../components/atoms/dropdown.jsx",
    lineNumber: 21,
    columnNumber: 9
  },
  this
) }, void 0, !1, {
  fileName: "../../components/atoms/dropdown.jsx",
  lineNumber: 20,
  columnNumber: 5
}, this));
DropdownMenuContent.displayName = $d08ef79370b62062$export$7c6e2c02157bb7d2.displayName;
var DropdownMenuItem = React9.forwardRef(({ className: className2, inset, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(
  $d08ef79370b62062$export$6d08773d2e66f8f2,
  {
    ref,
    className: (0, import_classnames12.default)(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className2
    ),
    ...props
  },
  void 0,
  !1,
  {
    fileName: "../../components/atoms/dropdown.jsx",
    lineNumber: 37,
    columnNumber: 5
  },
  this
));
DropdownMenuItem.displayName = $d08ef79370b62062$export$6d08773d2e66f8f2.displayName;
var DropdownMenuSearchItem = React9.forwardRef(({ className: className2, inset, ...props }, ref) => {
  let searchRef = React9.useRef(null), setSearchFocus = (e24) => {
    e24 == null || e24.preventDefault(), searchRef.current.focus();
  };
  return /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(
    $d08ef79370b62062$export$6d08773d2e66f8f2,
    {
      tabIndex: 0,
      ref,
      className: (0, import_classnames12.default)(
        "group relative flex flex-row gap-2.5 items-center bodyMd gap cursor-default select-none py-2 px-3 text-text-default outline-none transition-colors focus:bg-surface-hovered data-[disabled]:pointer-events-none data-[disabled]:text-text-disabled",
        className2
      ),
      ...props,
      onSelect: setSearchFocus,
      onClick: (e24) => setSearchFocus(),
      onPointerUp: setSearchFocus,
      onPointerDown: (e24) => setSearchFocus(),
      onMouseMove: (e24) => e24.preventDefault(),
      onMouseEnter: (e24) => e24.preventDefault(),
      onMouseLeave: (e24) => e24.preventDefault(),
      onPointerMove: (e24) => e24.preventDefault(),
      onPointerLeave: (e24) => e24.preventDefault(),
      children: /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(TextInputBase, { component: "input", ref: searchRef }, void 0, !1, {
        fileName: "../../components/atoms/dropdown.jsx",
        lineNumber: 79,
        columnNumber: 13
      }, this)
    },
    void 0,
    !1,
    {
      fileName: "../../components/atoms/dropdown.jsx",
      lineNumber: 58,
      columnNumber: 9
    },
    this
  );
});
DropdownMenuSearchItem.displayName = $d08ef79370b62062$export$6d08773d2e66f8f2.displayName;
var DropdownMenuCheckboxItem = React9.forwardRef(({ className: className2, children, checked, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(
  $d08ef79370b62062$export$16ce288f89fa631c,
  {
    ref,
    className: (0, import_classnames12.default)(
      "group relative flex flex-row gap-2.5 items-center bodyMd gap cursor-default select-none py-2 px-3 text-text-default outline-none transition-colors focus:bg-surface-hovered data-[disabled]:pointer-events-none data-[disabled]:text-text-disabled",
      className2
    ),
    checked,
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("span", { className: "w-5 h-5 rounded border transition-all flex items-center justify-center border-border-default group-data-[state=checked]:border-border-primary group-data-[state=checked]:bg-surface-primary-default group-data-[disabled]:border-border-disabled group-data-[disabled]:bg-surface-default ", children: /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)($d08ef79370b62062$export$c3468e2714d175fa, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("svg", { width: "17", height: "16", viewBox: "0 0 17 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("path", { d: "M14.5 4.00019L6.5 11.9998L2.5 8.00019", className: (0, import_classnames12.default)("stroke-text-on-primary group-data-[disabled]:stroke-text-disabled"), strokeLinecap: "round", strokeLinejoin: "round" }, void 0, !1, {
        fileName: "../../components/atoms/dropdown.jsx",
        lineNumber: 99,
        columnNumber: 25
      }, this) }, void 0, !1, {
        fileName: "../../components/atoms/dropdown.jsx",
        lineNumber: 97,
        columnNumber: 17
      }, this) }, void 0, !1, {
        fileName: "../../components/atoms/dropdown.jsx",
        lineNumber: 96,
        columnNumber: 13
      }, this) }, void 0, !1, {
        fileName: "../../components/atoms/dropdown.jsx",
        lineNumber: 95,
        columnNumber: 9
      }, this),
      children
    ]
  },
  void 0,
  !0,
  {
    fileName: "../../components/atoms/dropdown.jsx",
    lineNumber: 86,
    columnNumber: 5
  },
  this
));
DropdownMenuCheckboxItem.displayName = $d08ef79370b62062$export$16ce288f89fa631c.displayName;
var DropdownMenuRadioItem = React9.forwardRef(({ className: className2, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(
  $d08ef79370b62062$export$371ab307eab489c0,
  {
    tabIndex: 0,
    ref,
    className: (0, import_classnames12.default)(
      "group relative flex flex-row gap-2.5 items-center bodyMd gap cursor-default select-none py-2 px-3 text-text-default outline-none transition-colors focus:bg-surface-hovered hover:bg-surface-hovered data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className2
    ),
    ...props,
    onMouseMove: (e24) => e24.preventDefault(),
    onMouseEnter: (e24) => e24.preventDefault(),
    onMouseLeave: (e24) => e24.preventDefault(),
    onPointerLeave: (e24) => e24.preventDefault(),
    onPointerEnter: (e24) => e24.preventDefault(),
    onPointerMove: (e24) => e24.preventDefault(),
    children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("span", { className: (0, import_classnames12.default)(
        "w-5 h-5 rounded-full border transition-all flex items-center justify-center border-border-default group-data-[state=checked]:border-border-primary group-data-[disabled]:border-border-disabled"
      ), children: /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)($d08ef79370b62062$export$c3468e2714d175fa, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("div", { className: (0, import_classnames12.default)(
        "block w-3 h-3 rounded-full bg-surface-primary-default group-data-[disabled]:bg-icon-disabled"
      ) }, void 0, !1, {
        fileName: "../../components/atoms/dropdown.jsx",
        lineNumber: 132,
        columnNumber: 17
      }, this) }, void 0, !1, {
        fileName: "../../components/atoms/dropdown.jsx",
        lineNumber: 131,
        columnNumber: 13
      }, this) }, void 0, !1, {
        fileName: "../../components/atoms/dropdown.jsx",
        lineNumber: 128,
        columnNumber: 9
      }, this),
      children
    ]
  },
  void 0,
  !0,
  {
    fileName: "../../components/atoms/dropdown.jsx",
    lineNumber: 113,
    columnNumber: 5
  },
  this
));
DropdownMenuRadioItem.displayName = $d08ef79370b62062$export$371ab307eab489c0.displayName;
var DropdownMenuLabel = React9.forwardRef(({ className: className2, inset, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(
  $d08ef79370b62062$export$b04be29aa201d4f5,
  {
    ref,
    className: (0, import_classnames12.default)(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className2
    ),
    ...props
  },
  void 0,
  !1,
  {
    fileName: "../../components/atoms/dropdown.jsx",
    lineNumber: 143,
    columnNumber: 5
  },
  this
));
DropdownMenuLabel.displayName = $d08ef79370b62062$export$b04be29aa201d4f5.displayName;
var DropdownMenuSeparator = React9.forwardRef(({ className: className2, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(
  $d08ef79370b62062$export$1ff3c3f08ae963c0,
  {
    ref,
    className: (0, import_classnames12.default)("-mx-1 my-1 h-px bg-muted", className2),
    ...props
  },
  void 0,
  !1,
  {
    fileName: "../../components/atoms/dropdown.jsx",
    lineNumber: 156,
    columnNumber: 5
  },
  this
));
DropdownMenuSeparator.displayName = $d08ef79370b62062$export$1ff3c3f08ae963c0.displayName;
var DropdownMenuShortcut = ({
  className: className2,
  ...props
}) => /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(
  "span",
  {
    className: (0, import_classnames12.default)("ml-auto text-xs tracking-widest opacity-60", className2),
    ...props
  },
  void 0,
  !1,
  {
    fileName: "../../components/atoms/dropdown.jsx",
    lineNumber: 169,
    columnNumber: 9
  },
  this
);
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";
var Dropdown = ({}) => {
  let [position, setPosition] = React9.useState("bottom"), [showStatusBar, setShowStatusBar] = React9.useState(!0);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(DropdownMenu, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(DropdownMenuTrigger, { asChild: !0, children: /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("button", { variant: "outline", children: "Open" }, void 0, !1, {
        fileName: "../../components/atoms/dropdown.jsx",
        lineNumber: 185,
        columnNumber: 21
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)("button", { variant: "outline", children: "Open" }, void 0, !1, {
        fileName: "../../components/atoms/dropdown.jsx",
        lineNumber: 186,
        columnNumber: 21
      }, this)
    ] }, void 0, !0, {
      fileName: "../../components/atoms/dropdown.jsx",
      lineNumber: 184,
      columnNumber: 17
    }, this) }, void 0, !1, {
      fileName: "../../components/atoms/dropdown.jsx",
      lineNumber: 183,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(DropdownMenuContent, { className: "w-56", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(DropdownMenuSearchItem, { children: "Hello" }, void 0, !1, {
        fileName: "../../components/atoms/dropdown.jsx",
        lineNumber: 190,
        columnNumber: 17
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(DropdownMenuRadioGroup, { value: position, onValueChange: setPosition, children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(DropdownMenuRadioItem, { value: "top", onSelect: (e24) => e24.preventDefault(), children: "Top" }, void 0, !1, {
          fileName: "../../components/atoms/dropdown.jsx",
          lineNumber: 194,
          columnNumber: 21
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(DropdownMenuRadioItem, { value: "bottom", onSelect: (e24) => e24.preventDefault(), children: "Bottom" }, void 0, !1, {
          fileName: "../../components/atoms/dropdown.jsx",
          lineNumber: 195,
          columnNumber: 21
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(DropdownMenuRadioItem, { value: "right", onSelect: (e24) => e24.preventDefault(), children: "Right" }, void 0, !1, {
          fileName: "../../components/atoms/dropdown.jsx",
          lineNumber: 196,
          columnNumber: 21
        }, this)
      ] }, void 0, !0, {
        fileName: "../../components/atoms/dropdown.jsx",
        lineNumber: 193,
        columnNumber: 17
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime22.jsxDEV)(
        DropdownMenuCheckboxItem,
        {
          checked: showStatusBar,
          onCheckedChange: setShowStatusBar,
          onSelect: (e24) => e24.preventDefault(),
          children: "Status Bar"
        },
        void 0,
        !1,
        {
          fileName: "../../components/atoms/dropdown.jsx",
          lineNumber: 198,
          columnNumber: 17
        },
        this
      )
    ] }, void 0, !0, {
      fileName: "../../components/atoms/dropdown.jsx",
      lineNumber: 189,
      columnNumber: 13
    }, this)
  ] }, void 0, !0, {
    fileName: "../../components/atoms/dropdown.jsx",
    lineNumber: 182,
    columnNumber: 9
  }, this);
};

// ../../components/molecule/filters.jsx
var import_jsx_dev_runtime23 = __toESM(require_jsx_dev_runtime(), 1), Filters = ({ onFilterTextChange, filterActions }) => {
  let [selected, setSelected] = (0, import_react92.useState)(!1);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime23.jsxDEV)("div", { className: "flex flex-row items-center gap-2 w-full flex-wrap", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime23.jsxDEV)(
      TextInput,
      {
        placeholder: "Filters",
        prefix: i11,
        onChange: onFilterTextChange,
        className: "flex-1 min-w-72"
      },
      void 0,
      !1,
      {
        fileName: "../../components/molecule/filters.jsx",
        lineNumber: 18,
        columnNumber: 9
      },
      this
    ),
    filterActions && filterActions,
    /* @__PURE__ */ (0, import_jsx_dev_runtime23.jsxDEV)(Dropdown, { open: selected, onOpenChange: setSelected }, void 0, !1, {
      fileName: "../../components/molecule/filters.jsx",
      lineNumber: 26,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "../../components/molecule/filters.jsx",
    lineNumber: 17,
    columnNumber: 12
  }, this);
};
Filters.propTypes = {
  onFilterTextChange: import_prop_types9.default.func,
  filterActions: import_prop_types9.default.element
};

// ../../components/atoms/button-groups.jsx
var import_react93 = __toESM(require_react(), 1), import_prop_types10 = __toESM(require_prop_types(), 1);
var import_classnames13 = __toESM(require_classnames(), 1), import_jsx_dev_runtime24 = __toESM(require_jsx_dev_runtime(), 1), ButtonGroup = ({ items, size: size2, value, onChange: onChange2, selectable }) => {
  let [currentValue, setCurrentValue] = (0, import_react93.useState)(value);
  return (0, import_react93.useEffect)(() => {
    onChange2 && onChange2(currentValue);
  }, [currentValue]), /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)("div", { className: (0, import_classnames13.default)("flex flex-row"), children: items && items.map((child, index2) => {
    let sharpRight = index2 < items.length - 1, sharpLeft = index2 > 0;
    return /* @__PURE__ */ (0, import_jsx_dev_runtime24.jsxDEV)(
      ButtonBase,
      {
        label: child.label,
        size: size2,
        variant: "basic",
        sharpLeft,
        sharpRight,
        selected: child.value == currentValue && selectable,
        className: (0, import_classnames13.default)({ "-ml-px": sharpLeft || sharpRight }),
        IconComp: child.icon,
        iconOnly: !child.label && child.icon,
        DisclosureComp: child.label && child.disclosureComp,
        onClick: () => {
          setCurrentValue(child.value);
        }
      },
      child.key,
      !1,
      {
        fileName: "../../components/atoms/button-groups.jsx",
        lineNumber: 20,
        columnNumber: 16
      },
      this
    );
  }) }, void 0, !1, {
    fileName: "../../components/atoms/button-groups.jsx",
    lineNumber: 13,
    columnNumber: 5
  }, this);
};
ButtonGroup.propTypes = {
  items: import_prop_types10.default.arrayOf(import_prop_types10.default.shape({
    label: import_prop_types10.default.string,
    value: import_prop_types10.default.string.isRequired,
    icon: function(props, propName, componentName) {
      if ((props.label == null || props.label == "") && (props[propName] == null || typeof props[propName] != "object"))
        return new Error("Either label or icon is required!");
    },
    disclosureComp: import_prop_types10.default.object,
    key: import_prop_types10.default.string
  })).isRequired,
  selectable: import_prop_types10.default.bool,
  onChange: import_prop_types10.default.func,
  value: import_prop_types10.default.string,
  size: import_prop_types10.default.oneOf(["small", "medium", "large"])
};
ButtonGroup.defaultProps = {
  size: "medium",
  onChange: (e24) => {
    console.log(e24);
  },
  selectable: !1,
  items: [
    {
      label: "item 1",
      value: "item1",
      key: "item1"
    },
    {
      value: "item2",
      label: "item 2",
      key: "item2"
    },
    {
      label: "item 3",
      value: "item3",
      key: "item3"
    },
    {
      label: "item 4",
      value: "item4",
      key: "item4"
    }
  ]
};

// ../../components/molecule/empty-state.jsx
var import_classnames14 = __toESM(require_classnames(), 1);
var import_prop_types11 = __toESM(require_prop_types(), 1), import_jsx_dev_runtime25 = __toESM(require_jsx_dev_runtime(), 1), EmptyState = ({ image, heading, children, footer, action, secondaryAction, fullwidth }) => /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("div", { className: "flex flex-col items-center shadow-card border border-border-default rounded", children: /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("div", { className: (0, import_classnames14.default)(
  "flex flex-col items-center",
  {
    "max-w-100": !fullwidth
  }
), children: [
  image ? /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("img", { src: image, className: "max-h-43 max-w-37 mt-15" }, void 0, !1, {
    fileName: "../../components/molecule/empty-state.jsx",
    lineNumber: 13,
    columnNumber: 21
  }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("div", { className: "h-43 w-37 bg-surface-hovered mt-15 md:mt-16.75" }, void 0, !1, {
    fileName: "../../components/molecule/empty-state.jsx",
    lineNumber: 14,
    columnNumber: 23
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("div", { className: "headingLg mt-6.75 text-center", children: heading }, void 0, !1, {
    fileName: "../../components/molecule/empty-state.jsx",
    lineNumber: 15,
    columnNumber: 17
  }, this),
  children && /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("div", { className: "text-text-strong bodyMd mt-4 text-center", children }, void 0, !1, {
    fileName: "../../components/molecule/empty-state.jsx",
    lineNumber: 16,
    columnNumber: 30
  }, this),
  (action || secondaryAction) && /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("div", { className: "mt-6 flex flex-row items-center justify-center gap-2", children: [
    secondaryAction && /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(Button, { label: secondaryAction == null ? void 0 : secondaryAction.title, variant: "outline", onClick: secondaryAction == null ? void 0 : secondaryAction.click }, void 0, !1, {
      fileName: "../../components/molecule/empty-state.jsx",
      lineNumber: 20,
      columnNumber: 41
    }, this),
    action && /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)(Button, { label: action == null ? void 0 : action.title, variant: "primary", onClick: action == null ? void 0 : action.click }, void 0, !1, {
      fileName: "../../components/molecule/empty-state.jsx",
      lineNumber: 21,
      columnNumber: 32
    }, this)
  ] }, void 0, !0, {
    fileName: "../../components/molecule/empty-state.jsx",
    lineNumber: 19,
    columnNumber: 49
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("div", { className: (0, import_classnames14.default)(
    "mb-20 text-center",
    {
      "mt-3": footer
    }
  ), children: /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("div", { className: "bodySm text-text-soft", children: footer }, void 0, !1, {
    fileName: "../../components/molecule/empty-state.jsx",
    lineNumber: 27,
    columnNumber: 21
  }, this) }, void 0, !1, {
    fileName: "../../components/molecule/empty-state.jsx",
    lineNumber: 23,
    columnNumber: 17
  }, this)
] }, void 0, !0, {
  fileName: "../../components/molecule/empty-state.jsx",
  lineNumber: 8,
  columnNumber: 13
}, this) }, void 0, !1, {
  fileName: "../../components/molecule/empty-state.jsx",
  lineNumber: 7,
  columnNumber: 9
}, this);
EmptyState.propTypes = {
  image: import_prop_types11.default.string,
  heading: import_prop_types11.default.string,
  children: import_prop_types11.default.any,
  footer: import_prop_types11.default.any,
  action: import_prop_types11.default.shape({
    title: import_prop_types11.default.string.isRequired,
    click: import_prop_types11.default.func
  }),
  secondaryAction: import_prop_types11.default.shape({
    title: import_prop_types11.default.string.isRequired,
    click: import_prop_types11.default.func
  }),
  fullwidth: import_prop_types11.default.bool
};
EmptyState.defaultProps = {
  heading: "This is where you\u2019ll manage your projects",
  children: /* @__PURE__ */ (0, import_jsx_dev_runtime25.jsxDEV)("div", { children: "You can create a new project and manage the listed project." }, void 0, !1, {
    fileName: "../../components/molecule/empty-state.jsx",
    lineNumber: 57,
    columnNumber: 15
  }, this),
  fullwidth: !0
};

// app/routes/console.projects.jsx
var import_jsx_dev_runtime26 = __toESM(require_jsx_dev_runtime()), Projects = ({}) => {
  let [projects, setProjects] = (0, import_react94.useState)([1]), navigate = (0, import_react95.useNavigate)(), [projectListMode, setProjectListMode] = (0, import_react94.useState)("list");
  return /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(import_jsx_dev_runtime26.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(SubHeader, { title: "Projects", actions: projects.length != 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(import_jsx_dev_runtime26.Fragment, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(Button, { variant: "primary", label: "Add new", IconComp: a6, onClick: () => {
      navigate("../newproject"), console.log("called");
    } }, void 0, !1, {
      fileName: "app/routes/console.projects.jsx",
      lineNumber: 22,
      columnNumber: 17
    }, this) }, void 0, !1, {
      fileName: "app/routes/console.projects.jsx",
      lineNumber: 21,
      columnNumber: 37
    }, this) }, void 0, !1, {
      fileName: "app/routes/console.projects.jsx",
      lineNumber: 20,
      columnNumber: 9
    }, this),
    projects.length > 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("div", { className: "pt-5 flex flex-col gap-10", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(Filters, { filterActions: /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("div", { className: "flex flex-row gap-2 items-center justify-center", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(Button, { IconComp: l, variant: "basic", label: "Sortby" }, void 0, !1, {
          fileName: "app/routes/console.projects.jsx",
          lineNumber: 33,
          columnNumber: 21
        }, this),
        /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
          ButtonGroup,
          {
            selectable: !0,
            value: "list",
            onChange: (e24) => {
              setProjectListMode(e24);
            },
            items: [
              {
                key: "list",
                value: "list",
                icon: o2
              },
              {
                key: "grid",
                value: "grid",
                icon: i12
              }
            ]
          },
          void 0,
          !1,
          {
            fileName: "app/routes/console.projects.jsx",
            lineNumber: 34,
            columnNumber: 21
          },
          this
        )
      ] }, void 0, !0, {
        fileName: "app/routes/console.projects.jsx",
        lineNumber: 31,
        columnNumber: 17
      }, this) }, void 0, !1, {
        fileName: "app/routes/console.projects.jsx",
        lineNumber: 30,
        columnNumber: 13
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("div", {}, void 0, !1, {
        fileName: "app/routes/console.projects.jsx",
        lineNumber: 54,
        columnNumber: 13
      }, this)
    ] }, void 0, !0, {
      fileName: "app/routes/console.projects.jsx",
      lineNumber: 28,
      columnNumber: 33
    }, this),
    projects.length == 0 && /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("div", { className: "pt-5", children: /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)(
      EmptyState,
      {
        heading: "This is where you\u2019ll manage your projects",
        children: /* @__PURE__ */ (0, import_jsx_dev_runtime26.jsxDEV)("p", { children: "You can create a new project and manage the listed project." }, void 0, !1, {
          fileName: "app/routes/console.projects.jsx",
          lineNumber: 62,
          columnNumber: 21
        }, this),
        action: {
          title: "Create Project",
          click: () => {
            navigate("newproject");
          }
        }
      },
      void 0,
      !1,
      {
        fileName: "app/routes/console.projects.jsx",
        lineNumber: 59,
        columnNumber: 13
      },
      this
    ) }, void 0, !1, {
      fileName: "app/routes/console.projects.jsx",
      lineNumber: 58,
      columnNumber: 34
    }, this)
  ] }, void 0, !0, {
    fileName: "app/routes/console.projects.jsx",
    lineNumber: 19,
    columnNumber: 12
  }, this);
}, console_projects_default = Projects;

// app/routes/console.settings.jsx
var console_settings_exports = {};
__export(console_settings_exports, {
  default: () => ConsoleSettings
});
var import_react99 = __toESM(require_dist3()), import_react100 = __toESM(require_dist3());

// ../../components/atoms/action-list.jsx
var import_react97 = __toESM(require_react(), 1), import_prop_types12 = __toESM(require_prop_types(), 1), import_classnames15 = __toESM(require_classnames(), 1);
var import_react98 = __toESM(require_dist3(), 1), import_jsx_dev_runtime27 = __toESM(require_jsx_dev_runtime(), 1), ActionButton = ({
  label: label2,
  disabled: disabled2,
  critical,
  active,
  onClick,
  href,
  LeftIconComp,
  RightIconComp,
  rightEmptyPlaceholder
}) => {
  let { linkProps } = $298d61e98472621b$export$dcf14c9974fe2767({ href, onPress: onClick }), { isFocusVisible, focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)("div", { className: (0, import_classnames15.default)("w-full flex flex-row gap-x-1"), children: [
    active && /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)(motion.div, { layoutId: "line", className: "w-0.75 bg-icon-primary rounded" }, void 0, !1, {
      fileName: "../../components/atoms/action-list.jsx",
      lineNumber: 26,
      columnNumber: 27
    }, this),
    !active && /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)(motion.div, { layoutId: "line_1", className: "w-0.75 bg-transparent rounded" }, void 0, !1, {
      fileName: "../../components/atoms/action-list.jsx",
      lineNumber: 29,
      columnNumber: 28
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)(
      import_react98.Link,
      {
        ...linkProps,
        to: href,
        className: (0, import_classnames15.default)(
          "w-[inherit] rounded border bodyMd flex gap-1 items-center justify-between cursor-pointer outline-none border-none px-4 py-2 ring-offset-1",
          {
            "text-text-primary bodyMd-medium": active,
            "text-text-disabled": disabled2,
            "text-text-danger hover:text-text-on-primary active:text-text-on-primary": critical
          },
          {
            "pointer-events-none": disabled2,
            "focus-visible:ring-2 focus:ring-border-focus": isFocusVisible
          },
          {
            "bg-none hover:bg-surface-hovered active:bg-surface-pressed": !active && !disabled2 && !critical,
            "bg-none hover:bg-surface-danger-hovered active:bg-surface-danger-pressed": !active && !disabled2 && critical,
            "bg-none": disabled2,
            "bg-surface-primary-selected": !critical && active
          }
        ),
        onClick: critical ? null : onClick,
        ...focusProps,
        children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)("div", { className: "flex flex-row items-center gap-1", children: [
            LeftIconComp && /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)(LeftIconComp, { size: 16, color: "currentColor" }, void 0, !1, {
              fileName: "../../components/atoms/action-list.jsx",
              lineNumber: 53,
              columnNumber: 41
            }, this),
            label2
          ] }, void 0, !0, {
            fileName: "../../components/atoms/action-list.jsx",
            lineNumber: 51,
            columnNumber: 17
          }, this),
          RightIconComp && /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)(RightIconComp, { size: 16, color: "currentColor" }, void 0, !1, {
            fileName: "../../components/atoms/action-list.jsx",
            lineNumber: 58,
            columnNumber: 38
          }, this),
          !RightIconComp && rightEmptyPlaceholder && /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)("div", { className: "w-4 h-4" }, void 0, !1, {
            fileName: "../../components/atoms/action-list.jsx",
            lineNumber: 61,
            columnNumber: 64
          }, this)
        ]
      },
      void 0,
      !0,
      {
        fileName: "../../components/atoms/action-list.jsx",
        lineNumber: 31,
        columnNumber: 13
      },
      this
    )
  ] }, void 0, !0, {
    fileName: "../../components/atoms/action-list.jsx",
    lineNumber: 24,
    columnNumber: 9
  }, this);
}, ActionList = ({ items, value, onChange: onChange2, layoutId }) => {
  let [active, setActive] = (0, import_react97.useState)(value);
  return (0, import_react97.useEffect)(() => {
    onChange2 && onChange2(active);
  }, [active]), /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)("div", { className: (0, import_classnames15.default)("flex flex-col gap-y-1"), children: /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)(LayoutGroup, { id: layoutId, children: items.map((child, index2) => /* @__PURE__ */ (0, import_jsx_dev_runtime27.jsxDEV)(
    ActionButton,
    {
      critical: child.critical,
      label: child.label,
      href: child.href,
      LeftIconComp: child.LeftIconComp,
      RightIconComp: child.RightIconComp,
      rightEmptyPlaceholder: !child.RightIconComp,
      active: child.value === active,
      onClick: () => {
        setActive(child.value);
      }
    },
    child.key,
    !1,
    {
      fileName: "../../components/atoms/action-list.jsx",
      lineNumber: 79,
      columnNumber: 28
    },
    this
  )) }, void 0, !1, {
    fileName: "../../components/atoms/action-list.jsx",
    lineNumber: 77,
    columnNumber: 13
  }, this) }, void 0, !1, {
    fileName: "../../components/atoms/action-list.jsx",
    lineNumber: 76,
    columnNumber: 9
  }, this);
};
ActionButton.propTypes = {
  label: import_prop_types12.default.string.isRequired,
  href: import_prop_types12.default.string.isRequired,
  active: import_prop_types12.default.bool,
  onClick: import_prop_types12.default.func,
  disabled: import_prop_types12.default.bool
};
ActionButton.defaultProps = {
  label: "test",
  href: "#",
  active: !1,
  onClick: null,
  disabled: !1
};
ActionList.propTypes = {
  items: import_prop_types12.default.arrayOf(import_prop_types12.default.shape({
    label: import_prop_types12.default.string.isRequired,
    value: import_prop_types12.default.oneOfType([import_prop_types12.default.string, import_prop_types12.default.object]).isRequired,
    key: import_prop_types12.default.string,
    RightIconComp: import_prop_types12.default.object,
    LeftIconComp: import_prop_types12.default.object
  })).isRequired,
  value: import_prop_types12.default.oneOfType([import_prop_types12.default.string, import_prop_types12.default.object]).isRequired,
  onChange: import_prop_types12.default.func,
  layoutId: import_prop_types12.default.string.isRequired
};

// app/routes/console.settings.jsx
var import_jsx_dev_runtime28 = __toESM(require_jsx_dev_runtime());
function ConsoleSettings() {
  let location = (0, import_react100.useLocation)();
  console.log("location", location.pathname);
  let match = (0, import_react100.useMatch)({
    path: "/console/:path/*"
  }, location.pathname);
  return /* @__PURE__ */ (0, import_jsx_dev_runtime28.jsxDEV)("div", { className: "flex flex-col gap-y-10", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime28.jsxDEV)(SubHeader, { title: "Personal Account Settings" }, void 0, !1, {
      fileName: "app/routes/console.settings.jsx",
      lineNumber: 16,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime28.jsxDEV)("div", { className: "flex flex-row gap-x-25", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime28.jsxDEV)("div", { className: "w-45", children: /* @__PURE__ */ (0, import_jsx_dev_runtime28.jsxDEV)(
        ActionList,
        {
          layoutId: "settings",
          value: match.params["*"],
          items: [
            {
              label: "General",
              value: "general",
              key: "general",
              href: "general"
            },
            {
              label: "Billing",
              value: "billing",
              key: "billing",
              href: "billing"
            },
            {
              label: "Invoices",
              value: "invoices",
              key: "invoices"
            },
            {
              label: "User management",
              value: "usermanagement",
              key: "usermanagement"
            },
            {
              label: "Security & Privacy",
              value: "securityandprivacy",
              key: "securityandprivacy"
            }
          ]
        },
        void 0,
        !1,
        {
          fileName: "app/routes/console.settings.jsx",
          lineNumber: 19,
          columnNumber: 17
        },
        this
      ) }, void 0, !1, {
        fileName: "app/routes/console.settings.jsx",
        lineNumber: 18,
        columnNumber: 13
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime28.jsxDEV)(import_react99.Outlet, {}, void 0, !1, {
        fileName: "app/routes/console.settings.jsx",
        lineNumber: 52,
        columnNumber: 13
      }, this)
    ] }, void 0, !0, {
      fileName: "app/routes/console.settings.jsx",
      lineNumber: 17,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/routes/console.settings.jsx",
    lineNumber: 15,
    columnNumber: 12
  }, this);
}

// app/routes/console.cluster.jsx
var console_cluster_exports = {};
__export(console_cluster_exports, {
  default: () => ConsoleCluster
});

// app/pages/cluster.jsx
var import_jsx_dev_runtime29 = __toESM(require_jsx_dev_runtime()), Cluster = ({}) => /* @__PURE__ */ (0, import_jsx_dev_runtime29.jsxDEV)(import_jsx_dev_runtime29.Fragment, { children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime29.jsxDEV)(SubHeader, { title: "Cluster" }, void 0, !1, {
    fileName: "app/pages/cluster.jsx",
    lineNumber: 6,
    columnNumber: 9
  }, this),
  /* @__PURE__ */ (0, import_jsx_dev_runtime29.jsxDEV)(
    EmptyState,
    {
      heading: "This is where you\u2019ll manage your cluster ",
      children: /* @__PURE__ */ (0, import_jsx_dev_runtime29.jsxDEV)("p", { children: "You can create a new cluster and manage the listed cluster." }, void 0, !1, {
        fileName: "app/pages/cluster.jsx",
        lineNumber: 10,
        columnNumber: 17
      }, this),
      action: {
        title: "Create Cluster"
      }
    },
    void 0,
    !1,
    {
      fileName: "app/pages/cluster.jsx",
      lineNumber: 7,
      columnNumber: 9
    },
    this
  )
] }, void 0, !0, {
  fileName: "app/pages/cluster.jsx",
  lineNumber: 5,
  columnNumber: 12
}, this), cluster_default = Cluster;

// app/routes/console.cluster.jsx
var import_jsx_dev_runtime30 = __toESM(require_jsx_dev_runtime());
function ConsoleCluster() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime30.jsxDEV)(cluster_default, {}, void 0, !1, {
    fileName: "app/routes/console.cluster.jsx",
    lineNumber: 4,
    columnNumber: 12
  }, this);
}

// app/routes/console._index.jsx
var console_index_exports = {};
__export(console_index_exports, {
  default: () => ConsoleIndex
});

// app/pages/container.jsx
var import_react106 = __toESM(require_dist3()), import_classnames18 = __toESM(require_classnames());

// ../../components/organisms/top-bar.jsx
var import_classnames17 = __toESM(require_classnames(), 1), import_prop_types14 = __toESM(require_prop_types(), 1);

// ../../components/atoms/tabs.jsx
var import_react101 = __toESM(require_react(), 1);
var import_react102 = __toESM(require_react(), 1);
var import_react103 = __toESM(require_dist3(), 1), import_classnames16 = __toESM(require_classnames(), 1);
var import_prop_types13 = __toESM(require_prop_types(), 1), import_jsx_dev_runtime31 = __toESM(require_jsx_dev_runtime(), 1), NavTab = ({ href, label: label2, onPress, active, fitted }) => {
  let { linkProps } = $298d61e98472621b$export$dcf14c9974fe2767({ href, onPress }), { isFocusVisible, focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  return console.log(fitted), /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)("div", { className: (0, import_classnames16.default)(
    "outline-none flex flex-col relative group bodyMd-medium hover:text-text-default active:text-text-default ",
    {
      "text-text-default": active,
      "text-text-soft": !active
    }
  ), children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(import_react103.Link, { ...linkProps, to: href, className: (0, import_classnames16.default)(
      "outline-none flex flex-col rounded ring-offset-1",
      {
        "p-4": !fitted,
        "pt-2 pb-3": fitted,
        "focus-visible:ring-2 focus:ring-border-focus": isFocusVisible
      }
    ), ...focusProps, children: label2 }, void 0, !1, {
      fileName: "../../components/atoms/tabs.jsx",
      lineNumber: 21,
      columnNumber: 5
    }, this),
    active && /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(motion.div, { layoutId: "underline", className: (0, import_classnames16.default)("h-1 bg-surface-primary-pressed z-10 absolute bottom-0 w-full") }, void 0, !1, {
      fileName: "../../components/atoms/tabs.jsx",
      lineNumber: 30,
      columnNumber: 17
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)("div", { className: "h-1 group-hover:bg-border-default group-active:bg-border-tertiary bg-none transition-all absolute bottom-0 w-full z-0" }, void 0, !1, {
      fileName: "../../components/atoms/tabs.jsx",
      lineNumber: 32,
      columnNumber: 5
    }, this)
  ] }, void 0, !0, {
    fileName: "../../components/atoms/tabs.jsx",
    lineNumber: 16,
    columnNumber: 10
  }, this);
}, NavTabs = ({ items, fitted, onChange: onChange2, layoutId, value }) => {
  console.log(items);
  let [active, setActive] = (0, import_react101.useState)(value);
  return (0, import_react102.useEffect)(() => {
    onChange2 && onChange2(active);
  }, [active]), /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)("div", { className: "flex flex-row gap-6", children: /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(LayoutGroup, { id: layoutId, children: items.map((child, index2) => /* @__PURE__ */ (0, import_jsx_dev_runtime31.jsxDEV)(
    NavTab,
    {
      onPress: () => {
        setActive(child.value);
      },
      fitted,
      href: child.href,
      label: child.label,
      active: active === child.value
    },
    child.key,
    !1,
    {
      fileName: "../../components/atoms/tabs.jsx",
      lineNumber: 47,
      columnNumber: 16
    },
    this
  )) }, void 0, !1, {
    fileName: "../../components/atoms/tabs.jsx",
    lineNumber: 45,
    columnNumber: 5
  }, this) }, void 0, !1, {
    fileName: "../../components/atoms/tabs.jsx",
    lineNumber: 44,
    columnNumber: 10
  }, this);
};
NavTab.propTypes = {
  href: import_prop_types13.default.string,
  label: import_prop_types13.default.string.isRequired,
  onPress: import_prop_types13.default.func,
  active: import_prop_types13.default.bool,
  fitted: import_prop_types13.default.bool
};
NavTabs.propTypes = {
  /**
  * LayoutId should be provided in order to prevent multiple tabs to share same instance.
  */
  layoutId: import_prop_types13.default.string.isRequired,
  items: import_prop_types13.default.arrayOf(import_prop_types13.default.object.isRequired).isRequired,
  fitted: import_prop_types13.default.bool,
  onChange: import_prop_types13.default.func,
  value: import_prop_types13.default.any
};
NavTabs.defaultProps = {
  layoutId: "nav-tabs"
};
NavTab.defaultProps = {
  label: "Item",
  active: !1,
  fitted: !1
};

// ../../components/organisms/top-bar.jsx
var import_jsx_dev_runtime32 = __toESM(require_jsx_dev_runtime(), 1), TopBar = ({ tab, actions, logo, fixed }) => /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)("div", { className: (0, import_classnames17.default)(
  "border-b border-border-default bg-surface-subdued px-2.5 z-10",
  {
    "fixed top-0 left-0 right-0": fixed
  }
), children: /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)("div", { className: "flex flex-col max-w-296 m-auto", children: [
  /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)("div", { className: "flex flex-row items-center justify-between py-2", children: [
    logo && logo,
    /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)("div", { className: "flex flex-row items-center justify-center", children: actions && actions }, void 0, !1, {
      fileName: "../../components/organisms/top-bar.jsx",
      lineNumber: 17,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "../../components/organisms/top-bar.jsx",
    lineNumber: 15,
    columnNumber: 7
  }, this),
  tab && /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(NavTabs, { value: tab.value, layoutId: tab.layoutId, fitted: tab.fitted, items: tab.items, onChange: tab.onChange }, void 0, !1, {
    fileName: "../../components/organisms/top-bar.jsx",
    lineNumber: 21,
    columnNumber: 15
  }, this)
] }, void 0, !0, {
  fileName: "../../components/organisms/top-bar.jsx",
  lineNumber: 14,
  columnNumber: 5
}, this) }, void 0, !1, {
  fileName: "../../components/organisms/top-bar.jsx",
  lineNumber: 10,
  columnNumber: 11
}, this);
TopBar.propTypes = {
  tab: import_prop_types14.default.object,
  actions: import_prop_types14.default.any,
  logo: import_prop_types14.default.any,
  fixed: import_prop_types14.default.bool
};
TopBar.defaultProps = {
  logo: /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(BrandLogo, { detailed: !0, size: 20 }, void 0, !1, {
    fileName: "../../components/organisms/top-bar.jsx",
    lineNumber: 35,
    columnNumber: 9
  }, this),
  actions: /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(import_jsx_dev_runtime32.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(Button, { label: "Nuveo", style: "basic", DisclosureComp: a2 }, void 0, !1, {
      fileName: "../../components/organisms/top-bar.jsx",
      lineNumber: 37,
      columnNumber: 5
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)("div", { className: "h-3.75 w-px bg-border-default mx-4" }, void 0, !1, {
      fileName: "../../components/organisms/top-bar.jsx",
      lineNumber: 38,
      columnNumber: 5
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)("div", { className: "flex flex-row gap-2 items-center justify-center", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(IconButton, { IconComp: a, style: "plain" }, void 0, !1, {
        fileName: "../../components/organisms/top-bar.jsx",
        lineNumber: 40,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime32.jsxDEV)(Profile, { name: "Astroman", size: "small", subtitle: null }, void 0, !1, {
        fileName: "../../components/organisms/top-bar.jsx",
        lineNumber: 41,
        columnNumber: 7
      }, this)
    ] }, void 0, !0, {
      fileName: "../../components/organisms/top-bar.jsx",
      lineNumber: 39,
      columnNumber: 5
    }, this)
  ] }, void 0, !0, {
    fileName: "../../components/organisms/top-bar.jsx",
    lineNumber: 36,
    columnNumber: 12
  }, this),
  tab: {
    value: "projects",
    fitted: !0,
    layoutId: "projects",
    onChange: (e24) => {
      console.log(e24);
    },
    items: [
      {
        label: "Projects",
        href: "#",
        key: "projects",
        value: "projects"
      },
      {
        label: "Cluster",
        href: "#",
        key: "cluster",
        value: "cluster"
      },
      {
        label: "Cloud provider",
        href: "#",
        key: "cloudprovider",
        value: "cloudprovider"
      },
      {
        label: "Domains",
        href: "#",
        key: "domains",
        value: "domains"
      },
      {
        label: "Container registry",
        href: "#",
        value: "containerregistry",
        key: "containerregistry"
      },
      {
        label: "VPN",
        href: "#",
        key: "vpn",
        value: "vpn"
      },
      {
        label: "Settings",
        href: "#",
        key: "settings",
        value: "settings"
      }
    ]
  }
};

// app/pages/container.jsx
var import_jsx_dev_runtime33 = __toESM(require_jsx_dev_runtime()), Container = ({ children }) => {
  let fixedHeader = !0, location = (0, import_react106.useLocation)();
  console.log("location", location.pathname);
  let match = (0, import_react106.useMatch)({
    path: "/console/:path/*"
  }, location.pathname);
  return console.log("match", match), /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)("div", { className: "px-2.5", children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(
      TopBar,
      {
        fixed: fixedHeader,
        logo: /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(BrandLogo, { detailed: !0, size: 20 }, void 0, !1, {
          fileName: "app/pages/container.jsx",
          lineNumber: 25,
          columnNumber: 21
        }, this),
        tab: {
          value: match.params.path,
          fitted: !0,
          layoutId: "projects",
          onChange: (e24) => {
            console.log(e24);
          },
          items: [
            {
              label: "Projects",
              href: "projects",
              key: "projects",
              value: "projects"
            },
            {
              label: "Cluster",
              href: "cluster",
              key: "cluster",
              value: "cluster"
            },
            {
              label: "Cloud provider",
              href: "#",
              key: "cloudprovider",
              value: "cloudprovider"
            },
            {
              label: "Domains",
              href: "#",
              key: "domains",
              value: "domains"
            },
            {
              label: "Container registry",
              href: "#",
              value: "containerregistry",
              key: "containerregistry"
            },
            {
              label: "VPN",
              href: "#",
              key: "vpn",
              value: "vpn"
            },
            {
              label: "Settings",
              href: "settings/general",
              key: "settings",
              value: "settings"
            }
          ]
        },
        actions: /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(import_jsx_dev_runtime33.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(Button, { label: "Nuveo", variant: "basic", DisclosureComp: a2 }, void 0, !1, {
            fileName: "app/pages/container.jsx",
            lineNumber: 79,
            columnNumber: 25
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)("div", { className: "h-[15px] w-px bg-border-default mx-4" }, void 0, !1, {
            fileName: "app/pages/container.jsx",
            lineNumber: 80,
            columnNumber: 25
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)("div", { className: "flex flex-row gap-2 items-center justify-center", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(IconButton, { IconComp: i2, variant: "plain" }, void 0, !1, {
              fileName: "app/pages/container.jsx",
              lineNumber: 82,
              columnNumber: 29
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)(Profile, { name: "Astroman", size: "small", subtitle: null }, void 0, !1, {
              fileName: "app/pages/container.jsx",
              lineNumber: 83,
              columnNumber: 29
            }, this)
          ] }, void 0, !0, {
            fileName: "app/pages/container.jsx",
            lineNumber: 81,
            columnNumber: 25
          }, this)
        ] }, void 0, !0, {
          fileName: "app/pages/container.jsx",
          lineNumber: 78,
          columnNumber: 21
        }, this)
      },
      void 0,
      !1,
      {
        fileName: "app/pages/container.jsx",
        lineNumber: 22,
        columnNumber: 36
      },
      this
    ),
    /* @__PURE__ */ (0, import_jsx_dev_runtime33.jsxDEV)("div", { className: (0, import_classnames18.default)(
      "max-w-[1184px] m-auto",
      {
        "pt-23.75": fixedHeader && !0,
        "pt-15": !1
      }
    ), children }, void 0, !1, {
      fileName: "app/pages/container.jsx",
      lineNumber: 88,
      columnNumber: 13
    }, this)
  ] }, void 0, !0, {
    fileName: "app/pages/container.jsx",
    lineNumber: 21,
    columnNumber: 9
  }, this);
}, container_default = Container;

// app/routes/console._index.jsx
function ConsoleIndex() {
  return "hello";
}

// app/routes/_auth.signup.jsx
var auth_signup_exports = {};
__export(auth_signup_exports, {
  default: () => AuthLogin2
});
var import_classnames19 = __toESM(require_classnames());
var import_react_router_dom2 = __toESM(require_main2());
var import_jsx_dev_runtime34 = __toESM(require_jsx_dev_runtime());
function AuthLogin2({}) {
  let [searchParams, setSearchParams] = (0, import_react_router_dom2.useSearchParams)();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("div", { className: (0, import_classnames19.default)("flex flex-col items-center justify-center min-h-full"), children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("div", { className: (0, import_classnames19.default)("flex flex-1 flex-col items-center self-stretch justify-center px-5 py-16 border-b border-border-default"), children: /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("div", { className: "flex flex-col items-stretch justify-center gap-8 md:w-[400px]", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(BrandLogo, { darkBg: !1, size: 60 }, void 0, !1, {
        fileName: "app/routes/_auth.signup.jsx",
        lineNumber: 13,
        columnNumber: 17
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("div", { className: "flex flex-col items-stretch gap-8 border-b pb-8 border-border-default", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("div", { className: "flex flex-col gap-2 items-center md:px-12", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("div", { className: (0, import_classnames19.default)("text-text-strong heading3xl text-center"), children: "Signup to Kloudlite" }, void 0, !1, {
            fileName: "app/routes/_auth.signup.jsx",
            lineNumber: 16,
            columnNumber: 25
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("div", { className: "text-text-soft bodySm text-center", children: "To access your DevOps console, Please provide your login credentials." }, void 0, !1, {
            fileName: "app/routes/_auth.signup.jsx",
            lineNumber: 17,
            columnNumber: 25
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_auth.signup.jsx",
          lineNumber: 15,
          columnNumber: 21
        }, this),
        searchParams.get("mode") == "email" ? /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("div", { className: "flex flex-col items-stretch gap-5", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(TextInput, { label: "Name", placeholder: "zuko" }, void 0, !1, {
            fileName: "app/routes/_auth.signup.jsx",
            lineNumber: 22,
            columnNumber: 29
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("div", { className: "flex flex-col gap-5 items-stretch md:flex-row", children: [
            /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(TextInput, { label: "Company Name", placeholder: "zuko@example.com", className: "flex-1" }, void 0, !1, {
              fileName: "app/routes/_auth.signup.jsx",
              lineNumber: 24,
              columnNumber: 33
            }, this),
            /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(NumberInput, { label: "Company Size", className: "flex-1" }, void 0, !1, {
              fileName: "app/routes/_auth.signup.jsx",
              lineNumber: 25,
              columnNumber: 33
            }, this)
          ] }, void 0, !0, {
            fileName: "app/routes/_auth.signup.jsx",
            lineNumber: 23,
            columnNumber: 29
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(TextInput, { label: "Email", placeholder: "zuko@example.com" }, void 0, !1, {
            fileName: "app/routes/_auth.signup.jsx",
            lineNumber: 27,
            columnNumber: 29
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(PasswordInput, { label: "Password", placeholder: "XXXXXX" }, void 0, !1, {
            fileName: "app/routes/_auth.signup.jsx",
            lineNumber: 28,
            columnNumber: 29
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(Button, { size: "large", variant: "primary", label: "Continue with Email", IconComp: a4 }, void 0, !1, {
            fileName: "app/routes/_auth.signup.jsx",
            lineNumber: 29,
            columnNumber: 29
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_auth.signup.jsx",
          lineNumber: 21,
          columnNumber: 25
        }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("div", { className: "flex flex-col items-stretch gap-5", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(Button, { size: "large", variant: "basic", label: "Continue with GitHub", IconComp: a5, href: "https://google.com" }, void 0, !1, {
            fileName: "app/routes/_auth.signup.jsx",
            lineNumber: 33,
            columnNumber: 29
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(Button, { size: "large", variant: "primary", label: "Continue with GitLab", IconComp: l6 }, void 0, !1, {
            fileName: "app/routes/_auth.signup.jsx",
            lineNumber: 34,
            columnNumber: 29
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(Button, { size: "large", variant: "secondary", label: "Continue with Google", IconComp: i9 }, void 0, !1, {
            fileName: "app/routes/_auth.signup.jsx",
            lineNumber: 35,
            columnNumber: 29
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_auth.signup.jsx",
          lineNumber: 32,
          columnNumber: 25
        }, this)
      ] }, void 0, !0, {
        fileName: "app/routes/_auth.signup.jsx",
        lineNumber: 14,
        columnNumber: 17
      }, this),
      searchParams.get("mode") == "email" ? /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(Button, { size: "large", variant: "outline", label: "Other Signup options", IconComp: i3, href: "/signup" }, void 0, !1, {
        fileName: "app/routes/_auth.signup.jsx",
        lineNumber: 40,
        columnNumber: 21
      }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(Button, { size: "large", variant: "outline", label: "Signup with Email", IconComp: i6, href: "/signup/?mode=email" }, void 0, !1, {
        fileName: "app/routes/_auth.signup.jsx",
        lineNumber: 42,
        columnNumber: 21
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("div", { className: "bodyMd text-text-soft text-center", children: "By signing up, you agree to the Terms of Service and Privacy Policy." }, void 0, !1, {
        fileName: "app/routes/_auth.signup.jsx",
        lineNumber: 44,
        columnNumber: 17
      }, this)
    ] }, void 0, !0, {
      fileName: "app/routes/_auth.signup.jsx",
      lineNumber: 12,
      columnNumber: 13
    }, this) }, void 0, !1, {
      fileName: "app/routes/_auth.signup.jsx",
      lineNumber: 11,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("div", { className: "py-8  px-5 flex flex-row items-center justify-center self-stretch", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)("div", { className: "bodyMd text-text-default", children: "Already have an account?" }, void 0, !1, {
        fileName: "app/routes/_auth.signup.jsx",
        lineNumber: 51,
        columnNumber: 13
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime34.jsxDEV)(Button, { label: "Login", variant: "primary-plain", size: "medium", href: "/login" }, void 0, !1, {
        fileName: "app/routes/_auth.signup.jsx",
        lineNumber: 52,
        columnNumber: 13
      }, this)
    ] }, void 0, !0, {
      fileName: "app/routes/_auth.signup.jsx",
      lineNumber: 50,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/routes/_auth.signup.jsx",
    lineNumber: 10,
    columnNumber: 12
  }, this);
}

// app/routes/_auth.login.jsx
var auth_login_exports = {};
__export(auth_login_exports, {
  default: () => AuthLogin3
});
var import_classnames20 = __toESM(require_classnames());
var import_react_router_dom3 = __toESM(require_main2());
var import_jsx_dev_runtime35 = __toESM(require_jsx_dev_runtime()), CustomGoogleIcon = (props) => /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)(i9, { ...props, weight: 4 }, void 0, !1, {
  fileName: "app/routes/_auth.login.jsx",
  lineNumber: 9,
  columnNumber: 12
}, this);
function AuthLogin3({}) {
  let [searchParams, setSearchParams] = (0, import_react_router_dom3.useSearchParams)();
  return /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)("div", { className: (0, import_classnames20.default)("flex flex-col items-center justify-center h-full"), children: [
    /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)("div", { className: (0, import_classnames20.default)("flex flex-1 flex-col items-center self-stretch justify-center px-5 pb-8 border-b border-border-default md:py-37.5"), children: /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)("div", { className: "flex flex-col items-stretch justify-center gap-8 md:w-[400px]", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)(BrandLogo, { darkBg: !1, size: 60 }, void 0, !1, {
        fileName: "app/routes/_auth.login.jsx",
        lineNumber: 17,
        columnNumber: 17
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)("div", { className: "flex flex-col items-stretch gap-8 border-b pb-8 border-border-default", children: [
        /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)("div", { className: "flex flex-col gap-2 items-center md:px-12", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)("div", { className: (0, import_classnames20.default)("text-text-strong heading3xl text-center"), children: "Login to Kloudlite" }, void 0, !1, {
            fileName: "app/routes/_auth.login.jsx",
            lineNumber: 20,
            columnNumber: 25
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)("div", { className: "text-text-soft bodySm text-center", children: "To access your DevOps console, Please provide your login credentials." }, void 0, !1, {
            fileName: "app/routes/_auth.login.jsx",
            lineNumber: 21,
            columnNumber: 25
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_auth.login.jsx",
          lineNumber: 19,
          columnNumber: 21
        }, this),
        searchParams.get("mode") == "email" ? /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)("div", { className: "flex flex-col items-stretch gap-5", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)(TextInput, { label: "Email", placeholder: "zuko@example.com" }, void 0, !1, {
            fileName: "app/routes/_auth.login.jsx",
            lineNumber: 26,
            columnNumber: 29
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)(PasswordInput, { label: "Password", placeholder: "XXXXXX", extra: /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)(Button, { size: "medium", variant: "primary-plain", label: "Forgot password", href: "/forgotpassword" }, void 0, !1, {
            fileName: "app/routes/_auth.login.jsx",
            lineNumber: 27,
            columnNumber: 93
          }, this) }, void 0, !1, {
            fileName: "app/routes/_auth.login.jsx",
            lineNumber: 27,
            columnNumber: 29
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)(Button, { size: "large", variant: "primary", label: "Continue with Email", IconComp: a4 }, void 0, !1, {
            fileName: "app/routes/_auth.login.jsx",
            lineNumber: 28,
            columnNumber: 29
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_auth.login.jsx",
          lineNumber: 25,
          columnNumber: 25
        }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)("div", { className: "flex flex-col items-stretch gap-5", children: [
          /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)(Button, { size: "large", variant: "basic", label: "Continue with GitHub", IconComp: a5, href: "https://google.com" }, void 0, !1, {
            fileName: "app/routes/_auth.login.jsx",
            lineNumber: 32,
            columnNumber: 29
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)(Button, { size: "large", variant: "secondary", style: { background: "#7759c2", borderColor: "#673ab7" }, label: "Continue with GitLab", IconComp: l6 }, void 0, !1, {
            fileName: "app/routes/_auth.login.jsx",
            lineNumber: 33,
            columnNumber: 29
          }, this),
          /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)(Button, { size: "large", variant: "primary", label: "Continue with Google", IconComp: CustomGoogleIcon }, void 0, !1, {
            fileName: "app/routes/_auth.login.jsx",
            lineNumber: 34,
            columnNumber: 29
          }, this)
        ] }, void 0, !0, {
          fileName: "app/routes/_auth.login.jsx",
          lineNumber: 31,
          columnNumber: 25
        }, this)
      ] }, void 0, !0, {
        fileName: "app/routes/_auth.login.jsx",
        lineNumber: 18,
        columnNumber: 17
      }, this),
      searchParams.get("mode") == "email" ? /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)(Button, { size: "large", variant: "outline", label: "Other Login options", IconComp: i3, href: "/login" }, void 0, !1, {
        fileName: "app/routes/_auth.login.jsx",
        lineNumber: 39,
        columnNumber: 21
      }, this) : /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)(Button, { size: "large", variant: "outline", label: "Login with Email", IconComp: i6, href: "/login/?mode=email" }, void 0, !1, {
        fileName: "app/routes/_auth.login.jsx",
        lineNumber: 41,
        columnNumber: 21
      }, this)
    ] }, void 0, !0, {
      fileName: "app/routes/_auth.login.jsx",
      lineNumber: 16,
      columnNumber: 13
    }, this) }, void 0, !1, {
      fileName: "app/routes/_auth.login.jsx",
      lineNumber: 15,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)("div", { className: "py-8  px-5 flex flex-row items-center justify-center self-stretch", children: [
      /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)("div", { className: "bodyMd text-text-default", children: "Don\u2019t have an account?" }, void 0, !1, {
        fileName: "app/routes/_auth.login.jsx",
        lineNumber: 46,
        columnNumber: 13
      }, this),
      /* @__PURE__ */ (0, import_jsx_dev_runtime35.jsxDEV)(Button, { label: "Signup", variant: "primary-plain", size: "medium", href: "/signup" }, void 0, !1, {
        fileName: "app/routes/_auth.login.jsx",
        lineNumber: 47,
        columnNumber: 13
      }, this)
    ] }, void 0, !0, {
      fileName: "app/routes/_auth.login.jsx",
      lineNumber: 45,
      columnNumber: 9
    }, this)
  ] }, void 0, !0, {
    fileName: "app/routes/_auth.login.jsx",
    lineNumber: 14,
    columnNumber: 12
  }, this);
}

// app/routes/console.jsx
var console_exports = {};
__export(console_exports, {
  default: () => Console
});
var import_react109 = __toESM(require_dist3()), import_jsx_dev_runtime36 = __toESM(require_jsx_dev_runtime());
function Console() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(container_default, { children: /* @__PURE__ */ (0, import_jsx_dev_runtime36.jsxDEV)(import_react109.Outlet, {}, void 0, !1, {
    fileName: "app/routes/console.jsx",
    lineNumber: 5,
    columnNumber: 9
  }, this) }, void 0, !1, {
    fileName: "app/routes/console.jsx",
    lineNumber: 4,
    columnNumber: 12
  }, this);
}

// app/routes/_index.jsx
var index_exports = {};
__export(index_exports, {
  default: () => IndexRoute
});
var import_jsx_dev_runtime37 = __toESM(require_jsx_dev_runtime());
function IndexRoute() {
  return /* @__PURE__ */ (0, import_jsx_dev_runtime37.jsxDEV)("div", { children: "hello" }, void 0, !1, {
    fileName: "app/routes/_index.jsx",
    lineNumber: 5,
    columnNumber: 9
  }, this);
}

// server-assets-manifest:@remix-run/dev/assets-manifest
var assets_manifest_default = { entry: { module: "/build/entry.client-DUCVWI6C.js", imports: ["/build/_shared/chunk-I6XRAN7Y.js", "/build/_shared/chunk-64G2EL7I.js", "/build/_shared/chunk-NGRPE3TF.js"] }, routes: { root: { id: "root", parentId: void 0, path: "", index: void 0, caseSensitive: void 0, module: "/build/root-NZC6TLUR.js", imports: ["/build/_shared/chunk-VYN7LPQX.js"], hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/_auth.forgotpassword": { id: "routes/_auth.forgotpassword", parentId: "root", path: "forgotpassword", index: void 0, caseSensitive: void 0, module: "/build/routes/_auth.forgotpassword-WNWV55PM.js", imports: ["/build/_shared/chunk-QLJOUF2Z.js", "/build/_shared/chunk-6FLWWC3M.js", "/build/_shared/chunk-TKUTY5U6.js", "/build/_shared/chunk-E3SZK56M.js", "/build/_shared/chunk-GPTZODTU.js"], hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/_auth.login": { id: "routes/_auth.login", parentId: "root", path: "login", index: void 0, caseSensitive: void 0, module: "/build/routes/_auth.login-GFZRC2XY.js", imports: ["/build/_shared/chunk-QLJOUF2Z.js", "/build/_shared/chunk-6FLWWC3M.js", "/build/_shared/chunk-TKUTY5U6.js", "/build/_shared/chunk-E3SZK56M.js", "/build/_shared/chunk-GPTZODTU.js"], hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/_auth.signup": { id: "routes/_auth.signup", parentId: "root", path: "signup", index: void 0, caseSensitive: void 0, module: "/build/routes/_auth.signup-SCYGFPYW.js", imports: ["/build/_shared/chunk-QLJOUF2Z.js", "/build/_shared/chunk-6FLWWC3M.js", "/build/_shared/chunk-TKUTY5U6.js", "/build/_shared/chunk-E3SZK56M.js", "/build/_shared/chunk-GPTZODTU.js"], hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/_index": { id: "routes/_index", parentId: "root", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/_index-ABQIWCCV.js", imports: void 0, hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/console": { id: "routes/console", parentId: "root", path: "console", index: void 0, caseSensitive: void 0, module: "/build/routes/console-UQWQ4BPY.js", imports: ["/build/_shared/chunk-RANWTHYZ.js", "/build/_shared/chunk-QLJOUF2Z.js", "/build/_shared/chunk-WRP4JI4C.js", "/build/_shared/chunk-HQTICK5H.js", "/build/_shared/chunk-TKUTY5U6.js", "/build/_shared/chunk-E3SZK56M.js", "/build/_shared/chunk-GPTZODTU.js"], hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/console._index": { id: "routes/console._index", parentId: "routes/console", path: void 0, index: !0, caseSensitive: void 0, module: "/build/routes/console._index-QRAI3MVU.js", imports: ["/build/_shared/chunk-VYN7LPQX.js"], hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/console.cluster": { id: "routes/console.cluster", parentId: "routes/console", path: "cluster", index: void 0, caseSensitive: void 0, module: "/build/routes/console.cluster-43NGQPFT.js", imports: ["/build/_shared/chunk-SRP5YRTM.js", "/build/_shared/chunk-D2YZOQ23.js"], hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/console.newproject": { id: "routes/console.newproject", parentId: "routes/console", path: "newproject", index: void 0, caseSensitive: void 0, module: "/build/routes/console.newproject-WMESU5LR.js", imports: ["/build/_shared/chunk-EXZT4ATL.js", "/build/_shared/chunk-6FLWWC3M.js"], hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/console.projects": { id: "routes/console.projects", parentId: "routes/console", path: "projects", index: void 0, caseSensitive: void 0, module: "/build/routes/console.projects-6UFTCX2K.js", imports: ["/build/_shared/chunk-SRP5YRTM.js", "/build/_shared/chunk-EXZT4ATL.js", "/build/_shared/chunk-6FLWWC3M.js", "/build/_shared/chunk-D2YZOQ23.js", "/build/_shared/chunk-VYN7LPQX.js"], hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/console.settings": { id: "routes/console.settings", parentId: "routes/console", path: "settings", index: void 0, caseSensitive: void 0, module: "/build/routes/console.settings-D5Q2RXGP.js", imports: ["/build/_shared/chunk-D2YZOQ23.js", "/build/_shared/chunk-VYN7LPQX.js"], hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/console.settings.billing": { id: "routes/console.settings.billing", parentId: "routes/console.settings", path: "billing", index: void 0, caseSensitive: void 0, module: "/build/routes/console.settings.billing-6MPLGRPZ.js", imports: ["/build/_shared/chunk-6FLWWC3M.js", "/build/_shared/chunk-TKUTY5U6.js", "/build/_shared/chunk-E3SZK56M.js", "/build/_shared/chunk-GPTZODTU.js"], hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 }, "routes/console.settings.general": { id: "routes/console.settings.general", parentId: "routes/console.settings", path: "general", index: void 0, caseSensitive: void 0, module: "/build/routes/console.settings.general-FHLYHKOG.js", imports: ["/build/_shared/chunk-HQTICK5H.js", "/build/_shared/chunk-6FLWWC3M.js", "/build/_shared/chunk-TKUTY5U6.js", "/build/_shared/chunk-E3SZK56M.js", "/build/_shared/chunk-GPTZODTU.js"], hasAction: !1, hasLoader: !1, hasCatchBoundary: !1, hasErrorBoundary: !1 } }, cssBundleHref: void 0, version: "4da73f44", hmr: void 0, url: "/build/manifest-4DA73F44.js" };

// server-entry-module:@remix-run/dev/server-build
var assetsBuildDirectory = "public/build", future = { unstable_dev: !1, unstable_postcss: !1, unstable_tailwind: !1, v2_errorBoundary: !1, v2_headers: !1, v2_meta: !1, v2_normalizeFormMethod: !1, v2_routeConvention: !0 }, publicPath = "/build/", entry = { module: entry_server_exports }, routes = {
  root: {
    id: "root",
    parentId: void 0,
    path: "",
    index: void 0,
    caseSensitive: void 0,
    module: root_exports
  },
  "routes/console.settings.billing": {
    id: "routes/console.settings.billing",
    parentId: "routes/console.settings",
    path: "billing",
    index: void 0,
    caseSensitive: void 0,
    module: console_settings_billing_exports
  },
  "routes/console.settings.general": {
    id: "routes/console.settings.general",
    parentId: "routes/console.settings",
    path: "general",
    index: void 0,
    caseSensitive: void 0,
    module: console_settings_general_exports
  },
  "routes/_auth.forgotpassword": {
    id: "routes/_auth.forgotpassword",
    parentId: "root",
    path: "forgotpassword",
    index: void 0,
    caseSensitive: void 0,
    module: auth_forgotpassword_exports
  },
  "routes/console.newproject": {
    id: "routes/console.newproject",
    parentId: "routes/console",
    path: "newproject",
    index: void 0,
    caseSensitive: void 0,
    module: console_newproject_exports
  },
  "routes/console.projects": {
    id: "routes/console.projects",
    parentId: "routes/console",
    path: "projects",
    index: void 0,
    caseSensitive: void 0,
    module: console_projects_exports
  },
  "routes/console.settings": {
    id: "routes/console.settings",
    parentId: "routes/console",
    path: "settings",
    index: void 0,
    caseSensitive: void 0,
    module: console_settings_exports
  },
  "routes/console.cluster": {
    id: "routes/console.cluster",
    parentId: "routes/console",
    path: "cluster",
    index: void 0,
    caseSensitive: void 0,
    module: console_cluster_exports
  },
  "routes/console._index": {
    id: "routes/console._index",
    parentId: "routes/console",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: console_index_exports
  },
  "routes/_auth.signup": {
    id: "routes/_auth.signup",
    parentId: "root",
    path: "signup",
    index: void 0,
    caseSensitive: void 0,
    module: auth_signup_exports
  },
  "routes/_auth.login": {
    id: "routes/_auth.login",
    parentId: "root",
    path: "login",
    index: void 0,
    caseSensitive: void 0,
    module: auth_login_exports
  },
  "routes/console": {
    id: "routes/console",
    parentId: "root",
    path: "console",
    index: void 0,
    caseSensitive: void 0,
    module: console_exports
  },
  "routes/_index": {
    id: "routes/_index",
    parentId: "root",
    path: void 0,
    index: !0,
    caseSensitive: void 0,
    module: index_exports
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  assets,
  assetsBuildDirectory,
  entry,
  future,
  publicPath,
  routes
});
/*! Bundled license information:

@remix-run/node/dist/fetch.js:
  (**
   * @remix-run/node v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/node/dist/base64.js:
  (**
   * @remix-run/node v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/node/dist/globals.js:
  (**
   * @remix-run/node v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

cookie/index.js:
  (*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

@remix-run/server-runtime/dist/warnings.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/cookies.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/formData.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/router/dist/router.cjs.js:
  (**
   * @remix-run/router v1.6.3
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/mode.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/errors.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/responses.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/entry.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/headers.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/invariant.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/routeMatching.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/data.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/routes.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/markup.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/serverHandoff.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/server.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/sessions.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/sessions/cookieStorage.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/sessions/memoryStorage.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/upload/errors.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/upload/memoryUploadHandler.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/dev.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/server-runtime/dist/index.js:
  (**
   * @remix-run/server-runtime v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/node/dist/crypto.js:
  (**
   * @remix-run/node v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/node/dist/implementations.js:
  (**
   * @remix-run/node v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/node/dist/sessions/fileStorage.js:
  (**
   * @remix-run/node v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/node/dist/stream.js:
  (**
   * @remix-run/node v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/node/dist/upload/fileUploadHandler.js:
  (**
   * @remix-run/node v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/node/dist/index.js:
  (**
   * @remix-run/node v1.17.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@remix-run/router/dist/router.cjs.js:
  (**
   * @remix-run/router v1.7.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/umd/react-router.development.js:
  (**
   * React Router v6.14.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/main.js:
  (**
   * React Router v6.14.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/umd/react-router-dom.development.js:
  (**
   * React Router DOM v6.14.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/main.js:
  (**
   * React Router DOM v6.14.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/_virtual/_rollupPluginBabelHelpers.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/errorBoundaries.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/invariant.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/routeModules.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/links.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/markup.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/transition.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/warnings.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/components.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/errors.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/data.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/routes.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/browser.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/scroll-restoration.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/server.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@remix-run/react/dist/index.js:
  (**
   * @remix-run/react v1.18.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-dom/cjs/react-dom-server-legacy.node.development.js:
  (**
   * @license React
   * react-dom-server-legacy.node.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server.node.development.js:
  (**
   * @license React
   * react-dom-server.node.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-dev-runtime.development.js:
  (**
   * @license React
   * react-jsx-dev-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=index.js.map
