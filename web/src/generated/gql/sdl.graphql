"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type Account {
  apiVersion: String!
  contactEmail: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  description: String
  displayName: String!
  id: String!
  isActive: Boolean
  kind: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  logo: String
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__AccountSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  updateTime: Date!
}

input AccountIn {
  contactEmail: String!
  description: String
  displayName: String!
  isActive: Boolean
  logo: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__AccountSpecIn!
}

type AccountMembership {
  accountName: String!
  role: Kloudlite__io___apps___iam___types__Role!
  user: User!
  userId: String!
}

input AccountMembershipIn {
  accountName: String!
  role: Kloudlite__io___apps___iam___types__Role!
  userId: String!
}

type AccountsCheckNameAvailabilityOutput {
  result: Boolean!
  suggestedNames: [String!]
}

scalar Any

type App {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  enabled: Boolean
  id: String!
  kind: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  projectName: String!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__AppSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Kloudlite__io___pkg___types__SyncStatus!
  updateTime: Date!
  workspaceName: String!
}

type AppEdge {
  cursor: String!
  node: App!
}

input AppIn {
  displayName: String!
  enabled: Boolean
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__AppSpecIn!
}

type AppPaginatedRecords {
  edges: [AppEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Build {
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  credUser: Kloudlite__io___common__CreatedOrUpdatedBy!
  errorMessages: Map!
  id: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  name: String!
  recordVersion: Int!
  source: Kloudlite__io___apps___container____registry___internal___domain___entities__GitSource!
  spec: Github__com___kloudlite___operator___apis___distribution___v1__BuildRunSpec!
  status: Kloudlite__io___apps___container____registry___internal___domain___entities__BuildStatus!
  updateTime: Date!
}

type BuildCacheKey {
  accountName: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  name: String!
  recordVersion: Int!
  updateTime: Date!
  volumeSizeInGB: Float!
}

type BuildCacheKeyEdge {
  cursor: String!
  node: BuildCacheKey!
}

input BuildCacheKeyIn {
  displayName: String!
  name: String!
  volumeSizeInGB: Float!
}

type BuildCacheKeyPaginatedRecords {
  edges: [BuildCacheKeyEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BuildEdge {
  cursor: String!
  node: Build!
}

input BuildIn {
  name: String!
  source: Kloudlite__io___apps___container____registry___internal___domain___entities__GitSourceIn!
  spec: Github__com___kloudlite___operator___apis___distribution___v1__BuildRunSpecIn!
}

type BuildPaginatedRecords {
  edges: [BuildEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BuildRun {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  creationTime: Date!
  id: String!
  kind: String!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___distribution___v1__BuildRunSpec
  status: Github__com___kloudlite___operator___pkg___operator__Status
  updateTime: Date!
}

type BuildRunEdge {
  cursor: String!
  node: BuildRun!
}

type BuildRunPaginatedRecords {
  edges: [BuildRunEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BYOCCluster {
  accountName: String!
  apiVersion: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  helmStatus: Map!
  id: String!
  incomingKafkaTopicName: String!
  isConnected: Boolean!
  kind: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___clusters___v1__BYOCSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Kloudlite__io___pkg___types__SyncStatus!
  updateTime: Date!
}

type BYOCClusterEdge {
  cursor: String!
  node: BYOCCluster!
}

input BYOCClusterIn {
  accountName: String!
  displayName: String!
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___clusters___v1__BYOCSpecIn!
}

type BYOCClusterPaginatedRecords {
  edges: [BYOCClusterEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CheckAwsAccessOutput {
  installationUrl: String
  result: Boolean!
}

type CheckNameAvailabilityOutput {
  result: Boolean!
  suggestedNames: [String!]!
}

type CloudProviderSecret {
  accountName: String!
  aws: Kloudlite__io___apps___infra___internal___entities__AWSSecretCredentials
  cloudProviderName: Github__com___kloudlite___operator___apis___common____types__CloudProvider!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata!
  recordVersion: Int!
  updateTime: Date!
}

type CloudProviderSecretEdge {
  cursor: String!
  node: CloudProviderSecret!
}

input CloudProviderSecretIn {
  aws: Kloudlite__io___apps___infra___internal___entities__AWSSecretCredentialsIn
  cloudProviderName: Github__com___kloudlite___operator___apis___common____types__CloudProvider!
  displayName: String!
  metadata: MetadataIn!
}

type CloudProviderSecretPaginatedRecords {
  edges: [CloudProviderSecretEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Cluster {
  accountName: String!
  adminKubeconfig: EncodedValue
  apiVersion: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: String!
  kind: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Kloudlite__io___pkg___types__SyncStatus!
  updateTime: Date!
}

type ClusterEdge {
  cursor: String!
  node: Cluster!
}

input ClusterIn {
  displayName: String!
  metadata: MetadataIn!
  spec: Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpecIn!
}

type ClusterPaginatedRecords {
  edges: [ClusterEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Config {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  data: Map
  displayName: String!
  enabled: Boolean
  id: String!
  kind: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Kloudlite__io___pkg___types__SyncStatus!
  updateTime: Date!
}

type ConfigEdge {
  cursor: String!
  node: Config!
}

input ConfigIn {
  data: Map
  displayName: String!
  enabled: Boolean
  metadata: MetadataIn
}

type ConfigPaginatedRecords {
  edges: [ConfigEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ConsoleCheckNameAvailabilityOutput {
  result: Boolean!
  suggestedNames: [String!]
}

enum ConsoleResType {
  app
  config
  environment
  managed_resource
  managed_service
  project
  router
  secret
  workspace
}

type CRCheckNameAvailabilityOutput {
  result: Boolean!
  suggestedNames: [String!]
}

type Credential {
  access: Kloudlite__io___apps___container____registry___internal___domain___entities__RepoAccess!
  accountName: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  expiration: Kloudlite__io___apps___container____registry___internal___domain___entities__Expiration!
  id: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  name: String!
  recordVersion: Int!
  updateTime: Date!
  username: String!
}

type CredentialEdge {
  cursor: String!
  node: Credential!
}

input CredentialIn {
  access: Kloudlite__io___apps___container____registry___internal___domain___entities__RepoAccess!
  expiration: Kloudlite__io___apps___container____registry___internal___domain___entities__ExpirationIn!
  name: String!
  username: String!
}

type CredentialPaginatedRecords {
  edges: [CredentialEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CursorPagination {
  after: String
  before: String
  first: Int
  last: Int
  orderBy: String
  sortDirection: CursorPaginationSortDirection
}

input CursorPaginationIn {
  after: String
  before: String
  first: Int
  last: Int
  orderBy: String = "_id"
  sortDirection: CursorPaginationSortDirection
}

enum CursorPaginationSortDirection {
  ASC
  DESC
}

scalar Date

type Digest {
  accountName: String!
  actor: String!
  creationTime: Date!
  deleting: Boolean!
  digest: String!
  id: String!
  length: Int!
  markedForDeletion: Boolean
  mediaType: String!
  recordVersion: Int!
  repository: String!
  size: Int!
  tags: [String!]!
  updateTime: Date!
  url: String!
}

type DigestEdge {
  cursor: String!
  node: Digest!
}

type DigestPaginatedRecords {
  edges: [DigestEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DomainEntry {
  accountName: String!
  clusterName: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  domainName: String!
  id: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  recordVersion: Int!
  updateTime: Date!
}

type DomainEntryEdge {
  cursor: String!
  node: DomainEntry!
}

input DomainEntryIn {
  clusterName: String!
  displayName: String!
  domainName: String!
}

type DomainEntryPaginatedRecords {
  edges: [DomainEntryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type EncodedValue {
  encoding: String!
  value: String!
}

input EnvOrWorkspaceOrProjectId {
  name: String!
  type: EnvOrWorkspaceOrProjectIdType!
}

enum EnvOrWorkspaceOrProjectIdType {
  environmentName
  environmentTargetNamespace
  projectName
  projectTargetNamespace
  workspaceName
  workspaceTargetNamespace
}

type GitBranch {
  name: String
  protected: Boolean
}

type Github__com___kloudlite___operator___apis___clusters___v1__AWSClusterConfig {
  k3sMasters: Github__com___kloudlite___operator___apis___clusters___v1__AWSK3sMastersConfig
  nodePools: Map
  region: String!
  spotNodePools: Map
}

input Github__com___kloudlite___operator___apis___clusters___v1__AWSClusterConfigIn {
  k3sMasters: Github__com___kloudlite___operator___apis___clusters___v1__AWSK3sMastersConfigIn
  region: String!
}

type Github__com___kloudlite___operator___apis___clusters___v1__AwsEC2PoolConfig {
  instanceType: String!
  nodes: Map
}

input Github__com___kloudlite___operator___apis___clusters___v1__AwsEC2PoolConfigIn {
  instanceType: String!
  nodes: Map
}

type Github__com___kloudlite___operator___apis___clusters___v1__AWSK3sMastersConfig {
  iamInstanceProfileRole: String
  imageId: String!
  imageSSHUsername: String!
  instanceType: String!
  nodes: Map
  nvidiaGpuEnabled: Boolean!
  rootVolumeSize: Int!
  rootVolumeType: String!
}

input Github__com___kloudlite___operator___apis___clusters___v1__AWSK3sMastersConfigIn {
  instanceType: String!
  nvidiaGpuEnabled: Boolean!
}

type Github__com___kloudlite___operator___apis___clusters___v1__AWSNodePoolConfig {
  availabilityZone: String!
  ec2Pool: Github__com___kloudlite___operator___apis___clusters___v1__AwsEC2PoolConfig
  iamInstanceProfileRole: String
  imageId: String!
  imageSSHUsername: String!
  nvidiaGpuEnabled: Boolean!
  poolType: Github__com___kloudlite___operator___apis___clusters___v1__AWSPoolType!
  rootVolumeSize: Int!
  rootVolumeType: String!
  spotPool: Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotPoolConfig
}

input Github__com___kloudlite___operator___apis___clusters___v1__AWSNodePoolConfigIn {
  availabilityZone: String!
  ec2Pool: Github__com___kloudlite___operator___apis___clusters___v1__AwsEC2PoolConfigIn
  nvidiaGpuEnabled: Boolean!
  poolType: Github__com___kloudlite___operator___apis___clusters___v1__AWSPoolType!
  spotPool: Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotPoolConfigIn
}

enum Github__com___kloudlite___operator___apis___clusters___v1__AWSPoolType {
  ec2
  spot
}

type Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotCpuNode {
  memoryPerVcpu: Github__com___kloudlite___operator___apis___common____types__MinMaxFloat
  vcpu: Github__com___kloudlite___operator___apis___common____types__MinMaxFloat!
}

input Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotCpuNodeIn {
  memoryPerVcpu: Github__com___kloudlite___operator___apis___common____types__MinMaxFloatIn
  vcpu: Github__com___kloudlite___operator___apis___common____types__MinMaxFloatIn!
}

type Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotGpuNode {
  instanceTypes: [String!]!
}

input Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotGpuNodeIn {
  instanceTypes: [String!]!
}

type Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotPoolConfig {
  cpuNode: Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotCpuNode
  gpuNode: Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotGpuNode
  nodes: Map
  spotFleetTaggingRoleName: String!
}

input Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotPoolConfigIn {
  cpuNode: Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotCpuNodeIn
  gpuNode: Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotGpuNodeIn
  nodes: Map
}

type Github__com___kloudlite___operator___apis___clusters___v1__BYOCSpec {
  accountName: String!
  displayName: String
  incomingKafkaTopic: String!
  ingressClasses: [String!]
  provider: String!
  publicIps: [String!]
  region: String!
  storageClasses: [String!]
}

input Github__com___kloudlite___operator___apis___clusters___v1__BYOCSpecIn {
  accountName: String!
  displayName: String
  incomingKafkaTopic: String!
  ingressClasses: [String!]
  provider: String!
  publicIps: [String!]
  region: String!
  storageClasses: [String!]
}

type Github__com___kloudlite___operator___apis___clusters___v1__CloudProviderCredentialKeys {
  keyAccessKey: String!
  keyAWSAccountId: String!
  keyAWSAssumeRoleExternalID: String!
  keyAWSAssumeRoleRoleARN: String!
  keyIAMInstanceProfileRole: String!
  keySecretKey: String!
}

type Github__com___kloudlite___operator___apis___clusters___v1__ClusterOutput {
  jobName: String!
  jobNamespace: String!
  keyK3sAgentJoinToken: String!
  keyK3sServerJoinToken: String!
  keyKubeconfig: String!
  secretName: String!
}

type Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpec {
  accountId: String!
  accountName: String!
  availabilityMode: Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpecAvailabilityMode!
  aws: Github__com___kloudlite___operator___apis___clusters___v1__AWSClusterConfig
  backupToS3Enabled: Boolean!
  cloudflareEnabled: Boolean
  cloudProvider: Github__com___kloudlite___operator___apis___common____types__CloudProvider!
  clusterInternalDnsHost: String
  clusterTokenRef: Github__com___kloudlite___operator___apis___common____types__SecretKeyRef
  credentialKeys: Github__com___kloudlite___operator___apis___clusters___v1__CloudProviderCredentialKeys
  credentialsRef: Github__com___kloudlite___operator___apis___common____types__SecretRef!
  kloudliteRelease: String!
  messageQueueTopicName: String!
  output: Github__com___kloudlite___operator___apis___clusters___v1__ClusterOutput
  publicDNSHost: String!
  taintMasterNodes: Boolean!
}

enum Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpecAvailabilityMode {
  dev
  HA
}

input Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpecIn {
  availabilityMode: Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpecAvailabilityMode!
  aws: Github__com___kloudlite___operator___apis___clusters___v1__AWSClusterConfigIn
  cloudflareEnabled: Boolean
  cloudProvider: Github__com___kloudlite___operator___apis___common____types__CloudProvider!
  credentialsRef: Github__com___kloudlite___operator___apis___common____types__SecretRefIn!
}

type Github__com___kloudlite___operator___apis___clusters___v1__InfrastuctureAsCode {
  cloudProviderAccessKey: Github__com___kloudlite___operator___apis___common____types__SecretKeyRef!
  cloudProviderSecretKey: Github__com___kloudlite___operator___apis___common____types__SecretKeyRef!
  jobName: String
  jobNamespace: String
  stateS3BucketFilePath: String!
  stateS3BucketName: String!
  stateS3BucketRegion: String!
}

type Github__com___kloudlite___operator___apis___clusters___v1__MasterNodeProps {
  availabilityZone: String!
  lastRecreatedAt: Date
  role: String!
}

type Github__com___kloudlite___operator___apis___clusters___v1__NodePoolSpec {
  aws: Github__com___kloudlite___operator___apis___clusters___v1__AWSNodePoolConfig
  cloudProvider: Github__com___kloudlite___operator___apis___common____types__CloudProvider!
  iac: Github__com___kloudlite___operator___apis___clusters___v1__InfrastuctureAsCode!
  maxCount: Int!
  minCount: Int!
  targetCount: Int!
}

input Github__com___kloudlite___operator___apis___clusters___v1__NodePoolSpecIn {
  aws: Github__com___kloudlite___operator___apis___clusters___v1__AWSNodePoolConfigIn
  cloudProvider: Github__com___kloudlite___operator___apis___common____types__CloudProvider!
  maxCount: Int!
  minCount: Int!
  targetCount: Int!
}

type Github__com___kloudlite___operator___apis___clusters___v1__NodeProps {
  lastRecreatedAt: Date
}

input Github__com___kloudlite___operator___apis___clusters___v1__NodePropsIn {
  lastRecreatedAt: Date
}

type Github__com___kloudlite___operator___apis___clusters___v1__NodeSpec {
  nodepoolName: String!
}

input Github__com___kloudlite___operator___apis___clusters___v1__NodeSpecIn {
  nodepoolName: String!
}

enum Github__com___kloudlite___operator___apis___common____types__CloudProvider {
  aws
  azure
  do
  gcp
}

type Github__com___kloudlite___operator___apis___common____types__MinMaxFloat {
  max: String!
  min: String!
}

input Github__com___kloudlite___operator___apis___common____types__MinMaxFloatIn {
  max: String!
  min: String!
}

type Github__com___kloudlite___operator___apis___common____types__SecretKeyRef {
  key: String!
  name: String!
  namespace: String
}

type Github__com___kloudlite___operator___apis___common____types__SecretRef {
  name: String!
  namespace: String
}

input Github__com___kloudlite___operator___apis___common____types__SecretRefIn {
  name: String!
  namespace: String
}

type Github__com___kloudlite___operator___apis___crds___v1__AccountSpec {
  targetNamespace: String
}

input Github__com___kloudlite___operator___apis___crds___v1__AccountSpecIn {
  targetNamespace: String
}

type Github__com___kloudlite___operator___apis___crds___v1__AppContainer {
  args: [String!]
  command: [String!]
  env: [Github__com___kloudlite___operator___apis___crds___v1__ContainerEnv!]
  envFrom: [Github__com___kloudlite___operator___apis___crds___v1__EnvFrom!]
  image: String!
  imagePullPolicy: String
  livenessProbe: Github__com___kloudlite___operator___apis___crds___v1__Probe
  name: String!
  readinessProbe: Github__com___kloudlite___operator___apis___crds___v1__Probe
  resourceCpu: Github__com___kloudlite___operator___apis___crds___v1__ContainerResource
  resourceMemory: Github__com___kloudlite___operator___apis___crds___v1__ContainerResource
  volumes: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolume!]
}

input Github__com___kloudlite___operator___apis___crds___v1__AppContainerIn {
  args: [String!]
  command: [String!]
  env: [Github__com___kloudlite___operator___apis___crds___v1__ContainerEnvIn!]
  envFrom: [Github__com___kloudlite___operator___apis___crds___v1__EnvFromIn!]
  image: String!
  imagePullPolicy: String
  livenessProbe: Github__com___kloudlite___operator___apis___crds___v1__ProbeIn
  name: String!
  readinessProbe: Github__com___kloudlite___operator___apis___crds___v1__ProbeIn
  resourceCpu: Github__com___kloudlite___operator___apis___crds___v1__ContainerResourceIn
  resourceMemory: Github__com___kloudlite___operator___apis___crds___v1__ContainerResourceIn
  volumes: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeIn!]
}

type Github__com___kloudlite___operator___apis___crds___v1__AppSpec {
  containers: [Github__com___kloudlite___operator___apis___crds___v1__AppContainer!]!
  displayName: String
  freeze: Boolean
  hpa: Github__com___kloudlite___operator___apis___crds___v1__HPA
  intercept: Github__com___kloudlite___operator___apis___crds___v1__Intercept
  nodeSelector: Map
  region: String
  replicas: Int
  serviceAccount: String
  services: [Github__com___kloudlite___operator___apis___crds___v1__AppSvc!]
  tolerations: [K8s__io___api___core___v1__Toleration!]
}

input Github__com___kloudlite___operator___apis___crds___v1__AppSpecIn {
  containers: [Github__com___kloudlite___operator___apis___crds___v1__AppContainerIn!]!
  displayName: String
  freeze: Boolean
  hpa: Github__com___kloudlite___operator___apis___crds___v1__HPAIn
  intercept: Github__com___kloudlite___operator___apis___crds___v1__InterceptIn
  nodeSelector: Map
  region: String
  replicas: Int
  serviceAccount: String
  services: [Github__com___kloudlite___operator___apis___crds___v1__AppSvcIn!]
  tolerations: [K8s__io___api___core___v1__TolerationIn!]
}

type Github__com___kloudlite___operator___apis___crds___v1__AppSvc {
  name: String
  port: Int!
  targetPort: Int
  type: String
}

input Github__com___kloudlite___operator___apis___crds___v1__AppSvcIn {
  name: String
  port: Int!
  targetPort: Int
  type: String
}

type Github__com___kloudlite___operator___apis___crds___v1__BasicAuth {
  enabled: Boolean!
  secretName: String
  username: String
}

input Github__com___kloudlite___operator___apis___crds___v1__BasicAuthIn {
  enabled: Boolean!
  secretName: String
  username: String
}

enum Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret {
  config
  secret
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerEnv {
  key: String!
  optional: Boolean
  refKey: String
  refName: String
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret
  value: String
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerEnvIn {
  key: String!
  optional: Boolean
  refKey: String
  refName: String
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret
  value: String
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerResource {
  max: String
  min: String
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerResourceIn {
  max: String
  min: String
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerVolume {
  items: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItem!]
  mountPath: String!
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeIn {
  items: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItemIn!]
  mountPath: String!
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItem {
  fileName: String
  key: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItemIn {
  fileName: String
  key: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__Cors {
  allowCredentials: Boolean
  enabled: Boolean
  origins: [String!]
}

input Github__com___kloudlite___operator___apis___crds___v1__CorsIn {
  allowCredentials: Boolean
  enabled: Boolean
  origins: [String!]
}

type Github__com___kloudlite___operator___apis___crds___v1__EnvFrom {
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

input Github__com___kloudlite___operator___apis___crds___v1__EnvFromIn {
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

type Github__com___kloudlite___operator___apis___crds___v1__HPA {
  enabled: Boolean
  maxReplicas: Int
  minReplicas: Int
  thresholdCpu: Int
  thresholdMemory: Int
}

input Github__com___kloudlite___operator___apis___crds___v1__HPAIn {
  enabled: Boolean
  maxReplicas: Int
  minReplicas: Int
  thresholdCpu: Int
  thresholdMemory: Int
}

type Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbe {
  httpHeaders: Map
  path: String!
  port: Int!
}

input Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbeIn {
  httpHeaders: Map
  path: String!
  port: Int!
}

type Github__com___kloudlite___operator___apis___crds___v1__Https {
  clusterIssuer: String
  enabled: Boolean!
  forceRedirect: Boolean
}

input Github__com___kloudlite___operator___apis___crds___v1__HttpsIn {
  clusterIssuer: String
  enabled: Boolean!
  forceRedirect: Boolean
}

type Github__com___kloudlite___operator___apis___crds___v1__Intercept {
  enabled: Boolean!
  toDevice: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__InterceptIn {
  enabled: Boolean!
  toDevice: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__ManagedResourceSpec {
  inputs: Github__com___kloudlite___operator___pkg___raw____json__RawJson
  mresKind: Github__com___kloudlite___operator___apis___crds___v1__mresKind!
  msvcRef: Github__com___kloudlite___operator___apis___crds___v1__msvcNamedRefTT!
}

input Github__com___kloudlite___operator___apis___crds___v1__ManagedResourceSpecIn {
  inputs: Github__com___kloudlite___operator___pkg___raw____json__RawJsonIn
  mresKind: Github__com___kloudlite___operator___apis___crds___v1__mresKindIn!
  msvcRef: Github__com___kloudlite___operator___apis___crds___v1__msvcNamedRefTTIn!
}

type Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpec {
  inputs: Github__com___kloudlite___operator___pkg___raw____json__RawJson
  msvcKind: Github__com___kloudlite___operator___apis___crds___v1__msvcKind!
  nodeSelector: Map
  region: String
  tolerations: [K8s__io___api___core___v1__Toleration!]
}

input Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpecIn {
  inputs: Github__com___kloudlite___operator___pkg___raw____json__RawJsonIn
  msvcKind: Github__com___kloudlite___operator___apis___crds___v1__msvcKindIn!
  nodeSelector: Map
  region: String
  tolerations: [K8s__io___api___core___v1__TolerationIn!]
}

type Github__com___kloudlite___operator___apis___crds___v1__mresKind {
  kind: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__mresKindIn {
  kind: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__msvcKind {
  apiVersion: String!
  kind: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__msvcKindIn {
  apiVersion: String!
  kind: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__msvcNamedRefTT {
  apiVersion: String!
  kind: String!
  name: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__msvcNamedRefTTIn {
  apiVersion: String!
  kind: String!
  name: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__Probe {
  failureThreshold: Int
  httpGet: Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbe
  initialDelay: Int
  interval: Int
  shell: Github__com___kloudlite___operator___apis___crds___v1__ShellProbe
  tcp: Github__com___kloudlite___operator___apis___crds___v1__TcpProbe
  type: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__ProbeIn {
  failureThreshold: Int
  httpGet: Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbeIn
  initialDelay: Int
  interval: Int
  shell: Github__com___kloudlite___operator___apis___crds___v1__ShellProbeIn
  tcp: Github__com___kloudlite___operator___apis___crds___v1__TcpProbeIn
  type: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__ProjectSpec {
  accountName: String!
  clusterName: String!
  displayName: String
  logo: String
  targetNamespace: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__ProjectSpecIn {
  displayName: String
  logo: String
  targetNamespace: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__RateLimit {
  connections: Int
  enabled: Boolean
  rpm: Int
  rps: Int
}

input Github__com___kloudlite___operator___apis___crds___v1__RateLimitIn {
  connections: Int
  enabled: Boolean
  rpm: Int
  rps: Int
}

type Github__com___kloudlite___operator___apis___crds___v1__Route {
  app: String
  lambda: String
  path: String!
  port: Int!
  rewrite: Boolean
}

input Github__com___kloudlite___operator___apis___crds___v1__RouteIn {
  app: String
  lambda: String
  path: String!
  port: Int!
  rewrite: Boolean
}

type Github__com___kloudlite___operator___apis___crds___v1__RouterSpec {
  backendProtocol: String
  basicAuth: Github__com___kloudlite___operator___apis___crds___v1__BasicAuth
  cors: Github__com___kloudlite___operator___apis___crds___v1__Cors
  domains: [String!]!
  https: Github__com___kloudlite___operator___apis___crds___v1__Https
  ingressClass: String
  maxBodySizeInMB: Int
  rateLimit: Github__com___kloudlite___operator___apis___crds___v1__RateLimit
  region: String
  routes: [Github__com___kloudlite___operator___apis___crds___v1__Route!]
}

input Github__com___kloudlite___operator___apis___crds___v1__RouterSpecIn {
  backendProtocol: String
  basicAuth: Github__com___kloudlite___operator___apis___crds___v1__BasicAuthIn
  cors: Github__com___kloudlite___operator___apis___crds___v1__CorsIn
  domains: [String!]!
  https: Github__com___kloudlite___operator___apis___crds___v1__HttpsIn
  ingressClass: String
  maxBodySizeInMB: Int
  rateLimit: Github__com___kloudlite___operator___apis___crds___v1__RateLimitIn
  region: String
  routes: [Github__com___kloudlite___operator___apis___crds___v1__RouteIn!]
}

type Github__com___kloudlite___operator___apis___crds___v1__ShellProbe {
  command: [String!]
}

input Github__com___kloudlite___operator___apis___crds___v1__ShellProbeIn {
  command: [String!]
}

type Github__com___kloudlite___operator___apis___crds___v1__TcpProbe {
  port: Int!
}

input Github__com___kloudlite___operator___apis___crds___v1__TcpProbeIn {
  port: Int!
}

type Github__com___kloudlite___operator___apis___crds___v1__WorkspaceSpec {
  isEnvironment: Boolean
  projectName: String!
  targetNamespace: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__WorkspaceSpecIn {
  isEnvironment: Boolean
  projectName: String!
  targetNamespace: String!
}

type Github__com___kloudlite___operator___apis___distribution___v1__BuildOptions {
  buildArgs: Map
  buildContexts: Map
  contextDir: String
  dockerfileContent: String
  dockerfilePath: String
  targetPlatforms: [String!]
}

input Github__com___kloudlite___operator___apis___distribution___v1__BuildOptionsIn {
  buildArgs: Map
  buildContexts: Map
  contextDir: String
  dockerfileContent: String
  dockerfilePath: String
  targetPlatforms: [String!]
}

type Github__com___kloudlite___operator___apis___distribution___v1__BuildRunSpec {
  accountName: String!
  buildOptions: Github__com___kloudlite___operator___apis___distribution___v1__BuildOptions
  cacheKeyName: String
  registry: Github__com___kloudlite___operator___apis___distribution___v1__Registry!
  resource: Github__com___kloudlite___operator___apis___distribution___v1__Resource!
}

input Github__com___kloudlite___operator___apis___distribution___v1__BuildRunSpecIn {
  buildOptions: Github__com___kloudlite___operator___apis___distribution___v1__BuildOptionsIn
  cacheKeyName: String
  registry: Github__com___kloudlite___operator___apis___distribution___v1__RegistryIn!
  resource: Github__com___kloudlite___operator___apis___distribution___v1__ResourceIn!
}

type Github__com___kloudlite___operator___apis___distribution___v1__Registry {
  repo: Github__com___kloudlite___operator___apis___distribution___v1__Repo!
}

input Github__com___kloudlite___operator___apis___distribution___v1__RegistryIn {
  repo: Github__com___kloudlite___operator___apis___distribution___v1__RepoIn!
}

type Github__com___kloudlite___operator___apis___distribution___v1__Repo {
  name: String!
  tags: [String!]!
}

input Github__com___kloudlite___operator___apis___distribution___v1__RepoIn {
  name: String!
  tags: [String!]!
}

type Github__com___kloudlite___operator___apis___distribution___v1__Resource {
  cpu: Int!
  memoryInMb: Int!
}

input Github__com___kloudlite___operator___apis___distribution___v1__ResourceIn {
  cpu: Int!
  memoryInMb: Int!
}

type Github__com___kloudlite___operator___apis___wireguard___v1__DeviceSpec {
  accountName: String!
  clusterName: String!
  dns: String
  ports: [Github__com___kloudlite___operator___apis___wireguard___v1__Port!]
}

input Github__com___kloudlite___operator___apis___wireguard___v1__DeviceSpecIn {
  accountName: String!
  clusterName: String!
  dns: String
  ports: [Github__com___kloudlite___operator___apis___wireguard___v1__PortIn!]
}

type Github__com___kloudlite___operator___apis___wireguard___v1__Port {
  port: Int
  targetPort: Int
}

input Github__com___kloudlite___operator___apis___wireguard___v1__PortIn {
  port: Int
  targetPort: Int
}

type Github__com___kloudlite___operator___pkg___operator__Check {
  generation: Int
  message: String
  status: Boolean!
}

input Github__com___kloudlite___operator___pkg___operator__CheckIn {
  generation: Int
  message: String
  status: Boolean!
}

type Github__com___kloudlite___operator___pkg___operator__ResourceRef {
  apiVersion: String!
  kind: String!
  name: String!
  namespace: String!
}

input Github__com___kloudlite___operator___pkg___operator__ResourceRefIn {
  name: String!
  namespace: String!
}

type Github__com___kloudlite___operator___pkg___operator__Status {
  checks: Map
  isReady: Boolean!
  lastReadyGeneration: Int
  lastReconcileTime: Date
  message: Github__com___kloudlite___operator___pkg___raw____json__RawJson
  resources: [Github__com___kloudlite___operator___pkg___operator__ResourceRef!]
}

input Github__com___kloudlite___operator___pkg___operator__StatusIn {
  checks: Map
  isReady: Boolean!
  lastReadyGeneration: Int
  lastReconcileTime: Date
  message: Github__com___kloudlite___operator___pkg___raw____json__RawJsonIn
  resources: [Github__com___kloudlite___operator___pkg___operator__ResourceRefIn!]
}

type Github__com___kloudlite___operator___pkg___raw____json__RawJson {
  RawMessage: Any
}

input Github__com___kloudlite___operator___pkg___raw____json__RawJsonIn {
  RawMessage: Any
}

type GithubBranch {
  name: String
  protected: Boolean
}

type GithubInstallation {
  account: Kloudlite__io___apps___container____registry___internal___domain___entities__GithubUserAccount
  appId: Int
  id: Int
  nodeId: String
  repositoriesUrl: String
  targetId: Int
  targetType: String
}

type GithubListRepository {
  repositories: [Kloudlite__io___apps___container____registry___internal___domain___entities__GithubRepository]!
  totalCount: Int
}

type GithubSearchRepository {
  incompleteResults: Boolean
  repositories: [Kloudlite__io___apps___container____registry___internal___domain___entities__GithubRepository]!
  total: Int
}

type GitlabBranch {
  canPush: Boolean!
  default: Boolean!
  developersCanMerge: Boolean!
  developersCanPush: Boolean!
  merged: Boolean!
  name: String!
  protected: Boolean!
  webUrl: String!
}

type GitlabGroup {
  avatarUrl: String!
  fullName: String!
  id: String!
}

type GitlabProject {
  archived: Boolean!
  avatarUrl: String!
  createdAt: Date
  creatorId: Int!
  defaultBranch: String!
  description: String!
  emptyRepo: Boolean!
  httpUrlToRepo: String!
  id: Int!
  lastActivityAt: Date
  name: String!
  nameWithNamespace: String!
  path: String!
  pathWithNamespace: String!
  public: Boolean!
  sshUrlToRepo: String!
  tagList: [String!]!
  topics: [String!]!
  webUrl: String!
}

type ImagePullSecret {
  accountName: String!
  creationTime: Date!
  dockerConfigJson: String
  dockerPassword: String
  dockerRegistryEndpoint: String
  dockerUsername: String
  id: String!
  name: String!
  updateTime: Date!
}

type ImagePullSecretEdge {
  cursor: String!
  node: ImagePullSecret!
}

input ImagePullSecretIn {
  accountName: String!
  dockerConfigJson: String
  dockerPassword: String
  dockerRegistryEndpoint: String
  dockerUsername: String
  name: String!
}

type ImagePullSecretPaginatedRecords {
  edges: [ImagePullSecretEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Invitation {
  accepted: Boolean
  accountName: String!
  creationTime: Date!
  id: String!
  invitedBy: String!
  inviteToken: String!
  markedForDeletion: Boolean
  recordVersion: Int!
  rejected: Boolean
  updateTime: Date!
  userEmail: String
  userName: String
  userRole: Kloudlite__io___apps___iam___types__Role!
}

input InvitationIn {
  userEmail: String
  userName: String
  userRole: Kloudlite__io___apps___iam___types__Role!
}

scalar Json

enum K8s__io___api___core___v1__ConditionStatus {
  False
  True
  Unknown
}

type K8s__io___api___core___v1__PersistentVolumeClaimCondition {
  lastProbeTime: Date
  lastTransitionTime: Date
  message: String
  reason: String
  status: K8s__io___api___core___v1__ConditionStatus!
  type: K8s__io___api___core___v1__PersistentVolumeClaimConditionType!
}

input K8s__io___api___core___v1__PersistentVolumeClaimConditionIn {
  lastProbeTime: Date
  lastTransitionTime: Date
  message: String
  reason: String
  status: K8s__io___api___core___v1__ConditionStatus!
  type: K8s__io___api___core___v1__PersistentVolumeClaimConditionType!
}

enum K8s__io___api___core___v1__PersistentVolumeClaimConditionType {
  FileSystemResizePending
  Resizing
}

enum K8s__io___api___core___v1__PersistentVolumeClaimPhase {
  Bound
  Lost
  Pending
}

type K8s__io___api___core___v1__PersistentVolumeClaimSpec {
  accessModes: [String!]
  dataSource: K8s__io___api___core___v1__TypedLocalObjectReference
  dataSourceRef: K8s__io___api___core___v1__TypedObjectReference
  resources: K8s__io___api___core___v1__ResourceRequirements
  selector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelector
  storageClassName: String
  volumeMode: String
  volumeName: String
}

input K8s__io___api___core___v1__PersistentVolumeClaimSpecIn {
  accessModes: [String!]
  dataSource: K8s__io___api___core___v1__TypedLocalObjectReferenceIn
  dataSourceRef: K8s__io___api___core___v1__TypedObjectReferenceIn
  resources: K8s__io___api___core___v1__ResourceRequirementsIn
  selector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorIn
  storageClassName: String
  volumeMode: String
  volumeName: String
}

type K8s__io___api___core___v1__PersistentVolumeClaimStatus {
  accessModes: [String!]
  allocatedResources: Map
  capacity: Map
  conditions: [K8s__io___api___core___v1__PersistentVolumeClaimCondition!]
  phase: K8s__io___api___core___v1__PersistentVolumeClaimPhase
  resizeStatus: String
}

input K8s__io___api___core___v1__PersistentVolumeClaimStatusIn {
  accessModes: [String!]
  allocatedResources: Map
  capacity: Map
  conditions: [K8s__io___api___core___v1__PersistentVolumeClaimConditionIn!]
  phase: K8s__io___api___core___v1__PersistentVolumeClaimPhase
  resizeStatus: String
}

type K8s__io___api___core___v1__ResourceClaim {
  name: String!
}

input K8s__io___api___core___v1__ResourceClaimIn {
  name: String!
}

type K8s__io___api___core___v1__ResourceRequirements {
  claims: [K8s__io___api___core___v1__ResourceClaim!]
  limits: Map
  requests: Map
}

input K8s__io___api___core___v1__ResourceRequirementsIn {
  claims: [K8s__io___api___core___v1__ResourceClaimIn!]
  limits: Map
  requests: Map
}

enum K8s__io___api___core___v1__SecretType {
  bootstrap__kubernetes__io___token
  kubernetes__io___basic____auth
  kubernetes__io___dockercfg
  kubernetes__io___dockerconfigjson
  kubernetes__io___service____account____token
  kubernetes__io___ssh____auth
  kubernetes__io___tls
  Opaque
}

enum K8s__io___api___core___v1__TaintEffect {
  NoExecute
  NoSchedule
  PreferNoSchedule
}

type K8s__io___api___core___v1__Toleration {
  effect: K8s__io___api___core___v1__TaintEffect
  key: String
  operator: K8s__io___api___core___v1__TolerationOperator
  tolerationSeconds: Int
  value: String
}

input K8s__io___api___core___v1__TolerationIn {
  effect: K8s__io___api___core___v1__TaintEffect
  key: String
  operator: K8s__io___api___core___v1__TolerationOperator
  tolerationSeconds: Int
  value: String
}

enum K8s__io___api___core___v1__TolerationOperator {
  Equal
  Exists
}

type K8s__io___api___core___v1__TypedLocalObjectReference {
  apiGroup: String
  kind: String!
  name: String!
}

input K8s__io___api___core___v1__TypedLocalObjectReferenceIn {
  apiGroup: String
  kind: String!
  name: String!
}

type K8s__io___api___core___v1__TypedObjectReference {
  apiGroup: String
  kind: String!
  name: String!
  namespace: String
}

input K8s__io___api___core___v1__TypedObjectReferenceIn {
  apiGroup: String
  kind: String!
  name: String!
  namespace: String
}

enum K8s__io___apimachinery___pkg___api___resource__Format {
  BinarySI
  DecimalExponent
  DecimalSI
}

type K8s__io___apimachinery___pkg___api___resource__Quantity {
  Format: K8s__io___apimachinery___pkg___api___resource__Format!
}

input K8s__io___apimachinery___pkg___api___resource__QuantityIn {
  Format: K8s__io___apimachinery___pkg___api___resource__Format!
}

type K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelector {
  matchExpressions: [K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorRequirement!]
  matchLabels: Map
}

input K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorIn {
  matchExpressions: [K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorRequirementIn!]
  matchLabels: Map
}

enum K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorOperator {
  DoesNotExist
  Exists
  In
  NotIn
}

type K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorRequirement {
  key: String!
  operator: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorOperator!
  values: [String!]
}

input K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorRequirementIn {
  key: String!
  operator: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorOperator!
  values: [String!]
}

type Kloudlite__io___apps___console___internal___entities__InputField {
  defaultValue: Any
  inputType: String!
  label: String!
  max: Float
  min: Float
  name: String!
  required: Boolean
  unit: String
}

type Kloudlite__io___apps___console___internal___entities__MresTemplate {
  apiVersion: String
  description: String!
  displayName: String!
  fields: [Kloudlite__io___apps___console___internal___entities__InputField!]!
  kind: String
  name: String!
  outputs: [Kloudlite__io___apps___console___internal___entities__OutputField!]!
}

type Kloudlite__io___apps___console___internal___entities__MsvcTemplateEntry {
  active: Boolean!
  apiVersion: String
  description: String!
  displayName: String!
  fields: [Kloudlite__io___apps___console___internal___entities__InputField!]!
  kind: String
  logoUrl: String!
  name: String!
  outputs: [Kloudlite__io___apps___console___internal___entities__OutputField!]!
  resources: [Kloudlite__io___apps___console___internal___entities__MresTemplate!]!
}

type Kloudlite__io___apps___console___internal___entities__OutputField {
  description: String!
  label: String!
  name: String!
}

enum Kloudlite__io___apps___container____registry___internal___domain___entities__BuildStatus {
  error
  failed
  idle
  pending
  queued
  running
  success
}

type Kloudlite__io___apps___container____registry___internal___domain___entities__Expiration {
  unit: Kloudlite__io___apps___container____registry___internal___domain___entities__ExpirationUnit!
  value: Int!
}

input Kloudlite__io___apps___container____registry___internal___domain___entities__ExpirationIn {
  unit: Kloudlite__io___apps___container____registry___internal___domain___entities__ExpirationUnit!
  value: Int!
}

enum Kloudlite__io___apps___container____registry___internal___domain___entities__ExpirationUnit {
  d
  h
  m
  w
  y
}

type Kloudlite__io___apps___container____registry___internal___domain___entities__GithubRepository {
  archived: Boolean
  cloneUrl: String
  createdAt: Date
  defaultBranch: String
  description: String
  disabled: Boolean
  fullName: String
  gitignoreTemplate: String
  gitUrl: String
  htmlUrl: String
  id: Int
  language: String
  masterBranch: String
  mirrorUrl: String
  name: String
  node_id: String
  permissions: Map
  private: Boolean
  pushedAt: Date
  size: Int
  team_id: Int
  updatedAt: Date
  url: String
  visibility: String
}

type Kloudlite__io___apps___container____registry___internal___domain___entities__GithubUserAccount {
  avatarUrl: String
  id: Int
  login: String
  nodeId: String
  type: String
}

input Kloudlite__io___apps___container____registry___internal___domain___entities__GithubUserAccountIn {
  avatarUrl: String
  id: Int
  login: String
  nodeId: String
  type: String
}

enum Kloudlite__io___apps___container____registry___internal___domain___entities__GitProvider {
  github
  gitlab
}

type Kloudlite__io___apps___container____registry___internal___domain___entities__GitSource {
  branch: String!
  provider: Kloudlite__io___apps___container____registry___internal___domain___entities__GitProvider!
  repository: String!
  webhookId: Int
}

input Kloudlite__io___apps___container____registry___internal___domain___entities__GitSourceIn {
  branch: String!
  provider: Kloudlite__io___apps___container____registry___internal___domain___entities__GitProvider!
  repository: String!
}

enum Kloudlite__io___apps___container____registry___internal___domain___entities__RepoAccess {
  read
  read_write
}

enum Kloudlite__io___apps___iam___types__Role {
  account_admin
  account_member
  account_owner
  project_admin
  project_member
  resource_owner
}

type Kloudlite__io___apps___infra___internal___entities__AWSSecretCredentials {
  accessKey: String
  awsAccountId: String
  cfParamExternalID: String
  cfParamInstanceProfileName: String
  cfParamRoleName: String
  cfParamStackName: String
  cfParamTrustedARN: String
  secretKey: String
}

input Kloudlite__io___apps___infra___internal___entities__AWSSecretCredentialsIn {
  accessKey: String
  awsAccountId: String
  secretKey: String
}

type Kloudlite__io___apps___infra___internal___entities__HelmStatusVal {
  isReady: Boolean
  message: String!
}

type Kloudlite__io___common__CreatedOrUpdatedBy {
  userEmail: String!
  userId: String!
  userName: String!
}

type Kloudlite__io___pkg___types__EncodedString {
  encoding: String!
  value: String!
}

type Kloudlite__io___pkg___types__SyncStatus {
  action: Kloudlite__io___pkg___types__SyncStatusAction!
  error: String
  lastSyncedAt: Date
  recordVersion: Int!
  state: Kloudlite__io___pkg___types__SyncStatusState!
  syncScheduledAt: Date
}

enum Kloudlite__io___pkg___types__SyncStatusAction {
  APPLY
  DELETE
}

enum Kloudlite__io___pkg___types__SyncStatusState {
  APPLIED_AT_AGENT
  ERRORED_AT_AGENT
  IDLE
  IN_QUEUE
  RECEIVED_UPDATE_FROM_AGENT
}

type ManagedResource {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  enabled: Boolean
  id: String!
  kind: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__ManagedResourceSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Kloudlite__io___pkg___types__SyncStatus!
  updateTime: Date!
}

type ManagedResourceEdge {
  cursor: String!
  node: ManagedResource!
}

input ManagedResourceIn {
  displayName: String!
  enabled: Boolean
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__ManagedResourceSpecIn!
}

type ManagedResourcePaginatedRecords {
  edges: [ManagedResourceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ManagedService {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  enabled: Boolean
  id: String!
  kind: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Kloudlite__io___pkg___types__SyncStatus!
  updateTime: Date!
}

type ManagedServiceEdge {
  cursor: String!
  node: ManagedService!
}

input ManagedServiceIn {
  displayName: String!
  enabled: Boolean
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpecIn!
}

type ManagedServicePaginatedRecords {
  edges: [ManagedServiceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

scalar Map

type MatchFilter {
  array: [Any!]
  exact: Any
  matchType: MatchFilterMatchType!
  regex: String
}

input MatchFilterIn {
  array: [Any!]
  exact: Any
  matchType: MatchFilterMatchType!
  regex: String
}

enum MatchFilterMatchType {
  array
  exact
  regex
}

type Membership {
  accountName: String!
  role: String!
  userId: String!
}

input MembershipIn {
  accountName: String!
  role: String!
  userId: String!
}

type Metadata {
  annotations: Map
  creationTimestamp: Date!
  deletionTimestamp: Date
  generation: Int!
  labels: Map
  name: String!
  namespace: String
}

input MetadataIn {
  annotations: Map
  labels: Map
  name: String!
  namespace: String
}

type MsvcTemplate {
  category: String!
  displayName: String!
  items: [Kloudlite__io___apps___console___internal___entities__MsvcTemplateEntry!]!
}

type Mutation {
  accounts_acceptInvitation(accountName: String!, inviteToken: String!): Boolean!
  accounts_activateAccount(accountName: String!): Boolean!
  accounts_createAccount(account: AccountIn!): Account!
  accounts_deactivateAccount(accountName: String!): Boolean!
  accounts_deleteAccount(accountName: String!): Boolean!
  accounts_deleteInvitation(accountName: String!, invitationId: String!): Boolean!
  accounts_inviteMembers(accountName: String!, invitations: [InvitationIn!]!): [Invitation!]
  accounts_rejectInvitation(accountName: String!, inviteToken: String!): Boolean!
  accounts_removeAccountMembership(accountName: String!, memberId: ID!): Boolean!
  accounts_resendInviteMail(accountName: String!, invitationId: String!): Boolean!
  accounts_updateAccount(account: AccountIn!): Account!
  accounts_updateAccountMembership(accountName: String!, memberId: ID!, role: Kloudlite__io___apps___iam___types__Role!): Boolean!
  auth_changeEmail(email: String!): Boolean!
  auth_changePassword(currentPassword: String!, newPassword: String!): Boolean!
  auth_clearMetadata: User!
  auth_createRemoteLogin(secret: String): String!
  auth_login(email: String!, password: String!): Session
  auth_logout: Boolean!
  auth_requestResetPassword(email: String!): Boolean!
  auth_resendVerificationEmail: Boolean!
  auth_resetPassword(password: String!, token: String!): Boolean!
  auth_setMetadata(values: Json!): User!
  auth_setRemoteAuthHeader(authHeader: String, loginId: String!): Boolean!
  auth_signup(email: String!, name: String!, password: String!): Session
  auth_verifyEmail(token: String!): Session!
  core_createApp(app: AppIn!): App
  core_createConfig(config: ConfigIn!): Config
  core_createEnvironment(env: WorkspaceIn!): Workspace
  core_createImagePullSecret(imagePullSecretIn: ImagePullSecretIn!): ImagePullSecret
  core_createManagedResource(mres: ManagedResourceIn!): ManagedResource
  core_createManagedService(msvc: ManagedServiceIn!): ManagedService
  core_createProject(project: ProjectIn!): Project
  core_createRouter(router: RouterIn!): Router
  core_createSecret(secret: SecretIn!): Secret
  core_createWorkspace(env: WorkspaceIn!): Workspace
  core_deleteApp(name: String!, namespace: String!): Boolean!
  core_deleteConfig(name: String!, namespace: String!): Boolean!
  core_deleteEnvironment(name: String!, namespace: String!): Boolean!
  core_deleteImagePullSecret(name: String!, namespace: String!): Boolean!
  core_deleteManagedResource(name: String!, namespace: String!): Boolean!
  core_deleteManagedService(name: String!, namespace: String!): Boolean!
  core_deleteProject(name: String!): Boolean!
  core_deleteRouter(name: String!, namespace: String!): Boolean!
  core_deleteSecret(name: String!, namespace: String!): Boolean!
  core_deleteWorkspace(name: String!, namespace: String!): Boolean!
  core_updateApp(app: AppIn!): App
  core_updateConfig(config: ConfigIn!): Config
  core_updateEnvironment(env: WorkspaceIn!): Workspace
  core_updateManagedResource(mres: ManagedResourceIn!): ManagedResource
  core_updateManagedService(msvc: ManagedServiceIn!): ManagedService
  core_updateProject(project: ProjectIn!): Project
  core_updateRouter(router: RouterIn!): Router
  core_updateSecret(secret: SecretIn!): Secret
  core_updateWorkspace(env: WorkspaceIn!): Workspace
  cr_addBuild(build: BuildIn!): Build
  cr_addBuildCacheKey(buildCacheKey: BuildCacheKeyIn!): BuildCacheKey
  cr_createCred(credential: CredentialIn!): Credential
  cr_createRepo(repository: RepositoryIn!): Repository
  cr_deleteBuild(id: ID!): Boolean!
  cr_deleteBuildCacheKey(id: ID!): Boolean!
  cr_deleteCred(username: String!): Boolean!
  cr_deleteDigest(digest: String!, repoName: String!): Boolean!
  cr_deleteRepo(name: String!): Boolean!
  cr_listBuildsByBuildCacheId(buildCacheKeyId: ID!, pagination: CursorPaginationIn): BuildPaginatedRecords
  cr_triggerBuild(id: ID!): Boolean!
  cr_updateBuild(build: BuildIn!, id: ID!): Build
  cr_updateBuildCacheKey(buildCacheKey: BuildCacheKeyIn!, id: ID!): BuildCacheKey
  infra_createBYOCCluster(byocCluster: BYOCClusterIn!): BYOCCluster
  infra_createCluster(cluster: ClusterIn!): Cluster
  infra_createDomainEntry(domainEntry: DomainEntryIn!): DomainEntry
  infra_createNodePool(clusterName: String!, pool: NodePoolIn!): NodePool
  infra_createProviderSecret(secret: CloudProviderSecretIn!): CloudProviderSecret
  infra_createVPNDevice(clusterName: String!, vpnDevice: VPNDeviceIn!): VPNDevice
  infra_deleteBYOCCluster(name: String!): Boolean!
  infra_deleteCluster(name: String!): Boolean!
  infra_deleteDomainEntry(domainName: String!): Boolean!
  infra_deleteNodePool(clusterName: String!, poolName: String!): Boolean!
  infra_deleteProviderSecret(secretName: String!): Boolean!
  infra_deleteVPNDevice(clusterName: String!, deviceName: String!): Boolean!
  infra_updateBYOCCluster(byocCluster: BYOCClusterIn!): BYOCCluster
  infra_updateCluster(cluster: ClusterIn!): Cluster
  infra_updateDomainEntry(domainEntry: DomainEntryIn!): DomainEntry
  infra_updateNodePool(clusterName: String!, pool: NodePoolIn!): NodePool
  infra_updateProviderSecret(secret: CloudProviderSecretIn!): CloudProviderSecret
  infra_updateVPNDevice(clusterName: String!, vpnDevice: VPNDeviceIn!): VPNDevice
  oAuth_addLogin(code: String!, provider: String!, state: String!): Boolean!
  oAuth_login(code: String!, provider: String!, state: String): Session!
}

type Node {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  creationTime: Date!
  id: String!
  kind: String!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___clusters___v1__NodeSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Kloudlite__io___pkg___types__SyncStatus!
  updateTime: Date!
}

type NodeEdge {
  cursor: String!
  node: Node!
}

input NodeIn {
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___clusters___v1__NodeSpecIn!
}

type NodePaginatedRecords {
  edges: [NodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NodePool {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: String!
  kind: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___clusters___v1__NodePoolSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Kloudlite__io___pkg___types__SyncStatus!
  updateTime: Date!
}

type NodePoolEdge {
  cursor: String!
  node: NodePool!
}

input NodePoolIn {
  displayName: String!
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___clusters___v1__NodePoolSpecIn!
}

type NodePoolPaginatedRecords {
  edges: [NodePoolEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OAuthProviderStatus {
  enabled: Boolean!
  provider: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

type Pagination {
  page: Int
  per_page: Int
}

input PaginationIn {
  page: Int
  per_page: Int
}

type PersistentVolumeClaim {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  creationTime: Date!
  id: String!
  kind: String!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: K8s__io___api___core___v1__PersistentVolumeClaimSpec
  status: K8s__io___api___core___v1__PersistentVolumeClaimStatus
  updateTime: Date!
}

type PersistentVolumeClaimEdge {
  cursor: String!
  node: PersistentVolumeClaim!
}

type PersistentVolumeClaimPaginatedRecords {
  edges: [PersistentVolumeClaimEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Project {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: String!
  kind: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__ProjectSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Kloudlite__io___pkg___types__SyncStatus!
  updateTime: Date!
}

type ProjectEdge {
  cursor: String!
  node: Project!
}

input ProjectId {
  type: ProjectIdType!
  value: String!
}

enum ProjectIdType {
  name
  targetNamespace
}

input ProjectIn {
  displayName: String!
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__ProjectSpecIn!
}

type ProjectPaginatedRecords {
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

scalar ProviderDetail

type Query {
  accounts_checkNameAvailability(name: String!): AccountsCheckNameAvailabilityOutput!
  accounts_getAccount(accountName: String!): Account
  accounts_getAccountMembership(accountName: String!): AccountMembership
  accounts_getInvitation(accountName: String!, invitationId: String!): Invitation
  accounts_listAccounts: [Account]
  accounts_listInvitations(accountName: String!): [Invitation!]
  accounts_listInvitationsForUser(onlyPending: Boolean!): [Invitation!]
  accounts_listMembershipsForAccount(accountName: String!, role: Kloudlite__io___apps___iam___types__Role): [AccountMembership!]
  accounts_listMembershipsForUser: [AccountMembership!]
  accounts_resyncAccount(accountName: String!): Boolean!
  auth_findByEmail(email: String!): User
  auth_getRemoteLogin(loginId: String!, secret: String!): RemoteLogin
  auth_listOAuthProviders: [OAuthProviderStatus!]
  auth_me: User
  core_checkNameAvailability(name: String!, namespace: String, resType: ConsoleResType!): ConsoleCheckNameAvailabilityOutput!
  core_getApp(name: String!, project: ProjectId!, scope: WorkspaceOrEnvId!): App
  core_getConfig(name: String!, project: ProjectId!, scope: WorkspaceOrEnvId!): Config
  core_getEnvironment(name: String!, project: ProjectId!): Workspace
  core_getImagePullSecret(name: String!, project: ProjectId!, scope: WorkspaceOrEnvId): ImagePullSecret
  core_getManagedResource(name: String!, project: ProjectId!, scope: WorkspaceOrEnvId!): ManagedResource
  core_getManagedService(name: String!, project: ProjectId!, scope: WorkspaceOrEnvId!): ManagedService
  core_getManagedServiceTemplate(category: String!, name: String!): Kloudlite__io___apps___console___internal___entities__MsvcTemplateEntry
  core_getProject(name: String!): Project
  core_getRouter(name: String!, project: ProjectId!, scope: WorkspaceOrEnvId!): Router
  core_getSecret(name: String!, project: ProjectId!, scope: WorkspaceOrEnvId!): Secret
  core_getWorkspace(name: String!, project: ProjectId!): Workspace
  core_listApps(pq: CursorPaginationIn, project: ProjectId!, scope: WorkspaceOrEnvId!, search: SearchApps): AppPaginatedRecords
  core_listConfigs(pq: CursorPaginationIn, project: ProjectId!, scope: WorkspaceOrEnvId!, search: SearchConfigs): ConfigPaginatedRecords
  core_listEnvironments(pq: CursorPaginationIn, project: ProjectId!, search: SearchWorkspaces): WorkspacePaginatedRecords
  core_listImagePullSecrets(pq: CursorPaginationIn, project: ProjectId!, scope: WorkspaceOrEnvId, search: SearchImagePullSecrets): ImagePullSecretPaginatedRecords
  core_listManagedResources(pq: CursorPaginationIn, project: ProjectId!, scope: WorkspaceOrEnvId!, search: SearchManagedResources): ManagedResourcePaginatedRecords
  core_listManagedServices(pq: CursorPaginationIn, project: ProjectId!, scope: WorkspaceOrEnvId!, search: SearchManagedServices): ManagedServicePaginatedRecords
  core_listManagedServiceTemplates: [MsvcTemplate!]
  core_listProjects(clusterName: String, pq: CursorPaginationIn, search: SearchProjects): ProjectPaginatedRecords
  core_listRouters(pq: CursorPaginationIn, project: ProjectId!, scope: WorkspaceOrEnvId!, search: SearchRouters): RouterPaginatedRecords
  core_listSecrets(pq: CursorPaginationIn, project: ProjectId!, scope: WorkspaceOrEnvId!, search: SearchSecrets): SecretPaginatedRecords
  core_listWorkspaces(pq: CursorPaginationIn, project: ProjectId!, search: SearchWorkspaces): WorkspacePaginatedRecords
  core_resyncApp(name: String!, project: ProjectId!, scope: WorkspaceOrEnvId!): Boolean!
  core_resyncConfig(name: String!, project: ProjectId!, scope: WorkspaceOrEnvId!): Boolean!
  core_resyncEnvironment(name: String!, project: ProjectId!): Boolean!
  core_resyncImagePullSecret(name: String!, project: ProjectId!, scope: WorkspaceOrEnvId): Boolean!
  core_resyncManagedResource(name: String!, project: ProjectId!, scope: WorkspaceOrEnvId!): Boolean!
  core_resyncManagedService(name: String!, project: ProjectId!, scope: WorkspaceOrEnvId!): Boolean!
  core_resyncProject(name: String!): Boolean!
  core_resyncRouter(name: String!, project: ProjectId!, scope: WorkspaceOrEnvId!): Boolean!
  core_resyncSecret(name: String!, project: ProjectId!, scope: WorkspaceOrEnvId!): Boolean!
  core_resyncWorkspace(name: String!, project: ProjectId!): Boolean!
  cr_checkUserNameAvailability(name: String!): CRCheckNameAvailabilityOutput!
  cr_getBuild(id: ID!): Build
  cr_getCredToken(username: String!): String!
  cr_listBuildCacheKeys(pq: CursorPaginationIn, search: SearchBuildCacheKeys): BuildCacheKeyPaginatedRecords
  cr_listBuilds(pagination: CursorPaginationIn, repoName: String!, search: SearchBuilds): BuildPaginatedRecords
  cr_listCreds(pagination: CursorPaginationIn, search: SearchCreds): CredentialPaginatedRecords
  cr_listDigests(pagination: CursorPaginationIn, repoName: String!, search: SearchRepos): DigestPaginatedRecords
  cr_listGithubBranches(pagination: PaginationIn, repoUrl: String!): [GitBranch!]
  cr_listGithubInstallations(pagination: PaginationIn): [GithubInstallation!]
  cr_listGithubRepos(installationId: Int!, pagination: PaginationIn): GithubListRepository
  cr_listGitlabBranches(pagination: PaginationIn, query: String, repoId: String!): [GitBranch!]
  cr_listGitlabGroups(pagination: PaginationIn, query: String): [GitlabGroup!]
  cr_listGitlabRepositories(groupId: String!, pagination: PaginationIn, query: String): [GitlabProject!]
  cr_listRepos(pagination: CursorPaginationIn, search: SearchRepos): RepositoryPaginatedRecords
  cr_searchGithubRepos(organization: String!, pagination: PaginationIn, search: String!): GithubSearchRepository
  infra_checkAwsAccess(cloudproviderName: String!): CheckAwsAccessOutput!
  infra_checkNameAvailability(clusterName: String, name: String!, resType: ResType!): CheckNameAvailabilityOutput!
  infra_getBuildRun(buildRunName: String!, repoName: String!): BuildRun
  infra_getBYOCCluster(name: String!): BYOCCluster
  infra_getCluster(name: String!): Cluster
  infra_getDomainEntry(domainName: String!): DomainEntry
  infra_getNodePool(clusterName: String!, poolName: String!): NodePool
  infra_getProviderSecret(name: String!): CloudProviderSecret
  infra_getPVC(clusterName: String!, name: String!): PersistentVolumeClaim
  infra_getVPNDevice(clusterName: String!, name: String!): VPNDevice
  infra_listBuildRuns(pq: CursorPaginationIn, repoName: String!, search: SearchBuildRuns): BuildRunPaginatedRecords
  infra_listBYOCClusters(pagination: CursorPaginationIn, search: SearchCluster): BYOCClusterPaginatedRecords
  infra_listClusters(pagination: CursorPaginationIn, search: SearchCluster): ClusterPaginatedRecords
  infra_listDomainEntries(pagination: CursorPaginationIn, search: SearchDomainEntry): DomainEntryPaginatedRecords
  infra_listNodePools(clusterName: String!, pagination: CursorPaginationIn, search: SearchNodepool): NodePoolPaginatedRecords
  infra_listProviderSecrets(pagination: CursorPaginationIn, search: SearchProviderSecret): CloudProviderSecretPaginatedRecords
  infra_listPVCs(clusterName: String!, pq: CursorPaginationIn, search: SearchPersistentVolumeClaims): PersistentVolumeClaimPaginatedRecords
  infra_listVPNDevices(clusterName: String, pq: CursorPaginationIn, search: SearchVPNDevices): VPNDevicePaginatedRecords
  oAuth_requestLogin(provider: String!, state: String): URL!
}

type RemoteLogin {
  authHeader: String
  status: String!
}

type Repository {
  accountName: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  id: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  name: String!
  recordVersion: Int!
  updateTime: Date!
}

type RepositoryEdge {
  cursor: String!
  node: Repository!
}

input RepositoryIn {
  name: String!
}

type RepositoryPaginatedRecords {
  edges: [RepositoryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

enum ResType {
  cluster
  nodepool
  providersecret
  vpn_device
}

type Router {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  enabled: Boolean
  id: String!
  kind: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__RouterSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Kloudlite__io___pkg___types__SyncStatus!
  updateTime: Date!
}

type RouterEdge {
  cursor: String!
  node: Router!
}

input RouterIn {
  displayName: String!
  enabled: Boolean
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__RouterSpecIn!
}

type RouterPaginatedRecords {
  edges: [RouterEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input SearchApps {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchBuildCacheKeys {
  text: MatchFilterIn
}

input SearchBuildRuns {
  text: MatchFilterIn
}

input SearchBuilds {
  text: MatchFilterIn
}

input SearchCluster {
  cloudProviderName: MatchFilterIn
  isReady: MatchFilterIn
  region: MatchFilterIn
  text: MatchFilterIn
}

input SearchConfigs {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchCreds {
  text: MatchFilterIn
}

input SearchDomainEntry {
  clusterName: MatchFilterIn
  text: MatchFilterIn
}

input SearchEnvironments {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  projectName: MatchFilterIn
  text: MatchFilterIn
}

input SearchImagePullSecrets {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchManagedResources {
  isReady: MatchFilterIn
  managedServiceName: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchManagedServices {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchNodepool {
  text: MatchFilterIn
}

input SearchPersistentVolumeClaims {
  text: MatchFilterIn
}

input SearchProjects {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchProviderSecret {
  cloudProviderName: MatchFilterIn
  text: MatchFilterIn
}

input SearchRepos {
  text: MatchFilterIn
}

input SearchRouters {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchSecrets {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchVPNDevices {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchWorkspaces {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  projectName: MatchFilterIn
  text: MatchFilterIn
}

type Secret {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  data: Map
  displayName: String!
  enabled: Boolean
  id: String!
  kind: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  stringData: Map
  syncStatus: Kloudlite__io___pkg___types__SyncStatus!
  type: K8s__io___api___core___v1__SecretType
  updateTime: Date!
}

type SecretEdge {
  cursor: String!
  node: Secret!
}

input SecretIn {
  data: Map
  displayName: String!
  enabled: Boolean
  metadata: MetadataIn
  stringData: Map
  type: K8s__io___api___core___v1__SecretType
}

type SecretPaginatedRecords {
  edges: [SecretEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Session {
  id: ID!
  loginMethod: String!
  userEmail: String!
  userId: ID!
  userVerified: Boolean!
}

scalar URL

type User {
  accountInvitations(onlyPending: Boolean!): [Invitation!]
  accounts: [AccountMembership!]
  avatar: String
  email: String!
  id: ID!
  invite: String!
  joined: Date!
  metadata: Json
  name: String!
  providerGithub: ProviderDetail
  providerGitlab: ProviderDetail
  providerGoogle: ProviderDetail
  verified: Boolean!
}

type VPNDevice {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: String!
  kind: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___wireguard___v1__DeviceSpec
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Kloudlite__io___pkg___types__SyncStatus!
  updateTime: Date!
  wireguardConfig: Kloudlite__io___pkg___types__EncodedString
}

type VPNDeviceEdge {
  cursor: String!
  node: VPNDevice!
}

input VPNDeviceIn {
  displayName: String!
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___wireguard___v1__DeviceSpecIn
}

type VPNDevicePaginatedRecords {
  edges: [VPNDeviceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Workspace {
  accountName: String!
  apiVersion: String!
  clusterName: String!
  createdBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: String!
  kind: String!
  lastUpdatedBy: Kloudlite__io___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  projectName: String!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__WorkspaceSpec
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Kloudlite__io___pkg___types__SyncStatus!
  updateTime: Date!
}

type WorkspaceEdge {
  cursor: String!
  node: Workspace!
}

input WorkspaceIn {
  displayName: String!
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__WorkspaceSpecIn
}

input WorkspaceOrEnvId {
  type: WorkspaceOrEnvIdType!
  value: String!
}

enum WorkspaceOrEnvIdType {
  environmentName
  environmentTargetNamespace
  workspaceName
  workspaceTargetNamespace
}

type WorkspacePaginatedRecords {
  edges: [WorkspaceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}
