"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type Account {
  contactEmail: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: String!
  isActive: Boolean
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  logo: String
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  targetNamespace: String
  updateTime: Date!
}

input AccountIn {
  contactEmail: String
  displayName: String!
  isActive: Boolean
  logo: String
  metadata: MetadataIn
}

type AccountMembership {
  accountName: String!
  role: Github__com___kloudlite___api___apps___iam___types__Role!
  user: User!
  userId: String!
}

input AccountMembershipIn {
  accountName: String!
  role: Github__com___kloudlite___api___apps___iam___types__Role!
  userId: String!
}

type AccountsCheckNameAvailabilityOutput {
  result: Boolean!
  suggestedNames: [String!]
}

scalar Any

type App {
  accountName: String!
  apiVersion: String
  build: Build
  ciBuildId: ID
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  enabled: Boolean
  environmentName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  projectName: String!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__AppSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type AppEdge {
  cursor: String!
  node: App!
}

input AppIn {
  apiVersion: String
  ciBuildId: ID
  displayName: String!
  enabled: Boolean
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__AppSpecIn!
}

type AppPaginatedRecords {
  edges: [AppEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Build {
  buildClusterName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  credUser: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  errorMessages: Map!
  id: ID!
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  latestBuildRun: BuildRun
  markedForDeletion: Boolean
  name: String!
  recordVersion: Int!
  source: Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__GitSource!
  spec: Github__com___kloudlite___operator___apis___distribution___v1__BuildRunSpec!
  status: Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__BuildStatus!
  updateTime: Date!
}

type BuildEdge {
  cursor: String!
  node: Build!
}

input BuildIn {
  buildClusterName: String!
  name: String!
  source: Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__GitSourceIn!
  spec: Github__com___kloudlite___operator___apis___distribution___v1__BuildRunSpecIn!
}

type BuildPaginatedRecords {
  edges: [BuildEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BuildRun {
  accountName: String!
  apiVersion: String
  buildId: ID!
  clusterName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___distribution___v1__BuildRunSpec
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type BuildRunEdge {
  cursor: String!
  node: BuildRun!
}

input BuildRunIn {
  displayName: String!
}

type BuildRunPaginatedRecords {
  edges: [BuildRunEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BYOKCluster {
  accountName: String!
  ClusterSpec: Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpec
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata!
  recordVersion: Int!
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

input BYOKClusterIn {
  displayName: String!
  metadata: MetadataIn!
}

type CheckAwsAccessOutput {
  installationUrl: String
  result: Boolean!
}

type CheckNameAvailabilityOutput {
  result: Boolean!
  suggestedNames: [String!]!
}

type CloudProviderSecret {
  accountName: String!
  aws: Github__com___kloudlite___api___apps___infra___internal___entities__AWSSecretCredentials
  cloudProviderName: Github__com___kloudlite___operator___apis___common____types__CloudProvider!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  gcp: Github__com___kloudlite___api___apps___infra___internal___entities__GCPSecretCredentials
  id: ID!
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata!
  recordVersion: Int!
  updateTime: Date!
}

type CloudProviderSecretEdge {
  cursor: String!
  node: CloudProviderSecret!
}

input CloudProviderSecretIn {
  aws: Github__com___kloudlite___api___apps___infra___internal___entities__AWSSecretCredentialsIn
  cloudProviderName: Github__com___kloudlite___operator___apis___common____types__CloudProvider!
  displayName: String!
  gcp: Github__com___kloudlite___api___apps___infra___internal___entities__GCPSecretCredentialsIn
  metadata: MetadataIn!
}

type CloudProviderSecretPaginatedRecords {
  edges: [CloudProviderSecretEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Cluster {
  accountName: String!
  adminKubeconfig: EncodedValue
  apiVersion: String
  clusterGroupName: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type ClusterEdge {
  cursor: String!
  node: Cluster!
}

type ClusterGroup {
  accountName: String!
  clusterName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  recordVersion: Int!
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type ClusterGroupEdge {
  cursor: String!
  node: ClusterGroup!
}

input ClusterGroupIn {
  displayName: String!
}

type ClusterGroupPaginatedRecords {
  edges: [ClusterGroupEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ClusterIn {
  apiVersion: String
  clusterGroupName: String
  displayName: String!
  kind: String
  metadata: MetadataIn!
  spec: Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpecIn!
}

type ClusterManagedService {
  accountName: String!
  apiVersion: String
  clusterName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__ClusterManagedServiceSpec
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type ClusterManagedServiceEdge {
  cursor: String!
  node: ClusterManagedService!
}

input ClusterManagedServiceIn {
  apiVersion: String
  displayName: String!
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__ClusterManagedServiceSpecIn
}

type ClusterManagedServicePaginatedRecords {
  edges: [ClusterManagedServiceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ClusterPaginatedRecords {
  edges: [ClusterEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Config {
  accountName: String!
  apiVersion: String
  binaryData: Map
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  data: Map
  displayName: String!
  environmentName: String!
  id: ID!
  immutable: Boolean
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  projectName: String!
  recordVersion: Int!
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type ConfigEdge {
  cursor: String!
  node: Config!
}

input ConfigIn {
  apiVersion: String
  binaryData: Map
  data: Map
  displayName: String!
  immutable: Boolean
  kind: String
  metadata: MetadataIn
}

type ConfigKeyRef {
  configName: String!
  key: String!
}

input ConfigKeyRefIn {
  configName: String!
  key: String!
}

type ConfigKeyValueRef {
  configName: String!
  key: String!
  value: String!
}

input ConfigKeyValueRefIn {
  configName: String!
  key: String!
  value: String!
}

type ConfigPaginatedRecords {
  edges: [ConfigEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ConsoleCheckNameAvailabilityOutput {
  result: Boolean!
  suggestedNames: [String!]
}

enum ConsoleResType {
  app
  config
  environment
  managed_resource
  managed_service
  project
  project_managed_service
  router
  secret
  vpn_device
}

type ConsoleVPNDevice {
  accountName: String!
  apiVersion: String
  clusterName: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  environmentName: String
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  linkedClusters: [String!]
  markedForDeletion: Boolean
  metadata: Metadata
  projectName: String
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___wireguard___v1__DeviceSpec
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
  wireguardConfig: Github__com___kloudlite___api___pkg___types__EncodedString
}

type ConsoleVPNDeviceEdge {
  cursor: String!
  node: ConsoleVPNDevice!
}

input ConsoleVPNDeviceIn {
  apiVersion: String
  clusterName: String
  displayName: String!
  environmentName: String
  kind: String
  metadata: MetadataIn
  projectName: String
  spec: Github__com___kloudlite___operator___apis___wireguard___v1__DeviceSpecIn
}

type ConsoleVPNDevicePaginatedRecords {
  edges: [ConsoleVPNDeviceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input CoreSearchVPNDevices {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

type CRCheckNameAvailabilityOutput {
  result: Boolean!
  suggestedNames: [String!]
}

type Credential {
  access: Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__RepoAccess!
  accountName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  expiration: Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__Expiration!
  id: ID!
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  name: String!
  recordVersion: Int!
  updateTime: Date!
  username: String!
}

type CredentialEdge {
  cursor: String!
  node: Credential!
}

input CredentialIn {
  access: Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__RepoAccess!
  expiration: Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__ExpirationIn!
  name: String!
  username: String!
}

type CredentialPaginatedRecords {
  edges: [CredentialEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CursorPagination {
  after: String
  before: String
  first: Int
  last: Int
  orderBy: String
  sortDirection: CursorPaginationSortDirection
}

input CursorPaginationIn {
  after: String
  before: String
  first: Int
  last: Int
  orderBy: String = "_id"
  sortDirection: CursorPaginationSortDirection
}

enum CursorPaginationSortDirection {
  ASC
  DESC
}

scalar Date

type Digest {
  accountName: String!
  actor: String!
  creationTime: Date!
  deleting: Boolean!
  digest: String!
  id: ID!
  length: Int!
  markedForDeletion: Boolean
  mediaType: String!
  recordVersion: Int!
  repository: String!
  size: Int!
  tags: [String!]!
  updateTime: Date!
  url: String!
}

type DigestEdge {
  cursor: String!
  node: Digest!
}

type DigestPaginatedRecords {
  edges: [DigestEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DomainEntry {
  accountName: String!
  clusterName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  domainName: String!
  id: ID!
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  recordVersion: Int!
  updateTime: Date!
}

type DomainEntryEdge {
  cursor: String!
  node: DomainEntry!
}

input DomainEntryIn {
  clusterName: String!
  displayName: String!
  domainName: String!
}

type DomainEntryPaginatedRecords {
  edges: [DomainEntryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type EncodedValue {
  encoding: String!
  value: String!
}

type Environment {
  accountName: String!
  apiVersion: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  projectName: String!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentSpec
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type EnvironmentEdge {
  cursor: String!
  node: Environment!
}

input EnvironmentIn {
  apiVersion: String
  displayName: String!
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentSpecIn
}

type EnvironmentPaginatedRecords {
  edges: [EnvironmentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type GitBranch {
  name: String
  protected: Boolean
}

enum Github__com___kloudlite___api___apps___console___internal___entities__PullSecretFormat {
  dockerConfigJson
  params
}

enum Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__BuildStatus {
  error
  failed
  idle
  pending
  queued
  running
  success
}

type Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__Expiration {
  unit: Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__ExpirationUnit!
  value: Int!
}

input Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__ExpirationIn {
  unit: Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__ExpirationUnit!
  value: Int!
}

enum Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__ExpirationUnit {
  d
  h
  m
  w
  y
}

type Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__GithubRepository {
  archived: Boolean
  cloneUrl: String
  createdAt: Date
  defaultBranch: String
  description: String
  disabled: Boolean
  fullName: String
  gitignoreTemplate: String
  gitUrl: String
  htmlUrl: String
  id: Int
  language: String
  masterBranch: String
  mirrorUrl: String
  name: String
  node_id: String
  permissions: Map
  private: Boolean
  pushedAt: Date
  size: Int
  team_id: Int
  updatedAt: Date
  url: String
  visibility: String
}

type Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__GithubUserAccount {
  avatarUrl: String
  id: Int
  login: String
  nodeId: String
  type: String
}

input Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__GithubUserAccountIn {
  avatarUrl: String
  id: Int
  login: String
  nodeId: String
  type: String
}

enum Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__GitProvider {
  github
  gitlab
}

type Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__GitSource {
  branch: String!
  provider: Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__GitProvider!
  repository: String!
  webhookId: Int
}

input Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__GitSourceIn {
  branch: String!
  provider: Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__GitProvider!
  repository: String!
}

enum Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__RepoAccess {
  read
  read_write
}

enum Github__com___kloudlite___api___apps___iam___types__Role {
  account_admin
  account_member
  account_owner
  project_admin
  project_member
  resource_owner
}

type Github__com___kloudlite___api___apps___infra___internal___entities__AWSAssumeRoleParams {
  awsAccountId: String!
  cfParamTrustedARN: String!
  externalID: String!
  roleARN: String!
}

input Github__com___kloudlite___api___apps___infra___internal___entities__AWSAssumeRoleParamsIn {
  awsAccountId: String!
}

type Github__com___kloudlite___api___apps___infra___internal___entities__AWSAuthSecretKeys {
  accessKey: String!
  cfParamUserName: String!
  secretKey: String!
}

input Github__com___kloudlite___api___apps___infra___internal___entities__AWSAuthSecretKeysIn {
  accessKey: String!
  secretKey: String!
}

type Github__com___kloudlite___api___apps___infra___internal___entities__AWSSecretCredentials {
  assumeRoleParams: Github__com___kloudlite___api___apps___infra___internal___entities__AWSAssumeRoleParams
  authMechanism: Github__com___kloudlite___operator___apis___clusters___v1__AwsAuthMechanism!
  authSecretKeys: Github__com___kloudlite___api___apps___infra___internal___entities__AWSAuthSecretKeys
  cfParamInstanceProfileName: String
  cfParamRoleName: String
  cfParamStackName: String
}

input Github__com___kloudlite___api___apps___infra___internal___entities__AWSSecretCredentialsIn {
  assumeRoleParams: Github__com___kloudlite___api___apps___infra___internal___entities__AWSAssumeRoleParamsIn
  authMechanism: Github__com___kloudlite___operator___apis___clusters___v1__AwsAuthMechanism!
  authSecretKeys: Github__com___kloudlite___api___apps___infra___internal___entities__AWSAuthSecretKeysIn
}

type Github__com___kloudlite___api___apps___infra___internal___entities__GCPSecretCredentials {
  serviceAccountJSON: String!
}

input Github__com___kloudlite___api___apps___infra___internal___entities__GCPSecretCredentialsIn {
  serviceAccountJSON: String!
}

type Github__com___kloudlite___api___apps___infra___internal___entities__InputField {
  defaultValue: Any
  displayUnit: String
  inputType: String!
  label: String!
  max: Float
  min: Float
  multiplier: Float
  name: String!
  required: Boolean
  unit: String
}

type Github__com___kloudlite___api___apps___infra___internal___entities__MresTemplate {
  apiVersion: String
  description: String!
  displayName: String!
  fields: [Github__com___kloudlite___api___apps___infra___internal___entities__InputField!]!
  kind: String
  name: String!
  outputs: [Github__com___kloudlite___api___apps___infra___internal___entities__OutputField!]!
}

type Github__com___kloudlite___api___apps___infra___internal___entities__MsvcTemplateEntry {
  active: Boolean!
  apiVersion: String
  description: String!
  displayName: String!
  fields: [Github__com___kloudlite___api___apps___infra___internal___entities__InputField!]!
  kind: String
  logoUrl: String!
  name: String!
  outputs: [Github__com___kloudlite___api___apps___infra___internal___entities__OutputField!]!
  resources: [Github__com___kloudlite___api___apps___infra___internal___entities__MresTemplate!]!
}

type Github__com___kloudlite___api___apps___infra___internal___entities__OutputField {
  description: String!
  label: String!
  name: String!
}

enum Github__com___kloudlite___api___apps___iot____console___internal___entities__BluePrintType {
  group_blueprint
  singleton_blueprint
}

type Github__com___kloudlite___api___apps___iot____console___internal___entities__ExposedService {
  ip: String!
  name: String!
}

input Github__com___kloudlite___api___apps___iot____console___internal___entities__ExposedServiceIn {
  ip: String!
  name: String!
}

type Github__com___kloudlite___api___common__CreatedOrUpdatedBy {
  userEmail: String!
  userId: String!
  userName: String!
}

type Github__com___kloudlite___api___pkg___types__EncodedString {
  encoding: String!
  value: String!
}

enum Github__com___kloudlite___api___pkg___types__SyncAction {
  APPLY
  DELETE
}

enum Github__com___kloudlite___api___pkg___types__SyncState {
  APPLIED_AT_AGENT
  DELETED_AT_AGENT
  DELETING_AT_AGENT
  ERRORED_AT_AGENT
  IDLE
  IN_QUEUE
  UPDATED_AT_AGENT
}

type Github__com___kloudlite___api___pkg___types__SyncStatus {
  action: Github__com___kloudlite___api___pkg___types__SyncAction!
  error: String
  lastSyncedAt: Date
  recordVersion: Int!
  state: Github__com___kloudlite___api___pkg___types__SyncState!
  syncScheduledAt: Date
}

enum Github__com___kloudlite___operator___apis___clusters___v1__AwsAuthMechanism {
  assume_role
  secret_keys
}

type Github__com___kloudlite___operator___apis___clusters___v1__AWSClusterConfig {
  credentials: Github__com___kloudlite___operator___apis___clusters___v1__AwsCredentials!
  k3sMasters: Github__com___kloudlite___operator___apis___clusters___v1__AWSK3sMastersConfig
  nodePools: Map
  region: String!
  spotNodePools: Map
  vpc: Github__com___kloudlite___operator___apis___clusters___v1__AwsVPCParams
}

input Github__com___kloudlite___operator___apis___clusters___v1__AWSClusterConfigIn {
  credentials: Github__com___kloudlite___operator___apis___clusters___v1__AwsCredentialsIn!
  k3sMasters: Github__com___kloudlite___operator___apis___clusters___v1__AWSK3sMastersConfigIn
  region: String!
}

type Github__com___kloudlite___operator___apis___clusters___v1__AwsCredentials {
  authMechanism: Github__com___kloudlite___operator___apis___clusters___v1__AwsAuthMechanism!
  secretRef: Github__com___kloudlite___operator___apis___common____types__SecretRef!
}

input Github__com___kloudlite___operator___apis___clusters___v1__AwsCredentialsIn {
  authMechanism: Github__com___kloudlite___operator___apis___clusters___v1__AwsAuthMechanism!
  secretRef: Github__com___kloudlite___operator___apis___common____types__SecretRefIn!
}

type Github__com___kloudlite___operator___apis___clusters___v1__AwsEC2PoolConfig {
  instanceType: String!
  nodes: Map
}

input Github__com___kloudlite___operator___apis___clusters___v1__AwsEC2PoolConfigIn {
  instanceType: String!
  nodes: Map
}

type Github__com___kloudlite___operator___apis___clusters___v1__AWSK3sMastersConfig {
  iamInstanceProfileRole: String
  instanceType: String!
  nodes: Map
  nvidiaGpuEnabled: Boolean!
  rootVolumeSize: Int!
  rootVolumeType: String!
}

input Github__com___kloudlite___operator___apis___clusters___v1__AWSK3sMastersConfigIn {
  instanceType: String!
  nvidiaGpuEnabled: Boolean!
}

type Github__com___kloudlite___operator___apis___clusters___v1__AWSNodePoolConfig {
  availabilityZone: String!
  ec2Pool: Github__com___kloudlite___operator___apis___clusters___v1__AwsEC2PoolConfig
  iamInstanceProfileRole: String
  nvidiaGpuEnabled: Boolean!
  poolType: Github__com___kloudlite___operator___apis___clusters___v1__AWSPoolType!
  rootVolumeSize: Int!
  rootVolumeType: String!
  spotPool: Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotPoolConfig
  vpcId: String!
  vpcSubnetId: String!
}

input Github__com___kloudlite___operator___apis___clusters___v1__AWSNodePoolConfigIn {
  availabilityZone: String!
  ec2Pool: Github__com___kloudlite___operator___apis___clusters___v1__AwsEC2PoolConfigIn
  nvidiaGpuEnabled: Boolean!
  poolType: Github__com___kloudlite___operator___apis___clusters___v1__AWSPoolType!
  spotPool: Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotPoolConfigIn
}

enum Github__com___kloudlite___operator___apis___clusters___v1__AWSPoolType {
  ec2
  spot
}

type Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotCpuNode {
  memoryPerVcpu: Github__com___kloudlite___operator___apis___common____types__MinMaxFloat
  vcpu: Github__com___kloudlite___operator___apis___common____types__MinMaxFloat!
}

input Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotCpuNodeIn {
  memoryPerVcpu: Github__com___kloudlite___operator___apis___common____types__MinMaxFloatIn
  vcpu: Github__com___kloudlite___operator___apis___common____types__MinMaxFloatIn!
}

type Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotGpuNode {
  instanceTypes: [String!]!
}

input Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotGpuNodeIn {
  instanceTypes: [String!]!
}

type Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotPoolConfig {
  cpuNode: Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotCpuNode
  gpuNode: Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotGpuNode
  nodes: Map
  spotFleetTaggingRoleName: String!
}

input Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotPoolConfigIn {
  cpuNode: Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotCpuNodeIn
  gpuNode: Github__com___kloudlite___operator___apis___clusters___v1__AwsSpotGpuNodeIn
  nodes: Map
}

type Github__com___kloudlite___operator___apis___clusters___v1__AwsSubnetWithID {
  availabilityZone: String!
  id: String!
}

type Github__com___kloudlite___operator___apis___clusters___v1__AwsVPCParams {
  id: String!
  publicSubnets: [Github__com___kloudlite___operator___apis___clusters___v1__AwsSubnetWithID!]!
}

type Github__com___kloudlite___operator___apis___clusters___v1__ClusterOutput {
  jobName: String!
  jobNamespace: String!
  keyAWSVPCId: String
  keyAWSVPCPublicSubnets: String
  keyK3sAgentJoinToken: String!
  keyK3sServerJoinToken: String!
  keyKubeconfig: String!
  secretName: String!
}

type Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpec {
  accountId: String!
  accountName: String!
  availabilityMode: Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpecAvailabilityMode!
  aws: Github__com___kloudlite___operator___apis___clusters___v1__AWSClusterConfig
  backupToS3Enabled: Boolean!
  cloudflareEnabled: Boolean
  cloudProvider: Github__com___kloudlite___operator___apis___common____types__CloudProvider!
  clusterInternalDnsHost: String
  clusterTokenRef: Github__com___kloudlite___operator___apis___common____types__SecretKeyRef
  gcp: Github__com___kloudlite___operator___apis___clusters___v1__GCPClusterConfig
  kloudliteRelease: String!
  messageQueueTopicName: String!
  output: Github__com___kloudlite___operator___apis___clusters___v1__ClusterOutput
  publicDNSHost: String!
  taintMasterNodes: Boolean!
}

enum Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpecAvailabilityMode {
  dev
  HA
}

input Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpecIn {
  availabilityMode: Github__com___kloudlite___operator___apis___clusters___v1__ClusterSpecAvailabilityMode!
  aws: Github__com___kloudlite___operator___apis___clusters___v1__AWSClusterConfigIn
  cloudflareEnabled: Boolean
  cloudProvider: Github__com___kloudlite___operator___apis___common____types__CloudProvider!
  gcp: Github__com___kloudlite___operator___apis___clusters___v1__GCPClusterConfigIn
}

type Github__com___kloudlite___operator___apis___clusters___v1__GCPClusterConfig {
  credentialsRef: Github__com___kloudlite___operator___apis___common____types__SecretRef!
  gcpProjectID: String!
  masterNodes: Github__com___kloudlite___operator___apis___clusters___v1__GCPMasterNodesConfig
  region: String!
  vpc: Github__com___kloudlite___operator___apis___clusters___v1__GcpVPCParams
}

input Github__com___kloudlite___operator___apis___clusters___v1__GCPClusterConfigIn {
  credentialsRef: Github__com___kloudlite___operator___apis___common____types__SecretRefIn!
  region: String!
}

type Github__com___kloudlite___operator___apis___clusters___v1__GCPMasterNodesConfig {
  nodes: Map
  rootVolumeSize: Int!
  rootVolumeType: String!
}

type Github__com___kloudlite___operator___apis___clusters___v1__GCPNodePoolConfig {
  availabilityZone: String!
  bootVolumeSize: Int!
  bootVolumeType: String!
  credentials: Github__com___kloudlite___operator___apis___common____types__SecretRef!
  gcpProjectID: String!
  machineType: String!
  nodes: Map
  poolType: Github__com___kloudlite___operator___apis___clusters___v1__GCPPoolType!
  region: String!
}

input Github__com___kloudlite___operator___apis___clusters___v1__GCPNodePoolConfigIn {
  availabilityZone: String!
  machineType: String!
  poolType: Github__com___kloudlite___operator___apis___clusters___v1__GCPPoolType!
}

enum Github__com___kloudlite___operator___apis___clusters___v1__GCPPoolType {
  SPOT
  STANDARD
}

type Github__com___kloudlite___operator___apis___clusters___v1__GcpVPCParams {
  name: String!
}

type Github__com___kloudlite___operator___apis___clusters___v1__MasterNodeProps {
  availabilityZone: String!
  kloudliteRelease: String!
  lastRecreatedAt: Date
  role: String!
}

type Github__com___kloudlite___operator___apis___clusters___v1__NodePoolSpec {
  aws: Github__com___kloudlite___operator___apis___clusters___v1__AWSNodePoolConfig
  cloudProvider: Github__com___kloudlite___operator___apis___common____types__CloudProvider!
  gcp: Github__com___kloudlite___operator___apis___clusters___v1__GCPNodePoolConfig
  maxCount: Int!
  minCount: Int!
  nodeLabels: Map
  nodeTaints: [K8s__io___api___core___v1__Taint!]
}

input Github__com___kloudlite___operator___apis___clusters___v1__NodePoolSpecIn {
  aws: Github__com___kloudlite___operator___apis___clusters___v1__AWSNodePoolConfigIn
  cloudProvider: Github__com___kloudlite___operator___apis___common____types__CloudProvider!
  gcp: Github__com___kloudlite___operator___apis___clusters___v1__GCPNodePoolConfigIn
  maxCount: Int!
  minCount: Int!
  nodeLabels: Map
  nodeTaints: [K8s__io___api___core___v1__TaintIn!]
}

type Github__com___kloudlite___operator___apis___clusters___v1__NodeProps {
  lastRecreatedAt: Date
}

input Github__com___kloudlite___operator___apis___clusters___v1__NodePropsIn {
  lastRecreatedAt: Date
}

type Github__com___kloudlite___operator___apis___clusters___v1__NodeSpec {
  nodepoolName: String!
}

input Github__com___kloudlite___operator___apis___clusters___v1__NodeSpecIn {
  nodepoolName: String!
}

enum Github__com___kloudlite___operator___apis___common____types__CloudProvider {
  aws
  azure
  digitalocean
  gcp
}

type Github__com___kloudlite___operator___apis___common____types__MinMaxFloat {
  max: String!
  min: String!
}

input Github__com___kloudlite___operator___apis___common____types__MinMaxFloatIn {
  max: String!
  min: String!
}

type Github__com___kloudlite___operator___apis___common____types__SecretKeyRef {
  key: String!
  name: String!
  namespace: String
}

type Github__com___kloudlite___operator___apis___common____types__SecretRef {
  name: String!
  namespace: String
}

input Github__com___kloudlite___operator___apis___common____types__SecretRefIn {
  name: String!
  namespace: String
}

type Github__com___kloudlite___operator___apis___crds___v1__AppContainer {
  args: [String!]
  command: [String!]
  env: [Github__com___kloudlite___operator___apis___crds___v1__ContainerEnv!]
  envFrom: [Github__com___kloudlite___operator___apis___crds___v1__EnvFrom!]
  image: String!
  imagePullPolicy: String
  livenessProbe: Github__com___kloudlite___operator___apis___crds___v1__Probe
  name: String!
  readinessProbe: Github__com___kloudlite___operator___apis___crds___v1__Probe
  resourceCpu: Github__com___kloudlite___operator___apis___crds___v1__ContainerResource
  resourceMemory: Github__com___kloudlite___operator___apis___crds___v1__ContainerResource
  volumes: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolume!]
}

input Github__com___kloudlite___operator___apis___crds___v1__AppContainerIn {
  args: [String!]
  command: [String!]
  env: [Github__com___kloudlite___operator___apis___crds___v1__ContainerEnvIn!]
  envFrom: [Github__com___kloudlite___operator___apis___crds___v1__EnvFromIn!]
  image: String!
  imagePullPolicy: String
  livenessProbe: Github__com___kloudlite___operator___apis___crds___v1__ProbeIn
  name: String!
  readinessProbe: Github__com___kloudlite___operator___apis___crds___v1__ProbeIn
  resourceCpu: Github__com___kloudlite___operator___apis___crds___v1__ContainerResourceIn
  resourceMemory: Github__com___kloudlite___operator___apis___crds___v1__ContainerResourceIn
  volumes: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeIn!]
}

type Github__com___kloudlite___operator___apis___crds___v1__AppSpec {
  containers: [Github__com___kloudlite___operator___apis___crds___v1__AppContainer!]!
  displayName: String
  freeze: Boolean
  hpa: Github__com___kloudlite___operator___apis___crds___v1__HPA
  intercept: Github__com___kloudlite___operator___apis___crds___v1__Intercept
  nodeSelector: Map
  region: String
  replicas: Int
  serviceAccount: String
  services: [Github__com___kloudlite___operator___apis___crds___v1__AppSvc!]
  tolerations: [K8s__io___api___core___v1__Toleration!]
  topologySpreadConstraints: [K8s__io___api___core___v1__TopologySpreadConstraint!]
}

input Github__com___kloudlite___operator___apis___crds___v1__AppSpecIn {
  containers: [Github__com___kloudlite___operator___apis___crds___v1__AppContainerIn!]!
  displayName: String
  freeze: Boolean
  hpa: Github__com___kloudlite___operator___apis___crds___v1__HPAIn
  intercept: Github__com___kloudlite___operator___apis___crds___v1__InterceptIn
  nodeSelector: Map
  region: String
  replicas: Int
  serviceAccount: String
  services: [Github__com___kloudlite___operator___apis___crds___v1__AppSvcIn!]
  tolerations: [K8s__io___api___core___v1__TolerationIn!]
  topologySpreadConstraints: [K8s__io___api___core___v1__TopologySpreadConstraintIn!]
}

type Github__com___kloudlite___operator___apis___crds___v1__AppSvc {
  name: String
  port: Int!
  targetPort: Int
  type: String
}

input Github__com___kloudlite___operator___apis___crds___v1__AppSvcIn {
  name: String
  port: Int!
  targetPort: Int
  type: String
}

type Github__com___kloudlite___operator___apis___crds___v1__BasicAuth {
  enabled: Boolean!
  secretName: String
  username: String
}

input Github__com___kloudlite___operator___apis___crds___v1__BasicAuthIn {
  enabled: Boolean!
  secretName: String
  username: String
}

type Github__com___kloudlite___operator___apis___crds___v1__ClusterManagedServiceSpec {
  msvcSpec: Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpec!
  targetNamespace: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__ClusterManagedServiceSpecIn {
  msvcSpec: Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpecIn!
  targetNamespace: String!
}

enum Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret {
  config
  pvc
  secret
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerEnv {
  key: String!
  optional: Boolean
  refKey: String
  refName: String
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret
  value: String
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerEnvIn {
  key: String!
  optional: Boolean
  refKey: String
  refName: String
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret
  value: String
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerResource {
  max: String
  min: String
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerResourceIn {
  max: String
  min: String
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerVolume {
  items: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItem!]
  mountPath: String!
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeIn {
  items: [Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItemIn!]
  mountPath: String!
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

type Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItem {
  fileName: String
  key: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__ContainerVolumeItemIn {
  fileName: String
  key: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__Cors {
  allowCredentials: Boolean
  enabled: Boolean
  origins: [String!]
}

input Github__com___kloudlite___operator___apis___crds___v1__CorsIn {
  allowCredentials: Boolean
  enabled: Boolean
  origins: [String!]
}

type Github__com___kloudlite___operator___apis___crds___v1__EnvFrom {
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

input Github__com___kloudlite___operator___apis___crds___v1__EnvFromIn {
  refName: String!
  type: Github__com___kloudlite___operator___apis___crds___v1__ConfigOrSecret!
}

type Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRouting {
  mode: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingMode
  privateIngressClass: String
  publicIngressClass: String
}

input Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingIn {
  mode: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingMode
}

enum Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingMode {
  private
  public
}

type Github__com___kloudlite___operator___apis___crds___v1__EnvironmentSpec {
  projectName: String!
  routing: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRouting
  targetNamespace: String
}

input Github__com___kloudlite___operator___apis___crds___v1__EnvironmentSpecIn {
  projectName: String!
  routing: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingIn
  targetNamespace: String
}

type Github__com___kloudlite___operator___apis___crds___v1__HelmChartSpec {
  chartName: String!
  chartRepoURL: String!
  chartVersion: String!
  jobVars: Github__com___kloudlite___operator___apis___crds___v1__JobVars
  postInstall: String
  postUninstall: String
  preInstall: String
  preUninstall: String
  releaseName: String
  values: Map!
}

input Github__com___kloudlite___operator___apis___crds___v1__HelmChartSpecIn {
  chartName: String!
  chartRepoURL: String!
  chartVersion: String!
  jobVars: Github__com___kloudlite___operator___apis___crds___v1__JobVarsIn
  postInstall: String
  postUninstall: String
  preInstall: String
  preUninstall: String
  values: Map!
}

type Github__com___kloudlite___operator___apis___crds___v1__HelmChartStatus {
  checkList: [Github__com___kloudlite___operator___pkg___operator__CheckMeta!]
  checks: Map
  isReady: Boolean!
  lastReadyGeneration: Int
  lastReconcileTime: Date
  message: Github__com___kloudlite___operator___pkg___raw____json__RawJson
  releaseNotes: String!
  releaseStatus: String!
  resources: [Github__com___kloudlite___operator___pkg___operator__ResourceRef!]
}

type Github__com___kloudlite___operator___apis___crds___v1__HPA {
  enabled: Boolean!
  maxReplicas: Int
  minReplicas: Int
  thresholdCpu: Int
  thresholdMemory: Int
}

input Github__com___kloudlite___operator___apis___crds___v1__HPAIn {
  enabled: Boolean!
  maxReplicas: Int
  minReplicas: Int
  thresholdCpu: Int
  thresholdMemory: Int
}

type Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbe {
  httpHeaders: Map
  path: String!
  port: Int!
}

input Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbeIn {
  httpHeaders: Map
  path: String!
  port: Int!
}

type Github__com___kloudlite___operator___apis___crds___v1__Https {
  clusterIssuer: String
  enabled: Boolean!
  forceRedirect: Boolean
}

input Github__com___kloudlite___operator___apis___crds___v1__HttpsIn {
  clusterIssuer: String
  enabled: Boolean!
  forceRedirect: Boolean
}

type Github__com___kloudlite___operator___apis___crds___v1__Intercept {
  enabled: Boolean!
  toDevice: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__InterceptIn {
  enabled: Boolean!
  toDevice: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__JobVars {
  affinity: K8s__io___api___core___v1__Affinity
  backOffLimit: Int
  nodeSelector: Map
  tolerations: [K8s__io___api___core___v1__Toleration!]
}

input Github__com___kloudlite___operator___apis___crds___v1__JobVarsIn {
  affinity: K8s__io___api___core___v1__AffinityIn
  backOffLimit: Int
  nodeSelector: Map
  tolerations: [K8s__io___api___core___v1__TolerationIn!]
}

type Github__com___kloudlite___operator___apis___crds___v1__ManagedResourceSpec {
  resourceNamePrefix: String
  resourceTemplate: Github__com___kloudlite___operator___apis___crds___v1__MresResourceTemplate!
}

input Github__com___kloudlite___operator___apis___crds___v1__ManagedResourceSpecIn {
  resourceNamePrefix: String
  resourceTemplate: Github__com___kloudlite___operator___apis___crds___v1__MresResourceTemplateIn!
}

type Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpec {
  nodeSelector: Map
  serviceTemplate: Github__com___kloudlite___operator___apis___crds___v1__ServiceTemplate!
  tolerations: [K8s__io___api___core___v1__Toleration!]
}

input Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpecIn {
  nodeSelector: Map
  serviceTemplate: Github__com___kloudlite___operator___apis___crds___v1__ServiceTemplateIn!
  tolerations: [K8s__io___api___core___v1__TolerationIn!]
}

type Github__com___kloudlite___operator___apis___crds___v1__MresResourceTemplate {
  apiVersion: String!
  kind: String!
  msvcRef: Github__com___kloudlite___operator___apis___crds___v1__MsvcNamedRef!
  spec: Map!
}

input Github__com___kloudlite___operator___apis___crds___v1__MresResourceTemplateIn {
  apiVersion: String!
  kind: String!
  msvcRef: Github__com___kloudlite___operator___apis___crds___v1__MsvcNamedRefIn!
  spec: Map!
}

type Github__com___kloudlite___operator___apis___crds___v1__MsvcNamedRef {
  apiVersion: String!
  kind: String!
  name: String!
  namespace: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__MsvcNamedRefIn {
  apiVersion: String!
  kind: String!
  name: String!
  namespace: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__Probe {
  failureThreshold: Int
  httpGet: Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbe
  initialDelay: Int
  interval: Int
  shell: Github__com___kloudlite___operator___apis___crds___v1__ShellProbe
  tcp: Github__com___kloudlite___operator___apis___crds___v1__TcpProbe
  type: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__ProbeIn {
  failureThreshold: Int
  httpGet: Github__com___kloudlite___operator___apis___crds___v1__HttpGetProbeIn
  initialDelay: Int
  interval: Int
  shell: Github__com___kloudlite___operator___apis___crds___v1__ShellProbeIn
  tcp: Github__com___kloudlite___operator___apis___crds___v1__TcpProbeIn
  type: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__ProjectManagedServiceSpec {
  msvcSpec: Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpec!
  targetNamespace: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__ProjectManagedServiceSpecIn {
  msvcSpec: Github__com___kloudlite___operator___apis___crds___v1__ManagedServiceSpecIn!
  targetNamespace: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__ProjectSpec {
  targetNamespace: String!
}

input Github__com___kloudlite___operator___apis___crds___v1__ProjectSpecIn {
  targetNamespace: String!
}

type Github__com___kloudlite___operator___apis___crds___v1__RateLimit {
  connections: Int
  enabled: Boolean
  rpm: Int
  rps: Int
}

input Github__com___kloudlite___operator___apis___crds___v1__RateLimitIn {
  connections: Int
  enabled: Boolean
  rpm: Int
  rps: Int
}

type Github__com___kloudlite___operator___apis___crds___v1__Route {
  app: String!
  path: String!
  port: Int!
  rewrite: Boolean
}

input Github__com___kloudlite___operator___apis___crds___v1__RouteIn {
  app: String!
  path: String!
  port: Int!
  rewrite: Boolean
}

type Github__com___kloudlite___operator___apis___crds___v1__RouterSpec {
  backendProtocol: String
  basicAuth: Github__com___kloudlite___operator___apis___crds___v1__BasicAuth
  cors: Github__com___kloudlite___operator___apis___crds___v1__Cors
  domains: [String!]!
  https: Github__com___kloudlite___operator___apis___crds___v1__Https
  ingressClass: String
  maxBodySizeInMB: Int
  rateLimit: Github__com___kloudlite___operator___apis___crds___v1__RateLimit
  routes: [Github__com___kloudlite___operator___apis___crds___v1__Route!]
}

input Github__com___kloudlite___operator___apis___crds___v1__RouterSpecIn {
  backendProtocol: String
  basicAuth: Github__com___kloudlite___operator___apis___crds___v1__BasicAuthIn
  cors: Github__com___kloudlite___operator___apis___crds___v1__CorsIn
  domains: [String!]!
  https: Github__com___kloudlite___operator___apis___crds___v1__HttpsIn
  ingressClass: String
  maxBodySizeInMB: Int
  rateLimit: Github__com___kloudlite___operator___apis___crds___v1__RateLimitIn
  routes: [Github__com___kloudlite___operator___apis___crds___v1__RouteIn!]
}

type Github__com___kloudlite___operator___apis___crds___v1__ServiceTemplate {
  apiVersion: String!
  kind: String!
  spec: Map!
}

input Github__com___kloudlite___operator___apis___crds___v1__ServiceTemplateIn {
  apiVersion: String!
  kind: String!
  spec: Map!
}

type Github__com___kloudlite___operator___apis___crds___v1__ShellProbe {
  command: [String!]
}

input Github__com___kloudlite___operator___apis___crds___v1__ShellProbeIn {
  command: [String!]
}

type Github__com___kloudlite___operator___apis___crds___v1__TcpProbe {
  port: Int!
}

input Github__com___kloudlite___operator___apis___crds___v1__TcpProbeIn {
  port: Int!
}

type Github__com___kloudlite___operator___apis___distribution___v1__BuildOptions {
  buildArgs: Map
  buildContexts: Map
  contextDir: String
  dockerfileContent: String
  dockerfilePath: String
  targetPlatforms: [String!]
}

input Github__com___kloudlite___operator___apis___distribution___v1__BuildOptionsIn {
  buildArgs: Map
  buildContexts: Map
  contextDir: String
  dockerfileContent: String
  dockerfilePath: String
  targetPlatforms: [String!]
}

type Github__com___kloudlite___operator___apis___distribution___v1__BuildRunSpec {
  accountName: String!
  buildOptions: Github__com___kloudlite___operator___apis___distribution___v1__BuildOptions
  caches: [Github__com___kloudlite___operator___apis___distribution___v1__Cache!]
  registry: Github__com___kloudlite___operator___apis___distribution___v1__Registry!
  resource: Github__com___kloudlite___operator___apis___distribution___v1__Resource!
}

input Github__com___kloudlite___operator___apis___distribution___v1__BuildRunSpecIn {
  buildOptions: Github__com___kloudlite___operator___apis___distribution___v1__BuildOptionsIn
  caches: [Github__com___kloudlite___operator___apis___distribution___v1__CacheIn!]
  registry: Github__com___kloudlite___operator___apis___distribution___v1__RegistryIn!
  resource: Github__com___kloudlite___operator___apis___distribution___v1__ResourceIn!
}

type Github__com___kloudlite___operator___apis___distribution___v1__Cache {
  name: String!
  path: String!
}

input Github__com___kloudlite___operator___apis___distribution___v1__CacheIn {
  name: String!
  path: String!
}

type Github__com___kloudlite___operator___apis___distribution___v1__Registry {
  repo: Github__com___kloudlite___operator___apis___distribution___v1__Repo!
}

input Github__com___kloudlite___operator___apis___distribution___v1__RegistryIn {
  repo: Github__com___kloudlite___operator___apis___distribution___v1__RepoIn!
}

type Github__com___kloudlite___operator___apis___distribution___v1__Repo {
  name: String!
  tags: [String!]!
}

input Github__com___kloudlite___operator___apis___distribution___v1__RepoIn {
  name: String!
  tags: [String!]!
}

type Github__com___kloudlite___operator___apis___distribution___v1__Resource {
  cpu: Int!
  memoryInMb: Int!
}

input Github__com___kloudlite___operator___apis___distribution___v1__ResourceIn {
  cpu: Int!
  memoryInMb: Int!
}

type Github__com___kloudlite___operator___apis___wireguard___v1__CNameRecord {
  host: String
  target: String
}

input Github__com___kloudlite___operator___apis___wireguard___v1__CNameRecordIn {
  host: String
  target: String
}

type Github__com___kloudlite___operator___apis___wireguard___v1__DeviceSpec {
  activeNamespace: String
  cnameRecords: [Github__com___kloudlite___operator___apis___wireguard___v1__CNameRecord!]
  disabled: Boolean
  nodeSelector: Map
  noExternalService: Boolean
  ports: [Github__com___kloudlite___operator___apis___wireguard___v1__Port!]
}

input Github__com___kloudlite___operator___apis___wireguard___v1__DeviceSpecIn {
  activeNamespace: String
  cnameRecords: [Github__com___kloudlite___operator___apis___wireguard___v1__CNameRecordIn!]
  ports: [Github__com___kloudlite___operator___apis___wireguard___v1__PortIn!]
}

type Github__com___kloudlite___operator___apis___wireguard___v1__Port {
  port: Int
  targetPort: Int
}

input Github__com___kloudlite___operator___apis___wireguard___v1__PortIn {
  port: Int
  targetPort: Int
}

type Github__com___kloudlite___operator___pkg___operator__Check {
  debug: String
  error: String
  generation: Int
  info: String
  message: String
  startedAt: Date
  state: Github__com___kloudlite___operator___pkg___operator__State
  status: Boolean!
}

input Github__com___kloudlite___operator___pkg___operator__CheckIn {
  debug: String
  error: String
  generation: Int
  info: String
  message: String
  startedAt: Date
  state: Github__com___kloudlite___operator___pkg___operator__State
  status: Boolean!
}

type Github__com___kloudlite___operator___pkg___operator__CheckMeta {
  debug: Boolean
  description: String
  name: String!
  title: String!
}

input Github__com___kloudlite___operator___pkg___operator__CheckMetaIn {
  debug: Boolean
  description: String
  name: String!
  title: String!
}

type Github__com___kloudlite___operator___pkg___operator__ResourceRef {
  apiVersion: String!
  kind: String!
  name: String!
  namespace: String!
}

input Github__com___kloudlite___operator___pkg___operator__ResourceRefIn {
  apiVersion: String!
  kind: String!
  name: String!
  namespace: String!
}

enum Github__com___kloudlite___operator___pkg___operator__State {
  errored____during____reconcilation
  finished____reconcilation
  under____reconcilation
  yet____to____be____reconciled
}

type Github__com___kloudlite___operator___pkg___operator__Status {
  checkList: [Github__com___kloudlite___operator___pkg___operator__CheckMeta!]
  checks: Map
  isReady: Boolean!
  lastReadyGeneration: Int
  lastReconcileTime: Date
  message: Github__com___kloudlite___operator___pkg___raw____json__RawJson
  resources: [Github__com___kloudlite___operator___pkg___operator__ResourceRef!]
}

input Github__com___kloudlite___operator___pkg___operator__StatusIn {
  checkList: [Github__com___kloudlite___operator___pkg___operator__CheckMetaIn!]
  checks: Map
  isReady: Boolean!
  lastReadyGeneration: Int
  lastReconcileTime: Date
  message: Github__com___kloudlite___operator___pkg___raw____json__RawJsonIn
  resources: [Github__com___kloudlite___operator___pkg___operator__ResourceRefIn!]
}

type Github__com___kloudlite___operator___pkg___raw____json__RawJson {
  RawMessage: Any
}

input Github__com___kloudlite___operator___pkg___raw____json__RawJsonIn {
  RawMessage: Any
}

type GithubBranch {
  name: String
  protected: Boolean
}

type GithubInstallation {
  account: Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__GithubUserAccount
  appId: Int
  id: Int
  nodeId: String
  repositoriesUrl: String
  targetId: Int
  targetType: String
}

type GithubListRepository {
  repositories: [Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__GithubRepository]!
  totalCount: Int
}

type GithubSearchRepository {
  incompleteResults: Boolean
  repositories: [Github__com___kloudlite___api___apps___container____registry___internal___domain___entities__GithubRepository]!
  total: Int
}

type GitlabBranch {
  canPush: Boolean!
  default: Boolean!
  developersCanMerge: Boolean!
  developersCanPush: Boolean!
  merged: Boolean!
  name: String!
  protected: Boolean!
  webUrl: String!
}

type GitlabGroup {
  avatarUrl: String!
  fullName: String!
  id: String!
}

type GitlabProject {
  archived: Boolean!
  avatarUrl: String!
  createdAt: Date
  creatorId: Int!
  defaultBranch: String!
  description: String!
  emptyRepo: Boolean!
  httpUrlToRepo: String!
  id: Int!
  lastActivityAt: Date
  name: String!
  nameWithNamespace: String!
  path: String!
  pathWithNamespace: String!
  public: Boolean!
  sshUrlToRepo: String!
  tagList: [String!]!
  topics: [String!]!
  webUrl: String!
}

type HelmRelease {
  accountName: String!
  apiVersion: String
  clusterName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__HelmChartSpec
  status: Github__com___kloudlite___operator___apis___crds___v1__HelmChartStatus
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type HelmReleaseEdge {
  cursor: String!
  node: HelmRelease!
}

input HelmReleaseIn {
  apiVersion: String
  displayName: String!
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__HelmChartSpecIn
}

type HelmReleasePaginatedRecords {
  edges: [HelmReleaseEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ImagePullSecret {
  accountName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  dockerConfigJson: String
  environmentName: String!
  format: Github__com___kloudlite___api___apps___console___internal___entities__PullSecretFormat!
  id: ID!
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata!
  projectName: String!
  recordVersion: Int!
  registryPassword: String
  registryURL: String
  registryUsername: String
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type ImagePullSecretEdge {
  cursor: String!
  node: ImagePullSecret!
}

input ImagePullSecretIn {
  displayName: String!
  dockerConfigJson: String
  format: Github__com___kloudlite___api___apps___console___internal___entities__PullSecretFormat!
  metadata: MetadataIn!
  registryPassword: String
  registryURL: String
  registryUsername: String
}

type ImagePullSecretPaginatedRecords {
  edges: [ImagePullSecretEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Invitation {
  accepted: Boolean
  accountName: String!
  creationTime: Date!
  id: String!
  invitedBy: String!
  inviteToken: String!
  markedForDeletion: Boolean
  recordVersion: Int!
  rejected: Boolean
  updateTime: Date!
  userEmail: String
  userName: String
  userRole: Github__com___kloudlite___api___apps___iam___types__Role!
}

input InvitationIn {
  userEmail: String
  userName: String
  userRole: Github__com___kloudlite___api___apps___iam___types__Role!
}

type IOTApp {
  accountName: String!
  apiVersion: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  deviceBlueprintName: String!
  displayName: String!
  enabled: Boolean
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  projectName: String!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__AppSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  updateTime: Date!
}

type IOTAppEdge {
  cursor: String!
  node: IOTApp!
}

input IOTAppIn {
  apiVersion: String
  displayName: String!
  enabled: Boolean
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__AppSpecIn!
}

type IOTAppPaginatedRecords {
  edges: [IOTAppEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type IOTConsoleCheckNameAvailabilityOutput {
  result: Boolean!
  suggestedNames: [String!]!
}

type IOTDeployment {
  accountName: String!
  CIDR: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  exposedDomains: [String!]!
  exposedIps: [String!]!
  exposedServices: [Github__com___kloudlite___api___apps___iot____console___internal___entities__ExposedService!]!
  id: ID!
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  name: String!
  projectName: String!
  recordVersion: Int!
  updateTime: Date!
}

type IOTDeploymentEdge {
  cursor: String!
  node: IOTDeployment!
}

input IOTDeploymentIn {
  CIDR: String!
  displayName: String!
  exposedDomains: [String!]!
  exposedIps: [String!]!
  exposedServices: [Github__com___kloudlite___api___apps___iot____console___internal___entities__ExposedServiceIn!]!
  name: String!
}

type IOTDeploymentPaginatedRecords {
  edges: [IOTDeploymentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type IOTDevice {
  accountName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  deploymentName: String!
  displayName: String!
  id: ID!
  ip: String!
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  name: String!
  podCIDR: String!
  projectName: String!
  publicKey: String!
  recordVersion: Int!
  serviceCIDR: String!
  updateTime: Date!
  version: String!
}

type IOTDeviceBlueprint {
  accountName: String!
  bluePrintType: Github__com___kloudlite___api___apps___iot____console___internal___entities__BluePrintType!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  name: String!
  projectName: String!
  recordVersion: Int!
  updateTime: Date!
  version: String!
}

type IOTDeviceBlueprintEdge {
  cursor: String!
  node: IOTDeviceBlueprint!
}

input IOTDeviceBlueprintIn {
  bluePrintType: Github__com___kloudlite___api___apps___iot____console___internal___entities__BluePrintType!
  displayName: String!
  name: String!
  version: String!
}

type IOTDeviceBlueprintPaginatedRecords {
  edges: [IOTDeviceBlueprintEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type IOTDeviceEdge {
  cursor: String!
  node: IOTDevice!
}

input IOTDeviceIn {
  displayName: String!
  ip: String!
  name: String!
  podCIDR: String!
  publicKey: String!
  serviceCIDR: String!
  version: String!
}

type IOTDevicePaginatedRecords {
  edges: [IOTDeviceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type IOTEnvironment {
  accountName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  name: String!
  projectName: String!
  recordVersion: Int!
  updateTime: Date!
}

type IOTEnvironmentEdge {
  cursor: String!
  node: IOTEnvironment!
}

input IOTEnvironmentIn {
  displayName: String!
  name: String!
}

type IOTEnvironmentPaginatedRecords {
  edges: [IOTEnvironmentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type IOTProject {
  accountName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  name: String!
  recordVersion: Int!
  updateTime: Date!
}

type IOTProjectEdge {
  cursor: String!
  node: IOTProject!
}

input IOTProjectIn {
  displayName: String!
  name: String!
}

type IOTProjectPaginatedRecords {
  edges: [IOTProjectEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

scalar Json

type K8s__io___api___core___v1__Affinity {
  nodeAffinity: K8s__io___api___core___v1__NodeAffinity
  podAffinity: K8s__io___api___core___v1__PodAffinity
  podAntiAffinity: K8s__io___api___core___v1__PodAntiAffinity
}

input K8s__io___api___core___v1__AffinityIn {
  nodeAffinity: K8s__io___api___core___v1__NodeAffinityIn
  podAffinity: K8s__io___api___core___v1__PodAffinityIn
  podAntiAffinity: K8s__io___api___core___v1__PodAntiAffinityIn
}

type K8s__io___api___core___v1__AWSElasticBlockStoreVolumeSource {
  fsType: String
  partition: Int
  readOnly: Boolean
  volumeID: String!
}

input K8s__io___api___core___v1__AWSElasticBlockStoreVolumeSourceIn {
  fsType: String
  partition: Int
  readOnly: Boolean
  volumeID: String!
}

type K8s__io___api___core___v1__AzureDiskVolumeSource {
  cachingMode: String
  diskName: String!
  diskURI: String!
  fsType: String
  kind: String
  readOnly: Boolean
}

input K8s__io___api___core___v1__AzureDiskVolumeSourceIn {
  cachingMode: String
  diskName: String!
  diskURI: String!
  fsType: String
  kind: String
  readOnly: Boolean
}

type K8s__io___api___core___v1__AzureFilePersistentVolumeSource {
  readOnly: Boolean
  secretName: String!
  secretNamespace: String
  shareName: String!
}

input K8s__io___api___core___v1__AzureFilePersistentVolumeSourceIn {
  readOnly: Boolean
  secretName: String!
  secretNamespace: String
  shareName: String!
}

type K8s__io___api___core___v1__CephFSPersistentVolumeSource {
  monitors: [String!]!
  path: String
  readOnly: Boolean
  secretFile: String
  secretRef: K8s__io___api___core___v1__SecretReference
  user: String
}

input K8s__io___api___core___v1__CephFSPersistentVolumeSourceIn {
  monitors: [String!]!
  path: String
  readOnly: Boolean
  secretFile: String
  secretRef: K8s__io___api___core___v1__SecretReferenceIn
  user: String
}

type K8s__io___api___core___v1__CinderPersistentVolumeSource {
  fsType: String
  readOnly: Boolean
  secretRef: K8s__io___api___core___v1__SecretReference
  volumeID: String!
}

input K8s__io___api___core___v1__CinderPersistentVolumeSourceIn {
  fsType: String
  readOnly: Boolean
  secretRef: K8s__io___api___core___v1__SecretReferenceIn
  volumeID: String!
}

enum K8s__io___api___core___v1__ConditionStatus {
  False
  True
  Unknown
}

type K8s__io___api___core___v1__CSIPersistentVolumeSource {
  controllerExpandSecretRef: K8s__io___api___core___v1__SecretReference
  controllerPublishSecretRef: K8s__io___api___core___v1__SecretReference
  driver: String!
  fsType: String
  nodeExpandSecretRef: K8s__io___api___core___v1__SecretReference
  nodePublishSecretRef: K8s__io___api___core___v1__SecretReference
  nodeStageSecretRef: K8s__io___api___core___v1__SecretReference
  readOnly: Boolean
  volumeAttributes: Map
  volumeHandle: String!
}

input K8s__io___api___core___v1__CSIPersistentVolumeSourceIn {
  controllerExpandSecretRef: K8s__io___api___core___v1__SecretReferenceIn
  controllerPublishSecretRef: K8s__io___api___core___v1__SecretReferenceIn
  driver: String!
  fsType: String
  nodeExpandSecretRef: K8s__io___api___core___v1__SecretReferenceIn
  nodePublishSecretRef: K8s__io___api___core___v1__SecretReferenceIn
  nodeStageSecretRef: K8s__io___api___core___v1__SecretReferenceIn
  readOnly: Boolean
  volumeAttributes: Map
  volumeHandle: String!
}

type K8s__io___api___core___v1__FCVolumeSource {
  fsType: String
  lun: Int
  readOnly: Boolean
  targetWWNs: [String!]
  wwids: [String!]
}

input K8s__io___api___core___v1__FCVolumeSourceIn {
  fsType: String
  lun: Int
  readOnly: Boolean
  targetWWNs: [String!]
  wwids: [String!]
}

type K8s__io___api___core___v1__FlexPersistentVolumeSource {
  driver: String!
  fsType: String
  options: Map
  readOnly: Boolean
  secretRef: K8s__io___api___core___v1__SecretReference
}

input K8s__io___api___core___v1__FlexPersistentVolumeSourceIn {
  driver: String!
  fsType: String
  options: Map
  readOnly: Boolean
  secretRef: K8s__io___api___core___v1__SecretReferenceIn
}

type K8s__io___api___core___v1__FlockerVolumeSource {
  datasetName: String
  datasetUUID: String
}

input K8s__io___api___core___v1__FlockerVolumeSourceIn {
  datasetName: String
  datasetUUID: String
}

type K8s__io___api___core___v1__GCEPersistentDiskVolumeSource {
  fsType: String
  partition: Int
  pdName: String!
  readOnly: Boolean
}

input K8s__io___api___core___v1__GCEPersistentDiskVolumeSourceIn {
  fsType: String
  partition: Int
  pdName: String!
  readOnly: Boolean
}

type K8s__io___api___core___v1__GlusterfsPersistentVolumeSource {
  endpoints: String!
  endpointsNamespace: String
  path: String!
  readOnly: Boolean
}

input K8s__io___api___core___v1__GlusterfsPersistentVolumeSourceIn {
  endpoints: String!
  endpointsNamespace: String
  path: String!
  readOnly: Boolean
}

type K8s__io___api___core___v1__HostPathVolumeSource {
  path: String!
  type: String
}

input K8s__io___api___core___v1__HostPathVolumeSourceIn {
  path: String!
  type: String
}

type K8s__io___api___core___v1__ISCSIPersistentVolumeSource {
  chapAuthDiscovery: Boolean
  chapAuthSession: Boolean
  fsType: String
  initiatorName: String
  iqn: String!
  iscsiInterface: String
  lun: Int!
  portals: [String!]
  readOnly: Boolean
  secretRef: K8s__io___api___core___v1__SecretReference
  targetPortal: String!
}

input K8s__io___api___core___v1__ISCSIPersistentVolumeSourceIn {
  chapAuthDiscovery: Boolean
  chapAuthSession: Boolean
  fsType: String
  initiatorName: String
  iqn: String!
  iscsiInterface: String
  lun: Int!
  portals: [String!]
  readOnly: Boolean
  secretRef: K8s__io___api___core___v1__SecretReferenceIn
  targetPortal: String!
}

type K8s__io___api___core___v1__LocalVolumeSource {
  fsType: String
  path: String!
}

input K8s__io___api___core___v1__LocalVolumeSourceIn {
  fsType: String
  path: String!
}

type K8s__io___api___core___v1__NamespaceCondition {
  lastTransitionTime: Date
  message: String
  reason: String
  status: K8s__io___api___core___v1__ConditionStatus!
  type: K8s__io___api___core___v1__NamespaceConditionType!
}

input K8s__io___api___core___v1__NamespaceConditionIn {
  lastTransitionTime: Date
  message: String
  reason: String
  status: K8s__io___api___core___v1__ConditionStatus!
  type: K8s__io___api___core___v1__NamespaceConditionType!
}

enum K8s__io___api___core___v1__NamespaceConditionType {
  NamespaceContentRemaining
  NamespaceDeletionContentFailure
  NamespaceDeletionDiscoveryFailure
  NamespaceDeletionGroupVersionParsingFailure
  NamespaceFinalizersRemaining
}

enum K8s__io___api___core___v1__NamespacePhase {
  Active
  Terminating
}

type K8s__io___api___core___v1__NamespaceSpec {
  finalizers: [String!]
}

input K8s__io___api___core___v1__NamespaceSpecIn {
  finalizers: [String!]
}

type K8s__io___api___core___v1__NamespaceStatus {
  conditions: [K8s__io___api___core___v1__NamespaceCondition!]
  phase: K8s__io___api___core___v1__NamespacePhase
}

input K8s__io___api___core___v1__NamespaceStatusIn {
  conditions: [K8s__io___api___core___v1__NamespaceConditionIn!]
  phase: K8s__io___api___core___v1__NamespacePhase
}

type K8s__io___api___core___v1__NFSVolumeSource {
  path: String!
  readOnly: Boolean
  server: String!
}

input K8s__io___api___core___v1__NFSVolumeSourceIn {
  path: String!
  readOnly: Boolean
  server: String!
}

type K8s__io___api___core___v1__NodeAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__PreferredSchedulingTerm!]
  requiredDuringSchedulingIgnoredDuringExecution: K8s__io___api___core___v1__NodeSelector
}

input K8s__io___api___core___v1__NodeAffinityIn {
  preferredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__PreferredSchedulingTermIn!]
  requiredDuringSchedulingIgnoredDuringExecution: K8s__io___api___core___v1__NodeSelectorIn
}

type K8s__io___api___core___v1__NodeSelector {
  nodeSelectorTerms: [K8s__io___api___core___v1__NodeSelectorTerm!]!
}

input K8s__io___api___core___v1__NodeSelectorIn {
  nodeSelectorTerms: [K8s__io___api___core___v1__NodeSelectorTermIn!]!
}

enum K8s__io___api___core___v1__NodeSelectorOperator {
  DoesNotExist
  Exists
  Gt
  In
  Lt
  NotIn
}

type K8s__io___api___core___v1__NodeSelectorRequirement {
  key: String!
  operator: K8s__io___api___core___v1__NodeSelectorOperator!
  values: [String!]
}

input K8s__io___api___core___v1__NodeSelectorRequirementIn {
  key: String!
  operator: K8s__io___api___core___v1__NodeSelectorOperator!
  values: [String!]
}

type K8s__io___api___core___v1__NodeSelectorTerm {
  matchExpressions: [K8s__io___api___core___v1__NodeSelectorRequirement!]
  matchFields: [K8s__io___api___core___v1__NodeSelectorRequirement!]
}

input K8s__io___api___core___v1__NodeSelectorTermIn {
  matchExpressions: [K8s__io___api___core___v1__NodeSelectorRequirementIn!]
  matchFields: [K8s__io___api___core___v1__NodeSelectorRequirementIn!]
}

type K8s__io___api___core___v1__ObjectReference {
  apiVersion: String
  fieldPath: String
  kind: String
  name: String
  namespace: String
  resourceVersion: String
  uid: String
}

input K8s__io___api___core___v1__ObjectReferenceIn {
  apiVersion: String
  fieldPath: String
  kind: String
  name: String
  namespace: String
  resourceVersion: String
  uid: String
}

type K8s__io___api___core___v1__PersistentVolumeClaimCondition {
  lastProbeTime: Date
  lastTransitionTime: Date
  message: String
  reason: String
  status: K8s__io___api___core___v1__ConditionStatus!
  type: K8s__io___api___core___v1__PersistentVolumeClaimConditionType!
}

input K8s__io___api___core___v1__PersistentVolumeClaimConditionIn {
  lastProbeTime: Date
  lastTransitionTime: Date
  message: String
  reason: String
  status: K8s__io___api___core___v1__ConditionStatus!
  type: K8s__io___api___core___v1__PersistentVolumeClaimConditionType!
}

enum K8s__io___api___core___v1__PersistentVolumeClaimConditionType {
  FileSystemResizePending
  Resizing
}

enum K8s__io___api___core___v1__PersistentVolumeClaimPhase {
  Bound
  Lost
  Pending
}

type K8s__io___api___core___v1__PersistentVolumeClaimSpec {
  accessModes: [String!]
  dataSource: K8s__io___api___core___v1__TypedLocalObjectReference
  dataSourceRef: K8s__io___api___core___v1__TypedObjectReference
  resources: K8s__io___api___core___v1__ResourceRequirements
  selector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelector
  storageClassName: String
  volumeMode: String
  volumeName: String
}

input K8s__io___api___core___v1__PersistentVolumeClaimSpecIn {
  accessModes: [String!]
  dataSource: K8s__io___api___core___v1__TypedLocalObjectReferenceIn
  dataSourceRef: K8s__io___api___core___v1__TypedObjectReferenceIn
  resources: K8s__io___api___core___v1__ResourceRequirementsIn
  selector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorIn
  storageClassName: String
  volumeMode: String
  volumeName: String
}

type K8s__io___api___core___v1__PersistentVolumeClaimStatus {
  accessModes: [String!]
  allocatedResources: Map
  allocatedResourceStatuses: Map
  capacity: Map
  conditions: [K8s__io___api___core___v1__PersistentVolumeClaimCondition!]
  phase: K8s__io___api___core___v1__PersistentVolumeClaimPhase
}

input K8s__io___api___core___v1__PersistentVolumeClaimStatusIn {
  accessModes: [String!]
  allocatedResources: Map
  allocatedResourceStatuses: Map
  capacity: Map
  conditions: [K8s__io___api___core___v1__PersistentVolumeClaimConditionIn!]
  phase: K8s__io___api___core___v1__PersistentVolumeClaimPhase
}

enum K8s__io___api___core___v1__PersistentVolumePhase {
  Available
  Bound
  Failed
  Pending
  Released
}

enum K8s__io___api___core___v1__PersistentVolumeReclaimPolicy {
  Delete
  Recycle
  Retain
}

type K8s__io___api___core___v1__PersistentVolumeSpec {
  accessModes: [String!]
  awsElasticBlockStore: K8s__io___api___core___v1__AWSElasticBlockStoreVolumeSource
  azureDisk: K8s__io___api___core___v1__AzureDiskVolumeSource
  azureFile: K8s__io___api___core___v1__AzureFilePersistentVolumeSource
  capacity: Map
  cephfs: K8s__io___api___core___v1__CephFSPersistentVolumeSource
  cinder: K8s__io___api___core___v1__CinderPersistentVolumeSource
  claimRef: K8s__io___api___core___v1__ObjectReference
  csi: K8s__io___api___core___v1__CSIPersistentVolumeSource
  fc: K8s__io___api___core___v1__FCVolumeSource
  flexVolume: K8s__io___api___core___v1__FlexPersistentVolumeSource
  flocker: K8s__io___api___core___v1__FlockerVolumeSource
  gcePersistentDisk: K8s__io___api___core___v1__GCEPersistentDiskVolumeSource
  glusterfs: K8s__io___api___core___v1__GlusterfsPersistentVolumeSource
  hostPath: K8s__io___api___core___v1__HostPathVolumeSource
  iscsi: K8s__io___api___core___v1__ISCSIPersistentVolumeSource
  local: K8s__io___api___core___v1__LocalVolumeSource
  mountOptions: [String!]
  nfs: K8s__io___api___core___v1__NFSVolumeSource
  nodeAffinity: K8s__io___api___core___v1__VolumeNodeAffinity
  persistentVolumeReclaimPolicy: K8s__io___api___core___v1__PersistentVolumeReclaimPolicy
  photonPersistentDisk: K8s__io___api___core___v1__PhotonPersistentDiskVolumeSource
  portworxVolume: K8s__io___api___core___v1__PortworxVolumeSource
  quobyte: K8s__io___api___core___v1__QuobyteVolumeSource
  rbd: K8s__io___api___core___v1__RBDPersistentVolumeSource
  scaleIO: K8s__io___api___core___v1__ScaleIOPersistentVolumeSource
  storageClassName: String
  storageos: K8s__io___api___core___v1__StorageOSPersistentVolumeSource
  volumeMode: String
  vsphereVolume: K8s__io___api___core___v1__VsphereVirtualDiskVolumeSource
}

input K8s__io___api___core___v1__PersistentVolumeSpecIn {
  accessModes: [String!]
  awsElasticBlockStore: K8s__io___api___core___v1__AWSElasticBlockStoreVolumeSourceIn
  azureDisk: K8s__io___api___core___v1__AzureDiskVolumeSourceIn
  azureFile: K8s__io___api___core___v1__AzureFilePersistentVolumeSourceIn
  capacity: Map
  cephfs: K8s__io___api___core___v1__CephFSPersistentVolumeSourceIn
  cinder: K8s__io___api___core___v1__CinderPersistentVolumeSourceIn
  claimRef: K8s__io___api___core___v1__ObjectReferenceIn
  csi: K8s__io___api___core___v1__CSIPersistentVolumeSourceIn
  fc: K8s__io___api___core___v1__FCVolumeSourceIn
  flexVolume: K8s__io___api___core___v1__FlexPersistentVolumeSourceIn
  flocker: K8s__io___api___core___v1__FlockerVolumeSourceIn
  gcePersistentDisk: K8s__io___api___core___v1__GCEPersistentDiskVolumeSourceIn
  glusterfs: K8s__io___api___core___v1__GlusterfsPersistentVolumeSourceIn
  hostPath: K8s__io___api___core___v1__HostPathVolumeSourceIn
  iscsi: K8s__io___api___core___v1__ISCSIPersistentVolumeSourceIn
  local: K8s__io___api___core___v1__LocalVolumeSourceIn
  mountOptions: [String!]
  nfs: K8s__io___api___core___v1__NFSVolumeSourceIn
  nodeAffinity: K8s__io___api___core___v1__VolumeNodeAffinityIn
  persistentVolumeReclaimPolicy: K8s__io___api___core___v1__PersistentVolumeReclaimPolicy
  photonPersistentDisk: K8s__io___api___core___v1__PhotonPersistentDiskVolumeSourceIn
  portworxVolume: K8s__io___api___core___v1__PortworxVolumeSourceIn
  quobyte: K8s__io___api___core___v1__QuobyteVolumeSourceIn
  rbd: K8s__io___api___core___v1__RBDPersistentVolumeSourceIn
  scaleIO: K8s__io___api___core___v1__ScaleIOPersistentVolumeSourceIn
  storageClassName: String
  storageos: K8s__io___api___core___v1__StorageOSPersistentVolumeSourceIn
  volumeMode: String
  vsphereVolume: K8s__io___api___core___v1__VsphereVirtualDiskVolumeSourceIn
}

type K8s__io___api___core___v1__PersistentVolumeStatus {
  lastPhaseTransitionTime: Date
  message: String
  phase: K8s__io___api___core___v1__PersistentVolumePhase
  reason: String
}

input K8s__io___api___core___v1__PersistentVolumeStatusIn {
  lastPhaseTransitionTime: Date
  message: String
  phase: K8s__io___api___core___v1__PersistentVolumePhase
  reason: String
}

type K8s__io___api___core___v1__PhotonPersistentDiskVolumeSource {
  fsType: String
  pdID: String!
}

input K8s__io___api___core___v1__PhotonPersistentDiskVolumeSourceIn {
  fsType: String
  pdID: String!
}

type K8s__io___api___core___v1__PodAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__WeightedPodAffinityTerm!]
  requiredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__PodAffinityTerm!]
}

input K8s__io___api___core___v1__PodAffinityIn {
  preferredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__WeightedPodAffinityTermIn!]
  requiredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__PodAffinityTermIn!]
}

type K8s__io___api___core___v1__PodAffinityTerm {
  labelSelector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelector
  namespaces: [String!]
  namespaceSelector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelector
  topologyKey: String!
}

input K8s__io___api___core___v1__PodAffinityTermIn {
  labelSelector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorIn
  namespaces: [String!]
  namespaceSelector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorIn
  topologyKey: String!
}

type K8s__io___api___core___v1__PodAntiAffinity {
  preferredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__WeightedPodAffinityTerm!]
  requiredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__PodAffinityTerm!]
}

input K8s__io___api___core___v1__PodAntiAffinityIn {
  preferredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__WeightedPodAffinityTermIn!]
  requiredDuringSchedulingIgnoredDuringExecution: [K8s__io___api___core___v1__PodAffinityTermIn!]
}

type K8s__io___api___core___v1__PortworxVolumeSource {
  fsType: String
  readOnly: Boolean
  volumeID: String!
}

input K8s__io___api___core___v1__PortworxVolumeSourceIn {
  fsType: String
  readOnly: Boolean
  volumeID: String!
}

type K8s__io___api___core___v1__PreferredSchedulingTerm {
  preference: K8s__io___api___core___v1__NodeSelectorTerm!
  weight: Int!
}

input K8s__io___api___core___v1__PreferredSchedulingTermIn {
  preference: K8s__io___api___core___v1__NodeSelectorTermIn!
  weight: Int!
}

type K8s__io___api___core___v1__QuobyteVolumeSource {
  group: String
  readOnly: Boolean
  registry: String!
  tenant: String
  user: String
  volume: String!
}

input K8s__io___api___core___v1__QuobyteVolumeSourceIn {
  group: String
  readOnly: Boolean
  registry: String!
  tenant: String
  user: String
  volume: String!
}

type K8s__io___api___core___v1__RBDPersistentVolumeSource {
  fsType: String
  image: String!
  keyring: String
  monitors: [String!]!
  pool: String
  readOnly: Boolean
  secretRef: K8s__io___api___core___v1__SecretReference
  user: String
}

input K8s__io___api___core___v1__RBDPersistentVolumeSourceIn {
  fsType: String
  image: String!
  keyring: String
  monitors: [String!]!
  pool: String
  readOnly: Boolean
  secretRef: K8s__io___api___core___v1__SecretReferenceIn
  user: String
}

type K8s__io___api___core___v1__ResourceClaim {
  name: String!
}

input K8s__io___api___core___v1__ResourceClaimIn {
  name: String!
}

type K8s__io___api___core___v1__ResourceRequirements {
  claims: [K8s__io___api___core___v1__ResourceClaim!]
  limits: Map
  requests: Map
}

input K8s__io___api___core___v1__ResourceRequirementsIn {
  claims: [K8s__io___api___core___v1__ResourceClaimIn!]
  limits: Map
  requests: Map
}

type K8s__io___api___core___v1__ScaleIOPersistentVolumeSource {
  fsType: String
  gateway: String!
  protectionDomain: String
  readOnly: Boolean
  secretRef: K8s__io___api___core___v1__SecretReference
  sslEnabled: Boolean
  storageMode: String
  storagePool: String
  system: String!
  volumeName: String
}

input K8s__io___api___core___v1__ScaleIOPersistentVolumeSourceIn {
  fsType: String
  gateway: String!
  protectionDomain: String
  readOnly: Boolean
  secretRef: K8s__io___api___core___v1__SecretReferenceIn
  sslEnabled: Boolean
  storageMode: String
  storagePool: String
  system: String!
  volumeName: String
}

type K8s__io___api___core___v1__Secret {
  apiVersion: String
  data: Map
  immutable: Boolean
  kind: String
  metadata: Metadata
  stringData: Map
  type: K8s__io___api___core___v1__SecretType
}

type K8s__io___api___core___v1__SecretReference {
  name: String
  namespace: String
}

input K8s__io___api___core___v1__SecretReferenceIn {
  name: String
  namespace: String
}

enum K8s__io___api___core___v1__SecretType {
  bootstrap__kubernetes__io___token
  kubernetes__io___basic____auth
  kubernetes__io___dockercfg
  kubernetes__io___dockerconfigjson
  kubernetes__io___service____account____token
  kubernetes__io___ssh____auth
  kubernetes__io___tls
  Opaque
}

type K8s__io___api___core___v1__StorageOSPersistentVolumeSource {
  fsType: String
  readOnly: Boolean
  secretRef: K8s__io___api___core___v1__ObjectReference
  volumeName: String
  volumeNamespace: String
}

input K8s__io___api___core___v1__StorageOSPersistentVolumeSourceIn {
  fsType: String
  readOnly: Boolean
  secretRef: K8s__io___api___core___v1__ObjectReferenceIn
  volumeName: String
  volumeNamespace: String
}

type K8s__io___api___core___v1__Taint {
  effect: K8s__io___api___core___v1__TaintEffect!
  key: String!
  timeAdded: Date
  value: String
}

enum K8s__io___api___core___v1__TaintEffect {
  NoExecute
  NoSchedule
  PreferNoSchedule
}

input K8s__io___api___core___v1__TaintIn {
  effect: K8s__io___api___core___v1__TaintEffect!
  key: String!
  timeAdded: Date
  value: String
}

type K8s__io___api___core___v1__Toleration {
  effect: K8s__io___api___core___v1__TaintEffect
  key: String
  operator: K8s__io___api___core___v1__TolerationOperator
  tolerationSeconds: Int
  value: String
}

input K8s__io___api___core___v1__TolerationIn {
  effect: K8s__io___api___core___v1__TaintEffect
  key: String
  operator: K8s__io___api___core___v1__TolerationOperator
  tolerationSeconds: Int
  value: String
}

enum K8s__io___api___core___v1__TolerationOperator {
  Equal
  Exists
}

type K8s__io___api___core___v1__TopologySpreadConstraint {
  labelSelector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelector
  matchLabelKeys: [String!]
  maxSkew: Int!
  minDomains: Int
  nodeAffinityPolicy: String
  nodeTaintsPolicy: String
  topologyKey: String!
  whenUnsatisfiable: K8s__io___api___core___v1__UnsatisfiableConstraintAction!
}

input K8s__io___api___core___v1__TopologySpreadConstraintIn {
  labelSelector: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorIn
  matchLabelKeys: [String!]
  maxSkew: Int!
  minDomains: Int
  nodeAffinityPolicy: String
  nodeTaintsPolicy: String
  topologyKey: String!
  whenUnsatisfiable: K8s__io___api___core___v1__UnsatisfiableConstraintAction!
}

type K8s__io___api___core___v1__TypedLocalObjectReference {
  apiGroup: String
  kind: String!
  name: String!
}

input K8s__io___api___core___v1__TypedLocalObjectReferenceIn {
  apiGroup: String
  kind: String!
  name: String!
}

type K8s__io___api___core___v1__TypedObjectReference {
  apiGroup: String
  kind: String!
  name: String!
  namespace: String
}

input K8s__io___api___core___v1__TypedObjectReferenceIn {
  apiGroup: String
  kind: String!
  name: String!
  namespace: String
}

enum K8s__io___api___core___v1__UnsatisfiableConstraintAction {
  DoNotSchedule
  ScheduleAnyway
}

type K8s__io___api___core___v1__VolumeNodeAffinity {
  required: K8s__io___api___core___v1__NodeSelector
}

input K8s__io___api___core___v1__VolumeNodeAffinityIn {
  required: K8s__io___api___core___v1__NodeSelectorIn
}

type K8s__io___api___core___v1__VsphereVirtualDiskVolumeSource {
  fsType: String
  storagePolicyID: String
  storagePolicyName: String
  volumePath: String!
}

input K8s__io___api___core___v1__VsphereVirtualDiskVolumeSourceIn {
  fsType: String
  storagePolicyID: String
  storagePolicyName: String
  volumePath: String!
}

type K8s__io___api___core___v1__WeightedPodAffinityTerm {
  podAffinityTerm: K8s__io___api___core___v1__PodAffinityTerm!
  weight: Int!
}

input K8s__io___api___core___v1__WeightedPodAffinityTermIn {
  podAffinityTerm: K8s__io___api___core___v1__PodAffinityTermIn!
  weight: Int!
}

type K8s__io___api___storage___v1__VolumeAttachmentSource {
  inlineVolumeSpec: K8s__io___api___core___v1__PersistentVolumeSpec
  persistentVolumeName: String
}

input K8s__io___api___storage___v1__VolumeAttachmentSourceIn {
  inlineVolumeSpec: K8s__io___api___core___v1__PersistentVolumeSpecIn
  persistentVolumeName: String
}

type K8s__io___api___storage___v1__VolumeAttachmentSpec {
  attacher: String!
  nodeName: String!
  source: K8s__io___api___storage___v1__VolumeAttachmentSource!
}

input K8s__io___api___storage___v1__VolumeAttachmentSpecIn {
  attacher: String!
  nodeName: String!
  source: K8s__io___api___storage___v1__VolumeAttachmentSourceIn!
}

type K8s__io___api___storage___v1__VolumeAttachmentStatus {
  attached: Boolean!
  attachError: K8s__io___api___storage___v1__VolumeError
  attachmentMetadata: Map
  detachError: K8s__io___api___storage___v1__VolumeError
}

input K8s__io___api___storage___v1__VolumeAttachmentStatusIn {
  attached: Boolean!
  attachError: K8s__io___api___storage___v1__VolumeErrorIn
  attachmentMetadata: Map
  detachError: K8s__io___api___storage___v1__VolumeErrorIn
}

type K8s__io___api___storage___v1__VolumeError {
  message: String
  time: Date
}

input K8s__io___api___storage___v1__VolumeErrorIn {
  message: String
  time: Date
}

enum K8s__io___apimachinery___pkg___api___resource__Format {
  BinarySI
  DecimalExponent
  DecimalSI
}

type K8s__io___apimachinery___pkg___api___resource__Quantity {
  Format: K8s__io___apimachinery___pkg___api___resource__Format!
}

input K8s__io___apimachinery___pkg___api___resource__QuantityIn {
  Format: K8s__io___apimachinery___pkg___api___resource__Format!
}

type K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelector {
  matchExpressions: [K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorRequirement!]
  matchLabels: Map
}

input K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorIn {
  matchExpressions: [K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorRequirementIn!]
  matchLabels: Map
}

enum K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorOperator {
  DoesNotExist
  Exists
  In
  NotIn
}

type K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorRequirement {
  key: String!
  operator: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorOperator!
  values: [String!]
}

input K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorRequirementIn {
  key: String!
  operator: K8s__io___apimachinery___pkg___apis___meta___v1__LabelSelectorOperator!
  values: [String!]
}

type ManagedResource {
  accountName: String!
  apiVersion: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  enabled: Boolean
  environmentName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  projectName: String!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__ManagedResourceSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncedOutputSecretRef: K8s__io___api___core___v1__Secret
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type ManagedResourceEdge {
  cursor: String!
  node: ManagedResource!
}

input ManagedResourceIn {
  apiVersion: String
  displayName: String!
  enabled: Boolean
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__ManagedResourceSpecIn!
}

type ManagedResourceKeyRef {
  key: String!
  mresName: String!
}

input ManagedResourceKeyRefIn {
  key: String!
  mresName: String!
}

type ManagedResourceKeyValueRef {
  key: String!
  mresName: String!
  value: String!
}

input ManagedResourceKeyValueRefIn {
  key: String!
  mresName: String!
  value: String!
}

type ManagedResourcePaginatedRecords {
  edges: [ManagedResourceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

scalar Map

type MatchFilter {
  array: [Any!]
  exact: Any
  matchType: MatchFilterMatchType!
  regex: String
}

input MatchFilterIn {
  array: [Any!]
  exact: Any
  matchType: MatchFilterMatchType!
  regex: String
}

enum MatchFilterMatchType {
  array
  exact
  regex
}

type Metadata {
  annotations: Map
  creationTimestamp: Date!
  deletionTimestamp: Date
  generation: Int!
  labels: Map
  name: String!
  namespace: String
}

input MetadataIn {
  annotations: Map
  labels: Map
  name: String!
  namespace: String
}

type MsvcTemplate {
  category: String!
  displayName: String!
  items: [Github__com___kloudlite___api___apps___infra___internal___entities__MsvcTemplateEntry!]!
}

type Mutation {
  accounts_acceptInvitation(accountName: String!, inviteToken: String!): Boolean!
  accounts_activateAccount(accountName: String!): Boolean!
  accounts_createAccount(account: AccountIn!): Account!
  accounts_deactivateAccount(accountName: String!): Boolean!
  accounts_deleteAccount(accountName: String!): Boolean!
  accounts_deleteInvitation(accountName: String!, invitationId: String!): Boolean!
  accounts_inviteMembers(accountName: String!, invitations: [InvitationIn!]!): [Invitation!]
  accounts_rejectInvitation(accountName: String!, inviteToken: String!): Boolean!
  accounts_removeAccountMembership(accountName: String!, memberId: ID!): Boolean!
  accounts_resendInviteMail(accountName: String!, invitationId: String!): Boolean!
  accounts_updateAccount(account: AccountIn!): Account!
  accounts_updateAccountMembership(accountName: String!, memberId: ID!, role: Github__com___kloudlite___api___apps___iam___types__Role!): Boolean!
  auth_changeEmail(email: String!): Boolean!
  auth_changePassword(currentPassword: String!, newPassword: String!): Boolean!
  auth_clearMetadata: User!
  auth_createRemoteLogin(secret: String): String!
  auth_login(email: String!, password: String!): Session
  auth_logout: Boolean!
  auth_requestResetPassword(email: String!): Boolean!
  auth_resendVerificationEmail: Boolean!
  auth_resetPassword(password: String!, token: String!): Boolean!
  auth_setMetadata(values: Json!): User!
  auth_setRemoteAuthHeader(authHeader: String, loginId: String!): Boolean!
  auth_signup(email: String!, name: String!, password: String!): Session
  auth_verifyEmail(token: String!): Session!
  core_cloneEnvironment(destinationEnvName: String!, displayName: String!, environmentRoutingMode: Github__com___kloudlite___operator___apis___crds___v1__EnvironmentRoutingMode!, projectName: String!, sourceEnvName: String!): Environment
  core_createApp(app: AppIn!, envName: String!, projectName: String!): App
  core_createConfig(config: ConfigIn!, envName: String!, projectName: String!): Config
  core_createEnvironment(env: EnvironmentIn!, projectName: String!): Environment
  core_createImagePullSecret(envName: String!, imagePullSecretIn: ImagePullSecretIn!, projectName: String!): ImagePullSecret
  core_createManagedResource(envName: String!, mres: ManagedResourceIn!, projectName: String!): ManagedResource
  core_createProject(project: ProjectIn!): Project
  core_createProjectManagedService(pmsvc: ProjectManagedServiceIn!, projectName: String!): ProjectManagedService
  core_createRouter(envName: String!, projectName: String!, router: RouterIn!): Router
  core_createSecret(envName: String!, projectName: String!, secret: SecretIn!): Secret
  core_createVPNDevice(vpnDevice: ConsoleVPNDeviceIn!): ConsoleVPNDevice
  core_deleteApp(appName: String!, envName: String!, projectName: String!): Boolean!
  core_deleteConfig(configName: String!, envName: String!, projectName: String!): Boolean!
  core_deleteEnvironment(envName: String!, projectName: String!): Boolean!
  core_deleteImagePullSecret(envName: String!, projectName: String!, secretName: String!): Boolean!
  core_deleteManagedResource(envName: String!, mresName: String!, projectName: String!): Boolean!
  core_deleteProject(name: String!): Boolean!
  core_deleteProjectManagedService(pmsvcName: String!, projectName: String!): Boolean!
  core_deleteRouter(envName: String!, projectName: String!, routerName: String!): Boolean!
  core_deleteSecret(envName: String!, projectName: String!, secretName: String!): Boolean!
  core_deleteVPNDevice(deviceName: String!): Boolean!
  core_interceptApp(appname: String!, deviceName: String!, envName: String!, intercept: Boolean!, projectName: String!): Boolean!
  core_updateApp(app: AppIn!, envName: String!, projectName: String!): App
  core_updateConfig(config: ConfigIn!, envName: String!, projectName: String!): Config
  core_updateEnvironment(env: EnvironmentIn!, projectName: String!): Environment
  core_updateManagedResource(envName: String!, mres: ManagedResourceIn!, projectName: String!): ManagedResource
  core_updateProject(project: ProjectIn!): Project
  core_updateProjectManagedService(pmsvc: ProjectManagedServiceIn!, projectName: String!): ProjectManagedService
  core_updateRouter(envName: String!, projectName: String!, router: RouterIn!): Router
  core_updateSecret(envName: String!, projectName: String!, secret: SecretIn!): Secret
  core_updateVpnClusterName(clusterName: String!, deviceName: String!): Boolean!
  core_updateVPNDevice(vpnDevice: ConsoleVPNDeviceIn!): ConsoleVPNDevice
  core_updateVPNDeviceEnv(deviceName: String!, envName: String!, projectName: String!): Boolean!
  core_updateVpnDeviceNs(deviceName: String!, ns: String!): Boolean!
  core_updateVPNDevicePorts(deviceName: String!, ports: [PortIn!]!): Boolean!
  cr_addBuild(build: BuildIn!): Build
  cr_createCred(credential: CredentialIn!): Credential
  cr_createRepo(repository: RepositoryIn!): Repository
  cr_deleteBuild(id: ID!): Boolean!
  cr_deleteCred(username: String!): Boolean!
  cr_deleteDigest(digest: String!, repoName: String!): Boolean!
  cr_deleteRepo(name: String!): Boolean!
  cr_triggerBuild(id: ID!): Boolean!
  cr_updateBuild(build: BuildIn!, id: ID!): Build
  infra_createBYOKCluster(cluster: BYOKClusterIn!): BYOKCluster
  infra_createCluster(cluster: ClusterIn!): Cluster
  infra_createClusterGroup(cluster: ClusterGroupIn!): ClusterGroup
  infra_createClusterManagedService(clusterName: String!, service: ClusterManagedServiceIn!): ClusterManagedService
  infra_createDomainEntry(domainEntry: DomainEntryIn!): DomainEntry
  infra_createHelmRelease(clusterName: String!, release: HelmReleaseIn!): HelmRelease
  infra_createNodePool(clusterName: String!, pool: NodePoolIn!): NodePool
  infra_createProviderSecret(secret: CloudProviderSecretIn!): CloudProviderSecret
  infra_deleteCluster(name: String!): Boolean!
  infra_deleteClusterGroup(name: String!): Boolean!
  infra_deleteClusterManagedService(clusterName: String!, serviceName: String!): Boolean!
  infra_deleteDomainEntry(domainName: String!): Boolean!
  infra_deleteHelmRelease(clusterName: String!, releaseName: String!): Boolean!
  infra_deleteNodePool(clusterName: String!, poolName: String!): Boolean!
  infra_deleteProviderSecret(secretName: String!): Boolean!
  infra_deletePV(clusterName: String!, pvName: String!): Boolean!
  infra_updateCluster(cluster: ClusterIn!): Cluster
  infra_updateClusterGroup(cluster: ClusterGroupIn!): ClusterGroup
  infra_updateClusterManagedService(clusterName: String!, service: ClusterManagedServiceIn!): ClusterManagedService
  infra_updateDomainEntry(domainEntry: DomainEntryIn!): DomainEntry
  infra_updateHelmRelease(clusterName: String!, release: HelmReleaseIn!): HelmRelease
  infra_updateNodePool(clusterName: String!, pool: NodePoolIn!): NodePool
  infra_updateProviderSecret(secret: CloudProviderSecretIn!): CloudProviderSecret
  infra_upgradeHelmKloudliteAgent(clusterName: String!): Boolean!
  iot_createApp(app: IOTAppIn!, deviceBlueprintName: String!, projectName: String!): IOTApp
  iot_createDeployment(deployment: IOTDeploymentIn!, projectName: String!): IOTDeployment
  iot_createDevice(deploymentName: String!, device: IOTDeviceIn!, projectName: String!): IOTDevice
  iot_createDeviceBlueprint(deviceBlueprint: IOTDeviceBlueprintIn!, projectName: String!): IOTDeviceBlueprint
  iot_createProject(project: IOTProjectIn!): IOTProject
  iot_deleteApp(deviceBlueprintName: String!, name: String!, projectName: String!): Boolean!
  iot_deleteDeployment(name: String!, projectName: String!): Boolean!
  iot_deleteDevice(deploymentName: String!, name: String!, projectName: String!): Boolean!
  iot_deleteDeviceBlueprint(name: String!, projectName: String!): Boolean!
  iot_deleteProject(name: String!): Boolean!
  iot_updateApp(app: IOTAppIn!, deviceBlueprintName: String!, projectName: String!): IOTApp
  iot_updateDeployment(deployment: IOTDeploymentIn!, projectName: String!): IOTDeployment
  iot_updateDevice(deploymentName: String!, device: IOTDeviceIn!, projectName: String!): IOTDevice
  iot_updateDeviceBlueprint(deviceBlueprint: IOTDeviceBlueprintIn!, projectName: String!): IOTDeviceBlueprint
  iot_updateProject(project: IOTProjectIn!): IOTProject
  oAuth_addLogin(code: String!, provider: String!, state: String!): Boolean!
  oAuth_login(code: String!, provider: String!, state: String): Session!
}

type Namespace {
  accountName: String!
  apiVersion: String
  clusterName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: K8s__io___api___core___v1__NamespaceSpec
  status: K8s__io___api___core___v1__NamespaceStatus
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type NamespaceEdge {
  cursor: String!
  node: Namespace!
}

input NamespaceIn {
  apiVersion: String
  kind: String
  metadata: MetadataIn
  spec: K8s__io___api___core___v1__NamespaceSpecIn
  status: K8s__io___api___core___v1__NamespaceStatusIn
}

type NamespacePaginatedRecords {
  edges: [NamespaceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Node {
  accountName: String!
  apiVersion: String
  clusterName: String!
  creationTime: Date!
  id: ID!
  kind: String
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___clusters___v1__NodeSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type NodeEdge {
  cursor: String!
  node: Node!
}

input NodeIn {
  apiVersion: String
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___clusters___v1__NodeSpecIn!
}

type NodePaginatedRecords {
  edges: [NodeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NodePool {
  accountName: String!
  apiVersion: String
  clusterName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___clusters___v1__NodePoolSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type NodePoolEdge {
  cursor: String!
  node: NodePool!
}

input NodePoolIn {
  apiVersion: String
  displayName: String!
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___clusters___v1__NodePoolSpecIn!
}

type NodePoolPaginatedRecords {
  edges: [NodePoolEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OAuthProviderStatus {
  enabled: Boolean!
  provider: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

type Pagination {
  page: Int
  per_page: Int
}

input PaginationIn {
  page: Int
  per_page: Int
}

type PersistentVolume {
  accountName: String!
  apiVersion: String
  clusterName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: K8s__io___api___core___v1__PersistentVolumeSpec
  status: K8s__io___api___core___v1__PersistentVolumeStatus
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type PersistentVolumeClaim {
  accountName: String!
  apiVersion: String
  clusterName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: K8s__io___api___core___v1__PersistentVolumeClaimSpec
  status: K8s__io___api___core___v1__PersistentVolumeClaimStatus
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type PersistentVolumeClaimEdge {
  cursor: String!
  node: PersistentVolumeClaim!
}

type PersistentVolumeClaimPaginatedRecords {
  edges: [PersistentVolumeClaimEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PersistentVolumeEdge {
  cursor: String!
  node: PersistentVolume!
}

input PersistentVolumeIn {
  apiVersion: String
  kind: String
  metadata: MetadataIn
  spec: K8s__io___api___core___v1__PersistentVolumeSpecIn
  status: K8s__io___api___core___v1__PersistentVolumeStatusIn
}

type PersistentVolumePaginatedRecords {
  edges: [PersistentVolumeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Port {
  port: Int
  targetPort: Int
}

input PortIn {
  port: Int
  targetPort: Int
}

type Project {
  accountName: String!
  apiVersion: String
  clusterName: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__ProjectSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type ProjectEdge {
  cursor: String!
  node: Project!
}

input ProjectIn {
  apiVersion: String
  clusterName: String
  displayName: String!
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__ProjectSpecIn!
}

type ProjectManagedService {
  accountName: String!
  apiVersion: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  projectName: String!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__ProjectManagedServiceSpec
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type ProjectManagedServiceEdge {
  cursor: String!
  node: ProjectManagedService!
}

input ProjectManagedServiceIn {
  apiVersion: String
  displayName: String!
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__ProjectManagedServiceSpecIn
}

type ProjectManagedServicePaginatedRecords {
  edges: [ProjectManagedServiceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProjectPaginatedRecords {
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

scalar ProviderDetail

type Query {
  accounts_checkNameAvailability(name: String!): AccountsCheckNameAvailabilityOutput!
  accounts_ensureKloudliteRegistryPullSecrets(accountName: String!): Boolean!
  accounts_getAccount(accountName: String!): Account
  accounts_getAccountMembership(accountName: String!): AccountMembership
  accounts_getInvitation(accountName: String!, invitationId: String!): Invitation
  accounts_listAccounts: [Account]
  accounts_listInvitations(accountName: String!): [Invitation!]
  accounts_listInvitationsForUser(onlyPending: Boolean!): [Invitation!]
  accounts_listMembershipsForAccount(accountName: String!, role: Github__com___kloudlite___api___apps___iam___types__Role): [AccountMembership!]
  accounts_listMembershipsForUser: [AccountMembership!]
  accounts_resyncAccount(accountName: String!): Boolean!
  auth_findByEmail(email: String!): User
  auth_getRemoteLogin(loginId: String!, secret: String!): RemoteLogin
  auth_listOAuthProviders: [OAuthProviderStatus!]
  auth_me: User
  core_checkNameAvailability(envName: String, name: String!, projectName: String, resType: ConsoleResType!): ConsoleCheckNameAvailabilityOutput!
  core_getApp(envName: String!, name: String!, projectName: String!): App
  core_getConfig(envName: String!, name: String!, projectName: String!): Config
  core_getConfigValues(envName: String!, projectName: String!, queries: [ConfigKeyRefIn]): [ConfigKeyValueRef!]
  core_getEnvironment(name: String!, projectName: String!): Environment
  core_getImagePullSecret(envName: String!, name: String!, projectName: String!): ImagePullSecret
  core_getManagedResouceOutputKeys(envName: String!, name: String!, projectName: String!): [String!]!
  core_getManagedResouceOutputKeyValues(envName: String!, keyrefs: [ManagedResourceKeyRefIn], projectName: String!): [ManagedResourceKeyValueRef!]!
  core_getManagedResource(envName: String!, name: String!, projectName: String!): ManagedResource
  core_getProject(name: String!): Project
  core_getProjectManagedService(name: String!, projectName: String!): ProjectManagedService
  core_getRouter(envName: String!, name: String!, projectName: String!): Router
  core_getSecret(envName: String!, name: String!, projectName: String!): Secret
  core_getSecretValues(envName: String!, projectName: String!, queries: [SecretKeyRefIn!]): [SecretKeyValueRef!]
  core_getVPNDevice(name: String!): ConsoleVPNDevice
  core_listApps(envName: String!, pq: CursorPaginationIn, projectName: String!, search: SearchApps): AppPaginatedRecords
  core_listConfigs(envName: String!, pq: CursorPaginationIn, projectName: String!, search: SearchConfigs): ConfigPaginatedRecords
  core_listEnvironments(pq: CursorPaginationIn, projectName: String!, search: SearchEnvironments): EnvironmentPaginatedRecords
  core_listImagePullSecrets(envName: String!, pq: CursorPaginationIn, projectName: String!, search: SearchImagePullSecrets): ImagePullSecretPaginatedRecords
  core_listManagedResources(envName: String!, pq: CursorPaginationIn, projectName: String!, search: SearchManagedResources): ManagedResourcePaginatedRecords
  core_listProjectManagedServices(pq: CursorPaginationIn, projectName: String!, search: SearchProjectManagedService): ProjectManagedServicePaginatedRecords
  core_listProjects(pq: CursorPaginationIn, search: SearchProjects): ProjectPaginatedRecords
  core_listRouters(envName: String!, pq: CursorPaginationIn, projectName: String!, search: SearchRouters): RouterPaginatedRecords
  core_listSecrets(envName: String!, pq: CursorPaginationIn, projectName: String!, search: SearchSecrets): SecretPaginatedRecords
  core_listVPNDevices(pq: CursorPaginationIn, search: CoreSearchVPNDevices): ConsoleVPNDevicePaginatedRecords
  core_listVPNDevicesForUser: [ConsoleVPNDevice!]
  core_restartApp(appName: String!, envName: String!, projectName: String!): Boolean!
  core_restartProjectManagedService(name: String!, projectName: String!): Boolean!
  core_resyncApp(envName: String!, name: String!, projectName: String!): Boolean!
  core_resyncConfig(envName: String!, name: String!, projectName: String!): Boolean!
  core_resyncEnvironment(name: String!, projectName: String!): Boolean!
  core_resyncImagePullSecret(envName: String!, name: String!, projectName: String!): Boolean!
  core_resyncManagedResource(envName: String!, name: String!, projectName: String!): Boolean!
  core_resyncProject(name: String!): Boolean!
  core_resyncProjectManagedService(name: String!, projectName: String!): Boolean!
  core_resyncRouter(envName: String!, name: String!, projectName: String!): Boolean!
  core_resyncSecret(envName: String!, name: String!, projectName: String!): Boolean!
  cr_checkUserNameAvailability(name: String!): CRCheckNameAvailabilityOutput!
  cr_getBuild(id: ID!): Build
  cr_getBuildRun(buildID: ID!, buildRunName: String!): BuildRun
  cr_getCredToken(username: String!): String!
  cr_listBuildRuns(pq: CursorPaginationIn, search: SearchBuildRuns): BuildRunPaginatedRecords
  cr_listBuilds(pagination: CursorPaginationIn, repoName: String!, search: SearchBuilds): BuildPaginatedRecords
  cr_listCreds(pagination: CursorPaginationIn, search: SearchCreds): CredentialPaginatedRecords
  cr_listDigests(pagination: CursorPaginationIn, repoName: String!, search: SearchRepos): DigestPaginatedRecords
  cr_listGithubBranches(pagination: PaginationIn, repoUrl: String!): [GitBranch!]
  cr_listGithubInstallations(pagination: PaginationIn): [GithubInstallation!]
  cr_listGithubRepos(installationId: Int!, pagination: PaginationIn): GithubListRepository
  cr_listGitlabBranches(pagination: PaginationIn, query: String, repoId: String!): [GitBranch!]
  cr_listGitlabGroups(pagination: PaginationIn, query: String): [GitlabGroup!]
  cr_listGitlabRepositories(groupId: String!, pagination: PaginationIn, query: String): [GitlabProject!]
  cr_listRepos(pagination: CursorPaginationIn, search: SearchRepos): RepositoryPaginatedRecords
  cr_searchGithubRepos(organization: String!, pagination: PaginationIn, search: String!): GithubSearchRepository
  infra_checkAwsAccess(cloudproviderName: String!): CheckAwsAccessOutput!
  infra_checkNameAvailability(clusterName: String, name: String!, resType: ResType!): CheckNameAvailabilityOutput!
  infra_getCluster(name: String!): Cluster
  infra_getClusterGroup(name: String!): ClusterGroup
  infra_getClusterManagedService(clusterName: String!, name: String!): ClusterManagedService
  infra_getDomainEntry(domainName: String!): DomainEntry
  infra_getHelmRelease(clusterName: String!, name: String!): HelmRelease
  infra_getManagedServiceTemplate(category: String!, name: String!): Github__com___kloudlite___api___apps___infra___internal___entities__MsvcTemplateEntry
  infra_getNamespace(clusterName: String!, name: String!): Namespace
  infra_getNodePool(clusterName: String!, poolName: String!): NodePool
  infra_getProviderSecret(name: String!): CloudProviderSecret
  infra_getPV(clusterName: String!, name: String!): PersistentVolume
  infra_getPVC(clusterName: String!, name: String!): PersistentVolumeClaim
  infra_getVolumeAttachment(clusterName: String!, name: String!): VolumeAttachment
  infra_listClusterGroups(pagination: CursorPaginationIn, search: SearchClusterGroup): ClusterGroupPaginatedRecords
  infra_listClusterManagedServices(clusterName: String!, pagination: CursorPaginationIn, search: SearchClusterManagedService): ClusterManagedServicePaginatedRecords
  infra_listClusters(pagination: CursorPaginationIn, search: SearchCluster): ClusterPaginatedRecords
  infra_listDomainEntries(pagination: CursorPaginationIn, search: SearchDomainEntry): DomainEntryPaginatedRecords
  infra_listHelmReleases(clusterName: String!, pagination: CursorPaginationIn, search: SearchHelmRelease): HelmReleasePaginatedRecords
  infra_listManagedServiceTemplates: [MsvcTemplate!]
  infra_listNamespaces(clusterName: String!, pq: CursorPaginationIn, search: SearchNamespaces): NamespacePaginatedRecords
  infra_listNodePools(clusterName: String!, pagination: CursorPaginationIn, search: SearchNodepool): NodePoolPaginatedRecords
  infra_listProviderSecrets(pagination: CursorPaginationIn, search: SearchProviderSecret): CloudProviderSecretPaginatedRecords
  infra_listPVCs(clusterName: String!, pq: CursorPaginationIn, search: SearchPersistentVolumeClaims): PersistentVolumeClaimPaginatedRecords
  infra_listPVs(clusterName: String!, pq: CursorPaginationIn, search: SearchPersistentVolumes): PersistentVolumePaginatedRecords
  infra_listVolumeAttachments(clusterName: String!, pq: CursorPaginationIn, search: SearchVolumeAttachments): VolumeAttachmentPaginatedRecords
  iot_checkNameAvailability(deploymentName: String, deviceBlueprintName: String, name: String!, projectName: String!, resType: ResourceType!): IOTConsoleCheckNameAvailabilityOutput!
  iot_getApp(deviceBlueprintName: String!, name: String!, projectName: String!): IOTApp
  iot_getDeployment(name: String!, projectName: String!): IOTDeployment
  iot_getDevice(deploymentName: String!, name: String!, projectName: String!): IOTDevice
  iot_getDeviceBlueprint(name: String!, projectName: String!): IOTDeviceBlueprint
  iot_getProject(name: String!): IOTProject
  iot_listApps(deviceBlueprintName: String!, pq: CursorPaginationIn, projectName: String!, search: SearchIOTApps): IOTAppPaginatedRecords
  iot_listDeployments(pq: CursorPaginationIn, projectName: String!, search: SearchIOTDeployments): IOTDeploymentPaginatedRecords
  iot_listDeviceBlueprints(pq: CursorPaginationIn, projectName: String!, search: SearchIOTDeviceBlueprints): IOTDeviceBlueprintPaginatedRecords
  iot_listDevices(deploymentName: String!, pq: CursorPaginationIn, projectName: String!, search: SearchIOTDevices): IOTDevicePaginatedRecords
  iot_listProjects(pq: CursorPaginationIn, search: SearchIOTProjects): IOTProjectPaginatedRecords
  oAuth_requestLogin(provider: String!, state: String): URL!
}

type RemoteLogin {
  authHeader: String
  status: String!
}

type Repository {
  accountName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  id: ID!
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  name: String!
  recordVersion: Int!
  updateTime: Date!
}

type RepositoryEdge {
  cursor: String!
  node: Repository!
}

input RepositoryIn {
  name: String!
}

type RepositoryPaginatedRecords {
  edges: [RepositoryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

enum ResourceType {
  iot_app
  iot_deployment
  iot_device
  iot_device_blueprint
  iot_project
}

enum ResType {
  cluster
  helm_release
  nodepool
  providersecret
}

type Router {
  accountName: String!
  apiVersion: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  enabled: Boolean
  environmentName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  projectName: String!
  recordVersion: Int!
  spec: Github__com___kloudlite___operator___apis___crds___v1__RouterSpec!
  status: Github__com___kloudlite___operator___pkg___operator__Status
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type RouterEdge {
  cursor: String!
  node: Router!
}

input RouterIn {
  apiVersion: String
  displayName: String!
  enabled: Boolean
  kind: String
  metadata: MetadataIn
  spec: Github__com___kloudlite___operator___apis___crds___v1__RouterSpecIn!
}

type RouterPaginatedRecords {
  edges: [RouterEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input SearchApps {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchBuildRuns {
  buildId: ID
  repoName: MatchFilterIn
}

input SearchBuilds {
  text: MatchFilterIn
}

input SearchCluster {
  cloudProviderName: MatchFilterIn
  isReady: MatchFilterIn
  region: MatchFilterIn
  text: MatchFilterIn
}

input SearchClusterGroup {
  text: MatchFilterIn
}

input SearchClusterManagedService {
  isReady: MatchFilterIn
  text: MatchFilterIn
}

input SearchConfigs {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchCreds {
  text: MatchFilterIn
}

input SearchDomainEntry {
  clusterName: MatchFilterIn
  text: MatchFilterIn
}

input SearchEnvironments {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  projectName: MatchFilterIn
  text: MatchFilterIn
}

input SearchHelmRelease {
  isReady: MatchFilterIn
  text: MatchFilterIn
}

input SearchImagePullSecrets {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchIOTApps {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchIOTDeployments {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchIOTDeviceBlueprints {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchIOTDevices {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchIOTProjects {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchManagedResources {
  isReady: MatchFilterIn
  managedServiceName: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchNamespaces {
  text: MatchFilterIn
}

input SearchNodepool {
  text: MatchFilterIn
}

input SearchPersistentVolumeClaims {
  text: MatchFilterIn
}

input SearchPersistentVolumes {
  text: MatchFilterIn
}

input SearchProjectManagedService {
  isReady: MatchFilterIn
  managedServiceName: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchProjects {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchProviderSecret {
  cloudProviderName: MatchFilterIn
  text: MatchFilterIn
}

input SearchRepos {
  text: MatchFilterIn
}

input SearchRouters {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchSecrets {
  isReady: MatchFilterIn
  markedForDeletion: MatchFilterIn
  text: MatchFilterIn
}

input SearchVolumeAttachments {
  text: MatchFilterIn
}

type Secret {
  accountName: String!
  apiVersion: String
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  data: Map
  displayName: String!
  environmentName: String!
  id: ID!
  immutable: Boolean
  isReadyOnly: Boolean!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  projectName: String!
  recordVersion: Int!
  stringData: Map
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  type: K8s__io___api___core___v1__SecretType
  updateTime: Date!
}

type SecretEdge {
  cursor: String!
  node: Secret!
}

input SecretIn {
  apiVersion: String
  data: Map
  displayName: String!
  immutable: Boolean
  kind: String
  metadata: MetadataIn
  stringData: Map
  type: K8s__io___api___core___v1__SecretType
}

type SecretKeyRef {
  key: String!
  secretName: String!
}

input SecretKeyRefIn {
  key: String!
  secretName: String!
}

type SecretKeyValueRef {
  key: String!
  secretName: String!
  value: String!
}

input SecretKeyValueRefIn {
  key: String!
  secretName: String!
  value: String!
}

type SecretPaginatedRecords {
  edges: [SecretEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Session {
  id: ID!
  loginMethod: String!
  userEmail: String!
  userId: ID!
  userVerified: Boolean!
}

scalar URL

type User {
  accountInvitations(onlyPending: Boolean!): [Invitation!]
  accounts: [AccountMembership!]
  avatar: String
  email: String!
  id: ID!
  invite: String!
  joined: Date!
  metadata: Json
  name: String!
  providerGithub: ProviderDetail
  providerGitlab: ProviderDetail
  providerGoogle: ProviderDetail
  verified: Boolean!
}

type VolumeAttachment {
  accountName: String!
  apiVersion: String
  clusterName: String!
  createdBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  creationTime: Date!
  displayName: String!
  id: ID!
  kind: String
  lastUpdatedBy: Github__com___kloudlite___api___common__CreatedOrUpdatedBy!
  markedForDeletion: Boolean
  metadata: Metadata
  recordVersion: Int!
  spec: K8s__io___api___storage___v1__VolumeAttachmentSpec!
  status: K8s__io___api___storage___v1__VolumeAttachmentStatus
  syncStatus: Github__com___kloudlite___api___pkg___types__SyncStatus!
  updateTime: Date!
}

type VolumeAttachmentEdge {
  cursor: String!
  node: VolumeAttachment!
}

input VolumeAttachmentIn {
  apiVersion: String
  kind: String
  metadata: MetadataIn
  spec: K8s__io___api___storage___v1__VolumeAttachmentSpecIn!
  status: K8s__io___api___storage___v1__VolumeAttachmentStatusIn
}

type VolumeAttachmentPaginatedRecords {
  edges: [VolumeAttachmentEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}
